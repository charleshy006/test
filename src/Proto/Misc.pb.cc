// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Misc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Misc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MiscProto {

namespace {

const ::google::protobuf::Descriptor* stSynMainSnalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMainSnalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynMailAttach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMailAttach_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynDetailMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynDetailMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynAllMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynAllMail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllMail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllMail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqReadMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqReadMail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReadMail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReadMail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetMailInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetMailInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetMailInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqFetchAttach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqFetchAttach_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFetchAttach_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFetchAttach_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFetchAttachResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFetchAttachResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFetchAttachResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFetchAttachResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFetchAttachResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReceiveMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReceiveMail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveMail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveMail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRewardInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRewardInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRewardInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRewardInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRewardInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRewardInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSignReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSignReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSignReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSignReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGetSignRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGetSignRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetSignRewardResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetSignRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetSignRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenSvrReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenSvrReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenSvrReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenSvrReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGetOpenSvrRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGetOpenSvrRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetOpenSvrRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetOpenSvrRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetOpenSvrRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLvReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLvReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLvReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLvReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLvRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLvRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLvRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLvRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLvRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOnlineReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOnlineReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOnlineReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOnlineReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGetOnlineRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGetOnlineRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetOnlineRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetOnlineRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetOnlineRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyStarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyStarInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyStarInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyStarInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBuyStar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBuyStar_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyStar_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyStar_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyStarResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyStarResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyStarResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyStarResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyStarResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqOpenDrawWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOpenDrawWindow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqOpenDrawWindow_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqOpenDrawWindow_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDrawWindowInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDrawWindowInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawWindowInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawWindowInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDraw_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDraw_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDraw_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynDrawItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynDrawItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stDrawResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDrawResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynMyTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMyTitle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMyTitle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMyTitle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stActiveOneTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stActiveOneTitle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stActiveOneTitle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stActiveOneTitle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stActiveTitleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stActiveTitleResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stActiveTitleResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stActiveTitleResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stActiveTitleResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stObtainOneTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stObtainOneTitle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stObtainOneTitle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stObtainOneTitle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyInvestPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyInvestPlan_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyInvestPlan_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyInvestPlan_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyInvestPlanResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyInvestPlanResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyInvestPlanResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyInvestPlanResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyInvestPlanResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqInvestPlanReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqInvestPlanReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqInvestPlanReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqInvestPlanReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInvestPlanRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInvestPlanRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvestPlanRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvestPlanRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvestPlanRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqEatDinner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEatDinner_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEatDinner_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEatDinner_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEatDinnerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEatDinnerResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEatDinnerResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEatDinnerResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEatDinnerResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynActivityData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynActivityData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynActivityData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenCaptureTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenCaptureTreasure_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenCaptureTreasure_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenCaptureTreasure_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynCaptureTreasureInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynCaptureTreasureInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetCaptureTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetCaptureTreasure_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCaptureTreasure_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCaptureTreasure_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCombineTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCombineTreasure_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCombineTreasure_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCombineTreasure_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCombineTreasureResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCombineTreasureResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCombineTreasureResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCombineTreasureResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCombineTreasureResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyPeaceModuleTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyPeaceModuleTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTime_eType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyPeaceModuleTimeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyPeaceModuleTimeResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTimeResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTimeResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTimeResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCaptureTreasureUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCaptureTreasureUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqChallengeUserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqChallengeUserList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChallengeUserList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChallengeUserList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetChallengeUserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetChallengeUserList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetChallengeUserList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetChallengeUserList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCaptureUserTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCaptureUserTreasure_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCaptureUserTreasure_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCaptureUserTreasure_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynCaptureReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynCaptureReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* stCaptureUserTreasureResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCaptureUserTreasureResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCaptureUserTreasureResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCaptureUserTreasureResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCaptureUserTreasureResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynTreasureNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynTreasureNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynTreasureNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynTreasureNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelActiveTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelActiveTitle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelActiveTitle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelActiveTitle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelActiveTitleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelActiveTitleResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelActiveTitleResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelActiveTitleResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynSpriteInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynSpriteInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynAllSprite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynAllSprite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllSprite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllSprite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUnlockedSprite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUnlockedSprite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUnlockedSprite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUnlockedSprite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUnlockedSpriteResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUnlockedSpriteResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockedSpriteResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockedSpriteResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnlockedSpriteResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddSprite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddSprite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddSprite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddSprite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLevelupSprite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLevelupSprite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelupSprite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelupSprite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLevelupSpriteResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLevelupSpriteResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelupSpriteResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelupSpriteResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelupSpriteResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSpriteFollowMaster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSpriteFollowMaster_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteFollowMaster_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteFollowMaster_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSpriteFollowMasterResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSpriteFollowMasterResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteFollowMasterResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteFollowMasterResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteFollowMasterResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAvaibleActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAvaibleActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAvaibleActivity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAvaibleActivity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynActivityStepReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynActivityStepReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynActivityStepOptionalReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynActivityStepOptionalReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynActivityStepInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynActivityStepInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetAvaibleActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetAvaibleActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetAvaibleActivity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetAvaibleActivity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAcitivityReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAcitivityReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAcitivityReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAcitivityReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stActivityRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stActivityRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stActivityRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stActivityRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stActivityRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqWorldBossDamageRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqWorldBossDamageRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqWorldBossDamageRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqWorldBossDamageRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWorldBossDamageSortItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWorldBossDamageSortItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetWorldBossDamageRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetWorldBossDamageRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetWorldBossDamageRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetWorldBossDamageRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenWorldBossWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenWorldBossWin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenWorldBossWin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenWorldBossWin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetOpenWorldBossWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetOpenWorldBossWin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOpenWorldBossWin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOpenWorldBossWin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBossWorldMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBossWorldMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBossWorldMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBossWorldMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetBossWorldMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetBossWorldMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetBossWorldMatch_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetBossWorldMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetBossWorldMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqClearWorldBossActivityCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqClearWorldBossActivityCD_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqClearWorldBossActivityCD_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqClearWorldBossActivityCD_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stClearWorldBossActivityCDResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stClearWorldBossActivityCDResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stClearWorldBossActivityCDResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stClearWorldBossActivityCDResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stClearWorldBossActivityCDResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRaiseDamageInWorldBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRaiseDamageInWorldBoss_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRaiseDamageInWorldBoss_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRaiseDamageInWorldBoss_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRaiseDamageInWorldBossResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRaiseDamageInWorldBossResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRaiseDamageInWorldBossResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRaiseDamageInWorldBossResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRaiseDamageInWorldBossResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelWorldBossMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelWorldBossMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelWorldBossMatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelWorldBossMatchResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatchResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatchResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatchResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stQueryDrawHeroActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQueryDrawHeroActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stQueryDrawHeroActivity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stQueryDrawHeroActivity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDrawHeroActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDrawHeroActivityInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawHeroActivityInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawHeroActivityInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawHeroScoreReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawHeroScoreReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawHeroScoreReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawHeroScoreReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDrawHeroScoreRewardRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDrawHeroScoreRewardRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroScoreRewardRet_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroScoreRewardRet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroScoreRewardRet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawHeroRankReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawHeroRankReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawHeroRankReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawHeroRankReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDrawHeroRankReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDrawHeroRankReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCompensationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCompensationList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCompensationList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCompensationList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCompensationItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCompensationItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stCompensationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCompensationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetCompensationList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetCompensationList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCompensationList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCompensationList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGotCompensation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGotCompensation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGotCompensation_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGotCompensation_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGotCompensationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGotCompensationResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotCompensationResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotCompensationResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGotCompensationResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReq7DayActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReq7DayActivityInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReq7DayActivityInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReq7DayActivityInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynSDGoalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynSDGoalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRet7DayActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRet7DayActivityInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRet7DayActivityInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRet7DayActivityInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSevenDayReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSevenDayReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSevenDayReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSevenDayReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSevenDayRewardRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSevenDayRewardRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSevenDayRewardRet_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSevenDayRewardRet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSevenDayRewardRet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSevenDayHasRewardTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSevenDayHasRewardTip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSevenDayHasRewardTip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSevenDayHasRewardTip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAppStoreCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAppStoreCfg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAppStoreCfg_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAppStoreCfg_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOpenWindowTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOpenWindowTip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenWindowTip_eAction_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenWindowTip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenWindowTip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRechargeActivityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRechargeActivityList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRechargeActivityList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRechargeActivityList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRechargeActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRechargeActivityInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetRechargeActivityList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRechargeActivityList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRechargeActivityList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRechargeActivityList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRechargeActivtiyReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRechargeActivtiyReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRechargeActivtiyReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRechargeActivtiyReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRechargeActivityReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRechargeActivityReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRechargeActivityReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRechargeActivityReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRechargeActivityReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynInvestigation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynInvestigation_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynAllInvestigation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynAllInvestigation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllInvestigation_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllInvestigation_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInvestAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInvestAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqInvestgationReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqInvestgationReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqInvestgationReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqInvestgationReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInvestgationRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInvestgationRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvestgationRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvestgationRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvestgationRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqActivityShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqActivityShop_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqActivityShop_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqActivityShop_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stActivityShopList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stActivityShopList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stActivityShopList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stActivityShopList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLuchShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLuchShopInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLuchShopInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLuchShopInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynLuckShopTodayRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynLuckShopTodayRecharge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynLuckShopTodayRecharge_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynLuckShopTodayRecharge_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLuckShopReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLuckShopReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLuckShopReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLuckShopReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLuckShopRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLuckShopRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLuckShopRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLuckShopRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLuckShopRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSaveOpenLuckShopWinTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSaveOpenLuckShopWinTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSaveOpenLuckShopWinTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSaveOpenLuckShopWinTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLuckShopRechargeMeetCondTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLuckShopRechargeMeetCondTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLuckShopRechargeMeetCondTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLuckShopRechargeMeetCondTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenGuardWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenGuardWin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenGuardWin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenGuardWin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuardEnemy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuardEnemy_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGuardBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuardBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGuardDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuardDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGuardWinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuardWinInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuardWinInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuardWinInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetInterceptCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetInterceptCD_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetInterceptCD_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetInterceptCD_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetInterceptCDResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetInterceptCDResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetInterceptCDResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetInterceptCDResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetInterceptCDResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetInterceptNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetInterceptNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetInterceptNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetInterceptNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResetInterceptNumResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResetInterceptNumResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetInterceptNumResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetInterceptNumResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResetInterceptNumResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGuardDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGuardDetailInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuardDetailInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuardDetailInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetGuardDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetGuardDetailInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuardDetailInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuardDetailInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqIntercept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqIntercept_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqIntercept_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqIntercept_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stIntercerptResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stIntercerptResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stIntercerptResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stIntercerptResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stIntercerptResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGuard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuard_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuard_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetGuardWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetGuardWin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuardWin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuardWin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSummonHighQualityGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSummonHighQualityGuard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSummonHighQualityGuard_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSummonHighQualityGuard_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSummonHighQualityGuardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSummonHighQualityGuardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSummonHighQualityGuardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSummonHighQualityGuardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSummonHighQualityGuardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGuardInspired_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGuardInspired_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuardInspired_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuardInspired_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuardInspiredResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuardInspiredResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuardInspiredResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuardInspiredResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuardInspiredResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRefreshGuardQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRefreshGuardQuality_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRefreshGuardQualityResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRefreshGuardQualityResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRefreshGuardQualityResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRefreshGuardQualityResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRefreshGuardQualityResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCanHelpGuardFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCanHelpGuardFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCanHelpGuardFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCanHelpGuardFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHelpGaurdFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHelpGaurdFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetCanHelpGuardFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetCanHelpGuardFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCanHelpGuardFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetCanHelpGuardFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInviteFriendForHelpGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInviteFriendForHelpGuard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuard_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuard_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInviteFriendForHelpGuardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInviteFriendForHelpGuardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAskFriendHelpGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAskFriendHelpGuard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAskFriendHelpGuard_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAskFriendHelpGuard_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplyHelpGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplyHelpGuard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyHelpGuard_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyHelpGuard_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplyHelpGuardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplyHelpGuardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyHelpGuardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyHelpGuardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyHelpGuardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserAgreeHelpGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserAgreeHelpGuard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserAgreeHelpGuard_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserAgreeHelpGuard_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBeginGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBeginGuard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginGuard_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginGuard_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBeginGuardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBeginGuardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginGuardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginGuardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginGuardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInterceptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInterceptInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqInterceptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqInterceptInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqInterceptInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqInterceptInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetInterceptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetInterceptInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetInterceptInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetInterceptInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRechargeActivityInfoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRechargeActivityInfoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stNotifyRechargeActivityInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyRechargeActivityInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyRechargeActivityInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyRechargeActivityInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLuckShopRefreshResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLuckShopRefreshResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLuckShopRefreshResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLuckShopRefreshResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyGuardFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyGuardFinish_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGuardFinish_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGuardFinish_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyFriendGuardFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyFriendGuardFinish_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyFriendGuardFinish_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyFriendGuardFinish_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyInterceptResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyInterceptResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyInterceptResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyInterceptResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplyNotifyIntercept_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplyNotifyIntercept_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyNotifyIntercept_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyNotifyIntercept_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stQuickFinishGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQuickFinishGuard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stQuickFinishGuard_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stQuickFinishGuard_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stQuickFinishGuardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQuickFinishGuardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stQuickFinishGuardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stQuickFinishGuardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stQuickFinishGuardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyDelTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyDelTitle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyDelTitle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyDelTitle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBeInterceptTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBeInterceptTip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeInterceptTip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeInterceptTip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOnlineNotifyNewInterceptInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOnlineNotifyNewInterceptInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOnlineNotifyNewInterceptInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOnlineNotifyNewInterceptInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenLimitFashionDrawWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenLimitFashionDrawWin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenLimitFashionDrawWin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenLimitFashionDrawWin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetLimitFashionDrawWinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetLimitFashionDrawWinInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLimitFashionDrawWinInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLimitFashionDrawWinInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawLimitFashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawLimitFashion_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawLimitFashion_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawLimitFashion_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDrawLimitFashionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDrawLimitFashionResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawLimitFashionResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawLimitFashionResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawLimitFashionResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExchangeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExchangeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynExchangeActivityiStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynExchangeActivityiStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynExchangeActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynExchangeActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetExchangeActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetExchangeActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExchangeActivity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetExchangeActivity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqExchangeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqExchangeItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExchangeItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqExchangeItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExchangeItemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExchangeItemResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stExchangeItemResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExchangeItemResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExchangeItemResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRecycleRechargeActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRecycleRechargeActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSendRecycleRechargeActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendRecycleRechargeActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendRecycleRechargeActivity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendRecycleRechargeActivity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRecycleRechargeActReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRecycleRechargeActReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecycleRechargeActReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecycleRechargeActReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRecycleRechargeActReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRecycleRechargeActReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRecycleRechargeActReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRecycleRechargeActReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRecycleRechargeActReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCommonActInfoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCommonActInfoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRefreshCommonActInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshCommonActInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshCommonActInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshCommonActInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAKeyFetchAttach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAKeyFetchAttach_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAKeyFetchAttach_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAKeyFetchAttach_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAKeyFetchAttachResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAKeyFetchAttachResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAKeyFetchAttachResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAKeyFetchAttachResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAKeyFetchAttachResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGloryfashion_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGloryfashion_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGloryfashion_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGloryfashion_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGloryfashionResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGloryfashionResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGloryfashionResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGloryfashionResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGloryfashionResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDevilCallItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDevilCallItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCallItem_eRewardStatus_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAllDevilCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAllDevilCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAllDevilCall_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAllDevilCall_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetAllDevilCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetAllDevilCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetAllDevilCall_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetAllDevilCall_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetAllDevilCall_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDevilCallReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDevilCallReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDevilCallReward_eType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDevilCallReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDevilCallReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDevilCallReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDevilCallReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_eType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDevilCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDevilCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDevilCall_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDevilCall_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDevilCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDevilCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDevilCall_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDevilCall_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDevilCall_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDevilCallSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDevilCallSummary_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDevilCallSummary_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDevilCallSummary_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDevilCallSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDevilCallSummary_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDevilCallSummary_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDevilCallSummary_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqPayType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPayType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetPayType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetPayType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetPayType_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetPayType_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetPayType_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOperateActvity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOperateActvity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOperateActvity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOperateActvity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOperateActvityItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOperateActvityItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stOperateActvityItems_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOperateActvityItems_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetOperateActvity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetOperateActvity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOperateActvity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOperateActvity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOperateActvityReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOperateActvityReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOperateActvityReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOperateActvityReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetOperateActvityReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetOperateActvityReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOperateActvityReward_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOperateActvityReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOperateActvityReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqIllusionSprite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqIllusionSprite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqIllusionSprite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqIllusionSprite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stIllusionSpriteSkillItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stIllusionSpriteSkillItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetIllusionSprite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetIllusionSprite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetIllusionSprite_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetIllusionSprite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetIllusionSprite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* illusionSpriteEatItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  illusionSpriteEatItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqIllusionSpriteEat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqIllusionSpriteEat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteEat_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteEat_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetIllusionSpriteEat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetIllusionSpriteEat_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteEat_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteEat_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteEat_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqIllusionSpriteSkillUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqIllusionSpriteSkillUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteSkillUp_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteSkillUp_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetIllusionSpriteSkillUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetIllusionSpriteSkillUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteSkillUp_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteSkillUp_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteSkillUp_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRepOpenDiscoverWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRepOpenDiscoverWindow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRepOpenDiscoverWindow_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRepOpenDiscoverWindow_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOpenDiscoverWindowResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOpenDiscoverWindowResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenDiscoverWindowResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenDiscoverWindowResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqPlayDice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPlayDice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPlayDice_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPlayDice_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPlayDiceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPlayDiceResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPlayDiceResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPlayDiceResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPlayDiceResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGetOrGiveUpTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGetOrGiveUpTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGetOrGiveUpTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGetOrGiveUpTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGetTaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGetTaskResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetTaskResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetTaskResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetTaskResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGiveUpTaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiveUpTaskResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveUpTaskResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveUpTaskResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveUpTaskResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRefreshNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRefreshNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshNumResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshNumResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshNumResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGetIntegralReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGetIntegralReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGetIntegralReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGetIntegralReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGetIntegralRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGetIntegralRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetIntegralRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetIntegralRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetIntegralRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGiveReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGiveReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGiveReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGiveReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGiveRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiveRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLuckyDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLuckyDraw_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLuckyDraw_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLuckyDraw_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLuckyDrawPointRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLuckyDrawPointRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stLuckyDrawRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLuckyDrawRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stLuckyDrawUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLuckyDrawUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetLuckyDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetLuckyDraw_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLuckyDraw_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLuckyDraw_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLuckyDrawReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLuckyDrawReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLuckyDrawReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLuckyDrawReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetLuckyDrawReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetLuckyDrawReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLuckyDrawReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLuckyDrawReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLuckyDrawReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLuckyDrawPointReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLuckyDrawPointReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLuckyDrawPointReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLuckyDrawPointReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetLuckyDrawPointReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetLuckyDrawPointReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLuckyDrawPointReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLuckyDrawPointReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetLuckyDrawPointReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRedPointRuls_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRedPointRuls_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRedPointRuls_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRedPointRuls_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRedPointRulsResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRedPointRulsResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRedPointRulsResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRedPointRulsResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqInviteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqInviteFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqInviteFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqInviteFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InviteFriendReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteFriendReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetInviteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetInviteFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetInviteFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetInviteFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawInviteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawInviteFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawInviteFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawInviteFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDrawInviteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDrawInviteFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawInviteFriend_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawInviteFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawInviteFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUseInviteCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUseInviteCode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseInviteCode_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUseInviteCode_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetUseInviteCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetUseInviteCode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseInviteCode_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseInviteCode_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetUseInviteCode_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqShareInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqShareInvite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqShareInvite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqShareInvite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetShareInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetShareInvite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetShareInvite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetShareInvite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDailyShareInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDailyShareInvite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDailyShareInvite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDailyShareInvite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDailyShareInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDailyShareInvite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDailyShareInvite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDailyShareInvite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawDailyShareReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawDailyShareReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawDailyShareReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawDailyShareReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDrawDailyShareReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDrawDailyShareReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawDailyShareReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawDailyShareReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawDailyShareReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawOnceShareReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawOnceShareReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawOnceShareReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawOnceShareReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDrawOnceShareReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDrawOnceShareReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawOnceShareReward_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawOnceShareReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawOnceShareReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyInterceptServerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyInterceptServerResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyInterceptServerResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyInterceptServerResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyInterceptServerResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqReceiveState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqReceiveState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReceiveState_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReceiveState_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReceiveStateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReceiveStateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveStateResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveStateResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqReceiveReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqReceiveReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReceiveReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReceiveReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReceiveRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReceiveRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAcitivityLimitPetItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAcitivityLimitPetItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSendAllAcitivityLimitPet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendAllAcitivityLimitPet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendAllAcitivityLimitPet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendAllAcitivityLimitPet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendLateWalfareActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendLateWalfareActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendLateWalfareActivity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendLateWalfareActivity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawLateWalfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawLateWalfare_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawLateWalfare_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawLateWalfare_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDrawLateWalfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDrawLateWalfare_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawLateWalfare_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawLateWalfare_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawLateWalfare_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResGetBackItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResGetBackItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSendAllResGetBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendAllResGetBack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendAllResGetBack_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendAllResGetBack_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawResGetBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawResGetBack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawResGetBack_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawResGetBack_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDrawResGetBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDrawResGetBack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawResGetBack_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawResGetBack_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawResGetBack_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawAllResGetBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawAllResGetBack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawAllResGetBack_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawAllResGetBack_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDrawAllResGetBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDrawAllResGetBack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawAllResGetBack_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawAllResGetBack_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDrawAllResGetBack_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenMonsterWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenMonsterWindow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenMonsterWindow_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenMonsterWindow_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOpenMonsterWindowResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOpenMonsterWindowResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenMonsterWindowResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenMonsterWindowResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAttackMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAttackMonster_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAttackMonster_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAttackMonster_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAttackMonsterResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAttackMonsterResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAttackMonsterResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAttackMonsterResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAttackMonsterResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBuyAttackTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBuyAttackTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyAttackTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyAttackTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyAttackTimeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyAttackTimeResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyAttackTimeResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyAttackTimeResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyAttackTimeResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAKeyAttackMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAKeyAttackMonster_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAKeyAttackMonster_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAKeyAttackMonster_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAKeyAttackMonsterResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAKeyAttackMonsterResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAKeyAttackMonsterResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAKeyAttackMonsterResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAKeyAttackMonsterResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynTipItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynTipItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stObtainItemTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stObtainItemTip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserOnline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserOnline_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserOnline_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserOnline_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stConsumeItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stConsumeItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqMountLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqMountLevelUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMountLevelUp_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMountLevelUp_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMountLevelUpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMountLevelUpResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMountLevelUpResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMountLevelUpResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMountLevelUpResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqButtleMount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqButtleMount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqButtleMount_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqButtleMount_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stButtleMountResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stButtleMountResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stButtleMountResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stButtleMountResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stButtleMountResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqMountFollow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqMountFollow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMountFollow_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMountFollow_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMountFollowResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMountFollowResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMountFollowResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMountFollowResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMountFollowResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqMountUnreal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqMountUnreal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMountUnreal_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMountUnreal_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMountUnrealResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMountUnrealResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMountUnrealResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMountUnrealResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMountUnrealResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenMountGrowWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenMountGrowWindow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenMountGrowWindow_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenMountGrowWindow_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOpenMountGrowWindowResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOpenMountGrowWindowResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenMountGrowWindowResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOpenMountGrowWindowResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLevelWflfareInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLevelWflfareInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stHasGotRewardWflfareInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHasGotRewardWflfareInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHasGotRewardWflfareInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHasGotRewardWflfareInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqReceiveWflfare_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqReceiveWflfare_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReceiveWflfare_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReceiveWflfare_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReceiveWflfareResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReceiveWflfareResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveWflfareResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveWflfareResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveWflfareResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqPaySign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPaySign_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPaySign_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPaySign_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetPaySign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetPaySign_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetPaySign_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetPaySign_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqServerPay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqServerPay_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqServerPay_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqServerPay_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetServerPay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetServerPay_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetServerPay_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetServerPay_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetServerPay_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSummonReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSummonReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSummonReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSummonReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSummonRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSummonRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSummonRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSummonRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSummonRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSummonData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSummonData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSummonData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSummonData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSummonDataResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSummonDataResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSummonDataResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSummonDataResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuySummonPlanResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuySummonPlanResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuySummonPlanResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuySummonPlanResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuySummonPlanResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRechargeCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRechargeCheck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRechargeCheck_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRechargeCheck_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRechargeCheckResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRechargeCheckResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRechargeCheckResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRechargeCheckResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRechargeCheckResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eAttachStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eMailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eDrawType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eTreasureType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eCombineItem_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eCaptureType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eActivityType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eSevenDayGoalType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eSevenDayGoal_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eLevelUpType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Misc_2eproto() {
  protobuf_AddDesc_Misc_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Misc.proto");
  GOOGLE_CHECK(file != NULL);
  stSynMainSnalInfo_descriptor_ = file->message_type(0);
  static const int stSynMainSnalInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMainSnalInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMainSnalInfo, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMainSnalInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMainSnalInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMainSnalInfo, isread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMainSnalInfo, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMainSnalInfo, isfetchattach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMainSnalInfo, hasattach_),
  };
  stSynMainSnalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMainSnalInfo_descriptor_,
      stSynMainSnalInfo::default_instance_,
      stSynMainSnalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMainSnalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMainSnalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMainSnalInfo));
  stSynMailAttach_descriptor_ = file->message_type(1);
  static const int stSynMailAttach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMailAttach, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMailAttach, num_),
  };
  stSynMailAttach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMailAttach_descriptor_,
      stSynMailAttach::default_instance_,
      stSynMailAttach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMailAttach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMailAttach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMailAttach));
  stSynDetailMailInfo_descriptor_ = file->message_type(2);
  static const int stSynDetailMailInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, sendername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, isread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, mailtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, isfetchattach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, attachs_),
  };
  stSynDetailMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynDetailMailInfo_descriptor_,
      stSynDetailMailInfo::default_instance_,
      stSynDetailMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDetailMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynDetailMailInfo));
  stSynAllMail_descriptor_ = file->message_type(3);
  static const int stSynAllMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllMail, mailinfos_),
  };
  stSynAllMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynAllMail_descriptor_,
      stSynAllMail::default_instance_,
      stSynAllMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynAllMail));
  stSynAllMail_ProtoModID_descriptor_ = stSynAllMail_descriptor_->enum_type(0);
  stSynAllMail_ProtoFunID_descriptor_ = stSynAllMail_descriptor_->enum_type(1);
  stReqReadMail_descriptor_ = file->message_type(4);
  static const int stReqReadMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReadMail, id_),
  };
  stReqReadMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqReadMail_descriptor_,
      stReqReadMail::default_instance_,
      stReqReadMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReadMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReadMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqReadMail));
  stReqReadMail_ProtoModID_descriptor_ = stReqReadMail_descriptor_->enum_type(0);
  stReqReadMail_ProtoFunID_descriptor_ = stReqReadMail_descriptor_->enum_type(1);
  stRetMailInfo_descriptor_ = file->message_type(5);
  static const int stRetMailInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMailInfo, mailinfo_),
  };
  stRetMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetMailInfo_descriptor_,
      stRetMailInfo::default_instance_,
      stRetMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetMailInfo));
  stRetMailInfo_ProtoModID_descriptor_ = stRetMailInfo_descriptor_->enum_type(0);
  stRetMailInfo_ProtoFunID_descriptor_ = stRetMailInfo_descriptor_->enum_type(1);
  stReqFetchAttach_descriptor_ = file->message_type(6);
  static const int stReqFetchAttach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFetchAttach, id_),
  };
  stReqFetchAttach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqFetchAttach_descriptor_,
      stReqFetchAttach::default_instance_,
      stReqFetchAttach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFetchAttach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFetchAttach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqFetchAttach));
  stReqFetchAttach_ProtoModID_descriptor_ = stReqFetchAttach_descriptor_->enum_type(0);
  stReqFetchAttach_ProtoFunID_descriptor_ = stReqFetchAttach_descriptor_->enum_type(1);
  stFetchAttachResult_descriptor_ = file->message_type(7);
  static const int stFetchAttachResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchAttachResult, result_),
  };
  stFetchAttachResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFetchAttachResult_descriptor_,
      stFetchAttachResult::default_instance_,
      stFetchAttachResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchAttachResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchAttachResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFetchAttachResult));
  stFetchAttachResult_Result_descriptor_ = stFetchAttachResult_descriptor_->enum_type(0);
  stFetchAttachResult_ProtoModID_descriptor_ = stFetchAttachResult_descriptor_->enum_type(1);
  stFetchAttachResult_ProtoFunID_descriptor_ = stFetchAttachResult_descriptor_->enum_type(2);
  stReceiveMail_descriptor_ = file->message_type(8);
  static const int stReceiveMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveMail, mailinfo_),
  };
  stReceiveMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReceiveMail_descriptor_,
      stReceiveMail::default_instance_,
      stReceiveMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReceiveMail));
  stReceiveMail_ProtoModID_descriptor_ = stReceiveMail_descriptor_->enum_type(0);
  stReceiveMail_ProtoFunID_descriptor_ = stReceiveMail_descriptor_->enum_type(1);
  stReqRewardInfo_descriptor_ = file->message_type(9);
  static const int stReqRewardInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRewardInfo, flag_),
  };
  stReqRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRewardInfo_descriptor_,
      stReqRewardInfo::default_instance_,
      stReqRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRewardInfo));
  stReqRewardInfo_ProtoModID_descriptor_ = stReqRewardInfo_descriptor_->enum_type(0);
  stReqRewardInfo_ProtoFunID_descriptor_ = stReqRewardInfo_descriptor_->enum_type(1);
  stRetRewardInfo_descriptor_ = file->message_type(10);
  static const int stRetRewardInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRewardInfo, getsignrewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRewardInfo, hasgetsignreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRewardInfo, getopensvrrewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRewardInfo, hasgetopensvrreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRewardInfo, hasgetrewardlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRewardInfo, onlinetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRewardInfo, hasgetonlinereward_),
  };
  stRetRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRewardInfo_descriptor_,
      stRetRewardInfo::default_instance_,
      stRetRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRewardInfo));
  stRetRewardInfo_ProtoModID_descriptor_ = stRetRewardInfo_descriptor_->enum_type(0);
  stRetRewardInfo_ProtoFunID_descriptor_ = stRetRewardInfo_descriptor_->enum_type(1);
  stReqSignReward_descriptor_ = file->message_type(11);
  static const int stReqSignReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSignReward, day_),
  };
  stReqSignReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSignReward_descriptor_,
      stReqSignReward::default_instance_,
      stReqSignReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSignReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSignReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSignReward));
  stReqSignReward_ProtoModID_descriptor_ = stReqSignReward_descriptor_->enum_type(0);
  stReqSignReward_ProtoFunID_descriptor_ = stReqSignReward_descriptor_->enum_type(1);
  stGetSignRewardResult_descriptor_ = file->message_type(12);
  static const int stGetSignRewardResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetSignRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetSignRewardResult, day_),
  };
  stGetSignRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGetSignRewardResult_descriptor_,
      stGetSignRewardResult::default_instance_,
      stGetSignRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetSignRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetSignRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGetSignRewardResult));
  stGetSignRewardResult_Result_descriptor_ = stGetSignRewardResult_descriptor_->enum_type(0);
  stGetSignRewardResult_ProtoModID_descriptor_ = stGetSignRewardResult_descriptor_->enum_type(1);
  stGetSignRewardResult_ProtoFunID_descriptor_ = stGetSignRewardResult_descriptor_->enum_type(2);
  stReqOpenSvrReward_descriptor_ = file->message_type(13);
  static const int stReqOpenSvrReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenSvrReward, day_),
  };
  stReqOpenSvrReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenSvrReward_descriptor_,
      stReqOpenSvrReward::default_instance_,
      stReqOpenSvrReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenSvrReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenSvrReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenSvrReward));
  stReqOpenSvrReward_ProtoModID_descriptor_ = stReqOpenSvrReward_descriptor_->enum_type(0);
  stReqOpenSvrReward_ProtoFunID_descriptor_ = stReqOpenSvrReward_descriptor_->enum_type(1);
  stGetOpenSvrRewardResult_descriptor_ = file->message_type(14);
  static const int stGetOpenSvrRewardResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetOpenSvrRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetOpenSvrRewardResult, day_),
  };
  stGetOpenSvrRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGetOpenSvrRewardResult_descriptor_,
      stGetOpenSvrRewardResult::default_instance_,
      stGetOpenSvrRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetOpenSvrRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetOpenSvrRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGetOpenSvrRewardResult));
  stGetOpenSvrRewardResult_eResult_descriptor_ = stGetOpenSvrRewardResult_descriptor_->enum_type(0);
  stGetOpenSvrRewardResult_ProtoModID_descriptor_ = stGetOpenSvrRewardResult_descriptor_->enum_type(1);
  stGetOpenSvrRewardResult_ProtoFunID_descriptor_ = stGetOpenSvrRewardResult_descriptor_->enum_type(2);
  stReqLvReward_descriptor_ = file->message_type(15);
  static const int stReqLvReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLvReward, lv_),
  };
  stReqLvReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLvReward_descriptor_,
      stReqLvReward::default_instance_,
      stReqLvReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLvReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLvReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLvReward));
  stReqLvReward_ProtoModID_descriptor_ = stReqLvReward_descriptor_->enum_type(0);
  stReqLvReward_ProtoFunID_descriptor_ = stReqLvReward_descriptor_->enum_type(1);
  stLvRewardResult_descriptor_ = file->message_type(16);
  static const int stLvRewardResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLvRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLvRewardResult, getrewardlv_),
  };
  stLvRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLvRewardResult_descriptor_,
      stLvRewardResult::default_instance_,
      stLvRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLvRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLvRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLvRewardResult));
  stLvRewardResult_eResult_descriptor_ = stLvRewardResult_descriptor_->enum_type(0);
  stLvRewardResult_ProtoModID_descriptor_ = stLvRewardResult_descriptor_->enum_type(1);
  stLvRewardResult_ProtoFunID_descriptor_ = stLvRewardResult_descriptor_->enum_type(2);
  stReqOnlineReward_descriptor_ = file->message_type(17);
  static const int stReqOnlineReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOnlineReward, id_),
  };
  stReqOnlineReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOnlineReward_descriptor_,
      stReqOnlineReward::default_instance_,
      stReqOnlineReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOnlineReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOnlineReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOnlineReward));
  stReqOnlineReward_ProtoModID_descriptor_ = stReqOnlineReward_descriptor_->enum_type(0);
  stReqOnlineReward_ProtoFunID_descriptor_ = stReqOnlineReward_descriptor_->enum_type(1);
  stGetOnlineRewardResult_descriptor_ = file->message_type(18);
  static const int stGetOnlineRewardResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetOnlineRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetOnlineRewardResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetOnlineRewardResult, onlinetime_),
  };
  stGetOnlineRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGetOnlineRewardResult_descriptor_,
      stGetOnlineRewardResult::default_instance_,
      stGetOnlineRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetOnlineRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetOnlineRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGetOnlineRewardResult));
  stGetOnlineRewardResult_eResult_descriptor_ = stGetOnlineRewardResult_descriptor_->enum_type(0);
  stGetOnlineRewardResult_ProtoModID_descriptor_ = stGetOnlineRewardResult_descriptor_->enum_type(1);
  stGetOnlineRewardResult_ProtoFunID_descriptor_ = stGetOnlineRewardResult_descriptor_->enum_type(2);
  stBuyStarInfo_descriptor_ = file->message_type(19);
  static const int stBuyStarInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyStarInfo, buynum_),
  };
  stBuyStarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyStarInfo_descriptor_,
      stBuyStarInfo::default_instance_,
      stBuyStarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyStarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyStarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyStarInfo));
  stBuyStarInfo_ProtoModID_descriptor_ = stBuyStarInfo_descriptor_->enum_type(0);
  stBuyStarInfo_ProtoFunID_descriptor_ = stBuyStarInfo_descriptor_->enum_type(1);
  stReqBuyStar_descriptor_ = file->message_type(20);
  static const int stReqBuyStar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyStar, num_),
  };
  stReqBuyStar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBuyStar_descriptor_,
      stReqBuyStar::default_instance_,
      stReqBuyStar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyStar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyStar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBuyStar));
  stReqBuyStar_ProtoModID_descriptor_ = stReqBuyStar_descriptor_->enum_type(0);
  stReqBuyStar_ProtoFunID_descriptor_ = stReqBuyStar_descriptor_->enum_type(1);
  stBuyStarResult_descriptor_ = file->message_type(21);
  static const int stBuyStarResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyStarResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyStarResult, hasbuynum_),
  };
  stBuyStarResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyStarResult_descriptor_,
      stBuyStarResult::default_instance_,
      stBuyStarResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyStarResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyStarResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyStarResult));
  stBuyStarResult_Result_descriptor_ = stBuyStarResult_descriptor_->enum_type(0);
  stBuyStarResult_ProtoModID_descriptor_ = stBuyStarResult_descriptor_->enum_type(1);
  stBuyStarResult_ProtoFunID_descriptor_ = stBuyStarResult_descriptor_->enum_type(2);
  ReqOpenDrawWindow_descriptor_ = file->message_type(22);
  static const int ReqOpenDrawWindow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenDrawWindow, flag_),
  };
  ReqOpenDrawWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOpenDrawWindow_descriptor_,
      ReqOpenDrawWindow::default_instance_,
      ReqOpenDrawWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenDrawWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOpenDrawWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOpenDrawWindow));
  ReqOpenDrawWindow_ProtoModID_descriptor_ = ReqOpenDrawWindow_descriptor_->enum_type(0);
  ReqOpenDrawWindow_ProtoFunID_descriptor_ = ReqOpenDrawWindow_descriptor_->enum_type(1);
  stDrawWindowInfo_descriptor_ = file->message_type(23);
  static const int stDrawWindowInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, goldfreeremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, goldfreeremainnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, diamondfreeremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, drawherofreeremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, diamonddrawnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, herodrawnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, hasgolddraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, hasgold10draw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, hasdiamonddraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, hasdiamond10draw_),
  };
  stDrawWindowInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDrawWindowInfo_descriptor_,
      stDrawWindowInfo::default_instance_,
      stDrawWindowInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawWindowInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDrawWindowInfo));
  stDrawWindowInfo_ProtoModID_descriptor_ = stDrawWindowInfo_descriptor_->enum_type(0);
  stDrawWindowInfo_ProtoFunID_descriptor_ = stDrawWindowInfo_descriptor_->enum_type(1);
  stReqDraw_descriptor_ = file->message_type(24);
  static const int stReqDraw_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDraw, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDraw, flag_),
  };
  stReqDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDraw_descriptor_,
      stReqDraw::default_instance_,
      stReqDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDraw));
  stReqDraw_ProtoModID_descriptor_ = stReqDraw_descriptor_->enum_type(0);
  stReqDraw_ProtoFunID_descriptor_ = stReqDraw_descriptor_->enum_type(1);
  stSynDrawItem_descriptor_ = file->message_type(25);
  static const int stSynDrawItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDrawItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDrawItem, num_),
  };
  stSynDrawItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynDrawItem_descriptor_,
      stSynDrawItem::default_instance_,
      stSynDrawItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDrawItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDrawItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynDrawItem));
  stDrawResult_descriptor_ = file->message_type(26);
  static const int stDrawResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawResult, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawResult, diamonddrawnum_),
  };
  stDrawResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDrawResult_descriptor_,
      stDrawResult::default_instance_,
      stDrawResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDrawResult));
  stDrawResult_Result_descriptor_ = stDrawResult_descriptor_->enum_type(0);
  stDrawResult_ProtoModID_descriptor_ = stDrawResult_descriptor_->enum_type(1);
  stDrawResult_ProtoFunID_descriptor_ = stDrawResult_descriptor_->enum_type(2);
  stSynMyTitle_descriptor_ = file->message_type(27);
  static const int stSynMyTitle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyTitle, alltitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyTitle, activetitle_),
  };
  stSynMyTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMyTitle_descriptor_,
      stSynMyTitle::default_instance_,
      stSynMyTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMyTitle));
  stSynMyTitle_ProtoModID_descriptor_ = stSynMyTitle_descriptor_->enum_type(0);
  stSynMyTitle_ProtoFunID_descriptor_ = stSynMyTitle_descriptor_->enum_type(1);
  stActiveOneTitle_descriptor_ = file->message_type(28);
  static const int stActiveOneTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActiveOneTitle, titleid_),
  };
  stActiveOneTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stActiveOneTitle_descriptor_,
      stActiveOneTitle::default_instance_,
      stActiveOneTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActiveOneTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActiveOneTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stActiveOneTitle));
  stActiveOneTitle_ProtoModID_descriptor_ = stActiveOneTitle_descriptor_->enum_type(0);
  stActiveOneTitle_ProtoFunID_descriptor_ = stActiveOneTitle_descriptor_->enum_type(1);
  stActiveTitleResult_descriptor_ = file->message_type(29);
  static const int stActiveTitleResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActiveTitleResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActiveTitleResult, titleid_),
  };
  stActiveTitleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stActiveTitleResult_descriptor_,
      stActiveTitleResult::default_instance_,
      stActiveTitleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActiveTitleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActiveTitleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stActiveTitleResult));
  stActiveTitleResult_eResult_descriptor_ = stActiveTitleResult_descriptor_->enum_type(0);
  stActiveTitleResult_ProtoModID_descriptor_ = stActiveTitleResult_descriptor_->enum_type(1);
  stActiveTitleResult_ProtoFunID_descriptor_ = stActiveTitleResult_descriptor_->enum_type(2);
  stObtainOneTitle_descriptor_ = file->message_type(30);
  static const int stObtainOneTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainOneTitle, titleid_),
  };
  stObtainOneTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stObtainOneTitle_descriptor_,
      stObtainOneTitle::default_instance_,
      stObtainOneTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainOneTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainOneTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stObtainOneTitle));
  stObtainOneTitle_ProtoModID_descriptor_ = stObtainOneTitle_descriptor_->enum_type(0);
  stObtainOneTitle_ProtoFunID_descriptor_ = stObtainOneTitle_descriptor_->enum_type(1);
  stBuyInvestPlan_descriptor_ = file->message_type(31);
  static const int stBuyInvestPlan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyInvestPlan, charid_),
  };
  stBuyInvestPlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyInvestPlan_descriptor_,
      stBuyInvestPlan::default_instance_,
      stBuyInvestPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyInvestPlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyInvestPlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyInvestPlan));
  stBuyInvestPlan_ProtoModID_descriptor_ = stBuyInvestPlan_descriptor_->enum_type(0);
  stBuyInvestPlan_ProtoFunID_descriptor_ = stBuyInvestPlan_descriptor_->enum_type(1);
  stBuyInvestPlanResult_descriptor_ = file->message_type(32);
  static const int stBuyInvestPlanResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyInvestPlanResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyInvestPlanResult, index_),
  };
  stBuyInvestPlanResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyInvestPlanResult_descriptor_,
      stBuyInvestPlanResult::default_instance_,
      stBuyInvestPlanResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyInvestPlanResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyInvestPlanResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyInvestPlanResult));
  stBuyInvestPlanResult_eResult_descriptor_ = stBuyInvestPlanResult_descriptor_->enum_type(0);
  stBuyInvestPlanResult_ProtoModID_descriptor_ = stBuyInvestPlanResult_descriptor_->enum_type(1);
  stBuyInvestPlanResult_ProtoFunID_descriptor_ = stBuyInvestPlanResult_descriptor_->enum_type(2);
  stReqInvestPlanReward_descriptor_ = file->message_type(33);
  static const int stReqInvestPlanReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInvestPlanReward, lv_),
  };
  stReqInvestPlanReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqInvestPlanReward_descriptor_,
      stReqInvestPlanReward::default_instance_,
      stReqInvestPlanReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInvestPlanReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInvestPlanReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqInvestPlanReward));
  stReqInvestPlanReward_ProtoModID_descriptor_ = stReqInvestPlanReward_descriptor_->enum_type(0);
  stReqInvestPlanReward_ProtoFunID_descriptor_ = stReqInvestPlanReward_descriptor_->enum_type(1);
  stInvestPlanRewardResult_descriptor_ = file->message_type(34);
  static const int stInvestPlanRewardResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestPlanRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestPlanRewardResult, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestPlanRewardResult, index_),
  };
  stInvestPlanRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInvestPlanRewardResult_descriptor_,
      stInvestPlanRewardResult::default_instance_,
      stInvestPlanRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestPlanRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestPlanRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInvestPlanRewardResult));
  stInvestPlanRewardResult_eResult_descriptor_ = stInvestPlanRewardResult_descriptor_->enum_type(0);
  stInvestPlanRewardResult_ProtoModID_descriptor_ = stInvestPlanRewardResult_descriptor_->enum_type(1);
  stInvestPlanRewardResult_ProtoFunID_descriptor_ = stInvestPlanRewardResult_descriptor_->enum_type(2);
  stReqEatDinner_descriptor_ = file->message_type(35);
  static const int stReqEatDinner_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEatDinner, charid_),
  };
  stReqEatDinner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEatDinner_descriptor_,
      stReqEatDinner::default_instance_,
      stReqEatDinner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEatDinner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEatDinner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEatDinner));
  stReqEatDinner_ProtoModID_descriptor_ = stReqEatDinner_descriptor_->enum_type(0);
  stReqEatDinner_ProtoFunID_descriptor_ = stReqEatDinner_descriptor_->enum_type(1);
  stEatDinnerResult_descriptor_ = file->message_type(36);
  static const int stEatDinnerResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEatDinnerResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEatDinnerResult, haseatednum_),
  };
  stEatDinnerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEatDinnerResult_descriptor_,
      stEatDinnerResult::default_instance_,
      stEatDinnerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEatDinnerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEatDinnerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEatDinnerResult));
  stEatDinnerResult_eResult_descriptor_ = stEatDinnerResult_descriptor_->enum_type(0);
  stEatDinnerResult_ProtoModID_descriptor_ = stEatDinnerResult_descriptor_->enum_type(1);
  stEatDinnerResult_ProtoFunID_descriptor_ = stEatDinnerResult_descriptor_->enum_type(2);
  stSynActivityData_descriptor_ = file->message_type(37);
  static const int stSynActivityData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityData, hasbuyinvestment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityData, investgetrewardlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityData, eatdinnernum_),
  };
  stSynActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynActivityData_descriptor_,
      stSynActivityData::default_instance_,
      stSynActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynActivityData));
  stSynActivityData_ProtoModID_descriptor_ = stSynActivityData_descriptor_->enum_type(0);
  stSynActivityData_ProtoFunID_descriptor_ = stSynActivityData_descriptor_->enum_type(1);
  stReqOpenCaptureTreasure_descriptor_ = file->message_type(38);
  static const int stReqOpenCaptureTreasure_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenCaptureTreasure, charid_),
  };
  stReqOpenCaptureTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenCaptureTreasure_descriptor_,
      stReqOpenCaptureTreasure::default_instance_,
      stReqOpenCaptureTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenCaptureTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenCaptureTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenCaptureTreasure));
  stReqOpenCaptureTreasure_ProtoModID_descriptor_ = stReqOpenCaptureTreasure_descriptor_->enum_type(0);
  stReqOpenCaptureTreasure_ProtoFunID_descriptor_ = stReqOpenCaptureTreasure_descriptor_->enum_type(1);
  stSynCaptureTreasureInfo_descriptor_ = file->message_type(39);
  static const int stSynCaptureTreasureInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCaptureTreasureInfo, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCaptureTreasureInfo, resnum_),
  };
  stSynCaptureTreasureInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynCaptureTreasureInfo_descriptor_,
      stSynCaptureTreasureInfo::default_instance_,
      stSynCaptureTreasureInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCaptureTreasureInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCaptureTreasureInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynCaptureTreasureInfo));
  stRetCaptureTreasure_descriptor_ = file->message_type(40);
  static const int stRetCaptureTreasure_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCaptureTreasure, tresures_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCaptureTreasure, remaintime_),
  };
  stRetCaptureTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetCaptureTreasure_descriptor_,
      stRetCaptureTreasure::default_instance_,
      stRetCaptureTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCaptureTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCaptureTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetCaptureTreasure));
  stRetCaptureTreasure_ProtoModID_descriptor_ = stRetCaptureTreasure_descriptor_->enum_type(0);
  stRetCaptureTreasure_ProtoFunID_descriptor_ = stRetCaptureTreasure_descriptor_->enum_type(1);
  stReqCombineTreasure_descriptor_ = file->message_type(41);
  static const int stReqCombineTreasure_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCombineTreasure, combinetype_),
  };
  stReqCombineTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCombineTreasure_descriptor_,
      stReqCombineTreasure::default_instance_,
      stReqCombineTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCombineTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCombineTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCombineTreasure));
  stReqCombineTreasure_ProtoModID_descriptor_ = stReqCombineTreasure_descriptor_->enum_type(0);
  stReqCombineTreasure_ProtoFunID_descriptor_ = stReqCombineTreasure_descriptor_->enum_type(1);
  stCombineTreasureResult_descriptor_ = file->message_type(42);
  static const int stCombineTreasureResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCombineTreasureResult, result_),
  };
  stCombineTreasureResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCombineTreasureResult_descriptor_,
      stCombineTreasureResult::default_instance_,
      stCombineTreasureResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCombineTreasureResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCombineTreasureResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCombineTreasureResult));
  stCombineTreasureResult_eResult_descriptor_ = stCombineTreasureResult_descriptor_->enum_type(0);
  stCombineTreasureResult_ProtoModID_descriptor_ = stCombineTreasureResult_descriptor_->enum_type(1);
  stCombineTreasureResult_ProtoFunID_descriptor_ = stCombineTreasureResult_descriptor_->enum_type(2);
  stBuyPeaceModuleTime_descriptor_ = file->message_type(43);
  static const int stBuyPeaceModuleTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModuleTime, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModuleTime, hour_),
  };
  stBuyPeaceModuleTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyPeaceModuleTime_descriptor_,
      stBuyPeaceModuleTime::default_instance_,
      stBuyPeaceModuleTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModuleTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModuleTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyPeaceModuleTime));
  stBuyPeaceModuleTime_eType_descriptor_ = stBuyPeaceModuleTime_descriptor_->enum_type(0);
  stBuyPeaceModuleTime_ProtoModID_descriptor_ = stBuyPeaceModuleTime_descriptor_->enum_type(1);
  stBuyPeaceModuleTime_ProtoFunID_descriptor_ = stBuyPeaceModuleTime_descriptor_->enum_type(2);
  stBuyPeaceModuleTimeResult_descriptor_ = file->message_type(44);
  static const int stBuyPeaceModuleTimeResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModuleTimeResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModuleTimeResult, remaintime_),
  };
  stBuyPeaceModuleTimeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyPeaceModuleTimeResult_descriptor_,
      stBuyPeaceModuleTimeResult::default_instance_,
      stBuyPeaceModuleTimeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModuleTimeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModuleTimeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyPeaceModuleTimeResult));
  stBuyPeaceModuleTimeResult_eResult_descriptor_ = stBuyPeaceModuleTimeResult_descriptor_->enum_type(0);
  stBuyPeaceModuleTimeResult_ProtoModID_descriptor_ = stBuyPeaceModuleTimeResult_descriptor_->enum_type(1);
  stBuyPeaceModuleTimeResult_ProtoFunID_descriptor_ = stBuyPeaceModuleTimeResult_descriptor_->enum_type(2);
  stCaptureTreasureUserInfo_descriptor_ = file->message_type(45);
  static const int stCaptureTreasureUserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureUserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureUserInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureUserInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureUserInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureUserInfo, photoid_),
  };
  stCaptureTreasureUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCaptureTreasureUserInfo_descriptor_,
      stCaptureTreasureUserInfo::default_instance_,
      stCaptureTreasureUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCaptureTreasureUserInfo));
  stReqChallengeUserList_descriptor_ = file->message_type(46);
  static const int stReqChallengeUserList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChallengeUserList, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChallengeUserList, resid_),
  };
  stReqChallengeUserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqChallengeUserList_descriptor_,
      stReqChallengeUserList::default_instance_,
      stReqChallengeUserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChallengeUserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChallengeUserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqChallengeUserList));
  stReqChallengeUserList_ProtoModID_descriptor_ = stReqChallengeUserList_descriptor_->enum_type(0);
  stReqChallengeUserList_ProtoFunID_descriptor_ = stReqChallengeUserList_descriptor_->enum_type(1);
  stRetChallengeUserList_descriptor_ = file->message_type(47);
  static const int stRetChallengeUserList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChallengeUserList, userinfo_),
  };
  stRetChallengeUserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetChallengeUserList_descriptor_,
      stRetChallengeUserList::default_instance_,
      stRetChallengeUserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChallengeUserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChallengeUserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetChallengeUserList));
  stRetChallengeUserList_ProtoModID_descriptor_ = stRetChallengeUserList_descriptor_->enum_type(0);
  stRetChallengeUserList_ProtoFunID_descriptor_ = stRetChallengeUserList_descriptor_->enum_type(1);
  stCaptureUserTreasure_descriptor_ = file->message_type(48);
  static const int stCaptureUserTreasure_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasure, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasure, combineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasure, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasure, type_),
  };
  stCaptureUserTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCaptureUserTreasure_descriptor_,
      stCaptureUserTreasure::default_instance_,
      stCaptureUserTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCaptureUserTreasure));
  stCaptureUserTreasure_ProtoModID_descriptor_ = stCaptureUserTreasure_descriptor_->enum_type(0);
  stCaptureUserTreasure_ProtoFunID_descriptor_ = stCaptureUserTreasure_descriptor_->enum_type(1);
  stSynCaptureReward_descriptor_ = file->message_type(49);
  static const int stSynCaptureReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCaptureReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCaptureReward, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCaptureReward, goldcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCaptureReward, exp_),
  };
  stSynCaptureReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynCaptureReward_descriptor_,
      stSynCaptureReward::default_instance_,
      stSynCaptureReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCaptureReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCaptureReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynCaptureReward));
  stCaptureUserTreasureResult_descriptor_ = file->message_type(50);
  static const int stCaptureUserTreasureResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasureResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasureResult, obtainpiece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasureResult, rewards_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasureResult, type_),
  };
  stCaptureUserTreasureResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCaptureUserTreasureResult_descriptor_,
      stCaptureUserTreasureResult::default_instance_,
      stCaptureUserTreasureResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasureResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureUserTreasureResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCaptureUserTreasureResult));
  stCaptureUserTreasureResult_eResult_descriptor_ = stCaptureUserTreasureResult_descriptor_->enum_type(0);
  stCaptureUserTreasureResult_ProtoModID_descriptor_ = stCaptureUserTreasureResult_descriptor_->enum_type(1);
  stCaptureUserTreasureResult_ProtoFunID_descriptor_ = stCaptureUserTreasureResult_descriptor_->enum_type(2);
  stSynTreasureNum_descriptor_ = file->message_type(51);
  static const int stSynTreasureNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTreasureNum, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTreasureNum, num_),
  };
  stSynTreasureNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynTreasureNum_descriptor_,
      stSynTreasureNum::default_instance_,
      stSynTreasureNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTreasureNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTreasureNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynTreasureNum));
  stSynTreasureNum_ProtoModID_descriptor_ = stSynTreasureNum_descriptor_->enum_type(0);
  stSynTreasureNum_ProtoFunID_descriptor_ = stSynTreasureNum_descriptor_->enum_type(1);
  stCancelActiveTitle_descriptor_ = file->message_type(52);
  static const int stCancelActiveTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelActiveTitle, charid_),
  };
  stCancelActiveTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelActiveTitle_descriptor_,
      stCancelActiveTitle::default_instance_,
      stCancelActiveTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelActiveTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelActiveTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelActiveTitle));
  stCancelActiveTitle_ProtoModID_descriptor_ = stCancelActiveTitle_descriptor_->enum_type(0);
  stCancelActiveTitle_ProtoFunID_descriptor_ = stCancelActiveTitle_descriptor_->enum_type(1);
  stCancelActiveTitleResult_descriptor_ = file->message_type(53);
  static const int stCancelActiveTitleResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelActiveTitleResult, success_),
  };
  stCancelActiveTitleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelActiveTitleResult_descriptor_,
      stCancelActiveTitleResult::default_instance_,
      stCancelActiveTitleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelActiveTitleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelActiveTitleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelActiveTitleResult));
  stCancelActiveTitleResult_ProtoModID_descriptor_ = stCancelActiveTitleResult_descriptor_->enum_type(0);
  stCancelActiveTitleResult_ProtoFunID_descriptor_ = stCancelActiveTitleResult_descriptor_->enum_type(1);
  stSynSpriteInfo_descriptor_ = file->message_type(54);
  static const int stSynSpriteInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSpriteInfo, spriteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSpriteInfo, level_),
  };
  stSynSpriteInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynSpriteInfo_descriptor_,
      stSynSpriteInfo::default_instance_,
      stSynSpriteInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSpriteInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSpriteInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynSpriteInfo));
  stSynAllSprite_descriptor_ = file->message_type(55);
  static const int stSynAllSprite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllSprite, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllSprite, followspriteid_),
  };
  stSynAllSprite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynAllSprite_descriptor_,
      stSynAllSprite::default_instance_,
      stSynAllSprite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllSprite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllSprite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynAllSprite));
  stSynAllSprite_ProtoModID_descriptor_ = stSynAllSprite_descriptor_->enum_type(0);
  stSynAllSprite_ProtoFunID_descriptor_ = stSynAllSprite_descriptor_->enum_type(1);
  stReqUnlockedSprite_descriptor_ = file->message_type(56);
  static const int stReqUnlockedSprite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUnlockedSprite, spriteid_),
  };
  stReqUnlockedSprite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUnlockedSprite_descriptor_,
      stReqUnlockedSprite::default_instance_,
      stReqUnlockedSprite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUnlockedSprite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUnlockedSprite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUnlockedSprite));
  stReqUnlockedSprite_ProtoModID_descriptor_ = stReqUnlockedSprite_descriptor_->enum_type(0);
  stReqUnlockedSprite_ProtoFunID_descriptor_ = stReqUnlockedSprite_descriptor_->enum_type(1);
  stUnlockedSpriteResult_descriptor_ = file->message_type(57);
  static const int stUnlockedSpriteResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockedSpriteResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockedSpriteResult, spriteid_),
  };
  stUnlockedSpriteResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUnlockedSpriteResult_descriptor_,
      stUnlockedSpriteResult::default_instance_,
      stUnlockedSpriteResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockedSpriteResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnlockedSpriteResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUnlockedSpriteResult));
  stUnlockedSpriteResult_eResult_descriptor_ = stUnlockedSpriteResult_descriptor_->enum_type(0);
  stUnlockedSpriteResult_ProtoModID_descriptor_ = stUnlockedSpriteResult_descriptor_->enum_type(1);
  stUnlockedSpriteResult_ProtoFunID_descriptor_ = stUnlockedSpriteResult_descriptor_->enum_type(2);
  stAddSprite_descriptor_ = file->message_type(58);
  static const int stAddSprite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddSprite, sprite_),
  };
  stAddSprite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddSprite_descriptor_,
      stAddSprite::default_instance_,
      stAddSprite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddSprite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddSprite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddSprite));
  stAddSprite_ProtoModID_descriptor_ = stAddSprite_descriptor_->enum_type(0);
  stAddSprite_ProtoFunID_descriptor_ = stAddSprite_descriptor_->enum_type(1);
  stReqLevelupSprite_descriptor_ = file->message_type(59);
  static const int stReqLevelupSprite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelupSprite, spriteid_),
  };
  stReqLevelupSprite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLevelupSprite_descriptor_,
      stReqLevelupSprite::default_instance_,
      stReqLevelupSprite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelupSprite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelupSprite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLevelupSprite));
  stReqLevelupSprite_ProtoModID_descriptor_ = stReqLevelupSprite_descriptor_->enum_type(0);
  stReqLevelupSprite_ProtoFunID_descriptor_ = stReqLevelupSprite_descriptor_->enum_type(1);
  stLevelupSpriteResult_descriptor_ = file->message_type(60);
  static const int stLevelupSpriteResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelupSpriteResult, spriteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelupSpriteResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelupSpriteResult, curlv_),
  };
  stLevelupSpriteResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLevelupSpriteResult_descriptor_,
      stLevelupSpriteResult::default_instance_,
      stLevelupSpriteResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelupSpriteResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelupSpriteResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLevelupSpriteResult));
  stLevelupSpriteResult_eResult_descriptor_ = stLevelupSpriteResult_descriptor_->enum_type(0);
  stLevelupSpriteResult_ProtoModID_descriptor_ = stLevelupSpriteResult_descriptor_->enum_type(1);
  stLevelupSpriteResult_ProtoFunID_descriptor_ = stLevelupSpriteResult_descriptor_->enum_type(2);
  stSpriteFollowMaster_descriptor_ = file->message_type(61);
  static const int stSpriteFollowMaster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteFollowMaster, spriteid_),
  };
  stSpriteFollowMaster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSpriteFollowMaster_descriptor_,
      stSpriteFollowMaster::default_instance_,
      stSpriteFollowMaster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteFollowMaster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteFollowMaster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSpriteFollowMaster));
  stSpriteFollowMaster_ProtoModID_descriptor_ = stSpriteFollowMaster_descriptor_->enum_type(0);
  stSpriteFollowMaster_ProtoFunID_descriptor_ = stSpriteFollowMaster_descriptor_->enum_type(1);
  stSpriteFollowMasterResult_descriptor_ = file->message_type(62);
  static const int stSpriteFollowMasterResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteFollowMasterResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteFollowMasterResult, spriteid_),
  };
  stSpriteFollowMasterResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSpriteFollowMasterResult_descriptor_,
      stSpriteFollowMasterResult::default_instance_,
      stSpriteFollowMasterResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteFollowMasterResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteFollowMasterResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSpriteFollowMasterResult));
  stSpriteFollowMasterResult_eResult_descriptor_ = stSpriteFollowMasterResult_descriptor_->enum_type(0);
  stSpriteFollowMasterResult_ProtoModID_descriptor_ = stSpriteFollowMasterResult_descriptor_->enum_type(1);
  stSpriteFollowMasterResult_ProtoFunID_descriptor_ = stSpriteFollowMasterResult_descriptor_->enum_type(2);
  stReqAvaibleActivity_descriptor_ = file->message_type(63);
  static const int stReqAvaibleActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAvaibleActivity, charid_),
  };
  stReqAvaibleActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAvaibleActivity_descriptor_,
      stReqAvaibleActivity::default_instance_,
      stReqAvaibleActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAvaibleActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAvaibleActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAvaibleActivity));
  stReqAvaibleActivity_ProtoModID_descriptor_ = stReqAvaibleActivity_descriptor_->enum_type(0);
  stReqAvaibleActivity_ProtoFunID_descriptor_ = stReqAvaibleActivity_descriptor_->enum_type(1);
  stSynActivityStepReward_descriptor_ = file->message_type(64);
  static const int stSynActivityStepReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepReward, num_),
  };
  stSynActivityStepReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynActivityStepReward_descriptor_,
      stSynActivityStepReward::default_instance_,
      stSynActivityStepReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynActivityStepReward));
  stSynActivityStepOptionalReward_descriptor_ = file->message_type(65);
  static const int stSynActivityStepOptionalReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepOptionalReward, rewards_),
  };
  stSynActivityStepOptionalReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynActivityStepOptionalReward_descriptor_,
      stSynActivityStepOptionalReward::default_instance_,
      stSynActivityStepOptionalReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepOptionalReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepOptionalReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynActivityStepOptionalReward));
  stSynActivityStepInfo_descriptor_ = file->message_type(66);
  static const int stSynActivityStepInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepInfo, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepInfo, stepdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepInfo, optionals_),
  };
  stSynActivityStepInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynActivityStepInfo_descriptor_,
      stSynActivityStepInfo::default_instance_,
      stSynActivityStepInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityStepInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynActivityStepInfo));
  stSynActivityInfo_descriptor_ = file->message_type(67);
  static const int stSynActivityInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityInfo, curval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityInfo, finishstep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityInfo, avaiblestep_),
  };
  stSynActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynActivityInfo_descriptor_,
      stSynActivityInfo::default_instance_,
      stSynActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynActivityInfo));
  stRetAvaibleActivity_descriptor_ = file->message_type(68);
  static const int stRetAvaibleActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAvaibleActivity, activities_),
  };
  stRetAvaibleActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetAvaibleActivity_descriptor_,
      stRetAvaibleActivity::default_instance_,
      stRetAvaibleActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAvaibleActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAvaibleActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetAvaibleActivity));
  stRetAvaibleActivity_ProtoModID_descriptor_ = stRetAvaibleActivity_descriptor_->enum_type(0);
  stRetAvaibleActivity_ProtoFunID_descriptor_ = stRetAvaibleActivity_descriptor_->enum_type(1);
  stReqAcitivityReward_descriptor_ = file->message_type(69);
  static const int stReqAcitivityReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAcitivityReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAcitivityReward, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAcitivityReward, selindex_),
  };
  stReqAcitivityReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAcitivityReward_descriptor_,
      stReqAcitivityReward::default_instance_,
      stReqAcitivityReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAcitivityReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAcitivityReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAcitivityReward));
  stReqAcitivityReward_ProtoModID_descriptor_ = stReqAcitivityReward_descriptor_->enum_type(0);
  stReqAcitivityReward_ProtoFunID_descriptor_ = stReqAcitivityReward_descriptor_->enum_type(1);
  stActivityRewardResult_descriptor_ = file->message_type(70);
  static const int stActivityRewardResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityRewardResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityRewardResult, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityRewardResult, result_),
  };
  stActivityRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stActivityRewardResult_descriptor_,
      stActivityRewardResult::default_instance_,
      stActivityRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stActivityRewardResult));
  stActivityRewardResult_eResult_descriptor_ = stActivityRewardResult_descriptor_->enum_type(0);
  stActivityRewardResult_ProtoModID_descriptor_ = stActivityRewardResult_descriptor_->enum_type(1);
  stActivityRewardResult_ProtoFunID_descriptor_ = stActivityRewardResult_descriptor_->enum_type(2);
  stReqWorldBossDamageRank_descriptor_ = file->message_type(71);
  static const int stReqWorldBossDamageRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWorldBossDamageRank, fromrank_),
  };
  stReqWorldBossDamageRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqWorldBossDamageRank_descriptor_,
      stReqWorldBossDamageRank::default_instance_,
      stReqWorldBossDamageRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWorldBossDamageRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWorldBossDamageRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqWorldBossDamageRank));
  stReqWorldBossDamageRank_ProtoModID_descriptor_ = stReqWorldBossDamageRank_descriptor_->enum_type(0);
  stReqWorldBossDamageRank_ProtoFunID_descriptor_ = stReqWorldBossDamageRank_descriptor_->enum_type(1);
  stWorldBossDamageSortItem_descriptor_ = file->message_type(72);
  static const int stWorldBossDamageSortItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossDamageSortItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossDamageSortItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossDamageSortItem, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossDamageSortItem, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossDamageSortItem, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossDamageSortItem, photoid_),
  };
  stWorldBossDamageSortItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWorldBossDamageSortItem_descriptor_,
      stWorldBossDamageSortItem::default_instance_,
      stWorldBossDamageSortItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossDamageSortItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossDamageSortItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWorldBossDamageSortItem));
  stRetWorldBossDamageRank_descriptor_ = file->message_type(73);
  static const int stRetWorldBossDamageRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetWorldBossDamageRank, sortitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetWorldBossDamageRank, fromrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetWorldBossDamageRank, myrank_),
  };
  stRetWorldBossDamageRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetWorldBossDamageRank_descriptor_,
      stRetWorldBossDamageRank::default_instance_,
      stRetWorldBossDamageRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetWorldBossDamageRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetWorldBossDamageRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetWorldBossDamageRank));
  stRetWorldBossDamageRank_ProtoModID_descriptor_ = stRetWorldBossDamageRank_descriptor_->enum_type(0);
  stRetWorldBossDamageRank_ProtoFunID_descriptor_ = stRetWorldBossDamageRank_descriptor_->enum_type(1);
  stReqOpenWorldBossWin_descriptor_ = file->message_type(74);
  static const int stReqOpenWorldBossWin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenWorldBossWin, charid_),
  };
  stReqOpenWorldBossWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenWorldBossWin_descriptor_,
      stReqOpenWorldBossWin::default_instance_,
      stReqOpenWorldBossWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenWorldBossWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenWorldBossWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenWorldBossWin));
  stReqOpenWorldBossWin_ProtoModID_descriptor_ = stReqOpenWorldBossWin_descriptor_->enum_type(0);
  stReqOpenWorldBossWin_ProtoFunID_descriptor_ = stReqOpenWorldBossWin_descriptor_->enum_type(1);
  stRetOpenWorldBossWin_descriptor_ = file->message_type(75);
  static const int stRetOpenWorldBossWin_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, reliveremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, tomorrow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, killername_),
  };
  stRetOpenWorldBossWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetOpenWorldBossWin_descriptor_,
      stRetOpenWorldBossWin::default_instance_,
      stRetOpenWorldBossWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOpenWorldBossWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetOpenWorldBossWin));
  stRetOpenWorldBossWin_ProtoModID_descriptor_ = stRetOpenWorldBossWin_descriptor_->enum_type(0);
  stRetOpenWorldBossWin_ProtoFunID_descriptor_ = stRetOpenWorldBossWin_descriptor_->enum_type(1);
  stReqBossWorldMatch_descriptor_ = file->message_type(76);
  static const int stReqBossWorldMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBossWorldMatch, charid_),
  };
  stReqBossWorldMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBossWorldMatch_descriptor_,
      stReqBossWorldMatch::default_instance_,
      stReqBossWorldMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBossWorldMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBossWorldMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBossWorldMatch));
  stReqBossWorldMatch_ProtoModID_descriptor_ = stReqBossWorldMatch_descriptor_->enum_type(0);
  stReqBossWorldMatch_ProtoFunID_descriptor_ = stReqBossWorldMatch_descriptor_->enum_type(1);
  stRetBossWorldMatch_descriptor_ = file->message_type(77);
  static const int stRetBossWorldMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBossWorldMatch, result_),
  };
  stRetBossWorldMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetBossWorldMatch_descriptor_,
      stRetBossWorldMatch::default_instance_,
      stRetBossWorldMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBossWorldMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBossWorldMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetBossWorldMatch));
  stRetBossWorldMatch_eResult_descriptor_ = stRetBossWorldMatch_descriptor_->enum_type(0);
  stRetBossWorldMatch_ProtoModID_descriptor_ = stRetBossWorldMatch_descriptor_->enum_type(1);
  stRetBossWorldMatch_ProtoFunID_descriptor_ = stRetBossWorldMatch_descriptor_->enum_type(2);
  stReqClearWorldBossActivityCD_descriptor_ = file->message_type(78);
  static const int stReqClearWorldBossActivityCD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqClearWorldBossActivityCD, charid_),
  };
  stReqClearWorldBossActivityCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqClearWorldBossActivityCD_descriptor_,
      stReqClearWorldBossActivityCD::default_instance_,
      stReqClearWorldBossActivityCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqClearWorldBossActivityCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqClearWorldBossActivityCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqClearWorldBossActivityCD));
  stReqClearWorldBossActivityCD_ProtoModID_descriptor_ = stReqClearWorldBossActivityCD_descriptor_->enum_type(0);
  stReqClearWorldBossActivityCD_ProtoFunID_descriptor_ = stReqClearWorldBossActivityCD_descriptor_->enum_type(1);
  stClearWorldBossActivityCDResult_descriptor_ = file->message_type(79);
  static const int stClearWorldBossActivityCDResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClearWorldBossActivityCDResult, result_),
  };
  stClearWorldBossActivityCDResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stClearWorldBossActivityCDResult_descriptor_,
      stClearWorldBossActivityCDResult::default_instance_,
      stClearWorldBossActivityCDResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClearWorldBossActivityCDResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClearWorldBossActivityCDResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stClearWorldBossActivityCDResult));
  stClearWorldBossActivityCDResult_eResult_descriptor_ = stClearWorldBossActivityCDResult_descriptor_->enum_type(0);
  stClearWorldBossActivityCDResult_ProtoModID_descriptor_ = stClearWorldBossActivityCDResult_descriptor_->enum_type(1);
  stClearWorldBossActivityCDResult_ProtoFunID_descriptor_ = stClearWorldBossActivityCDResult_descriptor_->enum_type(2);
  stReqRaiseDamageInWorldBoss_descriptor_ = file->message_type(80);
  static const int stReqRaiseDamageInWorldBoss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseDamageInWorldBoss, charid_),
  };
  stReqRaiseDamageInWorldBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRaiseDamageInWorldBoss_descriptor_,
      stReqRaiseDamageInWorldBoss::default_instance_,
      stReqRaiseDamageInWorldBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseDamageInWorldBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRaiseDamageInWorldBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRaiseDamageInWorldBoss));
  stReqRaiseDamageInWorldBoss_ProtoModID_descriptor_ = stReqRaiseDamageInWorldBoss_descriptor_->enum_type(0);
  stReqRaiseDamageInWorldBoss_ProtoFunID_descriptor_ = stReqRaiseDamageInWorldBoss_descriptor_->enum_type(1);
  stRaiseDamageInWorldBossResult_descriptor_ = file->message_type(81);
  static const int stRaiseDamageInWorldBossResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseDamageInWorldBossResult, result_),
  };
  stRaiseDamageInWorldBossResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRaiseDamageInWorldBossResult_descriptor_,
      stRaiseDamageInWorldBossResult::default_instance_,
      stRaiseDamageInWorldBossResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseDamageInWorldBossResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRaiseDamageInWorldBossResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRaiseDamageInWorldBossResult));
  stRaiseDamageInWorldBossResult_eResult_descriptor_ = stRaiseDamageInWorldBossResult_descriptor_->enum_type(0);
  stRaiseDamageInWorldBossResult_ProtoModID_descriptor_ = stRaiseDamageInWorldBossResult_descriptor_->enum_type(1);
  stRaiseDamageInWorldBossResult_ProtoFunID_descriptor_ = stRaiseDamageInWorldBossResult_descriptor_->enum_type(2);
  stCancelWorldBossMatch_descriptor_ = file->message_type(82);
  static const int stCancelWorldBossMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelWorldBossMatch, charid_),
  };
  stCancelWorldBossMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelWorldBossMatch_descriptor_,
      stCancelWorldBossMatch::default_instance_,
      stCancelWorldBossMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelWorldBossMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelWorldBossMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelWorldBossMatch));
  stCancelWorldBossMatch_ProtoModID_descriptor_ = stCancelWorldBossMatch_descriptor_->enum_type(0);
  stCancelWorldBossMatch_ProtoFunID_descriptor_ = stCancelWorldBossMatch_descriptor_->enum_type(1);
  stCancelWorldBossMatchResult_descriptor_ = file->message_type(83);
  static const int stCancelWorldBossMatchResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelWorldBossMatchResult, result_),
  };
  stCancelWorldBossMatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelWorldBossMatchResult_descriptor_,
      stCancelWorldBossMatchResult::default_instance_,
      stCancelWorldBossMatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelWorldBossMatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelWorldBossMatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelWorldBossMatchResult));
  stCancelWorldBossMatchResult_eResult_descriptor_ = stCancelWorldBossMatchResult_descriptor_->enum_type(0);
  stCancelWorldBossMatchResult_ProtoModID_descriptor_ = stCancelWorldBossMatchResult_descriptor_->enum_type(1);
  stCancelWorldBossMatchResult_ProtoFunID_descriptor_ = stCancelWorldBossMatchResult_descriptor_->enum_type(2);
  stQueryDrawHeroActivity_descriptor_ = file->message_type(84);
  static const int stQueryDrawHeroActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryDrawHeroActivity, charid_),
  };
  stQueryDrawHeroActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQueryDrawHeroActivity_descriptor_,
      stQueryDrawHeroActivity::default_instance_,
      stQueryDrawHeroActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryDrawHeroActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryDrawHeroActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQueryDrawHeroActivity));
  stQueryDrawHeroActivity_ProtoModID_descriptor_ = stQueryDrawHeroActivity_descriptor_->enum_type(0);
  stQueryDrawHeroActivity_ProtoFunID_descriptor_ = stQueryDrawHeroActivity_descriptor_->enum_type(1);
  stRetDrawHeroActivityInfo_descriptor_ = file->message_type(85);
  static const int stRetDrawHeroActivityInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawHeroActivityInfo, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawHeroActivityInfo, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawHeroActivityInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawHeroActivityInfo, rewardids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawHeroActivityInfo, gotrankreward_),
  };
  stRetDrawHeroActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDrawHeroActivityInfo_descriptor_,
      stRetDrawHeroActivityInfo::default_instance_,
      stRetDrawHeroActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawHeroActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawHeroActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDrawHeroActivityInfo));
  stRetDrawHeroActivityInfo_ProtoModID_descriptor_ = stRetDrawHeroActivityInfo_descriptor_->enum_type(0);
  stRetDrawHeroActivityInfo_ProtoFunID_descriptor_ = stRetDrawHeroActivityInfo_descriptor_->enum_type(1);
  stReqDrawHeroScoreReward_descriptor_ = file->message_type(86);
  static const int stReqDrawHeroScoreReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawHeroScoreReward, id_),
  };
  stReqDrawHeroScoreReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawHeroScoreReward_descriptor_,
      stReqDrawHeroScoreReward::default_instance_,
      stReqDrawHeroScoreReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawHeroScoreReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawHeroScoreReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawHeroScoreReward));
  stReqDrawHeroScoreReward_ProtoModID_descriptor_ = stReqDrawHeroScoreReward_descriptor_->enum_type(0);
  stReqDrawHeroScoreReward_ProtoFunID_descriptor_ = stReqDrawHeroScoreReward_descriptor_->enum_type(1);
  stDrawHeroScoreRewardRet_descriptor_ = file->message_type(87);
  static const int stDrawHeroScoreRewardRet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroScoreRewardRet, result_),
  };
  stDrawHeroScoreRewardRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDrawHeroScoreRewardRet_descriptor_,
      stDrawHeroScoreRewardRet::default_instance_,
      stDrawHeroScoreRewardRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroScoreRewardRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroScoreRewardRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDrawHeroScoreRewardRet));
  stDrawHeroScoreRewardRet_eResult_descriptor_ = stDrawHeroScoreRewardRet_descriptor_->enum_type(0);
  stDrawHeroScoreRewardRet_ProtoModID_descriptor_ = stDrawHeroScoreRewardRet_descriptor_->enum_type(1);
  stDrawHeroScoreRewardRet_ProtoFunID_descriptor_ = stDrawHeroScoreRewardRet_descriptor_->enum_type(2);
  stReqDrawHeroRankReward_descriptor_ = file->message_type(88);
  static const int stReqDrawHeroRankReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawHeroRankReward, charid_),
  };
  stReqDrawHeroRankReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawHeroRankReward_descriptor_,
      stReqDrawHeroRankReward::default_instance_,
      stReqDrawHeroRankReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawHeroRankReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawHeroRankReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawHeroRankReward));
  stReqDrawHeroRankReward_ProtoModID_descriptor_ = stReqDrawHeroRankReward_descriptor_->enum_type(0);
  stReqDrawHeroRankReward_ProtoFunID_descriptor_ = stReqDrawHeroRankReward_descriptor_->enum_type(1);
  stDrawHeroRankReward_descriptor_ = file->message_type(89);
  static const int stDrawHeroRankReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroRankReward, result_),
  };
  stDrawHeroRankReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDrawHeroRankReward_descriptor_,
      stDrawHeroRankReward::default_instance_,
      stDrawHeroRankReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroRankReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroRankReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDrawHeroRankReward));
  stDrawHeroRankReward_eResult_descriptor_ = stDrawHeroRankReward_descriptor_->enum_type(0);
  stDrawHeroRankReward_ProtoModID_descriptor_ = stDrawHeroRankReward_descriptor_->enum_type(1);
  stDrawHeroRankReward_ProtoFunID_descriptor_ = stDrawHeroRankReward_descriptor_->enum_type(2);
  stReqCompensationList_descriptor_ = file->message_type(90);
  static const int stReqCompensationList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCompensationList, charid_),
  };
  stReqCompensationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCompensationList_descriptor_,
      stReqCompensationList::default_instance_,
      stReqCompensationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCompensationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCompensationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCompensationList));
  stReqCompensationList_ProtoModID_descriptor_ = stReqCompensationList_descriptor_->enum_type(0);
  stReqCompensationList_ProtoFunID_descriptor_ = stReqCompensationList_descriptor_->enum_type(1);
  stCompensationItem_descriptor_ = file->message_type(91);
  static const int stCompensationItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensationItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensationItem, num_),
  };
  stCompensationItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCompensationItem_descriptor_,
      stCompensationItem::default_instance_,
      stCompensationItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensationItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensationItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCompensationItem));
  stCompensationInfo_descriptor_ = file->message_type(92);
  static const int stCompensationInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensationInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensationInfo, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensationInfo, items_),
  };
  stCompensationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCompensationInfo_descriptor_,
      stCompensationInfo::default_instance_,
      stCompensationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCompensationInfo));
  stRetCompensationList_descriptor_ = file->message_type(93);
  static const int stRetCompensationList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCompensationList, info_),
  };
  stRetCompensationList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetCompensationList_descriptor_,
      stRetCompensationList::default_instance_,
      stRetCompensationList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCompensationList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCompensationList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetCompensationList));
  stRetCompensationList_ProtoModID_descriptor_ = stRetCompensationList_descriptor_->enum_type(0);
  stRetCompensationList_ProtoFunID_descriptor_ = stRetCompensationList_descriptor_->enum_type(1);
  stReqGotCompensation_descriptor_ = file->message_type(94);
  static const int stReqGotCompensation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGotCompensation, id_),
  };
  stReqGotCompensation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGotCompensation_descriptor_,
      stReqGotCompensation::default_instance_,
      stReqGotCompensation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGotCompensation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGotCompensation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGotCompensation));
  stReqGotCompensation_ProtoModID_descriptor_ = stReqGotCompensation_descriptor_->enum_type(0);
  stReqGotCompensation_ProtoFunID_descriptor_ = stReqGotCompensation_descriptor_->enum_type(1);
  stGotCompensationResult_descriptor_ = file->message_type(95);
  static const int stGotCompensationResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotCompensationResult, result_),
  };
  stGotCompensationResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGotCompensationResult_descriptor_,
      stGotCompensationResult::default_instance_,
      stGotCompensationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotCompensationResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGotCompensationResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGotCompensationResult));
  stGotCompensationResult_eResult_descriptor_ = stGotCompensationResult_descriptor_->enum_type(0);
  stGotCompensationResult_ProtoModID_descriptor_ = stGotCompensationResult_descriptor_->enum_type(1);
  stGotCompensationResult_ProtoFunID_descriptor_ = stGotCompensationResult_descriptor_->enum_type(2);
  stReq7DayActivityInfo_descriptor_ = file->message_type(96);
  static const int stReq7DayActivityInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReq7DayActivityInfo, day_),
  };
  stReq7DayActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReq7DayActivityInfo_descriptor_,
      stReq7DayActivityInfo::default_instance_,
      stReq7DayActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReq7DayActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReq7DayActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReq7DayActivityInfo));
  stReq7DayActivityInfo_ProtoModID_descriptor_ = stReq7DayActivityInfo_descriptor_->enum_type(0);
  stReq7DayActivityInfo_ProtoFunID_descriptor_ = stReq7DayActivityInfo_descriptor_->enum_type(1);
  stSynSDGoalInfo_descriptor_ = file->message_type(97);
  static const int stSynSDGoalInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSDGoalInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSDGoalInfo, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSDGoalInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSDGoalInfo, hasgotreward_),
  };
  stSynSDGoalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynSDGoalInfo_descriptor_,
      stSynSDGoalInfo::default_instance_,
      stSynSDGoalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSDGoalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynSDGoalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynSDGoalInfo));
  stRet7DayActivityInfo_descriptor_ = file->message_type(98);
  static const int stRet7DayActivityInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRet7DayActivityInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRet7DayActivityInfo, logingoal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRet7DayActivityInfo, gifbaggoal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRet7DayActivityInfo, module1goal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRet7DayActivityInfo, module2goal_),
  };
  stRet7DayActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRet7DayActivityInfo_descriptor_,
      stRet7DayActivityInfo::default_instance_,
      stRet7DayActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRet7DayActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRet7DayActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRet7DayActivityInfo));
  stRet7DayActivityInfo_ProtoModID_descriptor_ = stRet7DayActivityInfo_descriptor_->enum_type(0);
  stRet7DayActivityInfo_ProtoFunID_descriptor_ = stRet7DayActivityInfo_descriptor_->enum_type(1);
  stReqSevenDayReward_descriptor_ = file->message_type(99);
  static const int stReqSevenDayReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSevenDayReward, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSevenDayReward, goaltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSevenDayReward, id_),
  };
  stReqSevenDayReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSevenDayReward_descriptor_,
      stReqSevenDayReward::default_instance_,
      stReqSevenDayReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSevenDayReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSevenDayReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSevenDayReward));
  stReqSevenDayReward_ProtoModID_descriptor_ = stReqSevenDayReward_descriptor_->enum_type(0);
  stReqSevenDayReward_ProtoFunID_descriptor_ = stReqSevenDayReward_descriptor_->enum_type(1);
  stSevenDayRewardRet_descriptor_ = file->message_type(100);
  static const int stSevenDayRewardRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSevenDayRewardRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSevenDayRewardRet, goaltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSevenDayRewardRet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSevenDayRewardRet, day_),
  };
  stSevenDayRewardRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSevenDayRewardRet_descriptor_,
      stSevenDayRewardRet::default_instance_,
      stSevenDayRewardRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSevenDayRewardRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSevenDayRewardRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSevenDayRewardRet));
  stSevenDayRewardRet_eResult_descriptor_ = stSevenDayRewardRet_descriptor_->enum_type(0);
  stSevenDayRewardRet_ProtoModID_descriptor_ = stSevenDayRewardRet_descriptor_->enum_type(1);
  stSevenDayRewardRet_ProtoFunID_descriptor_ = stSevenDayRewardRet_descriptor_->enum_type(2);
  stSevenDayHasRewardTip_descriptor_ = file->message_type(101);
  static const int stSevenDayHasRewardTip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSevenDayHasRewardTip, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSevenDayHasRewardTip, hasreward_),
  };
  stSevenDayHasRewardTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSevenDayHasRewardTip_descriptor_,
      stSevenDayHasRewardTip::default_instance_,
      stSevenDayHasRewardTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSevenDayHasRewardTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSevenDayHasRewardTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSevenDayHasRewardTip));
  stSevenDayHasRewardTip_ProtoModID_descriptor_ = stSevenDayHasRewardTip_descriptor_->enum_type(0);
  stSevenDayHasRewardTip_ProtoFunID_descriptor_ = stSevenDayHasRewardTip_descriptor_->enum_type(1);
  stAppStoreCfg_descriptor_ = file->message_type(102);
  static const int stAppStoreCfg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAppStoreCfg, openappversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAppStoreCfg, issandbox_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAppStoreCfg, directbuy_),
  };
  stAppStoreCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAppStoreCfg_descriptor_,
      stAppStoreCfg::default_instance_,
      stAppStoreCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAppStoreCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAppStoreCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAppStoreCfg));
  stAppStoreCfg_ProtoModID_descriptor_ = stAppStoreCfg_descriptor_->enum_type(0);
  stAppStoreCfg_ProtoFunID_descriptor_ = stAppStoreCfg_descriptor_->enum_type(1);
  stOpenWindowTip_descriptor_ = file->message_type(103);
  static const int stOpenWindowTip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenWindowTip, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenWindowTip, content_),
  };
  stOpenWindowTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOpenWindowTip_descriptor_,
      stOpenWindowTip::default_instance_,
      stOpenWindowTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenWindowTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenWindowTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOpenWindowTip));
  stOpenWindowTip_eAction_descriptor_ = stOpenWindowTip_descriptor_->enum_type(0);
  stOpenWindowTip_ProtoModID_descriptor_ = stOpenWindowTip_descriptor_->enum_type(1);
  stOpenWindowTip_ProtoFunID_descriptor_ = stOpenWindowTip_descriptor_->enum_type(2);
  stReqRechargeActivityList_descriptor_ = file->message_type(104);
  static const int stReqRechargeActivityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeActivityList, charid_),
  };
  stReqRechargeActivityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRechargeActivityList_descriptor_,
      stReqRechargeActivityList::default_instance_,
      stReqRechargeActivityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeActivityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeActivityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRechargeActivityList));
  stReqRechargeActivityList_ProtoModID_descriptor_ = stReqRechargeActivityList_descriptor_->enum_type(0);
  stReqRechargeActivityList_ProtoFunID_descriptor_ = stReqRechargeActivityList_descriptor_->enum_type(1);
  stSynRechargeActivityInfo_descriptor_ = file->message_type(105);
  static const int stSynRechargeActivityInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRechargeActivityInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRechargeActivityInfo, rechargenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRechargeActivityInfo, gotrewardsteps_),
  };
  stSynRechargeActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRechargeActivityInfo_descriptor_,
      stSynRechargeActivityInfo::default_instance_,
      stSynRechargeActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRechargeActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRechargeActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRechargeActivityInfo));
  stRetRechargeActivityList_descriptor_ = file->message_type(106);
  static const int stRetRechargeActivityList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRechargeActivityList, infos_),
  };
  stRetRechargeActivityList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRechargeActivityList_descriptor_,
      stRetRechargeActivityList::default_instance_,
      stRetRechargeActivityList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRechargeActivityList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRechargeActivityList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRechargeActivityList));
  stRetRechargeActivityList_ProtoModID_descriptor_ = stRetRechargeActivityList_descriptor_->enum_type(0);
  stRetRechargeActivityList_ProtoFunID_descriptor_ = stRetRechargeActivityList_descriptor_->enum_type(1);
  stReqRechargeActivtiyReward_descriptor_ = file->message_type(107);
  static const int stReqRechargeActivtiyReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeActivtiyReward, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeActivtiyReward, stepid_),
  };
  stReqRechargeActivtiyReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRechargeActivtiyReward_descriptor_,
      stReqRechargeActivtiyReward::default_instance_,
      stReqRechargeActivtiyReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeActivtiyReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeActivtiyReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRechargeActivtiyReward));
  stReqRechargeActivtiyReward_ProtoModID_descriptor_ = stReqRechargeActivtiyReward_descriptor_->enum_type(0);
  stReqRechargeActivtiyReward_ProtoFunID_descriptor_ = stReqRechargeActivtiyReward_descriptor_->enum_type(1);
  stRetRechargeActivityReward_descriptor_ = file->message_type(108);
  static const int stRetRechargeActivityReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRechargeActivityReward, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRechargeActivityReward, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRechargeActivityReward, result_),
  };
  stRetRechargeActivityReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRechargeActivityReward_descriptor_,
      stRetRechargeActivityReward::default_instance_,
      stRetRechargeActivityReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRechargeActivityReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRechargeActivityReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRechargeActivityReward));
  stRetRechargeActivityReward_eResult_descriptor_ = stRetRechargeActivityReward_descriptor_->enum_type(0);
  stRetRechargeActivityReward_ProtoModID_descriptor_ = stRetRechargeActivityReward_descriptor_->enum_type(1);
  stRetRechargeActivityReward_ProtoFunID_descriptor_ = stRetRechargeActivityReward_descriptor_->enum_type(2);
  stSynInvestigation_descriptor_ = file->message_type(109);
  static const int stSynInvestigation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynInvestigation, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynInvestigation, levels_),
  };
  stSynInvestigation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynInvestigation_descriptor_,
      stSynInvestigation::default_instance_,
      stSynInvestigation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynInvestigation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynInvestigation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynInvestigation));
  stSynAllInvestigation_descriptor_ = file->message_type(110);
  static const int stSynAllInvestigation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllInvestigation, infos_),
  };
  stSynAllInvestigation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynAllInvestigation_descriptor_,
      stSynAllInvestigation::default_instance_,
      stSynAllInvestigation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllInvestigation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllInvestigation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynAllInvestigation));
  stSynAllInvestigation_ProtoModID_descriptor_ = stSynAllInvestigation_descriptor_->enum_type(0);
  stSynAllInvestigation_ProtoFunID_descriptor_ = stSynAllInvestigation_descriptor_->enum_type(1);
  stInvestAnswer_descriptor_ = file->message_type(111);
  static const int stInvestAnswer_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, problemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, answera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, answerb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, answerc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, answerd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, answere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, answerf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, answerg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, answerh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, answeri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, answerj_),
  };
  stInvestAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInvestAnswer_descriptor_,
      stInvestAnswer::default_instance_,
      stInvestAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInvestAnswer));
  stReqInvestgationReward_descriptor_ = file->message_type(112);
  static const int stReqInvestgationReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInvestgationReward, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInvestgationReward, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInvestgationReward, answers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInvestgationReward, usetime_),
  };
  stReqInvestgationReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqInvestgationReward_descriptor_,
      stReqInvestgationReward::default_instance_,
      stReqInvestgationReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInvestgationReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInvestgationReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqInvestgationReward));
  stReqInvestgationReward_ProtoModID_descriptor_ = stReqInvestgationReward_descriptor_->enum_type(0);
  stReqInvestgationReward_ProtoFunID_descriptor_ = stReqInvestgationReward_descriptor_->enum_type(1);
  stInvestgationRewardResult_descriptor_ = file->message_type(113);
  static const int stInvestgationRewardResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestgationRewardResult, result_),
  };
  stInvestgationRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInvestgationRewardResult_descriptor_,
      stInvestgationRewardResult::default_instance_,
      stInvestgationRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestgationRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvestgationRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInvestgationRewardResult));
  stInvestgationRewardResult_eResult_descriptor_ = stInvestgationRewardResult_descriptor_->enum_type(0);
  stInvestgationRewardResult_ProtoModID_descriptor_ = stInvestgationRewardResult_descriptor_->enum_type(1);
  stInvestgationRewardResult_ProtoFunID_descriptor_ = stInvestgationRewardResult_descriptor_->enum_type(2);
  stReqActivityShop_descriptor_ = file->message_type(114);
  static const int stReqActivityShop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqActivityShop, charid_),
  };
  stReqActivityShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqActivityShop_descriptor_,
      stReqActivityShop::default_instance_,
      stReqActivityShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqActivityShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqActivityShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqActivityShop));
  stReqActivityShop_ProtoModID_descriptor_ = stReqActivityShop_descriptor_->enum_type(0);
  stReqActivityShop_ProtoFunID_descriptor_ = stReqActivityShop_descriptor_->enum_type(1);
  stActivityShopList_descriptor_ = file->message_type(115);
  static const int stActivityShopList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityShopList, activityids_),
  };
  stActivityShopList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stActivityShopList_descriptor_,
      stActivityShopList::default_instance_,
      stActivityShopList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityShopList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityShopList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stActivityShopList));
  stActivityShopList_ProtoModID_descriptor_ = stActivityShopList_descriptor_->enum_type(0);
  stActivityShopList_ProtoFunID_descriptor_ = stActivityShopList_descriptor_->enum_type(1);
  stLuchShopInfo_descriptor_ = file->message_type(116);
  static const int stLuchShopInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuchShopInfo, currewardviplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuchShopInfo, randrewardentryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuchShopInfo, hasgotreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuchShopInfo, todayhasrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuchShopInfo, openwindowtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuchShopInfo, rechargemeetcondtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuchShopInfo, opensvrday_),
  };
  stLuchShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLuchShopInfo_descriptor_,
      stLuchShopInfo::default_instance_,
      stLuchShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuchShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuchShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLuchShopInfo));
  stLuchShopInfo_ProtoModID_descriptor_ = stLuchShopInfo_descriptor_->enum_type(0);
  stLuchShopInfo_ProtoFunID_descriptor_ = stLuchShopInfo_descriptor_->enum_type(1);
  stSynLuckShopTodayRecharge_descriptor_ = file->message_type(117);
  static const int stSynLuckShopTodayRecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLuckShopTodayRecharge, num_),
  };
  stSynLuckShopTodayRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynLuckShopTodayRecharge_descriptor_,
      stSynLuckShopTodayRecharge::default_instance_,
      stSynLuckShopTodayRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLuckShopTodayRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynLuckShopTodayRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynLuckShopTodayRecharge));
  stSynLuckShopTodayRecharge_ProtoModID_descriptor_ = stSynLuckShopTodayRecharge_descriptor_->enum_type(0);
  stSynLuckShopTodayRecharge_ProtoFunID_descriptor_ = stSynLuckShopTodayRecharge_descriptor_->enum_type(1);
  stReqLuckShopReward_descriptor_ = file->message_type(118);
  static const int stReqLuckShopReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckShopReward, charid_),
  };
  stReqLuckShopReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLuckShopReward_descriptor_,
      stReqLuckShopReward::default_instance_,
      stReqLuckShopReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckShopReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckShopReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLuckShopReward));
  stReqLuckShopReward_ProtoModID_descriptor_ = stReqLuckShopReward_descriptor_->enum_type(0);
  stReqLuckShopReward_ProtoFunID_descriptor_ = stReqLuckShopReward_descriptor_->enum_type(1);
  stLuckShopRewardResult_descriptor_ = file->message_type(119);
  static const int stLuckShopRewardResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckShopRewardResult, result_),
  };
  stLuckShopRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLuckShopRewardResult_descriptor_,
      stLuckShopRewardResult::default_instance_,
      stLuckShopRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckShopRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckShopRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLuckShopRewardResult));
  stLuckShopRewardResult_eResult_descriptor_ = stLuckShopRewardResult_descriptor_->enum_type(0);
  stLuckShopRewardResult_ProtoModID_descriptor_ = stLuckShopRewardResult_descriptor_->enum_type(1);
  stLuckShopRewardResult_ProtoFunID_descriptor_ = stLuckShopRewardResult_descriptor_->enum_type(2);
  stSaveOpenLuckShopWinTime_descriptor_ = file->message_type(120);
  static const int stSaveOpenLuckShopWinTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveOpenLuckShopWinTime, charid_),
  };
  stSaveOpenLuckShopWinTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSaveOpenLuckShopWinTime_descriptor_,
      stSaveOpenLuckShopWinTime::default_instance_,
      stSaveOpenLuckShopWinTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveOpenLuckShopWinTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveOpenLuckShopWinTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSaveOpenLuckShopWinTime));
  stSaveOpenLuckShopWinTime_ProtoModID_descriptor_ = stSaveOpenLuckShopWinTime_descriptor_->enum_type(0);
  stSaveOpenLuckShopWinTime_ProtoFunID_descriptor_ = stSaveOpenLuckShopWinTime_descriptor_->enum_type(1);
  stLuckShopRechargeMeetCondTime_descriptor_ = file->message_type(121);
  static const int stLuckShopRechargeMeetCondTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckShopRechargeMeetCondTime, meetcondtime_),
  };
  stLuckShopRechargeMeetCondTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLuckShopRechargeMeetCondTime_descriptor_,
      stLuckShopRechargeMeetCondTime::default_instance_,
      stLuckShopRechargeMeetCondTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckShopRechargeMeetCondTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckShopRechargeMeetCondTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLuckShopRechargeMeetCondTime));
  stLuckShopRechargeMeetCondTime_ProtoModID_descriptor_ = stLuckShopRechargeMeetCondTime_descriptor_->enum_type(0);
  stLuckShopRechargeMeetCondTime_ProtoFunID_descriptor_ = stLuckShopRechargeMeetCondTime_descriptor_->enum_type(1);
  stReqOpenGuardWin_descriptor_ = file->message_type(122);
  static const int stReqOpenGuardWin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenGuardWin, charid_),
  };
  stReqOpenGuardWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenGuardWin_descriptor_,
      stReqOpenGuardWin::default_instance_,
      stReqOpenGuardWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenGuardWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenGuardWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenGuardWin));
  stReqOpenGuardWin_ProtoModID_descriptor_ = stReqOpenGuardWin_descriptor_->enum_type(0);
  stReqOpenGuardWin_ProtoFunID_descriptor_ = stReqOpenGuardWin_descriptor_->enum_type(1);
  stGuardEnemy_descriptor_ = file->message_type(123);
  static const int stGuardEnemy_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardEnemy, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardEnemy, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardEnemy, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardEnemy, sex_),
  };
  stGuardEnemy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuardEnemy_descriptor_,
      stGuardEnemy::default_instance_,
      stGuardEnemy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardEnemy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardEnemy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuardEnemy));
  stGuardBaseInfo_descriptor_ = file->message_type(124);
  static const int stGuardBaseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardBaseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardBaseInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardBaseInfo, remaintime_),
  };
  stGuardBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuardBaseInfo_descriptor_,
      stGuardBaseInfo::default_instance_,
      stGuardBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuardBaseInfo));
  stGuardDetailInfo_descriptor_ = file->message_type(125);
  static const int stGuardDetailInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, beinterceptnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, inspirednum_),
  };
  stGuardDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuardDetailInfo_descriptor_,
      stGuardDetailInfo::default_instance_,
      stGuardDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuardDetailInfo));
  stGuardWinInfo_descriptor_ = file->message_type(126);
  static const int stGuardWinInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardWinInfo, guardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardWinInfo, interceptnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardWinInfo, helpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardWinInfo, enemies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardWinInfo, guardinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardWinInfo, interceptcd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardWinInfo, guardremaintime_),
  };
  stGuardWinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuardWinInfo_descriptor_,
      stGuardWinInfo::default_instance_,
      stGuardWinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardWinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardWinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuardWinInfo));
  stGuardWinInfo_ProtoModID_descriptor_ = stGuardWinInfo_descriptor_->enum_type(0);
  stGuardWinInfo_ProtoFunID_descriptor_ = stGuardWinInfo_descriptor_->enum_type(1);
  stResetInterceptCD_descriptor_ = file->message_type(127);
  static const int stResetInterceptCD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptCD, charid_),
  };
  stResetInterceptCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetInterceptCD_descriptor_,
      stResetInterceptCD::default_instance_,
      stResetInterceptCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetInterceptCD));
  stResetInterceptCD_ProtoModID_descriptor_ = stResetInterceptCD_descriptor_->enum_type(0);
  stResetInterceptCD_ProtoFunID_descriptor_ = stResetInterceptCD_descriptor_->enum_type(1);
  stResetInterceptCDResult_descriptor_ = file->message_type(128);
  static const int stResetInterceptCDResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptCDResult, result_),
  };
  stResetInterceptCDResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetInterceptCDResult_descriptor_,
      stResetInterceptCDResult::default_instance_,
      stResetInterceptCDResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptCDResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptCDResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetInterceptCDResult));
  stResetInterceptCDResult_eResult_descriptor_ = stResetInterceptCDResult_descriptor_->enum_type(0);
  stResetInterceptCDResult_ProtoModID_descriptor_ = stResetInterceptCDResult_descriptor_->enum_type(1);
  stResetInterceptCDResult_ProtoFunID_descriptor_ = stResetInterceptCDResult_descriptor_->enum_type(2);
  stResetInterceptNum_descriptor_ = file->message_type(129);
  static const int stResetInterceptNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptNum, charid_),
  };
  stResetInterceptNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetInterceptNum_descriptor_,
      stResetInterceptNum::default_instance_,
      stResetInterceptNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetInterceptNum));
  stResetInterceptNum_ProtoModID_descriptor_ = stResetInterceptNum_descriptor_->enum_type(0);
  stResetInterceptNum_ProtoFunID_descriptor_ = stResetInterceptNum_descriptor_->enum_type(1);
  stResetInterceptNumResult_descriptor_ = file->message_type(130);
  static const int stResetInterceptNumResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptNumResult, result_),
  };
  stResetInterceptNumResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResetInterceptNumResult_descriptor_,
      stResetInterceptNumResult::default_instance_,
      stResetInterceptNumResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptNumResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResetInterceptNumResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResetInterceptNumResult));
  stResetInterceptNumResult_eResult_descriptor_ = stResetInterceptNumResult_descriptor_->enum_type(0);
  stResetInterceptNumResult_ProtoModID_descriptor_ = stResetInterceptNumResult_descriptor_->enum_type(1);
  stResetInterceptNumResult_ProtoFunID_descriptor_ = stResetInterceptNumResult_descriptor_->enum_type(2);
  stReqGuardDetailInfo_descriptor_ = file->message_type(131);
  static const int stReqGuardDetailInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuardDetailInfo, charid_),
  };
  stReqGuardDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGuardDetailInfo_descriptor_,
      stReqGuardDetailInfo::default_instance_,
      stReqGuardDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuardDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuardDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGuardDetailInfo));
  stReqGuardDetailInfo_ProtoModID_descriptor_ = stReqGuardDetailInfo_descriptor_->enum_type(0);
  stReqGuardDetailInfo_ProtoFunID_descriptor_ = stReqGuardDetailInfo_descriptor_->enum_type(1);
  stRetGuardDetailInfo_descriptor_ = file->message_type(132);
  static const int stRetGuardDetailInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuardDetailInfo, detailinfo_),
  };
  stRetGuardDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetGuardDetailInfo_descriptor_,
      stRetGuardDetailInfo::default_instance_,
      stRetGuardDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuardDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuardDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetGuardDetailInfo));
  stRetGuardDetailInfo_ProtoModID_descriptor_ = stRetGuardDetailInfo_descriptor_->enum_type(0);
  stRetGuardDetailInfo_ProtoFunID_descriptor_ = stRetGuardDetailInfo_descriptor_->enum_type(1);
  stReqIntercept_descriptor_ = file->message_type(133);
  static const int stReqIntercept_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIntercept, charid_),
  };
  stReqIntercept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqIntercept_descriptor_,
      stReqIntercept::default_instance_,
      stReqIntercept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIntercept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIntercept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqIntercept));
  stReqIntercept_ProtoModID_descriptor_ = stReqIntercept_descriptor_->enum_type(0);
  stReqIntercept_ProtoFunID_descriptor_ = stReqIntercept_descriptor_->enum_type(1);
  stIntercerptResult_descriptor_ = file->message_type(134);
  static const int stIntercerptResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIntercerptResult, result_),
  };
  stIntercerptResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stIntercerptResult_descriptor_,
      stIntercerptResult::default_instance_,
      stIntercerptResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIntercerptResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIntercerptResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stIntercerptResult));
  stIntercerptResult_eResult_descriptor_ = stIntercerptResult_descriptor_->enum_type(0);
  stIntercerptResult_ProtoModID_descriptor_ = stIntercerptResult_descriptor_->enum_type(1);
  stIntercerptResult_ProtoFunID_descriptor_ = stIntercerptResult_descriptor_->enum_type(2);
  stReqGuard_descriptor_ = file->message_type(135);
  static const int stReqGuard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuard, charid_),
  };
  stReqGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGuard_descriptor_,
      stReqGuard::default_instance_,
      stReqGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGuard));
  stReqGuard_ProtoModID_descriptor_ = stReqGuard_descriptor_->enum_type(0);
  stReqGuard_ProtoFunID_descriptor_ = stReqGuard_descriptor_->enum_type(1);
  stRetGuardWin_descriptor_ = file->message_type(136);
  static const int stRetGuardWin_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuardWin, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuardWin, refreshnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuardWin, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuardWin, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuardWin, canfreerefresh_),
  };
  stRetGuardWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetGuardWin_descriptor_,
      stRetGuardWin::default_instance_,
      stRetGuardWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuardWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuardWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetGuardWin));
  stRetGuardWin_ProtoModID_descriptor_ = stRetGuardWin_descriptor_->enum_type(0);
  stRetGuardWin_ProtoFunID_descriptor_ = stRetGuardWin_descriptor_->enum_type(1);
  stReqSummonHighQualityGuard_descriptor_ = file->message_type(137);
  static const int stReqSummonHighQualityGuard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonHighQualityGuard, charid_),
  };
  stReqSummonHighQualityGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSummonHighQualityGuard_descriptor_,
      stReqSummonHighQualityGuard::default_instance_,
      stReqSummonHighQualityGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonHighQualityGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonHighQualityGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSummonHighQualityGuard));
  stReqSummonHighQualityGuard_ProtoModID_descriptor_ = stReqSummonHighQualityGuard_descriptor_->enum_type(0);
  stReqSummonHighQualityGuard_ProtoFunID_descriptor_ = stReqSummonHighQualityGuard_descriptor_->enum_type(1);
  stSummonHighQualityGuardResult_descriptor_ = file->message_type(138);
  static const int stSummonHighQualityGuardResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonHighQualityGuardResult, result_),
  };
  stSummonHighQualityGuardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSummonHighQualityGuardResult_descriptor_,
      stSummonHighQualityGuardResult::default_instance_,
      stSummonHighQualityGuardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonHighQualityGuardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonHighQualityGuardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSummonHighQualityGuardResult));
  stSummonHighQualityGuardResult_eResult_descriptor_ = stSummonHighQualityGuardResult_descriptor_->enum_type(0);
  stSummonHighQualityGuardResult_ProtoModID_descriptor_ = stSummonHighQualityGuardResult_descriptor_->enum_type(1);
  stSummonHighQualityGuardResult_ProtoFunID_descriptor_ = stSummonHighQualityGuardResult_descriptor_->enum_type(2);
  stReqGuardInspired_descriptor_ = file->message_type(139);
  static const int stReqGuardInspired_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuardInspired, charid_),
  };
  stReqGuardInspired_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGuardInspired_descriptor_,
      stReqGuardInspired::default_instance_,
      stReqGuardInspired_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuardInspired, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuardInspired, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGuardInspired));
  stReqGuardInspired_ProtoModID_descriptor_ = stReqGuardInspired_descriptor_->enum_type(0);
  stReqGuardInspired_ProtoFunID_descriptor_ = stReqGuardInspired_descriptor_->enum_type(1);
  stGuardInspiredResult_descriptor_ = file->message_type(140);
  static const int stGuardInspiredResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardInspiredResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardInspiredResult, num_),
  };
  stGuardInspiredResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuardInspiredResult_descriptor_,
      stGuardInspiredResult::default_instance_,
      stGuardInspiredResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardInspiredResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuardInspiredResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuardInspiredResult));
  stGuardInspiredResult_eResult_descriptor_ = stGuardInspiredResult_descriptor_->enum_type(0);
  stGuardInspiredResult_ProtoModID_descriptor_ = stGuardInspiredResult_descriptor_->enum_type(1);
  stGuardInspiredResult_ProtoFunID_descriptor_ = stGuardInspiredResult_descriptor_->enum_type(2);
  stReqRefreshGuardQuality_descriptor_ = file->message_type(141);
  static const int stReqRefreshGuardQuality_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshGuardQuality, charid_),
  };
  stReqRefreshGuardQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRefreshGuardQuality_descriptor_,
      stReqRefreshGuardQuality::default_instance_,
      stReqRefreshGuardQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshGuardQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshGuardQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRefreshGuardQuality));
  stReqRefreshGuardQuality_ProtoModID_descriptor_ = stReqRefreshGuardQuality_descriptor_->enum_type(0);
  stReqRefreshGuardQuality_ProtoFunID_descriptor_ = stReqRefreshGuardQuality_descriptor_->enum_type(1);
  stRetRefreshGuardQualityResult_descriptor_ = file->message_type(142);
  static const int stRetRefreshGuardQualityResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRefreshGuardQualityResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRefreshGuardQualityResult, quality_),
  };
  stRetRefreshGuardQualityResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRefreshGuardQualityResult_descriptor_,
      stRetRefreshGuardQualityResult::default_instance_,
      stRetRefreshGuardQualityResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRefreshGuardQualityResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRefreshGuardQualityResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRefreshGuardQualityResult));
  stRetRefreshGuardQualityResult_eResult_descriptor_ = stRetRefreshGuardQualityResult_descriptor_->enum_type(0);
  stRetRefreshGuardQualityResult_ProtoModID_descriptor_ = stRetRefreshGuardQualityResult_descriptor_->enum_type(1);
  stRetRefreshGuardQualityResult_ProtoFunID_descriptor_ = stRetRefreshGuardQualityResult_descriptor_->enum_type(2);
  stReqCanHelpGuardFriend_descriptor_ = file->message_type(143);
  static const int stReqCanHelpGuardFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCanHelpGuardFriend, charid_),
  };
  stReqCanHelpGuardFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCanHelpGuardFriend_descriptor_,
      stReqCanHelpGuardFriend::default_instance_,
      stReqCanHelpGuardFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCanHelpGuardFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCanHelpGuardFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCanHelpGuardFriend));
  stReqCanHelpGuardFriend_ProtoModID_descriptor_ = stReqCanHelpGuardFriend_descriptor_->enum_type(0);
  stReqCanHelpGuardFriend_ProtoFunID_descriptor_ = stReqCanHelpGuardFriend_descriptor_->enum_type(1);
  stHelpGaurdFriendInfo_descriptor_ = file->message_type(144);
  static const int stHelpGaurdFriendInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHelpGaurdFriendInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHelpGaurdFriendInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHelpGaurdFriendInfo, remainhelpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHelpGaurdFriendInfo, level_),
  };
  stHelpGaurdFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHelpGaurdFriendInfo_descriptor_,
      stHelpGaurdFriendInfo::default_instance_,
      stHelpGaurdFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHelpGaurdFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHelpGaurdFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHelpGaurdFriendInfo));
  stRetCanHelpGuardFriend_descriptor_ = file->message_type(145);
  static const int stRetCanHelpGuardFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCanHelpGuardFriend, infos_),
  };
  stRetCanHelpGuardFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetCanHelpGuardFriend_descriptor_,
      stRetCanHelpGuardFriend::default_instance_,
      stRetCanHelpGuardFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCanHelpGuardFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetCanHelpGuardFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetCanHelpGuardFriend));
  stRetCanHelpGuardFriend_ProtoModID_descriptor_ = stRetCanHelpGuardFriend_descriptor_->enum_type(0);
  stRetCanHelpGuardFriend_ProtoFunID_descriptor_ = stRetCanHelpGuardFriend_descriptor_->enum_type(1);
  stInviteFriendForHelpGuard_descriptor_ = file->message_type(146);
  static const int stInviteFriendForHelpGuard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteFriendForHelpGuard, charid_),
  };
  stInviteFriendForHelpGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInviteFriendForHelpGuard_descriptor_,
      stInviteFriendForHelpGuard::default_instance_,
      stInviteFriendForHelpGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteFriendForHelpGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteFriendForHelpGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInviteFriendForHelpGuard));
  stInviteFriendForHelpGuard_ProtoModID_descriptor_ = stInviteFriendForHelpGuard_descriptor_->enum_type(0);
  stInviteFriendForHelpGuard_ProtoFunID_descriptor_ = stInviteFriendForHelpGuard_descriptor_->enum_type(1);
  stInviteFriendForHelpGuardResult_descriptor_ = file->message_type(147);
  static const int stInviteFriendForHelpGuardResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteFriendForHelpGuardResult, result_),
  };
  stInviteFriendForHelpGuardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInviteFriendForHelpGuardResult_descriptor_,
      stInviteFriendForHelpGuardResult::default_instance_,
      stInviteFriendForHelpGuardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteFriendForHelpGuardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteFriendForHelpGuardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInviteFriendForHelpGuardResult));
  stInviteFriendForHelpGuardResult_eResult_descriptor_ = stInviteFriendForHelpGuardResult_descriptor_->enum_type(0);
  stInviteFriendForHelpGuardResult_ProtoModID_descriptor_ = stInviteFriendForHelpGuardResult_descriptor_->enum_type(1);
  stInviteFriendForHelpGuardResult_ProtoFunID_descriptor_ = stInviteFriendForHelpGuardResult_descriptor_->enum_type(2);
  stAskFriendHelpGuard_descriptor_ = file->message_type(148);
  static const int stAskFriendHelpGuard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskFriendHelpGuard, invitername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskFriendHelpGuard, inviterid_),
  };
  stAskFriendHelpGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAskFriendHelpGuard_descriptor_,
      stAskFriendHelpGuard::default_instance_,
      stAskFriendHelpGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskFriendHelpGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskFriendHelpGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAskFriendHelpGuard));
  stAskFriendHelpGuard_ProtoModID_descriptor_ = stAskFriendHelpGuard_descriptor_->enum_type(0);
  stAskFriendHelpGuard_ProtoFunID_descriptor_ = stAskFriendHelpGuard_descriptor_->enum_type(1);
  stReplyHelpGuard_descriptor_ = file->message_type(149);
  static const int stReplyHelpGuard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyHelpGuard, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyHelpGuard, charid_),
  };
  stReplyHelpGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplyHelpGuard_descriptor_,
      stReplyHelpGuard::default_instance_,
      stReplyHelpGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyHelpGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyHelpGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplyHelpGuard));
  stReplyHelpGuard_ProtoModID_descriptor_ = stReplyHelpGuard_descriptor_->enum_type(0);
  stReplyHelpGuard_ProtoFunID_descriptor_ = stReplyHelpGuard_descriptor_->enum_type(1);
  stReplyHelpGuardResult_descriptor_ = file->message_type(150);
  static const int stReplyHelpGuardResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyHelpGuardResult, result_),
  };
  stReplyHelpGuardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplyHelpGuardResult_descriptor_,
      stReplyHelpGuardResult::default_instance_,
      stReplyHelpGuardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyHelpGuardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyHelpGuardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplyHelpGuardResult));
  stReplyHelpGuardResult_eResult_descriptor_ = stReplyHelpGuardResult_descriptor_->enum_type(0);
  stReplyHelpGuardResult_ProtoModID_descriptor_ = stReplyHelpGuardResult_descriptor_->enum_type(1);
  stReplyHelpGuardResult_ProtoFunID_descriptor_ = stReplyHelpGuardResult_descriptor_->enum_type(2);
  stUserAgreeHelpGuard_descriptor_ = file->message_type(151);
  static const int stUserAgreeHelpGuard_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserAgreeHelpGuard, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserAgreeHelpGuard, charid_),
  };
  stUserAgreeHelpGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserAgreeHelpGuard_descriptor_,
      stUserAgreeHelpGuard::default_instance_,
      stUserAgreeHelpGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserAgreeHelpGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserAgreeHelpGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserAgreeHelpGuard));
  stUserAgreeHelpGuard_ProtoModID_descriptor_ = stUserAgreeHelpGuard_descriptor_->enum_type(0);
  stUserAgreeHelpGuard_ProtoFunID_descriptor_ = stUserAgreeHelpGuard_descriptor_->enum_type(1);
  stBeginGuard_descriptor_ = file->message_type(152);
  static const int stBeginGuard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginGuard, charid_),
  };
  stBeginGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBeginGuard_descriptor_,
      stBeginGuard::default_instance_,
      stBeginGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBeginGuard));
  stBeginGuard_ProtoModID_descriptor_ = stBeginGuard_descriptor_->enum_type(0);
  stBeginGuard_ProtoFunID_descriptor_ = stBeginGuard_descriptor_->enum_type(1);
  stBeginGuardResult_descriptor_ = file->message_type(153);
  static const int stBeginGuardResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginGuardResult, result_),
  };
  stBeginGuardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBeginGuardResult_descriptor_,
      stBeginGuardResult::default_instance_,
      stBeginGuardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginGuardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginGuardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBeginGuardResult));
  stBeginGuardResult_eResult_descriptor_ = stBeginGuardResult_descriptor_->enum_type(0);
  stBeginGuardResult_ProtoModID_descriptor_ = stBeginGuardResult_descriptor_->enum_type(1);
  stBeginGuardResult_ProtoFunID_descriptor_ = stBeginGuardResult_descriptor_->enum_type(2);
  stInterceptInfo_descriptor_ = file->message_type(154);
  static const int stInterceptInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptInfo, content_),
  };
  stInterceptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInterceptInfo_descriptor_,
      stInterceptInfo::default_instance_,
      stInterceptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInterceptInfo));
  stReqInterceptInfo_descriptor_ = file->message_type(155);
  static const int stReqInterceptInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInterceptInfo, charid_),
  };
  stReqInterceptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqInterceptInfo_descriptor_,
      stReqInterceptInfo::default_instance_,
      stReqInterceptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInterceptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInterceptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqInterceptInfo));
  stReqInterceptInfo_ProtoModID_descriptor_ = stReqInterceptInfo_descriptor_->enum_type(0);
  stReqInterceptInfo_ProtoFunID_descriptor_ = stReqInterceptInfo_descriptor_->enum_type(1);
  stRetInterceptInfo_descriptor_ = file->message_type(156);
  static const int stRetInterceptInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetInterceptInfo, infos_),
  };
  stRetInterceptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetInterceptInfo_descriptor_,
      stRetInterceptInfo::default_instance_,
      stRetInterceptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetInterceptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetInterceptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetInterceptInfo));
  stRetInterceptInfo_ProtoModID_descriptor_ = stRetInterceptInfo_descriptor_->enum_type(0);
  stRetInterceptInfo_ProtoFunID_descriptor_ = stRetInterceptInfo_descriptor_->enum_type(1);
  stRechargeActivityInfoItem_descriptor_ = file->message_type(157);
  static const int stRechargeActivityInfoItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeActivityInfoItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeActivityInfoItem, rechargenum_),
  };
  stRechargeActivityInfoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRechargeActivityInfoItem_descriptor_,
      stRechargeActivityInfoItem::default_instance_,
      stRechargeActivityInfoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeActivityInfoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeActivityInfoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRechargeActivityInfoItem));
  stNotifyRechargeActivityInfo_descriptor_ = file->message_type(158);
  static const int stNotifyRechargeActivityInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRechargeActivityInfo, items_),
  };
  stNotifyRechargeActivityInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyRechargeActivityInfo_descriptor_,
      stNotifyRechargeActivityInfo::default_instance_,
      stNotifyRechargeActivityInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRechargeActivityInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRechargeActivityInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyRechargeActivityInfo));
  stNotifyRechargeActivityInfo_ProtoModID_descriptor_ = stNotifyRechargeActivityInfo_descriptor_->enum_type(0);
  stNotifyRechargeActivityInfo_ProtoFunID_descriptor_ = stNotifyRechargeActivityInfo_descriptor_->enum_type(1);
  stLuckShopRefreshResult_descriptor_ = file->message_type(159);
  static const int stLuckShopRefreshResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckShopRefreshResult, currefreshviplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckShopRefreshResult, entryid_),
  };
  stLuckShopRefreshResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLuckShopRefreshResult_descriptor_,
      stLuckShopRefreshResult::default_instance_,
      stLuckShopRefreshResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckShopRefreshResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckShopRefreshResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLuckShopRefreshResult));
  stLuckShopRefreshResult_ProtoModID_descriptor_ = stLuckShopRefreshResult_descriptor_->enum_type(0);
  stLuckShopRefreshResult_ProtoFunID_descriptor_ = stLuckShopRefreshResult_descriptor_->enum_type(1);
  stNotifyGuardFinish_descriptor_ = file->message_type(160);
  static const int stNotifyGuardFinish_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, beinterceptnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, resid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, resnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, resid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, resnum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, resid3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, resnum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, guardid_),
  };
  stNotifyGuardFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyGuardFinish_descriptor_,
      stNotifyGuardFinish::default_instance_,
      stNotifyGuardFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyGuardFinish));
  stNotifyGuardFinish_ProtoModID_descriptor_ = stNotifyGuardFinish_descriptor_->enum_type(0);
  stNotifyGuardFinish_ProtoFunID_descriptor_ = stNotifyGuardFinish_descriptor_->enum_type(1);
  stNotifyFriendGuardFinish_descriptor_ = file->message_type(161);
  static const int stNotifyFriendGuardFinish_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendGuardFinish, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendGuardFinish, beinterceptnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendGuardFinish, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendGuardFinish, resid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendGuardFinish, resnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendGuardFinish, resid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendGuardFinish, resnum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendGuardFinish, guardid_),
  };
  stNotifyFriendGuardFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyFriendGuardFinish_descriptor_,
      stNotifyFriendGuardFinish::default_instance_,
      stNotifyFriendGuardFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendGuardFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriendGuardFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyFriendGuardFinish));
  stNotifyFriendGuardFinish_ProtoModID_descriptor_ = stNotifyFriendGuardFinish_descriptor_->enum_type(0);
  stNotifyFriendGuardFinish_ProtoFunID_descriptor_ = stNotifyFriendGuardFinish_descriptor_->enum_type(1);
  stNotifyInterceptResult_descriptor_ = file->message_type(162);
  static const int stNotifyInterceptResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyInterceptResult, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyInterceptResult, flag_),
  };
  stNotifyInterceptResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyInterceptResult_descriptor_,
      stNotifyInterceptResult::default_instance_,
      stNotifyInterceptResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyInterceptResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyInterceptResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyInterceptResult));
  stNotifyInterceptResult_ProtoModID_descriptor_ = stNotifyInterceptResult_descriptor_->enum_type(0);
  stNotifyInterceptResult_ProtoFunID_descriptor_ = stNotifyInterceptResult_descriptor_->enum_type(1);
  stReplyNotifyIntercept_descriptor_ = file->message_type(163);
  static const int stReplyNotifyIntercept_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyNotifyIntercept, resid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyNotifyIntercept, resnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyNotifyIntercept, resid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyNotifyIntercept, resnum2_),
  };
  stReplyNotifyIntercept_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplyNotifyIntercept_descriptor_,
      stReplyNotifyIntercept::default_instance_,
      stReplyNotifyIntercept_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyNotifyIntercept, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyNotifyIntercept, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplyNotifyIntercept));
  stReplyNotifyIntercept_ProtoModID_descriptor_ = stReplyNotifyIntercept_descriptor_->enum_type(0);
  stReplyNotifyIntercept_ProtoFunID_descriptor_ = stReplyNotifyIntercept_descriptor_->enum_type(1);
  stQuickFinishGuard_descriptor_ = file->message_type(164);
  static const int stQuickFinishGuard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishGuard, charid_),
  };
  stQuickFinishGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQuickFinishGuard_descriptor_,
      stQuickFinishGuard::default_instance_,
      stQuickFinishGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQuickFinishGuard));
  stQuickFinishGuard_ProtoModID_descriptor_ = stQuickFinishGuard_descriptor_->enum_type(0);
  stQuickFinishGuard_ProtoFunID_descriptor_ = stQuickFinishGuard_descriptor_->enum_type(1);
  stQuickFinishGuardResult_descriptor_ = file->message_type(165);
  static const int stQuickFinishGuardResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishGuardResult, result_),
  };
  stQuickFinishGuardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQuickFinishGuardResult_descriptor_,
      stQuickFinishGuardResult::default_instance_,
      stQuickFinishGuardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishGuardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishGuardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQuickFinishGuardResult));
  stQuickFinishGuardResult_eResult_descriptor_ = stQuickFinishGuardResult_descriptor_->enum_type(0);
  stQuickFinishGuardResult_ProtoModID_descriptor_ = stQuickFinishGuardResult_descriptor_->enum_type(1);
  stQuickFinishGuardResult_ProtoFunID_descriptor_ = stQuickFinishGuardResult_descriptor_->enum_type(2);
  stNotifyDelTitle_descriptor_ = file->message_type(166);
  static const int stNotifyDelTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyDelTitle, titleid_),
  };
  stNotifyDelTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyDelTitle_descriptor_,
      stNotifyDelTitle::default_instance_,
      stNotifyDelTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyDelTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyDelTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyDelTitle));
  stNotifyDelTitle_ProtoModID_descriptor_ = stNotifyDelTitle_descriptor_->enum_type(0);
  stNotifyDelTitle_ProtoFunID_descriptor_ = stNotifyDelTitle_descriptor_->enum_type(1);
  stBeInterceptTip_descriptor_ = file->message_type(167);
  static const int stBeInterceptTip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeInterceptTip, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeInterceptTip, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeInterceptTip, quality_),
  };
  stBeInterceptTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBeInterceptTip_descriptor_,
      stBeInterceptTip::default_instance_,
      stBeInterceptTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeInterceptTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeInterceptTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBeInterceptTip));
  stBeInterceptTip_ProtoModID_descriptor_ = stBeInterceptTip_descriptor_->enum_type(0);
  stBeInterceptTip_ProtoFunID_descriptor_ = stBeInterceptTip_descriptor_->enum_type(1);
  stOnlineNotifyNewInterceptInfo_descriptor_ = file->message_type(168);
  static const int stOnlineNotifyNewInterceptInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineNotifyNewInterceptInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineNotifyNewInterceptInfo, guardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineNotifyNewInterceptInfo, intercertnum_),
  };
  stOnlineNotifyNewInterceptInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOnlineNotifyNewInterceptInfo_descriptor_,
      stOnlineNotifyNewInterceptInfo::default_instance_,
      stOnlineNotifyNewInterceptInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineNotifyNewInterceptInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineNotifyNewInterceptInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOnlineNotifyNewInterceptInfo));
  stOnlineNotifyNewInterceptInfo_ProtoModID_descriptor_ = stOnlineNotifyNewInterceptInfo_descriptor_->enum_type(0);
  stOnlineNotifyNewInterceptInfo_ProtoFunID_descriptor_ = stOnlineNotifyNewInterceptInfo_descriptor_->enum_type(1);
  stReqOpenLimitFashionDrawWin_descriptor_ = file->message_type(169);
  static const int stReqOpenLimitFashionDrawWin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenLimitFashionDrawWin, charid_),
  };
  stReqOpenLimitFashionDrawWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenLimitFashionDrawWin_descriptor_,
      stReqOpenLimitFashionDrawWin::default_instance_,
      stReqOpenLimitFashionDrawWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenLimitFashionDrawWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenLimitFashionDrawWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenLimitFashionDrawWin));
  stReqOpenLimitFashionDrawWin_ProtoModID_descriptor_ = stReqOpenLimitFashionDrawWin_descriptor_->enum_type(0);
  stReqOpenLimitFashionDrawWin_ProtoFunID_descriptor_ = stReqOpenLimitFashionDrawWin_descriptor_->enum_type(1);
  stRetLimitFashionDrawWinInfo_descriptor_ = file->message_type(170);
  static const int stRetLimitFashionDrawWinInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLimitFashionDrawWinInfo, candrawnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLimitFashionDrawWinInfo, hasdrawedid_),
  };
  stRetLimitFashionDrawWinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetLimitFashionDrawWinInfo_descriptor_,
      stRetLimitFashionDrawWinInfo::default_instance_,
      stRetLimitFashionDrawWinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLimitFashionDrawWinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLimitFashionDrawWinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetLimitFashionDrawWinInfo));
  stRetLimitFashionDrawWinInfo_ProtoModID_descriptor_ = stRetLimitFashionDrawWinInfo_descriptor_->enum_type(0);
  stRetLimitFashionDrawWinInfo_ProtoFunID_descriptor_ = stRetLimitFashionDrawWinInfo_descriptor_->enum_type(1);
  stReqDrawLimitFashion_descriptor_ = file->message_type(171);
  static const int stReqDrawLimitFashion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawLimitFashion, charid_),
  };
  stReqDrawLimitFashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawLimitFashion_descriptor_,
      stReqDrawLimitFashion::default_instance_,
      stReqDrawLimitFashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawLimitFashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawLimitFashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawLimitFashion));
  stReqDrawLimitFashion_ProtoModID_descriptor_ = stReqDrawLimitFashion_descriptor_->enum_type(0);
  stReqDrawLimitFashion_ProtoFunID_descriptor_ = stReqDrawLimitFashion_descriptor_->enum_type(1);
  stDrawLimitFashionResult_descriptor_ = file->message_type(172);
  static const int stDrawLimitFashionResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawLimitFashionResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawLimitFashionResult, id_),
  };
  stDrawLimitFashionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDrawLimitFashionResult_descriptor_,
      stDrawLimitFashionResult::default_instance_,
      stDrawLimitFashionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawLimitFashionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawLimitFashionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDrawLimitFashionResult));
  stDrawLimitFashionResult_eResult_descriptor_ = stDrawLimitFashionResult_descriptor_->enum_type(0);
  stDrawLimitFashionResult_ProtoModID_descriptor_ = stDrawLimitFashionResult_descriptor_->enum_type(1);
  stDrawLimitFashionResult_ProtoFunID_descriptor_ = stDrawLimitFashionResult_descriptor_->enum_type(2);
  stExchangeItem_descriptor_ = file->message_type(173);
  static const int stExchangeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExchangeItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExchangeItem, num_),
  };
  stExchangeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExchangeItem_descriptor_,
      stExchangeItem::default_instance_,
      stExchangeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExchangeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExchangeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExchangeItem));
  stSynExchangeActivityiStep_descriptor_ = file->message_type(174);
  static const int stSynExchangeActivityiStep_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivityiStep, needitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivityiStep, gotitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivityiStep, hasexchgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivityiStep, maxexchgnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivityiStep, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivityiStep, desc_),
  };
  stSynExchangeActivityiStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynExchangeActivityiStep_descriptor_,
      stSynExchangeActivityiStep::default_instance_,
      stSynExchangeActivityiStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivityiStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivityiStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynExchangeActivityiStep));
  stSynExchangeActivity_descriptor_ = file->message_type(175);
  static const int stSynExchangeActivity_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivity, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivity, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivity, titile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivity, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivity, dailyrefresh_),
  };
  stSynExchangeActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynExchangeActivity_descriptor_,
      stSynExchangeActivity::default_instance_,
      stSynExchangeActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynExchangeActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynExchangeActivity));
  stRetExchangeActivity_descriptor_ = file->message_type(176);
  static const int stRetExchangeActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExchangeActivity, activity_),
  };
  stRetExchangeActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetExchangeActivity_descriptor_,
      stRetExchangeActivity::default_instance_,
      stRetExchangeActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExchangeActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetExchangeActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetExchangeActivity));
  stRetExchangeActivity_ProtoModID_descriptor_ = stRetExchangeActivity_descriptor_->enum_type(0);
  stRetExchangeActivity_ProtoFunID_descriptor_ = stRetExchangeActivity_descriptor_->enum_type(1);
  stReqExchangeItem_descriptor_ = file->message_type(177);
  static const int stReqExchangeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExchangeItem, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExchangeItem, stepid_),
  };
  stReqExchangeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqExchangeItem_descriptor_,
      stReqExchangeItem::default_instance_,
      stReqExchangeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExchangeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqExchangeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqExchangeItem));
  stReqExchangeItem_ProtoModID_descriptor_ = stReqExchangeItem_descriptor_->enum_type(0);
  stReqExchangeItem_ProtoFunID_descriptor_ = stReqExchangeItem_descriptor_->enum_type(1);
  stExchangeItemResult_descriptor_ = file->message_type(178);
  static const int stExchangeItemResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExchangeItemResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExchangeItemResult, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExchangeItemResult, stepid_),
  };
  stExchangeItemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExchangeItemResult_descriptor_,
      stExchangeItemResult::default_instance_,
      stExchangeItemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExchangeItemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExchangeItemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExchangeItemResult));
  stExchangeItemResult_eResult_descriptor_ = stExchangeItemResult_descriptor_->enum_type(0);
  stExchangeItemResult_ProtoModID_descriptor_ = stExchangeItemResult_descriptor_->enum_type(1);
  stExchangeItemResult_ProtoFunID_descriptor_ = stExchangeItemResult_descriptor_->enum_type(2);
  stRecycleRechargeActivity_descriptor_ = file->message_type(179);
  static const int stRecycleRechargeActivity_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecycleRechargeActivity, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecycleRechargeActivity, titile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecycleRechargeActivity, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecycleRechargeActivity, maxrewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecycleRechargeActivity, gotrewardnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecycleRechargeActivity, stepval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecycleRechargeActivity, step_),
  };
  stRecycleRechargeActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRecycleRechargeActivity_descriptor_,
      stRecycleRechargeActivity::default_instance_,
      stRecycleRechargeActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecycleRechargeActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecycleRechargeActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRecycleRechargeActivity));
  stSendRecycleRechargeActivity_descriptor_ = file->message_type(180);
  static const int stSendRecycleRechargeActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendRecycleRechargeActivity, activties_),
  };
  stSendRecycleRechargeActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendRecycleRechargeActivity_descriptor_,
      stSendRecycleRechargeActivity::default_instance_,
      stSendRecycleRechargeActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendRecycleRechargeActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendRecycleRechargeActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendRecycleRechargeActivity));
  stSendRecycleRechargeActivity_ProtoModID_descriptor_ = stSendRecycleRechargeActivity_descriptor_->enum_type(0);
  stSendRecycleRechargeActivity_ProtoFunID_descriptor_ = stSendRecycleRechargeActivity_descriptor_->enum_type(1);
  stReqRecycleRechargeActReward_descriptor_ = file->message_type(181);
  static const int stReqRecycleRechargeActReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecycleRechargeActReward, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecycleRechargeActReward, stepid_),
  };
  stReqRecycleRechargeActReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRecycleRechargeActReward_descriptor_,
      stReqRecycleRechargeActReward::default_instance_,
      stReqRecycleRechargeActReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecycleRechargeActReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecycleRechargeActReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRecycleRechargeActReward));
  stReqRecycleRechargeActReward_ProtoModID_descriptor_ = stReqRecycleRechargeActReward_descriptor_->enum_type(0);
  stReqRecycleRechargeActReward_ProtoFunID_descriptor_ = stReqRecycleRechargeActReward_descriptor_->enum_type(1);
  stRetRecycleRechargeActReward_descriptor_ = file->message_type(182);
  static const int stRetRecycleRechargeActReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecycleRechargeActReward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecycleRechargeActReward, activityid_),
  };
  stRetRecycleRechargeActReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRecycleRechargeActReward_descriptor_,
      stRetRecycleRechargeActReward::default_instance_,
      stRetRecycleRechargeActReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecycleRechargeActReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRecycleRechargeActReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRecycleRechargeActReward));
  stRetRecycleRechargeActReward_eResult_descriptor_ = stRetRecycleRechargeActReward_descriptor_->enum_type(0);
  stRetRecycleRechargeActReward_ProtoModID_descriptor_ = stRetRecycleRechargeActReward_descriptor_->enum_type(1);
  stRetRecycleRechargeActReward_ProtoFunID_descriptor_ = stRetRecycleRechargeActReward_descriptor_->enum_type(2);
  stCommonActInfoItem_descriptor_ = file->message_type(183);
  static const int stCommonActInfoItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonActInfoItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonActInfoItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonActInfoItem, val_),
  };
  stCommonActInfoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCommonActInfoItem_descriptor_,
      stCommonActInfoItem::default_instance_,
      stCommonActInfoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonActInfoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommonActInfoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCommonActInfoItem));
  stRefreshCommonActInfo_descriptor_ = file->message_type(184);
  static const int stRefreshCommonActInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshCommonActInfo, items_),
  };
  stRefreshCommonActInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshCommonActInfo_descriptor_,
      stRefreshCommonActInfo::default_instance_,
      stRefreshCommonActInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshCommonActInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshCommonActInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshCommonActInfo));
  stRefreshCommonActInfo_ProtoModID_descriptor_ = stRefreshCommonActInfo_descriptor_->enum_type(0);
  stRefreshCommonActInfo_ProtoFunID_descriptor_ = stRefreshCommonActInfo_descriptor_->enum_type(1);
  stReqAKeyFetchAttach_descriptor_ = file->message_type(185);
  static const int stReqAKeyFetchAttach_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAKeyFetchAttach, id_),
  };
  stReqAKeyFetchAttach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAKeyFetchAttach_descriptor_,
      stReqAKeyFetchAttach::default_instance_,
      stReqAKeyFetchAttach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAKeyFetchAttach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAKeyFetchAttach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAKeyFetchAttach));
  stReqAKeyFetchAttach_ProtoModID_descriptor_ = stReqAKeyFetchAttach_descriptor_->enum_type(0);
  stReqAKeyFetchAttach_ProtoFunID_descriptor_ = stReqAKeyFetchAttach_descriptor_->enum_type(1);
  stAKeyFetchAttachResult_descriptor_ = file->message_type(186);
  static const int stAKeyFetchAttachResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyFetchAttachResult, result_),
  };
  stAKeyFetchAttachResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAKeyFetchAttachResult_descriptor_,
      stAKeyFetchAttachResult::default_instance_,
      stAKeyFetchAttachResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyFetchAttachResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyFetchAttachResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAKeyFetchAttachResult));
  stAKeyFetchAttachResult_Result_descriptor_ = stAKeyFetchAttachResult_descriptor_->enum_type(0);
  stAKeyFetchAttachResult_ProtoModID_descriptor_ = stAKeyFetchAttachResult_descriptor_->enum_type(1);
  stAKeyFetchAttachResult_ProtoFunID_descriptor_ = stAKeyFetchAttachResult_descriptor_->enum_type(2);
  stReqGloryfashion_descriptor_ = file->message_type(187);
  static const int stReqGloryfashion_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGloryfashion, charid_),
  };
  stReqGloryfashion_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGloryfashion_descriptor_,
      stReqGloryfashion::default_instance_,
      stReqGloryfashion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGloryfashion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGloryfashion, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGloryfashion));
  stReqGloryfashion_ProtoModID_descriptor_ = stReqGloryfashion_descriptor_->enum_type(0);
  stReqGloryfashion_ProtoFunID_descriptor_ = stReqGloryfashion_descriptor_->enum_type(1);
  stGloryfashionResult_descriptor_ = file->message_type(188);
  static const int stGloryfashionResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryfashionResult, result_),
  };
  stGloryfashionResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGloryfashionResult_descriptor_,
      stGloryfashionResult::default_instance_,
      stGloryfashionResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryfashionResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryfashionResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGloryfashionResult));
  stGloryfashionResult_eResult_descriptor_ = stGloryfashionResult_descriptor_->enum_type(0);
  stGloryfashionResult_ProtoModID_descriptor_ = stGloryfashionResult_descriptor_->enum_type(1);
  stGloryfashionResult_ProtoFunID_descriptor_ = stGloryfashionResult_descriptor_->enum_type(2);
  stDevilCallItem_descriptor_ = file->message_type(189);
  static const int stDevilCallItem_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, bossdrawstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, commondrawstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, name1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, name3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, haspass_),
  };
  stDevilCallItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDevilCallItem_descriptor_,
      stDevilCallItem::default_instance_,
      stDevilCallItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDevilCallItem));
  stDevilCallItem_eRewardStatus_descriptor_ = stDevilCallItem_descriptor_->enum_type(0);
  stReqAllDevilCall_descriptor_ = file->message_type(190);
  static const int stReqAllDevilCall_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAllDevilCall, charid_),
  };
  stReqAllDevilCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAllDevilCall_descriptor_,
      stReqAllDevilCall::default_instance_,
      stReqAllDevilCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAllDevilCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAllDevilCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAllDevilCall));
  stReqAllDevilCall_ProtoModID_descriptor_ = stReqAllDevilCall_descriptor_->enum_type(0);
  stReqAllDevilCall_ProtoFunID_descriptor_ = stReqAllDevilCall_descriptor_->enum_type(1);
  stRetAllDevilCall_descriptor_ = file->message_type(191);
  static const int stRetAllDevilCall_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAllDevilCall, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAllDevilCall, item_),
  };
  stRetAllDevilCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetAllDevilCall_descriptor_,
      stRetAllDevilCall::default_instance_,
      stRetAllDevilCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAllDevilCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAllDevilCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetAllDevilCall));
  stRetAllDevilCall_eResult_descriptor_ = stRetAllDevilCall_descriptor_->enum_type(0);
  stRetAllDevilCall_ProtoModID_descriptor_ = stRetAllDevilCall_descriptor_->enum_type(1);
  stRetAllDevilCall_ProtoFunID_descriptor_ = stRetAllDevilCall_descriptor_->enum_type(2);
  stReqDevilCallReward_descriptor_ = file->message_type(192);
  static const int stReqDevilCallReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDevilCallReward, rewardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDevilCallReward, bossid_),
  };
  stReqDevilCallReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDevilCallReward_descriptor_,
      stReqDevilCallReward::default_instance_,
      stReqDevilCallReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDevilCallReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDevilCallReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDevilCallReward));
  stReqDevilCallReward_eType_descriptor_ = stReqDevilCallReward_descriptor_->enum_type(0);
  stReqDevilCallReward_ProtoModID_descriptor_ = stReqDevilCallReward_descriptor_->enum_type(1);
  stReqDevilCallReward_ProtoFunID_descriptor_ = stReqDevilCallReward_descriptor_->enum_type(2);
  stRetDevilCallReward_descriptor_ = file->message_type(193);
  static const int stRetDevilCallReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCallReward, rewardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCallReward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCallReward, bossid_),
  };
  stRetDevilCallReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDevilCallReward_descriptor_,
      stRetDevilCallReward::default_instance_,
      stRetDevilCallReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCallReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCallReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDevilCallReward));
  stRetDevilCallReward_eType_descriptor_ = stRetDevilCallReward_descriptor_->enum_type(0);
  stRetDevilCallReward_eResult_descriptor_ = stRetDevilCallReward_descriptor_->enum_type(1);
  stRetDevilCallReward_ProtoModID_descriptor_ = stRetDevilCallReward_descriptor_->enum_type(2);
  stRetDevilCallReward_ProtoFunID_descriptor_ = stRetDevilCallReward_descriptor_->enum_type(3);
  stReqDevilCall_descriptor_ = file->message_type(194);
  static const int stReqDevilCall_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDevilCall, bossid_),
  };
  stReqDevilCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDevilCall_descriptor_,
      stReqDevilCall::default_instance_,
      stReqDevilCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDevilCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDevilCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDevilCall));
  stReqDevilCall_ProtoModID_descriptor_ = stReqDevilCall_descriptor_->enum_type(0);
  stReqDevilCall_ProtoFunID_descriptor_ = stReqDevilCall_descriptor_->enum_type(1);
  stRetDevilCall_descriptor_ = file->message_type(195);
  static const int stRetDevilCall_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCall, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCall, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCall, items_),
  };
  stRetDevilCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDevilCall_descriptor_,
      stRetDevilCall::default_instance_,
      stRetDevilCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDevilCall));
  stRetDevilCall_eResult_descriptor_ = stRetDevilCall_descriptor_->enum_type(0);
  stRetDevilCall_ProtoModID_descriptor_ = stRetDevilCall_descriptor_->enum_type(1);
  stRetDevilCall_ProtoFunID_descriptor_ = stRetDevilCall_descriptor_->enum_type(2);
  stReqDevilCallSummary_descriptor_ = file->message_type(196);
  static const int stReqDevilCallSummary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDevilCallSummary, charid_),
  };
  stReqDevilCallSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDevilCallSummary_descriptor_,
      stReqDevilCallSummary::default_instance_,
      stReqDevilCallSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDevilCallSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDevilCallSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDevilCallSummary));
  stReqDevilCallSummary_ProtoModID_descriptor_ = stReqDevilCallSummary_descriptor_->enum_type(0);
  stReqDevilCallSummary_ProtoFunID_descriptor_ = stReqDevilCallSummary_descriptor_->enum_type(1);
  stRetDevilCallSummary_descriptor_ = file->message_type(197);
  static const int stRetDevilCallSummary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCallSummary, item_),
  };
  stRetDevilCallSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDevilCallSummary_descriptor_,
      stRetDevilCallSummary::default_instance_,
      stRetDevilCallSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCallSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDevilCallSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDevilCallSummary));
  stRetDevilCallSummary_ProtoModID_descriptor_ = stRetDevilCallSummary_descriptor_->enum_type(0);
  stRetDevilCallSummary_ProtoFunID_descriptor_ = stRetDevilCallSummary_descriptor_->enum_type(1);
  stReqPayType_descriptor_ = file->message_type(198);
  static const int stReqPayType_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, isextend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, data_),
  };
  stReqPayType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPayType_descriptor_,
      stReqPayType::default_instance_,
      stReqPayType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPayType));
  stReqPayType_ProtoModID_descriptor_ = stReqPayType_descriptor_->enum_type(0);
  stReqPayType_ProtoFunID_descriptor_ = stReqPayType_descriptor_->enum_type(1);
  stRetPayType_descriptor_ = file->message_type(199);
  static const int stRetPayType_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetPayType, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetPayType, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetPayType, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetPayType, res_),
  };
  stRetPayType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetPayType_descriptor_,
      stRetPayType::default_instance_,
      stRetPayType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetPayType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetPayType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetPayType));
  stRetPayType_eResult_descriptor_ = stRetPayType_descriptor_->enum_type(0);
  stRetPayType_ProtoModID_descriptor_ = stRetPayType_descriptor_->enum_type(1);
  stRetPayType_ProtoFunID_descriptor_ = stRetPayType_descriptor_->enum_type(2);
  stReqOperateActvity_descriptor_ = file->message_type(200);
  static const int stReqOperateActvity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOperateActvity, charid_),
  };
  stReqOperateActvity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOperateActvity_descriptor_,
      stReqOperateActvity::default_instance_,
      stReqOperateActvity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOperateActvity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOperateActvity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOperateActvity));
  stReqOperateActvity_ProtoModID_descriptor_ = stReqOperateActvity_descriptor_->enum_type(0);
  stReqOperateActvity_ProtoFunID_descriptor_ = stReqOperateActvity_descriptor_->enum_type(1);
  stOperateActvityItemInfo_descriptor_ = file->message_type(201);
  static const int stOperateActvityItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActvityItemInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActvityItemInfo, status_),
  };
  stOperateActvityItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOperateActvityItemInfo_descriptor_,
      stOperateActvityItemInfo::default_instance_,
      stOperateActvityItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActvityItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActvityItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOperateActvityItemInfo));
  stOperateActvityItems_descriptor_ = file->message_type(202);
  static const int stOperateActvityItems_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActvityItems, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActvityItems, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActvityItems, iteminfo_),
  };
  stOperateActvityItems_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOperateActvityItems_descriptor_,
      stOperateActvityItems::default_instance_,
      stOperateActvityItems_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActvityItems, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActvityItems, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOperateActvityItems));
  stRetOperateActvity_descriptor_ = file->message_type(203);
  static const int stRetOperateActvity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOperateActvity, items_),
  };
  stRetOperateActvity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetOperateActvity_descriptor_,
      stRetOperateActvity::default_instance_,
      stRetOperateActvity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOperateActvity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOperateActvity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetOperateActvity));
  stRetOperateActvity_ProtoModID_descriptor_ = stRetOperateActvity_descriptor_->enum_type(0);
  stRetOperateActvity_ProtoFunID_descriptor_ = stRetOperateActvity_descriptor_->enum_type(1);
  stReqOperateActvityReward_descriptor_ = file->message_type(204);
  static const int stReqOperateActvityReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOperateActvityReward, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOperateActvityReward, itemid_),
  };
  stReqOperateActvityReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOperateActvityReward_descriptor_,
      stReqOperateActvityReward::default_instance_,
      stReqOperateActvityReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOperateActvityReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOperateActvityReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOperateActvityReward));
  stReqOperateActvityReward_ProtoModID_descriptor_ = stReqOperateActvityReward_descriptor_->enum_type(0);
  stReqOperateActvityReward_ProtoFunID_descriptor_ = stReqOperateActvityReward_descriptor_->enum_type(1);
  stRetOperateActvityReward_descriptor_ = file->message_type(205);
  static const int stRetOperateActvityReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOperateActvityReward, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOperateActvityReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOperateActvityReward, res_),
  };
  stRetOperateActvityReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetOperateActvityReward_descriptor_,
      stRetOperateActvityReward::default_instance_,
      stRetOperateActvityReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOperateActvityReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOperateActvityReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetOperateActvityReward));
  stRetOperateActvityReward_Result_descriptor_ = stRetOperateActvityReward_descriptor_->enum_type(0);
  stRetOperateActvityReward_ProtoModID_descriptor_ = stRetOperateActvityReward_descriptor_->enum_type(1);
  stRetOperateActvityReward_ProtoFunID_descriptor_ = stRetOperateActvityReward_descriptor_->enum_type(2);
  stReqIllusionSprite_descriptor_ = file->message_type(206);
  static const int stReqIllusionSprite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSprite, id_),
  };
  stReqIllusionSprite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqIllusionSprite_descriptor_,
      stReqIllusionSprite::default_instance_,
      stReqIllusionSprite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSprite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSprite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqIllusionSprite));
  stReqIllusionSprite_ProtoModID_descriptor_ = stReqIllusionSprite_descriptor_->enum_type(0);
  stReqIllusionSprite_ProtoFunID_descriptor_ = stReqIllusionSprite_descriptor_->enum_type(1);
  stIllusionSpriteSkillItem_descriptor_ = file->message_type(207);
  static const int stIllusionSpriteSkillItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIllusionSpriteSkillItem, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIllusionSpriteSkillItem, skilllvl_),
  };
  stIllusionSpriteSkillItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stIllusionSpriteSkillItem_descriptor_,
      stIllusionSpriteSkillItem::default_instance_,
      stIllusionSpriteSkillItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIllusionSpriteSkillItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIllusionSpriteSkillItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stIllusionSpriteSkillItem));
  stRetIllusionSprite_descriptor_ = file->message_type(208);
  static const int stRetIllusionSprite_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSprite, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSprite, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSprite, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSprite, talentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSprite, skills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSprite, res_),
  };
  stRetIllusionSprite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetIllusionSprite_descriptor_,
      stRetIllusionSprite::default_instance_,
      stRetIllusionSprite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSprite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSprite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetIllusionSprite));
  stRetIllusionSprite_eResult_descriptor_ = stRetIllusionSprite_descriptor_->enum_type(0);
  stRetIllusionSprite_ProtoModID_descriptor_ = stRetIllusionSprite_descriptor_->enum_type(1);
  stRetIllusionSprite_ProtoFunID_descriptor_ = stRetIllusionSprite_descriptor_->enum_type(2);
  illusionSpriteEatItem_descriptor_ = file->message_type(209);
  static const int illusionSpriteEatItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(illusionSpriteEatItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(illusionSpriteEatItem, num_),
  };
  illusionSpriteEatItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      illusionSpriteEatItem_descriptor_,
      illusionSpriteEatItem::default_instance_,
      illusionSpriteEatItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(illusionSpriteEatItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(illusionSpriteEatItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(illusionSpriteEatItem));
  stReqIllusionSpriteEat_descriptor_ = file->message_type(210);
  static const int stReqIllusionSpriteEat_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSpriteEat, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSpriteEat, eatitem_),
  };
  stReqIllusionSpriteEat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqIllusionSpriteEat_descriptor_,
      stReqIllusionSpriteEat::default_instance_,
      stReqIllusionSpriteEat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSpriteEat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSpriteEat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqIllusionSpriteEat));
  stReqIllusionSpriteEat_ProtoModID_descriptor_ = stReqIllusionSpriteEat_descriptor_->enum_type(0);
  stReqIllusionSpriteEat_ProtoFunID_descriptor_ = stReqIllusionSpriteEat_descriptor_->enum_type(1);
  stRetIllusionSpriteEat_descriptor_ = file->message_type(211);
  static const int stRetIllusionSpriteEat_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteEat, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteEat, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteEat, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteEat, talentnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteEat, res_),
  };
  stRetIllusionSpriteEat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetIllusionSpriteEat_descriptor_,
      stRetIllusionSpriteEat::default_instance_,
      stRetIllusionSpriteEat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteEat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteEat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetIllusionSpriteEat));
  stRetIllusionSpriteEat_eResult_descriptor_ = stRetIllusionSpriteEat_descriptor_->enum_type(0);
  stRetIllusionSpriteEat_ProtoModID_descriptor_ = stRetIllusionSpriteEat_descriptor_->enum_type(1);
  stRetIllusionSpriteEat_ProtoFunID_descriptor_ = stRetIllusionSpriteEat_descriptor_->enum_type(2);
  stReqIllusionSpriteSkillUp_descriptor_ = file->message_type(212);
  static const int stReqIllusionSpriteSkillUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSpriteSkillUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSpriteSkillUp, skillid_),
  };
  stReqIllusionSpriteSkillUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqIllusionSpriteSkillUp_descriptor_,
      stReqIllusionSpriteSkillUp::default_instance_,
      stReqIllusionSpriteSkillUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSpriteSkillUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqIllusionSpriteSkillUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqIllusionSpriteSkillUp));
  stReqIllusionSpriteSkillUp_ProtoModID_descriptor_ = stReqIllusionSpriteSkillUp_descriptor_->enum_type(0);
  stReqIllusionSpriteSkillUp_ProtoFunID_descriptor_ = stReqIllusionSpriteSkillUp_descriptor_->enum_type(1);
  stRetIllusionSpriteSkillUp_descriptor_ = file->message_type(213);
  static const int stRetIllusionSpriteSkillUp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteSkillUp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteSkillUp, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteSkillUp, skilllvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteSkillUp, res_),
  };
  stRetIllusionSpriteSkillUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetIllusionSpriteSkillUp_descriptor_,
      stRetIllusionSpriteSkillUp::default_instance_,
      stRetIllusionSpriteSkillUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteSkillUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetIllusionSpriteSkillUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetIllusionSpriteSkillUp));
  stRetIllusionSpriteSkillUp_eResult_descriptor_ = stRetIllusionSpriteSkillUp_descriptor_->enum_type(0);
  stRetIllusionSpriteSkillUp_ProtoModID_descriptor_ = stRetIllusionSpriteSkillUp_descriptor_->enum_type(1);
  stRetIllusionSpriteSkillUp_ProtoFunID_descriptor_ = stRetIllusionSpriteSkillUp_descriptor_->enum_type(2);
  stRepOpenDiscoverWindow_descriptor_ = file->message_type(214);
  static const int stRepOpenDiscoverWindow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRepOpenDiscoverWindow, charid_),
  };
  stRepOpenDiscoverWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRepOpenDiscoverWindow_descriptor_,
      stRepOpenDiscoverWindow::default_instance_,
      stRepOpenDiscoverWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRepOpenDiscoverWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRepOpenDiscoverWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRepOpenDiscoverWindow));
  stRepOpenDiscoverWindow_ProtoModID_descriptor_ = stRepOpenDiscoverWindow_descriptor_->enum_type(0);
  stRepOpenDiscoverWindow_ProtoFunID_descriptor_ = stRepOpenDiscoverWindow_descriptor_->enum_type(1);
  stOpenDiscoverWindowResult_descriptor_ = file->message_type(215);
  static const int stOpenDiscoverWindowResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, place_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, battlenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, refreshnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, playdicenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, canusenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, hasreceivedidentify_),
  };
  stOpenDiscoverWindowResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOpenDiscoverWindowResult_descriptor_,
      stOpenDiscoverWindowResult::default_instance_,
      stOpenDiscoverWindowResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenDiscoverWindowResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOpenDiscoverWindowResult));
  stOpenDiscoverWindowResult_ProtoModID_descriptor_ = stOpenDiscoverWindowResult_descriptor_->enum_type(0);
  stOpenDiscoverWindowResult_ProtoFunID_descriptor_ = stOpenDiscoverWindowResult_descriptor_->enum_type(1);
  stReqPlayDice_descriptor_ = file->message_type(216);
  static const int stReqPlayDice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPlayDice, charid_),
  };
  stReqPlayDice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPlayDice_descriptor_,
      stReqPlayDice::default_instance_,
      stReqPlayDice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPlayDice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPlayDice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPlayDice));
  stReqPlayDice_ProtoModID_descriptor_ = stReqPlayDice_descriptor_->enum_type(0);
  stReqPlayDice_ProtoFunID_descriptor_ = stReqPlayDice_descriptor_->enum_type(1);
  stPlayDiceResult_descriptor_ = file->message_type(217);
  static const int stPlayDiceResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayDiceResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayDiceResult, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayDiceResult, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayDiceResult, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayDiceResult, state_),
  };
  stPlayDiceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPlayDiceResult_descriptor_,
      stPlayDiceResult::default_instance_,
      stPlayDiceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayDiceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayDiceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPlayDiceResult));
  stPlayDiceResult_eResult_descriptor_ = stPlayDiceResult_descriptor_->enum_type(0);
  stPlayDiceResult_ProtoModID_descriptor_ = stPlayDiceResult_descriptor_->enum_type(1);
  stPlayDiceResult_ProtoFunID_descriptor_ = stPlayDiceResult_descriptor_->enum_type(2);
  stReqGetOrGiveUpTask_descriptor_ = file->message_type(218);
  static const int stReqGetOrGiveUpTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetOrGiveUpTask, tag_),
  };
  stReqGetOrGiveUpTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGetOrGiveUpTask_descriptor_,
      stReqGetOrGiveUpTask::default_instance_,
      stReqGetOrGiveUpTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetOrGiveUpTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetOrGiveUpTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGetOrGiveUpTask));
  stReqGetOrGiveUpTask_ProtoModID_descriptor_ = stReqGetOrGiveUpTask_descriptor_->enum_type(0);
  stReqGetOrGiveUpTask_ProtoFunID_descriptor_ = stReqGetOrGiveUpTask_descriptor_->enum_type(1);
  stGetTaskResult_descriptor_ = file->message_type(219);
  static const int stGetTaskResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetTaskResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetTaskResult, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetTaskResult, taskid_),
  };
  stGetTaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGetTaskResult_descriptor_,
      stGetTaskResult::default_instance_,
      stGetTaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetTaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetTaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGetTaskResult));
  stGetTaskResult_eResult_descriptor_ = stGetTaskResult_descriptor_->enum_type(0);
  stGetTaskResult_ProtoModID_descriptor_ = stGetTaskResult_descriptor_->enum_type(1);
  stGetTaskResult_ProtoFunID_descriptor_ = stGetTaskResult_descriptor_->enum_type(2);
  stGiveUpTaskResult_descriptor_ = file->message_type(220);
  static const int stGiveUpTaskResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveUpTaskResult, result_),
  };
  stGiveUpTaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiveUpTaskResult_descriptor_,
      stGiveUpTaskResult::default_instance_,
      stGiveUpTaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveUpTaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveUpTaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiveUpTaskResult));
  stGiveUpTaskResult_eResult_descriptor_ = stGiveUpTaskResult_descriptor_->enum_type(0);
  stGiveUpTaskResult_ProtoModID_descriptor_ = stGiveUpTaskResult_descriptor_->enum_type(1);
  stGiveUpTaskResult_ProtoFunID_descriptor_ = stGiveUpTaskResult_descriptor_->enum_type(2);
  stReqRefreshNum_descriptor_ = file->message_type(221);
  static const int stReqRefreshNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshNum, charid_),
  };
  stReqRefreshNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRefreshNum_descriptor_,
      stReqRefreshNum::default_instance_,
      stReqRefreshNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRefreshNum));
  stReqRefreshNum_ProtoModID_descriptor_ = stReqRefreshNum_descriptor_->enum_type(0);
  stReqRefreshNum_ProtoFunID_descriptor_ = stReqRefreshNum_descriptor_->enum_type(1);
  stRefreshNumResult_descriptor_ = file->message_type(222);
  static const int stRefreshNumResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshNumResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshNumResult, count_),
  };
  stRefreshNumResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshNumResult_descriptor_,
      stRefreshNumResult::default_instance_,
      stRefreshNumResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshNumResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshNumResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshNumResult));
  stRefreshNumResult_eResult_descriptor_ = stRefreshNumResult_descriptor_->enum_type(0);
  stRefreshNumResult_ProtoModID_descriptor_ = stRefreshNumResult_descriptor_->enum_type(1);
  stRefreshNumResult_ProtoFunID_descriptor_ = stRefreshNumResult_descriptor_->enum_type(2);
  stReqGetIntegralReward_descriptor_ = file->message_type(223);
  static const int stReqGetIntegralReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetIntegralReward, rewardid_),
  };
  stReqGetIntegralReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGetIntegralReward_descriptor_,
      stReqGetIntegralReward::default_instance_,
      stReqGetIntegralReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetIntegralReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetIntegralReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGetIntegralReward));
  stReqGetIntegralReward_ProtoModID_descriptor_ = stReqGetIntegralReward_descriptor_->enum_type(0);
  stReqGetIntegralReward_ProtoFunID_descriptor_ = stReqGetIntegralReward_descriptor_->enum_type(1);
  stGetIntegralRewardResult_descriptor_ = file->message_type(224);
  static const int stGetIntegralRewardResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetIntegralRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetIntegralRewardResult, value_),
  };
  stGetIntegralRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGetIntegralRewardResult_descriptor_,
      stGetIntegralRewardResult::default_instance_,
      stGetIntegralRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetIntegralRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetIntegralRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGetIntegralRewardResult));
  stGetIntegralRewardResult_eResult_descriptor_ = stGetIntegralRewardResult_descriptor_->enum_type(0);
  stGetIntegralRewardResult_ProtoModID_descriptor_ = stGetIntegralRewardResult_descriptor_->enum_type(1);
  stGetIntegralRewardResult_ProtoFunID_descriptor_ = stGetIntegralRewardResult_descriptor_->enum_type(2);
  stReqGiveReward_descriptor_ = file->message_type(225);
  static const int stReqGiveReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGiveReward, tag_),
  };
  stReqGiveReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGiveReward_descriptor_,
      stReqGiveReward::default_instance_,
      stReqGiveReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGiveReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGiveReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGiveReward));
  stReqGiveReward_ProtoModID_descriptor_ = stReqGiveReward_descriptor_->enum_type(0);
  stReqGiveReward_ProtoFunID_descriptor_ = stReqGiveReward_descriptor_->enum_type(1);
  stGiveRewardResult_descriptor_ = file->message_type(226);
  static const int stGiveRewardResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveRewardResult, integral_),
  };
  stGiveRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiveRewardResult_descriptor_,
      stGiveRewardResult::default_instance_,
      stGiveRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiveRewardResult));
  stGiveRewardResult_eResult_descriptor_ = stGiveRewardResult_descriptor_->enum_type(0);
  stGiveRewardResult_ProtoModID_descriptor_ = stGiveRewardResult_descriptor_->enum_type(1);
  stGiveRewardResult_ProtoFunID_descriptor_ = stGiveRewardResult_descriptor_->enum_type(2);
  stReqLuckyDraw_descriptor_ = file->message_type(227);
  static const int stReqLuckyDraw_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDraw, charid_),
  };
  stReqLuckyDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLuckyDraw_descriptor_,
      stReqLuckyDraw::default_instance_,
      stReqLuckyDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLuckyDraw));
  stReqLuckyDraw_ProtoModID_descriptor_ = stReqLuckyDraw_descriptor_->enum_type(0);
  stReqLuckyDraw_ProtoFunID_descriptor_ = stReqLuckyDraw_descriptor_->enum_type(1);
  stLuckyDrawPointRewardInfo_descriptor_ = file->message_type(228);
  static const int stLuckyDrawPointRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawPointRewardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawPointRewardInfo, status_),
  };
  stLuckyDrawPointRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLuckyDrawPointRewardInfo_descriptor_,
      stLuckyDrawPointRewardInfo::default_instance_,
      stLuckyDrawPointRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawPointRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawPointRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLuckyDrawPointRewardInfo));
  stLuckyDrawRewardInfo_descriptor_ = file->message_type(229);
  static const int stLuckyDrawRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawRewardInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawRewardInfo, num_),
  };
  stLuckyDrawRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLuckyDrawRewardInfo_descriptor_,
      stLuckyDrawRewardInfo::default_instance_,
      stLuckyDrawRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLuckyDrawRewardInfo));
  stLuckyDrawUserInfo_descriptor_ = file->message_type(230);
  static const int stLuckyDrawUserInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawUserInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawUserInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawUserInfo, num_),
  };
  stLuckyDrawUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLuckyDrawUserInfo_descriptor_,
      stLuckyDrawUserInfo::default_instance_,
      stLuckyDrawUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLuckyDrawUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLuckyDrawUserInfo));
  stRetLuckyDraw_descriptor_ = file->message_type(231);
  static const int stRetLuckyDraw_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDraw, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDraw, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDraw, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDraw, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDraw, lastfreetime_),
  };
  stRetLuckyDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetLuckyDraw_descriptor_,
      stRetLuckyDraw::default_instance_,
      stRetLuckyDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetLuckyDraw));
  stRetLuckyDraw_ProtoModID_descriptor_ = stRetLuckyDraw_descriptor_->enum_type(0);
  stRetLuckyDraw_ProtoFunID_descriptor_ = stRetLuckyDraw_descriptor_->enum_type(1);
  stReqLuckyDrawReward_descriptor_ = file->message_type(232);
  static const int stReqLuckyDrawReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDrawReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDrawReward, id_),
  };
  stReqLuckyDrawReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLuckyDrawReward_descriptor_,
      stReqLuckyDrawReward::default_instance_,
      stReqLuckyDrawReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDrawReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDrawReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLuckyDrawReward));
  stReqLuckyDrawReward_ProtoModID_descriptor_ = stReqLuckyDrawReward_descriptor_->enum_type(0);
  stReqLuckyDrawReward_ProtoFunID_descriptor_ = stReqLuckyDrawReward_descriptor_->enum_type(1);
  stRetLuckyDrawReward_descriptor_ = file->message_type(233);
  static const int stRetLuckyDrawReward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawReward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawReward, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawReward, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawReward, lastfreetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawReward, diamond_),
  };
  stRetLuckyDrawReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetLuckyDrawReward_descriptor_,
      stRetLuckyDrawReward::default_instance_,
      stRetLuckyDrawReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetLuckyDrawReward));
  stRetLuckyDrawReward_eResult_descriptor_ = stRetLuckyDrawReward_descriptor_->enum_type(0);
  stRetLuckyDrawReward_ProtoModID_descriptor_ = stRetLuckyDrawReward_descriptor_->enum_type(1);
  stRetLuckyDrawReward_ProtoFunID_descriptor_ = stRetLuckyDrawReward_descriptor_->enum_type(2);
  stReqLuckyDrawPointReward_descriptor_ = file->message_type(234);
  static const int stReqLuckyDrawPointReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDrawPointReward, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDrawPointReward, pointid_),
  };
  stReqLuckyDrawPointReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLuckyDrawPointReward_descriptor_,
      stReqLuckyDrawPointReward::default_instance_,
      stReqLuckyDrawPointReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDrawPointReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLuckyDrawPointReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLuckyDrawPointReward));
  stReqLuckyDrawPointReward_ProtoModID_descriptor_ = stReqLuckyDrawPointReward_descriptor_->enum_type(0);
  stReqLuckyDrawPointReward_ProtoFunID_descriptor_ = stReqLuckyDrawPointReward_descriptor_->enum_type(1);
  stRetLuckyDrawPointReward_descriptor_ = file->message_type(235);
  static const int stRetLuckyDrawPointReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawPointReward, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawPointReward, pointid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawPointReward, result_),
  };
  stRetLuckyDrawPointReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetLuckyDrawPointReward_descriptor_,
      stRetLuckyDrawPointReward::default_instance_,
      stRetLuckyDrawPointReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawPointReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetLuckyDrawPointReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetLuckyDrawPointReward));
  stRetLuckyDrawPointReward_eResult_descriptor_ = stRetLuckyDrawPointReward_descriptor_->enum_type(0);
  stRetLuckyDrawPointReward_ProtoModID_descriptor_ = stRetLuckyDrawPointReward_descriptor_->enum_type(1);
  stRetLuckyDrawPointReward_ProtoFunID_descriptor_ = stRetLuckyDrawPointReward_descriptor_->enum_type(2);
  stReqRedPointRuls_descriptor_ = file->message_type(236);
  static const int stReqRedPointRuls_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRedPointRuls, charid_),
  };
  stReqRedPointRuls_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRedPointRuls_descriptor_,
      stReqRedPointRuls::default_instance_,
      stReqRedPointRuls_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRedPointRuls, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRedPointRuls, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRedPointRuls));
  stReqRedPointRuls_ProtoModID_descriptor_ = stReqRedPointRuls_descriptor_->enum_type(0);
  stReqRedPointRuls_ProtoFunID_descriptor_ = stReqRedPointRuls_descriptor_->enum_type(1);
  stRedPointRulsResult_descriptor_ = file->message_type(237);
  static const int stRedPointRulsResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointRulsResult, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointRulsResult, cangetreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointRulsResult, canopenintegalbox_),
  };
  stRedPointRulsResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRedPointRulsResult_descriptor_,
      stRedPointRulsResult::default_instance_,
      stRedPointRulsResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointRulsResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointRulsResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRedPointRulsResult));
  stRedPointRulsResult_ProtoModID_descriptor_ = stRedPointRulsResult_descriptor_->enum_type(0);
  stRedPointRulsResult_ProtoFunID_descriptor_ = stRedPointRulsResult_descriptor_->enum_type(1);
  stReqInviteFriend_descriptor_ = file->message_type(238);
  static const int stReqInviteFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInviteFriend, charid_),
  };
  stReqInviteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqInviteFriend_descriptor_,
      stReqInviteFriend::default_instance_,
      stReqInviteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInviteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqInviteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqInviteFriend));
  stReqInviteFriend_ProtoModID_descriptor_ = stReqInviteFriend_descriptor_->enum_type(0);
  stReqInviteFriend_ProtoFunID_descriptor_ = stReqInviteFriend_descriptor_->enum_type(1);
  InviteFriendReward_descriptor_ = file->message_type(239);
  static const int InviteFriendReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendReward, status_),
  };
  InviteFriendReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteFriendReward_descriptor_,
      InviteFriendReward::default_instance_,
      InviteFriendReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriendReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteFriendReward));
  stRetInviteFriend_descriptor_ = file->message_type(240);
  static const int stRetInviteFriend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetInviteFriend, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetInviteFriend, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetInviteFriend, useinvitecode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetInviteFriend, reward_),
  };
  stRetInviteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetInviteFriend_descriptor_,
      stRetInviteFriend::default_instance_,
      stRetInviteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetInviteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetInviteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetInviteFriend));
  stRetInviteFriend_ProtoModID_descriptor_ = stRetInviteFriend_descriptor_->enum_type(0);
  stRetInviteFriend_ProtoFunID_descriptor_ = stRetInviteFriend_descriptor_->enum_type(1);
  stReqDrawInviteFriend_descriptor_ = file->message_type(241);
  static const int stReqDrawInviteFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteFriend, id_),
  };
  stReqDrawInviteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawInviteFriend_descriptor_,
      stReqDrawInviteFriend::default_instance_,
      stReqDrawInviteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawInviteFriend));
  stReqDrawInviteFriend_ProtoModID_descriptor_ = stReqDrawInviteFriend_descriptor_->enum_type(0);
  stReqDrawInviteFriend_ProtoFunID_descriptor_ = stReqDrawInviteFriend_descriptor_->enum_type(1);
  stRetDrawInviteFriend_descriptor_ = file->message_type(242);
  static const int stRetDrawInviteFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawInviteFriend, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawInviteFriend, result_),
  };
  stRetDrawInviteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDrawInviteFriend_descriptor_,
      stRetDrawInviteFriend::default_instance_,
      stRetDrawInviteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawInviteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawInviteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDrawInviteFriend));
  stRetDrawInviteFriend_eResult_descriptor_ = stRetDrawInviteFriend_descriptor_->enum_type(0);
  stRetDrawInviteFriend_ProtoModID_descriptor_ = stRetDrawInviteFriend_descriptor_->enum_type(1);
  stRetDrawInviteFriend_ProtoFunID_descriptor_ = stRetDrawInviteFriend_descriptor_->enum_type(2);
  stReqUseInviteCode_descriptor_ = file->message_type(243);
  static const int stReqUseInviteCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseInviteCode, code_),
  };
  stReqUseInviteCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUseInviteCode_descriptor_,
      stReqUseInviteCode::default_instance_,
      stReqUseInviteCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseInviteCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUseInviteCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUseInviteCode));
  stReqUseInviteCode_ProtoModID_descriptor_ = stReqUseInviteCode_descriptor_->enum_type(0);
  stReqUseInviteCode_ProtoFunID_descriptor_ = stReqUseInviteCode_descriptor_->enum_type(1);
  stRetUseInviteCode_descriptor_ = file->message_type(244);
  static const int stRetUseInviteCode_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseInviteCode, result_),
  };
  stRetUseInviteCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetUseInviteCode_descriptor_,
      stRetUseInviteCode::default_instance_,
      stRetUseInviteCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseInviteCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetUseInviteCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetUseInviteCode));
  stRetUseInviteCode_eResult_descriptor_ = stRetUseInviteCode_descriptor_->enum_type(0);
  stRetUseInviteCode_ProtoModID_descriptor_ = stRetUseInviteCode_descriptor_->enum_type(1);
  stRetUseInviteCode_ProtoFunID_descriptor_ = stRetUseInviteCode_descriptor_->enum_type(2);
  stReqShareInvite_descriptor_ = file->message_type(245);
  static const int stReqShareInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqShareInvite, charid_),
  };
  stReqShareInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqShareInvite_descriptor_,
      stReqShareInvite::default_instance_,
      stReqShareInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqShareInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqShareInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqShareInvite));
  stReqShareInvite_ProtoModID_descriptor_ = stReqShareInvite_descriptor_->enum_type(0);
  stReqShareInvite_ProtoFunID_descriptor_ = stReqShareInvite_descriptor_->enum_type(1);
  stRetShareInvite_descriptor_ = file->message_type(246);
  static const int stRetShareInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetShareInvite, num_),
  };
  stRetShareInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetShareInvite_descriptor_,
      stRetShareInvite::default_instance_,
      stRetShareInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetShareInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetShareInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetShareInvite));
  stRetShareInvite_ProtoModID_descriptor_ = stRetShareInvite_descriptor_->enum_type(0);
  stRetShareInvite_ProtoFunID_descriptor_ = stRetShareInvite_descriptor_->enum_type(1);
  stReqDailyShareInvite_descriptor_ = file->message_type(247);
  static const int stReqDailyShareInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDailyShareInvite, charid_),
  };
  stReqDailyShareInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDailyShareInvite_descriptor_,
      stReqDailyShareInvite::default_instance_,
      stReqDailyShareInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDailyShareInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDailyShareInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDailyShareInvite));
  stReqDailyShareInvite_ProtoModID_descriptor_ = stReqDailyShareInvite_descriptor_->enum_type(0);
  stReqDailyShareInvite_ProtoFunID_descriptor_ = stReqDailyShareInvite_descriptor_->enum_type(1);
  stRetDailyShareInvite_descriptor_ = file->message_type(248);
  static const int stRetDailyShareInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDailyShareInvite, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDailyShareInvite, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDailyShareInvite, oncereward_),
  };
  stRetDailyShareInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDailyShareInvite_descriptor_,
      stRetDailyShareInvite::default_instance_,
      stRetDailyShareInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDailyShareInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDailyShareInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDailyShareInvite));
  stRetDailyShareInvite_ProtoModID_descriptor_ = stRetDailyShareInvite_descriptor_->enum_type(0);
  stRetDailyShareInvite_ProtoFunID_descriptor_ = stRetDailyShareInvite_descriptor_->enum_type(1);
  stReqDrawDailyShareReward_descriptor_ = file->message_type(249);
  static const int stReqDrawDailyShareReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawDailyShareReward, id_),
  };
  stReqDrawDailyShareReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawDailyShareReward_descriptor_,
      stReqDrawDailyShareReward::default_instance_,
      stReqDrawDailyShareReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawDailyShareReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawDailyShareReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawDailyShareReward));
  stReqDrawDailyShareReward_ProtoModID_descriptor_ = stReqDrawDailyShareReward_descriptor_->enum_type(0);
  stReqDrawDailyShareReward_ProtoFunID_descriptor_ = stReqDrawDailyShareReward_descriptor_->enum_type(1);
  stRetDrawDailyShareReward_descriptor_ = file->message_type(250);
  static const int stRetDrawDailyShareReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawDailyShareReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawDailyShareReward, result_),
  };
  stRetDrawDailyShareReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDrawDailyShareReward_descriptor_,
      stRetDrawDailyShareReward::default_instance_,
      stRetDrawDailyShareReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawDailyShareReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawDailyShareReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDrawDailyShareReward));
  stRetDrawDailyShareReward_eResult_descriptor_ = stRetDrawDailyShareReward_descriptor_->enum_type(0);
  stRetDrawDailyShareReward_ProtoModID_descriptor_ = stRetDrawDailyShareReward_descriptor_->enum_type(1);
  stRetDrawDailyShareReward_ProtoFunID_descriptor_ = stRetDrawDailyShareReward_descriptor_->enum_type(2);
  stReqDrawOnceShareReward_descriptor_ = file->message_type(251);
  static const int stReqDrawOnceShareReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawOnceShareReward, charid_),
  };
  stReqDrawOnceShareReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawOnceShareReward_descriptor_,
      stReqDrawOnceShareReward::default_instance_,
      stReqDrawOnceShareReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawOnceShareReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawOnceShareReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawOnceShareReward));
  stReqDrawOnceShareReward_ProtoModID_descriptor_ = stReqDrawOnceShareReward_descriptor_->enum_type(0);
  stReqDrawOnceShareReward_ProtoFunID_descriptor_ = stReqDrawOnceShareReward_descriptor_->enum_type(1);
  stRetDrawOnceShareReward_descriptor_ = file->message_type(252);
  static const int stRetDrawOnceShareReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawOnceShareReward, result_),
  };
  stRetDrawOnceShareReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDrawOnceShareReward_descriptor_,
      stRetDrawOnceShareReward::default_instance_,
      stRetDrawOnceShareReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawOnceShareReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawOnceShareReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDrawOnceShareReward));
  stRetDrawOnceShareReward_eResult_descriptor_ = stRetDrawOnceShareReward_descriptor_->enum_type(0);
  stRetDrawOnceShareReward_ProtoModID_descriptor_ = stRetDrawOnceShareReward_descriptor_->enum_type(1);
  stRetDrawOnceShareReward_ProtoFunID_descriptor_ = stRetDrawOnceShareReward_descriptor_->enum_type(2);
  stNotifyInterceptServerResult_descriptor_ = file->message_type(253);
  static const int stNotifyInterceptServerResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyInterceptServerResult, result_),
  };
  stNotifyInterceptServerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyInterceptServerResult_descriptor_,
      stNotifyInterceptServerResult::default_instance_,
      stNotifyInterceptServerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyInterceptServerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyInterceptServerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyInterceptServerResult));
  stNotifyInterceptServerResult_eResult_descriptor_ = stNotifyInterceptServerResult_descriptor_->enum_type(0);
  stNotifyInterceptServerResult_ProtoModID_descriptor_ = stNotifyInterceptServerResult_descriptor_->enum_type(1);
  stNotifyInterceptServerResult_ProtoFunID_descriptor_ = stNotifyInterceptServerResult_descriptor_->enum_type(2);
  stReqReceiveState_descriptor_ = file->message_type(254);
  static const int stReqReceiveState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveState, charid_),
  };
  stReqReceiveState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqReceiveState_descriptor_,
      stReqReceiveState::default_instance_,
      stReqReceiveState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqReceiveState));
  stReqReceiveState_ProtoModID_descriptor_ = stReqReceiveState_descriptor_->enum_type(0);
  stReqReceiveState_ProtoFunID_descriptor_ = stReqReceiveState_descriptor_->enum_type(1);
  stReceiveStateResult_descriptor_ = file->message_type(255);
  static const int stReceiveStateResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveStateResult, isreceive_),
  };
  stReceiveStateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReceiveStateResult_descriptor_,
      stReceiveStateResult::default_instance_,
      stReceiveStateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveStateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveStateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReceiveStateResult));
  stReceiveStateResult_ProtoModID_descriptor_ = stReceiveStateResult_descriptor_->enum_type(0);
  stReceiveStateResult_ProtoFunID_descriptor_ = stReceiveStateResult_descriptor_->enum_type(1);
  stReqReceiveReward_descriptor_ = file->message_type(256);
  static const int stReqReceiveReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveReward, charid_),
  };
  stReqReceiveReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqReceiveReward_descriptor_,
      stReqReceiveReward::default_instance_,
      stReqReceiveReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqReceiveReward));
  stReqReceiveReward_ProtoModID_descriptor_ = stReqReceiveReward_descriptor_->enum_type(0);
  stReqReceiveReward_ProtoFunID_descriptor_ = stReqReceiveReward_descriptor_->enum_type(1);
  stReceiveRewardResult_descriptor_ = file->message_type(257);
  static const int stReceiveRewardResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveRewardResult, result_),
  };
  stReceiveRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReceiveRewardResult_descriptor_,
      stReceiveRewardResult::default_instance_,
      stReceiveRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReceiveRewardResult));
  stReceiveRewardResult_eResult_descriptor_ = stReceiveRewardResult_descriptor_->enum_type(0);
  stReceiveRewardResult_ProtoModID_descriptor_ = stReceiveRewardResult_descriptor_->enum_type(1);
  stReceiveRewardResult_ProtoFunID_descriptor_ = stReceiveRewardResult_descriptor_->enum_type(2);
  stAcitivityLimitPetItem_descriptor_ = file->message_type(258);
  static const int stAcitivityLimitPetItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, activiyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, endtime_),
  };
  stAcitivityLimitPetItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAcitivityLimitPetItem_descriptor_,
      stAcitivityLimitPetItem::default_instance_,
      stAcitivityLimitPetItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAcitivityLimitPetItem));
  stSendAllAcitivityLimitPet_descriptor_ = file->message_type(259);
  static const int stSendAllAcitivityLimitPet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendAllAcitivityLimitPet, item_),
  };
  stSendAllAcitivityLimitPet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendAllAcitivityLimitPet_descriptor_,
      stSendAllAcitivityLimitPet::default_instance_,
      stSendAllAcitivityLimitPet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendAllAcitivityLimitPet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendAllAcitivityLimitPet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendAllAcitivityLimitPet));
  stSendAllAcitivityLimitPet_ProtoModID_descriptor_ = stSendAllAcitivityLimitPet_descriptor_->enum_type(0);
  stSendAllAcitivityLimitPet_ProtoFunID_descriptor_ = stSendAllAcitivityLimitPet_descriptor_->enum_type(1);
  stSendLateWalfareActivity_descriptor_ = file->message_type(260);
  static const int stSendLateWalfareActivity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLateWalfareActivity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLateWalfareActivity, expiretime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLateWalfareActivity, rewardid_),
  };
  stSendLateWalfareActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendLateWalfareActivity_descriptor_,
      stSendLateWalfareActivity::default_instance_,
      stSendLateWalfareActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLateWalfareActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLateWalfareActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendLateWalfareActivity));
  stSendLateWalfareActivity_ProtoModID_descriptor_ = stSendLateWalfareActivity_descriptor_->enum_type(0);
  stSendLateWalfareActivity_ProtoFunID_descriptor_ = stSendLateWalfareActivity_descriptor_->enum_type(1);
  stReqDrawLateWalfare_descriptor_ = file->message_type(261);
  static const int stReqDrawLateWalfare_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawLateWalfare, rewardid_),
  };
  stReqDrawLateWalfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawLateWalfare_descriptor_,
      stReqDrawLateWalfare::default_instance_,
      stReqDrawLateWalfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawLateWalfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawLateWalfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawLateWalfare));
  stReqDrawLateWalfare_ProtoModID_descriptor_ = stReqDrawLateWalfare_descriptor_->enum_type(0);
  stReqDrawLateWalfare_ProtoFunID_descriptor_ = stReqDrawLateWalfare_descriptor_->enum_type(1);
  stRetDrawLateWalfare_descriptor_ = file->message_type(262);
  static const int stRetDrawLateWalfare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawLateWalfare, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawLateWalfare, result_),
  };
  stRetDrawLateWalfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDrawLateWalfare_descriptor_,
      stRetDrawLateWalfare::default_instance_,
      stRetDrawLateWalfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawLateWalfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawLateWalfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDrawLateWalfare));
  stRetDrawLateWalfare_eResult_descriptor_ = stRetDrawLateWalfare_descriptor_->enum_type(0);
  stRetDrawLateWalfare_ProtoModID_descriptor_ = stRetDrawLateWalfare_descriptor_->enum_type(1);
  stRetDrawLateWalfare_ProtoFunID_descriptor_ = stRetDrawLateWalfare_descriptor_->enum_type(2);
  stResGetBackItem_descriptor_ = file->message_type(263);
  static const int stResGetBackItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResGetBackItem, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResGetBackItem, num_),
  };
  stResGetBackItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResGetBackItem_descriptor_,
      stResGetBackItem::default_instance_,
      stResGetBackItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResGetBackItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResGetBackItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResGetBackItem));
  stSendAllResGetBack_descriptor_ = file->message_type(264);
  static const int stSendAllResGetBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendAllResGetBack, item_),
  };
  stSendAllResGetBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendAllResGetBack_descriptor_,
      stSendAllResGetBack::default_instance_,
      stSendAllResGetBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendAllResGetBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendAllResGetBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendAllResGetBack));
  stSendAllResGetBack_ProtoModID_descriptor_ = stSendAllResGetBack_descriptor_->enum_type(0);
  stSendAllResGetBack_ProtoFunID_descriptor_ = stSendAllResGetBack_descriptor_->enum_type(1);
  stReqDrawResGetBack_descriptor_ = file->message_type(265);
  static const int stReqDrawResGetBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawResGetBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawResGetBack, num_),
  };
  stReqDrawResGetBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawResGetBack_descriptor_,
      stReqDrawResGetBack::default_instance_,
      stReqDrawResGetBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawResGetBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawResGetBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawResGetBack));
  stReqDrawResGetBack_ProtoModID_descriptor_ = stReqDrawResGetBack_descriptor_->enum_type(0);
  stReqDrawResGetBack_ProtoFunID_descriptor_ = stReqDrawResGetBack_descriptor_->enum_type(1);
  stRetDrawResGetBack_descriptor_ = file->message_type(266);
  static const int stRetDrawResGetBack_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawResGetBack, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawResGetBack, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawResGetBack, result_),
  };
  stRetDrawResGetBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDrawResGetBack_descriptor_,
      stRetDrawResGetBack::default_instance_,
      stRetDrawResGetBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawResGetBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawResGetBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDrawResGetBack));
  stRetDrawResGetBack_eResult_descriptor_ = stRetDrawResGetBack_descriptor_->enum_type(0);
  stRetDrawResGetBack_ProtoModID_descriptor_ = stRetDrawResGetBack_descriptor_->enum_type(1);
  stRetDrawResGetBack_ProtoFunID_descriptor_ = stRetDrawResGetBack_descriptor_->enum_type(2);
  stReqDrawAllResGetBack_descriptor_ = file->message_type(267);
  static const int stReqDrawAllResGetBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawAllResGetBack, charid_),
  };
  stReqDrawAllResGetBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawAllResGetBack_descriptor_,
      stReqDrawAllResGetBack::default_instance_,
      stReqDrawAllResGetBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawAllResGetBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawAllResGetBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawAllResGetBack));
  stReqDrawAllResGetBack_ProtoModID_descriptor_ = stReqDrawAllResGetBack_descriptor_->enum_type(0);
  stReqDrawAllResGetBack_ProtoFunID_descriptor_ = stReqDrawAllResGetBack_descriptor_->enum_type(1);
  stRetDrawAllResGetBack_descriptor_ = file->message_type(268);
  static const int stRetDrawAllResGetBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawAllResGetBack, result_),
  };
  stRetDrawAllResGetBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDrawAllResGetBack_descriptor_,
      stRetDrawAllResGetBack::default_instance_,
      stRetDrawAllResGetBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawAllResGetBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDrawAllResGetBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDrawAllResGetBack));
  stRetDrawAllResGetBack_eResult_descriptor_ = stRetDrawAllResGetBack_descriptor_->enum_type(0);
  stRetDrawAllResGetBack_ProtoModID_descriptor_ = stRetDrawAllResGetBack_descriptor_->enum_type(1);
  stRetDrawAllResGetBack_ProtoFunID_descriptor_ = stRetDrawAllResGetBack_descriptor_->enum_type(2);
  stReqOpenMonsterWindow_descriptor_ = file->message_type(269);
  static const int stReqOpenMonsterWindow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenMonsterWindow, charid_),
  };
  stReqOpenMonsterWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenMonsterWindow_descriptor_,
      stReqOpenMonsterWindow::default_instance_,
      stReqOpenMonsterWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenMonsterWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenMonsterWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenMonsterWindow));
  stReqOpenMonsterWindow_ProtoModID_descriptor_ = stReqOpenMonsterWindow_descriptor_->enum_type(0);
  stReqOpenMonsterWindow_ProtoFunID_descriptor_ = stReqOpenMonsterWindow_descriptor_->enum_type(1);
  stOpenMonsterWindowResult_descriptor_ = file->message_type(270);
  static const int stOpenMonsterWindowResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMonsterWindowResult, bosslv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMonsterWindowResult, bosshp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMonsterWindowResult, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMonsterWindowResult, attacktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMonsterWindowResult, buytime_),
  };
  stOpenMonsterWindowResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOpenMonsterWindowResult_descriptor_,
      stOpenMonsterWindowResult::default_instance_,
      stOpenMonsterWindowResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMonsterWindowResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMonsterWindowResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOpenMonsterWindowResult));
  stOpenMonsterWindowResult_ProtoModID_descriptor_ = stOpenMonsterWindowResult_descriptor_->enum_type(0);
  stOpenMonsterWindowResult_ProtoFunID_descriptor_ = stOpenMonsterWindowResult_descriptor_->enum_type(1);
  stReqAttackMonster_descriptor_ = file->message_type(271);
  static const int stReqAttackMonster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAttackMonster, charid_),
  };
  stReqAttackMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAttackMonster_descriptor_,
      stReqAttackMonster::default_instance_,
      stReqAttackMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAttackMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAttackMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAttackMonster));
  stReqAttackMonster_ProtoModID_descriptor_ = stReqAttackMonster_descriptor_->enum_type(0);
  stReqAttackMonster_ProtoFunID_descriptor_ = stReqAttackMonster_descriptor_->enum_type(1);
  stAttackMonsterResult_descriptor_ = file->message_type(272);
  static const int stAttackMonsterResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAttackMonsterResult, result_),
  };
  stAttackMonsterResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAttackMonsterResult_descriptor_,
      stAttackMonsterResult::default_instance_,
      stAttackMonsterResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAttackMonsterResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAttackMonsterResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAttackMonsterResult));
  stAttackMonsterResult_eResult_descriptor_ = stAttackMonsterResult_descriptor_->enum_type(0);
  stAttackMonsterResult_ProtoModID_descriptor_ = stAttackMonsterResult_descriptor_->enum_type(1);
  stAttackMonsterResult_ProtoFunID_descriptor_ = stAttackMonsterResult_descriptor_->enum_type(2);
  stReqBuyAttackTime_descriptor_ = file->message_type(273);
  static const int stReqBuyAttackTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyAttackTime, charid_),
  };
  stReqBuyAttackTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBuyAttackTime_descriptor_,
      stReqBuyAttackTime::default_instance_,
      stReqBuyAttackTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyAttackTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyAttackTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBuyAttackTime));
  stReqBuyAttackTime_ProtoModID_descriptor_ = stReqBuyAttackTime_descriptor_->enum_type(0);
  stReqBuyAttackTime_ProtoFunID_descriptor_ = stReqBuyAttackTime_descriptor_->enum_type(1);
  stBuyAttackTimeResult_descriptor_ = file->message_type(274);
  static const int stBuyAttackTimeResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyAttackTimeResult, result_),
  };
  stBuyAttackTimeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyAttackTimeResult_descriptor_,
      stBuyAttackTimeResult::default_instance_,
      stBuyAttackTimeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyAttackTimeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyAttackTimeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyAttackTimeResult));
  stBuyAttackTimeResult_eResult_descriptor_ = stBuyAttackTimeResult_descriptor_->enum_type(0);
  stBuyAttackTimeResult_ProtoModID_descriptor_ = stBuyAttackTimeResult_descriptor_->enum_type(1);
  stBuyAttackTimeResult_ProtoFunID_descriptor_ = stBuyAttackTimeResult_descriptor_->enum_type(2);
  stReqAKeyAttackMonster_descriptor_ = file->message_type(275);
  static const int stReqAKeyAttackMonster_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAKeyAttackMonster, charid_),
  };
  stReqAKeyAttackMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAKeyAttackMonster_descriptor_,
      stReqAKeyAttackMonster::default_instance_,
      stReqAKeyAttackMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAKeyAttackMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAKeyAttackMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAKeyAttackMonster));
  stReqAKeyAttackMonster_ProtoModID_descriptor_ = stReqAKeyAttackMonster_descriptor_->enum_type(0);
  stReqAKeyAttackMonster_ProtoFunID_descriptor_ = stReqAKeyAttackMonster_descriptor_->enum_type(1);
  stAKeyAttackMonsterResult_descriptor_ = file->message_type(276);
  static const int stAKeyAttackMonsterResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyAttackMonsterResult, result_),
  };
  stAKeyAttackMonsterResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAKeyAttackMonsterResult_descriptor_,
      stAKeyAttackMonsterResult::default_instance_,
      stAKeyAttackMonsterResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyAttackMonsterResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAKeyAttackMonsterResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAKeyAttackMonsterResult));
  stAKeyAttackMonsterResult_eResult_descriptor_ = stAKeyAttackMonsterResult_descriptor_->enum_type(0);
  stAKeyAttackMonsterResult_ProtoModID_descriptor_ = stAKeyAttackMonsterResult_descriptor_->enum_type(1);
  stAKeyAttackMonsterResult_ProtoFunID_descriptor_ = stAKeyAttackMonsterResult_descriptor_->enum_type(2);
  stSynTipItem_descriptor_ = file->message_type(277);
  static const int stSynTipItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTipItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTipItem, num_),
  };
  stSynTipItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynTipItem_descriptor_,
      stSynTipItem::default_instance_,
      stSynTipItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTipItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTipItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynTipItem));
  stObtainItemTip_descriptor_ = file->message_type(278);
  static const int stObtainItemTip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItemTip, getitems_),
  };
  stObtainItemTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stObtainItemTip_descriptor_,
      stObtainItemTip::default_instance_,
      stObtainItemTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItemTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItemTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stObtainItemTip));
  stObtainItemTip_ProtoModID_descriptor_ = stObtainItemTip_descriptor_->enum_type(0);
  stObtainItemTip_ProtoFunID_descriptor_ = stObtainItemTip_descriptor_->enum_type(1);
  stUserOnline_descriptor_ = file->message_type(279);
  static const int stUserOnline_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserOnline, mountlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserOnline, battlemountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserOnline, isfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserOnline, mountlv_),
  };
  stUserOnline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserOnline_descriptor_,
      stUserOnline::default_instance_,
      stUserOnline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserOnline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserOnline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserOnline));
  stUserOnline_ProtoModID_descriptor_ = stUserOnline_descriptor_->enum_type(0);
  stUserOnline_ProtoFunID_descriptor_ = stUserOnline_descriptor_->enum_type(1);
  stConsumeItemInfo_descriptor_ = file->message_type(280);
  static const int stConsumeItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConsumeItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConsumeItemInfo, num_),
  };
  stConsumeItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stConsumeItemInfo_descriptor_,
      stConsumeItemInfo::default_instance_,
      stConsumeItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConsumeItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConsumeItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stConsumeItemInfo));
  stReqMountLevelUp_descriptor_ = file->message_type(281);
  static const int stReqMountLevelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMountLevelUp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMountLevelUp, iteminfo_),
  };
  stReqMountLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqMountLevelUp_descriptor_,
      stReqMountLevelUp::default_instance_,
      stReqMountLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMountLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMountLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqMountLevelUp));
  stReqMountLevelUp_ProtoModID_descriptor_ = stReqMountLevelUp_descriptor_->enum_type(0);
  stReqMountLevelUp_ProtoFunID_descriptor_ = stReqMountLevelUp_descriptor_->enum_type(1);
  stMountLevelUpResult_descriptor_ = file->message_type(282);
  static const int stMountLevelUpResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountLevelUpResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountLevelUpResult, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountLevelUpResult, exp_),
  };
  stMountLevelUpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMountLevelUpResult_descriptor_,
      stMountLevelUpResult::default_instance_,
      stMountLevelUpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountLevelUpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountLevelUpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMountLevelUpResult));
  stMountLevelUpResult_eResult_descriptor_ = stMountLevelUpResult_descriptor_->enum_type(0);
  stMountLevelUpResult_ProtoModID_descriptor_ = stMountLevelUpResult_descriptor_->enum_type(1);
  stMountLevelUpResult_ProtoFunID_descriptor_ = stMountLevelUpResult_descriptor_->enum_type(2);
  stReqButtleMount_descriptor_ = file->message_type(283);
  static const int stReqButtleMount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqButtleMount, id_),
  };
  stReqButtleMount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqButtleMount_descriptor_,
      stReqButtleMount::default_instance_,
      stReqButtleMount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqButtleMount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqButtleMount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqButtleMount));
  stReqButtleMount_ProtoModID_descriptor_ = stReqButtleMount_descriptor_->enum_type(0);
  stReqButtleMount_ProtoFunID_descriptor_ = stReqButtleMount_descriptor_->enum_type(1);
  stButtleMountResult_descriptor_ = file->message_type(284);
  static const int stButtleMountResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stButtleMountResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stButtleMountResult, mountid_),
  };
  stButtleMountResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stButtleMountResult_descriptor_,
      stButtleMountResult::default_instance_,
      stButtleMountResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stButtleMountResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stButtleMountResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stButtleMountResult));
  stButtleMountResult_eResult_descriptor_ = stButtleMountResult_descriptor_->enum_type(0);
  stButtleMountResult_ProtoModID_descriptor_ = stButtleMountResult_descriptor_->enum_type(1);
  stButtleMountResult_ProtoFunID_descriptor_ = stButtleMountResult_descriptor_->enum_type(2);
  stReqMountFollow_descriptor_ = file->message_type(285);
  static const int stReqMountFollow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMountFollow, charid_),
  };
  stReqMountFollow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqMountFollow_descriptor_,
      stReqMountFollow::default_instance_,
      stReqMountFollow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMountFollow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMountFollow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqMountFollow));
  stReqMountFollow_ProtoModID_descriptor_ = stReqMountFollow_descriptor_->enum_type(0);
  stReqMountFollow_ProtoFunID_descriptor_ = stReqMountFollow_descriptor_->enum_type(1);
  stMountFollowResult_descriptor_ = file->message_type(286);
  static const int stMountFollowResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountFollowResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountFollowResult, isfollow_),
  };
  stMountFollowResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMountFollowResult_descriptor_,
      stMountFollowResult::default_instance_,
      stMountFollowResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountFollowResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountFollowResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMountFollowResult));
  stMountFollowResult_eResult_descriptor_ = stMountFollowResult_descriptor_->enum_type(0);
  stMountFollowResult_ProtoModID_descriptor_ = stMountFollowResult_descriptor_->enum_type(1);
  stMountFollowResult_ProtoFunID_descriptor_ = stMountFollowResult_descriptor_->enum_type(2);
  stReqMountUnreal_descriptor_ = file->message_type(287);
  static const int stReqMountUnreal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMountUnreal, mountid_),
  };
  stReqMountUnreal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqMountUnreal_descriptor_,
      stReqMountUnreal::default_instance_,
      stReqMountUnreal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMountUnreal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMountUnreal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqMountUnreal));
  stReqMountUnreal_ProtoModID_descriptor_ = stReqMountUnreal_descriptor_->enum_type(0);
  stReqMountUnreal_ProtoFunID_descriptor_ = stReqMountUnreal_descriptor_->enum_type(1);
  stMountUnrealResult_descriptor_ = file->message_type(288);
  static const int stMountUnrealResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountUnrealResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountUnrealResult, mountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountUnrealResult, oldmountid_),
  };
  stMountUnrealResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMountUnrealResult_descriptor_,
      stMountUnrealResult::default_instance_,
      stMountUnrealResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountUnrealResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMountUnrealResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMountUnrealResult));
  stMountUnrealResult_eResult_descriptor_ = stMountUnrealResult_descriptor_->enum_type(0);
  stMountUnrealResult_ProtoModID_descriptor_ = stMountUnrealResult_descriptor_->enum_type(1);
  stMountUnrealResult_ProtoFunID_descriptor_ = stMountUnrealResult_descriptor_->enum_type(2);
  stReqOpenMountGrowWindow_descriptor_ = file->message_type(289);
  static const int stReqOpenMountGrowWindow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenMountGrowWindow, charid_),
  };
  stReqOpenMountGrowWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenMountGrowWindow_descriptor_,
      stReqOpenMountGrowWindow::default_instance_,
      stReqOpenMountGrowWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenMountGrowWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenMountGrowWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenMountGrowWindow));
  stReqOpenMountGrowWindow_ProtoModID_descriptor_ = stReqOpenMountGrowWindow_descriptor_->enum_type(0);
  stReqOpenMountGrowWindow_ProtoFunID_descriptor_ = stReqOpenMountGrowWindow_descriptor_->enum_type(1);
  stOpenMountGrowWindowResult_descriptor_ = file->message_type(290);
  static const int stOpenMountGrowWindowResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMountGrowWindowResult, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMountGrowWindowResult, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMountGrowWindowResult, battle_),
  };
  stOpenMountGrowWindowResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOpenMountGrowWindowResult_descriptor_,
      stOpenMountGrowWindowResult::default_instance_,
      stOpenMountGrowWindowResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMountGrowWindowResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOpenMountGrowWindowResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOpenMountGrowWindowResult));
  stOpenMountGrowWindowResult_ProtoModID_descriptor_ = stOpenMountGrowWindowResult_descriptor_->enum_type(0);
  stOpenMountGrowWindowResult_ProtoFunID_descriptor_ = stOpenMountGrowWindowResult_descriptor_->enum_type(1);
  stRefreshBattle_descriptor_ = file->message_type(291);
  static const int stRefreshBattle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshBattle, battle_),
  };
  stRefreshBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshBattle_descriptor_,
      stRefreshBattle::default_instance_,
      stRefreshBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshBattle));
  stRefreshBattle_ProtoModID_descriptor_ = stRefreshBattle_descriptor_->enum_type(0);
  stRefreshBattle_ProtoFunID_descriptor_ = stRefreshBattle_descriptor_->enum_type(1);
  stLevelWflfareInfo_descriptor_ = file->message_type(292);
  static const int stLevelWflfareInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelWflfareInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelWflfareInfo, type_),
  };
  stLevelWflfareInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLevelWflfareInfo_descriptor_,
      stLevelWflfareInfo::default_instance_,
      stLevelWflfareInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelWflfareInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelWflfareInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLevelWflfareInfo));
  stHasGotRewardWflfareInfo_descriptor_ = file->message_type(293);
  static const int stHasGotRewardWflfareInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasGotRewardWflfareInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasGotRewardWflfareInfo, isopen_),
  };
  stHasGotRewardWflfareInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHasGotRewardWflfareInfo_descriptor_,
      stHasGotRewardWflfareInfo::default_instance_,
      stHasGotRewardWflfareInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasGotRewardWflfareInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHasGotRewardWflfareInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHasGotRewardWflfareInfo));
  stHasGotRewardWflfareInfo_ProtoModID_descriptor_ = stHasGotRewardWflfareInfo_descriptor_->enum_type(0);
  stHasGotRewardWflfareInfo_ProtoFunID_descriptor_ = stHasGotRewardWflfareInfo_descriptor_->enum_type(1);
  stReqReceiveWflfare_descriptor_ = file->message_type(294);
  static const int stReqReceiveWflfare_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveWflfare, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveWflfare, type_),
  };
  stReqReceiveWflfare_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqReceiveWflfare_descriptor_,
      stReqReceiveWflfare::default_instance_,
      stReqReceiveWflfare_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveWflfare, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveWflfare, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqReceiveWflfare));
  stReqReceiveWflfare_ProtoModID_descriptor_ = stReqReceiveWflfare_descriptor_->enum_type(0);
  stReqReceiveWflfare_ProtoFunID_descriptor_ = stReqReceiveWflfare_descriptor_->enum_type(1);
  stReceiveWflfareResult_descriptor_ = file->message_type(295);
  static const int stReceiveWflfareResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveWflfareResult, result_),
  };
  stReceiveWflfareResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReceiveWflfareResult_descriptor_,
      stReceiveWflfareResult::default_instance_,
      stReceiveWflfareResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveWflfareResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveWflfareResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReceiveWflfareResult));
  stReceiveWflfareResult_eResult_descriptor_ = stReceiveWflfareResult_descriptor_->enum_type(0);
  stReceiveWflfareResult_ProtoModID_descriptor_ = stReceiveWflfareResult_descriptor_->enum_type(1);
  stReceiveWflfareResult_ProtoFunID_descriptor_ = stReceiveWflfareResult_descriptor_->enum_type(2);
  stReqPaySign_descriptor_ = file->message_type(296);
  static const int stReqPaySign_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPaySign, sdkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPaySign, data_),
  };
  stReqPaySign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPaySign_descriptor_,
      stReqPaySign::default_instance_,
      stReqPaySign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPaySign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPaySign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPaySign));
  stReqPaySign_ProtoModID_descriptor_ = stReqPaySign_descriptor_->enum_type(0);
  stReqPaySign_ProtoFunID_descriptor_ = stReqPaySign_descriptor_->enum_type(1);
  stRetPaySign_descriptor_ = file->message_type(297);
  static const int stRetPaySign_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetPaySign, sign_),
  };
  stRetPaySign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetPaySign_descriptor_,
      stRetPaySign::default_instance_,
      stRetPaySign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetPaySign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetPaySign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetPaySign));
  stRetPaySign_ProtoModID_descriptor_ = stRetPaySign_descriptor_->enum_type(0);
  stRetPaySign_ProtoFunID_descriptor_ = stRetPaySign_descriptor_->enum_type(1);
  stReqServerPay_descriptor_ = file->message_type(298);
  static const int stReqServerPay_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqServerPay, sdkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqServerPay, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqServerPay, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqServerPay, token_),
  };
  stReqServerPay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqServerPay_descriptor_,
      stReqServerPay::default_instance_,
      stReqServerPay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqServerPay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqServerPay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqServerPay));
  stReqServerPay_ProtoModID_descriptor_ = stReqServerPay_descriptor_->enum_type(0);
  stReqServerPay_ProtoFunID_descriptor_ = stReqServerPay_descriptor_->enum_type(1);
  stRetServerPay_descriptor_ = file->message_type(299);
  static const int stRetServerPay_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetServerPay, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetServerPay, orderid_),
  };
  stRetServerPay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetServerPay_descriptor_,
      stRetServerPay::default_instance_,
      stRetServerPay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetServerPay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetServerPay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetServerPay));
  stRetServerPay_eResult_descriptor_ = stRetServerPay_descriptor_->enum_type(0);
  stRetServerPay_ProtoModID_descriptor_ = stRetServerPay_descriptor_->enum_type(1);
  stRetServerPay_ProtoFunID_descriptor_ = stRetServerPay_descriptor_->enum_type(2);
  stReqSummonReward_descriptor_ = file->message_type(300);
  static const int stReqSummonReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonReward, countid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonReward, summontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonReward, rewardtype_),
  };
  stReqSummonReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSummonReward_descriptor_,
      stReqSummonReward::default_instance_,
      stReqSummonReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSummonReward));
  stReqSummonReward_ProtoModID_descriptor_ = stReqSummonReward_descriptor_->enum_type(0);
  stReqSummonReward_ProtoFunID_descriptor_ = stReqSummonReward_descriptor_->enum_type(1);
  stSummonRewardResult_descriptor_ = file->message_type(301);
  static const int stSummonRewardResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonRewardResult, countid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonRewardResult, summontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonRewardResult, rewardtype_),
  };
  stSummonRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSummonRewardResult_descriptor_,
      stSummonRewardResult::default_instance_,
      stSummonRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSummonRewardResult));
  stSummonRewardResult_eResult_descriptor_ = stSummonRewardResult_descriptor_->enum_type(0);
  stSummonRewardResult_ProtoModID_descriptor_ = stSummonRewardResult_descriptor_->enum_type(1);
  stSummonRewardResult_ProtoFunID_descriptor_ = stSummonRewardResult_descriptor_->enum_type(2);
  stReqSummonData_descriptor_ = file->message_type(302);
  static const int stReqSummonData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonData, summontype_),
  };
  stReqSummonData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSummonData_descriptor_,
      stReqSummonData::default_instance_,
      stReqSummonData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSummonData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSummonData));
  stReqSummonData_ProtoModID_descriptor_ = stReqSummonData_descriptor_->enum_type(0);
  stReqSummonData_ProtoFunID_descriptor_ = stReqSummonData_descriptor_->enum_type(1);
  stSummonDataResult_descriptor_ = file->message_type(303);
  static const int stSummonDataResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonDataResult, hasbuysummonment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonDataResult, freesummonrewardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonDataResult, rechargesummonrewardlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonDataResult, summontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonDataResult, countid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonDataResult, countnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonDataResult, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonDataResult, endtime_),
  };
  stSummonDataResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSummonDataResult_descriptor_,
      stSummonDataResult::default_instance_,
      stSummonDataResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonDataResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSummonDataResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSummonDataResult));
  stSummonDataResult_ProtoModID_descriptor_ = stSummonDataResult_descriptor_->enum_type(0);
  stSummonDataResult_ProtoFunID_descriptor_ = stSummonDataResult_descriptor_->enum_type(1);
  stBuySummonPlanResult_descriptor_ = file->message_type(304);
  static const int stBuySummonPlanResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuySummonPlanResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuySummonPlanResult, index_),
  };
  stBuySummonPlanResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuySummonPlanResult_descriptor_,
      stBuySummonPlanResult::default_instance_,
      stBuySummonPlanResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuySummonPlanResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuySummonPlanResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuySummonPlanResult));
  stBuySummonPlanResult_eResult_descriptor_ = stBuySummonPlanResult_descriptor_->enum_type(0);
  stBuySummonPlanResult_ProtoModID_descriptor_ = stBuySummonPlanResult_descriptor_->enum_type(1);
  stBuySummonPlanResult_ProtoFunID_descriptor_ = stBuySummonPlanResult_descriptor_->enum_type(2);
  stReqRechargeCheck_descriptor_ = file->message_type(305);
  static const int stReqRechargeCheck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeCheck, rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeCheck, buycount_),
  };
  stReqRechargeCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRechargeCheck_descriptor_,
      stReqRechargeCheck::default_instance_,
      stReqRechargeCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRechargeCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRechargeCheck));
  stReqRechargeCheck_ProtoModID_descriptor_ = stReqRechargeCheck_descriptor_->enum_type(0);
  stReqRechargeCheck_ProtoFunID_descriptor_ = stReqRechargeCheck_descriptor_->enum_type(1);
  stRechargeCheckResult_descriptor_ = file->message_type(306);
  static const int stRechargeCheckResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeCheckResult, result_),
  };
  stRechargeCheckResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRechargeCheckResult_descriptor_,
      stRechargeCheckResult::default_instance_,
      stRechargeCheckResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeCheckResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeCheckResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRechargeCheckResult));
  stRechargeCheckResult_eResult_descriptor_ = stRechargeCheckResult_descriptor_->enum_type(0);
  stRechargeCheckResult_ProtoModID_descriptor_ = stRechargeCheckResult_descriptor_->enum_type(1);
  stRechargeCheckResult_ProtoFunID_descriptor_ = stRechargeCheckResult_descriptor_->enum_type(2);
  eAttachStatus_descriptor_ = file->enum_type(0);
  eMailType_descriptor_ = file->enum_type(1);
  eDrawType_descriptor_ = file->enum_type(2);
  eTreasureType_descriptor_ = file->enum_type(3);
  eCombineItem_descriptor_ = file->enum_type(4);
  eCaptureType_descriptor_ = file->enum_type(5);
  eActivityType_descriptor_ = file->enum_type(6);
  eSevenDayGoalType_descriptor_ = file->enum_type(7);
  eSevenDayGoal_descriptor_ = file->enum_type(8);
  eLevelUpType_descriptor_ = file->enum_type(9);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Misc_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMainSnalInfo_descriptor_, &stSynMainSnalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMailAttach_descriptor_, &stSynMailAttach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynDetailMailInfo_descriptor_, &stSynDetailMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynAllMail_descriptor_, &stSynAllMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqReadMail_descriptor_, &stReqReadMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetMailInfo_descriptor_, &stRetMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqFetchAttach_descriptor_, &stReqFetchAttach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFetchAttachResult_descriptor_, &stFetchAttachResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReceiveMail_descriptor_, &stReceiveMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRewardInfo_descriptor_, &stReqRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRewardInfo_descriptor_, &stRetRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSignReward_descriptor_, &stReqSignReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGetSignRewardResult_descriptor_, &stGetSignRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenSvrReward_descriptor_, &stReqOpenSvrReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGetOpenSvrRewardResult_descriptor_, &stGetOpenSvrRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLvReward_descriptor_, &stReqLvReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLvRewardResult_descriptor_, &stLvRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOnlineReward_descriptor_, &stReqOnlineReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGetOnlineRewardResult_descriptor_, &stGetOnlineRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyStarInfo_descriptor_, &stBuyStarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBuyStar_descriptor_, &stReqBuyStar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyStarResult_descriptor_, &stBuyStarResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOpenDrawWindow_descriptor_, &ReqOpenDrawWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDrawWindowInfo_descriptor_, &stDrawWindowInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDraw_descriptor_, &stReqDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynDrawItem_descriptor_, &stSynDrawItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDrawResult_descriptor_, &stDrawResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMyTitle_descriptor_, &stSynMyTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stActiveOneTitle_descriptor_, &stActiveOneTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stActiveTitleResult_descriptor_, &stActiveTitleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stObtainOneTitle_descriptor_, &stObtainOneTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyInvestPlan_descriptor_, &stBuyInvestPlan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyInvestPlanResult_descriptor_, &stBuyInvestPlanResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqInvestPlanReward_descriptor_, &stReqInvestPlanReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInvestPlanRewardResult_descriptor_, &stInvestPlanRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEatDinner_descriptor_, &stReqEatDinner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEatDinnerResult_descriptor_, &stEatDinnerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynActivityData_descriptor_, &stSynActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenCaptureTreasure_descriptor_, &stReqOpenCaptureTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynCaptureTreasureInfo_descriptor_, &stSynCaptureTreasureInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetCaptureTreasure_descriptor_, &stRetCaptureTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCombineTreasure_descriptor_, &stReqCombineTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCombineTreasureResult_descriptor_, &stCombineTreasureResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyPeaceModuleTime_descriptor_, &stBuyPeaceModuleTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyPeaceModuleTimeResult_descriptor_, &stBuyPeaceModuleTimeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCaptureTreasureUserInfo_descriptor_, &stCaptureTreasureUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqChallengeUserList_descriptor_, &stReqChallengeUserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetChallengeUserList_descriptor_, &stRetChallengeUserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCaptureUserTreasure_descriptor_, &stCaptureUserTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynCaptureReward_descriptor_, &stSynCaptureReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCaptureUserTreasureResult_descriptor_, &stCaptureUserTreasureResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynTreasureNum_descriptor_, &stSynTreasureNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelActiveTitle_descriptor_, &stCancelActiveTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelActiveTitleResult_descriptor_, &stCancelActiveTitleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynSpriteInfo_descriptor_, &stSynSpriteInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynAllSprite_descriptor_, &stSynAllSprite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUnlockedSprite_descriptor_, &stReqUnlockedSprite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUnlockedSpriteResult_descriptor_, &stUnlockedSpriteResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddSprite_descriptor_, &stAddSprite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLevelupSprite_descriptor_, &stReqLevelupSprite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLevelupSpriteResult_descriptor_, &stLevelupSpriteResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSpriteFollowMaster_descriptor_, &stSpriteFollowMaster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSpriteFollowMasterResult_descriptor_, &stSpriteFollowMasterResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAvaibleActivity_descriptor_, &stReqAvaibleActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynActivityStepReward_descriptor_, &stSynActivityStepReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynActivityStepOptionalReward_descriptor_, &stSynActivityStepOptionalReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynActivityStepInfo_descriptor_, &stSynActivityStepInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynActivityInfo_descriptor_, &stSynActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetAvaibleActivity_descriptor_, &stRetAvaibleActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAcitivityReward_descriptor_, &stReqAcitivityReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stActivityRewardResult_descriptor_, &stActivityRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqWorldBossDamageRank_descriptor_, &stReqWorldBossDamageRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWorldBossDamageSortItem_descriptor_, &stWorldBossDamageSortItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetWorldBossDamageRank_descriptor_, &stRetWorldBossDamageRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenWorldBossWin_descriptor_, &stReqOpenWorldBossWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetOpenWorldBossWin_descriptor_, &stRetOpenWorldBossWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBossWorldMatch_descriptor_, &stReqBossWorldMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetBossWorldMatch_descriptor_, &stRetBossWorldMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqClearWorldBossActivityCD_descriptor_, &stReqClearWorldBossActivityCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stClearWorldBossActivityCDResult_descriptor_, &stClearWorldBossActivityCDResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRaiseDamageInWorldBoss_descriptor_, &stReqRaiseDamageInWorldBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRaiseDamageInWorldBossResult_descriptor_, &stRaiseDamageInWorldBossResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelWorldBossMatch_descriptor_, &stCancelWorldBossMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelWorldBossMatchResult_descriptor_, &stCancelWorldBossMatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQueryDrawHeroActivity_descriptor_, &stQueryDrawHeroActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDrawHeroActivityInfo_descriptor_, &stRetDrawHeroActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawHeroScoreReward_descriptor_, &stReqDrawHeroScoreReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDrawHeroScoreRewardRet_descriptor_, &stDrawHeroScoreRewardRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawHeroRankReward_descriptor_, &stReqDrawHeroRankReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDrawHeroRankReward_descriptor_, &stDrawHeroRankReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCompensationList_descriptor_, &stReqCompensationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCompensationItem_descriptor_, &stCompensationItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCompensationInfo_descriptor_, &stCompensationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetCompensationList_descriptor_, &stRetCompensationList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGotCompensation_descriptor_, &stReqGotCompensation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGotCompensationResult_descriptor_, &stGotCompensationResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReq7DayActivityInfo_descriptor_, &stReq7DayActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynSDGoalInfo_descriptor_, &stSynSDGoalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRet7DayActivityInfo_descriptor_, &stRet7DayActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSevenDayReward_descriptor_, &stReqSevenDayReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSevenDayRewardRet_descriptor_, &stSevenDayRewardRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSevenDayHasRewardTip_descriptor_, &stSevenDayHasRewardTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAppStoreCfg_descriptor_, &stAppStoreCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOpenWindowTip_descriptor_, &stOpenWindowTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRechargeActivityList_descriptor_, &stReqRechargeActivityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRechargeActivityInfo_descriptor_, &stSynRechargeActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRechargeActivityList_descriptor_, &stRetRechargeActivityList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRechargeActivtiyReward_descriptor_, &stReqRechargeActivtiyReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRechargeActivityReward_descriptor_, &stRetRechargeActivityReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynInvestigation_descriptor_, &stSynInvestigation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynAllInvestigation_descriptor_, &stSynAllInvestigation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInvestAnswer_descriptor_, &stInvestAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqInvestgationReward_descriptor_, &stReqInvestgationReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInvestgationRewardResult_descriptor_, &stInvestgationRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqActivityShop_descriptor_, &stReqActivityShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stActivityShopList_descriptor_, &stActivityShopList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLuchShopInfo_descriptor_, &stLuchShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynLuckShopTodayRecharge_descriptor_, &stSynLuckShopTodayRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLuckShopReward_descriptor_, &stReqLuckShopReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLuckShopRewardResult_descriptor_, &stLuckShopRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSaveOpenLuckShopWinTime_descriptor_, &stSaveOpenLuckShopWinTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLuckShopRechargeMeetCondTime_descriptor_, &stLuckShopRechargeMeetCondTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenGuardWin_descriptor_, &stReqOpenGuardWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuardEnemy_descriptor_, &stGuardEnemy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuardBaseInfo_descriptor_, &stGuardBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuardDetailInfo_descriptor_, &stGuardDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuardWinInfo_descriptor_, &stGuardWinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetInterceptCD_descriptor_, &stResetInterceptCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetInterceptCDResult_descriptor_, &stResetInterceptCDResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetInterceptNum_descriptor_, &stResetInterceptNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResetInterceptNumResult_descriptor_, &stResetInterceptNumResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGuardDetailInfo_descriptor_, &stReqGuardDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetGuardDetailInfo_descriptor_, &stRetGuardDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqIntercept_descriptor_, &stReqIntercept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stIntercerptResult_descriptor_, &stIntercerptResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGuard_descriptor_, &stReqGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetGuardWin_descriptor_, &stRetGuardWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSummonHighQualityGuard_descriptor_, &stReqSummonHighQualityGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSummonHighQualityGuardResult_descriptor_, &stSummonHighQualityGuardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGuardInspired_descriptor_, &stReqGuardInspired::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuardInspiredResult_descriptor_, &stGuardInspiredResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRefreshGuardQuality_descriptor_, &stReqRefreshGuardQuality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRefreshGuardQualityResult_descriptor_, &stRetRefreshGuardQualityResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCanHelpGuardFriend_descriptor_, &stReqCanHelpGuardFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHelpGaurdFriendInfo_descriptor_, &stHelpGaurdFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetCanHelpGuardFriend_descriptor_, &stRetCanHelpGuardFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInviteFriendForHelpGuard_descriptor_, &stInviteFriendForHelpGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInviteFriendForHelpGuardResult_descriptor_, &stInviteFriendForHelpGuardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAskFriendHelpGuard_descriptor_, &stAskFriendHelpGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplyHelpGuard_descriptor_, &stReplyHelpGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplyHelpGuardResult_descriptor_, &stReplyHelpGuardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserAgreeHelpGuard_descriptor_, &stUserAgreeHelpGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBeginGuard_descriptor_, &stBeginGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBeginGuardResult_descriptor_, &stBeginGuardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInterceptInfo_descriptor_, &stInterceptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqInterceptInfo_descriptor_, &stReqInterceptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetInterceptInfo_descriptor_, &stRetInterceptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRechargeActivityInfoItem_descriptor_, &stRechargeActivityInfoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyRechargeActivityInfo_descriptor_, &stNotifyRechargeActivityInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLuckShopRefreshResult_descriptor_, &stLuckShopRefreshResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyGuardFinish_descriptor_, &stNotifyGuardFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyFriendGuardFinish_descriptor_, &stNotifyFriendGuardFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyInterceptResult_descriptor_, &stNotifyInterceptResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplyNotifyIntercept_descriptor_, &stReplyNotifyIntercept::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQuickFinishGuard_descriptor_, &stQuickFinishGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQuickFinishGuardResult_descriptor_, &stQuickFinishGuardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyDelTitle_descriptor_, &stNotifyDelTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBeInterceptTip_descriptor_, &stBeInterceptTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOnlineNotifyNewInterceptInfo_descriptor_, &stOnlineNotifyNewInterceptInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenLimitFashionDrawWin_descriptor_, &stReqOpenLimitFashionDrawWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetLimitFashionDrawWinInfo_descriptor_, &stRetLimitFashionDrawWinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawLimitFashion_descriptor_, &stReqDrawLimitFashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDrawLimitFashionResult_descriptor_, &stDrawLimitFashionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExchangeItem_descriptor_, &stExchangeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynExchangeActivityiStep_descriptor_, &stSynExchangeActivityiStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynExchangeActivity_descriptor_, &stSynExchangeActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetExchangeActivity_descriptor_, &stRetExchangeActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqExchangeItem_descriptor_, &stReqExchangeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExchangeItemResult_descriptor_, &stExchangeItemResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRecycleRechargeActivity_descriptor_, &stRecycleRechargeActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendRecycleRechargeActivity_descriptor_, &stSendRecycleRechargeActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRecycleRechargeActReward_descriptor_, &stReqRecycleRechargeActReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRecycleRechargeActReward_descriptor_, &stRetRecycleRechargeActReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCommonActInfoItem_descriptor_, &stCommonActInfoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshCommonActInfo_descriptor_, &stRefreshCommonActInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAKeyFetchAttach_descriptor_, &stReqAKeyFetchAttach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAKeyFetchAttachResult_descriptor_, &stAKeyFetchAttachResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGloryfashion_descriptor_, &stReqGloryfashion::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGloryfashionResult_descriptor_, &stGloryfashionResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDevilCallItem_descriptor_, &stDevilCallItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAllDevilCall_descriptor_, &stReqAllDevilCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetAllDevilCall_descriptor_, &stRetAllDevilCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDevilCallReward_descriptor_, &stReqDevilCallReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDevilCallReward_descriptor_, &stRetDevilCallReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDevilCall_descriptor_, &stReqDevilCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDevilCall_descriptor_, &stRetDevilCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDevilCallSummary_descriptor_, &stReqDevilCallSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDevilCallSummary_descriptor_, &stRetDevilCallSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPayType_descriptor_, &stReqPayType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetPayType_descriptor_, &stRetPayType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOperateActvity_descriptor_, &stReqOperateActvity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOperateActvityItemInfo_descriptor_, &stOperateActvityItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOperateActvityItems_descriptor_, &stOperateActvityItems::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetOperateActvity_descriptor_, &stRetOperateActvity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOperateActvityReward_descriptor_, &stReqOperateActvityReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetOperateActvityReward_descriptor_, &stRetOperateActvityReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqIllusionSprite_descriptor_, &stReqIllusionSprite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stIllusionSpriteSkillItem_descriptor_, &stIllusionSpriteSkillItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetIllusionSprite_descriptor_, &stRetIllusionSprite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    illusionSpriteEatItem_descriptor_, &illusionSpriteEatItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqIllusionSpriteEat_descriptor_, &stReqIllusionSpriteEat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetIllusionSpriteEat_descriptor_, &stRetIllusionSpriteEat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqIllusionSpriteSkillUp_descriptor_, &stReqIllusionSpriteSkillUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetIllusionSpriteSkillUp_descriptor_, &stRetIllusionSpriteSkillUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRepOpenDiscoverWindow_descriptor_, &stRepOpenDiscoverWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOpenDiscoverWindowResult_descriptor_, &stOpenDiscoverWindowResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPlayDice_descriptor_, &stReqPlayDice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPlayDiceResult_descriptor_, &stPlayDiceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGetOrGiveUpTask_descriptor_, &stReqGetOrGiveUpTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGetTaskResult_descriptor_, &stGetTaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiveUpTaskResult_descriptor_, &stGiveUpTaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRefreshNum_descriptor_, &stReqRefreshNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshNumResult_descriptor_, &stRefreshNumResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGetIntegralReward_descriptor_, &stReqGetIntegralReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGetIntegralRewardResult_descriptor_, &stGetIntegralRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGiveReward_descriptor_, &stReqGiveReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiveRewardResult_descriptor_, &stGiveRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLuckyDraw_descriptor_, &stReqLuckyDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLuckyDrawPointRewardInfo_descriptor_, &stLuckyDrawPointRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLuckyDrawRewardInfo_descriptor_, &stLuckyDrawRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLuckyDrawUserInfo_descriptor_, &stLuckyDrawUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetLuckyDraw_descriptor_, &stRetLuckyDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLuckyDrawReward_descriptor_, &stReqLuckyDrawReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetLuckyDrawReward_descriptor_, &stRetLuckyDrawReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLuckyDrawPointReward_descriptor_, &stReqLuckyDrawPointReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetLuckyDrawPointReward_descriptor_, &stRetLuckyDrawPointReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRedPointRuls_descriptor_, &stReqRedPointRuls::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRedPointRulsResult_descriptor_, &stRedPointRulsResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqInviteFriend_descriptor_, &stReqInviteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteFriendReward_descriptor_, &InviteFriendReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetInviteFriend_descriptor_, &stRetInviteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawInviteFriend_descriptor_, &stReqDrawInviteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDrawInviteFriend_descriptor_, &stRetDrawInviteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUseInviteCode_descriptor_, &stReqUseInviteCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetUseInviteCode_descriptor_, &stRetUseInviteCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqShareInvite_descriptor_, &stReqShareInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetShareInvite_descriptor_, &stRetShareInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDailyShareInvite_descriptor_, &stReqDailyShareInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDailyShareInvite_descriptor_, &stRetDailyShareInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawDailyShareReward_descriptor_, &stReqDrawDailyShareReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDrawDailyShareReward_descriptor_, &stRetDrawDailyShareReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawOnceShareReward_descriptor_, &stReqDrawOnceShareReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDrawOnceShareReward_descriptor_, &stRetDrawOnceShareReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyInterceptServerResult_descriptor_, &stNotifyInterceptServerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqReceiveState_descriptor_, &stReqReceiveState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReceiveStateResult_descriptor_, &stReceiveStateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqReceiveReward_descriptor_, &stReqReceiveReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReceiveRewardResult_descriptor_, &stReceiveRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAcitivityLimitPetItem_descriptor_, &stAcitivityLimitPetItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendAllAcitivityLimitPet_descriptor_, &stSendAllAcitivityLimitPet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendLateWalfareActivity_descriptor_, &stSendLateWalfareActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawLateWalfare_descriptor_, &stReqDrawLateWalfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDrawLateWalfare_descriptor_, &stRetDrawLateWalfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResGetBackItem_descriptor_, &stResGetBackItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendAllResGetBack_descriptor_, &stSendAllResGetBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawResGetBack_descriptor_, &stReqDrawResGetBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDrawResGetBack_descriptor_, &stRetDrawResGetBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawAllResGetBack_descriptor_, &stReqDrawAllResGetBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDrawAllResGetBack_descriptor_, &stRetDrawAllResGetBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenMonsterWindow_descriptor_, &stReqOpenMonsterWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOpenMonsterWindowResult_descriptor_, &stOpenMonsterWindowResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAttackMonster_descriptor_, &stReqAttackMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAttackMonsterResult_descriptor_, &stAttackMonsterResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBuyAttackTime_descriptor_, &stReqBuyAttackTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyAttackTimeResult_descriptor_, &stBuyAttackTimeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAKeyAttackMonster_descriptor_, &stReqAKeyAttackMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAKeyAttackMonsterResult_descriptor_, &stAKeyAttackMonsterResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynTipItem_descriptor_, &stSynTipItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stObtainItemTip_descriptor_, &stObtainItemTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserOnline_descriptor_, &stUserOnline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stConsumeItemInfo_descriptor_, &stConsumeItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqMountLevelUp_descriptor_, &stReqMountLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMountLevelUpResult_descriptor_, &stMountLevelUpResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqButtleMount_descriptor_, &stReqButtleMount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stButtleMountResult_descriptor_, &stButtleMountResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqMountFollow_descriptor_, &stReqMountFollow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMountFollowResult_descriptor_, &stMountFollowResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqMountUnreal_descriptor_, &stReqMountUnreal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMountUnrealResult_descriptor_, &stMountUnrealResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenMountGrowWindow_descriptor_, &stReqOpenMountGrowWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOpenMountGrowWindowResult_descriptor_, &stOpenMountGrowWindowResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshBattle_descriptor_, &stRefreshBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLevelWflfareInfo_descriptor_, &stLevelWflfareInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHasGotRewardWflfareInfo_descriptor_, &stHasGotRewardWflfareInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqReceiveWflfare_descriptor_, &stReqReceiveWflfare::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReceiveWflfareResult_descriptor_, &stReceiveWflfareResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPaySign_descriptor_, &stReqPaySign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetPaySign_descriptor_, &stRetPaySign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqServerPay_descriptor_, &stReqServerPay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetServerPay_descriptor_, &stRetServerPay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSummonReward_descriptor_, &stReqSummonReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSummonRewardResult_descriptor_, &stSummonRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSummonData_descriptor_, &stReqSummonData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSummonDataResult_descriptor_, &stSummonDataResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuySummonPlanResult_descriptor_, &stBuySummonPlanResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRechargeCheck_descriptor_, &stReqRechargeCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRechargeCheckResult_descriptor_, &stRechargeCheckResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Misc_2eproto() {
  delete stSynMainSnalInfo::default_instance_;
  delete stSynMainSnalInfo_reflection_;
  delete stSynMailAttach::default_instance_;
  delete stSynMailAttach_reflection_;
  delete stSynDetailMailInfo::default_instance_;
  delete stSynDetailMailInfo_reflection_;
  delete stSynAllMail::default_instance_;
  delete stSynAllMail_reflection_;
  delete stReqReadMail::default_instance_;
  delete stReqReadMail_reflection_;
  delete stRetMailInfo::default_instance_;
  delete stRetMailInfo_reflection_;
  delete stReqFetchAttach::default_instance_;
  delete stReqFetchAttach_reflection_;
  delete stFetchAttachResult::default_instance_;
  delete stFetchAttachResult_reflection_;
  delete stReceiveMail::default_instance_;
  delete stReceiveMail_reflection_;
  delete stReqRewardInfo::default_instance_;
  delete stReqRewardInfo_reflection_;
  delete stRetRewardInfo::default_instance_;
  delete stRetRewardInfo_reflection_;
  delete stReqSignReward::default_instance_;
  delete stReqSignReward_reflection_;
  delete stGetSignRewardResult::default_instance_;
  delete stGetSignRewardResult_reflection_;
  delete stReqOpenSvrReward::default_instance_;
  delete stReqOpenSvrReward_reflection_;
  delete stGetOpenSvrRewardResult::default_instance_;
  delete stGetOpenSvrRewardResult_reflection_;
  delete stReqLvReward::default_instance_;
  delete stReqLvReward_reflection_;
  delete stLvRewardResult::default_instance_;
  delete stLvRewardResult_reflection_;
  delete stReqOnlineReward::default_instance_;
  delete stReqOnlineReward_reflection_;
  delete stGetOnlineRewardResult::default_instance_;
  delete stGetOnlineRewardResult_reflection_;
  delete stBuyStarInfo::default_instance_;
  delete stBuyStarInfo_reflection_;
  delete stReqBuyStar::default_instance_;
  delete stReqBuyStar_reflection_;
  delete stBuyStarResult::default_instance_;
  delete stBuyStarResult_reflection_;
  delete ReqOpenDrawWindow::default_instance_;
  delete ReqOpenDrawWindow_reflection_;
  delete stDrawWindowInfo::default_instance_;
  delete stDrawWindowInfo_reflection_;
  delete stReqDraw::default_instance_;
  delete stReqDraw_reflection_;
  delete stSynDrawItem::default_instance_;
  delete stSynDrawItem_reflection_;
  delete stDrawResult::default_instance_;
  delete stDrawResult_reflection_;
  delete stSynMyTitle::default_instance_;
  delete stSynMyTitle_reflection_;
  delete stActiveOneTitle::default_instance_;
  delete stActiveOneTitle_reflection_;
  delete stActiveTitleResult::default_instance_;
  delete stActiveTitleResult_reflection_;
  delete stObtainOneTitle::default_instance_;
  delete stObtainOneTitle_reflection_;
  delete stBuyInvestPlan::default_instance_;
  delete stBuyInvestPlan_reflection_;
  delete stBuyInvestPlanResult::default_instance_;
  delete stBuyInvestPlanResult_reflection_;
  delete stReqInvestPlanReward::default_instance_;
  delete stReqInvestPlanReward_reflection_;
  delete stInvestPlanRewardResult::default_instance_;
  delete stInvestPlanRewardResult_reflection_;
  delete stReqEatDinner::default_instance_;
  delete stReqEatDinner_reflection_;
  delete stEatDinnerResult::default_instance_;
  delete stEatDinnerResult_reflection_;
  delete stSynActivityData::default_instance_;
  delete stSynActivityData_reflection_;
  delete stReqOpenCaptureTreasure::default_instance_;
  delete stReqOpenCaptureTreasure_reflection_;
  delete stSynCaptureTreasureInfo::default_instance_;
  delete stSynCaptureTreasureInfo_reflection_;
  delete stRetCaptureTreasure::default_instance_;
  delete stRetCaptureTreasure_reflection_;
  delete stReqCombineTreasure::default_instance_;
  delete stReqCombineTreasure_reflection_;
  delete stCombineTreasureResult::default_instance_;
  delete stCombineTreasureResult_reflection_;
  delete stBuyPeaceModuleTime::default_instance_;
  delete stBuyPeaceModuleTime_reflection_;
  delete stBuyPeaceModuleTimeResult::default_instance_;
  delete stBuyPeaceModuleTimeResult_reflection_;
  delete stCaptureTreasureUserInfo::default_instance_;
  delete stCaptureTreasureUserInfo_reflection_;
  delete stReqChallengeUserList::default_instance_;
  delete stReqChallengeUserList_reflection_;
  delete stRetChallengeUserList::default_instance_;
  delete stRetChallengeUserList_reflection_;
  delete stCaptureUserTreasure::default_instance_;
  delete stCaptureUserTreasure_reflection_;
  delete stSynCaptureReward::default_instance_;
  delete stSynCaptureReward_reflection_;
  delete stCaptureUserTreasureResult::default_instance_;
  delete stCaptureUserTreasureResult_reflection_;
  delete stSynTreasureNum::default_instance_;
  delete stSynTreasureNum_reflection_;
  delete stCancelActiveTitle::default_instance_;
  delete stCancelActiveTitle_reflection_;
  delete stCancelActiveTitleResult::default_instance_;
  delete stCancelActiveTitleResult_reflection_;
  delete stSynSpriteInfo::default_instance_;
  delete stSynSpriteInfo_reflection_;
  delete stSynAllSprite::default_instance_;
  delete stSynAllSprite_reflection_;
  delete stReqUnlockedSprite::default_instance_;
  delete stReqUnlockedSprite_reflection_;
  delete stUnlockedSpriteResult::default_instance_;
  delete stUnlockedSpriteResult_reflection_;
  delete stAddSprite::default_instance_;
  delete stAddSprite_reflection_;
  delete stReqLevelupSprite::default_instance_;
  delete stReqLevelupSprite_reflection_;
  delete stLevelupSpriteResult::default_instance_;
  delete stLevelupSpriteResult_reflection_;
  delete stSpriteFollowMaster::default_instance_;
  delete stSpriteFollowMaster_reflection_;
  delete stSpriteFollowMasterResult::default_instance_;
  delete stSpriteFollowMasterResult_reflection_;
  delete stReqAvaibleActivity::default_instance_;
  delete stReqAvaibleActivity_reflection_;
  delete stSynActivityStepReward::default_instance_;
  delete stSynActivityStepReward_reflection_;
  delete stSynActivityStepOptionalReward::default_instance_;
  delete stSynActivityStepOptionalReward_reflection_;
  delete stSynActivityStepInfo::default_instance_;
  delete stSynActivityStepInfo_reflection_;
  delete stSynActivityInfo::default_instance_;
  delete stSynActivityInfo_reflection_;
  delete stRetAvaibleActivity::default_instance_;
  delete stRetAvaibleActivity_reflection_;
  delete stReqAcitivityReward::default_instance_;
  delete stReqAcitivityReward_reflection_;
  delete stActivityRewardResult::default_instance_;
  delete stActivityRewardResult_reflection_;
  delete stReqWorldBossDamageRank::default_instance_;
  delete stReqWorldBossDamageRank_reflection_;
  delete stWorldBossDamageSortItem::default_instance_;
  delete stWorldBossDamageSortItem_reflection_;
  delete stRetWorldBossDamageRank::default_instance_;
  delete stRetWorldBossDamageRank_reflection_;
  delete stReqOpenWorldBossWin::default_instance_;
  delete stReqOpenWorldBossWin_reflection_;
  delete stRetOpenWorldBossWin::default_instance_;
  delete stRetOpenWorldBossWin_reflection_;
  delete stReqBossWorldMatch::default_instance_;
  delete stReqBossWorldMatch_reflection_;
  delete stRetBossWorldMatch::default_instance_;
  delete stRetBossWorldMatch_reflection_;
  delete stReqClearWorldBossActivityCD::default_instance_;
  delete stReqClearWorldBossActivityCD_reflection_;
  delete stClearWorldBossActivityCDResult::default_instance_;
  delete stClearWorldBossActivityCDResult_reflection_;
  delete stReqRaiseDamageInWorldBoss::default_instance_;
  delete stReqRaiseDamageInWorldBoss_reflection_;
  delete stRaiseDamageInWorldBossResult::default_instance_;
  delete stRaiseDamageInWorldBossResult_reflection_;
  delete stCancelWorldBossMatch::default_instance_;
  delete stCancelWorldBossMatch_reflection_;
  delete stCancelWorldBossMatchResult::default_instance_;
  delete stCancelWorldBossMatchResult_reflection_;
  delete stQueryDrawHeroActivity::default_instance_;
  delete stQueryDrawHeroActivity_reflection_;
  delete stRetDrawHeroActivityInfo::default_instance_;
  delete stRetDrawHeroActivityInfo_reflection_;
  delete stReqDrawHeroScoreReward::default_instance_;
  delete stReqDrawHeroScoreReward_reflection_;
  delete stDrawHeroScoreRewardRet::default_instance_;
  delete stDrawHeroScoreRewardRet_reflection_;
  delete stReqDrawHeroRankReward::default_instance_;
  delete stReqDrawHeroRankReward_reflection_;
  delete stDrawHeroRankReward::default_instance_;
  delete stDrawHeroRankReward_reflection_;
  delete stReqCompensationList::default_instance_;
  delete stReqCompensationList_reflection_;
  delete stCompensationItem::default_instance_;
  delete stCompensationItem_reflection_;
  delete stCompensationInfo::default_instance_;
  delete stCompensationInfo_reflection_;
  delete stRetCompensationList::default_instance_;
  delete stRetCompensationList_reflection_;
  delete stReqGotCompensation::default_instance_;
  delete stReqGotCompensation_reflection_;
  delete stGotCompensationResult::default_instance_;
  delete stGotCompensationResult_reflection_;
  delete stReq7DayActivityInfo::default_instance_;
  delete stReq7DayActivityInfo_reflection_;
  delete stSynSDGoalInfo::default_instance_;
  delete stSynSDGoalInfo_reflection_;
  delete stRet7DayActivityInfo::default_instance_;
  delete stRet7DayActivityInfo_reflection_;
  delete stReqSevenDayReward::default_instance_;
  delete stReqSevenDayReward_reflection_;
  delete stSevenDayRewardRet::default_instance_;
  delete stSevenDayRewardRet_reflection_;
  delete stSevenDayHasRewardTip::default_instance_;
  delete stSevenDayHasRewardTip_reflection_;
  delete stAppStoreCfg::default_instance_;
  delete stAppStoreCfg_reflection_;
  delete stOpenWindowTip::default_instance_;
  delete stOpenWindowTip_reflection_;
  delete stReqRechargeActivityList::default_instance_;
  delete stReqRechargeActivityList_reflection_;
  delete stSynRechargeActivityInfo::default_instance_;
  delete stSynRechargeActivityInfo_reflection_;
  delete stRetRechargeActivityList::default_instance_;
  delete stRetRechargeActivityList_reflection_;
  delete stReqRechargeActivtiyReward::default_instance_;
  delete stReqRechargeActivtiyReward_reflection_;
  delete stRetRechargeActivityReward::default_instance_;
  delete stRetRechargeActivityReward_reflection_;
  delete stSynInvestigation::default_instance_;
  delete stSynInvestigation_reflection_;
  delete stSynAllInvestigation::default_instance_;
  delete stSynAllInvestigation_reflection_;
  delete stInvestAnswer::default_instance_;
  delete stInvestAnswer_reflection_;
  delete stReqInvestgationReward::default_instance_;
  delete stReqInvestgationReward_reflection_;
  delete stInvestgationRewardResult::default_instance_;
  delete stInvestgationRewardResult_reflection_;
  delete stReqActivityShop::default_instance_;
  delete stReqActivityShop_reflection_;
  delete stActivityShopList::default_instance_;
  delete stActivityShopList_reflection_;
  delete stLuchShopInfo::default_instance_;
  delete stLuchShopInfo_reflection_;
  delete stSynLuckShopTodayRecharge::default_instance_;
  delete stSynLuckShopTodayRecharge_reflection_;
  delete stReqLuckShopReward::default_instance_;
  delete stReqLuckShopReward_reflection_;
  delete stLuckShopRewardResult::default_instance_;
  delete stLuckShopRewardResult_reflection_;
  delete stSaveOpenLuckShopWinTime::default_instance_;
  delete stSaveOpenLuckShopWinTime_reflection_;
  delete stLuckShopRechargeMeetCondTime::default_instance_;
  delete stLuckShopRechargeMeetCondTime_reflection_;
  delete stReqOpenGuardWin::default_instance_;
  delete stReqOpenGuardWin_reflection_;
  delete stGuardEnemy::default_instance_;
  delete stGuardEnemy_reflection_;
  delete stGuardBaseInfo::default_instance_;
  delete stGuardBaseInfo_reflection_;
  delete stGuardDetailInfo::default_instance_;
  delete stGuardDetailInfo_reflection_;
  delete stGuardWinInfo::default_instance_;
  delete stGuardWinInfo_reflection_;
  delete stResetInterceptCD::default_instance_;
  delete stResetInterceptCD_reflection_;
  delete stResetInterceptCDResult::default_instance_;
  delete stResetInterceptCDResult_reflection_;
  delete stResetInterceptNum::default_instance_;
  delete stResetInterceptNum_reflection_;
  delete stResetInterceptNumResult::default_instance_;
  delete stResetInterceptNumResult_reflection_;
  delete stReqGuardDetailInfo::default_instance_;
  delete stReqGuardDetailInfo_reflection_;
  delete stRetGuardDetailInfo::default_instance_;
  delete stRetGuardDetailInfo_reflection_;
  delete stReqIntercept::default_instance_;
  delete stReqIntercept_reflection_;
  delete stIntercerptResult::default_instance_;
  delete stIntercerptResult_reflection_;
  delete stReqGuard::default_instance_;
  delete stReqGuard_reflection_;
  delete stRetGuardWin::default_instance_;
  delete stRetGuardWin_reflection_;
  delete stReqSummonHighQualityGuard::default_instance_;
  delete stReqSummonHighQualityGuard_reflection_;
  delete stSummonHighQualityGuardResult::default_instance_;
  delete stSummonHighQualityGuardResult_reflection_;
  delete stReqGuardInspired::default_instance_;
  delete stReqGuardInspired_reflection_;
  delete stGuardInspiredResult::default_instance_;
  delete stGuardInspiredResult_reflection_;
  delete stReqRefreshGuardQuality::default_instance_;
  delete stReqRefreshGuardQuality_reflection_;
  delete stRetRefreshGuardQualityResult::default_instance_;
  delete stRetRefreshGuardQualityResult_reflection_;
  delete stReqCanHelpGuardFriend::default_instance_;
  delete stReqCanHelpGuardFriend_reflection_;
  delete stHelpGaurdFriendInfo::default_instance_;
  delete stHelpGaurdFriendInfo_reflection_;
  delete stRetCanHelpGuardFriend::default_instance_;
  delete stRetCanHelpGuardFriend_reflection_;
  delete stInviteFriendForHelpGuard::default_instance_;
  delete stInviteFriendForHelpGuard_reflection_;
  delete stInviteFriendForHelpGuardResult::default_instance_;
  delete stInviteFriendForHelpGuardResult_reflection_;
  delete stAskFriendHelpGuard::default_instance_;
  delete stAskFriendHelpGuard_reflection_;
  delete stReplyHelpGuard::default_instance_;
  delete stReplyHelpGuard_reflection_;
  delete stReplyHelpGuardResult::default_instance_;
  delete stReplyHelpGuardResult_reflection_;
  delete stUserAgreeHelpGuard::default_instance_;
  delete stUserAgreeHelpGuard_reflection_;
  delete stBeginGuard::default_instance_;
  delete stBeginGuard_reflection_;
  delete stBeginGuardResult::default_instance_;
  delete stBeginGuardResult_reflection_;
  delete stInterceptInfo::default_instance_;
  delete stInterceptInfo_reflection_;
  delete stReqInterceptInfo::default_instance_;
  delete stReqInterceptInfo_reflection_;
  delete stRetInterceptInfo::default_instance_;
  delete stRetInterceptInfo_reflection_;
  delete stRechargeActivityInfoItem::default_instance_;
  delete stRechargeActivityInfoItem_reflection_;
  delete stNotifyRechargeActivityInfo::default_instance_;
  delete stNotifyRechargeActivityInfo_reflection_;
  delete stLuckShopRefreshResult::default_instance_;
  delete stLuckShopRefreshResult_reflection_;
  delete stNotifyGuardFinish::default_instance_;
  delete stNotifyGuardFinish_reflection_;
  delete stNotifyFriendGuardFinish::default_instance_;
  delete stNotifyFriendGuardFinish_reflection_;
  delete stNotifyInterceptResult::default_instance_;
  delete stNotifyInterceptResult_reflection_;
  delete stReplyNotifyIntercept::default_instance_;
  delete stReplyNotifyIntercept_reflection_;
  delete stQuickFinishGuard::default_instance_;
  delete stQuickFinishGuard_reflection_;
  delete stQuickFinishGuardResult::default_instance_;
  delete stQuickFinishGuardResult_reflection_;
  delete stNotifyDelTitle::default_instance_;
  delete stNotifyDelTitle_reflection_;
  delete stBeInterceptTip::default_instance_;
  delete stBeInterceptTip_reflection_;
  delete stOnlineNotifyNewInterceptInfo::default_instance_;
  delete stOnlineNotifyNewInterceptInfo_reflection_;
  delete stReqOpenLimitFashionDrawWin::default_instance_;
  delete stReqOpenLimitFashionDrawWin_reflection_;
  delete stRetLimitFashionDrawWinInfo::default_instance_;
  delete stRetLimitFashionDrawWinInfo_reflection_;
  delete stReqDrawLimitFashion::default_instance_;
  delete stReqDrawLimitFashion_reflection_;
  delete stDrawLimitFashionResult::default_instance_;
  delete stDrawLimitFashionResult_reflection_;
  delete stExchangeItem::default_instance_;
  delete stExchangeItem_reflection_;
  delete stSynExchangeActivityiStep::default_instance_;
  delete stSynExchangeActivityiStep_reflection_;
  delete stSynExchangeActivity::default_instance_;
  delete stSynExchangeActivity_reflection_;
  delete stRetExchangeActivity::default_instance_;
  delete stRetExchangeActivity_reflection_;
  delete stReqExchangeItem::default_instance_;
  delete stReqExchangeItem_reflection_;
  delete stExchangeItemResult::default_instance_;
  delete stExchangeItemResult_reflection_;
  delete stRecycleRechargeActivity::default_instance_;
  delete stRecycleRechargeActivity_reflection_;
  delete stSendRecycleRechargeActivity::default_instance_;
  delete stSendRecycleRechargeActivity_reflection_;
  delete stReqRecycleRechargeActReward::default_instance_;
  delete stReqRecycleRechargeActReward_reflection_;
  delete stRetRecycleRechargeActReward::default_instance_;
  delete stRetRecycleRechargeActReward_reflection_;
  delete stCommonActInfoItem::default_instance_;
  delete stCommonActInfoItem_reflection_;
  delete stRefreshCommonActInfo::default_instance_;
  delete stRefreshCommonActInfo_reflection_;
  delete stReqAKeyFetchAttach::default_instance_;
  delete stReqAKeyFetchAttach_reflection_;
  delete stAKeyFetchAttachResult::default_instance_;
  delete stAKeyFetchAttachResult_reflection_;
  delete stReqGloryfashion::default_instance_;
  delete stReqGloryfashion_reflection_;
  delete stGloryfashionResult::default_instance_;
  delete stGloryfashionResult_reflection_;
  delete stDevilCallItem::default_instance_;
  delete stDevilCallItem_reflection_;
  delete stReqAllDevilCall::default_instance_;
  delete stReqAllDevilCall_reflection_;
  delete stRetAllDevilCall::default_instance_;
  delete stRetAllDevilCall_reflection_;
  delete stReqDevilCallReward::default_instance_;
  delete stReqDevilCallReward_reflection_;
  delete stRetDevilCallReward::default_instance_;
  delete stRetDevilCallReward_reflection_;
  delete stReqDevilCall::default_instance_;
  delete stReqDevilCall_reflection_;
  delete stRetDevilCall::default_instance_;
  delete stRetDevilCall_reflection_;
  delete stReqDevilCallSummary::default_instance_;
  delete stReqDevilCallSummary_reflection_;
  delete stRetDevilCallSummary::default_instance_;
  delete stRetDevilCallSummary_reflection_;
  delete stReqPayType::default_instance_;
  delete stReqPayType_reflection_;
  delete stRetPayType::default_instance_;
  delete stRetPayType_reflection_;
  delete stReqOperateActvity::default_instance_;
  delete stReqOperateActvity_reflection_;
  delete stOperateActvityItemInfo::default_instance_;
  delete stOperateActvityItemInfo_reflection_;
  delete stOperateActvityItems::default_instance_;
  delete stOperateActvityItems_reflection_;
  delete stRetOperateActvity::default_instance_;
  delete stRetOperateActvity_reflection_;
  delete stReqOperateActvityReward::default_instance_;
  delete stReqOperateActvityReward_reflection_;
  delete stRetOperateActvityReward::default_instance_;
  delete stRetOperateActvityReward_reflection_;
  delete stReqIllusionSprite::default_instance_;
  delete stReqIllusionSprite_reflection_;
  delete stIllusionSpriteSkillItem::default_instance_;
  delete stIllusionSpriteSkillItem_reflection_;
  delete stRetIllusionSprite::default_instance_;
  delete stRetIllusionSprite_reflection_;
  delete illusionSpriteEatItem::default_instance_;
  delete illusionSpriteEatItem_reflection_;
  delete stReqIllusionSpriteEat::default_instance_;
  delete stReqIllusionSpriteEat_reflection_;
  delete stRetIllusionSpriteEat::default_instance_;
  delete stRetIllusionSpriteEat_reflection_;
  delete stReqIllusionSpriteSkillUp::default_instance_;
  delete stReqIllusionSpriteSkillUp_reflection_;
  delete stRetIllusionSpriteSkillUp::default_instance_;
  delete stRetIllusionSpriteSkillUp_reflection_;
  delete stRepOpenDiscoverWindow::default_instance_;
  delete stRepOpenDiscoverWindow_reflection_;
  delete stOpenDiscoverWindowResult::default_instance_;
  delete stOpenDiscoverWindowResult_reflection_;
  delete stReqPlayDice::default_instance_;
  delete stReqPlayDice_reflection_;
  delete stPlayDiceResult::default_instance_;
  delete stPlayDiceResult_reflection_;
  delete stReqGetOrGiveUpTask::default_instance_;
  delete stReqGetOrGiveUpTask_reflection_;
  delete stGetTaskResult::default_instance_;
  delete stGetTaskResult_reflection_;
  delete stGiveUpTaskResult::default_instance_;
  delete stGiveUpTaskResult_reflection_;
  delete stReqRefreshNum::default_instance_;
  delete stReqRefreshNum_reflection_;
  delete stRefreshNumResult::default_instance_;
  delete stRefreshNumResult_reflection_;
  delete stReqGetIntegralReward::default_instance_;
  delete stReqGetIntegralReward_reflection_;
  delete stGetIntegralRewardResult::default_instance_;
  delete stGetIntegralRewardResult_reflection_;
  delete stReqGiveReward::default_instance_;
  delete stReqGiveReward_reflection_;
  delete stGiveRewardResult::default_instance_;
  delete stGiveRewardResult_reflection_;
  delete stReqLuckyDraw::default_instance_;
  delete stReqLuckyDraw_reflection_;
  delete stLuckyDrawPointRewardInfo::default_instance_;
  delete stLuckyDrawPointRewardInfo_reflection_;
  delete stLuckyDrawRewardInfo::default_instance_;
  delete stLuckyDrawRewardInfo_reflection_;
  delete stLuckyDrawUserInfo::default_instance_;
  delete stLuckyDrawUserInfo_reflection_;
  delete stRetLuckyDraw::default_instance_;
  delete stRetLuckyDraw_reflection_;
  delete stReqLuckyDrawReward::default_instance_;
  delete stReqLuckyDrawReward_reflection_;
  delete stRetLuckyDrawReward::default_instance_;
  delete stRetLuckyDrawReward_reflection_;
  delete stReqLuckyDrawPointReward::default_instance_;
  delete stReqLuckyDrawPointReward_reflection_;
  delete stRetLuckyDrawPointReward::default_instance_;
  delete stRetLuckyDrawPointReward_reflection_;
  delete stReqRedPointRuls::default_instance_;
  delete stReqRedPointRuls_reflection_;
  delete stRedPointRulsResult::default_instance_;
  delete stRedPointRulsResult_reflection_;
  delete stReqInviteFriend::default_instance_;
  delete stReqInviteFriend_reflection_;
  delete InviteFriendReward::default_instance_;
  delete InviteFriendReward_reflection_;
  delete stRetInviteFriend::default_instance_;
  delete stRetInviteFriend_reflection_;
  delete stReqDrawInviteFriend::default_instance_;
  delete stReqDrawInviteFriend_reflection_;
  delete stRetDrawInviteFriend::default_instance_;
  delete stRetDrawInviteFriend_reflection_;
  delete stReqUseInviteCode::default_instance_;
  delete stReqUseInviteCode_reflection_;
  delete stRetUseInviteCode::default_instance_;
  delete stRetUseInviteCode_reflection_;
  delete stReqShareInvite::default_instance_;
  delete stReqShareInvite_reflection_;
  delete stRetShareInvite::default_instance_;
  delete stRetShareInvite_reflection_;
  delete stReqDailyShareInvite::default_instance_;
  delete stReqDailyShareInvite_reflection_;
  delete stRetDailyShareInvite::default_instance_;
  delete stRetDailyShareInvite_reflection_;
  delete stReqDrawDailyShareReward::default_instance_;
  delete stReqDrawDailyShareReward_reflection_;
  delete stRetDrawDailyShareReward::default_instance_;
  delete stRetDrawDailyShareReward_reflection_;
  delete stReqDrawOnceShareReward::default_instance_;
  delete stReqDrawOnceShareReward_reflection_;
  delete stRetDrawOnceShareReward::default_instance_;
  delete stRetDrawOnceShareReward_reflection_;
  delete stNotifyInterceptServerResult::default_instance_;
  delete stNotifyInterceptServerResult_reflection_;
  delete stReqReceiveState::default_instance_;
  delete stReqReceiveState_reflection_;
  delete stReceiveStateResult::default_instance_;
  delete stReceiveStateResult_reflection_;
  delete stReqReceiveReward::default_instance_;
  delete stReqReceiveReward_reflection_;
  delete stReceiveRewardResult::default_instance_;
  delete stReceiveRewardResult_reflection_;
  delete stAcitivityLimitPetItem::default_instance_;
  delete stAcitivityLimitPetItem_reflection_;
  delete stSendAllAcitivityLimitPet::default_instance_;
  delete stSendAllAcitivityLimitPet_reflection_;
  delete stSendLateWalfareActivity::default_instance_;
  delete stSendLateWalfareActivity_reflection_;
  delete stReqDrawLateWalfare::default_instance_;
  delete stReqDrawLateWalfare_reflection_;
  delete stRetDrawLateWalfare::default_instance_;
  delete stRetDrawLateWalfare_reflection_;
  delete stResGetBackItem::default_instance_;
  delete stResGetBackItem_reflection_;
  delete stSendAllResGetBack::default_instance_;
  delete stSendAllResGetBack_reflection_;
  delete stReqDrawResGetBack::default_instance_;
  delete stReqDrawResGetBack_reflection_;
  delete stRetDrawResGetBack::default_instance_;
  delete stRetDrawResGetBack_reflection_;
  delete stReqDrawAllResGetBack::default_instance_;
  delete stReqDrawAllResGetBack_reflection_;
  delete stRetDrawAllResGetBack::default_instance_;
  delete stRetDrawAllResGetBack_reflection_;
  delete stReqOpenMonsterWindow::default_instance_;
  delete stReqOpenMonsterWindow_reflection_;
  delete stOpenMonsterWindowResult::default_instance_;
  delete stOpenMonsterWindowResult_reflection_;
  delete stReqAttackMonster::default_instance_;
  delete stReqAttackMonster_reflection_;
  delete stAttackMonsterResult::default_instance_;
  delete stAttackMonsterResult_reflection_;
  delete stReqBuyAttackTime::default_instance_;
  delete stReqBuyAttackTime_reflection_;
  delete stBuyAttackTimeResult::default_instance_;
  delete stBuyAttackTimeResult_reflection_;
  delete stReqAKeyAttackMonster::default_instance_;
  delete stReqAKeyAttackMonster_reflection_;
  delete stAKeyAttackMonsterResult::default_instance_;
  delete stAKeyAttackMonsterResult_reflection_;
  delete stSynTipItem::default_instance_;
  delete stSynTipItem_reflection_;
  delete stObtainItemTip::default_instance_;
  delete stObtainItemTip_reflection_;
  delete stUserOnline::default_instance_;
  delete stUserOnline_reflection_;
  delete stConsumeItemInfo::default_instance_;
  delete stConsumeItemInfo_reflection_;
  delete stReqMountLevelUp::default_instance_;
  delete stReqMountLevelUp_reflection_;
  delete stMountLevelUpResult::default_instance_;
  delete stMountLevelUpResult_reflection_;
  delete stReqButtleMount::default_instance_;
  delete stReqButtleMount_reflection_;
  delete stButtleMountResult::default_instance_;
  delete stButtleMountResult_reflection_;
  delete stReqMountFollow::default_instance_;
  delete stReqMountFollow_reflection_;
  delete stMountFollowResult::default_instance_;
  delete stMountFollowResult_reflection_;
  delete stReqMountUnreal::default_instance_;
  delete stReqMountUnreal_reflection_;
  delete stMountUnrealResult::default_instance_;
  delete stMountUnrealResult_reflection_;
  delete stReqOpenMountGrowWindow::default_instance_;
  delete stReqOpenMountGrowWindow_reflection_;
  delete stOpenMountGrowWindowResult::default_instance_;
  delete stOpenMountGrowWindowResult_reflection_;
  delete stRefreshBattle::default_instance_;
  delete stRefreshBattle_reflection_;
  delete stLevelWflfareInfo::default_instance_;
  delete stLevelWflfareInfo_reflection_;
  delete stHasGotRewardWflfareInfo::default_instance_;
  delete stHasGotRewardWflfareInfo_reflection_;
  delete stReqReceiveWflfare::default_instance_;
  delete stReqReceiveWflfare_reflection_;
  delete stReceiveWflfareResult::default_instance_;
  delete stReceiveWflfareResult_reflection_;
  delete stReqPaySign::default_instance_;
  delete stReqPaySign_reflection_;
  delete stRetPaySign::default_instance_;
  delete stRetPaySign_reflection_;
  delete stReqServerPay::default_instance_;
  delete stReqServerPay_reflection_;
  delete stRetServerPay::default_instance_;
  delete stRetServerPay_reflection_;
  delete stReqSummonReward::default_instance_;
  delete stReqSummonReward_reflection_;
  delete stSummonRewardResult::default_instance_;
  delete stSummonRewardResult_reflection_;
  delete stReqSummonData::default_instance_;
  delete stReqSummonData_reflection_;
  delete stSummonDataResult::default_instance_;
  delete stSummonDataResult_reflection_;
  delete stBuySummonPlanResult::default_instance_;
  delete stBuySummonPlanResult_reflection_;
  delete stReqRechargeCheck::default_instance_;
  delete stReqRechargeCheck_reflection_;
  delete stRechargeCheckResult::default_instance_;
  delete stRechargeCheckResult_reflection_;
}

void protobuf_AddDesc_Misc_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_ModID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nMisc.proto\022\tMiscProto\032\013ModID.proto\"\266\001\n"
    "\021stSynMainSnalInfo\022\n\n\002id\030\001 \001(\r\022\022\n\nsender"
    "Name\030\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\020\n\010sendTime\030\004 "
    "\001(\r\022\016\n\006isRead\030\005 \001(\010\022&\n\010mailType\030\006 \001(\0162\024."
    "MiscProto.eMailType\022\025\n\risFetchAttach\030\007 \001"
    "(\010\022\021\n\thasAttach\030\010 \001(\010\".\n\017stSynMailAttach"
    "\022\016\n\006itemID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\343\001\n\023stSynD"
    "etailMailInfo\022\n\n\002id\030\001 \001(\r\022\022\n\nsenderName\030"
    "\002 \001(\t\022\r\n\005title\030\003 \001(\t\022\017\n\007content\030\004 \001(\t\022\020\n"
    "\010sendTime\030\005 \001(\r\022\016\n\006isRead\030\006 \001(\010\022&\n\010mailT"
    "ype\030\007 \001(\0162\024.MiscProto.eMailType\022\025\n\risFet"
    "chAttach\030\010 \001(\010\022+\n\007attachs\030\t \003(\0132\032.MiscPr"
    "oto.stSynMailAttach\"q\n\014stSynAllMail\022/\n\tm"
    "ailInfos\030\001 \003(\0132\034.MiscProto.stSynMainSnal"
    "Info\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\001\"M\n\rstReqReadMail\022\n\n\002id\030\001 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\002\"s\n\rstRetMailInfo\0220\n\010mailIn"
    "fo\030\001 \001(\0132\036.MiscProto.stSynDetailMailInfo"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\003\"P\n\020stReqFetchAttach\022\n\n\002id\030\001 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\004\"\253\001\n\023stFetchAttachResult\0225\n\006"
    "result\030\001 \001(\0162%.MiscProto.stFetchAttachRe"
    "sult.Result\"+\n\006Result\022\013\n\007SUCCESS\020\001\022\024\n\020AT"
    "TACH_NOT_EXIST\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\005\"q\n\rstReceiveM"
    "ail\022.\n\010mailInfo\030\001 \001(\0132\034.MiscProto.stSynM"
    "ainSnalInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\006\"Q\n\017stReqRewardInfo"
    "\022\014\n\004flag\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020\007\"\372\001\n\017stRetReward"
    "Info\022\030\n\020getSignRewardNum\030\001 \001(\r\022\030\n\020hasGet"
    "SignReward\030\002 \001(\010\022\033\n\023getOpenSvrRewardNum\030"
    "\003 \001(\r\022\033\n\023hasGetOpenSvrReward\030\004 \001(\010\022\026\n\016ha"
    "sGetRewardLv\030\005 \003(\r\022\023\n\013onlineTimes\030\006 \001(\r\022"
    "\032\n\022hasGetOnlineReward\030\007 \003(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\010\"P\n"
    "\017stReqSignReward\022\013\n\003day\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\t\""
    "\310\001\n\025stGetSignRewardResult\0227\n\006result\030\001 \001("
    "\0162\'.MiscProto.stGetSignRewardResult.Resu"
    "lt\022\013\n\003day\030\002 \001(\r\"7\n\006Result\022\013\n\007SUCCESS\020\001\022\022"
    "\n\016HAS_GET_REWARD\020\002\022\014\n\010BAG_FULL\020\003\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020\n\"S\n\022stReqOpenSvrReward\022\013\n\003day\030\001 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\013\"\323\001\n\030stGetOpenSvrRewardResult\022;\n\006"
    "result\030\001 \001(\0162+.MiscProto.stGetOpenSvrRew"
    "ardResult.eResult\022\013\n\003day\030\002 \001(\r\";\n\007eResul"
    "t\022\014\n\010eSUCCESS\020\001\022\023\n\017eHAS_GET_REWARD\020\002\022\r\n\t"
    "eBAG_FULL\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\014\"M\n\rstReqLvReward\022\n"
    "\n\002lv\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020\r\"\376\001\n\020stLvRewardResul"
    "t\0223\n\006result\030\001 \001(\0162#.MiscProto.stLvReward"
    "Result.eResult\022\023\n\013getRewardLv\030\002 \001(\r\"n\n\007e"
    "Result\022\014\n\010eSUCCESS\020\001\022\022\n\016eLEVEL_TOO_LOW\020\002"
    "\022\025\n\021eHAS_NO_REWARD_LV\020\003\022\020\n\014eINNER_ERROR\020"
    "\004\022\030\n\024eBAG_SLOT_NOT_ENOUGH\020\005\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\016\"Q\n"
    "\021stReqOnlineReward\022\n\n\002id\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\017"
    "\"\214\002\n\027stGetOnlineRewardResult\022:\n\006result\030\001"
    " \001(\0162*.MiscProto.stGetOnlineRewardResult"
    ".eResult\022\n\n\002id\030\002 \001(\r\022\022\n\nonlineTime\030\003 \001(\r"
    "\"c\n\007eResult\022\014\n\010eSUCCESS\020\001\022\024\n\020eHAS_REMAIN"
    "_TIME\020\002\022\r\n\teBAG_FULL\020\003\022\023\n\017eHAS_GOT_REWAR"
    "D\020\004\022\020\n\014eINNER_ERROR\020\005\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\020\"Q\n\rstBuy"
    "StarInfo\022\016\n\006buyNum\030\001 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\021\"M\n\014st"
    "ReqBuyStar\022\013\n\003num\030\001 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\022\"\306\001\n\017st"
    "BuyStarResult\0221\n\006result\030\001 \001(\0162!.MiscProt"
    "o.stBuyStarResult.Result\022\021\n\thasBuyNum\030\002 "
    "\001(\r\";\n\006Result\022\013\n\007SUCCESS\020\001\022\023\n\017ITEM_NOT_E"
    "NOUGH\020\002\022\017\n\013INNER_ERROR\020\003\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\023\"S\n\021Re"
    "qOpenDrawWindow\022\014\n\004flag\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\024\""
    "\305\002\n\020stDrawWindowInfo\022\032\n\022goldFreeRemainTi"
    "me\030\001 \001(\r\022\031\n\021goldFreeRemainNum\030\002 \001(\r\022\035\n\025d"
    "iamondFreeRemainTime\030\003 \001(\r\022\036\n\026drawHeroFr"
    "eeRemainTime\030\004 \001(\r\022\026\n\016diamondDrawNum\030\005 \001"
    "(\r\022\023\n\013heroDrawNum\030\006 \001(\r\022\023\n\013hasGoldDraw\030\007"
    " \001(\010\022\025\n\rhasGold10Draw\030\010 \001(\010\022\026\n\016hasDiamon"
    "dDraw\030\t \001(\010\022\030\n\020hasDiamond10Draw\030\n \001(\010\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\025\"o\n\tstReqDraw\022\"\n\004type\030\001 \001(\0162\024.Mis"
    "cProto.eDrawType\022\014\n\004flag\030\002 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020\026"
    "\",\n\rstSynDrawItem\022\016\n\006itemID\030\001 \001(\r\022\013\n\003num"
    "\030\002 \001(\r\"\250\002\n\014stDrawResult\022.\n\006result\030\001 \001(\0162"
    "\036.MiscProto.stDrawResult.Result\022\'\n\005items"
    "\030\002 \003(\0132\030.MiscProto.stSynDrawItem\022\"\n\004type"
    "\030\003 \001(\0162\024.MiscProto.eDrawType\022\026\n\016diamondD"
    "rawNum\030\004 \001(\r\"Q\n\006Result\022\013\n\007SUCCESS\020\001\022\024\n\020M"
    "ONEY_NOT_ENOUGH\020\002\022\014\n\010BAG_FULL\020\003\022\026\n\022DIAMO"
    "ND_NOT_ENOUGH\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020\027\"g\n\014stSynMyTitl"
    "e\022\020\n\010allTitle\030\001 \003(\r\022\023\n\013activeTitle\030\002 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\030\"U\n\020stActiveOneTitle\022\017\n\007titleI"
    "D\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\031\"\275\001\n\023stActiveTitleResul"
    "t\0226\n\006result\030\001 \001(\0162&.MiscProto.stActiveTi"
    "tleResult.eResult\022\017\n\007titleID\030\002 \001(\r\"+\n\007eR"
    "esult\022\013\n\007SUCCESS\020\001\022\023\n\017TITLE_NOT_EXIST\020\002\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\032\"U\n\020stObtainOneTitle\022\017\n\007titleID"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\033\"S\n\017stBuyInvestPlan\022\016\n\006c"
    "harID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\034\"\347\001\n\025stBuyInvestPla"
    "nResult\0228\n\006result\030\001 \001(\0162(.MiscProto.stBu"
    "yInvestPlanResult.eResult\022\r\n\005index\030\002 \001(\t"
    "\"S\n\007eResult\022\014\n\010eSUCCESS\020\001\022\027\n\023eDIAMOND_NO"
    "T_ENOGUH\020\002\022\023\n\017eVIP_LV_TOO_LOW\020\003\022\014\n\010eHAS_"
    "BUY\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\035\"U\n\025stReqInvestPlanReward"
    "\022\n\n\002lv\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\036\"\360\001\n\030stInvestPlanR"
    "ewardResult\022;\n\006result\030\001 \001(\0162+.MiscProto."
    "stInvestPlanRewardResult.eResult\022\n\n\002lv\030\002"
    " \001(\r\022\r\n\005index\030\003 \001(\t\"J\n\007eResult\022\014\n\010eSUCCE"
    "SS\020\001\022\023\n\017eHAS_GET_REWARD\020\002\022\034\n\030eHAS_NOT_BU"
    "Y_INVEST_PLAN\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020\037\"R\n\016stReqEatDin"
    "ner\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020 \"\341\001\n\021stEatD"
    "innerResult\0224\n\006result\030\001 \001(\0162$.MiscProto."
    "stEatDinnerResult.eResult\022\023\n\013hasEatedNum"
    "\030\002 \001(\r\"O\n\007eResult\022\014\n\010eSUCCESS\020\001\022\017\n\013eTIME"
    "_LIMIT\020\002\022\014\n\010eHAS_EAT\020\003\022\027\n\023eEAT_DINNER_NU"
    "M_OUT\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020!\"\220\001\n\021stSynActivityData\022"
    "\030\n\020hasBuyInvestment\030\001 \001(\010\022\031\n\021investGetRe"
    "wardLv\030\002 \003(\r\022\024\n\014eatDinnerNum\030\003 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\"\"\\\n\030stReqOpenCaptureTreasure\022\016\n\006char"
    "ID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020#\";\n\030stSynCaptureTreasu"
    "reInfo\022\017\n\007resType\030\001 \001(\r\022\016\n\006resNum\030\002 \001(\r\""
    "\223\001\n\024stRetCaptureTreasure\0225\n\010tresures\030\001 \003"
    "(\0132#.MiscProto.stSynCaptureTreasureInfo\022"
    "\022\n\nremainTime\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020$\"]\n\024stReqCo"
    "mbineTreasure\022\023\n\013combineType\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020%\"\333\001\n\027stCombineTreasureResult\022:\n\006resu"
    "lt\030\001 \001(\0162*.MiscProto.stCombineTreasureRe"
    "sult.eResult\"R\n\007eResult\022\014\n\010eSUCCESS\020\001\022\030\n"
    "\024eTREASURE_NOT_ENOUGH\020\002\022\r\n\teBAG_FULL\020\003\022\020"
    "\n\014eINNER_ERROR\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\010\"\027\n\nProtoFunID\022\t\n\005FunID\020&\"\334\001\n\024stBuyPeac"
    "eModuleTime\0223\n\004type\030\001 \001(\0162%.MiscProto.st"
    "BuyPeaceModuleTime.eType\022\014\n\004hour\030\002 \001(\r\"O"
    "\n\005eType\022\020\n\014e1_HOUR_ITEM\020\001\022\020\n\014e3_HOUR_ITE"
    "M\020\002\022\021\n\re12_HOUR_ITEM\020\003\022\017\n\013e10_DIAMOND\020\004\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\'\"\345\001\n\032stBuyPeaceModuleTimeResult"
    "\022=\n\006result\030\001 \001(\0162-.MiscProto.stBuyPeaceM"
    "oduleTimeResult.eResult\022\022\n\nremainTime\030\002 "
    "\001(\r\"B\n\007eResult\022\014\n\010eSUCCESS\020\001\022\020\n\014eHAS_NO_"
    "ITEM\020\002\022\027\n\023eDIAMOND_NOT_ENOUGH\020\003\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "(\"s\n\031stCaptureTreasureUserInfo\022\016\n\006charID"
    "\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003job\030\003 \001(\r\022\013\n\003sex"
    "\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\017\n\007photoID\030\006 \001(\r\"i"
    "\n\026stReqChallengeUserList\022\016\n\006charID\030\001 \001(\r"
    "\022\r\n\005resID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020)\"\202\001\n\026stRetChall"
    "engeUserList\0226\n\010userInfo\030\001 \003(\0132$.MiscPro"
    "to.stCaptureTreasureUserInfo\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020*\"\244"
    "\001\n\025stCaptureUserTreasure\022\016\n\006charID\030\001 \001(\r"
    "\022\021\n\tcombineID\030\002 \001(\r\022\017\n\007resType\030\003 \001(\r\022%\n\004"
    "type\030\004 \001(\0162\027.MiscProto.eCaptureType\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020+\"P\n\022stSynCaptureReward\022\016\n\006itemID\030\001 "
    "\001(\r\022\013\n\003num\030\002 \001(\r\022\020\n\010goldCoin\030\003 \001(\r\022\013\n\003ex"
    "p\030\004 \001(\r\"\353\002\n\033stCaptureUserTreasureResult\022"
    ">\n\006result\030\001 \001(\0162..MiscProto.stCaptureUse"
    "rTreasureResult.eResult\022\023\n\013obtainPiece\030\002"
    " \001(\010\022.\n\007rewards\030\003 \003(\0132\035.MiscProto.stSynC"
    "aptureReward\022%\n\004type\030\004 \001(\0162\027.MiscProto.e"
    "CaptureType\"n\n\007eResult\022\014\n\010eSUCCESS\020\001\022\t\n\005"
    "eFAIL\020\002\022\020\n\014eINNER_ERROR\020\003\022\022\n\016eSP_NOT_ENO"
    "UGH\020\004\022\r\n\teBAG_FULL\020\005\022\025\n\021eNOT_IN_OPEN_TIM"
    "E\020\006\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020,\"b\n\020stSynTreasureNum\022\017\n\007res"
    "Type\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020-\"W\n\023stC"
    "ancelActiveTitle\022\016\n\006charID\030\001 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020.\"^\n\031stCancelActiveTitleResult\022\017\n\007succe"
    "ss\030\001 \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020/\"2\n\017stSynSpriteInfo\022\020\n"
    "\010spriteID\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\"\204\001\n\016stSyn"
    "AllSprite\022(\n\004data\030\001 \003(\0132\032.MiscProto.stSy"
    "nSpriteInfo\022\026\n\016followSpriteID\030\002 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\0200\"Y\n\023stReqUnlockedSprite\022\020\n\010spriteID"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProto"
    "FunID\022\t\n\005FunID\0201\"\354\001\n\026stUnlockedSpriteRes"
    "ult\0229\n\006result\030\001 \001(\0162).MiscProto.stUnlock"
    "edSpriteResult.eResult\022\020\n\010spriteID\030\002 \001(\r"
    "\"S\n\007eResult\022\023\n\017eLevel_Not_Meet\020\001\022\023\n\017eVip"
    "Lv_Not_Meet\020\002\022\020\n\014eInner_Error\020!\022\014\n\010eSucc"
    "ess\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\0202\"k\n\013stAddSprite\022*\n\006sprite"
    "\030\001 \001(\0132\032.MiscProto.stSynSpriteInfo\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\0203\"X\n\022stReqLevelupSprite\022\020\n\010spriteID\030\001"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\0204\"\303\002\n\025stLevelupSpriteResult"
    "\022\020\n\010spriteID\030\001 \001(\r\0228\n\006result\030\002 \001(\0162(.Mis"
    "cProto.stLevelupSpriteResult.eResult\022\r\n\005"
    "curLv\030\003 \001(\r\"\234\001\n\007eResult\022\014\n\010eSuccess\020\001\022\020\n"
    "\014eInner_Error\020\002\022\033\n\027eConsume_Res_Not_Enou"
    "gh\020\003\022\025\n\021eRole_Level_Limit\020\004\022\025\n\021eHas_Not_"
    "Unlocked\020\005\022\017\n\013eLevel_Full\020\006\022\025\n\021eSprite_N"
    "ot_Exist\020\007\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\0205\"Z\n\024stSpriteFollowMa"
    "ster\022\020\n\010spriteID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\0206\"\302\001\n\032stS"
    "priteFollowMasterResult\022=\n\006result\030\001 \001(\0162"
    "-.MiscProto.stSpriteFollowMasterResult.e"
    "Result\022\020\n\010spriteID\030\002 \001(\r\"!\n\007eResult\022\013\n\007e"
    "Sucess\020\001\022\t\n\005eFail\020\002\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\0207\"X\n\024stReqAv"
    "aibleActivity\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\0208\""
    "6\n\027stSynActivityStepReward\022\016\n\006itemID\030\001 \001"
    "(\r\022\013\n\003num\030\002 \001(\r\"V\n\037stSynActivityStepOpti"
    "onalReward\0223\n\007rewards\030\001 \003(\0132\".MiscProto."
    "stSynActivityStepReward\"x\n\025stSynActivity"
    "StepInfo\022\016\n\006stepID\030\001 \001(\r\022\020\n\010stepDesc\030\002 \001"
    "(\t\022=\n\toptionals\030\003 \003(\0132*.MiscProto.stSynA"
    "ctivityStepOptionalReward\"\245\001\n\021stSynActiv"
    "ityInfo\022\n\n\002id\030\001 \001(\r\022\014\n\004type\030\002 \001(\r\022\r\n\005tit"
    "le\030\003 \001(\t\022\014\n\004desc\030\004 \001(\t\022\016\n\006curVal\030\005 \001(\r\022\022"
    "\n\nfinishStep\030\006 \003(\r\0225\n\013avaibleStep\030\007 \003(\0132"
    " .MiscProto.stSynActivityStepInfo\"z\n\024stR"
    "etAvaibleActivity\0220\n\nactivities\030\001 \003(\0132\034."
    "MiscProto.stSynActivityInfo\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\0209\"v\n"
    "\024stReqAcitivityReward\022\n\n\002id\030\001 \001(\r\022\016\n\006ste"
    "pID\030\002 \001(\r\022\020\n\010selIndex\030\003 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020:\"\211\002"
    "\n\026stActivityRewardResult\022\n\n\002id\030\001 \001(\r\022\016\n\006"
    "stepID\030\002 \001(\r\0229\n\006result\030\003 \001(\0162).MiscProto"
    ".stActivityRewardResult.eResult\"f\n\007eResu"
    "lt\022\014\n\010eSuccess\020\001\022\023\n\017eHas_Got_Reward\020\002\022\022\n"
    "\016eCond_Not_Meet\020\003\022\025\n\021eSelect_Not_Exist\020\004"
    "\022\r\n\teBag_Full\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020;\"^\n\030stReqWorldB"
    "ossDamageRank\022\020\n\010fromRank\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "<\"t\n\031stWorldBossDamageSortItem\022\016\n\006charID"
    "\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003job\030\003 \001(\r\022\013\n\003sex"
    "\030\004 \001(\r\022\016\n\006damage\030\005 \001(\r\022\017\n\007photoID\030\006 \001(\r\""
    "\246\001\n\030stRetWorldBossDamageRank\0226\n\010sortItem"
    "\030\001 \003(\0132$.MiscProto.stWorldBossDamageSort"
    "Item\022\020\n\010fromRank\030\002 \001(\r\022\016\n\006myRank\030\003 \001(\r\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020=\"Y\n\025stReqOpenWorldBossWin\022\016\n\006cha"
    "rID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020>\"\351\001\n\025stRetOpenWorldBo"
    "ssWin\022\030\n\020reliveRemainTime\030\001 \001(\r\022\016\n\006buyNu"
    "m\030\002 \001(\r\022\021\n\tbeginTime\030\003 \001(\r\022\017\n\007endTime\030\004 "
    "\001(\r\022\016\n\006bossID\030\005 \001(\r\022\n\n\002hp\030\006 \001(\r\022\016\n\006stepI"
    "D\030\007 \001(\r\022\020\n\010tomorrow\030\010 \001(\010\022\022\n\nkillerName\030"
    "\t \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\?\"W\n\023stReqBossWorldMatch\022\016"
    "\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020@\"\370\001\n\023stRetBossWo"
    "rldMatch\0226\n\006result\030\001 \001(\0162&.MiscProto.stR"
    "etBossWorldMatch.eResult\"w\n\007eResult\022\014\n\010e"
    "Success\020\001\022\t\n\005eWait\020\002\022\r\n\teNot_Open\020\003\022\021\n\re"
    "Activity_End\020\004\022\022\n\016eLevel_Too_Low\020\005\022\r\n\teB"
    "oss_Die\020\006\022\016\n\neCool_Down\020\007\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020A\"a\n\035s"
    "tReqClearWorldBossActivityCD\022\016\n\006charID\030\001"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020B\"\313\001\n stClearWorldBossActiv"
    "ityCDResult\022C\n\006result\030\001 \001(\01623.MiscProto."
    "stClearWorldBossActivityCDResult.eResult"
    "\"0\n\007eResult\022\014\n\010eSuccess\020\001\022\027\n\023eDiamond_No"
    "t_Enough\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020C\"_\n\033stReqRaiseDamage"
    "InWorldBoss\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020D\"\326\001"
    "\n\036stRaiseDamageInWorldBossResult\022A\n\006resu"
    "lt\030\001 \001(\01621.MiscProto.stRaiseDamageInWorl"
    "dBossResult.eResult\"\?\n\007eResult\022\014\n\010eSucce"
    "ss\020\001\022\027\n\023eDaimond_Not_Enough\020\002\022\r\n\teTime_O"
    "ut\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020E\"Z\n\026stCancelWorldBossMatch"
    "\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\010\"\027\n\nProtoFunID\022\t\n\005FunID\020F\"\265\001\n\034stCancelW"
    "orldBossMatchResult\022\?\n\006result\030\001 \001(\0162/.Mi"
    "scProto.stCancelWorldBossMatchResult.eRe"
    "sult\"\"\n\007eResult\022\014\n\010eSuccess\020\001\022\t\n\005eFail\020\002"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020G\"[\n\027stQueryDrawHeroActivity\022\016\n"
    "\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020H\"\253\001\n\031stRetDrawHer"
    "oActivityInfo\022\016\n\006heroID\030\001 \001(\r\022\021\n\tbeginTi"
    "me\030\002 \001(\r\022\017\n\007endTime\030\003 \001(\r\022\021\n\trewardIDs\030\004"
    " \003(\r\022\025\n\rgotRankReward\030\005 \001(\010\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020I\"X\n"
    "\030stReqDrawHeroScoreReward\022\n\n\002id\030\001 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020J\"\356\001\n\030stDrawHeroScoreRewardRet\022;\n\006"
    "result\030\001 \001(\0162+.MiscProto.stDrawHeroScore"
    "RewardRet.eResult\"c\n\007eResult\022\014\n\010eSuccess"
    "\020\001\022\025\n\021eScore_Not_Enough\020\002\022\023\n\017eHas_Got_Re"
    "ward\020\003\022\020\n\014eInner_Error\020\004\022\014\n\010eBagFull\020\005\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020K\"[\n\027stReqDrawHeroRankReward\022\016\n\006c"
    "harID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020L\"\326\001\n\024stDrawHeroRank"
    "Reward\0227\n\006result\030\001 \001(\0162\'.MiscProto.stDra"
    "wHeroRankReward.eResult\"S\n\007eResult\022\014\n\010eS"
    "uccess\020\001\022\023\n\017eHas_No_Rewards\020\002\022\023\n\017eHas_Go"
    "t_Reward\020\003\022\020\n\014eInner_Error\020\004\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020M\"Y"
    "\n\025stReqCompensationList\022\016\n\006charID\030\001 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020N\"1\n\022stCompensationItem\022\016\n\006itemI"
    "D\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\\\n\022stCompensationIn"
    "fo\022\n\n\002id\030\001 \001(\r\022\014\n\004desc\030\002 \001(\t\022,\n\005items\030\003 "
    "\003(\0132\035.MiscProto.stCompensationItem\"v\n\025st"
    "RetCompensationList\022+\n\004info\030\001 \003(\0132\035.Misc"
    "Proto.stCompensationInfo\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020O\"T\n\024st"
    "ReqGotCompensation\022\n\n\002id\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020P"
    "\"\256\001\n\027stGotCompensationResult\022:\n\006result\030\001"
    " \001(\0162*.MiscProto.stGotCompensationResult"
    ".eResult\"%\n\007eResult\022\014\n\010eSuccess\020\001\022\014\n\010eHa"
    "s_Got\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020Q\"V\n\025stReq7DayActivityIn"
    "fo\022\013\n\003day\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020R\"P\n\017stSynSDGoal"
    "Info\022\n\n\002id\030\001 \001(\r\022\014\n\004cond\030\002 \001(\r\022\r\n\005value\030"
    "\003 \001(\r\022\024\n\014hasGotReward\030\004 \001(\010\"\227\002\n\025stRet7Da"
    "yActivityInfo\022\013\n\003day\030\001 \001(\r\022-\n\tloginGoal\030"
    "\002 \003(\0132\032.MiscProto.stSynSDGoalInfo\022.\n\ngif"
    "BagGoal\030\003 \003(\0132\032.MiscProto.stSynSDGoalInf"
    "o\022/\n\013module1Goal\030\004 \003(\0132\032.MiscProto.stSyn"
    "SDGoalInfo\022/\n\013module2Goal\030\005 \003(\0132\032.MiscPr"
    "oto.stSynSDGoalInfo\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020S\"r\n\023stReqSe"
    "venDayReward\022\013\n\003day\030\001 \001(\r\022\020\n\010goalType\030\002 "
    "\001(\r\022\n\n\002id\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020T\"\246\002\n\023stSevenDay"
    "RewardRet\0226\n\006result\030\001 \001(\0162&.MiscProto.st"
    "SevenDayRewardRet.eResult\022\020\n\010goalType\030\002 "
    "\001(\r\022\n\n\002id\030\003 \001(\r\022\013\n\003day\030\004 \001(\r\"z\n\007eResult\022"
    "\014\n\010eSuccess\020\001\022\022\n\016eCond_Not_Meet\020\002\022\023\n\017eHa"
    "s_Got_Reward\020\003\022\020\n\014eInner_Error\020\004\022\r\n\teBag"
    "_Full\020\005\022\027\n\023eNot_Enough_Diamond\020\006\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020U\"j\n\026stSevenDayHasRewardTip\022\013\n\003day\030\001 \001("
    "\r\022\021\n\thasReward\030\002 \001(\010\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020V\"\177\n\rstAppS"
    "toreCfg\022\026\n\016openAppVersion\030\001 \001(\010\022\021\n\tisSan"
    "dbox\030\002 \001(\010\022\021\n\tdirectBuy\030\003 \001(\010\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020W\""
    "\265\001\n\017stOpenWindowTip\0222\n\006action\030\001 \001(\0162\".Mi"
    "scProto.stOpenWindowTip.eAction\022\017\n\007conte"
    "nt\030\002 \001(\t\"+\n\007eAction\022 \n\034eNotify_Download_"
    "New_Version\020\001\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020X\"]\n\031stReqRecharge"
    "ActivityList\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020Y\"T"
    "\n\031stSynRechargeActivityInfo\022\n\n\002id\030\001 \001(\r\022"
    "\023\n\013rechargeNum\030\002 \001(\r\022\026\n\016gotRewardSteps\030\003"
    " \003(\r\"\202\001\n\031stRetRechargeActivityList\0223\n\005in"
    "fos\030\001 \003(\0132$.MiscProto.stSynRechargeActiv"
    "ityInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020Z\"s\n\033stReqRechargeActivt"
    "iyReward\022\022\n\nactivityID\030\001 \001(\r\022\016\n\006stepID\030\002"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020[\"\225\002\n\033stRetRechargeActivity"
    "Reward\022\022\n\nactivityID\030\001 \001(\r\022\016\n\006stepID\030\002 \001"
    "(\r\022>\n\006result\030\003 \001(\0162..MiscProto.stRetRech"
    "argeActivityReward.eResult\"`\n\007eResult\022\014\n"
    "\010eSuccess\020\001\022\022\n\016eCond_Not_Meet\020\002\022\014\n\010eBagF"
    "ull\020\003\022\023\n\017eHas_Got_Reward\020\004\022\020\n\014eInner_Err"
    "or\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\\\"5\n\022stSynInvestigation\022\017\n\007"
    "questID\030\001 \001(\r\022\016\n\006levels\030\002 \003(\r\"w\n\025stSynAl"
    "lInvestigation\022,\n\005infos\030\001 \003(\0132\035.MiscProt"
    "o.stSynInvestigation\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020]\"\315\001\n\016stInv"
    "estAnswer\022\021\n\tproblemID\030\001 \001(\r\022\017\n\007answerA\030"
    "\002 \001(\010\022\017\n\007answerB\030\003 \001(\010\022\017\n\007answerC\030\004 \001(\010\022"
    "\017\n\007answerD\030\005 \001(\010\022\017\n\007answerE\030\006 \001(\010\022\017\n\007ans"
    "werF\030\007 \001(\010\022\017\n\007answerG\030\010 \001(\010\022\017\n\007answerH\030\t"
    " \001(\010\022\017\n\007answerI\030\n \001(\010\022\017\n\007answerJ\030\013 \001(\010\"\250"
    "\001\n\027stReqInvestgationReward\022\017\n\007questID\030\001 "
    "\001(\r\022\r\n\005level\030\002 \001(\r\022*\n\007answers\030\003 \003(\0132\031.Mi"
    "scProto.stInvestAnswer\022\017\n\007useTime\030\005 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020^\"\334\001\n\032stInvestgationRewardResult"
    "\022=\n\006result\030\001 \001(\0162-.MiscProto.stInvestgat"
    "ionRewardResult.eResult\"M\n\007eResult\022\020\n\014eI"
    "nner_Error\020\001\022\023\n\017eHas_Got_Reward\020\002\022\r\n\teBa"
    "g_Full\020\003\022\014\n\010eSuccess\020\004\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020_\"U\n\021stRe"
    "qActivityShop\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020`\""
    "[\n\022stActivityShopList\022\023\n\013activityIDs\030\001 \003"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020a\"\357\001\n\016stLuchShopInfo\022\026\n\016curRe"
    "wardVipLv\030\001 \001(\r\022\031\n\021randRewardEntryID\030\002 \001"
    "(\r\022\024\n\014hasGotReward\030\003 \001(\010\022\030\n\020todayHasRech"
    "arge\030\004 \001(\r\022\026\n\016openWindowTime\030\005 \001(\r\022\034\n\024re"
    "chargeMeetCondTime\030\006 \001(\r\022\022\n\nopenSvrDay\030\007"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020b\"[\n\032stSynLuckShopTodayRech"
    "arge\022\013\n\003num\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020c\"W\n\023stReqLuck"
    "ShopReward\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020d\"\356\001\n"
    "\026stLuckShopRewardResult\0229\n\006result\030\001 \001(\0162"
    ").MiscProto.stLuckShopRewardResult.eResu"
    "lt\"g\n\007eResult\022\014\n\010eSuccess\020\001\022\023\n\017eHas_Got_"
    "Reward\020\002\022\030\n\024eRecharge_Not_Enough\020\003\022\r\n\teB"
    "ag_Full\020\004\022\020\n\014eInner_Error\020\005\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020e\"]\n"
    "\031stSaveOpenLuckShopWinTime\022\016\n\006charID\030\001 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020f\"h\n\036stLuckShopRechargeMeetCo"
    "ndTime\022\024\n\014meetCondTime\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020g\"U"
    "\n\021stReqOpenGuardWin\022\016\n\006charID\030\001 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020h\"F\n\014stGuardEnemy\022\016\n\006charID\030\001 \001(\r\022\014\n"
    "\004name\030\002 \001(\t\022\013\n\003job\030\003 \001(\r\022\013\n\003sex\030\004 \001(\r\"F\n"
    "\017stGuardBaseInfo\022\016\n\006charID\030\001 \001(\r\022\017\n\007qual"
    "ity\030\002 \001(\r\022\022\n\nremainTime\030\003 \001(\r\"\271\001\n\021stGuar"
    "dDetailInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001("
    "\t\022\017\n\007quality\030\003 \001(\r\022\021\n\tguildName\030\004 \001(\t\022\022\n"
    "\nfriendName\030\005 \001(\t\022\026\n\016beInterceptNum\030\006 \001("
    "\r\022\022\n\nremainTime\030\007 \001(\r\022\r\n\005level\030\010 \001(\r\022\023\n\013"
    "inspiredNum\030\t \001(\r\"\206\002\n\016stGuardWinInfo\022\020\n\010"
    "guardNum\030\001 \001(\r\022\024\n\014interceptNum\030\002 \001(\r\022\017\n\007"
    "helpNum\030\003 \001(\r\022+\n\007enemies\030\004 \003(\0132\032.MiscPro"
    "to.stGuardBaseInfo\022.\n\nguardInfos\030\005 \003(\0132\032"
    ".MiscProto.stGuardBaseInfo\022\023\n\013interceptC"
    "D\030\006 \001(\r\022\027\n\017guardRemainTime\030\007 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020i\"V\n\022stResetInterceptCD\022\016\n\006charID\030\001 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020j\"\321\001\n\030stResetInterceptCDResult\022"
    ";\n\006result\030\001 \001(\0162+.MiscProto.stResetInter"
    "ceptCDResult.eResult\"F\n\007eResult\022\014\n\010eSucc"
    "ess\020\001\022\027\n\023eDiamond_Not_Enough\020\002\022\024\n\020eInner"
    "_Cfg_Error\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020k\"W\n\023stResetInterce"
    "ptNum\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020l\"\345\001\n\031stRe"
    "setInterceptNumResult\022<\n\006result\030\001 \001(\0162,."
    "MiscProto.stResetInterceptNumResult.eRes"
    "ult\"X\n\007eResult\022\014\n\010eSuccess\020\001\022\027\n\023eDiamond"
    "_Not_Enough\020\002\022\024\n\020eInner_Cfg_Error\020\003\022\020\n\014e"
    "Num_Use_Out\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020m\"X\n\024stReqGuardDet"
    "ailInfo\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020n\"z\n\024stR"
    "etGuardDetailInfo\0220\n\ndetailInfo\030\001 \001(\0132\034."
    "MiscProto.stGuardDetailInfo\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020o\"R\n"
    "\016stReqIntercept\022\016\n\006charID\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "p\"\246\002\n\022stIntercerptResult\0225\n\006result\030\001 \001(\016"
    "2%.MiscProto.stIntercerptResult.eResult\""
    "\246\001\n\007eResult\022\014\n\010eSuccess\020\001\022\024\n\020eNot_Begin_"
    "Guard\020\002\022\032\n\026eIntercept_Num_Use_Out\020\003\022\026\n\022e"
    "Being_Intercepted\020\004\022\017\n\013eSafe_State\020\005\022\034\n\030"
    "eBeIntercept_Num_Use_Out\020\006\022\024\n\020eHelp_This"
    "_Guard\020\007\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020q\"N\n\nstReqGuard\022\016\n\006char"
    "ID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020r\"\240\001\n\rstRetGuardWin\022\017\n\007"
    "quality\030\001 \001(\r\022\022\n\nrefreshNum\030\002 \001(\r\022\014\n\004buf"
    "f\030\003 \001(\r\022\022\n\nfriendName\030\004 \001(\t\022\026\n\016canFreeRe"
    "fresh\030\005 \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020s\"_\n\033stReqSummonHigh"
    "QualityGuard\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020t\"\335"
    "\001\n\036stSummonHighQualityGuardResult\022A\n\006res"
    "ult\030\001 \001(\01621.MiscProto.stSummonHighQualit"
    "yGuardResult.eResult\"F\n\007eResult\022\014\n\010eSucc"
    "ess\020\001\022\024\n\020eInner_Cfg_Error\020\002\022\027\n\023eDiamond_"
    "Not_Enough\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020u\"V\n\022stReqGuardInsp"
    "ired\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020v\"\302\001\n\025stGua"
    "rdInspiredResult\0228\n\006result\030\001 \001(\0162(.MiscP"
    "roto.stGuardInspiredResult.eResult\022\013\n\003nu"
    "m\030\002 \001(\005\"0\n\007eResult\022\014\n\010eSuccess\020\001\022\027\n\023eDia"
    "mond_Not_Enough\020\002\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020w\"\\\n\030stReqRefr"
    "eshGuardQuality\022\016\n\006charID\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "x\"\343\001\n\036stRetRefreshGuardQualityResult\022A\n\006"
    "result\030\001 \001(\01621.MiscProto.stRetRefreshGua"
    "rdQualityResult.eResult\022\017\n\007quality\030\002 \001(\r"
    "\";\n\007eResult\022\014\n\010eSuccess\020\001\022\027\n\023eDiamond_No"
    "t_Enough\020\002\022\t\n\005eFail\020\003\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020y\"[\n\027stReq"
    "CanHelpGuardFriend\022\016\n\006charID\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020z\"[\n\025stHelpGaurdFriendInfo\022\016\n\006charID\030"
    "\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\025\n\rremainHelpNum\030\003 \001"
    "(\r\022\r\n\005level\030\004 \001(\r\"|\n\027stRetCanHelpGuardFr"
    "iend\022/\n\005infos\030\001 \003(\0132 .MiscProto.stHelpGa"
    "urdFriendInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020{\"^\n\032stInviteFrien"
    "dForHelpGuard\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020|\""
    "\347\001\n stInviteFriendForHelpGuardResult\022C\n\006"
    "result\030\001 \001(\01623.MiscProto.stInviteFriendF"
    "orHelpGuardResult.eResult\"L\n\007eResult\022\014\n\010"
    "eSuccess\020\001\022\025\n\021eHelp_Num_Use_Out\020\002\022\017\n\013eNo"
    "t_Online\020\003\022\013\n\007eRefuse\020\004\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020}\"p\n\024stA"
    "skFriendHelpGuard\022\023\n\013inviterName\030\001 \001(\t\022\021"
    "\n\tinviterID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\010\"\027\n\nProtoFunID\022\t\n\005FunID\020~\"c\n\020stReplyHe"
    "lpGuard\022\r\n\005agree\030\001 \001(\010\022\016\n\006charID\030\002 \001(\r\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\010\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020\177\"\334\001\n\026stReplyHelpGuardResult\0229\n\006r"
    "esult\030\001 \001(\0162).MiscProto.stReplyHelpGuard"
    "Result.eResult\"T\n\007eResult\022\014\n\010eSuccess\020\001\022"
    "\016\n\neHas_Start\020\002\022\025\n\021eHelp_Num_Use_Out\020\003\022\024"
    "\n\020eHas_Friend_Help\020\004\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\200\001\"g\n\024stUse"
    "rAgreeHelpGuard\022\014\n\004name\030\001 \001(\t\022\016\n\006charID\030"
    "\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\201\001\"Q\n\014stBeginGuard\022\016\n\006char"
    "ID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nPro"
    "toFunID\022\n\n\005FunID\020\202\001\"\271\001\n\022stBeginGuardResu"
    "lt\0225\n\006result\030\001 \001(\0162%.MiscProto.stBeginGu"
    "ardResult.eResult\"9\n\007eResult\022\014\n\010eSuccess"
    "\020\001\022\016\n\neHas_Begin\020\002\022\020\n\014eUse_Out_Num\020\003\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005F"
    "unID\020\203\001\"5\n\017stInterceptInfo\022\021\n\ttimestamp\030"
    "\001 \001(\r\022\017\n\007content\030\002 \001(\t\"W\n\022stReqIntercept"
    "Info\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\204\001\"r\n\022stRet"
    "InterceptInfo\022)\n\005infos\030\001 \003(\0132\032.MiscProto"
    ".stInterceptInfo\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\205\001\"=\n\032stRecharg"
    "eActivityInfoItem\022\n\n\002id\030\001 \001(\r\022\023\n\013recharg"
    "eNum\030\002 \001(\r\"\207\001\n\034stNotifyRechargeActivityI"
    "nfo\0224\n\005items\030\001 \003(\0132%.MiscProto.stRecharg"
    "eActivityInfoItem\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\206\001\"v\n\027stLuckSh"
    "opRefreshResult\022\027\n\017curRefreshVipLv\030\001 \001(\r"
    "\022\017\n\007entryID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\207\001\"\371\001\n\023stNotif"
    "yGuardFinish\022\017\n\007quality\030\001 \001(\r\022\026\n\016beInter"
    "ceptNum\030\002 \001(\r\022\022\n\nfriendName\030\003 \001(\t\022\016\n\006res"
    "ID1\030\004 \001(\r\022\017\n\007resNum1\030\005 \001(\r\022\016\n\006resID2\030\006 \001"
    "(\r\022\017\n\007resNum2\030\007 \001(\r\022\016\n\006resID3\030\010 \001(\r\022\017\n\007r"
    "esNum3\030\t \001(\r\022\017\n\007guardID\030\n \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\210\001"
    "\"\336\001\n\031stNotifyFriendGuardFinish\022\017\n\007qualit"
    "y\030\001 \001(\r\022\026\n\016beInterceptNum\030\002 \001(\r\022\022\n\nfrien"
    "dName\030\003 \001(\t\022\016\n\006resID1\030\004 \001(\r\022\017\n\007resNum1\030\005"
    " \001(\r\022\016\n\006resID2\030\006 \001(\r\022\017\n\007resNum2\030\007 \001(\r\022\017\n"
    "\007guardID\030\010 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\211\001\"g\n\027stNotifyInt"
    "erceptResult\022\013\n\003win\030\001 \001(\010\022\014\n\004flag\030\002 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n"
    "\n\005FunID\020\212\001\"\215\001\n\026stReplyNotifyIntercept\022\016\n"
    "\006resID1\030\001 \001(\r\022\017\n\007resNum1\030\002 \001(\r\022\016\n\006resID2"
    "\030\003 \001(\r\022\017\n\007resNum2\030\004 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\213\001\"W\n\022st"
    "QuickFinishGuard\022\016\n\006charID\030\001 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\214\001\"\350\001\n\030stQuickFinishGuardResult\022;\n\006resu"
    "lt\030\001 \001(\0162+.MiscProto.stQuickFinishGuardR"
    "esult.eResult\"\\\n\007eResult\022\014\n\010eSuccess\020\001\022\022"
    "\n\016eHas_Not_Begin\020\002\022\027\n\023eDiamond_Not_Enoug"
    "h\020\003\022\026\n\022eBeing_Intercepted\020\004\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\215\001\"V"
    "\n\020stNotifyDelTitle\022\017\n\007titleID\030\001 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005Fu"
    "nID\020\216\001\"q\n\020stBeInterceptTip\022\013\n\003win\030\001 \001(\010\022"
    "\014\n\004name\030\002 \001(\t\022\017\n\007quality\030\003 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\217"
    "\001\"\210\001\n\036stOnlineNotifyNewInterceptInfo\022\013\n\003"
    "num\030\001 \001(\r\022\020\n\010guardNum\030\002 \001(\r\022\024\n\014intercert"
    "Num\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nPr"
    "otoFunID\022\n\n\005FunID\020\220\001\"a\n\034stReqOpenLimitFa"
    "shionDrawWin\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\221\001\""
    "z\n\034stRetLimitFashionDrawWinInfo\022\022\n\ncanDr"
    "awNum\030\001 \001(\r\022\023\n\013hasDrawedID\030\002 \003(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\222\001\"Z\n\025stReqDrawLimitFashion\022\016\n\006charID\030\001"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFu"
    "nID\022\n\n\005FunID\020\223\001\"\374\001\n\030stDrawLimitFashionRe"
    "sult\022;\n\006result\030\001 \001(\0162+.MiscProto.stDrawL"
    "imitFashionResult.eResult\022\n\n\002id\030\002 \001(\r\"d\n"
    "\007eResult\022\014\n\010eSuccess\020\001\022\r\n\teBag_Full\020\002\022\025\n"
    "\021eHas_Not_Draw_Num\020\003\022\026\n\022eActivity_Not_Op"
    "en\020\004\022\r\n\teDraw_Out\020\005\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\224\001\"-\n\016stExch"
    "angeItem\022\016\n\006itemID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\277\001"
    "\n\032stSynExchangeActivityiStep\022,\n\tneedItem"
    "s\030\001 \003(\0132\031.MiscProto.stExchangeItem\022+\n\010go"
    "tItems\030\002 \003(\0132\031.MiscProto.stExchangeItem\022"
    "\023\n\013hasExchgNum\030\003 \001(\r\022\023\n\013maxExchgNum\030\004 \001("
    "\r\022\016\n\006stepID\030\005 \001(\r\022\014\n\004desc\030\006 \001(\t\"\224\001\n\025stSy"
    "nExchangeActivity\0223\n\004step\030\001 \003(\0132%.MiscPr"
    "oto.stSynExchangeActivityiStep\022\022\n\nactivi"
    "tyID\030\002 \001(\r\022\016\n\006titile\030\003 \001(\t\022\014\n\004desc\030\004 \001(\t"
    "\022\024\n\014dailyRefresh\030\005 \001(\010\"~\n\025stRetExchangeA"
    "ctivity\0222\n\010activity\030\001 \003(\0132 .MiscProto.st"
    "SynExchangeActivity\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\225\001\"j\n\021stReqE"
    "xchangeItem\022\022\n\nactivityID\030\001 \001(\r\022\016\n\006stepI"
    "D\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProt"
    "oFunID\022\n\n\005FunID\020\226\001\"\221\002\n\024stExchangeItemRes"
    "ult\0227\n\006result\030\001 \001(\0162\'.MiscProto.stExchan"
    "geItemResult.eResult\022\022\n\nactivityID\030\002 \001(\r"
    "\022\016\n\006stepID\030\003 \001(\r\"i\n\007eResult\022\014\n\010eSuccess\020"
    "\001\022\021\n\reTime_Use_Out\020\002\022\r\n\teBag_Full\020\003\022\024\n\020e"
    "Activity_Finish\020\004\022\030\n\024eHas_Not_Enough_Ite"
    "m\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFun"
    "ID\022\n\n\005FunID\020\227\001\"\272\001\n\031stRecycleRechargeActi"
    "vity\022\022\n\nactivityID\030\001 \001(\r\022\016\n\006titile\030\002 \001(\t"
    "\022\014\n\004desc\030\003 \001(\t\022\024\n\014maxRewardNum\030\004 \001(\r\022\024\n\014"
    "gotRewardNum\030\005 \001(\r\022\017\n\007stepVal\030\006 \001(\r\022.\n\004s"
    "tep\030\007 \001(\0132 .MiscProto.stSynActivityStepI"
    "nfo\"\213\001\n\035stSendRecycleRechargeActivity\0227\n"
    "\tactivties\030\001 \003(\0132$.MiscProto.stRecycleRe"
    "chargeActivity\"\027\n\nProtoModID\022\t\n\005ModID\020\010\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\230\001\"v\n\035stReqRecycl"
    "eRechargeActReward\022\022\n\nactivityID\030\001 \001(\r\022\016"
    "\n\006stepID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\231\001\"\244\002\n\035stRetRecyc"
    "leRechargeActReward\022@\n\006result\030\001 \001(\01620.Mi"
    "scProto.stRetRecycleRechargeActReward.eR"
    "esult\022\022\n\nactivityID\030\002 \001(\r\"z\n\007eResult\022\014\n\010"
    "eSuccess\020\001\022\r\n\teBag_Full\020\002\022\021\n\reTime_Use_O"
    "ut\020\003\022\016\n\neNot_Begin\020\004\022\025\n\021eSelect_Not_Exis"
    "t\020\005\022\030\n\024eRecharge_Not_Enough\020\006\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\232\001"
    "\"<\n\023stCommonActInfoItem\022\n\n\002id\030\001 \001(\r\022\014\n\004t"
    "ype\030\002 \001(\r\022\013\n\003val\030\003 \001(\r\"z\n\026stRefreshCommo"
    "nActInfo\022-\n\005items\030\001 \003(\0132\036.MiscProto.stCo"
    "mmonActInfoItem\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\233\001\"U\n\024stReqAKeyF"
    "etchAttach\022\n\n\002id\030\001 \003(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\234\001\"\264\001\n\027st"
    "AKeyFetchAttachResult\0229\n\006result\030\001 \001(\0162)."
    "MiscProto.stAKeyFetchAttachResult.Result"
    "\"+\n\006Result\022\013\n\007SUCCESS\020\001\022\024\n\020ATTACH_NOT_EX"
    "IST\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\235\001\"V\n\021stReqGloryfashion\022\016\n"
    "\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030"
    "\n\nProtoFunID\022\n\n\005FunID\020\236\001\"\330\001\n\024stGloryfash"
    "ionResult\0227\n\006result\030\001 \001(\0162\'.MiscProto.st"
    "GloryfashionResult.eResult\"T\n\007eResult\022\014\n"
    "\010eSuccess\020\001\022\030\n\024eRecharge_Not_Enough\020\002\022\r\n"
    "\teBag_Full\020\003\022\022\n\016eNot_Open_Time\020\004\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\237\001\"\324\001\n\017stDevilCallItem\022\016\n\006itemId\030\001 \001(\r\022"
    "\026\n\016bossDrawStatus\030\002 \001(\r\022\030\n\020commonDrawSta"
    "tus\030\003 \001(\r\022\r\n\005name1\030\004 \001(\t\022\r\n\005name2\030\005 \001(\t\022"
    "\r\n\005name3\030\006 \001(\t\022\017\n\007hasPass\030\007 \001(\010\"A\n\reRewa"
    "rdStatus\022\017\n\013eHas_Reward\020\001\022\016\n\neNo_Reward\020"
    "\002\022\017\n\013eGot_Reward\020\003\"V\n\021stReqAllDevilCall\022"
    "\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\240\001\"\317\001\n\021stRetAllD"
    "evilCall\0224\n\006result\030\001 \001(\0162$.MiscProto.stR"
    "etAllDevilCall.eResult\022(\n\004item\030\002 \003(\0132\032.M"
    "iscProto.stDevilCallItem\"\'\n\007eResult\022\014\n\010e"
    "Success\020\001\022\016\n\neLvl_Limit\020\002\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\241\001\"\303\001\n"
    "\024stReqDevilCallReward\0229\n\nrewardType\030\001 \001("
    "\0162%.MiscProto.stReqDevilCallReward.eType"
    "\022\016\n\006bossId\030\002 \001(\r\"-\n\005eType\022\020\n\014eBoss_Rewar"
    "d\020\001\022\022\n\016eCommon_Reward\020\002\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\242\001\"\335\002\n\024s"
    "tRetDevilCallReward\0229\n\nrewardType\030\001 \001(\0162"
    "%.MiscProto.stRetDevilCallReward.eType\0227"
    "\n\006result\030\002 \001(\0162\'.MiscProto.stRetDevilCal"
    "lReward.eResult\022\016\n\006bossId\030\003 \001(\r\"-\n\005eType"
    "\022\020\n\014eBoss_Reward\020\001\022\022\n\016eCommon_Reward\020\002\"_"
    "\n\007eResult\022\014\n\010eSuccess\020\001\022\024\n\020eNot_That_Rew"
    "ard\020\002\022\021\n\reAlready_Draw\020\003\022\r\n\teBag_Full\020\004\022"
    "\016\n\neLvl_limit\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\243\001\"S\n\016stReqDevil"
    "Call\022\016\n\006bossId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\244\001\"\230\002\n\016stRe"
    "tDevilCall\022\n\n\002id\030\001 \001(\r\0221\n\006result\030\002 \001(\0162!"
    ".MiscProto.stRetDevilCall.eResult\022\'\n\005ite"
    "ms\030\003 \003(\0132\030.MiscProto.stSynDrawItem\"k\n\007eR"
    "esult\022\014\n\010eSuccess\020\001\022\023\n\017eRes_Not_Enough\020\002"
    "\022\r\n\teBag_Full\020\003\022\r\n\teNot_Open\020\004\022\017\n\013eNo_Su"
    "ch_Id\020\005\022\016\n\neLvl_limit\020\006\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\245\001\"Z\n\025st"
    "ReqDevilCallSummary\022\016\n\006charID\030\001 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005Fu"
    "nID\020\246\001\"t\n\025stRetDevilCallSummary\022(\n\004item\030"
    "\002 \003(\0132\032.MiscProto.stDevilCallItem\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunI"
    "D\020\247\001\"\223\001\n\014stReqPayType\022\016\n\006charID\030\001 \001(\r\022\016\n"
    "\006itemId\030\002 \001(\r\022\020\n\010serverId\030\003 \001(\t\022\020\n\010isExt"
    "end\030\004 \001(\010\022\014\n\004data\030\005 \001(\t\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\250\001\"\341\001\n\014s"
    "tRetPayType\022\017\n\007payType\030\001 \001(\t\022\016\n\006itemId\030\002"
    " \001(\r\022\017\n\007orderId\030\003 \001(\t\022,\n\003res\030\004 \001(\0162\037.Mis"
    "cProto.stRetPayType.eResult\">\n\007eResult\022\014"
    "\n\010eSuccess\020\001\022\021\n\reNo_Such_Item\020\002\022\022\n\016eSame"
    "_Order_Id\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\251\001\"X\n\023stReqOperateAc"
    "tvity\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\252\001\":\n\030stOp"
    "erateActvityItemInfo\022\016\n\006itemId\030\001 \001(\r\022\016\n\006"
    "status\030\002 \001(\r\"u\n\025stOperateActvityItems\022\022\n"
    "\nactivityId\030\001 \001(\r\022\021\n\tcondition\030\002 \001(\r\0225\n\010"
    "itemInfo\030\003 \003(\0132#.MiscProto.stOperateActv"
    "ityItemInfo\"y\n\023stRetOperateActvity\022/\n\005it"
    "ems\030\001 \003(\0132 .MiscProto.stOperateActvityIt"
    "ems\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFun"
    "ID\022\n\n\005FunID\020\253\001\"r\n\031stReqOperateActvityRew"
    "ard\022\022\n\nactivityId\030\001 \001(\r\022\016\n\006itemId\030\002 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n"
    "\n\005FunID\020\254\001\"\311\002\n\031stRetOperateActvityReward"
    "\022\022\n\nactivityId\030\001 \001(\r\022\016\n\006itemId\030\002 \001(\r\0228\n\003"
    "res\030\003 \001(\0162+.MiscProto.stRetOperateActvit"
    "yReward.Result\"\232\001\n\006Result\022\013\n\007SUCCESS\020\001\022\023"
    "\n\017ACTIVITY_EXPIRE\020\002\022\016\n\nINVALID_ID\020\003\022\017\n\013I"
    "NNER_ERROR\020\004\022\026\n\022REWARD_ALREAD_DRAW\020\005\022\023\n\017"
    "CONDITION_LIMIT\020\006\022\014\n\010BAG_FULL\020\007\022\022\n\016RESOU"
    "RCE_LIMIT\020\010\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\255\001\"T\n\023stReqIllusionS"
    "prite\022\n\n\002id\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\256\001\">\n\031stIllusi"
    "onSpriteSkillItem\022\017\n\007skillId\030\001 \001(\r\022\020\n\010sk"
    "illLvl\030\002 \001(\r\"\226\002\n\023stRetIllusionSprite\022\n\n\002"
    "id\030\001 \001(\r\022\013\n\003lvl\030\002 \001(\r\022\013\n\003exp\030\003 \001(\r\022\021\n\tta"
    "lentNum\030\004 \001(\r\0224\n\006skills\030\005 \003(\0132$.MiscProt"
    "o.stIllusionSpriteSkillItem\0223\n\003res\030\006 \001(\016"
    "2&.MiscProto.stRetIllusionSprite.eResult"
    "\"(\n\007eResult\022\014\n\010eSuccess\020\001\022\017\n\013eNo_Such_Id"
    "\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunI"
    "D\022\n\n\005FunID\020\257\001\"0\n\025illusionSpriteEatItem\022\n"
    "\n\002id\030\001 \001(\004\022\013\n\003num\030\002 \001(\r\"\212\001\n\026stReqIllusio"
    "nSpriteEat\022\n\n\002id\030\001 \001(\r\0221\n\007eatItem\030\002 \003(\0132"
    " .MiscProto.illusionSpriteEatItem\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunI"
    "D\020\260\001\"\243\002\n\026stRetIllusionSpriteEat\022\n\n\002id\030\001 "
    "\001(\r\022\013\n\003lvl\030\002 \001(\r\022\013\n\003exp\030\003 \001(\r\022\021\n\ttalentN"
    "um\030\004 \001(\r\0226\n\003res\030\005 \001(\0162).MiscProto.stRetI"
    "llusionSpriteEat.eResult\"e\n\007eResult\022\014\n\010e"
    "Success\020\001\022\017\n\013eNo_Such_Id\020\002\022\021\n\reInvalid_i"
    "tem\020\003\022\022\n\016eMax_Lvl_Limit\020\004\022\024\n\020eItem_Not_E"
    "nough\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProt"
    "oFunID\022\n\n\005FunID\020\261\001\"l\n\032stReqIllusionSprit"
    "eSkillUp\022\n\n\002id\030\001 \001(\r\022\017\n\007skillId\030\002 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005"
    "FunID\020\262\001\"\326\002\n\032stRetIllusionSpriteSkillUp\022"
    "\n\n\002id\030\001 \001(\r\022\017\n\007skillId\030\002 \001(\r\022\020\n\010skillLvl"
    "\030\003 \001(\r\022:\n\003res\030\004 \001(\0162-.MiscProto.stRetIll"
    "usionSpriteSkillUp.eResult\"\231\001\n\007eResult\022\014"
    "\n\010eSuccess\020\001\022\017\n\013eNo_Such_Id\020\002\022\025\n\021eNo_Suc"
    "h_Skill_Id\020\003\022\027\n\023eLess_Of_Talent_Num\020\004\022\022\n"
    "\016eMax_Lvl_Limit\020\005\022\031\n\025eLast_Skill_Lvl_Lim"
    "it\020\006\022\020\n\014eInner_Error\020\007\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\263\001\"\\\n\027stR"
    "epOpenDiscoverWindow\022\016\n\006charID\030\001 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005F"
    "unID\020\264\001\"\212\002\n\032stOpenDiscoverWindowResult\022\r"
    "\n\005mapID\030\001 \001(\r\022\r\n\005place\030\002 \001(\r\022\016\n\006taskID\030\003"
    " \001(\r\022\r\n\005state\030\004 \001(\r\022\021\n\tbattleNum\030\005 \001(\r\022\020"
    "\n\010integral\030\006 \001(\r\022\022\n\nrefreshNum\030\007 \001(\r\022\023\n\013"
    "playDiceNum\030\010 \001(\r\022\021\n\tcanUseNum\030\t \001(\r\022\033\n\023"
    "hasReceivedIdentify\030\n \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\265\001\"R\n\r"
    "stReqPlayDice\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\266\001"
    "\"\231\002\n\020stPlayDiceResult\0223\n\006result\030\001 \001(\0162#."
    "MiscProto.stPlayDiceResult.eResult\022\r\n\005po"
    "int\030\002 \001(\r\022\r\n\005mapID\030\003 \001(\r\022\016\n\006taskID\030\004 \001(\r"
    "\022\r\n\005state\030\005 \001(\r\"`\n\007eResult\022\014\n\010eSuccess\020\001"
    "\022\021\n\reNot_Dice_NUM\020\002\022\024\n\020eTask_Not_Finish\020"
    "\003\022\020\n\014eInner_Error\020\004\022\014\n\010eThe_End\020\005\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunI"
    "D\020\267\001\"V\n\024stReqGetOrGiveUpTask\022\013\n\003tag\030\001 \001("
    "\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID"
    "\022\n\n\005FunID\020\270\001\"\353\001\n\017stGetTaskResult\0222\n\006resu"
    "lt\030\001 \001(\0162\".MiscProto.stGetTaskResult.eRe"
    "sult\022\020\n\010taskType\030\002 \001(\r\022\016\n\006taskID\030\003 \001(\r\"O"
    "\n\007eResult\022\014\n\010eSuccess\020\001\022\016\n\neThe_Begin\020\002\022"
    "\024\n\020eTask_Not_Finish\020\003\022\020\n\014eInner_Error\020\004\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n"
    "\n\005FunID\020\271\001\"\300\001\n\022stGiveUpTaskResult\0225\n\006res"
    "ult\030\001 \001(\0162%.MiscProto.stGiveUpTaskResult"
    ".eResult\"@\n\007eResult\022\014\n\010eSuccess\020\001\022\025\n\021eTa"
    "sk_Has_Receive\020\002\022\020\n\014eInner_Error\020\003\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005Fun"
    "ID\020\272\001\"T\n\017stReqRefreshNum\022\016\n\006charID\030\001 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\273\001\"\350\001\n\022stRefreshNumResult\0225\n\006re"
    "sult\030\001 \001(\0162%.MiscProto.stRefreshNumResul"
    "t.eResult\022\r\n\005count\030\002 \001(\r\"Y\n\007eResult\022\014\n\010e"
    "Success\020\001\022\020\n\014eInner_Error\020\002\022\025\n\021eNum_Usel"
    "ess_Over\020\003\022\027\n\023eDIAMOND_NOT_ENOUGH\020\004\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005Fu"
    "nID\020\274\001\"]\n\026stReqGetIntegralReward\022\020\n\010rewa"
    "rdID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nP"
    "rotoFunID\022\n\n\005FunID\020\275\001\"\212\002\n\031stGetIntegralR"
    "ewardResult\022<\n\006result\030\001 \001(\0162,.MiscProto."
    "stGetIntegralRewardResult.eResult\022\r\n\005val"
    "ue\030\002 \001(\r\"m\n\007eResult\022\014\n\010eSuccess\020\001\022\020\n\014eIn"
    "ner_Error\020\002\022\025\n\021eNum_Useless_Over\020\003\022\021\n\reH"
    "as_Received\020\004\022\030\n\024eBAG_SLOT_NOT_ENOUGH\020\005\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n"
    "\n\005FunID\020\276\001\"Q\n\017stReqGiveReward\022\013\n\003tag\030\001 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunI"
    "D\022\n\n\005FunID\020\277\001\"\377\001\n\022stGiveRewardResult\0225\n\006"
    "result\030\001 \001(\0162%.MiscProto.stGiveRewardRes"
    "ult.eResult\022\020\n\010integral\030\002 \001(\r\"m\n\007eResult"
    "\022\014\n\010eSuccess\020\001\022\020\n\014eInner_Error\020\002\022\025\n\021eTas"
    "k_Has_Receive\020\003\022\030\n\024eBAG_SLOT_NOT_ENOUGH\020"
    "\005\022\021\n\reHas_Received\020\006\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\300\001\"S\n\016stReq"
    "LuckyDraw\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\301\001\"8\n\032"
    "stLuckyDrawPointRewardInfo\022\n\n\002id\030\001 \001(\r\022\016"
    "\n\006status\030\002 \001(\r\"0\n\025stLuckyDrawRewardInfo\022"
    "\n\n\002id\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"<\n\023stLuckyDrawU"
    "serInfo\022\014\n\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\r\022\013\n\003num"
    "\030\003 \001(\r\"\345\001\n\016stRetLuckyDraw\022\022\n\nactivityid\030"
    "\001 \001(\r\0225\n\006reward\030\002 \003(\0132%.MiscProto.stLuck"
    "yDrawPointRewardInfo\022\017\n\007diamond\030\003 \001(\r\022.\n"
    "\006player\030\004 \003(\0132\036.MiscProto.stLuckyDrawUse"
    "rInfo\022\024\n\014lastFreeTime\030\005 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\302\001\"c"
    "\n\024stReqLuckyDrawReward\022\014\n\004type\030\001 \001(\r\022\n\n\002"
    "id\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nPro"
    "toFunID\022\n\n\005FunID\020\303\001\"\371\002\n\024stRetLuckyDrawRe"
    "ward\022\n\n\002id\030\001 \001(\r\0220\n\006reward\030\002 \003(\0132 .MiscP"
    "roto.stLuckyDrawRewardInfo\022.\n\006player\030\003 \003"
    "(\0132\036.MiscProto.stLuckyDrawUserInfo\0227\n\006re"
    "sult\030\004 \001(\0162\'.MiscProto.stRetLuckyDrawRew"
    "ard.eResult\022\024\n\014lastFreeTime\030\005 \001(\r\022\017\n\007dia"
    "mond\030\006 \001(\r\"`\n\007eResult\022\014\n\010eSuccess\020\001\022\r\n\te"
    "Bag_Full\020\002\022\021\n\reDiamond_Less\020\003\022\024\n\020eActivi"
    "ty_Expire\020\004\022\017\n\013eNo_Such_Id\020\005\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\304\001\""
    "s\n\031stReqLuckyDrawPointReward\022\022\n\nactivity"
    "id\030\001 \001(\r\022\017\n\007pointid\030\002 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\305\001\"\245\002\n"
    "\031stRetLuckyDrawPointReward\022\022\n\nactivityid"
    "\030\001 \001(\r\022\017\n\007pointid\030\002 \001(\r\022<\n\006result\030\003 \001(\0162"
    ",.MiscProto.stRetLuckyDrawPointReward.eR"
    "esult\"r\n\007eResult\022\014\n\010eSuccess\020\001\022\r\n\teBag_F"
    "ull\020\002\022\021\n\reDiamond_Less\020\003\022\024\n\020eActivity_Ex"
    "pire\020\004\022\017\n\013eNo_Such_Id\020\005\022\020\n\014eAlready_Get\020"
    "\006\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID"
    "\022\n\n\005FunID\020\306\001\"V\n\021stReqRedPointRuls\022\016\n\006cha"
    "rID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nPr"
    "otoFunID\022\n\n\005FunID\020\307\001\"\211\001\n\024stRedPointRulsR"
    "esult\022\r\n\005times\030\001 \001(\010\022\024\n\014canGetReward\030\002 \001"
    "(\010\022\031\n\021canOpenIntegalBox\030\003 \001(\010\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\310\001"
    "\"V\n\021stReqInviteFriend\022\016\n\006charID\030\001 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005"
    "FunID\020\311\001\"0\n\022InviteFriendReward\022\n\n\002id\030\001 \001"
    "(\r\022\016\n\006status\030\002 \001(\r\"\247\001\n\021stRetInviteFriend"
    "\022\014\n\004code\030\001 \001(\t\022\013\n\003num\030\002 \001(\r\022\025\n\ruseInvite"
    "Code\030\003 \001(\010\022-\n\006reward\030\004 \003(\0132\035.MiscProto.I"
    "nviteFriendReward\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\312\001\"V\n\025stReqDra"
    "wInviteFriend\022\n\n\002id\030\001 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\313\001\"\212\002\n"
    "\025stRetDrawInviteFriend\022\n\n\002id\030\001 \001(\r\0228\n\006re"
    "sult\030\002 \001(\0162(.MiscProto.stRetDrawInviteFr"
    "iend.eResult\"x\n\007eResult\022\014\n\010eSuccess\020\001\022\r\n"
    "\teBag_Full\020\002\022\027\n\023eLess_Of_Invite_Num\020\003\022\017\n"
    "\013eNo_Such_Id\020\004\022\020\n\014eAlready_Get\020\005\022\024\n\020eNot"
    "_Find_Record\020\006\"\027\n\nProtoModID\022\t\n\005ModID\020\010\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\314\001\"U\n\022stReqUseInv"
    "iteCode\022\014\n\004code\030\001 \001(\t\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\315\001\"\232\002\n\022stR"
    "etUseInviteCode\0225\n\006result\030\001 \001(\0162%.MiscPr"
    "oto.stRetUseInviteCode.eResult\"\231\001\n\007eResu"
    "lt\022\014\n\010eSuccess\020\001\022\r\n\teBag_Full\020\002\022\021\n\reNo_S"
    "uch_Code\020\003\022\020\n\014eAlready_Get\020\004\022\024\n\020eNot_Fin"
    "d_Record\020\005\022\020\n\014eInner_error\020\006\022\020\n\014eLevel_L"
    "imit\020\007\022\022\n\016eUse_Self_Code\020\010\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\316\001\"U\n"
    "\020stReqShareInvite\022\016\n\006charID\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunI"
    "D\020\317\001\"R\n\020stRetShareInvite\022\013\n\003num\030\001 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005"
    "FunID\020\320\001\"Z\n\025stReqDailyShareInvite\022\016\n\006cha"
    "rId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nPr"
    "otoFunID\022\n\n\005FunID\020\321\001\"w\n\025stRetDailyShareI"
    "nvite\022\013\n\003num\030\001 \001(\r\022\n\n\002id\030\002 \003(\r\022\022\n\nonceRe"
    "ward\030\003 \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nP"
    "rotoFunID\022\n\n\005FunID\020\322\001\"Z\n\031stReqDrawDailyS"
    "hareReward\022\n\n\002id\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\323\001\"\366\001\n\031st"
    "RetDrawDailyShareReward\022\n\n\002id\030\001 \001(\r\022<\n\006r"
    "esult\030\002 \001(\0162,.MiscProto.stRetDrawDailySh"
    "areReward.eResult\"\\\n\007eResult\022\014\n\010eSuccess"
    "\020\001\022\r\n\teBag_Full\020\002\022\020\n\014eLess_Of_Num\020\003\022\020\n\014e"
    "Already_Get\020\004\022\020\n\014eNot_Find_Id\020\005\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020"
    "\324\001\"]\n\030stReqDrawOnceShareReward\022\016\n\006charID"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProto"
    "FunID\022\n\n\005FunID\020\325\001\"\326\001\n\030stRetDrawOnceShare"
    "Reward\022;\n\006result\030\001 \001(\0162+.MiscProto.stRet"
    "DrawOnceShareReward.eResult\"J\n\007eResult\022\014"
    "\n\010eSuccess\020\001\022\r\n\teBag_Full\020\002\022\020\n\014eAlready_"
    "Get\020\003\022\020\n\014eLess_Of_Num\020\004\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\326\001\"\302\001\n\035s"
    "tNotifyInterceptServerResult\022@\n\006result\030\001"
    " \001(\01620.MiscProto.stNotifyInterceptServer"
    "Result.eResult\",\n\007eResult\022\010\n\004eWin\020\001\022\t\n\005e"
    "Lose\020\002\022\014\n\010eTimeout\020\003\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\327\001\"V\n\021stReq"
    "ReceiveState\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\330\001\""
    "\\\n\024stReceiveStateResult\022\021\n\tisReceive\030\001 \001"
    "(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunI"
    "D\022\n\n\005FunID\020\331\001\"W\n\022stReqReceiveReward\022\016\n\006c"
    "harID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\332\001\"\377\001\n\025stReceiveRewa"
    "rdResult\0228\n\006result\030\001 \001(\0162(.MiscProto.stR"
    "eceiveRewardResult.eResult\"y\n\007eResult\022\014\n"
    "\010eSuccess\020\001\022\023\n\017eHas_Got_Reward\020\002\022\030\n\024eRec"
    "harge_Not_Enough\020\003\022\r\n\teBag_Full\020\004\022\020\n\014eIn"
    "ner_Error\020\005\022\020\n\014eIs_Not_Open\020\006\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\333\001"
    "\"\\\n\027stAcitivityLimitPetItem\022\n\n\002id\030\001 \001(\r\022"
    "\021\n\tactiviyId\030\002 \001(\r\022\021\n\tstartTime\030\003 \001(\r\022\017\n"
    "\007endTime\030\004 \001(\r\"\201\001\n\032stSendAllAcitivityLim"
    "itPet\0220\n\004item\030\001 \003(\0132\".MiscProto.stAcitiv"
    "ityLimitPetItem\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\334\001\"\200\001\n\031stSendLat"
    "eWalfareActivity\022\n\n\002id\030\001 \001(\r\022\022\n\nexpireTi"
    "me\030\002 \001(\r\022\020\n\010rewardId\030\003 \003(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\335\001\"[\n"
    "\024stReqDrawLateWalfare\022\020\n\010rewardId\030\001 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n"
    "\n\005FunID\020\336\001\"\216\002\n\024stRetDrawLateWalfare\022\020\n\010r"
    "ewardId\030\001 \001(\r\0227\n\006result\030\002 \001(\0162\'.MiscProt"
    "o.stRetDrawLateWalfare.eResult\"x\n\007eResul"
    "t\022\014\n\010eSuccess\020\001\022\r\n\teNot_Open\020\002\022\020\n\014eAlrea"
    "d_Draw\020\003\022\024\n\020eActivity_Expire\020\004\022\017\n\013eNo_Su"
    "ch_Id\020\005\022\027\n\023eDiamond_Not_Enough\020\006\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\337\001\"-\n\020stResGetBackItem\022\014\n\004type\030\001 \001(\r\022\013\n"
    "\003num\030\002 \001(\r\"s\n\023stSendAllResGetBack\022)\n\004ite"
    "m\030\001 \003(\0132\033.MiscProto.stResGetBackItem\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005F"
    "unID\020\340\001\"c\n\023stReqDrawResGetBack\022\014\n\004type\030\001"
    " \001(\r\022\013\n\003num\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\341\001\"\211\002\n\023stRetDr"
    "awResGetBack\022\014\n\004type\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\022"
    "6\n\006result\030\003 \001(\0162&.MiscProto.stRetDrawRes"
    "GetBack.eResult\"l\n\007eResult\022\014\n\010eSuccess\020\001"
    "\022\020\n\014eAlread_Draw\020\002\022\021\n\reNo_Such_Type\020\003\022\027\n"
    "\023eDiamond_Not_Enough\020\004\022\025\n\021eTimes_Not_Eno"
    "ugh\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\342\001\"[\n\026stReqDrawAllResGetBa"
    "ck\022\016\n\006charId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\343\001\"\312\001\n\026stRetD"
    "rawAllResGetBack\0229\n\006result\030\001 \001(\0162).MiscP"
    "roto.stRetDrawAllResGetBack.eResult\"B\n\007e"
    "Result\022\014\n\010eSuccess\020\001\022\020\n\014eNo_Res_Back\020\002\022\027"
    "\n\023eDiamond_Not_Enough\020\003\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\344\001\"[\n\026st"
    "ReqOpenMonsterWindow\022\016\n\006charID\030\001 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005F"
    "unID\020\345\001\"\241\001\n\031stOpenMonsterWindowResult\022\016\n"
    "\006bossLv\030\001 \001(\r\022\016\n\006bossHp\030\002 \001(\r\022\014\n\004time\030\003 "
    "\001(\r\022\022\n\nattackTime\030\004 \001(\r\022\017\n\007buyTime\030\005 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\346\001\"W\n\022stReqAttackMonster\022\016\n\006cha"
    "rID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nPr"
    "otoFunID\022\n\n\005FunID\020\347\001\"\276\001\n\025stAttackMonster"
    "Result\0228\n\006result\030\001 \001(\0162(.MiscProto.stAtt"
    "ackMonsterResult.eResult\"8\n\007eResult\022\014\n\010e"
    "Success\020\001\022\020\n\014eInner_Error\020\002\022\r\n\teTime_Out"
    "\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunI"
    "D\022\n\n\005FunID\020\350\001\"W\n\022stReqBuyAttackTime\022\016\n\006c"
    "harID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\351\001\"\356\001\n\025stBuyAttackTi"
    "meResult\0228\n\006result\030\001 \001(\0162(.MiscProto.stB"
    "uyAttackTimeResult.eResult\"h\n\007eResult\022\014\n"
    "\010eSuccess\020\001\022\020\n\014eInner_Error\020\002\022\027\n\023eDiamon"
    "d_Not_Enough\020\003\022\016\n\neMax_Count\020\004\022\024\n\020eItem_"
    "Not_Enough\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n"
    "\nProtoFunID\022\n\n\005FunID\020\352\001\"[\n\026stReqAKeyAtta"
    "ckMonster\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\353\001\"\333\001\n"
    "\031stAKeyAttackMonsterResult\022<\n\006result\030\001 \001"
    "(\0162,.MiscProto.stAKeyAttackMonsterResult"
    ".eResult\"M\n\007eResult\022\014\n\010eSuccess\020\001\022\020\n\014eIn"
    "ner_Error\020\002\022\r\n\teTime_Out\020\003\022\023\n\017eVip_Lv_To"
    "o_Low\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProt"
    "oFunID\022\n\n\005FunID\020\354\001\"+\n\014stSynTipItem\022\016\n\006it"
    "emID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"o\n\017stObtainItemT"
    "ip\022)\n\010getItems\030\001 \003(\0132\027.MiscProto.stSynTi"
    "pItem\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\355\001\"\216\001\n\014stUserOnline\022\021\n\tmou"
    "ntList\030\001 \003(\r\022\025\n\rbattleMountID\030\002 \001(\r\022\020\n\010i"
    "sFollow\030\003 \001(\010\022\017\n\007mountLv\030\004 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\356"
    "\001\",\n\021stConsumeItemInfo\022\n\n\002id\030\001 \001(\004\022\013\n\003nu"
    "m\030\002 \001(\r\"\235\001\n\021stReqMountLevelUp\022%\n\004type\030\001 "
    "\001(\0162\027.MiscProto.eLevelUpType\022.\n\010itemInfo"
    "\030\002 \001(\0132\034.MiscProto.stConsumeItemInfo\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005F"
    "unID\020\357\001\"\375\001\n\024stMountLevelUpResult\0227\n\006resu"
    "lt\030\001 \001(\0162\'.MiscProto.stMountLevelUpResul"
    "t.eResult\022\r\n\005level\030\002 \001(\r\022\013\n\003exp\030\003 \001(\r\"]\n"
    "\007eResult\022\014\n\010eSuccess\020\001\022\020\n\014eInner_Error\020\002"
    "\022\016\n\neMax_Level\020\003\022\023\n\017eRes_Not_Enough\020\004\022\r\n"
    "\teStar_max\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n"
    "\nProtoFunID\022\n\n\005FunID\020\360\001\"Q\n\020stReqButtleMo"
    "unt\022\n\n\002id\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\361\001\"\341\001\n\023stButtleM"
    "ountResult\0226\n\006result\030\001 \001(\0162&.MiscProto.s"
    "tButtleMountResult.eResult\022\017\n\007mountId\030\002 "
    "\001(\r\"N\n\007eResult\022\014\n\010eSuccess\020\001\022\020\n\014eInner_E"
    "rror\020\002\022\022\n\016eIs_Not_Unlock\020\003\022\017\n\013eHas_Battl"
    "e\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFun"
    "ID\022\n\n\005FunID\020\362\001\"U\n\020stReqMountFollow\022\016\n\006ch"
    "arId\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nP"
    "rotoFunID\022\n\n\005FunID\020\363\001\"\321\001\n\023stMountFollowR"
    "esult\0226\n\006result\030\001 \001(\0162&.MiscProto.stMoun"
    "tFollowResult.eResult\022\020\n\010isFollow\030\002 \001(\010\""
    "=\n\007eResult\022\014\n\010eSuccess\020\001\022\020\n\014eInner_Error"
    "\020\002\022\022\n\016eIs_Not_Battle\020\003\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\364\001\"V\n\020stR"
    "eqMountUnreal\022\017\n\007mountId\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\365"
    "\001\"\212\002\n\023stMountUnrealResult\0226\n\006result\030\001 \001("
    "\0162&.MiscProto.stMountUnrealResult.eResul"
    "t\022\017\n\007mountId\030\002 \001(\r\022\022\n\noldMountId\030\003 \001(\r\"c"
    "\n\007eResult\022\014\n\010eSuccess\020\001\022\020\n\014eInner_Error\020"
    "\002\022\022\n\016eCond_Not_Meet\020\003\022\023\n\017eRes_Not_Enough"
    "\020\004\022\017\n\013eMax_Unreal\020\005\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\366\001\"]\n\030stReqO"
    "penMountGrowWindow\022\016\n\006charId\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005Fun"
    "ID\020\367\001\"|\n\033stOpenMountGrowWindowResult\022\r\n\005"
    "level\030\001 \001(\r\022\013\n\003exp\030\002 \001(\r\022\016\n\006battle\030\003 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\370\001\"T\n\017stRefreshBattle\022\016\n\006battle"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProto"
    "FunID\022\n\n\005FunID\020\371\001\"1\n\022stLevelWflfareInfo\022"
    "\r\n\005level\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"\213\001\n\031stHasGo"
    "tRewardWflfareInfo\022+\n\004info\030\001 \003(\0132\035.MiscP"
    "roto.stLevelWflfareInfo\022\016\n\006isOpen\030\002 \001(\010\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n"
    "\n\005FunID\020\372\001\"e\n\023stReqReceiveWflfare\022\r\n\005lev"
    "el\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\373\001\"\363\001\n\026st"
    "ReceiveWflfareResult\0229\n\006result\030\001 \001(\0162).M"
    "iscProto.stReceiveWflfareResult.eResult\""
    "k\n\007eResult\022\014\n\010eSuccess\020\001\022\020\n\014eInner_Error"
    "\020\002\022\023\n\017eHas_Got_Reward\020\003\022\027\n\023eDiamond_Not_"
    "Enough\020\004\022\022\n\016eLevel_Too_Low\020\005\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\010\"\030\n\nProtoFunID\022\n\n\005FunID\020\374\001\""
    "^\n\014stReqPaySign\022\r\n\005sdkid\030\001 \001(\005\022\014\n\004data\030\002"
    " \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoFu"
    "nID\022\n\n\005FunID\020\375\001\"O\n\014stRetPaySign\022\014\n\004sign\030"
    "\001 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\010\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\376\001\"\177\n\016stReqServerPay\022\r\n\005sd"
    "kid\030\001 \001(\r\022\016\n\006itemId\030\002 \001(\r\022\r\n\005money\030\003 \001(\r"
    "\022\r\n\005token\030\004 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\n"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020\001\"\337\001\n\016stRetServe"
    "rPay\0221\n\006result\030\001 \001(\0162!.MiscProto.stRetSe"
    "rverPay.eResult\022\017\n\007orderId\030\002 \001(\t\"W\n\007eRes"
    "ult\022\014\n\010eSuccess\020\001\022\020\n\014eInner_Error\020\002\022\025\n\021e"
    "Money_Not_Enough\020\003\022\t\n\005eItem\020\004\022\n\n\006eMoney\020"
    "\005\"\027\n\nProtoModID\022\t\n\005ModID\020\n\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020\002\"~\n\021stReqSummonReward\022\017\n\007coun"
    "tId\030\001 \001(\r\022\022\n\nsummonType\030\002 \001(\r\022\022\n\nrewardT"
    "ype\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\n\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020\003\"\247\002\n\024stSummonRewardRe"
    "sult\0227\n\006result\030\001 \001(\0162\'.MiscProto.stSummo"
    "nRewardResult.eResult\022\017\n\007countId\030\002 \001(\r\022\022"
    "\n\nsummonType\030\003 \001(\r\022\022\n\nrewardType\030\004 \001(\r\"k"
    "\n\007eResult\022\014\n\010eSUCCESS\020\001\022\023\n\017eHAS_GET_REWA"
    "RD\020\002\022\034\n\030eHAS_NOT_BUY_INVEST_PLAN\020\003\022\r\n\teB"
    "AG_FULL\020\004\022\020\n\014eOTHER_ERROR\020\005\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\n\"\027\n\nProtoFunID\022\t\n\005FunID\020\004\"W\n"
    "\017stReqSummonData\022\022\n\nsummonType\030\001 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\n\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\005\"\373\001\n\022stSummonDataResult\022\030\n\020hasBuyS"
    "ummonment\030\001 \001(\010\022\034\n\024freeSummonRewardList\030"
    "\002 \003(\r\022 \n\030rechargeSummonRewardList\030\003 \003(\r\022"
    "\022\n\nsummonType\030\004 \001(\r\022\017\n\007countId\030\005 \001(\r\022\020\n\010"
    "countNum\030\006 \001(\r\022\021\n\tbeginTime\030\007 \001(\r\022\017\n\007end"
    "Time\030\010 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\n\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020\006\"\347\001\n\025stBuySummonPlan"
    "Result\0228\n\006result\030\001 \001(\0162(.MiscProto.stBuy"
    "SummonPlanResult.eResult\022\r\n\005index\030\002 \001(\t\""
    "S\n\007eResult\022\014\n\010eSUCCESS\020\001\022\027\n\023eDIAMOND_NOT"
    "_ENOGUH\020\002\022\023\n\017eVIP_LV_TOO_LOW\020\003\022\014\n\010eHAS_B"
    "UY\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\n\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\007\"l\n\022stReqRechargeCheck\022\022\n\n"
    "rechargeId\030\001 \001(\r\022\020\n\010buyCount\030\002 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\n\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\010\"\314\001\n\025stRechargeCheckResult\0228\n\006result"
    "\030\001 \001(\0162(.MiscProto.stRechargeCheckResult"
    ".eResult\"G\n\007eResult\022\014\n\010eSuccess\020\001\022\r\n\teBa"
    "g_Full\020\002\022\r\n\teNo_Times\020\003\022\020\n\014eOther_Error\020"
    "\004\"\027\n\nProtoModID\022\t\n\005ModID\020\n\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020\t*^\n\reAttachStatus\022\025\n\021eATTACH_"
    "STATUS_NO\020\000\022\032\n\026eATTACH_STATUS_UNFETCH\020\001\022"
    "\032\n\026eATTACH_STATUS_FETCHED\020\002*>\n\teMailType"
    "\022\024\n\020MAIL_TYPE_SYSTEM\020\001\022\033\n\027MAIL_TYPE_SYST"
    "EM_ONEDAY\020\002*\356\001\n\teDrawType\022\022\n\016eDrawType_G"
    "old\020\001\022\024\n\020eDrawType_10Gold\020\002\022\025\n\021eDrawType"
    "_Diamond\020\003\022\027\n\023eDrawType_10Diamond\020\004\022\026\n\022e"
    "DrawType_DrawHero\020\005\022\030\n\024eDrawType_10DrawH"
    "ero\020\006\022\032\n\026eDrawType_TreasureDraw\020\007\022\034\n\030eDr"
    "awType_10TreasureDraw\020\010\022\033\n\027eDrawType_Dev"
    "ilCallDraw\020\t*\252\034\n\reTreasureType\022\034\n\026eTreas"
    "ure_Yuntie1000_1\020\231\371\007\022\034\n\026eTreasure_Yuntie"
    "1000_2\020\232\371\007\022\034\n\026eTreasure_Yuntie3000_1\020\341\372\007"
    "\022\034\n\026eTreasure_Yuntie3000_2\020\342\372\007\022\034\n\026eTreas"
    "ure_Yuntie3000_3\020\343\372\007\022\034\n\026eTreasure_Yuntie"
    "5000_1\020\201\201\010\022\034\n\026eTreasure_Yuntie5000_2\020\202\201\010"
    "\022\034\n\026eTreasure_Yuntie5000_3\020\203\201\010\022\034\n\026eTreas"
    "ure_Yuntie5000_4\020\204\201\010\022\032\n\024eTreasure_Jingli"
    "an_1\020\213\201\010\022\032\n\024eTreasure_Jinglian_2\020\214\201\010\022\032\n\024"
    "eTreasure_Jinglian_3\020\215\201\010\022$\n\036eTreasure_Sm"
    "all_Jinglian_Mine1\020\323\202\010\022$\n\036eTreasure_Smal"
    "l_Jinglian_Mine2\020\324\202\010\022$\n\036eTreasure_Small_"
    "Jinglian_Mine3\020\325\202\010\022\"\n\034eTreasure_Mid_Jing"
    "lian_Mine1\020\233\204\010\022\"\n\034eTreasure_Mid_Jinglian"
    "_Mine2\020\234\204\010\022\"\n\034eTreasure_Mid_Jinglian_Min"
    "e3\020\235\204\010\022\"\n\034eTreasure_Mid_Jinglian_Mine4\020\236"
    "\204\010\022\"\n\034eTreasure_Big_Jinglian_Mine1\020\343\205\010\022\""
    "\n\034eTreasure_Big_Jinglian_Mine2\020\344\205\010\022\"\n\034eT"
    "reasure_Big_Jinglian_Mine3\020\345\205\010\022\"\n\034eTreas"
    "ure_Big_Jinglian_Mine4\020\346\205\010\022\"\n\034eTreasure_"
    "Big_Jinglian_Mine5\020\347\205\010\022\036\n\030eTreasure_Fuwe"
    "n_2Class_1\020\255\371\007\022\036\n\030eTreasure_Fuwen_2Class"
    "_2\020\256\371\007\022\036\n\030eTreasure_Fuwen_2Class_3\020\257\371\007\022\037"
    "\n\031eTreasure_Fuwen_10Class_1\020\315\377\007\022\037\n\031eTrea"
    "sure_Fuwen_10Class_2\020\316\377\007\022\037\n\031eTreasure_Fu"
    "wen_10Class_3\020\317\377\007\022\037\n\031eTreasure_Fuwen_10C"
    "lass_4\020\320\377\007\022\037\n\031eTreasure_Fuwen_18Class_1\020"
    "\355\205\010\022\037\n\031eTreasure_Fuwen_18Class_2\020\356\205\010\022\037\n\031"
    "eTreasure_Fuwen_18Class_3\020\357\205\010\022\037\n\031eTreasu"
    "re_Fuwen_18Class_4\020\360\205\010\022\037\n\031eTreasure_Fuwe"
    "n_18Class_5\020\361\205\010\022\037\n\031eTreasure_Fuwen_20Cla"
    "ss_1\020\265\207\010\022\037\n\031eTreasure_Fuwen_20Class_2\020\266\207"
    "\010\022\037\n\031eTreasure_Fuwen_20Class_3\020\267\207\010\022\037\n\031eT"
    "reasure_Fuwen_20Class_4\020\270\207\010\022\037\n\031eTreasure"
    "_Fuwen_20Class_5\020\271\207\010\022\037\n\031eTreasure_Fuwen_"
    "26Class_1\020\215\214\010\022\037\n\031eTreasure_Fuwen_26Class"
    "_2\020\216\214\010\022\037\n\031eTreasure_Fuwen_26Class_3\020\217\214\010\022"
    "\037\n\031eTreasure_Fuwen_26Class_4\020\220\214\010\022\037\n\031eTre"
    "asure_Fuwen_26Class_5\020\221\214\010\022\037\n\031eTreasure_F"
    "uwen_26Class_6\020\222\214\010\022!\n\033eTreasure_Fuwen_28"
    "Class_1_1\020\325\215\010\022!\n\033eTreasure_Fuwen_28Class"
    "_1_2\020\326\215\010\022!\n\033eTreasure_Fuwen_28Class_1_3\020"
    "\327\215\010\022!\n\033eTreasure_Fuwen_28Class_1_4\020\330\215\010\022!"
    "\n\033eTreasure_Fuwen_28Class_1_5\020\331\215\010\022!\n\033eTr"
    "easure_Fuwen_28Class_1_6\020\332\215\010\022!\n\033eTreasur"
    "e_Fuwen_28Class_2_1\020\351\215\010\022!\n\033eTreasure_Fuw"
    "en_28Class_2_2\020\352\215\010\022!\n\033eTreasure_Fuwen_28"
    "Class_2_3\020\353\215\010\022!\n\033eTreasure_Fuwen_28Class"
    "_2_4\020\354\215\010\022!\n\033eTreasure_Fuwen_28Class_2_5\020"
    "\355\215\010\022!\n\033eTreasure_Fuwen_28Class_2_6\020\356\215\010\022!"
    "\n\033eTreasure_Fuwen_28Class_3_1\020\363\215\010\022!\n\033eTr"
    "easure_Fuwen_28Class_3_2\020\364\215\010\022!\n\033eTreasur"
    "e_Fuwen_28Class_3_3\020\365\215\010\022!\n\033eTreasure_Fuw"
    "en_28Class_3_4\020\366\215\010\022!\n\033eTreasure_Fuwen_28"
    "Class_3_5\020\367\215\010\022!\n\033eTreasure_Fuwen_28Class"
    "_3_6\020\370\215\010\022\037\n\031eTreasure_Fuwen_30Class_1\020\235\217"
    "\010\022\037\n\031eTreasure_Fuwen_30Class_2\020\236\217\010\022\037\n\031eT"
    "reasure_Fuwen_30Class_3\020\237\217\010\022\037\n\031eTreasure"
    "_Fuwen_30Class_4\020\240\217\010\022\037\n\031eTreasure_Fuwen_"
    "30Class_5\020\241\217\010\022\037\n\031eTreasure_Fuwen_30Class"
    "_6\020\242\217\010\022!\n\033eTreasure_Small_Exp_Fushi_1\020\267\371"
    "\007\022!\n\033eTreasure_Small_Exp_Fushi_2\020\270\371\007\022!\n\033"
    "eTreasure_Small_Exp_Fushi_3\020\271\371\007\022\037\n\031eTrea"
    "sure_Mid_Exp_Fushi_1\020\307\374\007\022\037\n\031eTreasure_Mi"
    "d_Exp_Fushi_2\020\310\374\007\022\037\n\031eTreasure_Mid_Exp_F"
    "ushi_3\020\311\374\007\022\037\n\031eTreasure_Mid_Exp_Fushi_4\020"
    "\312\374\007\022\037\n\031eTreasure_Big_Exp_Fushi_1\020\237\201\010\022\037\n\031"
    "eTreasure_Big_Exp_Fushi_2\020\240\201\010\022\037\n\031eTreasu"
    "re_Big_Exp_Fushi_3\020\241\201\010\022\037\n\031eTreasure_Big_"
    "Exp_Fushi_4\020\242\201\010\022\037\n\031eTreasure_Big_Exp_Fus"
    "hi_5\020\243\201\010\022!\n\033eTreasure_GoldCoins_Card2_1\020"
    "\337\371\007\022!\n\033eTreasure_GoldCoins_Card2_2\020\340\371\007\022!"
    "\n\033eTreasure_GoldCoins_Card2_3\020\341\371\007\022!\n\033eTr"
    "easure_GoldCoins_Card5_1\020\247\373\007\022!\n\033eTreasur"
    "e_GoldCoins_Card5_2\020\250\373\007\022!\n\033eTreasure_Gol"
    "dCoins_Card5_3\020\251\373\007\022!\n\033eTreasure_GoldCoin"
    "s_Card5_4\020\252\373\007\022\"\n\034eTreasure_GoldCoins_Car"
    "d10_1\020\307\201\010\022\"\n\034eTreasure_GoldCoins_Card10_"
    "2\020\310\201\010\022\"\n\034eTreasure_GoldCoins_Card10_3\020\311\201"
    "\010\022\"\n\034eTreasure_GoldCoins_Card10_4\020\312\201\010\022\"\n"
    "\034eTreasure_GoldCoins_Card10_5\020\313\201\010\022 \n\032eTr"
    "easure_Diamond_Card10_1\020\351\371\007\022 \n\032eTreasure"
    "_Diamond_Card10_2\020\352\371\007\022 \n\032eTreasure_Diamo"
    "nd_Card10_3\020\353\371\007\022 \n\032eTreasure_Diamond_Car"
    "d20_1\020\261\373\007\022 \n\032eTreasure_Diamond_Card20_2\020"
    "\262\373\007\022 \n\032eTreasure_Diamond_Card20_3\020\263\373\007\022 \n"
    "\032eTreasure_Diamond_Card20_4\020\264\373\007\022 \n\032eTrea"
    "sure_Diamond_Card50_1\020\321\201\010\022 \n\032eTreasure_D"
    "iamond_Card50_2\020\322\201\010\022 \n\032eTreasure_Diamond"
    "_Card50_3\020\323\201\010\022 \n\032eTreasure_Diamond_Card5"
    "0_4\020\324\201\010\022 \n\032eTreasure_Diamond_Card50_5\020\325\201"
    "\010*\240\004\n\014eCombineItem\022\021\n\reCombine_None\020\000\022\031\n"
    "\023eCombine_Yuntie1000\020\302\217\006\022\031\n\023eCombine_Yun"
    "tie3000\020\212\221\006\022\031\n\023eCombine_Yuntie5000\020\252\227\006\022\027"
    "\n\021eCombine_Jinglian\020\245\252\007\022\"\n\034eCombine_Smal"
    "l_Jinglian_Mine\020\326\226\006\022 \n\032eCombine_Mid_Jing"
    "lian_Mine\020\236\230\006\022 \n\032eCombine_Big_Jinglian_M"
    "ine\020\346\231\006\022\033\n\025eCombine_2Class_Fuwen\020\210\321$\022\034\n\026"
    "eCombine_10Class_Fuwen\020\250\327$\022\034\n\026eCombine_1"
    "8Class_Fuwen\020\310\335$\022\034\n\026eCombine_20Class_Fuw"
    "en\020\220\337$\022\034\n\026eCombine_26Class_Fuwen\020\350\343$\022\034\n\026"
    "eCombine_28Class_Fuwen\020\260\345$\022\034\n\026eCombine_3"
    "0Class_Fuwen\020\370\346$\022\036\n\030eCombine_Small_Exp_F"
    "ushi\020\330\327\'\022\034\n\026eCombine_Mid_Exp_Fushi\020\350\332\'\022\034"
    "\n\026eCombine_Big_Exp_Fushi\020\300\337\'*;\n\014eCapture"
    "Type\022\024\n\020eOneTime_Capture\020\001\022\025\n\021eFiveTime_"
    "Capture\020\002*\373\002\n\reActivityType\022\031\n\025eActivity"
    "Type_Invalid\020\000\022\031\n\025eActivityType_Consume\020"
    "\001\022\033\n\027eActivityType_CumuLogin\020\002\022\"\n\036eActiv"
    "ityType_SpecialTimeLogin\020\003\022\032\n\026eActivityT"
    "ype_Exchange\020\004\022\037\n\033eActivityType_WeeklyCo"
    "nsume\020\005\022#\n\037eActivityType_OneDayOneRechar"
    "ge\020\006\022#\n\037eActivityType_OneDayAccRecharge\020"
    "\007\022&\n\"eActivityType_OneDayRecyleRecharge\020"
    "\010\022\"\n\036eActivityType_MultiAccRecharge\020\t\022 \n"
    "\034eActivityType_AccRechargeDay\020\n*v\n\021eSeve"
    "nDayGoalType\022\026\n\022eSD_GoalType_Login\020\001\022\025\n\021"
    "eSD_GoalType_Gift\020\002\022\030\n\024eSD_GoalType_Modu"
    "le1\020\003\022\030\n\024eSD_GoalType_Module2\020\004*\276\004\n\reSev"
    "enDayGoal\022\026\n\022eSD_Goal_Login_Num\020\001\022\033\n\027eSD"
    "_Goal_Total_Recharge\020\002\022\032\n\026eSD_Goal_GitfB"
    "ag_Price\020\003\022\036\n\032eSD_Goal_MainTask_Star_Num"
    "\020\004\022 \n\034eSD_Goal_All_Skill_Raise_Num\020\005\022\037\n\033"
    "eSD_Goal_Arena_History_Rank\020\006\022 \n\034eSD_Goa"
    "l_All_Equip_Refine_Lv\020\007\022\031\n\025eSD_Goal_Team"
    "_Copymap\020\010\022\037\n\033eSD_Goal_All_Equip_Raise_L"
    "v\020\t\022\034\n\030eSD_Goal_One_One_Win_Num\020\n\022\037\n\033eSD"
    "_Goal_Heishi_Refresh_Num\020\013\022\034\n\030eSD_Goal_R"
    "ealTime_PK_Num\020\014\022\035\n\031eSD_Goal_Fuwen_Purpl"
    "e_Num\020\r\022\032\n\026eSD_Goal_Guild_Hall_Lv\020\016\022\024\n\020e"
    "SD_Goal_Role_Lv\020\017\022\031\n\025eSD_Goal_Battle_Pow"
    "er\020\020\022\025\n\021eSD_Goal_Draw_num\020\021\022\035\n\031eSD_Goal_"
    "Hero_EvolutionLv\020\022\022\034\n\030eSD_Goal_Consume_D"
    "iamond\020\023*3\n\014eLevelUpType\022\021\n\reNormalLeveU"
    "p\020\001\022\020\n\014eAKeyLevelUp\020\002", 50941);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Misc.proto", &protobuf_RegisterTypes);
  stSynMainSnalInfo::default_instance_ = new stSynMainSnalInfo();
  stSynMailAttach::default_instance_ = new stSynMailAttach();
  stSynDetailMailInfo::default_instance_ = new stSynDetailMailInfo();
  stSynAllMail::default_instance_ = new stSynAllMail();
  stReqReadMail::default_instance_ = new stReqReadMail();
  stRetMailInfo::default_instance_ = new stRetMailInfo();
  stReqFetchAttach::default_instance_ = new stReqFetchAttach();
  stFetchAttachResult::default_instance_ = new stFetchAttachResult();
  stReceiveMail::default_instance_ = new stReceiveMail();
  stReqRewardInfo::default_instance_ = new stReqRewardInfo();
  stRetRewardInfo::default_instance_ = new stRetRewardInfo();
  stReqSignReward::default_instance_ = new stReqSignReward();
  stGetSignRewardResult::default_instance_ = new stGetSignRewardResult();
  stReqOpenSvrReward::default_instance_ = new stReqOpenSvrReward();
  stGetOpenSvrRewardResult::default_instance_ = new stGetOpenSvrRewardResult();
  stReqLvReward::default_instance_ = new stReqLvReward();
  stLvRewardResult::default_instance_ = new stLvRewardResult();
  stReqOnlineReward::default_instance_ = new stReqOnlineReward();
  stGetOnlineRewardResult::default_instance_ = new stGetOnlineRewardResult();
  stBuyStarInfo::default_instance_ = new stBuyStarInfo();
  stReqBuyStar::default_instance_ = new stReqBuyStar();
  stBuyStarResult::default_instance_ = new stBuyStarResult();
  ReqOpenDrawWindow::default_instance_ = new ReqOpenDrawWindow();
  stDrawWindowInfo::default_instance_ = new stDrawWindowInfo();
  stReqDraw::default_instance_ = new stReqDraw();
  stSynDrawItem::default_instance_ = new stSynDrawItem();
  stDrawResult::default_instance_ = new stDrawResult();
  stSynMyTitle::default_instance_ = new stSynMyTitle();
  stActiveOneTitle::default_instance_ = new stActiveOneTitle();
  stActiveTitleResult::default_instance_ = new stActiveTitleResult();
  stObtainOneTitle::default_instance_ = new stObtainOneTitle();
  stBuyInvestPlan::default_instance_ = new stBuyInvestPlan();
  stBuyInvestPlanResult::default_instance_ = new stBuyInvestPlanResult();
  stReqInvestPlanReward::default_instance_ = new stReqInvestPlanReward();
  stInvestPlanRewardResult::default_instance_ = new stInvestPlanRewardResult();
  stReqEatDinner::default_instance_ = new stReqEatDinner();
  stEatDinnerResult::default_instance_ = new stEatDinnerResult();
  stSynActivityData::default_instance_ = new stSynActivityData();
  stReqOpenCaptureTreasure::default_instance_ = new stReqOpenCaptureTreasure();
  stSynCaptureTreasureInfo::default_instance_ = new stSynCaptureTreasureInfo();
  stRetCaptureTreasure::default_instance_ = new stRetCaptureTreasure();
  stReqCombineTreasure::default_instance_ = new stReqCombineTreasure();
  stCombineTreasureResult::default_instance_ = new stCombineTreasureResult();
  stBuyPeaceModuleTime::default_instance_ = new stBuyPeaceModuleTime();
  stBuyPeaceModuleTimeResult::default_instance_ = new stBuyPeaceModuleTimeResult();
  stCaptureTreasureUserInfo::default_instance_ = new stCaptureTreasureUserInfo();
  stReqChallengeUserList::default_instance_ = new stReqChallengeUserList();
  stRetChallengeUserList::default_instance_ = new stRetChallengeUserList();
  stCaptureUserTreasure::default_instance_ = new stCaptureUserTreasure();
  stSynCaptureReward::default_instance_ = new stSynCaptureReward();
  stCaptureUserTreasureResult::default_instance_ = new stCaptureUserTreasureResult();
  stSynTreasureNum::default_instance_ = new stSynTreasureNum();
  stCancelActiveTitle::default_instance_ = new stCancelActiveTitle();
  stCancelActiveTitleResult::default_instance_ = new stCancelActiveTitleResult();
  stSynSpriteInfo::default_instance_ = new stSynSpriteInfo();
  stSynAllSprite::default_instance_ = new stSynAllSprite();
  stReqUnlockedSprite::default_instance_ = new stReqUnlockedSprite();
  stUnlockedSpriteResult::default_instance_ = new stUnlockedSpriteResult();
  stAddSprite::default_instance_ = new stAddSprite();
  stReqLevelupSprite::default_instance_ = new stReqLevelupSprite();
  stLevelupSpriteResult::default_instance_ = new stLevelupSpriteResult();
  stSpriteFollowMaster::default_instance_ = new stSpriteFollowMaster();
  stSpriteFollowMasterResult::default_instance_ = new stSpriteFollowMasterResult();
  stReqAvaibleActivity::default_instance_ = new stReqAvaibleActivity();
  stSynActivityStepReward::default_instance_ = new stSynActivityStepReward();
  stSynActivityStepOptionalReward::default_instance_ = new stSynActivityStepOptionalReward();
  stSynActivityStepInfo::default_instance_ = new stSynActivityStepInfo();
  stSynActivityInfo::default_instance_ = new stSynActivityInfo();
  stRetAvaibleActivity::default_instance_ = new stRetAvaibleActivity();
  stReqAcitivityReward::default_instance_ = new stReqAcitivityReward();
  stActivityRewardResult::default_instance_ = new stActivityRewardResult();
  stReqWorldBossDamageRank::default_instance_ = new stReqWorldBossDamageRank();
  stWorldBossDamageSortItem::default_instance_ = new stWorldBossDamageSortItem();
  stRetWorldBossDamageRank::default_instance_ = new stRetWorldBossDamageRank();
  stReqOpenWorldBossWin::default_instance_ = new stReqOpenWorldBossWin();
  stRetOpenWorldBossWin::default_instance_ = new stRetOpenWorldBossWin();
  stReqBossWorldMatch::default_instance_ = new stReqBossWorldMatch();
  stRetBossWorldMatch::default_instance_ = new stRetBossWorldMatch();
  stReqClearWorldBossActivityCD::default_instance_ = new stReqClearWorldBossActivityCD();
  stClearWorldBossActivityCDResult::default_instance_ = new stClearWorldBossActivityCDResult();
  stReqRaiseDamageInWorldBoss::default_instance_ = new stReqRaiseDamageInWorldBoss();
  stRaiseDamageInWorldBossResult::default_instance_ = new stRaiseDamageInWorldBossResult();
  stCancelWorldBossMatch::default_instance_ = new stCancelWorldBossMatch();
  stCancelWorldBossMatchResult::default_instance_ = new stCancelWorldBossMatchResult();
  stQueryDrawHeroActivity::default_instance_ = new stQueryDrawHeroActivity();
  stRetDrawHeroActivityInfo::default_instance_ = new stRetDrawHeroActivityInfo();
  stReqDrawHeroScoreReward::default_instance_ = new stReqDrawHeroScoreReward();
  stDrawHeroScoreRewardRet::default_instance_ = new stDrawHeroScoreRewardRet();
  stReqDrawHeroRankReward::default_instance_ = new stReqDrawHeroRankReward();
  stDrawHeroRankReward::default_instance_ = new stDrawHeroRankReward();
  stReqCompensationList::default_instance_ = new stReqCompensationList();
  stCompensationItem::default_instance_ = new stCompensationItem();
  stCompensationInfo::default_instance_ = new stCompensationInfo();
  stRetCompensationList::default_instance_ = new stRetCompensationList();
  stReqGotCompensation::default_instance_ = new stReqGotCompensation();
  stGotCompensationResult::default_instance_ = new stGotCompensationResult();
  stReq7DayActivityInfo::default_instance_ = new stReq7DayActivityInfo();
  stSynSDGoalInfo::default_instance_ = new stSynSDGoalInfo();
  stRet7DayActivityInfo::default_instance_ = new stRet7DayActivityInfo();
  stReqSevenDayReward::default_instance_ = new stReqSevenDayReward();
  stSevenDayRewardRet::default_instance_ = new stSevenDayRewardRet();
  stSevenDayHasRewardTip::default_instance_ = new stSevenDayHasRewardTip();
  stAppStoreCfg::default_instance_ = new stAppStoreCfg();
  stOpenWindowTip::default_instance_ = new stOpenWindowTip();
  stReqRechargeActivityList::default_instance_ = new stReqRechargeActivityList();
  stSynRechargeActivityInfo::default_instance_ = new stSynRechargeActivityInfo();
  stRetRechargeActivityList::default_instance_ = new stRetRechargeActivityList();
  stReqRechargeActivtiyReward::default_instance_ = new stReqRechargeActivtiyReward();
  stRetRechargeActivityReward::default_instance_ = new stRetRechargeActivityReward();
  stSynInvestigation::default_instance_ = new stSynInvestigation();
  stSynAllInvestigation::default_instance_ = new stSynAllInvestigation();
  stInvestAnswer::default_instance_ = new stInvestAnswer();
  stReqInvestgationReward::default_instance_ = new stReqInvestgationReward();
  stInvestgationRewardResult::default_instance_ = new stInvestgationRewardResult();
  stReqActivityShop::default_instance_ = new stReqActivityShop();
  stActivityShopList::default_instance_ = new stActivityShopList();
  stLuchShopInfo::default_instance_ = new stLuchShopInfo();
  stSynLuckShopTodayRecharge::default_instance_ = new stSynLuckShopTodayRecharge();
  stReqLuckShopReward::default_instance_ = new stReqLuckShopReward();
  stLuckShopRewardResult::default_instance_ = new stLuckShopRewardResult();
  stSaveOpenLuckShopWinTime::default_instance_ = new stSaveOpenLuckShopWinTime();
  stLuckShopRechargeMeetCondTime::default_instance_ = new stLuckShopRechargeMeetCondTime();
  stReqOpenGuardWin::default_instance_ = new stReqOpenGuardWin();
  stGuardEnemy::default_instance_ = new stGuardEnemy();
  stGuardBaseInfo::default_instance_ = new stGuardBaseInfo();
  stGuardDetailInfo::default_instance_ = new stGuardDetailInfo();
  stGuardWinInfo::default_instance_ = new stGuardWinInfo();
  stResetInterceptCD::default_instance_ = new stResetInterceptCD();
  stResetInterceptCDResult::default_instance_ = new stResetInterceptCDResult();
  stResetInterceptNum::default_instance_ = new stResetInterceptNum();
  stResetInterceptNumResult::default_instance_ = new stResetInterceptNumResult();
  stReqGuardDetailInfo::default_instance_ = new stReqGuardDetailInfo();
  stRetGuardDetailInfo::default_instance_ = new stRetGuardDetailInfo();
  stReqIntercept::default_instance_ = new stReqIntercept();
  stIntercerptResult::default_instance_ = new stIntercerptResult();
  stReqGuard::default_instance_ = new stReqGuard();
  stRetGuardWin::default_instance_ = new stRetGuardWin();
  stReqSummonHighQualityGuard::default_instance_ = new stReqSummonHighQualityGuard();
  stSummonHighQualityGuardResult::default_instance_ = new stSummonHighQualityGuardResult();
  stReqGuardInspired::default_instance_ = new stReqGuardInspired();
  stGuardInspiredResult::default_instance_ = new stGuardInspiredResult();
  stReqRefreshGuardQuality::default_instance_ = new stReqRefreshGuardQuality();
  stRetRefreshGuardQualityResult::default_instance_ = new stRetRefreshGuardQualityResult();
  stReqCanHelpGuardFriend::default_instance_ = new stReqCanHelpGuardFriend();
  stHelpGaurdFriendInfo::default_instance_ = new stHelpGaurdFriendInfo();
  stRetCanHelpGuardFriend::default_instance_ = new stRetCanHelpGuardFriend();
  stInviteFriendForHelpGuard::default_instance_ = new stInviteFriendForHelpGuard();
  stInviteFriendForHelpGuardResult::default_instance_ = new stInviteFriendForHelpGuardResult();
  stAskFriendHelpGuard::default_instance_ = new stAskFriendHelpGuard();
  stReplyHelpGuard::default_instance_ = new stReplyHelpGuard();
  stReplyHelpGuardResult::default_instance_ = new stReplyHelpGuardResult();
  stUserAgreeHelpGuard::default_instance_ = new stUserAgreeHelpGuard();
  stBeginGuard::default_instance_ = new stBeginGuard();
  stBeginGuardResult::default_instance_ = new stBeginGuardResult();
  stInterceptInfo::default_instance_ = new stInterceptInfo();
  stReqInterceptInfo::default_instance_ = new stReqInterceptInfo();
  stRetInterceptInfo::default_instance_ = new stRetInterceptInfo();
  stRechargeActivityInfoItem::default_instance_ = new stRechargeActivityInfoItem();
  stNotifyRechargeActivityInfo::default_instance_ = new stNotifyRechargeActivityInfo();
  stLuckShopRefreshResult::default_instance_ = new stLuckShopRefreshResult();
  stNotifyGuardFinish::default_instance_ = new stNotifyGuardFinish();
  stNotifyFriendGuardFinish::default_instance_ = new stNotifyFriendGuardFinish();
  stNotifyInterceptResult::default_instance_ = new stNotifyInterceptResult();
  stReplyNotifyIntercept::default_instance_ = new stReplyNotifyIntercept();
  stQuickFinishGuard::default_instance_ = new stQuickFinishGuard();
  stQuickFinishGuardResult::default_instance_ = new stQuickFinishGuardResult();
  stNotifyDelTitle::default_instance_ = new stNotifyDelTitle();
  stBeInterceptTip::default_instance_ = new stBeInterceptTip();
  stOnlineNotifyNewInterceptInfo::default_instance_ = new stOnlineNotifyNewInterceptInfo();
  stReqOpenLimitFashionDrawWin::default_instance_ = new stReqOpenLimitFashionDrawWin();
  stRetLimitFashionDrawWinInfo::default_instance_ = new stRetLimitFashionDrawWinInfo();
  stReqDrawLimitFashion::default_instance_ = new stReqDrawLimitFashion();
  stDrawLimitFashionResult::default_instance_ = new stDrawLimitFashionResult();
  stExchangeItem::default_instance_ = new stExchangeItem();
  stSynExchangeActivityiStep::default_instance_ = new stSynExchangeActivityiStep();
  stSynExchangeActivity::default_instance_ = new stSynExchangeActivity();
  stRetExchangeActivity::default_instance_ = new stRetExchangeActivity();
  stReqExchangeItem::default_instance_ = new stReqExchangeItem();
  stExchangeItemResult::default_instance_ = new stExchangeItemResult();
  stRecycleRechargeActivity::default_instance_ = new stRecycleRechargeActivity();
  stSendRecycleRechargeActivity::default_instance_ = new stSendRecycleRechargeActivity();
  stReqRecycleRechargeActReward::default_instance_ = new stReqRecycleRechargeActReward();
  stRetRecycleRechargeActReward::default_instance_ = new stRetRecycleRechargeActReward();
  stCommonActInfoItem::default_instance_ = new stCommonActInfoItem();
  stRefreshCommonActInfo::default_instance_ = new stRefreshCommonActInfo();
  stReqAKeyFetchAttach::default_instance_ = new stReqAKeyFetchAttach();
  stAKeyFetchAttachResult::default_instance_ = new stAKeyFetchAttachResult();
  stReqGloryfashion::default_instance_ = new stReqGloryfashion();
  stGloryfashionResult::default_instance_ = new stGloryfashionResult();
  stDevilCallItem::default_instance_ = new stDevilCallItem();
  stReqAllDevilCall::default_instance_ = new stReqAllDevilCall();
  stRetAllDevilCall::default_instance_ = new stRetAllDevilCall();
  stReqDevilCallReward::default_instance_ = new stReqDevilCallReward();
  stRetDevilCallReward::default_instance_ = new stRetDevilCallReward();
  stReqDevilCall::default_instance_ = new stReqDevilCall();
  stRetDevilCall::default_instance_ = new stRetDevilCall();
  stReqDevilCallSummary::default_instance_ = new stReqDevilCallSummary();
  stRetDevilCallSummary::default_instance_ = new stRetDevilCallSummary();
  stReqPayType::default_instance_ = new stReqPayType();
  stRetPayType::default_instance_ = new stRetPayType();
  stReqOperateActvity::default_instance_ = new stReqOperateActvity();
  stOperateActvityItemInfo::default_instance_ = new stOperateActvityItemInfo();
  stOperateActvityItems::default_instance_ = new stOperateActvityItems();
  stRetOperateActvity::default_instance_ = new stRetOperateActvity();
  stReqOperateActvityReward::default_instance_ = new stReqOperateActvityReward();
  stRetOperateActvityReward::default_instance_ = new stRetOperateActvityReward();
  stReqIllusionSprite::default_instance_ = new stReqIllusionSprite();
  stIllusionSpriteSkillItem::default_instance_ = new stIllusionSpriteSkillItem();
  stRetIllusionSprite::default_instance_ = new stRetIllusionSprite();
  illusionSpriteEatItem::default_instance_ = new illusionSpriteEatItem();
  stReqIllusionSpriteEat::default_instance_ = new stReqIllusionSpriteEat();
  stRetIllusionSpriteEat::default_instance_ = new stRetIllusionSpriteEat();
  stReqIllusionSpriteSkillUp::default_instance_ = new stReqIllusionSpriteSkillUp();
  stRetIllusionSpriteSkillUp::default_instance_ = new stRetIllusionSpriteSkillUp();
  stRepOpenDiscoverWindow::default_instance_ = new stRepOpenDiscoverWindow();
  stOpenDiscoverWindowResult::default_instance_ = new stOpenDiscoverWindowResult();
  stReqPlayDice::default_instance_ = new stReqPlayDice();
  stPlayDiceResult::default_instance_ = new stPlayDiceResult();
  stReqGetOrGiveUpTask::default_instance_ = new stReqGetOrGiveUpTask();
  stGetTaskResult::default_instance_ = new stGetTaskResult();
  stGiveUpTaskResult::default_instance_ = new stGiveUpTaskResult();
  stReqRefreshNum::default_instance_ = new stReqRefreshNum();
  stRefreshNumResult::default_instance_ = new stRefreshNumResult();
  stReqGetIntegralReward::default_instance_ = new stReqGetIntegralReward();
  stGetIntegralRewardResult::default_instance_ = new stGetIntegralRewardResult();
  stReqGiveReward::default_instance_ = new stReqGiveReward();
  stGiveRewardResult::default_instance_ = new stGiveRewardResult();
  stReqLuckyDraw::default_instance_ = new stReqLuckyDraw();
  stLuckyDrawPointRewardInfo::default_instance_ = new stLuckyDrawPointRewardInfo();
  stLuckyDrawRewardInfo::default_instance_ = new stLuckyDrawRewardInfo();
  stLuckyDrawUserInfo::default_instance_ = new stLuckyDrawUserInfo();
  stRetLuckyDraw::default_instance_ = new stRetLuckyDraw();
  stReqLuckyDrawReward::default_instance_ = new stReqLuckyDrawReward();
  stRetLuckyDrawReward::default_instance_ = new stRetLuckyDrawReward();
  stReqLuckyDrawPointReward::default_instance_ = new stReqLuckyDrawPointReward();
  stRetLuckyDrawPointReward::default_instance_ = new stRetLuckyDrawPointReward();
  stReqRedPointRuls::default_instance_ = new stReqRedPointRuls();
  stRedPointRulsResult::default_instance_ = new stRedPointRulsResult();
  stReqInviteFriend::default_instance_ = new stReqInviteFriend();
  InviteFriendReward::default_instance_ = new InviteFriendReward();
  stRetInviteFriend::default_instance_ = new stRetInviteFriend();
  stReqDrawInviteFriend::default_instance_ = new stReqDrawInviteFriend();
  stRetDrawInviteFriend::default_instance_ = new stRetDrawInviteFriend();
  stReqUseInviteCode::default_instance_ = new stReqUseInviteCode();
  stRetUseInviteCode::default_instance_ = new stRetUseInviteCode();
  stReqShareInvite::default_instance_ = new stReqShareInvite();
  stRetShareInvite::default_instance_ = new stRetShareInvite();
  stReqDailyShareInvite::default_instance_ = new stReqDailyShareInvite();
  stRetDailyShareInvite::default_instance_ = new stRetDailyShareInvite();
  stReqDrawDailyShareReward::default_instance_ = new stReqDrawDailyShareReward();
  stRetDrawDailyShareReward::default_instance_ = new stRetDrawDailyShareReward();
  stReqDrawOnceShareReward::default_instance_ = new stReqDrawOnceShareReward();
  stRetDrawOnceShareReward::default_instance_ = new stRetDrawOnceShareReward();
  stNotifyInterceptServerResult::default_instance_ = new stNotifyInterceptServerResult();
  stReqReceiveState::default_instance_ = new stReqReceiveState();
  stReceiveStateResult::default_instance_ = new stReceiveStateResult();
  stReqReceiveReward::default_instance_ = new stReqReceiveReward();
  stReceiveRewardResult::default_instance_ = new stReceiveRewardResult();
  stAcitivityLimitPetItem::default_instance_ = new stAcitivityLimitPetItem();
  stSendAllAcitivityLimitPet::default_instance_ = new stSendAllAcitivityLimitPet();
  stSendLateWalfareActivity::default_instance_ = new stSendLateWalfareActivity();
  stReqDrawLateWalfare::default_instance_ = new stReqDrawLateWalfare();
  stRetDrawLateWalfare::default_instance_ = new stRetDrawLateWalfare();
  stResGetBackItem::default_instance_ = new stResGetBackItem();
  stSendAllResGetBack::default_instance_ = new stSendAllResGetBack();
  stReqDrawResGetBack::default_instance_ = new stReqDrawResGetBack();
  stRetDrawResGetBack::default_instance_ = new stRetDrawResGetBack();
  stReqDrawAllResGetBack::default_instance_ = new stReqDrawAllResGetBack();
  stRetDrawAllResGetBack::default_instance_ = new stRetDrawAllResGetBack();
  stReqOpenMonsterWindow::default_instance_ = new stReqOpenMonsterWindow();
  stOpenMonsterWindowResult::default_instance_ = new stOpenMonsterWindowResult();
  stReqAttackMonster::default_instance_ = new stReqAttackMonster();
  stAttackMonsterResult::default_instance_ = new stAttackMonsterResult();
  stReqBuyAttackTime::default_instance_ = new stReqBuyAttackTime();
  stBuyAttackTimeResult::default_instance_ = new stBuyAttackTimeResult();
  stReqAKeyAttackMonster::default_instance_ = new stReqAKeyAttackMonster();
  stAKeyAttackMonsterResult::default_instance_ = new stAKeyAttackMonsterResult();
  stSynTipItem::default_instance_ = new stSynTipItem();
  stObtainItemTip::default_instance_ = new stObtainItemTip();
  stUserOnline::default_instance_ = new stUserOnline();
  stConsumeItemInfo::default_instance_ = new stConsumeItemInfo();
  stReqMountLevelUp::default_instance_ = new stReqMountLevelUp();
  stMountLevelUpResult::default_instance_ = new stMountLevelUpResult();
  stReqButtleMount::default_instance_ = new stReqButtleMount();
  stButtleMountResult::default_instance_ = new stButtleMountResult();
  stReqMountFollow::default_instance_ = new stReqMountFollow();
  stMountFollowResult::default_instance_ = new stMountFollowResult();
  stReqMountUnreal::default_instance_ = new stReqMountUnreal();
  stMountUnrealResult::default_instance_ = new stMountUnrealResult();
  stReqOpenMountGrowWindow::default_instance_ = new stReqOpenMountGrowWindow();
  stOpenMountGrowWindowResult::default_instance_ = new stOpenMountGrowWindowResult();
  stRefreshBattle::default_instance_ = new stRefreshBattle();
  stLevelWflfareInfo::default_instance_ = new stLevelWflfareInfo();
  stHasGotRewardWflfareInfo::default_instance_ = new stHasGotRewardWflfareInfo();
  stReqReceiveWflfare::default_instance_ = new stReqReceiveWflfare();
  stReceiveWflfareResult::default_instance_ = new stReceiveWflfareResult();
  stReqPaySign::default_instance_ = new stReqPaySign();
  stRetPaySign::default_instance_ = new stRetPaySign();
  stReqServerPay::default_instance_ = new stReqServerPay();
  stRetServerPay::default_instance_ = new stRetServerPay();
  stReqSummonReward::default_instance_ = new stReqSummonReward();
  stSummonRewardResult::default_instance_ = new stSummonRewardResult();
  stReqSummonData::default_instance_ = new stReqSummonData();
  stSummonDataResult::default_instance_ = new stSummonDataResult();
  stBuySummonPlanResult::default_instance_ = new stBuySummonPlanResult();
  stReqRechargeCheck::default_instance_ = new stReqRechargeCheck();
  stRechargeCheckResult::default_instance_ = new stRechargeCheckResult();
  stSynMainSnalInfo::default_instance_->InitAsDefaultInstance();
  stSynMailAttach::default_instance_->InitAsDefaultInstance();
  stSynDetailMailInfo::default_instance_->InitAsDefaultInstance();
  stSynAllMail::default_instance_->InitAsDefaultInstance();
  stReqReadMail::default_instance_->InitAsDefaultInstance();
  stRetMailInfo::default_instance_->InitAsDefaultInstance();
  stReqFetchAttach::default_instance_->InitAsDefaultInstance();
  stFetchAttachResult::default_instance_->InitAsDefaultInstance();
  stReceiveMail::default_instance_->InitAsDefaultInstance();
  stReqRewardInfo::default_instance_->InitAsDefaultInstance();
  stRetRewardInfo::default_instance_->InitAsDefaultInstance();
  stReqSignReward::default_instance_->InitAsDefaultInstance();
  stGetSignRewardResult::default_instance_->InitAsDefaultInstance();
  stReqOpenSvrReward::default_instance_->InitAsDefaultInstance();
  stGetOpenSvrRewardResult::default_instance_->InitAsDefaultInstance();
  stReqLvReward::default_instance_->InitAsDefaultInstance();
  stLvRewardResult::default_instance_->InitAsDefaultInstance();
  stReqOnlineReward::default_instance_->InitAsDefaultInstance();
  stGetOnlineRewardResult::default_instance_->InitAsDefaultInstance();
  stBuyStarInfo::default_instance_->InitAsDefaultInstance();
  stReqBuyStar::default_instance_->InitAsDefaultInstance();
  stBuyStarResult::default_instance_->InitAsDefaultInstance();
  ReqOpenDrawWindow::default_instance_->InitAsDefaultInstance();
  stDrawWindowInfo::default_instance_->InitAsDefaultInstance();
  stReqDraw::default_instance_->InitAsDefaultInstance();
  stSynDrawItem::default_instance_->InitAsDefaultInstance();
  stDrawResult::default_instance_->InitAsDefaultInstance();
  stSynMyTitle::default_instance_->InitAsDefaultInstance();
  stActiveOneTitle::default_instance_->InitAsDefaultInstance();
  stActiveTitleResult::default_instance_->InitAsDefaultInstance();
  stObtainOneTitle::default_instance_->InitAsDefaultInstance();
  stBuyInvestPlan::default_instance_->InitAsDefaultInstance();
  stBuyInvestPlanResult::default_instance_->InitAsDefaultInstance();
  stReqInvestPlanReward::default_instance_->InitAsDefaultInstance();
  stInvestPlanRewardResult::default_instance_->InitAsDefaultInstance();
  stReqEatDinner::default_instance_->InitAsDefaultInstance();
  stEatDinnerResult::default_instance_->InitAsDefaultInstance();
  stSynActivityData::default_instance_->InitAsDefaultInstance();
  stReqOpenCaptureTreasure::default_instance_->InitAsDefaultInstance();
  stSynCaptureTreasureInfo::default_instance_->InitAsDefaultInstance();
  stRetCaptureTreasure::default_instance_->InitAsDefaultInstance();
  stReqCombineTreasure::default_instance_->InitAsDefaultInstance();
  stCombineTreasureResult::default_instance_->InitAsDefaultInstance();
  stBuyPeaceModuleTime::default_instance_->InitAsDefaultInstance();
  stBuyPeaceModuleTimeResult::default_instance_->InitAsDefaultInstance();
  stCaptureTreasureUserInfo::default_instance_->InitAsDefaultInstance();
  stReqChallengeUserList::default_instance_->InitAsDefaultInstance();
  stRetChallengeUserList::default_instance_->InitAsDefaultInstance();
  stCaptureUserTreasure::default_instance_->InitAsDefaultInstance();
  stSynCaptureReward::default_instance_->InitAsDefaultInstance();
  stCaptureUserTreasureResult::default_instance_->InitAsDefaultInstance();
  stSynTreasureNum::default_instance_->InitAsDefaultInstance();
  stCancelActiveTitle::default_instance_->InitAsDefaultInstance();
  stCancelActiveTitleResult::default_instance_->InitAsDefaultInstance();
  stSynSpriteInfo::default_instance_->InitAsDefaultInstance();
  stSynAllSprite::default_instance_->InitAsDefaultInstance();
  stReqUnlockedSprite::default_instance_->InitAsDefaultInstance();
  stUnlockedSpriteResult::default_instance_->InitAsDefaultInstance();
  stAddSprite::default_instance_->InitAsDefaultInstance();
  stReqLevelupSprite::default_instance_->InitAsDefaultInstance();
  stLevelupSpriteResult::default_instance_->InitAsDefaultInstance();
  stSpriteFollowMaster::default_instance_->InitAsDefaultInstance();
  stSpriteFollowMasterResult::default_instance_->InitAsDefaultInstance();
  stReqAvaibleActivity::default_instance_->InitAsDefaultInstance();
  stSynActivityStepReward::default_instance_->InitAsDefaultInstance();
  stSynActivityStepOptionalReward::default_instance_->InitAsDefaultInstance();
  stSynActivityStepInfo::default_instance_->InitAsDefaultInstance();
  stSynActivityInfo::default_instance_->InitAsDefaultInstance();
  stRetAvaibleActivity::default_instance_->InitAsDefaultInstance();
  stReqAcitivityReward::default_instance_->InitAsDefaultInstance();
  stActivityRewardResult::default_instance_->InitAsDefaultInstance();
  stReqWorldBossDamageRank::default_instance_->InitAsDefaultInstance();
  stWorldBossDamageSortItem::default_instance_->InitAsDefaultInstance();
  stRetWorldBossDamageRank::default_instance_->InitAsDefaultInstance();
  stReqOpenWorldBossWin::default_instance_->InitAsDefaultInstance();
  stRetOpenWorldBossWin::default_instance_->InitAsDefaultInstance();
  stReqBossWorldMatch::default_instance_->InitAsDefaultInstance();
  stRetBossWorldMatch::default_instance_->InitAsDefaultInstance();
  stReqClearWorldBossActivityCD::default_instance_->InitAsDefaultInstance();
  stClearWorldBossActivityCDResult::default_instance_->InitAsDefaultInstance();
  stReqRaiseDamageInWorldBoss::default_instance_->InitAsDefaultInstance();
  stRaiseDamageInWorldBossResult::default_instance_->InitAsDefaultInstance();
  stCancelWorldBossMatch::default_instance_->InitAsDefaultInstance();
  stCancelWorldBossMatchResult::default_instance_->InitAsDefaultInstance();
  stQueryDrawHeroActivity::default_instance_->InitAsDefaultInstance();
  stRetDrawHeroActivityInfo::default_instance_->InitAsDefaultInstance();
  stReqDrawHeroScoreReward::default_instance_->InitAsDefaultInstance();
  stDrawHeroScoreRewardRet::default_instance_->InitAsDefaultInstance();
  stReqDrawHeroRankReward::default_instance_->InitAsDefaultInstance();
  stDrawHeroRankReward::default_instance_->InitAsDefaultInstance();
  stReqCompensationList::default_instance_->InitAsDefaultInstance();
  stCompensationItem::default_instance_->InitAsDefaultInstance();
  stCompensationInfo::default_instance_->InitAsDefaultInstance();
  stRetCompensationList::default_instance_->InitAsDefaultInstance();
  stReqGotCompensation::default_instance_->InitAsDefaultInstance();
  stGotCompensationResult::default_instance_->InitAsDefaultInstance();
  stReq7DayActivityInfo::default_instance_->InitAsDefaultInstance();
  stSynSDGoalInfo::default_instance_->InitAsDefaultInstance();
  stRet7DayActivityInfo::default_instance_->InitAsDefaultInstance();
  stReqSevenDayReward::default_instance_->InitAsDefaultInstance();
  stSevenDayRewardRet::default_instance_->InitAsDefaultInstance();
  stSevenDayHasRewardTip::default_instance_->InitAsDefaultInstance();
  stAppStoreCfg::default_instance_->InitAsDefaultInstance();
  stOpenWindowTip::default_instance_->InitAsDefaultInstance();
  stReqRechargeActivityList::default_instance_->InitAsDefaultInstance();
  stSynRechargeActivityInfo::default_instance_->InitAsDefaultInstance();
  stRetRechargeActivityList::default_instance_->InitAsDefaultInstance();
  stReqRechargeActivtiyReward::default_instance_->InitAsDefaultInstance();
  stRetRechargeActivityReward::default_instance_->InitAsDefaultInstance();
  stSynInvestigation::default_instance_->InitAsDefaultInstance();
  stSynAllInvestigation::default_instance_->InitAsDefaultInstance();
  stInvestAnswer::default_instance_->InitAsDefaultInstance();
  stReqInvestgationReward::default_instance_->InitAsDefaultInstance();
  stInvestgationRewardResult::default_instance_->InitAsDefaultInstance();
  stReqActivityShop::default_instance_->InitAsDefaultInstance();
  stActivityShopList::default_instance_->InitAsDefaultInstance();
  stLuchShopInfo::default_instance_->InitAsDefaultInstance();
  stSynLuckShopTodayRecharge::default_instance_->InitAsDefaultInstance();
  stReqLuckShopReward::default_instance_->InitAsDefaultInstance();
  stLuckShopRewardResult::default_instance_->InitAsDefaultInstance();
  stSaveOpenLuckShopWinTime::default_instance_->InitAsDefaultInstance();
  stLuckShopRechargeMeetCondTime::default_instance_->InitAsDefaultInstance();
  stReqOpenGuardWin::default_instance_->InitAsDefaultInstance();
  stGuardEnemy::default_instance_->InitAsDefaultInstance();
  stGuardBaseInfo::default_instance_->InitAsDefaultInstance();
  stGuardDetailInfo::default_instance_->InitAsDefaultInstance();
  stGuardWinInfo::default_instance_->InitAsDefaultInstance();
  stResetInterceptCD::default_instance_->InitAsDefaultInstance();
  stResetInterceptCDResult::default_instance_->InitAsDefaultInstance();
  stResetInterceptNum::default_instance_->InitAsDefaultInstance();
  stResetInterceptNumResult::default_instance_->InitAsDefaultInstance();
  stReqGuardDetailInfo::default_instance_->InitAsDefaultInstance();
  stRetGuardDetailInfo::default_instance_->InitAsDefaultInstance();
  stReqIntercept::default_instance_->InitAsDefaultInstance();
  stIntercerptResult::default_instance_->InitAsDefaultInstance();
  stReqGuard::default_instance_->InitAsDefaultInstance();
  stRetGuardWin::default_instance_->InitAsDefaultInstance();
  stReqSummonHighQualityGuard::default_instance_->InitAsDefaultInstance();
  stSummonHighQualityGuardResult::default_instance_->InitAsDefaultInstance();
  stReqGuardInspired::default_instance_->InitAsDefaultInstance();
  stGuardInspiredResult::default_instance_->InitAsDefaultInstance();
  stReqRefreshGuardQuality::default_instance_->InitAsDefaultInstance();
  stRetRefreshGuardQualityResult::default_instance_->InitAsDefaultInstance();
  stReqCanHelpGuardFriend::default_instance_->InitAsDefaultInstance();
  stHelpGaurdFriendInfo::default_instance_->InitAsDefaultInstance();
  stRetCanHelpGuardFriend::default_instance_->InitAsDefaultInstance();
  stInviteFriendForHelpGuard::default_instance_->InitAsDefaultInstance();
  stInviteFriendForHelpGuardResult::default_instance_->InitAsDefaultInstance();
  stAskFriendHelpGuard::default_instance_->InitAsDefaultInstance();
  stReplyHelpGuard::default_instance_->InitAsDefaultInstance();
  stReplyHelpGuardResult::default_instance_->InitAsDefaultInstance();
  stUserAgreeHelpGuard::default_instance_->InitAsDefaultInstance();
  stBeginGuard::default_instance_->InitAsDefaultInstance();
  stBeginGuardResult::default_instance_->InitAsDefaultInstance();
  stInterceptInfo::default_instance_->InitAsDefaultInstance();
  stReqInterceptInfo::default_instance_->InitAsDefaultInstance();
  stRetInterceptInfo::default_instance_->InitAsDefaultInstance();
  stRechargeActivityInfoItem::default_instance_->InitAsDefaultInstance();
  stNotifyRechargeActivityInfo::default_instance_->InitAsDefaultInstance();
  stLuckShopRefreshResult::default_instance_->InitAsDefaultInstance();
  stNotifyGuardFinish::default_instance_->InitAsDefaultInstance();
  stNotifyFriendGuardFinish::default_instance_->InitAsDefaultInstance();
  stNotifyInterceptResult::default_instance_->InitAsDefaultInstance();
  stReplyNotifyIntercept::default_instance_->InitAsDefaultInstance();
  stQuickFinishGuard::default_instance_->InitAsDefaultInstance();
  stQuickFinishGuardResult::default_instance_->InitAsDefaultInstance();
  stNotifyDelTitle::default_instance_->InitAsDefaultInstance();
  stBeInterceptTip::default_instance_->InitAsDefaultInstance();
  stOnlineNotifyNewInterceptInfo::default_instance_->InitAsDefaultInstance();
  stReqOpenLimitFashionDrawWin::default_instance_->InitAsDefaultInstance();
  stRetLimitFashionDrawWinInfo::default_instance_->InitAsDefaultInstance();
  stReqDrawLimitFashion::default_instance_->InitAsDefaultInstance();
  stDrawLimitFashionResult::default_instance_->InitAsDefaultInstance();
  stExchangeItem::default_instance_->InitAsDefaultInstance();
  stSynExchangeActivityiStep::default_instance_->InitAsDefaultInstance();
  stSynExchangeActivity::default_instance_->InitAsDefaultInstance();
  stRetExchangeActivity::default_instance_->InitAsDefaultInstance();
  stReqExchangeItem::default_instance_->InitAsDefaultInstance();
  stExchangeItemResult::default_instance_->InitAsDefaultInstance();
  stRecycleRechargeActivity::default_instance_->InitAsDefaultInstance();
  stSendRecycleRechargeActivity::default_instance_->InitAsDefaultInstance();
  stReqRecycleRechargeActReward::default_instance_->InitAsDefaultInstance();
  stRetRecycleRechargeActReward::default_instance_->InitAsDefaultInstance();
  stCommonActInfoItem::default_instance_->InitAsDefaultInstance();
  stRefreshCommonActInfo::default_instance_->InitAsDefaultInstance();
  stReqAKeyFetchAttach::default_instance_->InitAsDefaultInstance();
  stAKeyFetchAttachResult::default_instance_->InitAsDefaultInstance();
  stReqGloryfashion::default_instance_->InitAsDefaultInstance();
  stGloryfashionResult::default_instance_->InitAsDefaultInstance();
  stDevilCallItem::default_instance_->InitAsDefaultInstance();
  stReqAllDevilCall::default_instance_->InitAsDefaultInstance();
  stRetAllDevilCall::default_instance_->InitAsDefaultInstance();
  stReqDevilCallReward::default_instance_->InitAsDefaultInstance();
  stRetDevilCallReward::default_instance_->InitAsDefaultInstance();
  stReqDevilCall::default_instance_->InitAsDefaultInstance();
  stRetDevilCall::default_instance_->InitAsDefaultInstance();
  stReqDevilCallSummary::default_instance_->InitAsDefaultInstance();
  stRetDevilCallSummary::default_instance_->InitAsDefaultInstance();
  stReqPayType::default_instance_->InitAsDefaultInstance();
  stRetPayType::default_instance_->InitAsDefaultInstance();
  stReqOperateActvity::default_instance_->InitAsDefaultInstance();
  stOperateActvityItemInfo::default_instance_->InitAsDefaultInstance();
  stOperateActvityItems::default_instance_->InitAsDefaultInstance();
  stRetOperateActvity::default_instance_->InitAsDefaultInstance();
  stReqOperateActvityReward::default_instance_->InitAsDefaultInstance();
  stRetOperateActvityReward::default_instance_->InitAsDefaultInstance();
  stReqIllusionSprite::default_instance_->InitAsDefaultInstance();
  stIllusionSpriteSkillItem::default_instance_->InitAsDefaultInstance();
  stRetIllusionSprite::default_instance_->InitAsDefaultInstance();
  illusionSpriteEatItem::default_instance_->InitAsDefaultInstance();
  stReqIllusionSpriteEat::default_instance_->InitAsDefaultInstance();
  stRetIllusionSpriteEat::default_instance_->InitAsDefaultInstance();
  stReqIllusionSpriteSkillUp::default_instance_->InitAsDefaultInstance();
  stRetIllusionSpriteSkillUp::default_instance_->InitAsDefaultInstance();
  stRepOpenDiscoverWindow::default_instance_->InitAsDefaultInstance();
  stOpenDiscoverWindowResult::default_instance_->InitAsDefaultInstance();
  stReqPlayDice::default_instance_->InitAsDefaultInstance();
  stPlayDiceResult::default_instance_->InitAsDefaultInstance();
  stReqGetOrGiveUpTask::default_instance_->InitAsDefaultInstance();
  stGetTaskResult::default_instance_->InitAsDefaultInstance();
  stGiveUpTaskResult::default_instance_->InitAsDefaultInstance();
  stReqRefreshNum::default_instance_->InitAsDefaultInstance();
  stRefreshNumResult::default_instance_->InitAsDefaultInstance();
  stReqGetIntegralReward::default_instance_->InitAsDefaultInstance();
  stGetIntegralRewardResult::default_instance_->InitAsDefaultInstance();
  stReqGiveReward::default_instance_->InitAsDefaultInstance();
  stGiveRewardResult::default_instance_->InitAsDefaultInstance();
  stReqLuckyDraw::default_instance_->InitAsDefaultInstance();
  stLuckyDrawPointRewardInfo::default_instance_->InitAsDefaultInstance();
  stLuckyDrawRewardInfo::default_instance_->InitAsDefaultInstance();
  stLuckyDrawUserInfo::default_instance_->InitAsDefaultInstance();
  stRetLuckyDraw::default_instance_->InitAsDefaultInstance();
  stReqLuckyDrawReward::default_instance_->InitAsDefaultInstance();
  stRetLuckyDrawReward::default_instance_->InitAsDefaultInstance();
  stReqLuckyDrawPointReward::default_instance_->InitAsDefaultInstance();
  stRetLuckyDrawPointReward::default_instance_->InitAsDefaultInstance();
  stReqRedPointRuls::default_instance_->InitAsDefaultInstance();
  stRedPointRulsResult::default_instance_->InitAsDefaultInstance();
  stReqInviteFriend::default_instance_->InitAsDefaultInstance();
  InviteFriendReward::default_instance_->InitAsDefaultInstance();
  stRetInviteFriend::default_instance_->InitAsDefaultInstance();
  stReqDrawInviteFriend::default_instance_->InitAsDefaultInstance();
  stRetDrawInviteFriend::default_instance_->InitAsDefaultInstance();
  stReqUseInviteCode::default_instance_->InitAsDefaultInstance();
  stRetUseInviteCode::default_instance_->InitAsDefaultInstance();
  stReqShareInvite::default_instance_->InitAsDefaultInstance();
  stRetShareInvite::default_instance_->InitAsDefaultInstance();
  stReqDailyShareInvite::default_instance_->InitAsDefaultInstance();
  stRetDailyShareInvite::default_instance_->InitAsDefaultInstance();
  stReqDrawDailyShareReward::default_instance_->InitAsDefaultInstance();
  stRetDrawDailyShareReward::default_instance_->InitAsDefaultInstance();
  stReqDrawOnceShareReward::default_instance_->InitAsDefaultInstance();
  stRetDrawOnceShareReward::default_instance_->InitAsDefaultInstance();
  stNotifyInterceptServerResult::default_instance_->InitAsDefaultInstance();
  stReqReceiveState::default_instance_->InitAsDefaultInstance();
  stReceiveStateResult::default_instance_->InitAsDefaultInstance();
  stReqReceiveReward::default_instance_->InitAsDefaultInstance();
  stReceiveRewardResult::default_instance_->InitAsDefaultInstance();
  stAcitivityLimitPetItem::default_instance_->InitAsDefaultInstance();
  stSendAllAcitivityLimitPet::default_instance_->InitAsDefaultInstance();
  stSendLateWalfareActivity::default_instance_->InitAsDefaultInstance();
  stReqDrawLateWalfare::default_instance_->InitAsDefaultInstance();
  stRetDrawLateWalfare::default_instance_->InitAsDefaultInstance();
  stResGetBackItem::default_instance_->InitAsDefaultInstance();
  stSendAllResGetBack::default_instance_->InitAsDefaultInstance();
  stReqDrawResGetBack::default_instance_->InitAsDefaultInstance();
  stRetDrawResGetBack::default_instance_->InitAsDefaultInstance();
  stReqDrawAllResGetBack::default_instance_->InitAsDefaultInstance();
  stRetDrawAllResGetBack::default_instance_->InitAsDefaultInstance();
  stReqOpenMonsterWindow::default_instance_->InitAsDefaultInstance();
  stOpenMonsterWindowResult::default_instance_->InitAsDefaultInstance();
  stReqAttackMonster::default_instance_->InitAsDefaultInstance();
  stAttackMonsterResult::default_instance_->InitAsDefaultInstance();
  stReqBuyAttackTime::default_instance_->InitAsDefaultInstance();
  stBuyAttackTimeResult::default_instance_->InitAsDefaultInstance();
  stReqAKeyAttackMonster::default_instance_->InitAsDefaultInstance();
  stAKeyAttackMonsterResult::default_instance_->InitAsDefaultInstance();
  stSynTipItem::default_instance_->InitAsDefaultInstance();
  stObtainItemTip::default_instance_->InitAsDefaultInstance();
  stUserOnline::default_instance_->InitAsDefaultInstance();
  stConsumeItemInfo::default_instance_->InitAsDefaultInstance();
  stReqMountLevelUp::default_instance_->InitAsDefaultInstance();
  stMountLevelUpResult::default_instance_->InitAsDefaultInstance();
  stReqButtleMount::default_instance_->InitAsDefaultInstance();
  stButtleMountResult::default_instance_->InitAsDefaultInstance();
  stReqMountFollow::default_instance_->InitAsDefaultInstance();
  stMountFollowResult::default_instance_->InitAsDefaultInstance();
  stReqMountUnreal::default_instance_->InitAsDefaultInstance();
  stMountUnrealResult::default_instance_->InitAsDefaultInstance();
  stReqOpenMountGrowWindow::default_instance_->InitAsDefaultInstance();
  stOpenMountGrowWindowResult::default_instance_->InitAsDefaultInstance();
  stRefreshBattle::default_instance_->InitAsDefaultInstance();
  stLevelWflfareInfo::default_instance_->InitAsDefaultInstance();
  stHasGotRewardWflfareInfo::default_instance_->InitAsDefaultInstance();
  stReqReceiveWflfare::default_instance_->InitAsDefaultInstance();
  stReceiveWflfareResult::default_instance_->InitAsDefaultInstance();
  stReqPaySign::default_instance_->InitAsDefaultInstance();
  stRetPaySign::default_instance_->InitAsDefaultInstance();
  stReqServerPay::default_instance_->InitAsDefaultInstance();
  stRetServerPay::default_instance_->InitAsDefaultInstance();
  stReqSummonReward::default_instance_->InitAsDefaultInstance();
  stSummonRewardResult::default_instance_->InitAsDefaultInstance();
  stReqSummonData::default_instance_->InitAsDefaultInstance();
  stSummonDataResult::default_instance_->InitAsDefaultInstance();
  stBuySummonPlanResult::default_instance_->InitAsDefaultInstance();
  stReqRechargeCheck::default_instance_->InitAsDefaultInstance();
  stRechargeCheckResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Misc_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Misc_2eproto {
  StaticDescriptorInitializer_Misc_2eproto() {
    protobuf_AddDesc_Misc_2eproto();
  }
} static_descriptor_initializer_Misc_2eproto_;
const ::google::protobuf::EnumDescriptor* eAttachStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eAttachStatus_descriptor_;
}
bool eAttachStatus_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eMailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eMailType_descriptor_;
}
bool eMailType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eDrawType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eDrawType_descriptor_;
}
bool eDrawType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eTreasureType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eTreasureType_descriptor_;
}
bool eTreasureType_IsValid(int value) {
  switch(value) {
    case 130201:
    case 130202:
    case 130221:
    case 130222:
    case 130223:
    case 130231:
    case 130232:
    case 130233:
    case 130271:
    case 130272:
    case 130273:
    case 130281:
    case 130282:
    case 130283:
    case 130401:
    case 130402:
    case 130403:
    case 130471:
    case 130472:
    case 130473:
    case 130474:
    case 130481:
    case 130482:
    case 130483:
    case 130484:
    case 130631:
    case 130632:
    case 130633:
    case 130634:
    case 131021:
    case 131022:
    case 131023:
    case 131024:
    case 131201:
    case 131202:
    case 131203:
    case 131204:
    case 131211:
    case 131212:
    case 131213:
    case 131231:
    case 131232:
    case 131233:
    case 131234:
    case 131235:
    case 131271:
    case 131272:
    case 131273:
    case 131274:
    case 131275:
    case 131281:
    case 131282:
    case 131283:
    case 131284:
    case 131285:
    case 131411:
    case 131412:
    case 131413:
    case 131611:
    case 131612:
    case 131613:
    case 131614:
    case 131811:
    case 131812:
    case 131813:
    case 131814:
    case 131815:
    case 131821:
    case 131822:
    case 131823:
    case 131824:
    case 131825:
    case 132021:
    case 132022:
    case 132023:
    case 132024:
    case 132025:
    case 132621:
    case 132622:
    case 132623:
    case 132624:
    case 132625:
    case 132626:
    case 132821:
    case 132822:
    case 132823:
    case 132824:
    case 132825:
    case 132826:
    case 132841:
    case 132842:
    case 132843:
    case 132844:
    case 132845:
    case 132846:
    case 132851:
    case 132852:
    case 132853:
    case 132854:
    case 132855:
    case 132856:
    case 133021:
    case 133022:
    case 133023:
    case 133024:
    case 133025:
    case 133026:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eCombineItem_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eCombineItem_descriptor_;
}
bool eCombineItem_IsValid(int value) {
  switch(value) {
    case 0:
    case 100290:
    case 100490:
    case 101206:
    case 101290:
    case 101406:
    case 101606:
    case 120101:
    case 600200:
    case 601000:
    case 601800:
    case 602000:
    case 602600:
    case 602800:
    case 603000:
    case 650200:
    case 650600:
    case 651200:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eCaptureType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eCaptureType_descriptor_;
}
bool eCaptureType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eActivityType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eActivityType_descriptor_;
}
bool eActivityType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eSevenDayGoalType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eSevenDayGoalType_descriptor_;
}
bool eSevenDayGoalType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eSevenDayGoal_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eSevenDayGoal_descriptor_;
}
bool eSevenDayGoal_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eLevelUpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eLevelUpType_descriptor_;
}
bool eLevelUpType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int stSynMainSnalInfo::kIdFieldNumber;
const int stSynMainSnalInfo::kSenderNameFieldNumber;
const int stSynMainSnalInfo::kTitleFieldNumber;
const int stSynMainSnalInfo::kSendTimeFieldNumber;
const int stSynMainSnalInfo::kIsReadFieldNumber;
const int stSynMainSnalInfo::kMailTypeFieldNumber;
const int stSynMainSnalInfo::kIsFetchAttachFieldNumber;
const int stSynMainSnalInfo::kHasAttachFieldNumber;
#endif  // !_MSC_VER

stSynMainSnalInfo::stSynMainSnalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMainSnalInfo::InitAsDefaultInstance() {
}

stSynMainSnalInfo::stSynMainSnalInfo(const stSynMainSnalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMainSnalInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = 0u;
  isread_ = false;
  mailtype_ = 1;
  isfetchattach_ = false;
  hasattach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMainSnalInfo::~stSynMainSnalInfo() {
  SharedDtor();
}

void stSynMainSnalInfo::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (this != default_instance_) {
  }
}

void stSynMainSnalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMainSnalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMainSnalInfo_descriptor_;
}

const stSynMainSnalInfo& stSynMainSnalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynMainSnalInfo* stSynMainSnalInfo::default_instance_ = NULL;

stSynMainSnalInfo* stSynMainSnalInfo::New() const {
  return new stSynMainSnalInfo;
}

void stSynMainSnalInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    sendtime_ = 0u;
    isread_ = false;
    mailtype_ = 1;
    isfetchattach_ = false;
    hasattach_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMainSnalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_senderName;
        break;
      }

      // optional string senderName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sendTime;
        break;
      }

      // optional uint32 sendTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isRead;
        break;
      }

      // optional bool isRead = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isread_)));
          set_has_isread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mailType;
        break;
      }

      // optional .MiscProto.eMailType mailType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::eMailType_IsValid(value)) {
            set_mailtype(static_cast< ::MiscProto::eMailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isFetchAttach;
        break;
      }

      // optional bool isFetchAttach = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFetchAttach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfetchattach_)));
          set_has_isfetchattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hasAttach;
        break;
      }

      // optional bool hasAttach = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasAttach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasattach_)));
          set_has_hasattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMainSnalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendername(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional uint32 sendTime = 4;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sendtime(), output);
  }

  // optional bool isRead = 5;
  if (has_isread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isread(), output);
  }

  // optional .MiscProto.eMailType mailType = 6;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->mailtype(), output);
  }

  // optional bool isFetchAttach = 7;
  if (has_isfetchattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isfetchattach(), output);
  }

  // optional bool hasAttach = 8;
  if (has_hasattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hasattach(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMainSnalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendername(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional uint32 sendTime = 4;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sendtime(), target);
  }

  // optional bool isRead = 5;
  if (has_isread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isread(), target);
  }

  // optional .MiscProto.eMailType mailType = 6;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->mailtype(), target);
  }

  // optional bool isFetchAttach = 7;
  if (has_isfetchattach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isfetchattach(), target);
  }

  // optional bool hasAttach = 8;
  if (has_hasattach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hasattach(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMainSnalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string senderName = 2;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional uint32 sendTime = 4;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendtime());
    }

    // optional bool isRead = 5;
    if (has_isread()) {
      total_size += 1 + 1;
    }

    // optional .MiscProto.eMailType mailType = 6;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mailtype());
    }

    // optional bool isFetchAttach = 7;
    if (has_isfetchattach()) {
      total_size += 1 + 1;
    }

    // optional bool hasAttach = 8;
    if (has_hasattach()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMainSnalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMainSnalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMainSnalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMainSnalInfo::MergeFrom(const stSynMainSnalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_isread()) {
      set_isread(from.isread());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_isfetchattach()) {
      set_isfetchattach(from.isfetchattach());
    }
    if (from.has_hasattach()) {
      set_hasattach(from.hasattach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMainSnalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMainSnalInfo::CopyFrom(const stSynMainSnalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMainSnalInfo::IsInitialized() const {

  return true;
}

void stSynMainSnalInfo::Swap(stSynMainSnalInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sendername_, other->sendername_);
    std::swap(title_, other->title_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(isread_, other->isread_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(isfetchattach_, other->isfetchattach_);
    std::swap(hasattach_, other->hasattach_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMainSnalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMainSnalInfo_descriptor_;
  metadata.reflection = stSynMainSnalInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynMailAttach::kItemIDFieldNumber;
const int stSynMailAttach::kNumFieldNumber;
#endif  // !_MSC_VER

stSynMailAttach::stSynMailAttach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMailAttach::InitAsDefaultInstance() {
}

stSynMailAttach::stSynMailAttach(const stSynMailAttach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMailAttach::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMailAttach::~stSynMailAttach() {
  SharedDtor();
}

void stSynMailAttach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynMailAttach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMailAttach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMailAttach_descriptor_;
}

const stSynMailAttach& stSynMailAttach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynMailAttach* stSynMailAttach::default_instance_ = NULL;

stSynMailAttach* stSynMailAttach::New() const {
  return new stSynMailAttach;
}

void stSynMailAttach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMailAttach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMailAttach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMailAttach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMailAttach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMailAttach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMailAttach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMailAttach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMailAttach::MergeFrom(const stSynMailAttach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMailAttach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMailAttach::CopyFrom(const stSynMailAttach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMailAttach::IsInitialized() const {

  return true;
}

void stSynMailAttach::Swap(stSynMailAttach* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMailAttach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMailAttach_descriptor_;
  metadata.reflection = stSynMailAttach_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynDetailMailInfo::kIdFieldNumber;
const int stSynDetailMailInfo::kSenderNameFieldNumber;
const int stSynDetailMailInfo::kTitleFieldNumber;
const int stSynDetailMailInfo::kContentFieldNumber;
const int stSynDetailMailInfo::kSendTimeFieldNumber;
const int stSynDetailMailInfo::kIsReadFieldNumber;
const int stSynDetailMailInfo::kMailTypeFieldNumber;
const int stSynDetailMailInfo::kIsFetchAttachFieldNumber;
const int stSynDetailMailInfo::kAttachsFieldNumber;
#endif  // !_MSC_VER

stSynDetailMailInfo::stSynDetailMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynDetailMailInfo::InitAsDefaultInstance() {
}

stSynDetailMailInfo::stSynDetailMailInfo(const stSynDetailMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynDetailMailInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = 0u;
  isread_ = false;
  mailtype_ = 1;
  isfetchattach_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynDetailMailInfo::~stSynDetailMailInfo() {
  SharedDtor();
}

void stSynDetailMailInfo::SharedDtor() {
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void stSynDetailMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynDetailMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynDetailMailInfo_descriptor_;
}

const stSynDetailMailInfo& stSynDetailMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynDetailMailInfo* stSynDetailMailInfo::default_instance_ = NULL;

stSynDetailMailInfo* stSynDetailMailInfo::New() const {
  return new stSynDetailMailInfo;
}

void stSynDetailMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    sendtime_ = 0u;
    isread_ = false;
    mailtype_ = 1;
    isfetchattach_ = false;
  }
  attachs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynDetailMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_senderName;
        break;
      }

      // optional string senderName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sendTime;
        break;
      }

      // optional uint32 sendTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isRead;
        break;
      }

      // optional bool isRead = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isread_)));
          set_has_isread();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mailType;
        break;
      }

      // optional .MiscProto.eMailType mailType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mailType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::eMailType_IsValid(value)) {
            set_mailtype(static_cast< ::MiscProto::eMailType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isFetchAttach;
        break;
      }

      // optional bool isFetchAttach = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFetchAttach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfetchattach_)));
          set_has_isfetchattach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attachs;
        break;
      }

      // repeated .MiscProto.stSynMailAttach attachs = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_attachs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynDetailMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sendername(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // optional uint32 sendTime = 5;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sendtime(), output);
  }

  // optional bool isRead = 6;
  if (has_isread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isread(), output);
  }

  // optional .MiscProto.eMailType mailType = 7;
  if (has_mailtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->mailtype(), output);
  }

  // optional bool isFetchAttach = 8;
  if (has_isfetchattach()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isfetchattach(), output);
  }

  // repeated .MiscProto.stSynMailAttach attachs = 9;
  for (int i = 0; i < this->attachs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->attachs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynDetailMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string senderName = 2;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sendername(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional uint32 sendTime = 5;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sendtime(), target);
  }

  // optional bool isRead = 6;
  if (has_isread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isread(), target);
  }

  // optional .MiscProto.eMailType mailType = 7;
  if (has_mailtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->mailtype(), target);
  }

  // optional bool isFetchAttach = 8;
  if (has_isfetchattach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isfetchattach(), target);
  }

  // repeated .MiscProto.stSynMailAttach attachs = 9;
  for (int i = 0; i < this->attachs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->attachs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynDetailMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string senderName = 2;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 sendTime = 5;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sendtime());
    }

    // optional bool isRead = 6;
    if (has_isread()) {
      total_size += 1 + 1;
    }

    // optional .MiscProto.eMailType mailType = 7;
    if (has_mailtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mailtype());
    }

    // optional bool isFetchAttach = 8;
    if (has_isfetchattach()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MiscProto.stSynMailAttach attachs = 9;
  total_size += 1 * this->attachs_size();
  for (int i = 0; i < this->attachs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynDetailMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynDetailMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynDetailMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynDetailMailInfo::MergeFrom(const stSynDetailMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachs_.MergeFrom(from.attachs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_isread()) {
      set_isread(from.isread());
    }
    if (from.has_mailtype()) {
      set_mailtype(from.mailtype());
    }
    if (from.has_isfetchattach()) {
      set_isfetchattach(from.isfetchattach());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynDetailMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynDetailMailInfo::CopyFrom(const stSynDetailMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynDetailMailInfo::IsInitialized() const {

  return true;
}

void stSynDetailMailInfo::Swap(stSynDetailMailInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(sendername_, other->sendername_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(isread_, other->isread_);
    std::swap(mailtype_, other->mailtype_);
    std::swap(isfetchattach_, other->isfetchattach_);
    attachs_.Swap(&other->attachs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynDetailMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynDetailMailInfo_descriptor_;
  metadata.reflection = stSynDetailMailInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynAllMail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllMail_ProtoModID_descriptor_;
}
bool stSynAllMail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllMail_ProtoModID stSynAllMail::ModID;
const stSynAllMail_ProtoModID stSynAllMail::ProtoModID_MIN;
const stSynAllMail_ProtoModID stSynAllMail::ProtoModID_MAX;
const int stSynAllMail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynAllMail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllMail_ProtoFunID_descriptor_;
}
bool stSynAllMail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllMail_ProtoFunID stSynAllMail::FunID;
const stSynAllMail_ProtoFunID stSynAllMail::ProtoFunID_MIN;
const stSynAllMail_ProtoFunID stSynAllMail::ProtoFunID_MAX;
const int stSynAllMail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynAllMail::kMailInfosFieldNumber;
#endif  // !_MSC_VER

stSynAllMail::stSynAllMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynAllMail::InitAsDefaultInstance() {
}

stSynAllMail::stSynAllMail(const stSynAllMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynAllMail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynAllMail::~stSynAllMail() {
  SharedDtor();
}

void stSynAllMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynAllMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynAllMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllMail_descriptor_;
}

const stSynAllMail& stSynAllMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynAllMail* stSynAllMail::default_instance_ = NULL;

stSynAllMail* stSynAllMail::New() const {
  return new stSynAllMail;
}

void stSynAllMail::Clear() {
  mailinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynAllMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stSynMainSnalInfo mailInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mailInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mailinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mailInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynAllMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stSynMainSnalInfo mailInfos = 1;
  for (int i = 0; i < this->mailinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynAllMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stSynMainSnalInfo mailInfos = 1;
  for (int i = 0; i < this->mailinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynAllMail::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stSynMainSnalInfo mailInfos = 1;
  total_size += 1 * this->mailinfos_size();
  for (int i = 0; i < this->mailinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mailinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynAllMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynAllMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynAllMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynAllMail::MergeFrom(const stSynAllMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  mailinfos_.MergeFrom(from.mailinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynAllMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynAllMail::CopyFrom(const stSynAllMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynAllMail::IsInitialized() const {

  return true;
}

void stSynAllMail::Swap(stSynAllMail* other) {
  if (other != this) {
    mailinfos_.Swap(&other->mailinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynAllMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynAllMail_descriptor_;
  metadata.reflection = stSynAllMail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqReadMail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReadMail_ProtoModID_descriptor_;
}
bool stReqReadMail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReadMail_ProtoModID stReqReadMail::ModID;
const stReqReadMail_ProtoModID stReqReadMail::ProtoModID_MIN;
const stReqReadMail_ProtoModID stReqReadMail::ProtoModID_MAX;
const int stReqReadMail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqReadMail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReadMail_ProtoFunID_descriptor_;
}
bool stReqReadMail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReadMail_ProtoFunID stReqReadMail::FunID;
const stReqReadMail_ProtoFunID stReqReadMail::ProtoFunID_MIN;
const stReqReadMail_ProtoFunID stReqReadMail::ProtoFunID_MAX;
const int stReqReadMail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqReadMail::kIdFieldNumber;
#endif  // !_MSC_VER

stReqReadMail::stReqReadMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqReadMail::InitAsDefaultInstance() {
}

stReqReadMail::stReqReadMail(const stReqReadMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqReadMail::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqReadMail::~stReqReadMail() {
  SharedDtor();
}

void stReqReadMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqReadMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqReadMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReadMail_descriptor_;
}

const stReqReadMail& stReqReadMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqReadMail* stReqReadMail::default_instance_ = NULL;

stReqReadMail* stReqReadMail::New() const {
  return new stReqReadMail;
}

void stReqReadMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqReadMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqReadMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqReadMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqReadMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqReadMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqReadMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqReadMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqReadMail::MergeFrom(const stReqReadMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqReadMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqReadMail::CopyFrom(const stReqReadMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqReadMail::IsInitialized() const {

  return true;
}

void stReqReadMail::Swap(stReqReadMail* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqReadMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqReadMail_descriptor_;
  metadata.reflection = stReqReadMail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetMailInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetMailInfo_ProtoModID_descriptor_;
}
bool stRetMailInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetMailInfo_ProtoModID stRetMailInfo::ModID;
const stRetMailInfo_ProtoModID stRetMailInfo::ProtoModID_MIN;
const stRetMailInfo_ProtoModID stRetMailInfo::ProtoModID_MAX;
const int stRetMailInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetMailInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetMailInfo_ProtoFunID_descriptor_;
}
bool stRetMailInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetMailInfo_ProtoFunID stRetMailInfo::FunID;
const stRetMailInfo_ProtoFunID stRetMailInfo::ProtoFunID_MIN;
const stRetMailInfo_ProtoFunID stRetMailInfo::ProtoFunID_MAX;
const int stRetMailInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetMailInfo::kMailInfoFieldNumber;
#endif  // !_MSC_VER

stRetMailInfo::stRetMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetMailInfo::InitAsDefaultInstance() {
  mailinfo_ = const_cast< ::MiscProto::stSynDetailMailInfo*>(&::MiscProto::stSynDetailMailInfo::default_instance());
}

stRetMailInfo::stRetMailInfo(const stRetMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetMailInfo::SharedCtor() {
  _cached_size_ = 0;
  mailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetMailInfo::~stRetMailInfo() {
  SharedDtor();
}

void stRetMailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete mailinfo_;
  }
}

void stRetMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetMailInfo_descriptor_;
}

const stRetMailInfo& stRetMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetMailInfo* stRetMailInfo::default_instance_ = NULL;

stRetMailInfo* stRetMailInfo::New() const {
  return new stRetMailInfo;
}

void stRetMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailinfo()) {
      if (mailinfo_ != NULL) mailinfo_->::MiscProto::stSynDetailMailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stSynDetailMailInfo mailInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stSynDetailMailInfo mailInfo = 1;
  if (has_mailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stSynDetailMailInfo mailInfo = 1;
  if (has_mailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stSynDetailMailInfo mailInfo = 1;
    if (has_mailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetMailInfo::MergeFrom(const stRetMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailinfo()) {
      mutable_mailinfo()->::MiscProto::stSynDetailMailInfo::MergeFrom(from.mailinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetMailInfo::CopyFrom(const stRetMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetMailInfo::IsInitialized() const {

  return true;
}

void stRetMailInfo::Swap(stRetMailInfo* other) {
  if (other != this) {
    std::swap(mailinfo_, other->mailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetMailInfo_descriptor_;
  metadata.reflection = stRetMailInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqFetchAttach_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFetchAttach_ProtoModID_descriptor_;
}
bool stReqFetchAttach_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFetchAttach_ProtoModID stReqFetchAttach::ModID;
const stReqFetchAttach_ProtoModID stReqFetchAttach::ProtoModID_MIN;
const stReqFetchAttach_ProtoModID stReqFetchAttach::ProtoModID_MAX;
const int stReqFetchAttach::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqFetchAttach_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFetchAttach_ProtoFunID_descriptor_;
}
bool stReqFetchAttach_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFetchAttach_ProtoFunID stReqFetchAttach::FunID;
const stReqFetchAttach_ProtoFunID stReqFetchAttach::ProtoFunID_MIN;
const stReqFetchAttach_ProtoFunID stReqFetchAttach::ProtoFunID_MAX;
const int stReqFetchAttach::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqFetchAttach::kIdFieldNumber;
#endif  // !_MSC_VER

stReqFetchAttach::stReqFetchAttach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqFetchAttach::InitAsDefaultInstance() {
}

stReqFetchAttach::stReqFetchAttach(const stReqFetchAttach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqFetchAttach::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqFetchAttach::~stReqFetchAttach() {
  SharedDtor();
}

void stReqFetchAttach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqFetchAttach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqFetchAttach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFetchAttach_descriptor_;
}

const stReqFetchAttach& stReqFetchAttach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqFetchAttach* stReqFetchAttach::default_instance_ = NULL;

stReqFetchAttach* stReqFetchAttach::New() const {
  return new stReqFetchAttach;
}

void stReqFetchAttach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqFetchAttach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqFetchAttach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqFetchAttach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqFetchAttach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqFetchAttach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqFetchAttach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqFetchAttach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqFetchAttach::MergeFrom(const stReqFetchAttach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqFetchAttach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqFetchAttach::CopyFrom(const stReqFetchAttach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqFetchAttach::IsInitialized() const {

  return true;
}

void stReqFetchAttach::Swap(stReqFetchAttach* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqFetchAttach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqFetchAttach_descriptor_;
  metadata.reflection = stReqFetchAttach_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFetchAttachResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchAttachResult_Result_descriptor_;
}
bool stFetchAttachResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFetchAttachResult_Result stFetchAttachResult::SUCCESS;
const stFetchAttachResult_Result stFetchAttachResult::ATTACH_NOT_EXIST;
const stFetchAttachResult_Result stFetchAttachResult::Result_MIN;
const stFetchAttachResult_Result stFetchAttachResult::Result_MAX;
const int stFetchAttachResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFetchAttachResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchAttachResult_ProtoModID_descriptor_;
}
bool stFetchAttachResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFetchAttachResult_ProtoModID stFetchAttachResult::ModID;
const stFetchAttachResult_ProtoModID stFetchAttachResult::ProtoModID_MIN;
const stFetchAttachResult_ProtoModID stFetchAttachResult::ProtoModID_MAX;
const int stFetchAttachResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFetchAttachResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchAttachResult_ProtoFunID_descriptor_;
}
bool stFetchAttachResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFetchAttachResult_ProtoFunID stFetchAttachResult::FunID;
const stFetchAttachResult_ProtoFunID stFetchAttachResult::ProtoFunID_MIN;
const stFetchAttachResult_ProtoFunID stFetchAttachResult::ProtoFunID_MAX;
const int stFetchAttachResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFetchAttachResult::kResultFieldNumber;
#endif  // !_MSC_VER

stFetchAttachResult::stFetchAttachResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFetchAttachResult::InitAsDefaultInstance() {
}

stFetchAttachResult::stFetchAttachResult(const stFetchAttachResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFetchAttachResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFetchAttachResult::~stFetchAttachResult() {
  SharedDtor();
}

void stFetchAttachResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stFetchAttachResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFetchAttachResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchAttachResult_descriptor_;
}

const stFetchAttachResult& stFetchAttachResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stFetchAttachResult* stFetchAttachResult::default_instance_ = NULL;

stFetchAttachResult* stFetchAttachResult::New() const {
  return new stFetchAttachResult;
}

void stFetchAttachResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFetchAttachResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stFetchAttachResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stFetchAttachResult_Result_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stFetchAttachResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFetchAttachResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stFetchAttachResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFetchAttachResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stFetchAttachResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFetchAttachResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stFetchAttachResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFetchAttachResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFetchAttachResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFetchAttachResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFetchAttachResult::MergeFrom(const stFetchAttachResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFetchAttachResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFetchAttachResult::CopyFrom(const stFetchAttachResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFetchAttachResult::IsInitialized() const {

  return true;
}

void stFetchAttachResult::Swap(stFetchAttachResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFetchAttachResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFetchAttachResult_descriptor_;
  metadata.reflection = stFetchAttachResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReceiveMail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveMail_ProtoModID_descriptor_;
}
bool stReceiveMail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveMail_ProtoModID stReceiveMail::ModID;
const stReceiveMail_ProtoModID stReceiveMail::ProtoModID_MIN;
const stReceiveMail_ProtoModID stReceiveMail::ProtoModID_MAX;
const int stReceiveMail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReceiveMail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveMail_ProtoFunID_descriptor_;
}
bool stReceiveMail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveMail_ProtoFunID stReceiveMail::FunID;
const stReceiveMail_ProtoFunID stReceiveMail::ProtoFunID_MIN;
const stReceiveMail_ProtoFunID stReceiveMail::ProtoFunID_MAX;
const int stReceiveMail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReceiveMail::kMailInfoFieldNumber;
#endif  // !_MSC_VER

stReceiveMail::stReceiveMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReceiveMail::InitAsDefaultInstance() {
  mailinfo_ = const_cast< ::MiscProto::stSynMainSnalInfo*>(&::MiscProto::stSynMainSnalInfo::default_instance());
}

stReceiveMail::stReceiveMail(const stReceiveMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReceiveMail::SharedCtor() {
  _cached_size_ = 0;
  mailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReceiveMail::~stReceiveMail() {
  SharedDtor();
}

void stReceiveMail::SharedDtor() {
  if (this != default_instance_) {
    delete mailinfo_;
  }
}

void stReceiveMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReceiveMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveMail_descriptor_;
}

const stReceiveMail& stReceiveMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReceiveMail* stReceiveMail::default_instance_ = NULL;

stReceiveMail* stReceiveMail::New() const {
  return new stReceiveMail;
}

void stReceiveMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailinfo()) {
      if (mailinfo_ != NULL) mailinfo_->::MiscProto::stSynMainSnalInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReceiveMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stSynMainSnalInfo mailInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReceiveMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stSynMainSnalInfo mailInfo = 1;
  if (has_mailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReceiveMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stSynMainSnalInfo mailInfo = 1;
  if (has_mailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReceiveMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stSynMainSnalInfo mailInfo = 1;
    if (has_mailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReceiveMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReceiveMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReceiveMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReceiveMail::MergeFrom(const stReceiveMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailinfo()) {
      mutable_mailinfo()->::MiscProto::stSynMainSnalInfo::MergeFrom(from.mailinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReceiveMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReceiveMail::CopyFrom(const stReceiveMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReceiveMail::IsInitialized() const {

  return true;
}

void stReceiveMail::Swap(stReceiveMail* other) {
  if (other != this) {
    std::swap(mailinfo_, other->mailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReceiveMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReceiveMail_descriptor_;
  metadata.reflection = stReceiveMail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRewardInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRewardInfo_ProtoModID_descriptor_;
}
bool stReqRewardInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRewardInfo_ProtoModID stReqRewardInfo::ModID;
const stReqRewardInfo_ProtoModID stReqRewardInfo::ProtoModID_MIN;
const stReqRewardInfo_ProtoModID stReqRewardInfo::ProtoModID_MAX;
const int stReqRewardInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRewardInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRewardInfo_ProtoFunID_descriptor_;
}
bool stReqRewardInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRewardInfo_ProtoFunID stReqRewardInfo::FunID;
const stReqRewardInfo_ProtoFunID stReqRewardInfo::ProtoFunID_MIN;
const stReqRewardInfo_ProtoFunID stReqRewardInfo::ProtoFunID_MAX;
const int stReqRewardInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRewardInfo::kFlagFieldNumber;
#endif  // !_MSC_VER

stReqRewardInfo::stReqRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRewardInfo::InitAsDefaultInstance() {
}

stReqRewardInfo::stReqRewardInfo(const stReqRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRewardInfo::~stReqRewardInfo() {
  SharedDtor();
}

void stReqRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRewardInfo_descriptor_;
}

const stReqRewardInfo& stReqRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqRewardInfo* stReqRewardInfo::default_instance_ = NULL;

stReqRewardInfo* stReqRewardInfo::New() const {
  return new stReqRewardInfo;
}

void stReqRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRewardInfo::MergeFrom(const stReqRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRewardInfo::CopyFrom(const stReqRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRewardInfo::IsInitialized() const {

  return true;
}

void stReqRewardInfo::Swap(stReqRewardInfo* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRewardInfo_descriptor_;
  metadata.reflection = stReqRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRewardInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRewardInfo_ProtoModID_descriptor_;
}
bool stRetRewardInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRewardInfo_ProtoModID stRetRewardInfo::ModID;
const stRetRewardInfo_ProtoModID stRetRewardInfo::ProtoModID_MIN;
const stRetRewardInfo_ProtoModID stRetRewardInfo::ProtoModID_MAX;
const int stRetRewardInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRewardInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRewardInfo_ProtoFunID_descriptor_;
}
bool stRetRewardInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRewardInfo_ProtoFunID stRetRewardInfo::FunID;
const stRetRewardInfo_ProtoFunID stRetRewardInfo::ProtoFunID_MIN;
const stRetRewardInfo_ProtoFunID stRetRewardInfo::ProtoFunID_MAX;
const int stRetRewardInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRewardInfo::kGetSignRewardNumFieldNumber;
const int stRetRewardInfo::kHasGetSignRewardFieldNumber;
const int stRetRewardInfo::kGetOpenSvrRewardNumFieldNumber;
const int stRetRewardInfo::kHasGetOpenSvrRewardFieldNumber;
const int stRetRewardInfo::kHasGetRewardLvFieldNumber;
const int stRetRewardInfo::kOnlineTimesFieldNumber;
const int stRetRewardInfo::kHasGetOnlineRewardFieldNumber;
#endif  // !_MSC_VER

stRetRewardInfo::stRetRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRewardInfo::InitAsDefaultInstance() {
}

stRetRewardInfo::stRetRewardInfo(const stRetRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  getsignrewardnum_ = 0u;
  hasgetsignreward_ = false;
  getopensvrrewardnum_ = 0u;
  hasgetopensvrreward_ = false;
  onlinetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRewardInfo::~stRetRewardInfo() {
  SharedDtor();
}

void stRetRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRewardInfo_descriptor_;
}

const stRetRewardInfo& stRetRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetRewardInfo* stRetRewardInfo::default_instance_ = NULL;

stRetRewardInfo* stRetRewardInfo::New() const {
  return new stRetRewardInfo;
}

void stRetRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    getsignrewardnum_ = 0u;
    hasgetsignreward_ = false;
    getopensvrrewardnum_ = 0u;
    hasgetopensvrreward_ = false;
    onlinetimes_ = 0u;
  }
  hasgetrewardlv_.Clear();
  hasgetonlinereward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 getSignRewardNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getsignrewardnum_)));
          set_has_getsignrewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasGetSignReward;
        break;
      }

      // optional bool hasGetSignReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGetSignReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasgetsignreward_)));
          set_has_hasgetsignreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getOpenSvrRewardNum;
        break;
      }

      // optional uint32 getOpenSvrRewardNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getOpenSvrRewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getopensvrrewardnum_)));
          set_has_getopensvrrewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hasGetOpenSvrReward;
        break;
      }

      // optional bool hasGetOpenSvrReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGetOpenSvrReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasgetopensvrreward_)));
          set_has_hasgetopensvrreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasGetRewardLv;
        break;
      }

      // repeated uint32 hasGetRewardLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGetRewardLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_hasgetrewardlv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hasgetrewardlv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hasGetRewardLv;
        if (input->ExpectTag(48)) goto parse_onlineTimes;
        break;
      }

      // optional uint32 onlineTimes = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetimes_)));
          set_has_onlinetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hasGetOnlineReward;
        break;
      }

      // repeated uint32 hasGetOnlineReward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGetOnlineReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56, input, this->mutable_hasgetonlinereward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hasgetonlinereward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hasGetOnlineReward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 getSignRewardNum = 1;
  if (has_getsignrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->getsignrewardnum(), output);
  }

  // optional bool hasGetSignReward = 2;
  if (has_hasgetsignreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasgetsignreward(), output);
  }

  // optional uint32 getOpenSvrRewardNum = 3;
  if (has_getopensvrrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->getopensvrrewardnum(), output);
  }

  // optional bool hasGetOpenSvrReward = 4;
  if (has_hasgetopensvrreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hasgetopensvrreward(), output);
  }

  // repeated uint32 hasGetRewardLv = 5;
  for (int i = 0; i < this->hasgetrewardlv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->hasgetrewardlv(i), output);
  }

  // optional uint32 onlineTimes = 6;
  if (has_onlinetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->onlinetimes(), output);
  }

  // repeated uint32 hasGetOnlineReward = 7;
  for (int i = 0; i < this->hasgetonlinereward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->hasgetonlinereward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 getSignRewardNum = 1;
  if (has_getsignrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->getsignrewardnum(), target);
  }

  // optional bool hasGetSignReward = 2;
  if (has_hasgetsignreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasgetsignreward(), target);
  }

  // optional uint32 getOpenSvrRewardNum = 3;
  if (has_getopensvrrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->getopensvrrewardnum(), target);
  }

  // optional bool hasGetOpenSvrReward = 4;
  if (has_hasgetopensvrreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hasgetopensvrreward(), target);
  }

  // repeated uint32 hasGetRewardLv = 5;
  for (int i = 0; i < this->hasgetrewardlv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->hasgetrewardlv(i), target);
  }

  // optional uint32 onlineTimes = 6;
  if (has_onlinetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->onlinetimes(), target);
  }

  // repeated uint32 hasGetOnlineReward = 7;
  for (int i = 0; i < this->hasgetonlinereward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(7, this->hasgetonlinereward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 getSignRewardNum = 1;
    if (has_getsignrewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getsignrewardnum());
    }

    // optional bool hasGetSignReward = 2;
    if (has_hasgetsignreward()) {
      total_size += 1 + 1;
    }

    // optional uint32 getOpenSvrRewardNum = 3;
    if (has_getopensvrrewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getopensvrrewardnum());
    }

    // optional bool hasGetOpenSvrReward = 4;
    if (has_hasgetopensvrreward()) {
      total_size += 1 + 1;
    }

    // optional uint32 onlineTimes = 6;
    if (has_onlinetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetimes());
    }

  }
  // repeated uint32 hasGetRewardLv = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hasgetrewardlv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hasgetrewardlv(i));
    }
    total_size += 1 * this->hasgetrewardlv_size() + data_size;
  }

  // repeated uint32 hasGetOnlineReward = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->hasgetonlinereward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hasgetonlinereward(i));
    }
    total_size += 1 * this->hasgetonlinereward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRewardInfo::MergeFrom(const stRetRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hasgetrewardlv_.MergeFrom(from.hasgetrewardlv_);
  hasgetonlinereward_.MergeFrom(from.hasgetonlinereward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_getsignrewardnum()) {
      set_getsignrewardnum(from.getsignrewardnum());
    }
    if (from.has_hasgetsignreward()) {
      set_hasgetsignreward(from.hasgetsignreward());
    }
    if (from.has_getopensvrrewardnum()) {
      set_getopensvrrewardnum(from.getopensvrrewardnum());
    }
    if (from.has_hasgetopensvrreward()) {
      set_hasgetopensvrreward(from.hasgetopensvrreward());
    }
    if (from.has_onlinetimes()) {
      set_onlinetimes(from.onlinetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRewardInfo::CopyFrom(const stRetRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRewardInfo::IsInitialized() const {

  return true;
}

void stRetRewardInfo::Swap(stRetRewardInfo* other) {
  if (other != this) {
    std::swap(getsignrewardnum_, other->getsignrewardnum_);
    std::swap(hasgetsignreward_, other->hasgetsignreward_);
    std::swap(getopensvrrewardnum_, other->getopensvrrewardnum_);
    std::swap(hasgetopensvrreward_, other->hasgetopensvrreward_);
    hasgetrewardlv_.Swap(&other->hasgetrewardlv_);
    std::swap(onlinetimes_, other->onlinetimes_);
    hasgetonlinereward_.Swap(&other->hasgetonlinereward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRewardInfo_descriptor_;
  metadata.reflection = stRetRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSignReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSignReward_ProtoModID_descriptor_;
}
bool stReqSignReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSignReward_ProtoModID stReqSignReward::ModID;
const stReqSignReward_ProtoModID stReqSignReward::ProtoModID_MIN;
const stReqSignReward_ProtoModID stReqSignReward::ProtoModID_MAX;
const int stReqSignReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSignReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSignReward_ProtoFunID_descriptor_;
}
bool stReqSignReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSignReward_ProtoFunID stReqSignReward::FunID;
const stReqSignReward_ProtoFunID stReqSignReward::ProtoFunID_MIN;
const stReqSignReward_ProtoFunID stReqSignReward::ProtoFunID_MAX;
const int stReqSignReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSignReward::kDayFieldNumber;
#endif  // !_MSC_VER

stReqSignReward::stReqSignReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSignReward::InitAsDefaultInstance() {
}

stReqSignReward::stReqSignReward(const stReqSignReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSignReward::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSignReward::~stReqSignReward() {
  SharedDtor();
}

void stReqSignReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSignReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSignReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSignReward_descriptor_;
}

const stReqSignReward& stReqSignReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqSignReward* stReqSignReward::default_instance_ = NULL;

stReqSignReward* stReqSignReward::New() const {
  return new stReqSignReward;
}

void stReqSignReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSignReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSignReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSignReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSignReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSignReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSignReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSignReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSignReward::MergeFrom(const stReqSignReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSignReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSignReward::CopyFrom(const stReqSignReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSignReward::IsInitialized() const {

  return true;
}

void stReqSignReward::Swap(stReqSignReward* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSignReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSignReward_descriptor_;
  metadata.reflection = stReqSignReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGetSignRewardResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetSignRewardResult_Result_descriptor_;
}
bool stGetSignRewardResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetSignRewardResult_Result stGetSignRewardResult::SUCCESS;
const stGetSignRewardResult_Result stGetSignRewardResult::HAS_GET_REWARD;
const stGetSignRewardResult_Result stGetSignRewardResult::BAG_FULL;
const stGetSignRewardResult_Result stGetSignRewardResult::Result_MIN;
const stGetSignRewardResult_Result stGetSignRewardResult::Result_MAX;
const int stGetSignRewardResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetSignRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetSignRewardResult_ProtoModID_descriptor_;
}
bool stGetSignRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetSignRewardResult_ProtoModID stGetSignRewardResult::ModID;
const stGetSignRewardResult_ProtoModID stGetSignRewardResult::ProtoModID_MIN;
const stGetSignRewardResult_ProtoModID stGetSignRewardResult::ProtoModID_MAX;
const int stGetSignRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetSignRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetSignRewardResult_ProtoFunID_descriptor_;
}
bool stGetSignRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetSignRewardResult_ProtoFunID stGetSignRewardResult::FunID;
const stGetSignRewardResult_ProtoFunID stGetSignRewardResult::ProtoFunID_MIN;
const stGetSignRewardResult_ProtoFunID stGetSignRewardResult::ProtoFunID_MAX;
const int stGetSignRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGetSignRewardResult::kResultFieldNumber;
const int stGetSignRewardResult::kDayFieldNumber;
#endif  // !_MSC_VER

stGetSignRewardResult::stGetSignRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGetSignRewardResult::InitAsDefaultInstance() {
}

stGetSignRewardResult::stGetSignRewardResult(const stGetSignRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGetSignRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGetSignRewardResult::~stGetSignRewardResult() {
  SharedDtor();
}

void stGetSignRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGetSignRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGetSignRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetSignRewardResult_descriptor_;
}

const stGetSignRewardResult& stGetSignRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGetSignRewardResult* stGetSignRewardResult::default_instance_ = NULL;

stGetSignRewardResult* stGetSignRewardResult::New() const {
  return new stGetSignRewardResult;
}

void stGetSignRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGetSignRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGetSignRewardResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stGetSignRewardResult_Result_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stGetSignRewardResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // optional uint32 day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGetSignRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGetSignRewardResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGetSignRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGetSignRewardResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGetSignRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGetSignRewardResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGetSignRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGetSignRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGetSignRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGetSignRewardResult::MergeFrom(const stGetSignRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGetSignRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGetSignRewardResult::CopyFrom(const stGetSignRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGetSignRewardResult::IsInitialized() const {

  return true;
}

void stGetSignRewardResult::Swap(stGetSignRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGetSignRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGetSignRewardResult_descriptor_;
  metadata.reflection = stGetSignRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenSvrReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenSvrReward_ProtoModID_descriptor_;
}
bool stReqOpenSvrReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenSvrReward_ProtoModID stReqOpenSvrReward::ModID;
const stReqOpenSvrReward_ProtoModID stReqOpenSvrReward::ProtoModID_MIN;
const stReqOpenSvrReward_ProtoModID stReqOpenSvrReward::ProtoModID_MAX;
const int stReqOpenSvrReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenSvrReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenSvrReward_ProtoFunID_descriptor_;
}
bool stReqOpenSvrReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenSvrReward_ProtoFunID stReqOpenSvrReward::FunID;
const stReqOpenSvrReward_ProtoFunID stReqOpenSvrReward::ProtoFunID_MIN;
const stReqOpenSvrReward_ProtoFunID stReqOpenSvrReward::ProtoFunID_MAX;
const int stReqOpenSvrReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenSvrReward::kDayFieldNumber;
#endif  // !_MSC_VER

stReqOpenSvrReward::stReqOpenSvrReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenSvrReward::InitAsDefaultInstance() {
}

stReqOpenSvrReward::stReqOpenSvrReward(const stReqOpenSvrReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenSvrReward::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenSvrReward::~stReqOpenSvrReward() {
  SharedDtor();
}

void stReqOpenSvrReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenSvrReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenSvrReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenSvrReward_descriptor_;
}

const stReqOpenSvrReward& stReqOpenSvrReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqOpenSvrReward* stReqOpenSvrReward::default_instance_ = NULL;

stReqOpenSvrReward* stReqOpenSvrReward::New() const {
  return new stReqOpenSvrReward;
}

void stReqOpenSvrReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenSvrReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenSvrReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenSvrReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenSvrReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenSvrReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenSvrReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenSvrReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenSvrReward::MergeFrom(const stReqOpenSvrReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenSvrReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenSvrReward::CopyFrom(const stReqOpenSvrReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenSvrReward::IsInitialized() const {

  return true;
}

void stReqOpenSvrReward::Swap(stReqOpenSvrReward* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenSvrReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenSvrReward_descriptor_;
  metadata.reflection = stReqOpenSvrReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGetOpenSvrRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetOpenSvrRewardResult_eResult_descriptor_;
}
bool stGetOpenSvrRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetOpenSvrRewardResult_eResult stGetOpenSvrRewardResult::eSUCCESS;
const stGetOpenSvrRewardResult_eResult stGetOpenSvrRewardResult::eHAS_GET_REWARD;
const stGetOpenSvrRewardResult_eResult stGetOpenSvrRewardResult::eBAG_FULL;
const stGetOpenSvrRewardResult_eResult stGetOpenSvrRewardResult::eResult_MIN;
const stGetOpenSvrRewardResult_eResult stGetOpenSvrRewardResult::eResult_MAX;
const int stGetOpenSvrRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetOpenSvrRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetOpenSvrRewardResult_ProtoModID_descriptor_;
}
bool stGetOpenSvrRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetOpenSvrRewardResult_ProtoModID stGetOpenSvrRewardResult::ModID;
const stGetOpenSvrRewardResult_ProtoModID stGetOpenSvrRewardResult::ProtoModID_MIN;
const stGetOpenSvrRewardResult_ProtoModID stGetOpenSvrRewardResult::ProtoModID_MAX;
const int stGetOpenSvrRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetOpenSvrRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetOpenSvrRewardResult_ProtoFunID_descriptor_;
}
bool stGetOpenSvrRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetOpenSvrRewardResult_ProtoFunID stGetOpenSvrRewardResult::FunID;
const stGetOpenSvrRewardResult_ProtoFunID stGetOpenSvrRewardResult::ProtoFunID_MIN;
const stGetOpenSvrRewardResult_ProtoFunID stGetOpenSvrRewardResult::ProtoFunID_MAX;
const int stGetOpenSvrRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGetOpenSvrRewardResult::kResultFieldNumber;
const int stGetOpenSvrRewardResult::kDayFieldNumber;
#endif  // !_MSC_VER

stGetOpenSvrRewardResult::stGetOpenSvrRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGetOpenSvrRewardResult::InitAsDefaultInstance() {
}

stGetOpenSvrRewardResult::stGetOpenSvrRewardResult(const stGetOpenSvrRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGetOpenSvrRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGetOpenSvrRewardResult::~stGetOpenSvrRewardResult() {
  SharedDtor();
}

void stGetOpenSvrRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGetOpenSvrRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGetOpenSvrRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetOpenSvrRewardResult_descriptor_;
}

const stGetOpenSvrRewardResult& stGetOpenSvrRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGetOpenSvrRewardResult* stGetOpenSvrRewardResult::default_instance_ = NULL;

stGetOpenSvrRewardResult* stGetOpenSvrRewardResult::New() const {
  return new stGetOpenSvrRewardResult;
}

void stGetOpenSvrRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGetOpenSvrRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGetOpenSvrRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stGetOpenSvrRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stGetOpenSvrRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // optional uint32 day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGetOpenSvrRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGetOpenSvrRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGetOpenSvrRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGetOpenSvrRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGetOpenSvrRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGetOpenSvrRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGetOpenSvrRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGetOpenSvrRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGetOpenSvrRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGetOpenSvrRewardResult::MergeFrom(const stGetOpenSvrRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGetOpenSvrRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGetOpenSvrRewardResult::CopyFrom(const stGetOpenSvrRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGetOpenSvrRewardResult::IsInitialized() const {

  return true;
}

void stGetOpenSvrRewardResult::Swap(stGetOpenSvrRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGetOpenSvrRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGetOpenSvrRewardResult_descriptor_;
  metadata.reflection = stGetOpenSvrRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLvReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLvReward_ProtoModID_descriptor_;
}
bool stReqLvReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLvReward_ProtoModID stReqLvReward::ModID;
const stReqLvReward_ProtoModID stReqLvReward::ProtoModID_MIN;
const stReqLvReward_ProtoModID stReqLvReward::ProtoModID_MAX;
const int stReqLvReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLvReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLvReward_ProtoFunID_descriptor_;
}
bool stReqLvReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLvReward_ProtoFunID stReqLvReward::FunID;
const stReqLvReward_ProtoFunID stReqLvReward::ProtoFunID_MIN;
const stReqLvReward_ProtoFunID stReqLvReward::ProtoFunID_MAX;
const int stReqLvReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLvReward::kLvFieldNumber;
#endif  // !_MSC_VER

stReqLvReward::stReqLvReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLvReward::InitAsDefaultInstance() {
}

stReqLvReward::stReqLvReward(const stReqLvReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLvReward::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLvReward::~stReqLvReward() {
  SharedDtor();
}

void stReqLvReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLvReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLvReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLvReward_descriptor_;
}

const stReqLvReward& stReqLvReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqLvReward* stReqLvReward::default_instance_ = NULL;

stReqLvReward* stReqLvReward::New() const {
  return new stReqLvReward;
}

void stReqLvReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLvReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLvReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLvReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLvReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLvReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLvReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLvReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLvReward::MergeFrom(const stReqLvReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLvReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLvReward::CopyFrom(const stReqLvReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLvReward::IsInitialized() const {

  return true;
}

void stReqLvReward::Swap(stReqLvReward* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLvReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLvReward_descriptor_;
  metadata.reflection = stReqLvReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLvRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLvRewardResult_eResult_descriptor_;
}
bool stLvRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLvRewardResult_eResult stLvRewardResult::eSUCCESS;
const stLvRewardResult_eResult stLvRewardResult::eLEVEL_TOO_LOW;
const stLvRewardResult_eResult stLvRewardResult::eHAS_NO_REWARD_LV;
const stLvRewardResult_eResult stLvRewardResult::eINNER_ERROR;
const stLvRewardResult_eResult stLvRewardResult::eBAG_SLOT_NOT_ENOUGH;
const stLvRewardResult_eResult stLvRewardResult::eResult_MIN;
const stLvRewardResult_eResult stLvRewardResult::eResult_MAX;
const int stLvRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLvRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLvRewardResult_ProtoModID_descriptor_;
}
bool stLvRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLvRewardResult_ProtoModID stLvRewardResult::ModID;
const stLvRewardResult_ProtoModID stLvRewardResult::ProtoModID_MIN;
const stLvRewardResult_ProtoModID stLvRewardResult::ProtoModID_MAX;
const int stLvRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLvRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLvRewardResult_ProtoFunID_descriptor_;
}
bool stLvRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLvRewardResult_ProtoFunID stLvRewardResult::FunID;
const stLvRewardResult_ProtoFunID stLvRewardResult::ProtoFunID_MIN;
const stLvRewardResult_ProtoFunID stLvRewardResult::ProtoFunID_MAX;
const int stLvRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLvRewardResult::kResultFieldNumber;
const int stLvRewardResult::kGetRewardLvFieldNumber;
#endif  // !_MSC_VER

stLvRewardResult::stLvRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLvRewardResult::InitAsDefaultInstance() {
}

stLvRewardResult::stLvRewardResult(const stLvRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLvRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  getrewardlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLvRewardResult::~stLvRewardResult() {
  SharedDtor();
}

void stLvRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLvRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLvRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLvRewardResult_descriptor_;
}

const stLvRewardResult& stLvRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stLvRewardResult* stLvRewardResult::default_instance_ = NULL;

stLvRewardResult* stLvRewardResult::New() const {
  return new stLvRewardResult;
}

void stLvRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    getrewardlv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLvRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stLvRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stLvRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stLvRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_getRewardLv;
        break;
      }

      // optional uint32 getRewardLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getRewardLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getrewardlv_)));
          set_has_getrewardlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLvRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stLvRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 getRewardLv = 2;
  if (has_getrewardlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->getrewardlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLvRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stLvRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 getRewardLv = 2;
  if (has_getrewardlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->getrewardlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLvRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stLvRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 getRewardLv = 2;
    if (has_getrewardlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getrewardlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLvRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLvRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLvRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLvRewardResult::MergeFrom(const stLvRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_getrewardlv()) {
      set_getrewardlv(from.getrewardlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLvRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLvRewardResult::CopyFrom(const stLvRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLvRewardResult::IsInitialized() const {

  return true;
}

void stLvRewardResult::Swap(stLvRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(getrewardlv_, other->getrewardlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLvRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLvRewardResult_descriptor_;
  metadata.reflection = stLvRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOnlineReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOnlineReward_ProtoModID_descriptor_;
}
bool stReqOnlineReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOnlineReward_ProtoModID stReqOnlineReward::ModID;
const stReqOnlineReward_ProtoModID stReqOnlineReward::ProtoModID_MIN;
const stReqOnlineReward_ProtoModID stReqOnlineReward::ProtoModID_MAX;
const int stReqOnlineReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOnlineReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOnlineReward_ProtoFunID_descriptor_;
}
bool stReqOnlineReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOnlineReward_ProtoFunID stReqOnlineReward::FunID;
const stReqOnlineReward_ProtoFunID stReqOnlineReward::ProtoFunID_MIN;
const stReqOnlineReward_ProtoFunID stReqOnlineReward::ProtoFunID_MAX;
const int stReqOnlineReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOnlineReward::kIdFieldNumber;
#endif  // !_MSC_VER

stReqOnlineReward::stReqOnlineReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOnlineReward::InitAsDefaultInstance() {
}

stReqOnlineReward::stReqOnlineReward(const stReqOnlineReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOnlineReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOnlineReward::~stReqOnlineReward() {
  SharedDtor();
}

void stReqOnlineReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOnlineReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOnlineReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOnlineReward_descriptor_;
}

const stReqOnlineReward& stReqOnlineReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqOnlineReward* stReqOnlineReward::default_instance_ = NULL;

stReqOnlineReward* stReqOnlineReward::New() const {
  return new stReqOnlineReward;
}

void stReqOnlineReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOnlineReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOnlineReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOnlineReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOnlineReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOnlineReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOnlineReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOnlineReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOnlineReward::MergeFrom(const stReqOnlineReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOnlineReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOnlineReward::CopyFrom(const stReqOnlineReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOnlineReward::IsInitialized() const {

  return true;
}

void stReqOnlineReward::Swap(stReqOnlineReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOnlineReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOnlineReward_descriptor_;
  metadata.reflection = stReqOnlineReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGetOnlineRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetOnlineRewardResult_eResult_descriptor_;
}
bool stGetOnlineRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetOnlineRewardResult_eResult stGetOnlineRewardResult::eSUCCESS;
const stGetOnlineRewardResult_eResult stGetOnlineRewardResult::eHAS_REMAIN_TIME;
const stGetOnlineRewardResult_eResult stGetOnlineRewardResult::eBAG_FULL;
const stGetOnlineRewardResult_eResult stGetOnlineRewardResult::eHAS_GOT_REWARD;
const stGetOnlineRewardResult_eResult stGetOnlineRewardResult::eINNER_ERROR;
const stGetOnlineRewardResult_eResult stGetOnlineRewardResult::eResult_MIN;
const stGetOnlineRewardResult_eResult stGetOnlineRewardResult::eResult_MAX;
const int stGetOnlineRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetOnlineRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetOnlineRewardResult_ProtoModID_descriptor_;
}
bool stGetOnlineRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetOnlineRewardResult_ProtoModID stGetOnlineRewardResult::ModID;
const stGetOnlineRewardResult_ProtoModID stGetOnlineRewardResult::ProtoModID_MIN;
const stGetOnlineRewardResult_ProtoModID stGetOnlineRewardResult::ProtoModID_MAX;
const int stGetOnlineRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetOnlineRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetOnlineRewardResult_ProtoFunID_descriptor_;
}
bool stGetOnlineRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetOnlineRewardResult_ProtoFunID stGetOnlineRewardResult::FunID;
const stGetOnlineRewardResult_ProtoFunID stGetOnlineRewardResult::ProtoFunID_MIN;
const stGetOnlineRewardResult_ProtoFunID stGetOnlineRewardResult::ProtoFunID_MAX;
const int stGetOnlineRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGetOnlineRewardResult::kResultFieldNumber;
const int stGetOnlineRewardResult::kIdFieldNumber;
const int stGetOnlineRewardResult::kOnlineTimeFieldNumber;
#endif  // !_MSC_VER

stGetOnlineRewardResult::stGetOnlineRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGetOnlineRewardResult::InitAsDefaultInstance() {
}

stGetOnlineRewardResult::stGetOnlineRewardResult(const stGetOnlineRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGetOnlineRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  onlinetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGetOnlineRewardResult::~stGetOnlineRewardResult() {
  SharedDtor();
}

void stGetOnlineRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGetOnlineRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGetOnlineRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetOnlineRewardResult_descriptor_;
}

const stGetOnlineRewardResult& stGetOnlineRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGetOnlineRewardResult* stGetOnlineRewardResult::default_instance_ = NULL;

stGetOnlineRewardResult* stGetOnlineRewardResult::New() const {
  return new stGetOnlineRewardResult;
}

void stGetOnlineRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
    onlinetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGetOnlineRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGetOnlineRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stGetOnlineRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stGetOnlineRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_onlineTime;
        break;
      }

      // optional uint32 onlineTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGetOnlineRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGetOnlineRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 onlineTime = 3;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->onlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGetOnlineRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGetOnlineRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 onlineTime = 3;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->onlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGetOnlineRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGetOnlineRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 onlineTime = 3;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlinetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGetOnlineRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGetOnlineRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGetOnlineRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGetOnlineRewardResult::MergeFrom(const stGetOnlineRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGetOnlineRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGetOnlineRewardResult::CopyFrom(const stGetOnlineRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGetOnlineRewardResult::IsInitialized() const {

  return true;
}

void stGetOnlineRewardResult::Swap(stGetOnlineRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGetOnlineRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGetOnlineRewardResult_descriptor_;
  metadata.reflection = stGetOnlineRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyStarInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyStarInfo_ProtoModID_descriptor_;
}
bool stBuyStarInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyStarInfo_ProtoModID stBuyStarInfo::ModID;
const stBuyStarInfo_ProtoModID stBuyStarInfo::ProtoModID_MIN;
const stBuyStarInfo_ProtoModID stBuyStarInfo::ProtoModID_MAX;
const int stBuyStarInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyStarInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyStarInfo_ProtoFunID_descriptor_;
}
bool stBuyStarInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyStarInfo_ProtoFunID stBuyStarInfo::FunID;
const stBuyStarInfo_ProtoFunID stBuyStarInfo::ProtoFunID_MIN;
const stBuyStarInfo_ProtoFunID stBuyStarInfo::ProtoFunID_MAX;
const int stBuyStarInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyStarInfo::kBuyNumFieldNumber;
#endif  // !_MSC_VER

stBuyStarInfo::stBuyStarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyStarInfo::InitAsDefaultInstance() {
}

stBuyStarInfo::stBuyStarInfo(const stBuyStarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyStarInfo::SharedCtor() {
  _cached_size_ = 0;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyStarInfo::~stBuyStarInfo() {
  SharedDtor();
}

void stBuyStarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBuyStarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyStarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyStarInfo_descriptor_;
}

const stBuyStarInfo& stBuyStarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBuyStarInfo* stBuyStarInfo::default_instance_ = NULL;

stBuyStarInfo* stBuyStarInfo::New() const {
  return new stBuyStarInfo;
}

void stBuyStarInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buynum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyStarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 buyNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyStarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 buyNum = 1;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyStarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 buyNum = 1;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyStarInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 buyNum = 1;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyStarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyStarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyStarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyStarInfo::MergeFrom(const stBuyStarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyStarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyStarInfo::CopyFrom(const stBuyStarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyStarInfo::IsInitialized() const {

  return true;
}

void stBuyStarInfo::Swap(stBuyStarInfo* other) {
  if (other != this) {
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyStarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyStarInfo_descriptor_;
  metadata.reflection = stBuyStarInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBuyStar_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyStar_ProtoModID_descriptor_;
}
bool stReqBuyStar_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyStar_ProtoModID stReqBuyStar::ModID;
const stReqBuyStar_ProtoModID stReqBuyStar::ProtoModID_MIN;
const stReqBuyStar_ProtoModID stReqBuyStar::ProtoModID_MAX;
const int stReqBuyStar::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBuyStar_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyStar_ProtoFunID_descriptor_;
}
bool stReqBuyStar_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyStar_ProtoFunID stReqBuyStar::FunID;
const stReqBuyStar_ProtoFunID stReqBuyStar::ProtoFunID_MIN;
const stReqBuyStar_ProtoFunID stReqBuyStar::ProtoFunID_MAX;
const int stReqBuyStar::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBuyStar::kNumFieldNumber;
#endif  // !_MSC_VER

stReqBuyStar::stReqBuyStar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBuyStar::InitAsDefaultInstance() {
}

stReqBuyStar::stReqBuyStar(const stReqBuyStar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBuyStar::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBuyStar::~stReqBuyStar() {
  SharedDtor();
}

void stReqBuyStar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBuyStar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBuyStar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyStar_descriptor_;
}

const stReqBuyStar& stReqBuyStar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqBuyStar* stReqBuyStar::default_instance_ = NULL;

stReqBuyStar* stReqBuyStar::New() const {
  return new stReqBuyStar;
}

void stReqBuyStar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBuyStar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBuyStar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBuyStar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBuyStar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBuyStar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBuyStar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBuyStar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBuyStar::MergeFrom(const stReqBuyStar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBuyStar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBuyStar::CopyFrom(const stReqBuyStar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBuyStar::IsInitialized() const {

  return true;
}

void stReqBuyStar::Swap(stReqBuyStar* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBuyStar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBuyStar_descriptor_;
  metadata.reflection = stReqBuyStar_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyStarResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyStarResult_Result_descriptor_;
}
bool stBuyStarResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyStarResult_Result stBuyStarResult::SUCCESS;
const stBuyStarResult_Result stBuyStarResult::ITEM_NOT_ENOUGH;
const stBuyStarResult_Result stBuyStarResult::INNER_ERROR;
const stBuyStarResult_Result stBuyStarResult::Result_MIN;
const stBuyStarResult_Result stBuyStarResult::Result_MAX;
const int stBuyStarResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyStarResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyStarResult_ProtoModID_descriptor_;
}
bool stBuyStarResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyStarResult_ProtoModID stBuyStarResult::ModID;
const stBuyStarResult_ProtoModID stBuyStarResult::ProtoModID_MIN;
const stBuyStarResult_ProtoModID stBuyStarResult::ProtoModID_MAX;
const int stBuyStarResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyStarResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyStarResult_ProtoFunID_descriptor_;
}
bool stBuyStarResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyStarResult_ProtoFunID stBuyStarResult::FunID;
const stBuyStarResult_ProtoFunID stBuyStarResult::ProtoFunID_MIN;
const stBuyStarResult_ProtoFunID stBuyStarResult::ProtoFunID_MAX;
const int stBuyStarResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyStarResult::kResultFieldNumber;
const int stBuyStarResult::kHasBuyNumFieldNumber;
#endif  // !_MSC_VER

stBuyStarResult::stBuyStarResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyStarResult::InitAsDefaultInstance() {
}

stBuyStarResult::stBuyStarResult(const stBuyStarResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyStarResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  hasbuynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyStarResult::~stBuyStarResult() {
  SharedDtor();
}

void stBuyStarResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBuyStarResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyStarResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyStarResult_descriptor_;
}

const stBuyStarResult& stBuyStarResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBuyStarResult* stBuyStarResult::default_instance_ = NULL;

stBuyStarResult* stBuyStarResult::New() const {
  return new stBuyStarResult;
}

void stBuyStarResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    hasbuynum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyStarResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stBuyStarResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stBuyStarResult_Result_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stBuyStarResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasBuyNum;
        break;
      }

      // optional uint32 hasBuyNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasbuynum_)));
          set_has_hasbuynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyStarResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stBuyStarResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 hasBuyNum = 2;
  if (has_hasbuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hasbuynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyStarResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stBuyStarResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 hasBuyNum = 2;
  if (has_hasbuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hasbuynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyStarResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stBuyStarResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 hasBuyNum = 2;
    if (has_hasbuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasbuynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyStarResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyStarResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyStarResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyStarResult::MergeFrom(const stBuyStarResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_hasbuynum()) {
      set_hasbuynum(from.hasbuynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyStarResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyStarResult::CopyFrom(const stBuyStarResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyStarResult::IsInitialized() const {

  return true;
}

void stBuyStarResult::Swap(stBuyStarResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(hasbuynum_, other->hasbuynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyStarResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyStarResult_descriptor_;
  metadata.reflection = stBuyStarResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqOpenDrawWindow_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpenDrawWindow_ProtoModID_descriptor_;
}
bool ReqOpenDrawWindow_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqOpenDrawWindow_ProtoModID ReqOpenDrawWindow::ModID;
const ReqOpenDrawWindow_ProtoModID ReqOpenDrawWindow::ProtoModID_MIN;
const ReqOpenDrawWindow_ProtoModID ReqOpenDrawWindow::ProtoModID_MAX;
const int ReqOpenDrawWindow::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ReqOpenDrawWindow_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpenDrawWindow_ProtoFunID_descriptor_;
}
bool ReqOpenDrawWindow_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqOpenDrawWindow_ProtoFunID ReqOpenDrawWindow::FunID;
const ReqOpenDrawWindow_ProtoFunID ReqOpenDrawWindow::ProtoFunID_MIN;
const ReqOpenDrawWindow_ProtoFunID ReqOpenDrawWindow::ProtoFunID_MAX;
const int ReqOpenDrawWindow::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqOpenDrawWindow::kFlagFieldNumber;
#endif  // !_MSC_VER

ReqOpenDrawWindow::ReqOpenDrawWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOpenDrawWindow::InitAsDefaultInstance() {
}

ReqOpenDrawWindow::ReqOpenDrawWindow(const ReqOpenDrawWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOpenDrawWindow::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOpenDrawWindow::~ReqOpenDrawWindow() {
  SharedDtor();
}

void ReqOpenDrawWindow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOpenDrawWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOpenDrawWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOpenDrawWindow_descriptor_;
}

const ReqOpenDrawWindow& ReqOpenDrawWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

ReqOpenDrawWindow* ReqOpenDrawWindow::default_instance_ = NULL;

ReqOpenDrawWindow* ReqOpenDrawWindow::New() const {
  return new ReqOpenDrawWindow;
}

void ReqOpenDrawWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOpenDrawWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOpenDrawWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOpenDrawWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOpenDrawWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOpenDrawWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOpenDrawWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOpenDrawWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOpenDrawWindow::MergeFrom(const ReqOpenDrawWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOpenDrawWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOpenDrawWindow::CopyFrom(const ReqOpenDrawWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOpenDrawWindow::IsInitialized() const {

  return true;
}

void ReqOpenDrawWindow::Swap(ReqOpenDrawWindow* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOpenDrawWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOpenDrawWindow_descriptor_;
  metadata.reflection = ReqOpenDrawWindow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDrawWindowInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawWindowInfo_ProtoModID_descriptor_;
}
bool stDrawWindowInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawWindowInfo_ProtoModID stDrawWindowInfo::ModID;
const stDrawWindowInfo_ProtoModID stDrawWindowInfo::ProtoModID_MIN;
const stDrawWindowInfo_ProtoModID stDrawWindowInfo::ProtoModID_MAX;
const int stDrawWindowInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawWindowInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawWindowInfo_ProtoFunID_descriptor_;
}
bool stDrawWindowInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawWindowInfo_ProtoFunID stDrawWindowInfo::FunID;
const stDrawWindowInfo_ProtoFunID stDrawWindowInfo::ProtoFunID_MIN;
const stDrawWindowInfo_ProtoFunID stDrawWindowInfo::ProtoFunID_MAX;
const int stDrawWindowInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDrawWindowInfo::kGoldFreeRemainTimeFieldNumber;
const int stDrawWindowInfo::kGoldFreeRemainNumFieldNumber;
const int stDrawWindowInfo::kDiamondFreeRemainTimeFieldNumber;
const int stDrawWindowInfo::kDrawHeroFreeRemainTimeFieldNumber;
const int stDrawWindowInfo::kDiamondDrawNumFieldNumber;
const int stDrawWindowInfo::kHeroDrawNumFieldNumber;
const int stDrawWindowInfo::kHasGoldDrawFieldNumber;
const int stDrawWindowInfo::kHasGold10DrawFieldNumber;
const int stDrawWindowInfo::kHasDiamondDrawFieldNumber;
const int stDrawWindowInfo::kHasDiamond10DrawFieldNumber;
#endif  // !_MSC_VER

stDrawWindowInfo::stDrawWindowInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDrawWindowInfo::InitAsDefaultInstance() {
}

stDrawWindowInfo::stDrawWindowInfo(const stDrawWindowInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDrawWindowInfo::SharedCtor() {
  _cached_size_ = 0;
  goldfreeremaintime_ = 0u;
  goldfreeremainnum_ = 0u;
  diamondfreeremaintime_ = 0u;
  drawherofreeremaintime_ = 0u;
  diamonddrawnum_ = 0u;
  herodrawnum_ = 0u;
  hasgolddraw_ = false;
  hasgold10draw_ = false;
  hasdiamonddraw_ = false;
  hasdiamond10draw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDrawWindowInfo::~stDrawWindowInfo() {
  SharedDtor();
}

void stDrawWindowInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDrawWindowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDrawWindowInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawWindowInfo_descriptor_;
}

const stDrawWindowInfo& stDrawWindowInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stDrawWindowInfo* stDrawWindowInfo::default_instance_ = NULL;

stDrawWindowInfo* stDrawWindowInfo::New() const {
  return new stDrawWindowInfo;
}

void stDrawWindowInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    goldfreeremaintime_ = 0u;
    goldfreeremainnum_ = 0u;
    diamondfreeremaintime_ = 0u;
    drawherofreeremaintime_ = 0u;
    diamonddrawnum_ = 0u;
    herodrawnum_ = 0u;
    hasgolddraw_ = false;
    hasgold10draw_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hasdiamonddraw_ = false;
    hasdiamond10draw_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDrawWindowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 goldFreeRemainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldfreeremaintime_)));
          set_has_goldfreeremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goldFreeRemainNum;
        break;
      }

      // optional uint32 goldFreeRemainNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldFreeRemainNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldfreeremainnum_)));
          set_has_goldfreeremainnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_diamondFreeRemainTime;
        break;
      }

      // optional uint32 diamondFreeRemainTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondFreeRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondfreeremaintime_)));
          set_has_diamondfreeremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_drawHeroFreeRemainTime;
        break;
      }

      // optional uint32 drawHeroFreeRemainTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawHeroFreeRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drawherofreeremaintime_)));
          set_has_drawherofreeremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diamondDrawNum;
        break;
      }

      // optional uint32 diamondDrawNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondDrawNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamonddrawnum_)));
          set_has_diamonddrawnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heroDrawNum;
        break;
      }

      // optional uint32 heroDrawNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroDrawNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herodrawnum_)));
          set_has_herodrawnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hasGoldDraw;
        break;
      }

      // optional bool hasGoldDraw = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGoldDraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasgolddraw_)));
          set_has_hasgolddraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hasGold10Draw;
        break;
      }

      // optional bool hasGold10Draw = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGold10Draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasgold10draw_)));
          set_has_hasgold10draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hasDiamondDraw;
        break;
      }

      // optional bool hasDiamondDraw = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasDiamondDraw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasdiamonddraw_)));
          set_has_hasdiamonddraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hasDiamond10Draw;
        break;
      }

      // optional bool hasDiamond10Draw = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasDiamond10Draw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasdiamond10draw_)));
          set_has_hasdiamond10draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDrawWindowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 goldFreeRemainTime = 1;
  if (has_goldfreeremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->goldfreeremaintime(), output);
  }

  // optional uint32 goldFreeRemainNum = 2;
  if (has_goldfreeremainnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goldfreeremainnum(), output);
  }

  // optional uint32 diamondFreeRemainTime = 3;
  if (has_diamondfreeremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->diamondfreeremaintime(), output);
  }

  // optional uint32 drawHeroFreeRemainTime = 4;
  if (has_drawherofreeremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->drawherofreeremaintime(), output);
  }

  // optional uint32 diamondDrawNum = 5;
  if (has_diamonddrawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->diamonddrawnum(), output);
  }

  // optional uint32 heroDrawNum = 6;
  if (has_herodrawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->herodrawnum(), output);
  }

  // optional bool hasGoldDraw = 7;
  if (has_hasgolddraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->hasgolddraw(), output);
  }

  // optional bool hasGold10Draw = 8;
  if (has_hasgold10draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->hasgold10draw(), output);
  }

  // optional bool hasDiamondDraw = 9;
  if (has_hasdiamonddraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->hasdiamonddraw(), output);
  }

  // optional bool hasDiamond10Draw = 10;
  if (has_hasdiamond10draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->hasdiamond10draw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDrawWindowInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 goldFreeRemainTime = 1;
  if (has_goldfreeremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->goldfreeremaintime(), target);
  }

  // optional uint32 goldFreeRemainNum = 2;
  if (has_goldfreeremainnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goldfreeremainnum(), target);
  }

  // optional uint32 diamondFreeRemainTime = 3;
  if (has_diamondfreeremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->diamondfreeremaintime(), target);
  }

  // optional uint32 drawHeroFreeRemainTime = 4;
  if (has_drawherofreeremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->drawherofreeremaintime(), target);
  }

  // optional uint32 diamondDrawNum = 5;
  if (has_diamonddrawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->diamonddrawnum(), target);
  }

  // optional uint32 heroDrawNum = 6;
  if (has_herodrawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->herodrawnum(), target);
  }

  // optional bool hasGoldDraw = 7;
  if (has_hasgolddraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->hasgolddraw(), target);
  }

  // optional bool hasGold10Draw = 8;
  if (has_hasgold10draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->hasgold10draw(), target);
  }

  // optional bool hasDiamondDraw = 9;
  if (has_hasdiamonddraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->hasdiamonddraw(), target);
  }

  // optional bool hasDiamond10Draw = 10;
  if (has_hasdiamond10draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->hasdiamond10draw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDrawWindowInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 goldFreeRemainTime = 1;
    if (has_goldfreeremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldfreeremaintime());
    }

    // optional uint32 goldFreeRemainNum = 2;
    if (has_goldfreeremainnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldfreeremainnum());
    }

    // optional uint32 diamondFreeRemainTime = 3;
    if (has_diamondfreeremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondfreeremaintime());
    }

    // optional uint32 drawHeroFreeRemainTime = 4;
    if (has_drawherofreeremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drawherofreeremaintime());
    }

    // optional uint32 diamondDrawNum = 5;
    if (has_diamonddrawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamonddrawnum());
    }

    // optional uint32 heroDrawNum = 6;
    if (has_herodrawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herodrawnum());
    }

    // optional bool hasGoldDraw = 7;
    if (has_hasgolddraw()) {
      total_size += 1 + 1;
    }

    // optional bool hasGold10Draw = 8;
    if (has_hasgold10draw()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool hasDiamondDraw = 9;
    if (has_hasdiamonddraw()) {
      total_size += 1 + 1;
    }

    // optional bool hasDiamond10Draw = 10;
    if (has_hasdiamond10draw()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDrawWindowInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDrawWindowInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDrawWindowInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDrawWindowInfo::MergeFrom(const stDrawWindowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_goldfreeremaintime()) {
      set_goldfreeremaintime(from.goldfreeremaintime());
    }
    if (from.has_goldfreeremainnum()) {
      set_goldfreeremainnum(from.goldfreeremainnum());
    }
    if (from.has_diamondfreeremaintime()) {
      set_diamondfreeremaintime(from.diamondfreeremaintime());
    }
    if (from.has_drawherofreeremaintime()) {
      set_drawherofreeremaintime(from.drawherofreeremaintime());
    }
    if (from.has_diamonddrawnum()) {
      set_diamonddrawnum(from.diamonddrawnum());
    }
    if (from.has_herodrawnum()) {
      set_herodrawnum(from.herodrawnum());
    }
    if (from.has_hasgolddraw()) {
      set_hasgolddraw(from.hasgolddraw());
    }
    if (from.has_hasgold10draw()) {
      set_hasgold10draw(from.hasgold10draw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hasdiamonddraw()) {
      set_hasdiamonddraw(from.hasdiamonddraw());
    }
    if (from.has_hasdiamond10draw()) {
      set_hasdiamond10draw(from.hasdiamond10draw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDrawWindowInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDrawWindowInfo::CopyFrom(const stDrawWindowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDrawWindowInfo::IsInitialized() const {

  return true;
}

void stDrawWindowInfo::Swap(stDrawWindowInfo* other) {
  if (other != this) {
    std::swap(goldfreeremaintime_, other->goldfreeremaintime_);
    std::swap(goldfreeremainnum_, other->goldfreeremainnum_);
    std::swap(diamondfreeremaintime_, other->diamondfreeremaintime_);
    std::swap(drawherofreeremaintime_, other->drawherofreeremaintime_);
    std::swap(diamonddrawnum_, other->diamonddrawnum_);
    std::swap(herodrawnum_, other->herodrawnum_);
    std::swap(hasgolddraw_, other->hasgolddraw_);
    std::swap(hasgold10draw_, other->hasgold10draw_);
    std::swap(hasdiamonddraw_, other->hasdiamonddraw_);
    std::swap(hasdiamond10draw_, other->hasdiamond10draw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDrawWindowInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDrawWindowInfo_descriptor_;
  metadata.reflection = stDrawWindowInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDraw_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDraw_ProtoModID_descriptor_;
}
bool stReqDraw_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDraw_ProtoModID stReqDraw::ModID;
const stReqDraw_ProtoModID stReqDraw::ProtoModID_MIN;
const stReqDraw_ProtoModID stReqDraw::ProtoModID_MAX;
const int stReqDraw::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDraw_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDraw_ProtoFunID_descriptor_;
}
bool stReqDraw_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDraw_ProtoFunID stReqDraw::FunID;
const stReqDraw_ProtoFunID stReqDraw::ProtoFunID_MIN;
const stReqDraw_ProtoFunID stReqDraw::ProtoFunID_MAX;
const int stReqDraw::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDraw::kTypeFieldNumber;
const int stReqDraw::kFlagFieldNumber;
#endif  // !_MSC_VER

stReqDraw::stReqDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDraw::InitAsDefaultInstance() {
}

stReqDraw::stReqDraw(const stReqDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDraw::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDraw::~stReqDraw() {
  SharedDtor();
}

void stReqDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDraw_descriptor_;
}

const stReqDraw& stReqDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDraw* stReqDraw::default_instance_ = NULL;

stReqDraw* stReqDraw::New() const {
  return new stReqDraw;
}

void stReqDraw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.eDrawType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::eDrawType_IsValid(value)) {
            set_type(static_cast< ::MiscProto::eDrawType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.eDrawType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.eDrawType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.eDrawType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDraw::MergeFrom(const stReqDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDraw::CopyFrom(const stReqDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDraw::IsInitialized() const {

  return true;
}

void stReqDraw::Swap(stReqDraw* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDraw_descriptor_;
  metadata.reflection = stReqDraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynDrawItem::kItemIDFieldNumber;
const int stSynDrawItem::kNumFieldNumber;
#endif  // !_MSC_VER

stSynDrawItem::stSynDrawItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynDrawItem::InitAsDefaultInstance() {
}

stSynDrawItem::stSynDrawItem(const stSynDrawItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynDrawItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynDrawItem::~stSynDrawItem() {
  SharedDtor();
}

void stSynDrawItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynDrawItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynDrawItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynDrawItem_descriptor_;
}

const stSynDrawItem& stSynDrawItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynDrawItem* stSynDrawItem::default_instance_ = NULL;

stSynDrawItem* stSynDrawItem::New() const {
  return new stSynDrawItem;
}

void stSynDrawItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynDrawItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynDrawItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynDrawItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynDrawItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynDrawItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynDrawItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynDrawItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynDrawItem::MergeFrom(const stSynDrawItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynDrawItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynDrawItem::CopyFrom(const stSynDrawItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynDrawItem::IsInitialized() const {

  return true;
}

void stSynDrawItem::Swap(stSynDrawItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynDrawItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynDrawItem_descriptor_;
  metadata.reflection = stSynDrawItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDrawResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawResult_Result_descriptor_;
}
bool stDrawResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawResult_Result stDrawResult::SUCCESS;
const stDrawResult_Result stDrawResult::MONEY_NOT_ENOUGH;
const stDrawResult_Result stDrawResult::BAG_FULL;
const stDrawResult_Result stDrawResult::DIAMOND_NOT_ENOUGH;
const stDrawResult_Result stDrawResult::Result_MIN;
const stDrawResult_Result stDrawResult::Result_MAX;
const int stDrawResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawResult_ProtoModID_descriptor_;
}
bool stDrawResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawResult_ProtoModID stDrawResult::ModID;
const stDrawResult_ProtoModID stDrawResult::ProtoModID_MIN;
const stDrawResult_ProtoModID stDrawResult::ProtoModID_MAX;
const int stDrawResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawResult_ProtoFunID_descriptor_;
}
bool stDrawResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawResult_ProtoFunID stDrawResult::FunID;
const stDrawResult_ProtoFunID stDrawResult::ProtoFunID_MIN;
const stDrawResult_ProtoFunID stDrawResult::ProtoFunID_MAX;
const int stDrawResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDrawResult::kResultFieldNumber;
const int stDrawResult::kItemsFieldNumber;
const int stDrawResult::kTypeFieldNumber;
const int stDrawResult::kDiamondDrawNumFieldNumber;
#endif  // !_MSC_VER

stDrawResult::stDrawResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDrawResult::InitAsDefaultInstance() {
}

stDrawResult::stDrawResult(const stDrawResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDrawResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  type_ = 1;
  diamonddrawnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDrawResult::~stDrawResult() {
  SharedDtor();
}

void stDrawResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDrawResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDrawResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawResult_descriptor_;
}

const stDrawResult& stDrawResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stDrawResult* stDrawResult::default_instance_ = NULL;

stDrawResult* stDrawResult::New() const {
  return new stDrawResult;
}

void stDrawResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    type_ = 1;
    diamonddrawnum_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDrawResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stDrawResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stDrawResult_Result_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stDrawResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .MiscProto.stSynDrawItem items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .MiscProto.eDrawType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::eDrawType_IsValid(value)) {
            set_type(static_cast< ::MiscProto::eDrawType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamondDrawNum;
        break;
      }

      // optional uint32 diamondDrawNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondDrawNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamonddrawnum_)));
          set_has_diamonddrawnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDrawResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stDrawResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .MiscProto.stSynDrawItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  // optional .MiscProto.eDrawType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 diamondDrawNum = 4;
  if (has_diamonddrawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->diamonddrawnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDrawResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stDrawResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .MiscProto.stSynDrawItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  // optional .MiscProto.eDrawType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 diamondDrawNum = 4;
  if (has_diamonddrawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->diamonddrawnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDrawResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stDrawResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .MiscProto.eDrawType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 diamondDrawNum = 4;
    if (has_diamonddrawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamonddrawnum());
    }

  }
  // repeated .MiscProto.stSynDrawItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDrawResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDrawResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDrawResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDrawResult::MergeFrom(const stDrawResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_diamonddrawnum()) {
      set_diamonddrawnum(from.diamonddrawnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDrawResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDrawResult::CopyFrom(const stDrawResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDrawResult::IsInitialized() const {

  return true;
}

void stDrawResult::Swap(stDrawResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    items_.Swap(&other->items_);
    std::swap(type_, other->type_);
    std::swap(diamonddrawnum_, other->diamonddrawnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDrawResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDrawResult_descriptor_;
  metadata.reflection = stDrawResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynMyTitle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMyTitle_ProtoModID_descriptor_;
}
bool stSynMyTitle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMyTitle_ProtoModID stSynMyTitle::ModID;
const stSynMyTitle_ProtoModID stSynMyTitle::ProtoModID_MIN;
const stSynMyTitle_ProtoModID stSynMyTitle::ProtoModID_MAX;
const int stSynMyTitle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynMyTitle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMyTitle_ProtoFunID_descriptor_;
}
bool stSynMyTitle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMyTitle_ProtoFunID stSynMyTitle::FunID;
const stSynMyTitle_ProtoFunID stSynMyTitle::ProtoFunID_MIN;
const stSynMyTitle_ProtoFunID stSynMyTitle::ProtoFunID_MAX;
const int stSynMyTitle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynMyTitle::kAllTitleFieldNumber;
const int stSynMyTitle::kActiveTitleFieldNumber;
#endif  // !_MSC_VER

stSynMyTitle::stSynMyTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMyTitle::InitAsDefaultInstance() {
}

stSynMyTitle::stSynMyTitle(const stSynMyTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMyTitle::SharedCtor() {
  _cached_size_ = 0;
  activetitle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMyTitle::~stSynMyTitle() {
  SharedDtor();
}

void stSynMyTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynMyTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMyTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMyTitle_descriptor_;
}

const stSynMyTitle& stSynMyTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynMyTitle* stSynMyTitle::default_instance_ = NULL;

stSynMyTitle* stSynMyTitle::New() const {
  return new stSynMyTitle;
}

void stSynMyTitle::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    activetitle_ = 0u;
  }
  alltitle_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMyTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 allTitle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_alltitle())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_alltitle())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_allTitle;
        if (input->ExpectTag(16)) goto parse_activeTitle;
        break;
      }

      // optional uint32 activeTitle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activeTitle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activetitle_)));
          set_has_activetitle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMyTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 allTitle = 1;
  for (int i = 0; i < this->alltitle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->alltitle(i), output);
  }

  // optional uint32 activeTitle = 2;
  if (has_activetitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activetitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMyTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 allTitle = 1;
  for (int i = 0; i < this->alltitle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->alltitle(i), target);
  }

  // optional uint32 activeTitle = 2;
  if (has_activetitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activetitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMyTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 activeTitle = 2;
    if (has_activetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activetitle());
    }

  }
  // repeated uint32 allTitle = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->alltitle_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->alltitle(i));
    }
    total_size += 1 * this->alltitle_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMyTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMyTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMyTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMyTitle::MergeFrom(const stSynMyTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  alltitle_.MergeFrom(from.alltitle_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_activetitle()) {
      set_activetitle(from.activetitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMyTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMyTitle::CopyFrom(const stSynMyTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMyTitle::IsInitialized() const {

  return true;
}

void stSynMyTitle::Swap(stSynMyTitle* other) {
  if (other != this) {
    alltitle_.Swap(&other->alltitle_);
    std::swap(activetitle_, other->activetitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMyTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMyTitle_descriptor_;
  metadata.reflection = stSynMyTitle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stActiveOneTitle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActiveOneTitle_ProtoModID_descriptor_;
}
bool stActiveOneTitle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActiveOneTitle_ProtoModID stActiveOneTitle::ModID;
const stActiveOneTitle_ProtoModID stActiveOneTitle::ProtoModID_MIN;
const stActiveOneTitle_ProtoModID stActiveOneTitle::ProtoModID_MAX;
const int stActiveOneTitle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stActiveOneTitle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActiveOneTitle_ProtoFunID_descriptor_;
}
bool stActiveOneTitle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActiveOneTitle_ProtoFunID stActiveOneTitle::FunID;
const stActiveOneTitle_ProtoFunID stActiveOneTitle::ProtoFunID_MIN;
const stActiveOneTitle_ProtoFunID stActiveOneTitle::ProtoFunID_MAX;
const int stActiveOneTitle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stActiveOneTitle::kTitleIDFieldNumber;
#endif  // !_MSC_VER

stActiveOneTitle::stActiveOneTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stActiveOneTitle::InitAsDefaultInstance() {
}

stActiveOneTitle::stActiveOneTitle(const stActiveOneTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stActiveOneTitle::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stActiveOneTitle::~stActiveOneTitle() {
  SharedDtor();
}

void stActiveOneTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stActiveOneTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stActiveOneTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActiveOneTitle_descriptor_;
}

const stActiveOneTitle& stActiveOneTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stActiveOneTitle* stActiveOneTitle::default_instance_ = NULL;

stActiveOneTitle* stActiveOneTitle::New() const {
  return new stActiveOneTitle;
}

void stActiveOneTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stActiveOneTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stActiveOneTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stActiveOneTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stActiveOneTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stActiveOneTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stActiveOneTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stActiveOneTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stActiveOneTitle::MergeFrom(const stActiveOneTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stActiveOneTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stActiveOneTitle::CopyFrom(const stActiveOneTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stActiveOneTitle::IsInitialized() const {

  return true;
}

void stActiveOneTitle::Swap(stActiveOneTitle* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stActiveOneTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stActiveOneTitle_descriptor_;
  metadata.reflection = stActiveOneTitle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stActiveTitleResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActiveTitleResult_eResult_descriptor_;
}
bool stActiveTitleResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActiveTitleResult_eResult stActiveTitleResult::SUCCESS;
const stActiveTitleResult_eResult stActiveTitleResult::TITLE_NOT_EXIST;
const stActiveTitleResult_eResult stActiveTitleResult::eResult_MIN;
const stActiveTitleResult_eResult stActiveTitleResult::eResult_MAX;
const int stActiveTitleResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stActiveTitleResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActiveTitleResult_ProtoModID_descriptor_;
}
bool stActiveTitleResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActiveTitleResult_ProtoModID stActiveTitleResult::ModID;
const stActiveTitleResult_ProtoModID stActiveTitleResult::ProtoModID_MIN;
const stActiveTitleResult_ProtoModID stActiveTitleResult::ProtoModID_MAX;
const int stActiveTitleResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stActiveTitleResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActiveTitleResult_ProtoFunID_descriptor_;
}
bool stActiveTitleResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActiveTitleResult_ProtoFunID stActiveTitleResult::FunID;
const stActiveTitleResult_ProtoFunID stActiveTitleResult::ProtoFunID_MIN;
const stActiveTitleResult_ProtoFunID stActiveTitleResult::ProtoFunID_MAX;
const int stActiveTitleResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stActiveTitleResult::kResultFieldNumber;
const int stActiveTitleResult::kTitleIDFieldNumber;
#endif  // !_MSC_VER

stActiveTitleResult::stActiveTitleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stActiveTitleResult::InitAsDefaultInstance() {
}

stActiveTitleResult::stActiveTitleResult(const stActiveTitleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stActiveTitleResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  titleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stActiveTitleResult::~stActiveTitleResult() {
  SharedDtor();
}

void stActiveTitleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stActiveTitleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stActiveTitleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActiveTitleResult_descriptor_;
}

const stActiveTitleResult& stActiveTitleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stActiveTitleResult* stActiveTitleResult::default_instance_ = NULL;

stActiveTitleResult* stActiveTitleResult::New() const {
  return new stActiveTitleResult;
}

void stActiveTitleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    titleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stActiveTitleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stActiveTitleResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stActiveTitleResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stActiveTitleResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titleID;
        break;
      }

      // optional uint32 titleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stActiveTitleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stActiveTitleResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 titleID = 2;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stActiveTitleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stActiveTitleResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 titleID = 2;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stActiveTitleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stActiveTitleResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 titleID = 2;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stActiveTitleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stActiveTitleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stActiveTitleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stActiveTitleResult::MergeFrom(const stActiveTitleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stActiveTitleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stActiveTitleResult::CopyFrom(const stActiveTitleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stActiveTitleResult::IsInitialized() const {

  return true;
}

void stActiveTitleResult::Swap(stActiveTitleResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stActiveTitleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stActiveTitleResult_descriptor_;
  metadata.reflection = stActiveTitleResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stObtainOneTitle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainOneTitle_ProtoModID_descriptor_;
}
bool stObtainOneTitle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stObtainOneTitle_ProtoModID stObtainOneTitle::ModID;
const stObtainOneTitle_ProtoModID stObtainOneTitle::ProtoModID_MIN;
const stObtainOneTitle_ProtoModID stObtainOneTitle::ProtoModID_MAX;
const int stObtainOneTitle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stObtainOneTitle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainOneTitle_ProtoFunID_descriptor_;
}
bool stObtainOneTitle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stObtainOneTitle_ProtoFunID stObtainOneTitle::FunID;
const stObtainOneTitle_ProtoFunID stObtainOneTitle::ProtoFunID_MIN;
const stObtainOneTitle_ProtoFunID stObtainOneTitle::ProtoFunID_MAX;
const int stObtainOneTitle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stObtainOneTitle::kTitleIDFieldNumber;
#endif  // !_MSC_VER

stObtainOneTitle::stObtainOneTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stObtainOneTitle::InitAsDefaultInstance() {
}

stObtainOneTitle::stObtainOneTitle(const stObtainOneTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stObtainOneTitle::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stObtainOneTitle::~stObtainOneTitle() {
  SharedDtor();
}

void stObtainOneTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stObtainOneTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stObtainOneTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainOneTitle_descriptor_;
}

const stObtainOneTitle& stObtainOneTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stObtainOneTitle* stObtainOneTitle::default_instance_ = NULL;

stObtainOneTitle* stObtainOneTitle::New() const {
  return new stObtainOneTitle;
}

void stObtainOneTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stObtainOneTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stObtainOneTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stObtainOneTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stObtainOneTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stObtainOneTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stObtainOneTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stObtainOneTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stObtainOneTitle::MergeFrom(const stObtainOneTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stObtainOneTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stObtainOneTitle::CopyFrom(const stObtainOneTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stObtainOneTitle::IsInitialized() const {

  return true;
}

void stObtainOneTitle::Swap(stObtainOneTitle* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stObtainOneTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stObtainOneTitle_descriptor_;
  metadata.reflection = stObtainOneTitle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyInvestPlan_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyInvestPlan_ProtoModID_descriptor_;
}
bool stBuyInvestPlan_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyInvestPlan_ProtoModID stBuyInvestPlan::ModID;
const stBuyInvestPlan_ProtoModID stBuyInvestPlan::ProtoModID_MIN;
const stBuyInvestPlan_ProtoModID stBuyInvestPlan::ProtoModID_MAX;
const int stBuyInvestPlan::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyInvestPlan_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyInvestPlan_ProtoFunID_descriptor_;
}
bool stBuyInvestPlan_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyInvestPlan_ProtoFunID stBuyInvestPlan::FunID;
const stBuyInvestPlan_ProtoFunID stBuyInvestPlan::ProtoFunID_MIN;
const stBuyInvestPlan_ProtoFunID stBuyInvestPlan::ProtoFunID_MAX;
const int stBuyInvestPlan::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyInvestPlan::kCharIDFieldNumber;
#endif  // !_MSC_VER

stBuyInvestPlan::stBuyInvestPlan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyInvestPlan::InitAsDefaultInstance() {
}

stBuyInvestPlan::stBuyInvestPlan(const stBuyInvestPlan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyInvestPlan::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyInvestPlan::~stBuyInvestPlan() {
  SharedDtor();
}

void stBuyInvestPlan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBuyInvestPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyInvestPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyInvestPlan_descriptor_;
}

const stBuyInvestPlan& stBuyInvestPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBuyInvestPlan* stBuyInvestPlan::default_instance_ = NULL;

stBuyInvestPlan* stBuyInvestPlan::New() const {
  return new stBuyInvestPlan;
}

void stBuyInvestPlan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyInvestPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyInvestPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyInvestPlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyInvestPlan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyInvestPlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyInvestPlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyInvestPlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyInvestPlan::MergeFrom(const stBuyInvestPlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyInvestPlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyInvestPlan::CopyFrom(const stBuyInvestPlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyInvestPlan::IsInitialized() const {

  return true;
}

void stBuyInvestPlan::Swap(stBuyInvestPlan* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyInvestPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyInvestPlan_descriptor_;
  metadata.reflection = stBuyInvestPlan_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyInvestPlanResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyInvestPlanResult_eResult_descriptor_;
}
bool stBuyInvestPlanResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyInvestPlanResult_eResult stBuyInvestPlanResult::eSUCCESS;
const stBuyInvestPlanResult_eResult stBuyInvestPlanResult::eDIAMOND_NOT_ENOGUH;
const stBuyInvestPlanResult_eResult stBuyInvestPlanResult::eVIP_LV_TOO_LOW;
const stBuyInvestPlanResult_eResult stBuyInvestPlanResult::eHAS_BUY;
const stBuyInvestPlanResult_eResult stBuyInvestPlanResult::eResult_MIN;
const stBuyInvestPlanResult_eResult stBuyInvestPlanResult::eResult_MAX;
const int stBuyInvestPlanResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyInvestPlanResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyInvestPlanResult_ProtoModID_descriptor_;
}
bool stBuyInvestPlanResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyInvestPlanResult_ProtoModID stBuyInvestPlanResult::ModID;
const stBuyInvestPlanResult_ProtoModID stBuyInvestPlanResult::ProtoModID_MIN;
const stBuyInvestPlanResult_ProtoModID stBuyInvestPlanResult::ProtoModID_MAX;
const int stBuyInvestPlanResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyInvestPlanResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyInvestPlanResult_ProtoFunID_descriptor_;
}
bool stBuyInvestPlanResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyInvestPlanResult_ProtoFunID stBuyInvestPlanResult::FunID;
const stBuyInvestPlanResult_ProtoFunID stBuyInvestPlanResult::ProtoFunID_MIN;
const stBuyInvestPlanResult_ProtoFunID stBuyInvestPlanResult::ProtoFunID_MAX;
const int stBuyInvestPlanResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyInvestPlanResult::kResultFieldNumber;
const int stBuyInvestPlanResult::kIndexFieldNumber;
#endif  // !_MSC_VER

stBuyInvestPlanResult::stBuyInvestPlanResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyInvestPlanResult::InitAsDefaultInstance() {
}

stBuyInvestPlanResult::stBuyInvestPlanResult(const stBuyInvestPlanResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyInvestPlanResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyInvestPlanResult::~stBuyInvestPlanResult() {
  SharedDtor();
}

void stBuyInvestPlanResult::SharedDtor() {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    delete index_;
  }
  if (this != default_instance_) {
  }
}

void stBuyInvestPlanResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyInvestPlanResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyInvestPlanResult_descriptor_;
}

const stBuyInvestPlanResult& stBuyInvestPlanResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBuyInvestPlanResult* stBuyInvestPlanResult::default_instance_ = NULL;

stBuyInvestPlanResult* stBuyInvestPlanResult::New() const {
  return new stBuyInvestPlanResult;
}

void stBuyInvestPlanResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_index()) {
      if (index_ != &::google::protobuf::internal::kEmptyString) {
        index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyInvestPlanResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stBuyInvestPlanResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stBuyInvestPlanResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stBuyInvestPlanResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_index;
        break;
      }

      // optional string index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->index().data(), this->index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyInvestPlanResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stBuyInvestPlanResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyInvestPlanResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stBuyInvestPlanResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyInvestPlanResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stBuyInvestPlanResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyInvestPlanResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyInvestPlanResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyInvestPlanResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyInvestPlanResult::MergeFrom(const stBuyInvestPlanResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyInvestPlanResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyInvestPlanResult::CopyFrom(const stBuyInvestPlanResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyInvestPlanResult::IsInitialized() const {

  return true;
}

void stBuyInvestPlanResult::Swap(stBuyInvestPlanResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyInvestPlanResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyInvestPlanResult_descriptor_;
  metadata.reflection = stBuyInvestPlanResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqInvestPlanReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInvestPlanReward_ProtoModID_descriptor_;
}
bool stReqInvestPlanReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqInvestPlanReward_ProtoModID stReqInvestPlanReward::ModID;
const stReqInvestPlanReward_ProtoModID stReqInvestPlanReward::ProtoModID_MIN;
const stReqInvestPlanReward_ProtoModID stReqInvestPlanReward::ProtoModID_MAX;
const int stReqInvestPlanReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqInvestPlanReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInvestPlanReward_ProtoFunID_descriptor_;
}
bool stReqInvestPlanReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqInvestPlanReward_ProtoFunID stReqInvestPlanReward::FunID;
const stReqInvestPlanReward_ProtoFunID stReqInvestPlanReward::ProtoFunID_MIN;
const stReqInvestPlanReward_ProtoFunID stReqInvestPlanReward::ProtoFunID_MAX;
const int stReqInvestPlanReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqInvestPlanReward::kLvFieldNumber;
#endif  // !_MSC_VER

stReqInvestPlanReward::stReqInvestPlanReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqInvestPlanReward::InitAsDefaultInstance() {
}

stReqInvestPlanReward::stReqInvestPlanReward(const stReqInvestPlanReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqInvestPlanReward::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqInvestPlanReward::~stReqInvestPlanReward() {
  SharedDtor();
}

void stReqInvestPlanReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqInvestPlanReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqInvestPlanReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInvestPlanReward_descriptor_;
}

const stReqInvestPlanReward& stReqInvestPlanReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqInvestPlanReward* stReqInvestPlanReward::default_instance_ = NULL;

stReqInvestPlanReward* stReqInvestPlanReward::New() const {
  return new stReqInvestPlanReward;
}

void stReqInvestPlanReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqInvestPlanReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqInvestPlanReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqInvestPlanReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqInvestPlanReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqInvestPlanReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqInvestPlanReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqInvestPlanReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqInvestPlanReward::MergeFrom(const stReqInvestPlanReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqInvestPlanReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqInvestPlanReward::CopyFrom(const stReqInvestPlanReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqInvestPlanReward::IsInitialized() const {

  return true;
}

void stReqInvestPlanReward::Swap(stReqInvestPlanReward* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqInvestPlanReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqInvestPlanReward_descriptor_;
  metadata.reflection = stReqInvestPlanReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInvestPlanRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvestPlanRewardResult_eResult_descriptor_;
}
bool stInvestPlanRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvestPlanRewardResult_eResult stInvestPlanRewardResult::eSUCCESS;
const stInvestPlanRewardResult_eResult stInvestPlanRewardResult::eHAS_GET_REWARD;
const stInvestPlanRewardResult_eResult stInvestPlanRewardResult::eHAS_NOT_BUY_INVEST_PLAN;
const stInvestPlanRewardResult_eResult stInvestPlanRewardResult::eResult_MIN;
const stInvestPlanRewardResult_eResult stInvestPlanRewardResult::eResult_MAX;
const int stInvestPlanRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInvestPlanRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvestPlanRewardResult_ProtoModID_descriptor_;
}
bool stInvestPlanRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvestPlanRewardResult_ProtoModID stInvestPlanRewardResult::ModID;
const stInvestPlanRewardResult_ProtoModID stInvestPlanRewardResult::ProtoModID_MIN;
const stInvestPlanRewardResult_ProtoModID stInvestPlanRewardResult::ProtoModID_MAX;
const int stInvestPlanRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInvestPlanRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvestPlanRewardResult_ProtoFunID_descriptor_;
}
bool stInvestPlanRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvestPlanRewardResult_ProtoFunID stInvestPlanRewardResult::FunID;
const stInvestPlanRewardResult_ProtoFunID stInvestPlanRewardResult::ProtoFunID_MIN;
const stInvestPlanRewardResult_ProtoFunID stInvestPlanRewardResult::ProtoFunID_MAX;
const int stInvestPlanRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInvestPlanRewardResult::kResultFieldNumber;
const int stInvestPlanRewardResult::kLvFieldNumber;
const int stInvestPlanRewardResult::kIndexFieldNumber;
#endif  // !_MSC_VER

stInvestPlanRewardResult::stInvestPlanRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInvestPlanRewardResult::InitAsDefaultInstance() {
}

stInvestPlanRewardResult::stInvestPlanRewardResult(const stInvestPlanRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInvestPlanRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  lv_ = 0u;
  index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInvestPlanRewardResult::~stInvestPlanRewardResult() {
  SharedDtor();
}

void stInvestPlanRewardResult::SharedDtor() {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    delete index_;
  }
  if (this != default_instance_) {
  }
}

void stInvestPlanRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInvestPlanRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvestPlanRewardResult_descriptor_;
}

const stInvestPlanRewardResult& stInvestPlanRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stInvestPlanRewardResult* stInvestPlanRewardResult::default_instance_ = NULL;

stInvestPlanRewardResult* stInvestPlanRewardResult::New() const {
  return new stInvestPlanRewardResult;
}

void stInvestPlanRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    lv_ = 0u;
    if (has_index()) {
      if (index_ != &::google::protobuf::internal::kEmptyString) {
        index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInvestPlanRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stInvestPlanRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stInvestPlanRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stInvestPlanRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_index;
        break;
      }

      // optional string index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->index().data(), this->index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInvestPlanRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stInvestPlanRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  // optional string index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInvestPlanRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stInvestPlanRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lv(), target);
  }

  // optional string index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInvestPlanRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stInvestPlanRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional string index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInvestPlanRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInvestPlanRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInvestPlanRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInvestPlanRewardResult::MergeFrom(const stInvestPlanRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInvestPlanRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInvestPlanRewardResult::CopyFrom(const stInvestPlanRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInvestPlanRewardResult::IsInitialized() const {

  return true;
}

void stInvestPlanRewardResult::Swap(stInvestPlanRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(lv_, other->lv_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInvestPlanRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInvestPlanRewardResult_descriptor_;
  metadata.reflection = stInvestPlanRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEatDinner_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEatDinner_ProtoModID_descriptor_;
}
bool stReqEatDinner_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEatDinner_ProtoModID stReqEatDinner::ModID;
const stReqEatDinner_ProtoModID stReqEatDinner::ProtoModID_MIN;
const stReqEatDinner_ProtoModID stReqEatDinner::ProtoModID_MAX;
const int stReqEatDinner::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEatDinner_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEatDinner_ProtoFunID_descriptor_;
}
bool stReqEatDinner_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEatDinner_ProtoFunID stReqEatDinner::FunID;
const stReqEatDinner_ProtoFunID stReqEatDinner::ProtoFunID_MIN;
const stReqEatDinner_ProtoFunID stReqEatDinner::ProtoFunID_MAX;
const int stReqEatDinner::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEatDinner::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqEatDinner::stReqEatDinner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEatDinner::InitAsDefaultInstance() {
}

stReqEatDinner::stReqEatDinner(const stReqEatDinner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEatDinner::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEatDinner::~stReqEatDinner() {
  SharedDtor();
}

void stReqEatDinner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEatDinner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEatDinner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEatDinner_descriptor_;
}

const stReqEatDinner& stReqEatDinner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqEatDinner* stReqEatDinner::default_instance_ = NULL;

stReqEatDinner* stReqEatDinner::New() const {
  return new stReqEatDinner;
}

void stReqEatDinner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEatDinner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEatDinner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEatDinner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEatDinner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEatDinner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEatDinner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEatDinner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEatDinner::MergeFrom(const stReqEatDinner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEatDinner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEatDinner::CopyFrom(const stReqEatDinner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEatDinner::IsInitialized() const {

  return true;
}

void stReqEatDinner::Swap(stReqEatDinner* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEatDinner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEatDinner_descriptor_;
  metadata.reflection = stReqEatDinner_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEatDinnerResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEatDinnerResult_eResult_descriptor_;
}
bool stEatDinnerResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEatDinnerResult_eResult stEatDinnerResult::eSUCCESS;
const stEatDinnerResult_eResult stEatDinnerResult::eTIME_LIMIT;
const stEatDinnerResult_eResult stEatDinnerResult::eHAS_EAT;
const stEatDinnerResult_eResult stEatDinnerResult::eEAT_DINNER_NUM_OUT;
const stEatDinnerResult_eResult stEatDinnerResult::eResult_MIN;
const stEatDinnerResult_eResult stEatDinnerResult::eResult_MAX;
const int stEatDinnerResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEatDinnerResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEatDinnerResult_ProtoModID_descriptor_;
}
bool stEatDinnerResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEatDinnerResult_ProtoModID stEatDinnerResult::ModID;
const stEatDinnerResult_ProtoModID stEatDinnerResult::ProtoModID_MIN;
const stEatDinnerResult_ProtoModID stEatDinnerResult::ProtoModID_MAX;
const int stEatDinnerResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEatDinnerResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEatDinnerResult_ProtoFunID_descriptor_;
}
bool stEatDinnerResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEatDinnerResult_ProtoFunID stEatDinnerResult::FunID;
const stEatDinnerResult_ProtoFunID stEatDinnerResult::ProtoFunID_MIN;
const stEatDinnerResult_ProtoFunID stEatDinnerResult::ProtoFunID_MAX;
const int stEatDinnerResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEatDinnerResult::kResultFieldNumber;
const int stEatDinnerResult::kHasEatedNumFieldNumber;
#endif  // !_MSC_VER

stEatDinnerResult::stEatDinnerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEatDinnerResult::InitAsDefaultInstance() {
}

stEatDinnerResult::stEatDinnerResult(const stEatDinnerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEatDinnerResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  haseatednum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEatDinnerResult::~stEatDinnerResult() {
  SharedDtor();
}

void stEatDinnerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEatDinnerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEatDinnerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEatDinnerResult_descriptor_;
}

const stEatDinnerResult& stEatDinnerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stEatDinnerResult* stEatDinnerResult::default_instance_ = NULL;

stEatDinnerResult* stEatDinnerResult::New() const {
  return new stEatDinnerResult;
}

void stEatDinnerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    haseatednum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEatDinnerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stEatDinnerResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stEatDinnerResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stEatDinnerResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasEatedNum;
        break;
      }

      // optional uint32 hasEatedNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasEatedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &haseatednum_)));
          set_has_haseatednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEatDinnerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stEatDinnerResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 hasEatedNum = 2;
  if (has_haseatednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->haseatednum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEatDinnerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stEatDinnerResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 hasEatedNum = 2;
  if (has_haseatednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->haseatednum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEatDinnerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stEatDinnerResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 hasEatedNum = 2;
    if (has_haseatednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->haseatednum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEatDinnerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEatDinnerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEatDinnerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEatDinnerResult::MergeFrom(const stEatDinnerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_haseatednum()) {
      set_haseatednum(from.haseatednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEatDinnerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEatDinnerResult::CopyFrom(const stEatDinnerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEatDinnerResult::IsInitialized() const {

  return true;
}

void stEatDinnerResult::Swap(stEatDinnerResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(haseatednum_, other->haseatednum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEatDinnerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEatDinnerResult_descriptor_;
  metadata.reflection = stEatDinnerResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynActivityData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynActivityData_ProtoModID_descriptor_;
}
bool stSynActivityData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynActivityData_ProtoModID stSynActivityData::ModID;
const stSynActivityData_ProtoModID stSynActivityData::ProtoModID_MIN;
const stSynActivityData_ProtoModID stSynActivityData::ProtoModID_MAX;
const int stSynActivityData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynActivityData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynActivityData_ProtoFunID_descriptor_;
}
bool stSynActivityData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynActivityData_ProtoFunID stSynActivityData::FunID;
const stSynActivityData_ProtoFunID stSynActivityData::ProtoFunID_MIN;
const stSynActivityData_ProtoFunID stSynActivityData::ProtoFunID_MAX;
const int stSynActivityData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynActivityData::kHasBuyInvestmentFieldNumber;
const int stSynActivityData::kInvestGetRewardLvFieldNumber;
const int stSynActivityData::kEatDinnerNumFieldNumber;
#endif  // !_MSC_VER

stSynActivityData::stSynActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynActivityData::InitAsDefaultInstance() {
}

stSynActivityData::stSynActivityData(const stSynActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynActivityData::SharedCtor() {
  _cached_size_ = 0;
  hasbuyinvestment_ = false;
  eatdinnernum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynActivityData::~stSynActivityData() {
  SharedDtor();
}

void stSynActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynActivityData_descriptor_;
}

const stSynActivityData& stSynActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynActivityData* stSynActivityData::default_instance_ = NULL;

stSynActivityData* stSynActivityData::New() const {
  return new stSynActivityData;
}

void stSynActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasbuyinvestment_ = false;
    eatdinnernum_ = 0u;
  }
  investgetrewardlv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hasBuyInvestment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbuyinvestment_)));
          set_has_hasbuyinvestment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_investGetRewardLv;
        break;
      }

      // repeated uint32 investGetRewardLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_investGetRewardLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_investgetrewardlv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_investgetrewardlv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_investGetRewardLv;
        if (input->ExpectTag(24)) goto parse_eatDinnerNum;
        break;
      }

      // optional uint32 eatDinnerNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eatDinnerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eatdinnernum_)));
          set_has_eatdinnernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hasBuyInvestment = 1;
  if (has_hasbuyinvestment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasbuyinvestment(), output);
  }

  // repeated uint32 investGetRewardLv = 2;
  for (int i = 0; i < this->investgetrewardlv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->investgetrewardlv(i), output);
  }

  // optional uint32 eatDinnerNum = 3;
  if (has_eatdinnernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eatdinnernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool hasBuyInvestment = 1;
  if (has_hasbuyinvestment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasbuyinvestment(), target);
  }

  // repeated uint32 investGetRewardLv = 2;
  for (int i = 0; i < this->investgetrewardlv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->investgetrewardlv(i), target);
  }

  // optional uint32 eatDinnerNum = 3;
  if (has_eatdinnernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eatdinnernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hasBuyInvestment = 1;
    if (has_hasbuyinvestment()) {
      total_size += 1 + 1;
    }

    // optional uint32 eatDinnerNum = 3;
    if (has_eatdinnernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->eatdinnernum());
    }

  }
  // repeated uint32 investGetRewardLv = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->investgetrewardlv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->investgetrewardlv(i));
    }
    total_size += 1 * this->investgetrewardlv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynActivityData::MergeFrom(const stSynActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  investgetrewardlv_.MergeFrom(from.investgetrewardlv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasbuyinvestment()) {
      set_hasbuyinvestment(from.hasbuyinvestment());
    }
    if (from.has_eatdinnernum()) {
      set_eatdinnernum(from.eatdinnernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynActivityData::CopyFrom(const stSynActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynActivityData::IsInitialized() const {

  return true;
}

void stSynActivityData::Swap(stSynActivityData* other) {
  if (other != this) {
    std::swap(hasbuyinvestment_, other->hasbuyinvestment_);
    investgetrewardlv_.Swap(&other->investgetrewardlv_);
    std::swap(eatdinnernum_, other->eatdinnernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynActivityData_descriptor_;
  metadata.reflection = stSynActivityData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenCaptureTreasure_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenCaptureTreasure_ProtoModID_descriptor_;
}
bool stReqOpenCaptureTreasure_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenCaptureTreasure_ProtoModID stReqOpenCaptureTreasure::ModID;
const stReqOpenCaptureTreasure_ProtoModID stReqOpenCaptureTreasure::ProtoModID_MIN;
const stReqOpenCaptureTreasure_ProtoModID stReqOpenCaptureTreasure::ProtoModID_MAX;
const int stReqOpenCaptureTreasure::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenCaptureTreasure_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenCaptureTreasure_ProtoFunID_descriptor_;
}
bool stReqOpenCaptureTreasure_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenCaptureTreasure_ProtoFunID stReqOpenCaptureTreasure::FunID;
const stReqOpenCaptureTreasure_ProtoFunID stReqOpenCaptureTreasure::ProtoFunID_MIN;
const stReqOpenCaptureTreasure_ProtoFunID stReqOpenCaptureTreasure::ProtoFunID_MAX;
const int stReqOpenCaptureTreasure::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenCaptureTreasure::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenCaptureTreasure::stReqOpenCaptureTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenCaptureTreasure::InitAsDefaultInstance() {
}

stReqOpenCaptureTreasure::stReqOpenCaptureTreasure(const stReqOpenCaptureTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenCaptureTreasure::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenCaptureTreasure::~stReqOpenCaptureTreasure() {
  SharedDtor();
}

void stReqOpenCaptureTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenCaptureTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenCaptureTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenCaptureTreasure_descriptor_;
}

const stReqOpenCaptureTreasure& stReqOpenCaptureTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqOpenCaptureTreasure* stReqOpenCaptureTreasure::default_instance_ = NULL;

stReqOpenCaptureTreasure* stReqOpenCaptureTreasure::New() const {
  return new stReqOpenCaptureTreasure;
}

void stReqOpenCaptureTreasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenCaptureTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenCaptureTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenCaptureTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenCaptureTreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenCaptureTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenCaptureTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenCaptureTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenCaptureTreasure::MergeFrom(const stReqOpenCaptureTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenCaptureTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenCaptureTreasure::CopyFrom(const stReqOpenCaptureTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenCaptureTreasure::IsInitialized() const {

  return true;
}

void stReqOpenCaptureTreasure::Swap(stReqOpenCaptureTreasure* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenCaptureTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenCaptureTreasure_descriptor_;
  metadata.reflection = stReqOpenCaptureTreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynCaptureTreasureInfo::kResTypeFieldNumber;
const int stSynCaptureTreasureInfo::kResNumFieldNumber;
#endif  // !_MSC_VER

stSynCaptureTreasureInfo::stSynCaptureTreasureInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynCaptureTreasureInfo::InitAsDefaultInstance() {
}

stSynCaptureTreasureInfo::stSynCaptureTreasureInfo(const stSynCaptureTreasureInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynCaptureTreasureInfo::SharedCtor() {
  _cached_size_ = 0;
  restype_ = 0u;
  resnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynCaptureTreasureInfo::~stSynCaptureTreasureInfo() {
  SharedDtor();
}

void stSynCaptureTreasureInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynCaptureTreasureInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynCaptureTreasureInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCaptureTreasureInfo_descriptor_;
}

const stSynCaptureTreasureInfo& stSynCaptureTreasureInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynCaptureTreasureInfo* stSynCaptureTreasureInfo::default_instance_ = NULL;

stSynCaptureTreasureInfo* stSynCaptureTreasureInfo::New() const {
  return new stSynCaptureTreasureInfo;
}

void stSynCaptureTreasureInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    restype_ = 0u;
    resnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynCaptureTreasureInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restype_)));
          set_has_restype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resNum;
        break;
      }

      // optional uint32 resNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum_)));
          set_has_resnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynCaptureTreasureInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 resType = 1;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->restype(), output);
  }

  // optional uint32 resNum = 2;
  if (has_resnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynCaptureTreasureInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 resType = 1;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->restype(), target);
  }

  // optional uint32 resNum = 2;
  if (has_resnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynCaptureTreasureInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 resType = 1;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restype());
    }

    // optional uint32 resNum = 2;
    if (has_resnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynCaptureTreasureInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynCaptureTreasureInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynCaptureTreasureInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynCaptureTreasureInfo::MergeFrom(const stSynCaptureTreasureInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_resnum()) {
      set_resnum(from.resnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynCaptureTreasureInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynCaptureTreasureInfo::CopyFrom(const stSynCaptureTreasureInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynCaptureTreasureInfo::IsInitialized() const {

  return true;
}

void stSynCaptureTreasureInfo::Swap(stSynCaptureTreasureInfo* other) {
  if (other != this) {
    std::swap(restype_, other->restype_);
    std::swap(resnum_, other->resnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynCaptureTreasureInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynCaptureTreasureInfo_descriptor_;
  metadata.reflection = stSynCaptureTreasureInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetCaptureTreasure_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCaptureTreasure_ProtoModID_descriptor_;
}
bool stRetCaptureTreasure_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCaptureTreasure_ProtoModID stRetCaptureTreasure::ModID;
const stRetCaptureTreasure_ProtoModID stRetCaptureTreasure::ProtoModID_MIN;
const stRetCaptureTreasure_ProtoModID stRetCaptureTreasure::ProtoModID_MAX;
const int stRetCaptureTreasure::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetCaptureTreasure_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCaptureTreasure_ProtoFunID_descriptor_;
}
bool stRetCaptureTreasure_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCaptureTreasure_ProtoFunID stRetCaptureTreasure::FunID;
const stRetCaptureTreasure_ProtoFunID stRetCaptureTreasure::ProtoFunID_MIN;
const stRetCaptureTreasure_ProtoFunID stRetCaptureTreasure::ProtoFunID_MAX;
const int stRetCaptureTreasure::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetCaptureTreasure::kTresuresFieldNumber;
const int stRetCaptureTreasure::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

stRetCaptureTreasure::stRetCaptureTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetCaptureTreasure::InitAsDefaultInstance() {
}

stRetCaptureTreasure::stRetCaptureTreasure(const stRetCaptureTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetCaptureTreasure::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetCaptureTreasure::~stRetCaptureTreasure() {
  SharedDtor();
}

void stRetCaptureTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetCaptureTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetCaptureTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCaptureTreasure_descriptor_;
}

const stRetCaptureTreasure& stRetCaptureTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetCaptureTreasure* stRetCaptureTreasure::default_instance_ = NULL;

stRetCaptureTreasure* stRetCaptureTreasure::New() const {
  return new stRetCaptureTreasure;
}

void stRetCaptureTreasure::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    remaintime_ = 0u;
  }
  tresures_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetCaptureTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stSynCaptureTreasureInfo tresures = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tresures:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tresures()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tresures;
        if (input->ExpectTag(16)) goto parse_remainTime;
        break;
      }

      // optional uint32 remainTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetCaptureTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stSynCaptureTreasureInfo tresures = 1;
  for (int i = 0; i < this->tresures_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tresures(i), output);
  }

  // optional uint32 remainTime = 2;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remaintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetCaptureTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stSynCaptureTreasureInfo tresures = 1;
  for (int i = 0; i < this->tresures_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tresures(i), target);
  }

  // optional uint32 remainTime = 2;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remaintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetCaptureTreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 remainTime = 2;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

  }
  // repeated .MiscProto.stSynCaptureTreasureInfo tresures = 1;
  total_size += 1 * this->tresures_size();
  for (int i = 0; i < this->tresures_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tresures(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetCaptureTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetCaptureTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetCaptureTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetCaptureTreasure::MergeFrom(const stRetCaptureTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  tresures_.MergeFrom(from.tresures_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetCaptureTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetCaptureTreasure::CopyFrom(const stRetCaptureTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetCaptureTreasure::IsInitialized() const {

  return true;
}

void stRetCaptureTreasure::Swap(stRetCaptureTreasure* other) {
  if (other != this) {
    tresures_.Swap(&other->tresures_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetCaptureTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetCaptureTreasure_descriptor_;
  metadata.reflection = stRetCaptureTreasure_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCombineTreasure_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCombineTreasure_ProtoModID_descriptor_;
}
bool stReqCombineTreasure_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCombineTreasure_ProtoModID stReqCombineTreasure::ModID;
const stReqCombineTreasure_ProtoModID stReqCombineTreasure::ProtoModID_MIN;
const stReqCombineTreasure_ProtoModID stReqCombineTreasure::ProtoModID_MAX;
const int stReqCombineTreasure::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCombineTreasure_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCombineTreasure_ProtoFunID_descriptor_;
}
bool stReqCombineTreasure_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 37:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCombineTreasure_ProtoFunID stReqCombineTreasure::FunID;
const stReqCombineTreasure_ProtoFunID stReqCombineTreasure::ProtoFunID_MIN;
const stReqCombineTreasure_ProtoFunID stReqCombineTreasure::ProtoFunID_MAX;
const int stReqCombineTreasure::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCombineTreasure::kCombineTypeFieldNumber;
#endif  // !_MSC_VER

stReqCombineTreasure::stReqCombineTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCombineTreasure::InitAsDefaultInstance() {
}

stReqCombineTreasure::stReqCombineTreasure(const stReqCombineTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCombineTreasure::SharedCtor() {
  _cached_size_ = 0;
  combinetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCombineTreasure::~stReqCombineTreasure() {
  SharedDtor();
}

void stReqCombineTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCombineTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCombineTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCombineTreasure_descriptor_;
}

const stReqCombineTreasure& stReqCombineTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqCombineTreasure* stReqCombineTreasure::default_instance_ = NULL;

stReqCombineTreasure* stReqCombineTreasure::New() const {
  return new stReqCombineTreasure;
}

void stReqCombineTreasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    combinetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCombineTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 combineType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combinetype_)));
          set_has_combinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCombineTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 combineType = 1;
  if (has_combinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->combinetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCombineTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 combineType = 1;
  if (has_combinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->combinetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCombineTreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 combineType = 1;
    if (has_combinetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combinetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCombineTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCombineTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCombineTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCombineTreasure::MergeFrom(const stReqCombineTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_combinetype()) {
      set_combinetype(from.combinetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCombineTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCombineTreasure::CopyFrom(const stReqCombineTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCombineTreasure::IsInitialized() const {

  return true;
}

void stReqCombineTreasure::Swap(stReqCombineTreasure* other) {
  if (other != this) {
    std::swap(combinetype_, other->combinetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCombineTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCombineTreasure_descriptor_;
  metadata.reflection = stReqCombineTreasure_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCombineTreasureResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineTreasureResult_eResult_descriptor_;
}
bool stCombineTreasureResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCombineTreasureResult_eResult stCombineTreasureResult::eSUCCESS;
const stCombineTreasureResult_eResult stCombineTreasureResult::eTREASURE_NOT_ENOUGH;
const stCombineTreasureResult_eResult stCombineTreasureResult::eBAG_FULL;
const stCombineTreasureResult_eResult stCombineTreasureResult::eINNER_ERROR;
const stCombineTreasureResult_eResult stCombineTreasureResult::eResult_MIN;
const stCombineTreasureResult_eResult stCombineTreasureResult::eResult_MAX;
const int stCombineTreasureResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCombineTreasureResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineTreasureResult_ProtoModID_descriptor_;
}
bool stCombineTreasureResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCombineTreasureResult_ProtoModID stCombineTreasureResult::ModID;
const stCombineTreasureResult_ProtoModID stCombineTreasureResult::ProtoModID_MIN;
const stCombineTreasureResult_ProtoModID stCombineTreasureResult::ProtoModID_MAX;
const int stCombineTreasureResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCombineTreasureResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineTreasureResult_ProtoFunID_descriptor_;
}
bool stCombineTreasureResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCombineTreasureResult_ProtoFunID stCombineTreasureResult::FunID;
const stCombineTreasureResult_ProtoFunID stCombineTreasureResult::ProtoFunID_MIN;
const stCombineTreasureResult_ProtoFunID stCombineTreasureResult::ProtoFunID_MAX;
const int stCombineTreasureResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCombineTreasureResult::kResultFieldNumber;
#endif  // !_MSC_VER

stCombineTreasureResult::stCombineTreasureResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCombineTreasureResult::InitAsDefaultInstance() {
}

stCombineTreasureResult::stCombineTreasureResult(const stCombineTreasureResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCombineTreasureResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCombineTreasureResult::~stCombineTreasureResult() {
  SharedDtor();
}

void stCombineTreasureResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCombineTreasureResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCombineTreasureResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCombineTreasureResult_descriptor_;
}

const stCombineTreasureResult& stCombineTreasureResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCombineTreasureResult* stCombineTreasureResult::default_instance_ = NULL;

stCombineTreasureResult* stCombineTreasureResult::New() const {
  return new stCombineTreasureResult;
}

void stCombineTreasureResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCombineTreasureResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stCombineTreasureResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stCombineTreasureResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stCombineTreasureResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCombineTreasureResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stCombineTreasureResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCombineTreasureResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stCombineTreasureResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCombineTreasureResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stCombineTreasureResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCombineTreasureResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCombineTreasureResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCombineTreasureResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCombineTreasureResult::MergeFrom(const stCombineTreasureResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCombineTreasureResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCombineTreasureResult::CopyFrom(const stCombineTreasureResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCombineTreasureResult::IsInitialized() const {

  return true;
}

void stCombineTreasureResult::Swap(stCombineTreasureResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCombineTreasureResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCombineTreasureResult_descriptor_;
  metadata.reflection = stCombineTreasureResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTime_eType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModuleTime_eType_descriptor_;
}
bool stBuyPeaceModuleTime_eType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyPeaceModuleTime_eType stBuyPeaceModuleTime::e1_HOUR_ITEM;
const stBuyPeaceModuleTime_eType stBuyPeaceModuleTime::e3_HOUR_ITEM;
const stBuyPeaceModuleTime_eType stBuyPeaceModuleTime::e12_HOUR_ITEM;
const stBuyPeaceModuleTime_eType stBuyPeaceModuleTime::e10_DIAMOND;
const stBuyPeaceModuleTime_eType stBuyPeaceModuleTime::eType_MIN;
const stBuyPeaceModuleTime_eType stBuyPeaceModuleTime::eType_MAX;
const int stBuyPeaceModuleTime::eType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModuleTime_ProtoModID_descriptor_;
}
bool stBuyPeaceModuleTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyPeaceModuleTime_ProtoModID stBuyPeaceModuleTime::ModID;
const stBuyPeaceModuleTime_ProtoModID stBuyPeaceModuleTime::ProtoModID_MIN;
const stBuyPeaceModuleTime_ProtoModID stBuyPeaceModuleTime::ProtoModID_MAX;
const int stBuyPeaceModuleTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModuleTime_ProtoFunID_descriptor_;
}
bool stBuyPeaceModuleTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 39:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyPeaceModuleTime_ProtoFunID stBuyPeaceModuleTime::FunID;
const stBuyPeaceModuleTime_ProtoFunID stBuyPeaceModuleTime::ProtoFunID_MIN;
const stBuyPeaceModuleTime_ProtoFunID stBuyPeaceModuleTime::ProtoFunID_MAX;
const int stBuyPeaceModuleTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyPeaceModuleTime::kTypeFieldNumber;
const int stBuyPeaceModuleTime::kHourFieldNumber;
#endif  // !_MSC_VER

stBuyPeaceModuleTime::stBuyPeaceModuleTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyPeaceModuleTime::InitAsDefaultInstance() {
}

stBuyPeaceModuleTime::stBuyPeaceModuleTime(const stBuyPeaceModuleTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyPeaceModuleTime::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  hour_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyPeaceModuleTime::~stBuyPeaceModuleTime() {
  SharedDtor();
}

void stBuyPeaceModuleTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBuyPeaceModuleTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyPeaceModuleTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModuleTime_descriptor_;
}

const stBuyPeaceModuleTime& stBuyPeaceModuleTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBuyPeaceModuleTime* stBuyPeaceModuleTime::default_instance_ = NULL;

stBuyPeaceModuleTime* stBuyPeaceModuleTime::New() const {
  return new stBuyPeaceModuleTime;
}

void stBuyPeaceModuleTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    hour_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyPeaceModuleTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stBuyPeaceModuleTime.eType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stBuyPeaceModuleTime_eType_IsValid(value)) {
            set_type(static_cast< ::MiscProto::stBuyPeaceModuleTime_eType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hour;
        break;
      }

      // optional uint32 hour = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyPeaceModuleTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stBuyPeaceModuleTime.eType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 hour = 2;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hour(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyPeaceModuleTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stBuyPeaceModuleTime.eType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 hour = 2;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hour(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyPeaceModuleTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stBuyPeaceModuleTime.eType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 hour = 2;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hour());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyPeaceModuleTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyPeaceModuleTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyPeaceModuleTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyPeaceModuleTime::MergeFrom(const stBuyPeaceModuleTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyPeaceModuleTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyPeaceModuleTime::CopyFrom(const stBuyPeaceModuleTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyPeaceModuleTime::IsInitialized() const {

  return true;
}

void stBuyPeaceModuleTime::Swap(stBuyPeaceModuleTime* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(hour_, other->hour_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyPeaceModuleTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyPeaceModuleTime_descriptor_;
  metadata.reflection = stBuyPeaceModuleTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTimeResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModuleTimeResult_eResult_descriptor_;
}
bool stBuyPeaceModuleTimeResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyPeaceModuleTimeResult_eResult stBuyPeaceModuleTimeResult::eSUCCESS;
const stBuyPeaceModuleTimeResult_eResult stBuyPeaceModuleTimeResult::eHAS_NO_ITEM;
const stBuyPeaceModuleTimeResult_eResult stBuyPeaceModuleTimeResult::eDIAMOND_NOT_ENOUGH;
const stBuyPeaceModuleTimeResult_eResult stBuyPeaceModuleTimeResult::eResult_MIN;
const stBuyPeaceModuleTimeResult_eResult stBuyPeaceModuleTimeResult::eResult_MAX;
const int stBuyPeaceModuleTimeResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTimeResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModuleTimeResult_ProtoModID_descriptor_;
}
bool stBuyPeaceModuleTimeResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyPeaceModuleTimeResult_ProtoModID stBuyPeaceModuleTimeResult::ModID;
const stBuyPeaceModuleTimeResult_ProtoModID stBuyPeaceModuleTimeResult::ProtoModID_MIN;
const stBuyPeaceModuleTimeResult_ProtoModID stBuyPeaceModuleTimeResult::ProtoModID_MAX;
const int stBuyPeaceModuleTimeResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyPeaceModuleTimeResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModuleTimeResult_ProtoFunID_descriptor_;
}
bool stBuyPeaceModuleTimeResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyPeaceModuleTimeResult_ProtoFunID stBuyPeaceModuleTimeResult::FunID;
const stBuyPeaceModuleTimeResult_ProtoFunID stBuyPeaceModuleTimeResult::ProtoFunID_MIN;
const stBuyPeaceModuleTimeResult_ProtoFunID stBuyPeaceModuleTimeResult::ProtoFunID_MAX;
const int stBuyPeaceModuleTimeResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyPeaceModuleTimeResult::kResultFieldNumber;
const int stBuyPeaceModuleTimeResult::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

stBuyPeaceModuleTimeResult::stBuyPeaceModuleTimeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyPeaceModuleTimeResult::InitAsDefaultInstance() {
}

stBuyPeaceModuleTimeResult::stBuyPeaceModuleTimeResult(const stBuyPeaceModuleTimeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyPeaceModuleTimeResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  remaintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyPeaceModuleTimeResult::~stBuyPeaceModuleTimeResult() {
  SharedDtor();
}

void stBuyPeaceModuleTimeResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBuyPeaceModuleTimeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyPeaceModuleTimeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModuleTimeResult_descriptor_;
}

const stBuyPeaceModuleTimeResult& stBuyPeaceModuleTimeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBuyPeaceModuleTimeResult* stBuyPeaceModuleTimeResult::default_instance_ = NULL;

stBuyPeaceModuleTimeResult* stBuyPeaceModuleTimeResult::New() const {
  return new stBuyPeaceModuleTimeResult;
}

void stBuyPeaceModuleTimeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    remaintime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyPeaceModuleTimeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stBuyPeaceModuleTimeResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stBuyPeaceModuleTimeResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stBuyPeaceModuleTimeResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remainTime;
        break;
      }

      // optional uint32 remainTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyPeaceModuleTimeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stBuyPeaceModuleTimeResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 remainTime = 2;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->remaintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyPeaceModuleTimeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stBuyPeaceModuleTimeResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 remainTime = 2;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->remaintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyPeaceModuleTimeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stBuyPeaceModuleTimeResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 remainTime = 2;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyPeaceModuleTimeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyPeaceModuleTimeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyPeaceModuleTimeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyPeaceModuleTimeResult::MergeFrom(const stBuyPeaceModuleTimeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyPeaceModuleTimeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyPeaceModuleTimeResult::CopyFrom(const stBuyPeaceModuleTimeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyPeaceModuleTimeResult::IsInitialized() const {

  return true;
}

void stBuyPeaceModuleTimeResult::Swap(stBuyPeaceModuleTimeResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyPeaceModuleTimeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyPeaceModuleTimeResult_descriptor_;
  metadata.reflection = stBuyPeaceModuleTimeResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCaptureTreasureUserInfo::kCharIDFieldNumber;
const int stCaptureTreasureUserInfo::kNameFieldNumber;
const int stCaptureTreasureUserInfo::kJobFieldNumber;
const int stCaptureTreasureUserInfo::kSexFieldNumber;
const int stCaptureTreasureUserInfo::kLevelFieldNumber;
const int stCaptureTreasureUserInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stCaptureTreasureUserInfo::stCaptureTreasureUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCaptureTreasureUserInfo::InitAsDefaultInstance() {
}

stCaptureTreasureUserInfo::stCaptureTreasureUserInfo(const stCaptureTreasureUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCaptureTreasureUserInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCaptureTreasureUserInfo::~stCaptureTreasureUserInfo() {
  SharedDtor();
}

void stCaptureTreasureUserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stCaptureTreasureUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCaptureTreasureUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureTreasureUserInfo_descriptor_;
}

const stCaptureTreasureUserInfo& stCaptureTreasureUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCaptureTreasureUserInfo* stCaptureTreasureUserInfo::default_instance_ = NULL;

stCaptureTreasureUserInfo* stCaptureTreasureUserInfo::New() const {
  return new stCaptureTreasureUserInfo;
}

void stCaptureTreasureUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCaptureTreasureUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCaptureTreasureUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 photoID = 6;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCaptureTreasureUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 photoID = 6;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCaptureTreasureUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 photoID = 6;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCaptureTreasureUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCaptureTreasureUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCaptureTreasureUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCaptureTreasureUserInfo::MergeFrom(const stCaptureTreasureUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCaptureTreasureUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCaptureTreasureUserInfo::CopyFrom(const stCaptureTreasureUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCaptureTreasureUserInfo::IsInitialized() const {

  return true;
}

void stCaptureTreasureUserInfo::Swap(stCaptureTreasureUserInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCaptureTreasureUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCaptureTreasureUserInfo_descriptor_;
  metadata.reflection = stCaptureTreasureUserInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqChallengeUserList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeUserList_ProtoModID_descriptor_;
}
bool stReqChallengeUserList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChallengeUserList_ProtoModID stReqChallengeUserList::ModID;
const stReqChallengeUserList_ProtoModID stReqChallengeUserList::ProtoModID_MIN;
const stReqChallengeUserList_ProtoModID stReqChallengeUserList::ProtoModID_MAX;
const int stReqChallengeUserList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChallengeUserList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeUserList_ProtoFunID_descriptor_;
}
bool stReqChallengeUserList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 41:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChallengeUserList_ProtoFunID stReqChallengeUserList::FunID;
const stReqChallengeUserList_ProtoFunID stReqChallengeUserList::ProtoFunID_MIN;
const stReqChallengeUserList_ProtoFunID stReqChallengeUserList::ProtoFunID_MAX;
const int stReqChallengeUserList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqChallengeUserList::kCharIDFieldNumber;
const int stReqChallengeUserList::kResIDFieldNumber;
#endif  // !_MSC_VER

stReqChallengeUserList::stReqChallengeUserList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqChallengeUserList::InitAsDefaultInstance() {
}

stReqChallengeUserList::stReqChallengeUserList(const stReqChallengeUserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqChallengeUserList::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  resid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqChallengeUserList::~stReqChallengeUserList() {
  SharedDtor();
}

void stReqChallengeUserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqChallengeUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqChallengeUserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChallengeUserList_descriptor_;
}

const stReqChallengeUserList& stReqChallengeUserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqChallengeUserList* stReqChallengeUserList::default_instance_ = NULL;

stReqChallengeUserList* stReqChallengeUserList::New() const {
  return new stReqChallengeUserList;
}

void stReqChallengeUserList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    resid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqChallengeUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resID;
        break;
      }

      // optional uint32 resID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
          set_has_resid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqChallengeUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 resID = 2;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqChallengeUserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 resID = 2;
  if (has_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqChallengeUserList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 resID = 2;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqChallengeUserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqChallengeUserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqChallengeUserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqChallengeUserList::MergeFrom(const stReqChallengeUserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqChallengeUserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqChallengeUserList::CopyFrom(const stReqChallengeUserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqChallengeUserList::IsInitialized() const {

  return true;
}

void stReqChallengeUserList::Swap(stReqChallengeUserList* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(resid_, other->resid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqChallengeUserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqChallengeUserList_descriptor_;
  metadata.reflection = stReqChallengeUserList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetChallengeUserList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChallengeUserList_ProtoModID_descriptor_;
}
bool stRetChallengeUserList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetChallengeUserList_ProtoModID stRetChallengeUserList::ModID;
const stRetChallengeUserList_ProtoModID stRetChallengeUserList::ProtoModID_MIN;
const stRetChallengeUserList_ProtoModID stRetChallengeUserList::ProtoModID_MAX;
const int stRetChallengeUserList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetChallengeUserList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChallengeUserList_ProtoFunID_descriptor_;
}
bool stRetChallengeUserList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 42:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetChallengeUserList_ProtoFunID stRetChallengeUserList::FunID;
const stRetChallengeUserList_ProtoFunID stRetChallengeUserList::ProtoFunID_MIN;
const stRetChallengeUserList_ProtoFunID stRetChallengeUserList::ProtoFunID_MAX;
const int stRetChallengeUserList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetChallengeUserList::kUserInfoFieldNumber;
#endif  // !_MSC_VER

stRetChallengeUserList::stRetChallengeUserList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetChallengeUserList::InitAsDefaultInstance() {
}

stRetChallengeUserList::stRetChallengeUserList(const stRetChallengeUserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetChallengeUserList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetChallengeUserList::~stRetChallengeUserList() {
  SharedDtor();
}

void stRetChallengeUserList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetChallengeUserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetChallengeUserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChallengeUserList_descriptor_;
}

const stRetChallengeUserList& stRetChallengeUserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetChallengeUserList* stRetChallengeUserList::default_instance_ = NULL;

stRetChallengeUserList* stRetChallengeUserList::New() const {
  return new stRetChallengeUserList;
}

void stRetChallengeUserList::Clear() {
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetChallengeUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stCaptureTreasureUserInfo userInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_userInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetChallengeUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stCaptureTreasureUserInfo userInfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->userinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetChallengeUserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stCaptureTreasureUserInfo userInfo = 1;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->userinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetChallengeUserList::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stCaptureTreasureUserInfo userInfo = 1;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetChallengeUserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetChallengeUserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetChallengeUserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetChallengeUserList::MergeFrom(const stRetChallengeUserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetChallengeUserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetChallengeUserList::CopyFrom(const stRetChallengeUserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetChallengeUserList::IsInitialized() const {

  return true;
}

void stRetChallengeUserList::Swap(stRetChallengeUserList* other) {
  if (other != this) {
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetChallengeUserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetChallengeUserList_descriptor_;
  metadata.reflection = stRetChallengeUserList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCaptureUserTreasure_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureUserTreasure_ProtoModID_descriptor_;
}
bool stCaptureUserTreasure_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCaptureUserTreasure_ProtoModID stCaptureUserTreasure::ModID;
const stCaptureUserTreasure_ProtoModID stCaptureUserTreasure::ProtoModID_MIN;
const stCaptureUserTreasure_ProtoModID stCaptureUserTreasure::ProtoModID_MAX;
const int stCaptureUserTreasure::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCaptureUserTreasure_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureUserTreasure_ProtoFunID_descriptor_;
}
bool stCaptureUserTreasure_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 43:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCaptureUserTreasure_ProtoFunID stCaptureUserTreasure::FunID;
const stCaptureUserTreasure_ProtoFunID stCaptureUserTreasure::ProtoFunID_MIN;
const stCaptureUserTreasure_ProtoFunID stCaptureUserTreasure::ProtoFunID_MAX;
const int stCaptureUserTreasure::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCaptureUserTreasure::kCharIDFieldNumber;
const int stCaptureUserTreasure::kCombineIDFieldNumber;
const int stCaptureUserTreasure::kResTypeFieldNumber;
const int stCaptureUserTreasure::kTypeFieldNumber;
#endif  // !_MSC_VER

stCaptureUserTreasure::stCaptureUserTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCaptureUserTreasure::InitAsDefaultInstance() {
}

stCaptureUserTreasure::stCaptureUserTreasure(const stCaptureUserTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCaptureUserTreasure::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  combineid_ = 0u;
  restype_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCaptureUserTreasure::~stCaptureUserTreasure() {
  SharedDtor();
}

void stCaptureUserTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCaptureUserTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCaptureUserTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureUserTreasure_descriptor_;
}

const stCaptureUserTreasure& stCaptureUserTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCaptureUserTreasure* stCaptureUserTreasure::default_instance_ = NULL;

stCaptureUserTreasure* stCaptureUserTreasure::New() const {
  return new stCaptureUserTreasure;
}

void stCaptureUserTreasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    combineid_ = 0u;
    restype_ = 0u;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCaptureUserTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_combineID;
        break;
      }

      // optional uint32 combineID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combineID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combineid_)));
          set_has_combineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resType;
        break;
      }

      // optional uint32 resType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restype_)));
          set_has_restype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .MiscProto.eCaptureType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::eCaptureType_IsValid(value)) {
            set_type(static_cast< ::MiscProto::eCaptureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCaptureUserTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 combineID = 2;
  if (has_combineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->combineid(), output);
  }

  // optional uint32 resType = 3;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->restype(), output);
  }

  // optional .MiscProto.eCaptureType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCaptureUserTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 combineID = 2;
  if (has_combineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->combineid(), target);
  }

  // optional uint32 resType = 3;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->restype(), target);
  }

  // optional .MiscProto.eCaptureType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCaptureUserTreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 combineID = 2;
    if (has_combineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combineid());
    }

    // optional uint32 resType = 3;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restype());
    }

    // optional .MiscProto.eCaptureType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCaptureUserTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCaptureUserTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCaptureUserTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCaptureUserTreasure::MergeFrom(const stCaptureUserTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_combineid()) {
      set_combineid(from.combineid());
    }
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCaptureUserTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCaptureUserTreasure::CopyFrom(const stCaptureUserTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCaptureUserTreasure::IsInitialized() const {

  return true;
}

void stCaptureUserTreasure::Swap(stCaptureUserTreasure* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(combineid_, other->combineid_);
    std::swap(restype_, other->restype_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCaptureUserTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCaptureUserTreasure_descriptor_;
  metadata.reflection = stCaptureUserTreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynCaptureReward::kItemIDFieldNumber;
const int stSynCaptureReward::kNumFieldNumber;
const int stSynCaptureReward::kGoldCoinFieldNumber;
const int stSynCaptureReward::kExpFieldNumber;
#endif  // !_MSC_VER

stSynCaptureReward::stSynCaptureReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynCaptureReward::InitAsDefaultInstance() {
}

stSynCaptureReward::stSynCaptureReward(const stSynCaptureReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynCaptureReward::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  goldcoin_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynCaptureReward::~stSynCaptureReward() {
  SharedDtor();
}

void stSynCaptureReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynCaptureReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynCaptureReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCaptureReward_descriptor_;
}

const stSynCaptureReward& stSynCaptureReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynCaptureReward* stSynCaptureReward::default_instance_ = NULL;

stSynCaptureReward* stSynCaptureReward::New() const {
  return new stSynCaptureReward;
}

void stSynCaptureReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
    goldcoin_ = 0u;
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynCaptureReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goldCoin;
        break;
      }

      // optional uint32 goldCoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldcoin_)));
          set_has_goldcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynCaptureReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 goldCoin = 3;
  if (has_goldcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->goldcoin(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynCaptureReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 goldCoin = 3;
  if (has_goldcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->goldcoin(), target);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynCaptureReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 goldCoin = 3;
    if (has_goldcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldcoin());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynCaptureReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynCaptureReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynCaptureReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynCaptureReward::MergeFrom(const stSynCaptureReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_goldcoin()) {
      set_goldcoin(from.goldcoin());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynCaptureReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynCaptureReward::CopyFrom(const stSynCaptureReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynCaptureReward::IsInitialized() const {

  return true;
}

void stSynCaptureReward::Swap(stSynCaptureReward* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(goldcoin_, other->goldcoin_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynCaptureReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynCaptureReward_descriptor_;
  metadata.reflection = stSynCaptureReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCaptureUserTreasureResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureUserTreasureResult_eResult_descriptor_;
}
bool stCaptureUserTreasureResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult::eSUCCESS;
const stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult::eFAIL;
const stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult::eINNER_ERROR;
const stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult::eSP_NOT_ENOUGH;
const stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult::eBAG_FULL;
const stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult::eNOT_IN_OPEN_TIME;
const stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult::eResult_MIN;
const stCaptureUserTreasureResult_eResult stCaptureUserTreasureResult::eResult_MAX;
const int stCaptureUserTreasureResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCaptureUserTreasureResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureUserTreasureResult_ProtoModID_descriptor_;
}
bool stCaptureUserTreasureResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCaptureUserTreasureResult_ProtoModID stCaptureUserTreasureResult::ModID;
const stCaptureUserTreasureResult_ProtoModID stCaptureUserTreasureResult::ProtoModID_MIN;
const stCaptureUserTreasureResult_ProtoModID stCaptureUserTreasureResult::ProtoModID_MAX;
const int stCaptureUserTreasureResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCaptureUserTreasureResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureUserTreasureResult_ProtoFunID_descriptor_;
}
bool stCaptureUserTreasureResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 44:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCaptureUserTreasureResult_ProtoFunID stCaptureUserTreasureResult::FunID;
const stCaptureUserTreasureResult_ProtoFunID stCaptureUserTreasureResult::ProtoFunID_MIN;
const stCaptureUserTreasureResult_ProtoFunID stCaptureUserTreasureResult::ProtoFunID_MAX;
const int stCaptureUserTreasureResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCaptureUserTreasureResult::kResultFieldNumber;
const int stCaptureUserTreasureResult::kObtainPieceFieldNumber;
const int stCaptureUserTreasureResult::kRewardsFieldNumber;
const int stCaptureUserTreasureResult::kTypeFieldNumber;
#endif  // !_MSC_VER

stCaptureUserTreasureResult::stCaptureUserTreasureResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCaptureUserTreasureResult::InitAsDefaultInstance() {
}

stCaptureUserTreasureResult::stCaptureUserTreasureResult(const stCaptureUserTreasureResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCaptureUserTreasureResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  obtainpiece_ = false;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCaptureUserTreasureResult::~stCaptureUserTreasureResult() {
  SharedDtor();
}

void stCaptureUserTreasureResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCaptureUserTreasureResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCaptureUserTreasureResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureUserTreasureResult_descriptor_;
}

const stCaptureUserTreasureResult& stCaptureUserTreasureResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCaptureUserTreasureResult* stCaptureUserTreasureResult::default_instance_ = NULL;

stCaptureUserTreasureResult* stCaptureUserTreasureResult::New() const {
  return new stCaptureUserTreasureResult;
}

void stCaptureUserTreasureResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    obtainpiece_ = false;
    type_ = 1;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCaptureUserTreasureResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stCaptureUserTreasureResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stCaptureUserTreasureResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stCaptureUserTreasureResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_obtainPiece;
        break;
      }

      // optional bool obtainPiece = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obtainPiece:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obtainpiece_)));
          set_has_obtainpiece();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        break;
      }

      // repeated .MiscProto.stSynCaptureReward rewards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewards;
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional .MiscProto.eCaptureType type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::eCaptureType_IsValid(value)) {
            set_type(static_cast< ::MiscProto::eCaptureType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCaptureUserTreasureResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stCaptureUserTreasureResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional bool obtainPiece = 2;
  if (has_obtainpiece()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->obtainpiece(), output);
  }

  // repeated .MiscProto.stSynCaptureReward rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewards(i), output);
  }

  // optional .MiscProto.eCaptureType type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCaptureUserTreasureResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stCaptureUserTreasureResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional bool obtainPiece = 2;
  if (has_obtainpiece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->obtainpiece(), target);
  }

  // repeated .MiscProto.stSynCaptureReward rewards = 3;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewards(i), target);
  }

  // optional .MiscProto.eCaptureType type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCaptureUserTreasureResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stCaptureUserTreasureResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional bool obtainPiece = 2;
    if (has_obtainpiece()) {
      total_size += 1 + 1;
    }

    // optional .MiscProto.eCaptureType type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated .MiscProto.stSynCaptureReward rewards = 3;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCaptureUserTreasureResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCaptureUserTreasureResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCaptureUserTreasureResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCaptureUserTreasureResult::MergeFrom(const stCaptureUserTreasureResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_obtainpiece()) {
      set_obtainpiece(from.obtainpiece());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCaptureUserTreasureResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCaptureUserTreasureResult::CopyFrom(const stCaptureUserTreasureResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCaptureUserTreasureResult::IsInitialized() const {

  return true;
}

void stCaptureUserTreasureResult::Swap(stCaptureUserTreasureResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(obtainpiece_, other->obtainpiece_);
    rewards_.Swap(&other->rewards_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCaptureUserTreasureResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCaptureUserTreasureResult_descriptor_;
  metadata.reflection = stCaptureUserTreasureResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynTreasureNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTreasureNum_ProtoModID_descriptor_;
}
bool stSynTreasureNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynTreasureNum_ProtoModID stSynTreasureNum::ModID;
const stSynTreasureNum_ProtoModID stSynTreasureNum::ProtoModID_MIN;
const stSynTreasureNum_ProtoModID stSynTreasureNum::ProtoModID_MAX;
const int stSynTreasureNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynTreasureNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTreasureNum_ProtoFunID_descriptor_;
}
bool stSynTreasureNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 45:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynTreasureNum_ProtoFunID stSynTreasureNum::FunID;
const stSynTreasureNum_ProtoFunID stSynTreasureNum::ProtoFunID_MIN;
const stSynTreasureNum_ProtoFunID stSynTreasureNum::ProtoFunID_MAX;
const int stSynTreasureNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynTreasureNum::kResTypeFieldNumber;
const int stSynTreasureNum::kNumFieldNumber;
#endif  // !_MSC_VER

stSynTreasureNum::stSynTreasureNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynTreasureNum::InitAsDefaultInstance() {
}

stSynTreasureNum::stSynTreasureNum(const stSynTreasureNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynTreasureNum::SharedCtor() {
  _cached_size_ = 0;
  restype_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynTreasureNum::~stSynTreasureNum() {
  SharedDtor();
}

void stSynTreasureNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynTreasureNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynTreasureNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTreasureNum_descriptor_;
}

const stSynTreasureNum& stSynTreasureNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynTreasureNum* stSynTreasureNum::default_instance_ = NULL;

stSynTreasureNum* stSynTreasureNum::New() const {
  return new stSynTreasureNum;
}

void stSynTreasureNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    restype_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynTreasureNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restype_)));
          set_has_restype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynTreasureNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 resType = 1;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->restype(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynTreasureNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 resType = 1;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->restype(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynTreasureNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 resType = 1;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restype());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynTreasureNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynTreasureNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynTreasureNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynTreasureNum::MergeFrom(const stSynTreasureNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynTreasureNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynTreasureNum::CopyFrom(const stSynTreasureNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynTreasureNum::IsInitialized() const {

  return true;
}

void stSynTreasureNum::Swap(stSynTreasureNum* other) {
  if (other != this) {
    std::swap(restype_, other->restype_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynTreasureNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynTreasureNum_descriptor_;
  metadata.reflection = stSynTreasureNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelActiveTitle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelActiveTitle_ProtoModID_descriptor_;
}
bool stCancelActiveTitle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelActiveTitle_ProtoModID stCancelActiveTitle::ModID;
const stCancelActiveTitle_ProtoModID stCancelActiveTitle::ProtoModID_MIN;
const stCancelActiveTitle_ProtoModID stCancelActiveTitle::ProtoModID_MAX;
const int stCancelActiveTitle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelActiveTitle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelActiveTitle_ProtoFunID_descriptor_;
}
bool stCancelActiveTitle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 46:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelActiveTitle_ProtoFunID stCancelActiveTitle::FunID;
const stCancelActiveTitle_ProtoFunID stCancelActiveTitle::ProtoFunID_MIN;
const stCancelActiveTitle_ProtoFunID stCancelActiveTitle::ProtoFunID_MAX;
const int stCancelActiveTitle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelActiveTitle::kCharIDFieldNumber;
#endif  // !_MSC_VER

stCancelActiveTitle::stCancelActiveTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelActiveTitle::InitAsDefaultInstance() {
}

stCancelActiveTitle::stCancelActiveTitle(const stCancelActiveTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelActiveTitle::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelActiveTitle::~stCancelActiveTitle() {
  SharedDtor();
}

void stCancelActiveTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelActiveTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelActiveTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelActiveTitle_descriptor_;
}

const stCancelActiveTitle& stCancelActiveTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCancelActiveTitle* stCancelActiveTitle::default_instance_ = NULL;

stCancelActiveTitle* stCancelActiveTitle::New() const {
  return new stCancelActiveTitle;
}

void stCancelActiveTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelActiveTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelActiveTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelActiveTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelActiveTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelActiveTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelActiveTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelActiveTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelActiveTitle::MergeFrom(const stCancelActiveTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelActiveTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelActiveTitle::CopyFrom(const stCancelActiveTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelActiveTitle::IsInitialized() const {

  return true;
}

void stCancelActiveTitle::Swap(stCancelActiveTitle* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelActiveTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelActiveTitle_descriptor_;
  metadata.reflection = stCancelActiveTitle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelActiveTitleResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelActiveTitleResult_ProtoModID_descriptor_;
}
bool stCancelActiveTitleResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelActiveTitleResult_ProtoModID stCancelActiveTitleResult::ModID;
const stCancelActiveTitleResult_ProtoModID stCancelActiveTitleResult::ProtoModID_MIN;
const stCancelActiveTitleResult_ProtoModID stCancelActiveTitleResult::ProtoModID_MAX;
const int stCancelActiveTitleResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelActiveTitleResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelActiveTitleResult_ProtoFunID_descriptor_;
}
bool stCancelActiveTitleResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 47:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelActiveTitleResult_ProtoFunID stCancelActiveTitleResult::FunID;
const stCancelActiveTitleResult_ProtoFunID stCancelActiveTitleResult::ProtoFunID_MIN;
const stCancelActiveTitleResult_ProtoFunID stCancelActiveTitleResult::ProtoFunID_MAX;
const int stCancelActiveTitleResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelActiveTitleResult::kSuccessFieldNumber;
#endif  // !_MSC_VER

stCancelActiveTitleResult::stCancelActiveTitleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelActiveTitleResult::InitAsDefaultInstance() {
}

stCancelActiveTitleResult::stCancelActiveTitleResult(const stCancelActiveTitleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelActiveTitleResult::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelActiveTitleResult::~stCancelActiveTitleResult() {
  SharedDtor();
}

void stCancelActiveTitleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelActiveTitleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelActiveTitleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelActiveTitleResult_descriptor_;
}

const stCancelActiveTitleResult& stCancelActiveTitleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCancelActiveTitleResult* stCancelActiveTitleResult::default_instance_ = NULL;

stCancelActiveTitleResult* stCancelActiveTitleResult::New() const {
  return new stCancelActiveTitleResult;
}

void stCancelActiveTitleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelActiveTitleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelActiveTitleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelActiveTitleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelActiveTitleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelActiveTitleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelActiveTitleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelActiveTitleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelActiveTitleResult::MergeFrom(const stCancelActiveTitleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelActiveTitleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelActiveTitleResult::CopyFrom(const stCancelActiveTitleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelActiveTitleResult::IsInitialized() const {

  return true;
}

void stCancelActiveTitleResult::Swap(stCancelActiveTitleResult* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelActiveTitleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelActiveTitleResult_descriptor_;
  metadata.reflection = stCancelActiveTitleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynSpriteInfo::kSpriteIDFieldNumber;
const int stSynSpriteInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

stSynSpriteInfo::stSynSpriteInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynSpriteInfo::InitAsDefaultInstance() {
}

stSynSpriteInfo::stSynSpriteInfo(const stSynSpriteInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynSpriteInfo::SharedCtor() {
  _cached_size_ = 0;
  spriteid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynSpriteInfo::~stSynSpriteInfo() {
  SharedDtor();
}

void stSynSpriteInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynSpriteInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynSpriteInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynSpriteInfo_descriptor_;
}

const stSynSpriteInfo& stSynSpriteInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynSpriteInfo* stSynSpriteInfo::default_instance_ = NULL;

stSynSpriteInfo* stSynSpriteInfo::New() const {
  return new stSynSpriteInfo;
}

void stSynSpriteInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spriteid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynSpriteInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spriteID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynSpriteInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spriteid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynSpriteInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spriteid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynSpriteInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spriteID = 1;
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spriteid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynSpriteInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynSpriteInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynSpriteInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynSpriteInfo::MergeFrom(const stSynSpriteInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynSpriteInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynSpriteInfo::CopyFrom(const stSynSpriteInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynSpriteInfo::IsInitialized() const {

  return true;
}

void stSynSpriteInfo::Swap(stSynSpriteInfo* other) {
  if (other != this) {
    std::swap(spriteid_, other->spriteid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynSpriteInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynSpriteInfo_descriptor_;
  metadata.reflection = stSynSpriteInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynAllSprite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllSprite_ProtoModID_descriptor_;
}
bool stSynAllSprite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllSprite_ProtoModID stSynAllSprite::ModID;
const stSynAllSprite_ProtoModID stSynAllSprite::ProtoModID_MIN;
const stSynAllSprite_ProtoModID stSynAllSprite::ProtoModID_MAX;
const int stSynAllSprite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynAllSprite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllSprite_ProtoFunID_descriptor_;
}
bool stSynAllSprite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 48:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllSprite_ProtoFunID stSynAllSprite::FunID;
const stSynAllSprite_ProtoFunID stSynAllSprite::ProtoFunID_MIN;
const stSynAllSprite_ProtoFunID stSynAllSprite::ProtoFunID_MAX;
const int stSynAllSprite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynAllSprite::kDataFieldNumber;
const int stSynAllSprite::kFollowSpriteIDFieldNumber;
#endif  // !_MSC_VER

stSynAllSprite::stSynAllSprite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynAllSprite::InitAsDefaultInstance() {
}

stSynAllSprite::stSynAllSprite(const stSynAllSprite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynAllSprite::SharedCtor() {
  _cached_size_ = 0;
  followspriteid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynAllSprite::~stSynAllSprite() {
  SharedDtor();
}

void stSynAllSprite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynAllSprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynAllSprite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllSprite_descriptor_;
}

const stSynAllSprite& stSynAllSprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynAllSprite* stSynAllSprite::default_instance_ = NULL;

stSynAllSprite* stSynAllSprite::New() const {
  return new stSynAllSprite;
}

void stSynAllSprite::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    followspriteid_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynAllSprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stSynSpriteInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_followSpriteID;
        break;
      }

      // optional uint32 followSpriteID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_followSpriteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &followspriteid_)));
          set_has_followspriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynAllSprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stSynSpriteInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint32 followSpriteID = 2;
  if (has_followspriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->followspriteid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynAllSprite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stSynSpriteInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint32 followSpriteID = 2;
  if (has_followspriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->followspriteid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynAllSprite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 followSpriteID = 2;
    if (has_followspriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->followspriteid());
    }

  }
  // repeated .MiscProto.stSynSpriteInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynAllSprite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynAllSprite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynAllSprite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynAllSprite::MergeFrom(const stSynAllSprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_followspriteid()) {
      set_followspriteid(from.followspriteid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynAllSprite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynAllSprite::CopyFrom(const stSynAllSprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynAllSprite::IsInitialized() const {

  return true;
}

void stSynAllSprite::Swap(stSynAllSprite* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(followspriteid_, other->followspriteid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynAllSprite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynAllSprite_descriptor_;
  metadata.reflection = stSynAllSprite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUnlockedSprite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUnlockedSprite_ProtoModID_descriptor_;
}
bool stReqUnlockedSprite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUnlockedSprite_ProtoModID stReqUnlockedSprite::ModID;
const stReqUnlockedSprite_ProtoModID stReqUnlockedSprite::ProtoModID_MIN;
const stReqUnlockedSprite_ProtoModID stReqUnlockedSprite::ProtoModID_MAX;
const int stReqUnlockedSprite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUnlockedSprite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUnlockedSprite_ProtoFunID_descriptor_;
}
bool stReqUnlockedSprite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 49:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUnlockedSprite_ProtoFunID stReqUnlockedSprite::FunID;
const stReqUnlockedSprite_ProtoFunID stReqUnlockedSprite::ProtoFunID_MIN;
const stReqUnlockedSprite_ProtoFunID stReqUnlockedSprite::ProtoFunID_MAX;
const int stReqUnlockedSprite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUnlockedSprite::kSpriteIDFieldNumber;
#endif  // !_MSC_VER

stReqUnlockedSprite::stReqUnlockedSprite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUnlockedSprite::InitAsDefaultInstance() {
}

stReqUnlockedSprite::stReqUnlockedSprite(const stReqUnlockedSprite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUnlockedSprite::SharedCtor() {
  _cached_size_ = 0;
  spriteid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUnlockedSprite::~stReqUnlockedSprite() {
  SharedDtor();
}

void stReqUnlockedSprite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUnlockedSprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUnlockedSprite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUnlockedSprite_descriptor_;
}

const stReqUnlockedSprite& stReqUnlockedSprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqUnlockedSprite* stReqUnlockedSprite::default_instance_ = NULL;

stReqUnlockedSprite* stReqUnlockedSprite::New() const {
  return new stReqUnlockedSprite;
}

void stReqUnlockedSprite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spriteid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUnlockedSprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spriteID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUnlockedSprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spriteid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUnlockedSprite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spriteid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUnlockedSprite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spriteID = 1;
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spriteid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUnlockedSprite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUnlockedSprite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUnlockedSprite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUnlockedSprite::MergeFrom(const stReqUnlockedSprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUnlockedSprite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUnlockedSprite::CopyFrom(const stReqUnlockedSprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUnlockedSprite::IsInitialized() const {

  return true;
}

void stReqUnlockedSprite::Swap(stReqUnlockedSprite* other) {
  if (other != this) {
    std::swap(spriteid_, other->spriteid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUnlockedSprite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUnlockedSprite_descriptor_;
  metadata.reflection = stReqUnlockedSprite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUnlockedSpriteResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockedSpriteResult_eResult_descriptor_;
}
bool stUnlockedSpriteResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockedSpriteResult_eResult stUnlockedSpriteResult::eLevel_Not_Meet;
const stUnlockedSpriteResult_eResult stUnlockedSpriteResult::eVipLv_Not_Meet;
const stUnlockedSpriteResult_eResult stUnlockedSpriteResult::eInner_Error;
const stUnlockedSpriteResult_eResult stUnlockedSpriteResult::eSuccess;
const stUnlockedSpriteResult_eResult stUnlockedSpriteResult::eResult_MIN;
const stUnlockedSpriteResult_eResult stUnlockedSpriteResult::eResult_MAX;
const int stUnlockedSpriteResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUnlockedSpriteResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockedSpriteResult_ProtoModID_descriptor_;
}
bool stUnlockedSpriteResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockedSpriteResult_ProtoModID stUnlockedSpriteResult::ModID;
const stUnlockedSpriteResult_ProtoModID stUnlockedSpriteResult::ProtoModID_MIN;
const stUnlockedSpriteResult_ProtoModID stUnlockedSpriteResult::ProtoModID_MAX;
const int stUnlockedSpriteResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUnlockedSpriteResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockedSpriteResult_ProtoFunID_descriptor_;
}
bool stUnlockedSpriteResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 50:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnlockedSpriteResult_ProtoFunID stUnlockedSpriteResult::FunID;
const stUnlockedSpriteResult_ProtoFunID stUnlockedSpriteResult::ProtoFunID_MIN;
const stUnlockedSpriteResult_ProtoFunID stUnlockedSpriteResult::ProtoFunID_MAX;
const int stUnlockedSpriteResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUnlockedSpriteResult::kResultFieldNumber;
const int stUnlockedSpriteResult::kSpriteIDFieldNumber;
#endif  // !_MSC_VER

stUnlockedSpriteResult::stUnlockedSpriteResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUnlockedSpriteResult::InitAsDefaultInstance() {
}

stUnlockedSpriteResult::stUnlockedSpriteResult(const stUnlockedSpriteResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUnlockedSpriteResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  spriteid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUnlockedSpriteResult::~stUnlockedSpriteResult() {
  SharedDtor();
}

void stUnlockedSpriteResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUnlockedSpriteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUnlockedSpriteResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnlockedSpriteResult_descriptor_;
}

const stUnlockedSpriteResult& stUnlockedSpriteResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stUnlockedSpriteResult* stUnlockedSpriteResult::default_instance_ = NULL;

stUnlockedSpriteResult* stUnlockedSpriteResult::New() const {
  return new stUnlockedSpriteResult;
}

void stUnlockedSpriteResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    spriteid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUnlockedSpriteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stUnlockedSpriteResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stUnlockedSpriteResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stUnlockedSpriteResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spriteID;
        break;
      }

      // optional uint32 spriteID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spriteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUnlockedSpriteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stUnlockedSpriteResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 spriteID = 2;
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->spriteid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUnlockedSpriteResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stUnlockedSpriteResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 spriteID = 2;
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->spriteid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUnlockedSpriteResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stUnlockedSpriteResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 spriteID = 2;
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spriteid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUnlockedSpriteResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUnlockedSpriteResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUnlockedSpriteResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUnlockedSpriteResult::MergeFrom(const stUnlockedSpriteResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUnlockedSpriteResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUnlockedSpriteResult::CopyFrom(const stUnlockedSpriteResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUnlockedSpriteResult::IsInitialized() const {

  return true;
}

void stUnlockedSpriteResult::Swap(stUnlockedSpriteResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(spriteid_, other->spriteid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUnlockedSpriteResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUnlockedSpriteResult_descriptor_;
  metadata.reflection = stUnlockedSpriteResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddSprite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddSprite_ProtoModID_descriptor_;
}
bool stAddSprite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddSprite_ProtoModID stAddSprite::ModID;
const stAddSprite_ProtoModID stAddSprite::ProtoModID_MIN;
const stAddSprite_ProtoModID stAddSprite::ProtoModID_MAX;
const int stAddSprite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddSprite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddSprite_ProtoFunID_descriptor_;
}
bool stAddSprite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 51:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddSprite_ProtoFunID stAddSprite::FunID;
const stAddSprite_ProtoFunID stAddSprite::ProtoFunID_MIN;
const stAddSprite_ProtoFunID stAddSprite::ProtoFunID_MAX;
const int stAddSprite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddSprite::kSpriteFieldNumber;
#endif  // !_MSC_VER

stAddSprite::stAddSprite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddSprite::InitAsDefaultInstance() {
  sprite_ = const_cast< ::MiscProto::stSynSpriteInfo*>(&::MiscProto::stSynSpriteInfo::default_instance());
}

stAddSprite::stAddSprite(const stAddSprite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddSprite::SharedCtor() {
  _cached_size_ = 0;
  sprite_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddSprite::~stAddSprite() {
  SharedDtor();
}

void stAddSprite::SharedDtor() {
  if (this != default_instance_) {
    delete sprite_;
  }
}

void stAddSprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddSprite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddSprite_descriptor_;
}

const stAddSprite& stAddSprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stAddSprite* stAddSprite::default_instance_ = NULL;

stAddSprite* stAddSprite::New() const {
  return new stAddSprite;
}

void stAddSprite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sprite()) {
      if (sprite_ != NULL) sprite_->::MiscProto::stSynSpriteInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddSprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stSynSpriteInfo sprite = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sprite()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddSprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stSynSpriteInfo sprite = 1;
  if (has_sprite()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sprite(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddSprite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stSynSpriteInfo sprite = 1;
  if (has_sprite()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sprite(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddSprite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stSynSpriteInfo sprite = 1;
    if (has_sprite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sprite());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddSprite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddSprite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddSprite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddSprite::MergeFrom(const stAddSprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sprite()) {
      mutable_sprite()->::MiscProto::stSynSpriteInfo::MergeFrom(from.sprite());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddSprite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddSprite::CopyFrom(const stAddSprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddSprite::IsInitialized() const {

  return true;
}

void stAddSprite::Swap(stAddSprite* other) {
  if (other != this) {
    std::swap(sprite_, other->sprite_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddSprite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddSprite_descriptor_;
  metadata.reflection = stAddSprite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLevelupSprite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelupSprite_ProtoModID_descriptor_;
}
bool stReqLevelupSprite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelupSprite_ProtoModID stReqLevelupSprite::ModID;
const stReqLevelupSprite_ProtoModID stReqLevelupSprite::ProtoModID_MIN;
const stReqLevelupSprite_ProtoModID stReqLevelupSprite::ProtoModID_MAX;
const int stReqLevelupSprite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLevelupSprite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelupSprite_ProtoFunID_descriptor_;
}
bool stReqLevelupSprite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 52:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelupSprite_ProtoFunID stReqLevelupSprite::FunID;
const stReqLevelupSprite_ProtoFunID stReqLevelupSprite::ProtoFunID_MIN;
const stReqLevelupSprite_ProtoFunID stReqLevelupSprite::ProtoFunID_MAX;
const int stReqLevelupSprite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLevelupSprite::kSpriteIDFieldNumber;
#endif  // !_MSC_VER

stReqLevelupSprite::stReqLevelupSprite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLevelupSprite::InitAsDefaultInstance() {
}

stReqLevelupSprite::stReqLevelupSprite(const stReqLevelupSprite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLevelupSprite::SharedCtor() {
  _cached_size_ = 0;
  spriteid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLevelupSprite::~stReqLevelupSprite() {
  SharedDtor();
}

void stReqLevelupSprite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLevelupSprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLevelupSprite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelupSprite_descriptor_;
}

const stReqLevelupSprite& stReqLevelupSprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqLevelupSprite* stReqLevelupSprite::default_instance_ = NULL;

stReqLevelupSprite* stReqLevelupSprite::New() const {
  return new stReqLevelupSprite;
}

void stReqLevelupSprite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spriteid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLevelupSprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spriteID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLevelupSprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spriteid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLevelupSprite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spriteid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLevelupSprite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spriteID = 1;
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spriteid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLevelupSprite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLevelupSprite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLevelupSprite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLevelupSprite::MergeFrom(const stReqLevelupSprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLevelupSprite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLevelupSprite::CopyFrom(const stReqLevelupSprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLevelupSprite::IsInitialized() const {

  return true;
}

void stReqLevelupSprite::Swap(stReqLevelupSprite* other) {
  if (other != this) {
    std::swap(spriteid_, other->spriteid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLevelupSprite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLevelupSprite_descriptor_;
  metadata.reflection = stReqLevelupSprite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLevelupSpriteResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelupSpriteResult_eResult_descriptor_;
}
bool stLevelupSpriteResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelupSpriteResult_eResult stLevelupSpriteResult::eSuccess;
const stLevelupSpriteResult_eResult stLevelupSpriteResult::eInner_Error;
const stLevelupSpriteResult_eResult stLevelupSpriteResult::eConsume_Res_Not_Enough;
const stLevelupSpriteResult_eResult stLevelupSpriteResult::eRole_Level_Limit;
const stLevelupSpriteResult_eResult stLevelupSpriteResult::eHas_Not_Unlocked;
const stLevelupSpriteResult_eResult stLevelupSpriteResult::eLevel_Full;
const stLevelupSpriteResult_eResult stLevelupSpriteResult::eSprite_Not_Exist;
const stLevelupSpriteResult_eResult stLevelupSpriteResult::eResult_MIN;
const stLevelupSpriteResult_eResult stLevelupSpriteResult::eResult_MAX;
const int stLevelupSpriteResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelupSpriteResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelupSpriteResult_ProtoModID_descriptor_;
}
bool stLevelupSpriteResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelupSpriteResult_ProtoModID stLevelupSpriteResult::ModID;
const stLevelupSpriteResult_ProtoModID stLevelupSpriteResult::ProtoModID_MIN;
const stLevelupSpriteResult_ProtoModID stLevelupSpriteResult::ProtoModID_MAX;
const int stLevelupSpriteResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelupSpriteResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelupSpriteResult_ProtoFunID_descriptor_;
}
bool stLevelupSpriteResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 53:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelupSpriteResult_ProtoFunID stLevelupSpriteResult::FunID;
const stLevelupSpriteResult_ProtoFunID stLevelupSpriteResult::ProtoFunID_MIN;
const stLevelupSpriteResult_ProtoFunID stLevelupSpriteResult::ProtoFunID_MAX;
const int stLevelupSpriteResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLevelupSpriteResult::kSpriteIDFieldNumber;
const int stLevelupSpriteResult::kResultFieldNumber;
const int stLevelupSpriteResult::kCurLvFieldNumber;
#endif  // !_MSC_VER

stLevelupSpriteResult::stLevelupSpriteResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLevelupSpriteResult::InitAsDefaultInstance() {
}

stLevelupSpriteResult::stLevelupSpriteResult(const stLevelupSpriteResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLevelupSpriteResult::SharedCtor() {
  _cached_size_ = 0;
  spriteid_ = 0u;
  result_ = 1;
  curlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLevelupSpriteResult::~stLevelupSpriteResult() {
  SharedDtor();
}

void stLevelupSpriteResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLevelupSpriteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLevelupSpriteResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelupSpriteResult_descriptor_;
}

const stLevelupSpriteResult& stLevelupSpriteResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stLevelupSpriteResult* stLevelupSpriteResult::default_instance_ = NULL;

stLevelupSpriteResult* stLevelupSpriteResult::New() const {
  return new stLevelupSpriteResult;
}

void stLevelupSpriteResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spriteid_ = 0u;
    result_ = 1;
    curlv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLevelupSpriteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spriteID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MiscProto.stLevelupSpriteResult.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stLevelupSpriteResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stLevelupSpriteResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curLv;
        break;
      }

      // optional uint32 curLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curlv_)));
          set_has_curlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLevelupSpriteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spriteid(), output);
  }

  // optional .MiscProto.stLevelupSpriteResult.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional uint32 curLv = 3;
  if (has_curlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLevelupSpriteResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spriteid(), target);
  }

  // optional .MiscProto.stLevelupSpriteResult.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional uint32 curLv = 3;
  if (has_curlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLevelupSpriteResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spriteID = 1;
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spriteid());
    }

    // optional .MiscProto.stLevelupSpriteResult.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 curLv = 3;
    if (has_curlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLevelupSpriteResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLevelupSpriteResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLevelupSpriteResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLevelupSpriteResult::MergeFrom(const stLevelupSpriteResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_curlv()) {
      set_curlv(from.curlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLevelupSpriteResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLevelupSpriteResult::CopyFrom(const stLevelupSpriteResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLevelupSpriteResult::IsInitialized() const {

  return true;
}

void stLevelupSpriteResult::Swap(stLevelupSpriteResult* other) {
  if (other != this) {
    std::swap(spriteid_, other->spriteid_);
    std::swap(result_, other->result_);
    std::swap(curlv_, other->curlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLevelupSpriteResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLevelupSpriteResult_descriptor_;
  metadata.reflection = stLevelupSpriteResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSpriteFollowMaster_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteFollowMaster_ProtoModID_descriptor_;
}
bool stSpriteFollowMaster_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteFollowMaster_ProtoModID stSpriteFollowMaster::ModID;
const stSpriteFollowMaster_ProtoModID stSpriteFollowMaster::ProtoModID_MIN;
const stSpriteFollowMaster_ProtoModID stSpriteFollowMaster::ProtoModID_MAX;
const int stSpriteFollowMaster::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSpriteFollowMaster_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteFollowMaster_ProtoFunID_descriptor_;
}
bool stSpriteFollowMaster_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteFollowMaster_ProtoFunID stSpriteFollowMaster::FunID;
const stSpriteFollowMaster_ProtoFunID stSpriteFollowMaster::ProtoFunID_MIN;
const stSpriteFollowMaster_ProtoFunID stSpriteFollowMaster::ProtoFunID_MAX;
const int stSpriteFollowMaster::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSpriteFollowMaster::kSpriteIDFieldNumber;
#endif  // !_MSC_VER

stSpriteFollowMaster::stSpriteFollowMaster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSpriteFollowMaster::InitAsDefaultInstance() {
}

stSpriteFollowMaster::stSpriteFollowMaster(const stSpriteFollowMaster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSpriteFollowMaster::SharedCtor() {
  _cached_size_ = 0;
  spriteid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSpriteFollowMaster::~stSpriteFollowMaster() {
  SharedDtor();
}

void stSpriteFollowMaster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSpriteFollowMaster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSpriteFollowMaster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteFollowMaster_descriptor_;
}

const stSpriteFollowMaster& stSpriteFollowMaster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSpriteFollowMaster* stSpriteFollowMaster::default_instance_ = NULL;

stSpriteFollowMaster* stSpriteFollowMaster::New() const {
  return new stSpriteFollowMaster;
}

void stSpriteFollowMaster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spriteid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSpriteFollowMaster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spriteID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSpriteFollowMaster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spriteid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSpriteFollowMaster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spriteid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSpriteFollowMaster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spriteID = 1;
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spriteid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSpriteFollowMaster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSpriteFollowMaster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSpriteFollowMaster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSpriteFollowMaster::MergeFrom(const stSpriteFollowMaster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSpriteFollowMaster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSpriteFollowMaster::CopyFrom(const stSpriteFollowMaster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSpriteFollowMaster::IsInitialized() const {

  return true;
}

void stSpriteFollowMaster::Swap(stSpriteFollowMaster* other) {
  if (other != this) {
    std::swap(spriteid_, other->spriteid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSpriteFollowMaster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSpriteFollowMaster_descriptor_;
  metadata.reflection = stSpriteFollowMaster_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSpriteFollowMasterResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteFollowMasterResult_eResult_descriptor_;
}
bool stSpriteFollowMasterResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteFollowMasterResult_eResult stSpriteFollowMasterResult::eSucess;
const stSpriteFollowMasterResult_eResult stSpriteFollowMasterResult::eFail;
const stSpriteFollowMasterResult_eResult stSpriteFollowMasterResult::eResult_MIN;
const stSpriteFollowMasterResult_eResult stSpriteFollowMasterResult::eResult_MAX;
const int stSpriteFollowMasterResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSpriteFollowMasterResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteFollowMasterResult_ProtoModID_descriptor_;
}
bool stSpriteFollowMasterResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteFollowMasterResult_ProtoModID stSpriteFollowMasterResult::ModID;
const stSpriteFollowMasterResult_ProtoModID stSpriteFollowMasterResult::ProtoModID_MIN;
const stSpriteFollowMasterResult_ProtoModID stSpriteFollowMasterResult::ProtoModID_MAX;
const int stSpriteFollowMasterResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSpriteFollowMasterResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteFollowMasterResult_ProtoFunID_descriptor_;
}
bool stSpriteFollowMasterResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 55:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteFollowMasterResult_ProtoFunID stSpriteFollowMasterResult::FunID;
const stSpriteFollowMasterResult_ProtoFunID stSpriteFollowMasterResult::ProtoFunID_MIN;
const stSpriteFollowMasterResult_ProtoFunID stSpriteFollowMasterResult::ProtoFunID_MAX;
const int stSpriteFollowMasterResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSpriteFollowMasterResult::kResultFieldNumber;
const int stSpriteFollowMasterResult::kSpriteIDFieldNumber;
#endif  // !_MSC_VER

stSpriteFollowMasterResult::stSpriteFollowMasterResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSpriteFollowMasterResult::InitAsDefaultInstance() {
}

stSpriteFollowMasterResult::stSpriteFollowMasterResult(const stSpriteFollowMasterResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSpriteFollowMasterResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  spriteid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSpriteFollowMasterResult::~stSpriteFollowMasterResult() {
  SharedDtor();
}

void stSpriteFollowMasterResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSpriteFollowMasterResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSpriteFollowMasterResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteFollowMasterResult_descriptor_;
}

const stSpriteFollowMasterResult& stSpriteFollowMasterResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSpriteFollowMasterResult* stSpriteFollowMasterResult::default_instance_ = NULL;

stSpriteFollowMasterResult* stSpriteFollowMasterResult::New() const {
  return new stSpriteFollowMasterResult;
}

void stSpriteFollowMasterResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    spriteid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSpriteFollowMasterResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stSpriteFollowMasterResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stSpriteFollowMasterResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stSpriteFollowMasterResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_spriteID;
        break;
      }

      // optional uint32 spriteID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_spriteID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSpriteFollowMasterResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stSpriteFollowMasterResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 spriteID = 2;
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->spriteid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSpriteFollowMasterResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stSpriteFollowMasterResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 spriteID = 2;
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->spriteid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSpriteFollowMasterResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stSpriteFollowMasterResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 spriteID = 2;
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spriteid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSpriteFollowMasterResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSpriteFollowMasterResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSpriteFollowMasterResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSpriteFollowMasterResult::MergeFrom(const stSpriteFollowMasterResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSpriteFollowMasterResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSpriteFollowMasterResult::CopyFrom(const stSpriteFollowMasterResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSpriteFollowMasterResult::IsInitialized() const {

  return true;
}

void stSpriteFollowMasterResult::Swap(stSpriteFollowMasterResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(spriteid_, other->spriteid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSpriteFollowMasterResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSpriteFollowMasterResult_descriptor_;
  metadata.reflection = stSpriteFollowMasterResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAvaibleActivity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAvaibleActivity_ProtoModID_descriptor_;
}
bool stReqAvaibleActivity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAvaibleActivity_ProtoModID stReqAvaibleActivity::ModID;
const stReqAvaibleActivity_ProtoModID stReqAvaibleActivity::ProtoModID_MIN;
const stReqAvaibleActivity_ProtoModID stReqAvaibleActivity::ProtoModID_MAX;
const int stReqAvaibleActivity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAvaibleActivity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAvaibleActivity_ProtoFunID_descriptor_;
}
bool stReqAvaibleActivity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 56:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAvaibleActivity_ProtoFunID stReqAvaibleActivity::FunID;
const stReqAvaibleActivity_ProtoFunID stReqAvaibleActivity::ProtoFunID_MIN;
const stReqAvaibleActivity_ProtoFunID stReqAvaibleActivity::ProtoFunID_MAX;
const int stReqAvaibleActivity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAvaibleActivity::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqAvaibleActivity::stReqAvaibleActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAvaibleActivity::InitAsDefaultInstance() {
}

stReqAvaibleActivity::stReqAvaibleActivity(const stReqAvaibleActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAvaibleActivity::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAvaibleActivity::~stReqAvaibleActivity() {
  SharedDtor();
}

void stReqAvaibleActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAvaibleActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAvaibleActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAvaibleActivity_descriptor_;
}

const stReqAvaibleActivity& stReqAvaibleActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqAvaibleActivity* stReqAvaibleActivity::default_instance_ = NULL;

stReqAvaibleActivity* stReqAvaibleActivity::New() const {
  return new stReqAvaibleActivity;
}

void stReqAvaibleActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAvaibleActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAvaibleActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAvaibleActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAvaibleActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAvaibleActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAvaibleActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAvaibleActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAvaibleActivity::MergeFrom(const stReqAvaibleActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAvaibleActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAvaibleActivity::CopyFrom(const stReqAvaibleActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAvaibleActivity::IsInitialized() const {

  return true;
}

void stReqAvaibleActivity::Swap(stReqAvaibleActivity* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAvaibleActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAvaibleActivity_descriptor_;
  metadata.reflection = stReqAvaibleActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynActivityStepReward::kItemIDFieldNumber;
const int stSynActivityStepReward::kNumFieldNumber;
#endif  // !_MSC_VER

stSynActivityStepReward::stSynActivityStepReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynActivityStepReward::InitAsDefaultInstance() {
}

stSynActivityStepReward::stSynActivityStepReward(const stSynActivityStepReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynActivityStepReward::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynActivityStepReward::~stSynActivityStepReward() {
  SharedDtor();
}

void stSynActivityStepReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynActivityStepReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynActivityStepReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynActivityStepReward_descriptor_;
}

const stSynActivityStepReward& stSynActivityStepReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynActivityStepReward* stSynActivityStepReward::default_instance_ = NULL;

stSynActivityStepReward* stSynActivityStepReward::New() const {
  return new stSynActivityStepReward;
}

void stSynActivityStepReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynActivityStepReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynActivityStepReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynActivityStepReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynActivityStepReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynActivityStepReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynActivityStepReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynActivityStepReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynActivityStepReward::MergeFrom(const stSynActivityStepReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynActivityStepReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynActivityStepReward::CopyFrom(const stSynActivityStepReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynActivityStepReward::IsInitialized() const {

  return true;
}

void stSynActivityStepReward::Swap(stSynActivityStepReward* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynActivityStepReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynActivityStepReward_descriptor_;
  metadata.reflection = stSynActivityStepReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynActivityStepOptionalReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

stSynActivityStepOptionalReward::stSynActivityStepOptionalReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynActivityStepOptionalReward::InitAsDefaultInstance() {
}

stSynActivityStepOptionalReward::stSynActivityStepOptionalReward(const stSynActivityStepOptionalReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynActivityStepOptionalReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynActivityStepOptionalReward::~stSynActivityStepOptionalReward() {
  SharedDtor();
}

void stSynActivityStepOptionalReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynActivityStepOptionalReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynActivityStepOptionalReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynActivityStepOptionalReward_descriptor_;
}

const stSynActivityStepOptionalReward& stSynActivityStepOptionalReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynActivityStepOptionalReward* stSynActivityStepOptionalReward::default_instance_ = NULL;

stSynActivityStepOptionalReward* stSynActivityStepOptionalReward::New() const {
  return new stSynActivityStepOptionalReward;
}

void stSynActivityStepOptionalReward::Clear() {
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynActivityStepOptionalReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stSynActivityStepReward rewards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynActivityStepOptionalReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stSynActivityStepReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynActivityStepOptionalReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stSynActivityStepReward rewards = 1;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynActivityStepOptionalReward::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stSynActivityStepReward rewards = 1;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynActivityStepOptionalReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynActivityStepOptionalReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynActivityStepOptionalReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynActivityStepOptionalReward::MergeFrom(const stSynActivityStepOptionalReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynActivityStepOptionalReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynActivityStepOptionalReward::CopyFrom(const stSynActivityStepOptionalReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynActivityStepOptionalReward::IsInitialized() const {

  return true;
}

void stSynActivityStepOptionalReward::Swap(stSynActivityStepOptionalReward* other) {
  if (other != this) {
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynActivityStepOptionalReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynActivityStepOptionalReward_descriptor_;
  metadata.reflection = stSynActivityStepOptionalReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynActivityStepInfo::kStepIDFieldNumber;
const int stSynActivityStepInfo::kStepDescFieldNumber;
const int stSynActivityStepInfo::kOptionalsFieldNumber;
#endif  // !_MSC_VER

stSynActivityStepInfo::stSynActivityStepInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynActivityStepInfo::InitAsDefaultInstance() {
}

stSynActivityStepInfo::stSynActivityStepInfo(const stSynActivityStepInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynActivityStepInfo::SharedCtor() {
  _cached_size_ = 0;
  stepid_ = 0u;
  stepdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynActivityStepInfo::~stSynActivityStepInfo() {
  SharedDtor();
}

void stSynActivityStepInfo::SharedDtor() {
  if (stepdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete stepdesc_;
  }
  if (this != default_instance_) {
  }
}

void stSynActivityStepInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynActivityStepInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynActivityStepInfo_descriptor_;
}

const stSynActivityStepInfo& stSynActivityStepInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynActivityStepInfo* stSynActivityStepInfo::default_instance_ = NULL;

stSynActivityStepInfo* stSynActivityStepInfo::New() const {
  return new stSynActivityStepInfo;
}

void stSynActivityStepInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stepid_ = 0u;
    if (has_stepdesc()) {
      if (stepdesc_ != &::google::protobuf::internal::kEmptyString) {
        stepdesc_->clear();
      }
    }
  }
  optionals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynActivityStepInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stepID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stepDesc;
        break;
      }

      // optional string stepDesc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stepDesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stepdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stepdesc().data(), this->stepdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_optionals;
        break;
      }

      // repeated .MiscProto.stSynActivityStepOptionalReward optionals = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optionals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optionals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_optionals;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynActivityStepInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 stepID = 1;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stepid(), output);
  }

  // optional string stepDesc = 2;
  if (has_stepdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stepdesc().data(), this->stepdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->stepdesc(), output);
  }

  // repeated .MiscProto.stSynActivityStepOptionalReward optionals = 3;
  for (int i = 0; i < this->optionals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->optionals(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynActivityStepInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 stepID = 1;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stepid(), target);
  }

  // optional string stepDesc = 2;
  if (has_stepdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stepdesc().data(), this->stepdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stepdesc(), target);
  }

  // repeated .MiscProto.stSynActivityStepOptionalReward optionals = 3;
  for (int i = 0; i < this->optionals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->optionals(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynActivityStepInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 stepID = 1;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional string stepDesc = 2;
    if (has_stepdesc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stepdesc());
    }

  }
  // repeated .MiscProto.stSynActivityStepOptionalReward optionals = 3;
  total_size += 1 * this->optionals_size();
  for (int i = 0; i < this->optionals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optionals(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynActivityStepInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynActivityStepInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynActivityStepInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynActivityStepInfo::MergeFrom(const stSynActivityStepInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  optionals_.MergeFrom(from.optionals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_stepdesc()) {
      set_stepdesc(from.stepdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynActivityStepInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynActivityStepInfo::CopyFrom(const stSynActivityStepInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynActivityStepInfo::IsInitialized() const {

  return true;
}

void stSynActivityStepInfo::Swap(stSynActivityStepInfo* other) {
  if (other != this) {
    std::swap(stepid_, other->stepid_);
    std::swap(stepdesc_, other->stepdesc_);
    optionals_.Swap(&other->optionals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynActivityStepInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynActivityStepInfo_descriptor_;
  metadata.reflection = stSynActivityStepInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynActivityInfo::kIdFieldNumber;
const int stSynActivityInfo::kTypeFieldNumber;
const int stSynActivityInfo::kTitleFieldNumber;
const int stSynActivityInfo::kDescFieldNumber;
const int stSynActivityInfo::kCurValFieldNumber;
const int stSynActivityInfo::kFinishStepFieldNumber;
const int stSynActivityInfo::kAvaibleStepFieldNumber;
#endif  // !_MSC_VER

stSynActivityInfo::stSynActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynActivityInfo::InitAsDefaultInstance() {
}

stSynActivityInfo::stSynActivityInfo(const stSynActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  curval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynActivityInfo::~stSynActivityInfo() {
  SharedDtor();
}

void stSynActivityInfo::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void stSynActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynActivityInfo_descriptor_;
}

const stSynActivityInfo& stSynActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynActivityInfo* stSynActivityInfo::default_instance_ = NULL;

stSynActivityInfo* stSynActivityInfo::New() const {
  return new stSynActivityInfo;
}

void stSynActivityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    curval_ = 0u;
  }
  finishstep_.Clear();
  avaiblestep_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_title;
        break;
      }

      // optional string title = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // optional string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curVal;
        break;
      }

      // optional uint32 curVal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curval_)));
          set_has_curval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_finishStep;
        break;
      }

      // repeated uint32 finishStep = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishStep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_finishstep())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_finishstep())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_finishStep;
        if (input->ExpectTag(58)) goto parse_avaibleStep;
        break;
      }

      // repeated .MiscProto.stSynActivityStepInfo avaibleStep = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avaibleStep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_avaiblestep()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_avaibleStep;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->title(), output);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }

  // optional uint32 curVal = 5;
  if (has_curval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curval(), output);
  }

  // repeated uint32 finishStep = 6;
  for (int i = 0; i < this->finishstep_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->finishstep(i), output);
  }

  // repeated .MiscProto.stSynActivityStepInfo avaibleStep = 7;
  for (int i = 0; i < this->avaiblestep_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->avaiblestep(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional string title = 3;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->title(), target);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // optional uint32 curVal = 5;
  if (has_curval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curval(), target);
  }

  // repeated uint32 finishStep = 6;
  for (int i = 0; i < this->finishstep_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->finishstep(i), target);
  }

  // repeated .MiscProto.stSynActivityStepInfo avaibleStep = 7;
  for (int i = 0; i < this->avaiblestep_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->avaiblestep(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynActivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional string title = 3;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 curVal = 5;
    if (has_curval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curval());
    }

  }
  // repeated uint32 finishStep = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->finishstep_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->finishstep(i));
    }
    total_size += 1 * this->finishstep_size() + data_size;
  }

  // repeated .MiscProto.stSynActivityStepInfo avaibleStep = 7;
  total_size += 1 * this->avaiblestep_size();
  for (int i = 0; i < this->avaiblestep_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->avaiblestep(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynActivityInfo::MergeFrom(const stSynActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  finishstep_.MergeFrom(from.finishstep_);
  avaiblestep_.MergeFrom(from.avaiblestep_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_curval()) {
      set_curval(from.curval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynActivityInfo::CopyFrom(const stSynActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynActivityInfo::IsInitialized() const {

  return true;
}

void stSynActivityInfo::Swap(stSynActivityInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(title_, other->title_);
    std::swap(desc_, other->desc_);
    std::swap(curval_, other->curval_);
    finishstep_.Swap(&other->finishstep_);
    avaiblestep_.Swap(&other->avaiblestep_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynActivityInfo_descriptor_;
  metadata.reflection = stSynActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetAvaibleActivity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAvaibleActivity_ProtoModID_descriptor_;
}
bool stRetAvaibleActivity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetAvaibleActivity_ProtoModID stRetAvaibleActivity::ModID;
const stRetAvaibleActivity_ProtoModID stRetAvaibleActivity::ProtoModID_MIN;
const stRetAvaibleActivity_ProtoModID stRetAvaibleActivity::ProtoModID_MAX;
const int stRetAvaibleActivity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetAvaibleActivity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAvaibleActivity_ProtoFunID_descriptor_;
}
bool stRetAvaibleActivity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 57:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetAvaibleActivity_ProtoFunID stRetAvaibleActivity::FunID;
const stRetAvaibleActivity_ProtoFunID stRetAvaibleActivity::ProtoFunID_MIN;
const stRetAvaibleActivity_ProtoFunID stRetAvaibleActivity::ProtoFunID_MAX;
const int stRetAvaibleActivity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetAvaibleActivity::kActivitiesFieldNumber;
#endif  // !_MSC_VER

stRetAvaibleActivity::stRetAvaibleActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetAvaibleActivity::InitAsDefaultInstance() {
}

stRetAvaibleActivity::stRetAvaibleActivity(const stRetAvaibleActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetAvaibleActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetAvaibleActivity::~stRetAvaibleActivity() {
  SharedDtor();
}

void stRetAvaibleActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetAvaibleActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetAvaibleActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAvaibleActivity_descriptor_;
}

const stRetAvaibleActivity& stRetAvaibleActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetAvaibleActivity* stRetAvaibleActivity::default_instance_ = NULL;

stRetAvaibleActivity* stRetAvaibleActivity::New() const {
  return new stRetAvaibleActivity;
}

void stRetAvaibleActivity::Clear() {
  activities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetAvaibleActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stSynActivityInfo activities = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activities;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetAvaibleActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stSynActivityInfo activities = 1;
  for (int i = 0; i < this->activities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activities(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetAvaibleActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stSynActivityInfo activities = 1;
  for (int i = 0; i < this->activities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activities(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetAvaibleActivity::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stSynActivityInfo activities = 1;
  total_size += 1 * this->activities_size();
  for (int i = 0; i < this->activities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activities(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetAvaibleActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetAvaibleActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetAvaibleActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetAvaibleActivity::MergeFrom(const stRetAvaibleActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  activities_.MergeFrom(from.activities_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetAvaibleActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetAvaibleActivity::CopyFrom(const stRetAvaibleActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetAvaibleActivity::IsInitialized() const {

  return true;
}

void stRetAvaibleActivity::Swap(stRetAvaibleActivity* other) {
  if (other != this) {
    activities_.Swap(&other->activities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetAvaibleActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetAvaibleActivity_descriptor_;
  metadata.reflection = stRetAvaibleActivity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAcitivityReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAcitivityReward_ProtoModID_descriptor_;
}
bool stReqAcitivityReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAcitivityReward_ProtoModID stReqAcitivityReward::ModID;
const stReqAcitivityReward_ProtoModID stReqAcitivityReward::ProtoModID_MIN;
const stReqAcitivityReward_ProtoModID stReqAcitivityReward::ProtoModID_MAX;
const int stReqAcitivityReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAcitivityReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAcitivityReward_ProtoFunID_descriptor_;
}
bool stReqAcitivityReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 58:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAcitivityReward_ProtoFunID stReqAcitivityReward::FunID;
const stReqAcitivityReward_ProtoFunID stReqAcitivityReward::ProtoFunID_MIN;
const stReqAcitivityReward_ProtoFunID stReqAcitivityReward::ProtoFunID_MAX;
const int stReqAcitivityReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAcitivityReward::kIdFieldNumber;
const int stReqAcitivityReward::kStepIDFieldNumber;
const int stReqAcitivityReward::kSelIndexFieldNumber;
#endif  // !_MSC_VER

stReqAcitivityReward::stReqAcitivityReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAcitivityReward::InitAsDefaultInstance() {
}

stReqAcitivityReward::stReqAcitivityReward(const stReqAcitivityReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAcitivityReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  stepid_ = 0u;
  selindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAcitivityReward::~stReqAcitivityReward() {
  SharedDtor();
}

void stReqAcitivityReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAcitivityReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAcitivityReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAcitivityReward_descriptor_;
}

const stReqAcitivityReward& stReqAcitivityReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqAcitivityReward* stReqAcitivityReward::default_instance_ = NULL;

stReqAcitivityReward* stReqAcitivityReward::New() const {
  return new stReqAcitivityReward;
}

void stReqAcitivityReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    stepid_ = 0u;
    selindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAcitivityReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_selIndex;
        break;
      }

      // optional uint32 selIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &selindex_)));
          set_has_selindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAcitivityReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stepid(), output);
  }

  // optional uint32 selIndex = 3;
  if (has_selindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->selindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAcitivityReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stepid(), target);
  }

  // optional uint32 selIndex = 3;
  if (has_selindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->selindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAcitivityReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 stepID = 2;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional uint32 selIndex = 3;
    if (has_selindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->selindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAcitivityReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAcitivityReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAcitivityReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAcitivityReward::MergeFrom(const stReqAcitivityReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_selindex()) {
      set_selindex(from.selindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAcitivityReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAcitivityReward::CopyFrom(const stReqAcitivityReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAcitivityReward::IsInitialized() const {

  return true;
}

void stReqAcitivityReward::Swap(stReqAcitivityReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stepid_, other->stepid_);
    std::swap(selindex_, other->selindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAcitivityReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAcitivityReward_descriptor_;
  metadata.reflection = stReqAcitivityReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stActivityRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityRewardResult_eResult_descriptor_;
}
bool stActivityRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActivityRewardResult_eResult stActivityRewardResult::eSuccess;
const stActivityRewardResult_eResult stActivityRewardResult::eHas_Got_Reward;
const stActivityRewardResult_eResult stActivityRewardResult::eCond_Not_Meet;
const stActivityRewardResult_eResult stActivityRewardResult::eSelect_Not_Exist;
const stActivityRewardResult_eResult stActivityRewardResult::eBag_Full;
const stActivityRewardResult_eResult stActivityRewardResult::eResult_MIN;
const stActivityRewardResult_eResult stActivityRewardResult::eResult_MAX;
const int stActivityRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stActivityRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityRewardResult_ProtoModID_descriptor_;
}
bool stActivityRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActivityRewardResult_ProtoModID stActivityRewardResult::ModID;
const stActivityRewardResult_ProtoModID stActivityRewardResult::ProtoModID_MIN;
const stActivityRewardResult_ProtoModID stActivityRewardResult::ProtoModID_MAX;
const int stActivityRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stActivityRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityRewardResult_ProtoFunID_descriptor_;
}
bool stActivityRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 59:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActivityRewardResult_ProtoFunID stActivityRewardResult::FunID;
const stActivityRewardResult_ProtoFunID stActivityRewardResult::ProtoFunID_MIN;
const stActivityRewardResult_ProtoFunID stActivityRewardResult::ProtoFunID_MAX;
const int stActivityRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stActivityRewardResult::kIdFieldNumber;
const int stActivityRewardResult::kStepIDFieldNumber;
const int stActivityRewardResult::kResultFieldNumber;
#endif  // !_MSC_VER

stActivityRewardResult::stActivityRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stActivityRewardResult::InitAsDefaultInstance() {
}

stActivityRewardResult::stActivityRewardResult(const stActivityRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stActivityRewardResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  stepid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stActivityRewardResult::~stActivityRewardResult() {
  SharedDtor();
}

void stActivityRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stActivityRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stActivityRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityRewardResult_descriptor_;
}

const stActivityRewardResult& stActivityRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stActivityRewardResult* stActivityRewardResult::default_instance_ = NULL;

stActivityRewardResult* stActivityRewardResult::New() const {
  return new stActivityRewardResult;
}

void stActivityRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    stepid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stActivityRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .MiscProto.stActivityRewardResult.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stActivityRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stActivityRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stActivityRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stepid(), output);
  }

  // optional .MiscProto.stActivityRewardResult.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stActivityRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stepid(), target);
  }

  // optional .MiscProto.stActivityRewardResult.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stActivityRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 stepID = 2;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional .MiscProto.stActivityRewardResult.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stActivityRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stActivityRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stActivityRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stActivityRewardResult::MergeFrom(const stActivityRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stActivityRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stActivityRewardResult::CopyFrom(const stActivityRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stActivityRewardResult::IsInitialized() const {

  return true;
}

void stActivityRewardResult::Swap(stActivityRewardResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(stepid_, other->stepid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stActivityRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stActivityRewardResult_descriptor_;
  metadata.reflection = stActivityRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqWorldBossDamageRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWorldBossDamageRank_ProtoModID_descriptor_;
}
bool stReqWorldBossDamageRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqWorldBossDamageRank_ProtoModID stReqWorldBossDamageRank::ModID;
const stReqWorldBossDamageRank_ProtoModID stReqWorldBossDamageRank::ProtoModID_MIN;
const stReqWorldBossDamageRank_ProtoModID stReqWorldBossDamageRank::ProtoModID_MAX;
const int stReqWorldBossDamageRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqWorldBossDamageRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWorldBossDamageRank_ProtoFunID_descriptor_;
}
bool stReqWorldBossDamageRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 60:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqWorldBossDamageRank_ProtoFunID stReqWorldBossDamageRank::FunID;
const stReqWorldBossDamageRank_ProtoFunID stReqWorldBossDamageRank::ProtoFunID_MIN;
const stReqWorldBossDamageRank_ProtoFunID stReqWorldBossDamageRank::ProtoFunID_MAX;
const int stReqWorldBossDamageRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqWorldBossDamageRank::kFromRankFieldNumber;
#endif  // !_MSC_VER

stReqWorldBossDamageRank::stReqWorldBossDamageRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqWorldBossDamageRank::InitAsDefaultInstance() {
}

stReqWorldBossDamageRank::stReqWorldBossDamageRank(const stReqWorldBossDamageRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqWorldBossDamageRank::SharedCtor() {
  _cached_size_ = 0;
  fromrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqWorldBossDamageRank::~stReqWorldBossDamageRank() {
  SharedDtor();
}

void stReqWorldBossDamageRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqWorldBossDamageRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqWorldBossDamageRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWorldBossDamageRank_descriptor_;
}

const stReqWorldBossDamageRank& stReqWorldBossDamageRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqWorldBossDamageRank* stReqWorldBossDamageRank::default_instance_ = NULL;

stReqWorldBossDamageRank* stReqWorldBossDamageRank::New() const {
  return new stReqWorldBossDamageRank;
}

void stReqWorldBossDamageRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqWorldBossDamageRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 fromRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromrank_)));
          set_has_fromrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqWorldBossDamageRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fromrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqWorldBossDamageRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 fromRank = 1;
  if (has_fromrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fromrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqWorldBossDamageRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 fromRank = 1;
    if (has_fromrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqWorldBossDamageRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqWorldBossDamageRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqWorldBossDamageRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqWorldBossDamageRank::MergeFrom(const stReqWorldBossDamageRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromrank()) {
      set_fromrank(from.fromrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqWorldBossDamageRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqWorldBossDamageRank::CopyFrom(const stReqWorldBossDamageRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqWorldBossDamageRank::IsInitialized() const {

  return true;
}

void stReqWorldBossDamageRank::Swap(stReqWorldBossDamageRank* other) {
  if (other != this) {
    std::swap(fromrank_, other->fromrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqWorldBossDamageRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqWorldBossDamageRank_descriptor_;
  metadata.reflection = stReqWorldBossDamageRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stWorldBossDamageSortItem::kCharIDFieldNumber;
const int stWorldBossDamageSortItem::kNameFieldNumber;
const int stWorldBossDamageSortItem::kJobFieldNumber;
const int stWorldBossDamageSortItem::kSexFieldNumber;
const int stWorldBossDamageSortItem::kDamageFieldNumber;
const int stWorldBossDamageSortItem::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stWorldBossDamageSortItem::stWorldBossDamageSortItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWorldBossDamageSortItem::InitAsDefaultInstance() {
}

stWorldBossDamageSortItem::stWorldBossDamageSortItem(const stWorldBossDamageSortItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWorldBossDamageSortItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  damage_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWorldBossDamageSortItem::~stWorldBossDamageSortItem() {
  SharedDtor();
}

void stWorldBossDamageSortItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stWorldBossDamageSortItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWorldBossDamageSortItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorldBossDamageSortItem_descriptor_;
}

const stWorldBossDamageSortItem& stWorldBossDamageSortItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stWorldBossDamageSortItem* stWorldBossDamageSortItem::default_instance_ = NULL;

stWorldBossDamageSortItem* stWorldBossDamageSortItem::New() const {
  return new stWorldBossDamageSortItem;
}

void stWorldBossDamageSortItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    damage_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWorldBossDamageSortItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stWorldBossDamageSortItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 damage = 5;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->damage(), output);
  }

  // optional uint32 photoID = 6;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWorldBossDamageSortItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 damage = 5;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->damage(), target);
  }

  // optional uint32 photoID = 6;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWorldBossDamageSortItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 damage = 5;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 photoID = 6;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWorldBossDamageSortItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWorldBossDamageSortItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWorldBossDamageSortItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWorldBossDamageSortItem::MergeFrom(const stWorldBossDamageSortItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWorldBossDamageSortItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWorldBossDamageSortItem::CopyFrom(const stWorldBossDamageSortItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWorldBossDamageSortItem::IsInitialized() const {

  return true;
}

void stWorldBossDamageSortItem::Swap(stWorldBossDamageSortItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(damage_, other->damage_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWorldBossDamageSortItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWorldBossDamageSortItem_descriptor_;
  metadata.reflection = stWorldBossDamageSortItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetWorldBossDamageRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetWorldBossDamageRank_ProtoModID_descriptor_;
}
bool stRetWorldBossDamageRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetWorldBossDamageRank_ProtoModID stRetWorldBossDamageRank::ModID;
const stRetWorldBossDamageRank_ProtoModID stRetWorldBossDamageRank::ProtoModID_MIN;
const stRetWorldBossDamageRank_ProtoModID stRetWorldBossDamageRank::ProtoModID_MAX;
const int stRetWorldBossDamageRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetWorldBossDamageRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetWorldBossDamageRank_ProtoFunID_descriptor_;
}
bool stRetWorldBossDamageRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 61:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetWorldBossDamageRank_ProtoFunID stRetWorldBossDamageRank::FunID;
const stRetWorldBossDamageRank_ProtoFunID stRetWorldBossDamageRank::ProtoFunID_MIN;
const stRetWorldBossDamageRank_ProtoFunID stRetWorldBossDamageRank::ProtoFunID_MAX;
const int stRetWorldBossDamageRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetWorldBossDamageRank::kSortItemFieldNumber;
const int stRetWorldBossDamageRank::kFromRankFieldNumber;
const int stRetWorldBossDamageRank::kMyRankFieldNumber;
#endif  // !_MSC_VER

stRetWorldBossDamageRank::stRetWorldBossDamageRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetWorldBossDamageRank::InitAsDefaultInstance() {
}

stRetWorldBossDamageRank::stRetWorldBossDamageRank(const stRetWorldBossDamageRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetWorldBossDamageRank::SharedCtor() {
  _cached_size_ = 0;
  fromrank_ = 0u;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetWorldBossDamageRank::~stRetWorldBossDamageRank() {
  SharedDtor();
}

void stRetWorldBossDamageRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetWorldBossDamageRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetWorldBossDamageRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetWorldBossDamageRank_descriptor_;
}

const stRetWorldBossDamageRank& stRetWorldBossDamageRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetWorldBossDamageRank* stRetWorldBossDamageRank::default_instance_ = NULL;

stRetWorldBossDamageRank* stRetWorldBossDamageRank::New() const {
  return new stRetWorldBossDamageRank;
}

void stRetWorldBossDamageRank::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    fromrank_ = 0u;
    myrank_ = 0u;
  }
  sortitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetWorldBossDamageRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stWorldBossDamageSortItem sortItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sortItem;
        if (input->ExpectTag(16)) goto parse_fromRank;
        break;
      }

      // optional uint32 fromRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fromrank_)));
          set_has_fromrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetWorldBossDamageRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stWorldBossDamageSortItem sortItem = 1;
  for (int i = 0; i < this->sortitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sortitem(i), output);
  }

  // optional uint32 fromRank = 2;
  if (has_fromrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fromrank(), output);
  }

  // optional uint32 myRank = 3;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetWorldBossDamageRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stWorldBossDamageSortItem sortItem = 1;
  for (int i = 0; i < this->sortitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sortitem(i), target);
  }

  // optional uint32 fromRank = 2;
  if (has_fromrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fromrank(), target);
  }

  // optional uint32 myRank = 3;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetWorldBossDamageRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 fromRank = 2;
    if (has_fromrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fromrank());
    }

    // optional uint32 myRank = 3;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .MiscProto.stWorldBossDamageSortItem sortItem = 1;
  total_size += 1 * this->sortitem_size();
  for (int i = 0; i < this->sortitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetWorldBossDamageRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetWorldBossDamageRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetWorldBossDamageRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetWorldBossDamageRank::MergeFrom(const stRetWorldBossDamageRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortitem_.MergeFrom(from.sortitem_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fromrank()) {
      set_fromrank(from.fromrank());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetWorldBossDamageRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetWorldBossDamageRank::CopyFrom(const stRetWorldBossDamageRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetWorldBossDamageRank::IsInitialized() const {

  return true;
}

void stRetWorldBossDamageRank::Swap(stRetWorldBossDamageRank* other) {
  if (other != this) {
    sortitem_.Swap(&other->sortitem_);
    std::swap(fromrank_, other->fromrank_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetWorldBossDamageRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetWorldBossDamageRank_descriptor_;
  metadata.reflection = stRetWorldBossDamageRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenWorldBossWin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenWorldBossWin_ProtoModID_descriptor_;
}
bool stReqOpenWorldBossWin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenWorldBossWin_ProtoModID stReqOpenWorldBossWin::ModID;
const stReqOpenWorldBossWin_ProtoModID stReqOpenWorldBossWin::ProtoModID_MIN;
const stReqOpenWorldBossWin_ProtoModID stReqOpenWorldBossWin::ProtoModID_MAX;
const int stReqOpenWorldBossWin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenWorldBossWin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenWorldBossWin_ProtoFunID_descriptor_;
}
bool stReqOpenWorldBossWin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 62:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenWorldBossWin_ProtoFunID stReqOpenWorldBossWin::FunID;
const stReqOpenWorldBossWin_ProtoFunID stReqOpenWorldBossWin::ProtoFunID_MIN;
const stReqOpenWorldBossWin_ProtoFunID stReqOpenWorldBossWin::ProtoFunID_MAX;
const int stReqOpenWorldBossWin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenWorldBossWin::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenWorldBossWin::stReqOpenWorldBossWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenWorldBossWin::InitAsDefaultInstance() {
}

stReqOpenWorldBossWin::stReqOpenWorldBossWin(const stReqOpenWorldBossWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenWorldBossWin::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenWorldBossWin::~stReqOpenWorldBossWin() {
  SharedDtor();
}

void stReqOpenWorldBossWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenWorldBossWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenWorldBossWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenWorldBossWin_descriptor_;
}

const stReqOpenWorldBossWin& stReqOpenWorldBossWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqOpenWorldBossWin* stReqOpenWorldBossWin::default_instance_ = NULL;

stReqOpenWorldBossWin* stReqOpenWorldBossWin::New() const {
  return new stReqOpenWorldBossWin;
}

void stReqOpenWorldBossWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenWorldBossWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenWorldBossWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenWorldBossWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenWorldBossWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenWorldBossWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenWorldBossWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenWorldBossWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenWorldBossWin::MergeFrom(const stReqOpenWorldBossWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenWorldBossWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenWorldBossWin::CopyFrom(const stReqOpenWorldBossWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenWorldBossWin::IsInitialized() const {

  return true;
}

void stReqOpenWorldBossWin::Swap(stReqOpenWorldBossWin* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenWorldBossWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenWorldBossWin_descriptor_;
  metadata.reflection = stReqOpenWorldBossWin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetOpenWorldBossWin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOpenWorldBossWin_ProtoModID_descriptor_;
}
bool stRetOpenWorldBossWin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOpenWorldBossWin_ProtoModID stRetOpenWorldBossWin::ModID;
const stRetOpenWorldBossWin_ProtoModID stRetOpenWorldBossWin::ProtoModID_MIN;
const stRetOpenWorldBossWin_ProtoModID stRetOpenWorldBossWin::ProtoModID_MAX;
const int stRetOpenWorldBossWin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetOpenWorldBossWin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOpenWorldBossWin_ProtoFunID_descriptor_;
}
bool stRetOpenWorldBossWin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 63:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOpenWorldBossWin_ProtoFunID stRetOpenWorldBossWin::FunID;
const stRetOpenWorldBossWin_ProtoFunID stRetOpenWorldBossWin::ProtoFunID_MIN;
const stRetOpenWorldBossWin_ProtoFunID stRetOpenWorldBossWin::ProtoFunID_MAX;
const int stRetOpenWorldBossWin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetOpenWorldBossWin::kReliveRemainTimeFieldNumber;
const int stRetOpenWorldBossWin::kBuyNumFieldNumber;
const int stRetOpenWorldBossWin::kBeginTimeFieldNumber;
const int stRetOpenWorldBossWin::kEndTimeFieldNumber;
const int stRetOpenWorldBossWin::kBossIDFieldNumber;
const int stRetOpenWorldBossWin::kHpFieldNumber;
const int stRetOpenWorldBossWin::kStepIDFieldNumber;
const int stRetOpenWorldBossWin::kTomorrowFieldNumber;
const int stRetOpenWorldBossWin::kKillerNameFieldNumber;
#endif  // !_MSC_VER

stRetOpenWorldBossWin::stRetOpenWorldBossWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetOpenWorldBossWin::InitAsDefaultInstance() {
}

stRetOpenWorldBossWin::stRetOpenWorldBossWin(const stRetOpenWorldBossWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetOpenWorldBossWin::SharedCtor() {
  _cached_size_ = 0;
  reliveremaintime_ = 0u;
  buynum_ = 0u;
  begintime_ = 0u;
  endtime_ = 0u;
  bossid_ = 0u;
  hp_ = 0u;
  stepid_ = 0u;
  tomorrow_ = false;
  killername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetOpenWorldBossWin::~stRetOpenWorldBossWin() {
  SharedDtor();
}

void stRetOpenWorldBossWin::SharedDtor() {
  if (killername_ != &::google::protobuf::internal::kEmptyString) {
    delete killername_;
  }
  if (this != default_instance_) {
  }
}

void stRetOpenWorldBossWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetOpenWorldBossWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOpenWorldBossWin_descriptor_;
}

const stRetOpenWorldBossWin& stRetOpenWorldBossWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetOpenWorldBossWin* stRetOpenWorldBossWin::default_instance_ = NULL;

stRetOpenWorldBossWin* stRetOpenWorldBossWin::New() const {
  return new stRetOpenWorldBossWin;
}

void stRetOpenWorldBossWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reliveremaintime_ = 0u;
    buynum_ = 0u;
    begintime_ = 0u;
    endtime_ = 0u;
    bossid_ = 0u;
    hp_ = 0u;
    stepid_ = 0u;
    tomorrow_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_killername()) {
      if (killername_ != &::google::protobuf::internal::kEmptyString) {
        killername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetOpenWorldBossWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 reliveRemainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reliveremaintime_)));
          set_has_reliveremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buyNum;
        break;
      }

      // optional uint32 buyNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beginTime;
        break;
      }

      // optional uint32 beginTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endTime;
        break;
      }

      // optional uint32 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bossID;
        break;
      }

      // optional uint32 bossID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_tomorrow;
        break;
      }

      // optional bool tomorrow = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tomorrow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tomorrow_)));
          set_has_tomorrow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_killerName;
        break;
      }

      // optional string killerName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killername().data(), this->killername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetOpenWorldBossWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 reliveRemainTime = 1;
  if (has_reliveremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->reliveremaintime(), output);
  }

  // optional uint32 buyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  // optional uint32 beginTime = 3;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begintime(), output);
  }

  // optional uint32 endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }

  // optional uint32 bossID = 5;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bossid(), output);
  }

  // optional uint32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->hp(), output);
  }

  // optional uint32 stepID = 7;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->stepid(), output);
  }

  // optional bool tomorrow = 8;
  if (has_tomorrow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->tomorrow(), output);
  }

  // optional string killerName = 9;
  if (has_killername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killername().data(), this->killername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->killername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetOpenWorldBossWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 reliveRemainTime = 1;
  if (has_reliveremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->reliveremaintime(), target);
  }

  // optional uint32 buyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  // optional uint32 beginTime = 3;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begintime(), target);
  }

  // optional uint32 endTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endtime(), target);
  }

  // optional uint32 bossID = 5;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bossid(), target);
  }

  // optional uint32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->hp(), target);
  }

  // optional uint32 stepID = 7;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->stepid(), target);
  }

  // optional bool tomorrow = 8;
  if (has_tomorrow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->tomorrow(), target);
  }

  // optional string killerName = 9;
  if (has_killername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killername().data(), this->killername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->killername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetOpenWorldBossWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 reliveRemainTime = 1;
    if (has_reliveremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reliveremaintime());
    }

    // optional uint32 buyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

    // optional uint32 beginTime = 3;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // optional uint32 endTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 bossID = 5;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

    // optional uint32 stepID = 7;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional bool tomorrow = 8;
    if (has_tomorrow()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string killerName = 9;
    if (has_killername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetOpenWorldBossWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetOpenWorldBossWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetOpenWorldBossWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetOpenWorldBossWin::MergeFrom(const stRetOpenWorldBossWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reliveremaintime()) {
      set_reliveremaintime(from.reliveremaintime());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_tomorrow()) {
      set_tomorrow(from.tomorrow());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_killername()) {
      set_killername(from.killername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetOpenWorldBossWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetOpenWorldBossWin::CopyFrom(const stRetOpenWorldBossWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetOpenWorldBossWin::IsInitialized() const {

  return true;
}

void stRetOpenWorldBossWin::Swap(stRetOpenWorldBossWin* other) {
  if (other != this) {
    std::swap(reliveremaintime_, other->reliveremaintime_);
    std::swap(buynum_, other->buynum_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(bossid_, other->bossid_);
    std::swap(hp_, other->hp_);
    std::swap(stepid_, other->stepid_);
    std::swap(tomorrow_, other->tomorrow_);
    std::swap(killername_, other->killername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetOpenWorldBossWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetOpenWorldBossWin_descriptor_;
  metadata.reflection = stRetOpenWorldBossWin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBossWorldMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBossWorldMatch_ProtoModID_descriptor_;
}
bool stReqBossWorldMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBossWorldMatch_ProtoModID stReqBossWorldMatch::ModID;
const stReqBossWorldMatch_ProtoModID stReqBossWorldMatch::ProtoModID_MIN;
const stReqBossWorldMatch_ProtoModID stReqBossWorldMatch::ProtoModID_MAX;
const int stReqBossWorldMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBossWorldMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBossWorldMatch_ProtoFunID_descriptor_;
}
bool stReqBossWorldMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 64:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBossWorldMatch_ProtoFunID stReqBossWorldMatch::FunID;
const stReqBossWorldMatch_ProtoFunID stReqBossWorldMatch::ProtoFunID_MIN;
const stReqBossWorldMatch_ProtoFunID stReqBossWorldMatch::ProtoFunID_MAX;
const int stReqBossWorldMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBossWorldMatch::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqBossWorldMatch::stReqBossWorldMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBossWorldMatch::InitAsDefaultInstance() {
}

stReqBossWorldMatch::stReqBossWorldMatch(const stReqBossWorldMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBossWorldMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBossWorldMatch::~stReqBossWorldMatch() {
  SharedDtor();
}

void stReqBossWorldMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBossWorldMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBossWorldMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBossWorldMatch_descriptor_;
}

const stReqBossWorldMatch& stReqBossWorldMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqBossWorldMatch* stReqBossWorldMatch::default_instance_ = NULL;

stReqBossWorldMatch* stReqBossWorldMatch::New() const {
  return new stReqBossWorldMatch;
}

void stReqBossWorldMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBossWorldMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBossWorldMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBossWorldMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBossWorldMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBossWorldMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBossWorldMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBossWorldMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBossWorldMatch::MergeFrom(const stReqBossWorldMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBossWorldMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBossWorldMatch::CopyFrom(const stReqBossWorldMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBossWorldMatch::IsInitialized() const {

  return true;
}

void stReqBossWorldMatch::Swap(stReqBossWorldMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBossWorldMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBossWorldMatch_descriptor_;
  metadata.reflection = stReqBossWorldMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetBossWorldMatch_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBossWorldMatch_eResult_descriptor_;
}
bool stRetBossWorldMatch_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetBossWorldMatch_eResult stRetBossWorldMatch::eSuccess;
const stRetBossWorldMatch_eResult stRetBossWorldMatch::eWait;
const stRetBossWorldMatch_eResult stRetBossWorldMatch::eNot_Open;
const stRetBossWorldMatch_eResult stRetBossWorldMatch::eActivity_End;
const stRetBossWorldMatch_eResult stRetBossWorldMatch::eLevel_Too_Low;
const stRetBossWorldMatch_eResult stRetBossWorldMatch::eBoss_Die;
const stRetBossWorldMatch_eResult stRetBossWorldMatch::eCool_Down;
const stRetBossWorldMatch_eResult stRetBossWorldMatch::eResult_MIN;
const stRetBossWorldMatch_eResult stRetBossWorldMatch::eResult_MAX;
const int stRetBossWorldMatch::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetBossWorldMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBossWorldMatch_ProtoModID_descriptor_;
}
bool stRetBossWorldMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetBossWorldMatch_ProtoModID stRetBossWorldMatch::ModID;
const stRetBossWorldMatch_ProtoModID stRetBossWorldMatch::ProtoModID_MIN;
const stRetBossWorldMatch_ProtoModID stRetBossWorldMatch::ProtoModID_MAX;
const int stRetBossWorldMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetBossWorldMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBossWorldMatch_ProtoFunID_descriptor_;
}
bool stRetBossWorldMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 65:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetBossWorldMatch_ProtoFunID stRetBossWorldMatch::FunID;
const stRetBossWorldMatch_ProtoFunID stRetBossWorldMatch::ProtoFunID_MIN;
const stRetBossWorldMatch_ProtoFunID stRetBossWorldMatch::ProtoFunID_MAX;
const int stRetBossWorldMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetBossWorldMatch::kResultFieldNumber;
#endif  // !_MSC_VER

stRetBossWorldMatch::stRetBossWorldMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetBossWorldMatch::InitAsDefaultInstance() {
}

stRetBossWorldMatch::stRetBossWorldMatch(const stRetBossWorldMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetBossWorldMatch::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetBossWorldMatch::~stRetBossWorldMatch() {
  SharedDtor();
}

void stRetBossWorldMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetBossWorldMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetBossWorldMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBossWorldMatch_descriptor_;
}

const stRetBossWorldMatch& stRetBossWorldMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetBossWorldMatch* stRetBossWorldMatch::default_instance_ = NULL;

stRetBossWorldMatch* stRetBossWorldMatch::New() const {
  return new stRetBossWorldMatch;
}

void stRetBossWorldMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetBossWorldMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRetBossWorldMatch.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetBossWorldMatch_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetBossWorldMatch_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetBossWorldMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRetBossWorldMatch.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetBossWorldMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRetBossWorldMatch.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetBossWorldMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRetBossWorldMatch.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetBossWorldMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetBossWorldMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetBossWorldMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetBossWorldMatch::MergeFrom(const stRetBossWorldMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetBossWorldMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetBossWorldMatch::CopyFrom(const stRetBossWorldMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetBossWorldMatch::IsInitialized() const {

  return true;
}

void stRetBossWorldMatch::Swap(stRetBossWorldMatch* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetBossWorldMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetBossWorldMatch_descriptor_;
  metadata.reflection = stRetBossWorldMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqClearWorldBossActivityCD_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqClearWorldBossActivityCD_ProtoModID_descriptor_;
}
bool stReqClearWorldBossActivityCD_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqClearWorldBossActivityCD_ProtoModID stReqClearWorldBossActivityCD::ModID;
const stReqClearWorldBossActivityCD_ProtoModID stReqClearWorldBossActivityCD::ProtoModID_MIN;
const stReqClearWorldBossActivityCD_ProtoModID stReqClearWorldBossActivityCD::ProtoModID_MAX;
const int stReqClearWorldBossActivityCD::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqClearWorldBossActivityCD_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqClearWorldBossActivityCD_ProtoFunID_descriptor_;
}
bool stReqClearWorldBossActivityCD_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 66:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqClearWorldBossActivityCD_ProtoFunID stReqClearWorldBossActivityCD::FunID;
const stReqClearWorldBossActivityCD_ProtoFunID stReqClearWorldBossActivityCD::ProtoFunID_MIN;
const stReqClearWorldBossActivityCD_ProtoFunID stReqClearWorldBossActivityCD::ProtoFunID_MAX;
const int stReqClearWorldBossActivityCD::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqClearWorldBossActivityCD::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqClearWorldBossActivityCD::stReqClearWorldBossActivityCD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqClearWorldBossActivityCD::InitAsDefaultInstance() {
}

stReqClearWorldBossActivityCD::stReqClearWorldBossActivityCD(const stReqClearWorldBossActivityCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqClearWorldBossActivityCD::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqClearWorldBossActivityCD::~stReqClearWorldBossActivityCD() {
  SharedDtor();
}

void stReqClearWorldBossActivityCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqClearWorldBossActivityCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqClearWorldBossActivityCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqClearWorldBossActivityCD_descriptor_;
}

const stReqClearWorldBossActivityCD& stReqClearWorldBossActivityCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqClearWorldBossActivityCD* stReqClearWorldBossActivityCD::default_instance_ = NULL;

stReqClearWorldBossActivityCD* stReqClearWorldBossActivityCD::New() const {
  return new stReqClearWorldBossActivityCD;
}

void stReqClearWorldBossActivityCD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqClearWorldBossActivityCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqClearWorldBossActivityCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqClearWorldBossActivityCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqClearWorldBossActivityCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqClearWorldBossActivityCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqClearWorldBossActivityCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqClearWorldBossActivityCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqClearWorldBossActivityCD::MergeFrom(const stReqClearWorldBossActivityCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqClearWorldBossActivityCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqClearWorldBossActivityCD::CopyFrom(const stReqClearWorldBossActivityCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqClearWorldBossActivityCD::IsInitialized() const {

  return true;
}

void stReqClearWorldBossActivityCD::Swap(stReqClearWorldBossActivityCD* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqClearWorldBossActivityCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqClearWorldBossActivityCD_descriptor_;
  metadata.reflection = stReqClearWorldBossActivityCD_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stClearWorldBossActivityCDResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearWorldBossActivityCDResult_eResult_descriptor_;
}
bool stClearWorldBossActivityCDResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClearWorldBossActivityCDResult_eResult stClearWorldBossActivityCDResult::eSuccess;
const stClearWorldBossActivityCDResult_eResult stClearWorldBossActivityCDResult::eDiamond_Not_Enough;
const stClearWorldBossActivityCDResult_eResult stClearWorldBossActivityCDResult::eResult_MIN;
const stClearWorldBossActivityCDResult_eResult stClearWorldBossActivityCDResult::eResult_MAX;
const int stClearWorldBossActivityCDResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stClearWorldBossActivityCDResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearWorldBossActivityCDResult_ProtoModID_descriptor_;
}
bool stClearWorldBossActivityCDResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClearWorldBossActivityCDResult_ProtoModID stClearWorldBossActivityCDResult::ModID;
const stClearWorldBossActivityCDResult_ProtoModID stClearWorldBossActivityCDResult::ProtoModID_MIN;
const stClearWorldBossActivityCDResult_ProtoModID stClearWorldBossActivityCDResult::ProtoModID_MAX;
const int stClearWorldBossActivityCDResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stClearWorldBossActivityCDResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearWorldBossActivityCDResult_ProtoFunID_descriptor_;
}
bool stClearWorldBossActivityCDResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 67:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClearWorldBossActivityCDResult_ProtoFunID stClearWorldBossActivityCDResult::FunID;
const stClearWorldBossActivityCDResult_ProtoFunID stClearWorldBossActivityCDResult::ProtoFunID_MIN;
const stClearWorldBossActivityCDResult_ProtoFunID stClearWorldBossActivityCDResult::ProtoFunID_MAX;
const int stClearWorldBossActivityCDResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stClearWorldBossActivityCDResult::kResultFieldNumber;
#endif  // !_MSC_VER

stClearWorldBossActivityCDResult::stClearWorldBossActivityCDResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stClearWorldBossActivityCDResult::InitAsDefaultInstance() {
}

stClearWorldBossActivityCDResult::stClearWorldBossActivityCDResult(const stClearWorldBossActivityCDResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stClearWorldBossActivityCDResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stClearWorldBossActivityCDResult::~stClearWorldBossActivityCDResult() {
  SharedDtor();
}

void stClearWorldBossActivityCDResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stClearWorldBossActivityCDResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stClearWorldBossActivityCDResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearWorldBossActivityCDResult_descriptor_;
}

const stClearWorldBossActivityCDResult& stClearWorldBossActivityCDResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stClearWorldBossActivityCDResult* stClearWorldBossActivityCDResult::default_instance_ = NULL;

stClearWorldBossActivityCDResult* stClearWorldBossActivityCDResult::New() const {
  return new stClearWorldBossActivityCDResult;
}

void stClearWorldBossActivityCDResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stClearWorldBossActivityCDResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stClearWorldBossActivityCDResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stClearWorldBossActivityCDResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stClearWorldBossActivityCDResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stClearWorldBossActivityCDResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stClearWorldBossActivityCDResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stClearWorldBossActivityCDResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stClearWorldBossActivityCDResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stClearWorldBossActivityCDResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stClearWorldBossActivityCDResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stClearWorldBossActivityCDResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stClearWorldBossActivityCDResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stClearWorldBossActivityCDResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stClearWorldBossActivityCDResult::MergeFrom(const stClearWorldBossActivityCDResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stClearWorldBossActivityCDResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stClearWorldBossActivityCDResult::CopyFrom(const stClearWorldBossActivityCDResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stClearWorldBossActivityCDResult::IsInitialized() const {

  return true;
}

void stClearWorldBossActivityCDResult::Swap(stClearWorldBossActivityCDResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stClearWorldBossActivityCDResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stClearWorldBossActivityCDResult_descriptor_;
  metadata.reflection = stClearWorldBossActivityCDResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRaiseDamageInWorldBoss_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRaiseDamageInWorldBoss_ProtoModID_descriptor_;
}
bool stReqRaiseDamageInWorldBoss_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRaiseDamageInWorldBoss_ProtoModID stReqRaiseDamageInWorldBoss::ModID;
const stReqRaiseDamageInWorldBoss_ProtoModID stReqRaiseDamageInWorldBoss::ProtoModID_MIN;
const stReqRaiseDamageInWorldBoss_ProtoModID stReqRaiseDamageInWorldBoss::ProtoModID_MAX;
const int stReqRaiseDamageInWorldBoss::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRaiseDamageInWorldBoss_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRaiseDamageInWorldBoss_ProtoFunID_descriptor_;
}
bool stReqRaiseDamageInWorldBoss_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 68:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRaiseDamageInWorldBoss_ProtoFunID stReqRaiseDamageInWorldBoss::FunID;
const stReqRaiseDamageInWorldBoss_ProtoFunID stReqRaiseDamageInWorldBoss::ProtoFunID_MIN;
const stReqRaiseDamageInWorldBoss_ProtoFunID stReqRaiseDamageInWorldBoss::ProtoFunID_MAX;
const int stReqRaiseDamageInWorldBoss::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRaiseDamageInWorldBoss::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqRaiseDamageInWorldBoss::stReqRaiseDamageInWorldBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRaiseDamageInWorldBoss::InitAsDefaultInstance() {
}

stReqRaiseDamageInWorldBoss::stReqRaiseDamageInWorldBoss(const stReqRaiseDamageInWorldBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRaiseDamageInWorldBoss::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRaiseDamageInWorldBoss::~stReqRaiseDamageInWorldBoss() {
  SharedDtor();
}

void stReqRaiseDamageInWorldBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRaiseDamageInWorldBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRaiseDamageInWorldBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRaiseDamageInWorldBoss_descriptor_;
}

const stReqRaiseDamageInWorldBoss& stReqRaiseDamageInWorldBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqRaiseDamageInWorldBoss* stReqRaiseDamageInWorldBoss::default_instance_ = NULL;

stReqRaiseDamageInWorldBoss* stReqRaiseDamageInWorldBoss::New() const {
  return new stReqRaiseDamageInWorldBoss;
}

void stReqRaiseDamageInWorldBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRaiseDamageInWorldBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRaiseDamageInWorldBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRaiseDamageInWorldBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRaiseDamageInWorldBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRaiseDamageInWorldBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRaiseDamageInWorldBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRaiseDamageInWorldBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRaiseDamageInWorldBoss::MergeFrom(const stReqRaiseDamageInWorldBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRaiseDamageInWorldBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRaiseDamageInWorldBoss::CopyFrom(const stReqRaiseDamageInWorldBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRaiseDamageInWorldBoss::IsInitialized() const {

  return true;
}

void stReqRaiseDamageInWorldBoss::Swap(stReqRaiseDamageInWorldBoss* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRaiseDamageInWorldBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRaiseDamageInWorldBoss_descriptor_;
  metadata.reflection = stReqRaiseDamageInWorldBoss_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRaiseDamageInWorldBossResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseDamageInWorldBossResult_eResult_descriptor_;
}
bool stRaiseDamageInWorldBossResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRaiseDamageInWorldBossResult_eResult stRaiseDamageInWorldBossResult::eSuccess;
const stRaiseDamageInWorldBossResult_eResult stRaiseDamageInWorldBossResult::eDaimond_Not_Enough;
const stRaiseDamageInWorldBossResult_eResult stRaiseDamageInWorldBossResult::eTime_Out;
const stRaiseDamageInWorldBossResult_eResult stRaiseDamageInWorldBossResult::eResult_MIN;
const stRaiseDamageInWorldBossResult_eResult stRaiseDamageInWorldBossResult::eResult_MAX;
const int stRaiseDamageInWorldBossResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRaiseDamageInWorldBossResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseDamageInWorldBossResult_ProtoModID_descriptor_;
}
bool stRaiseDamageInWorldBossResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRaiseDamageInWorldBossResult_ProtoModID stRaiseDamageInWorldBossResult::ModID;
const stRaiseDamageInWorldBossResult_ProtoModID stRaiseDamageInWorldBossResult::ProtoModID_MIN;
const stRaiseDamageInWorldBossResult_ProtoModID stRaiseDamageInWorldBossResult::ProtoModID_MAX;
const int stRaiseDamageInWorldBossResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRaiseDamageInWorldBossResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseDamageInWorldBossResult_ProtoFunID_descriptor_;
}
bool stRaiseDamageInWorldBossResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 69:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRaiseDamageInWorldBossResult_ProtoFunID stRaiseDamageInWorldBossResult::FunID;
const stRaiseDamageInWorldBossResult_ProtoFunID stRaiseDamageInWorldBossResult::ProtoFunID_MIN;
const stRaiseDamageInWorldBossResult_ProtoFunID stRaiseDamageInWorldBossResult::ProtoFunID_MAX;
const int stRaiseDamageInWorldBossResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRaiseDamageInWorldBossResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRaiseDamageInWorldBossResult::stRaiseDamageInWorldBossResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRaiseDamageInWorldBossResult::InitAsDefaultInstance() {
}

stRaiseDamageInWorldBossResult::stRaiseDamageInWorldBossResult(const stRaiseDamageInWorldBossResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRaiseDamageInWorldBossResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRaiseDamageInWorldBossResult::~stRaiseDamageInWorldBossResult() {
  SharedDtor();
}

void stRaiseDamageInWorldBossResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRaiseDamageInWorldBossResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRaiseDamageInWorldBossResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRaiseDamageInWorldBossResult_descriptor_;
}

const stRaiseDamageInWorldBossResult& stRaiseDamageInWorldBossResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRaiseDamageInWorldBossResult* stRaiseDamageInWorldBossResult::default_instance_ = NULL;

stRaiseDamageInWorldBossResult* stRaiseDamageInWorldBossResult::New() const {
  return new stRaiseDamageInWorldBossResult;
}

void stRaiseDamageInWorldBossResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRaiseDamageInWorldBossResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRaiseDamageInWorldBossResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRaiseDamageInWorldBossResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRaiseDamageInWorldBossResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRaiseDamageInWorldBossResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRaiseDamageInWorldBossResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRaiseDamageInWorldBossResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRaiseDamageInWorldBossResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRaiseDamageInWorldBossResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRaiseDamageInWorldBossResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRaiseDamageInWorldBossResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRaiseDamageInWorldBossResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRaiseDamageInWorldBossResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRaiseDamageInWorldBossResult::MergeFrom(const stRaiseDamageInWorldBossResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRaiseDamageInWorldBossResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRaiseDamageInWorldBossResult::CopyFrom(const stRaiseDamageInWorldBossResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRaiseDamageInWorldBossResult::IsInitialized() const {

  return true;
}

void stRaiseDamageInWorldBossResult::Swap(stRaiseDamageInWorldBossResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRaiseDamageInWorldBossResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRaiseDamageInWorldBossResult_descriptor_;
  metadata.reflection = stRaiseDamageInWorldBossResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelWorldBossMatch_ProtoModID_descriptor_;
}
bool stCancelWorldBossMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelWorldBossMatch_ProtoModID stCancelWorldBossMatch::ModID;
const stCancelWorldBossMatch_ProtoModID stCancelWorldBossMatch::ProtoModID_MIN;
const stCancelWorldBossMatch_ProtoModID stCancelWorldBossMatch::ProtoModID_MAX;
const int stCancelWorldBossMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelWorldBossMatch_ProtoFunID_descriptor_;
}
bool stCancelWorldBossMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 70:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelWorldBossMatch_ProtoFunID stCancelWorldBossMatch::FunID;
const stCancelWorldBossMatch_ProtoFunID stCancelWorldBossMatch::ProtoFunID_MIN;
const stCancelWorldBossMatch_ProtoFunID stCancelWorldBossMatch::ProtoFunID_MAX;
const int stCancelWorldBossMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelWorldBossMatch::kCharIDFieldNumber;
#endif  // !_MSC_VER

stCancelWorldBossMatch::stCancelWorldBossMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelWorldBossMatch::InitAsDefaultInstance() {
}

stCancelWorldBossMatch::stCancelWorldBossMatch(const stCancelWorldBossMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelWorldBossMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelWorldBossMatch::~stCancelWorldBossMatch() {
  SharedDtor();
}

void stCancelWorldBossMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelWorldBossMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelWorldBossMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelWorldBossMatch_descriptor_;
}

const stCancelWorldBossMatch& stCancelWorldBossMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCancelWorldBossMatch* stCancelWorldBossMatch::default_instance_ = NULL;

stCancelWorldBossMatch* stCancelWorldBossMatch::New() const {
  return new stCancelWorldBossMatch;
}

void stCancelWorldBossMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelWorldBossMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelWorldBossMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelWorldBossMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelWorldBossMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelWorldBossMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelWorldBossMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelWorldBossMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelWorldBossMatch::MergeFrom(const stCancelWorldBossMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelWorldBossMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelWorldBossMatch::CopyFrom(const stCancelWorldBossMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelWorldBossMatch::IsInitialized() const {

  return true;
}

void stCancelWorldBossMatch::Swap(stCancelWorldBossMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelWorldBossMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelWorldBossMatch_descriptor_;
  metadata.reflection = stCancelWorldBossMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatchResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelWorldBossMatchResult_eResult_descriptor_;
}
bool stCancelWorldBossMatchResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelWorldBossMatchResult_eResult stCancelWorldBossMatchResult::eSuccess;
const stCancelWorldBossMatchResult_eResult stCancelWorldBossMatchResult::eFail;
const stCancelWorldBossMatchResult_eResult stCancelWorldBossMatchResult::eResult_MIN;
const stCancelWorldBossMatchResult_eResult stCancelWorldBossMatchResult::eResult_MAX;
const int stCancelWorldBossMatchResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatchResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelWorldBossMatchResult_ProtoModID_descriptor_;
}
bool stCancelWorldBossMatchResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelWorldBossMatchResult_ProtoModID stCancelWorldBossMatchResult::ModID;
const stCancelWorldBossMatchResult_ProtoModID stCancelWorldBossMatchResult::ProtoModID_MIN;
const stCancelWorldBossMatchResult_ProtoModID stCancelWorldBossMatchResult::ProtoModID_MAX;
const int stCancelWorldBossMatchResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelWorldBossMatchResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelWorldBossMatchResult_ProtoFunID_descriptor_;
}
bool stCancelWorldBossMatchResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 71:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelWorldBossMatchResult_ProtoFunID stCancelWorldBossMatchResult::FunID;
const stCancelWorldBossMatchResult_ProtoFunID stCancelWorldBossMatchResult::ProtoFunID_MIN;
const stCancelWorldBossMatchResult_ProtoFunID stCancelWorldBossMatchResult::ProtoFunID_MAX;
const int stCancelWorldBossMatchResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelWorldBossMatchResult::kResultFieldNumber;
#endif  // !_MSC_VER

stCancelWorldBossMatchResult::stCancelWorldBossMatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelWorldBossMatchResult::InitAsDefaultInstance() {
}

stCancelWorldBossMatchResult::stCancelWorldBossMatchResult(const stCancelWorldBossMatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelWorldBossMatchResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelWorldBossMatchResult::~stCancelWorldBossMatchResult() {
  SharedDtor();
}

void stCancelWorldBossMatchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelWorldBossMatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelWorldBossMatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelWorldBossMatchResult_descriptor_;
}

const stCancelWorldBossMatchResult& stCancelWorldBossMatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCancelWorldBossMatchResult* stCancelWorldBossMatchResult::default_instance_ = NULL;

stCancelWorldBossMatchResult* stCancelWorldBossMatchResult::New() const {
  return new stCancelWorldBossMatchResult;
}

void stCancelWorldBossMatchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelWorldBossMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stCancelWorldBossMatchResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stCancelWorldBossMatchResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stCancelWorldBossMatchResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelWorldBossMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stCancelWorldBossMatchResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelWorldBossMatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stCancelWorldBossMatchResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelWorldBossMatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stCancelWorldBossMatchResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelWorldBossMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelWorldBossMatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelWorldBossMatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelWorldBossMatchResult::MergeFrom(const stCancelWorldBossMatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelWorldBossMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelWorldBossMatchResult::CopyFrom(const stCancelWorldBossMatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelWorldBossMatchResult::IsInitialized() const {

  return true;
}

void stCancelWorldBossMatchResult::Swap(stCancelWorldBossMatchResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelWorldBossMatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelWorldBossMatchResult_descriptor_;
  metadata.reflection = stCancelWorldBossMatchResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stQueryDrawHeroActivity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQueryDrawHeroActivity_ProtoModID_descriptor_;
}
bool stQueryDrawHeroActivity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQueryDrawHeroActivity_ProtoModID stQueryDrawHeroActivity::ModID;
const stQueryDrawHeroActivity_ProtoModID stQueryDrawHeroActivity::ProtoModID_MIN;
const stQueryDrawHeroActivity_ProtoModID stQueryDrawHeroActivity::ProtoModID_MAX;
const int stQueryDrawHeroActivity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stQueryDrawHeroActivity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQueryDrawHeroActivity_ProtoFunID_descriptor_;
}
bool stQueryDrawHeroActivity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 72:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQueryDrawHeroActivity_ProtoFunID stQueryDrawHeroActivity::FunID;
const stQueryDrawHeroActivity_ProtoFunID stQueryDrawHeroActivity::ProtoFunID_MIN;
const stQueryDrawHeroActivity_ProtoFunID stQueryDrawHeroActivity::ProtoFunID_MAX;
const int stQueryDrawHeroActivity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stQueryDrawHeroActivity::kCharIDFieldNumber;
#endif  // !_MSC_VER

stQueryDrawHeroActivity::stQueryDrawHeroActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stQueryDrawHeroActivity::InitAsDefaultInstance() {
}

stQueryDrawHeroActivity::stQueryDrawHeroActivity(const stQueryDrawHeroActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stQueryDrawHeroActivity::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQueryDrawHeroActivity::~stQueryDrawHeroActivity() {
  SharedDtor();
}

void stQueryDrawHeroActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQueryDrawHeroActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQueryDrawHeroActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQueryDrawHeroActivity_descriptor_;
}

const stQueryDrawHeroActivity& stQueryDrawHeroActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stQueryDrawHeroActivity* stQueryDrawHeroActivity::default_instance_ = NULL;

stQueryDrawHeroActivity* stQueryDrawHeroActivity::New() const {
  return new stQueryDrawHeroActivity;
}

void stQueryDrawHeroActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQueryDrawHeroActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stQueryDrawHeroActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stQueryDrawHeroActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stQueryDrawHeroActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQueryDrawHeroActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQueryDrawHeroActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQueryDrawHeroActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQueryDrawHeroActivity::MergeFrom(const stQueryDrawHeroActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQueryDrawHeroActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQueryDrawHeroActivity::CopyFrom(const stQueryDrawHeroActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQueryDrawHeroActivity::IsInitialized() const {

  return true;
}

void stQueryDrawHeroActivity::Swap(stQueryDrawHeroActivity* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQueryDrawHeroActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQueryDrawHeroActivity_descriptor_;
  metadata.reflection = stQueryDrawHeroActivity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDrawHeroActivityInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawHeroActivityInfo_ProtoModID_descriptor_;
}
bool stRetDrawHeroActivityInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawHeroActivityInfo_ProtoModID stRetDrawHeroActivityInfo::ModID;
const stRetDrawHeroActivityInfo_ProtoModID stRetDrawHeroActivityInfo::ProtoModID_MIN;
const stRetDrawHeroActivityInfo_ProtoModID stRetDrawHeroActivityInfo::ProtoModID_MAX;
const int stRetDrawHeroActivityInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawHeroActivityInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawHeroActivityInfo_ProtoFunID_descriptor_;
}
bool stRetDrawHeroActivityInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 73:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawHeroActivityInfo_ProtoFunID stRetDrawHeroActivityInfo::FunID;
const stRetDrawHeroActivityInfo_ProtoFunID stRetDrawHeroActivityInfo::ProtoFunID_MIN;
const stRetDrawHeroActivityInfo_ProtoFunID stRetDrawHeroActivityInfo::ProtoFunID_MAX;
const int stRetDrawHeroActivityInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDrawHeroActivityInfo::kHeroIDFieldNumber;
const int stRetDrawHeroActivityInfo::kBeginTimeFieldNumber;
const int stRetDrawHeroActivityInfo::kEndTimeFieldNumber;
const int stRetDrawHeroActivityInfo::kRewardIDsFieldNumber;
const int stRetDrawHeroActivityInfo::kGotRankRewardFieldNumber;
#endif  // !_MSC_VER

stRetDrawHeroActivityInfo::stRetDrawHeroActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDrawHeroActivityInfo::InitAsDefaultInstance() {
}

stRetDrawHeroActivityInfo::stRetDrawHeroActivityInfo(const stRetDrawHeroActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDrawHeroActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  begintime_ = 0u;
  endtime_ = 0u;
  gotrankreward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDrawHeroActivityInfo::~stRetDrawHeroActivityInfo() {
  SharedDtor();
}

void stRetDrawHeroActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDrawHeroActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDrawHeroActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawHeroActivityInfo_descriptor_;
}

const stRetDrawHeroActivityInfo& stRetDrawHeroActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDrawHeroActivityInfo* stRetDrawHeroActivityInfo::default_instance_ = NULL;

stRetDrawHeroActivityInfo* stRetDrawHeroActivityInfo::New() const {
  return new stRetDrawHeroActivityInfo;
}

void stRetDrawHeroActivityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    begintime_ = 0u;
    endtime_ = 0u;
    gotrankreward_ = false;
  }
  rewardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDrawHeroActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heroID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginTime;
        break;
      }

      // optional uint32 beginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional uint32 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardIDs;
        break;
      }

      // repeated uint32 rewardIDs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_rewardids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardIDs;
        if (input->ExpectTag(40)) goto parse_gotRankReward;
        break;
      }

      // optional bool gotRankReward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gotRankReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gotrankreward_)));
          set_has_gotrankreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDrawHeroActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // optional uint32 beginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->begintime(), output);
  }

  // optional uint32 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->endtime(), output);
  }

  // repeated uint32 rewardIDs = 4;
  for (int i = 0; i < this->rewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->rewardids(i), output);
  }

  // optional bool gotRankReward = 5;
  if (has_gotrankreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->gotrankreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDrawHeroActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 heroID = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // optional uint32 beginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->begintime(), target);
  }

  // optional uint32 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->endtime(), target);
  }

  // repeated uint32 rewardIDs = 4;
  for (int i = 0; i < this->rewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->rewardids(i), target);
  }

  // optional bool gotRankReward = 5;
  if (has_gotrankreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->gotrankreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDrawHeroActivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heroID = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 beginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // optional uint32 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional bool gotRankReward = 5;
    if (has_gotrankreward()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 rewardIDs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardids(i));
    }
    total_size += 1 * this->rewardids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDrawHeroActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDrawHeroActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDrawHeroActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDrawHeroActivityInfo::MergeFrom(const stRetDrawHeroActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardids_.MergeFrom(from.rewardids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_gotrankreward()) {
      set_gotrankreward(from.gotrankreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDrawHeroActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDrawHeroActivityInfo::CopyFrom(const stRetDrawHeroActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDrawHeroActivityInfo::IsInitialized() const {

  return true;
}

void stRetDrawHeroActivityInfo::Swap(stRetDrawHeroActivityInfo* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    rewardids_.Swap(&other->rewardids_);
    std::swap(gotrankreward_, other->gotrankreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDrawHeroActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDrawHeroActivityInfo_descriptor_;
  metadata.reflection = stRetDrawHeroActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawHeroScoreReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawHeroScoreReward_ProtoModID_descriptor_;
}
bool stReqDrawHeroScoreReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawHeroScoreReward_ProtoModID stReqDrawHeroScoreReward::ModID;
const stReqDrawHeroScoreReward_ProtoModID stReqDrawHeroScoreReward::ProtoModID_MIN;
const stReqDrawHeroScoreReward_ProtoModID stReqDrawHeroScoreReward::ProtoModID_MAX;
const int stReqDrawHeroScoreReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawHeroScoreReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawHeroScoreReward_ProtoFunID_descriptor_;
}
bool stReqDrawHeroScoreReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 74:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawHeroScoreReward_ProtoFunID stReqDrawHeroScoreReward::FunID;
const stReqDrawHeroScoreReward_ProtoFunID stReqDrawHeroScoreReward::ProtoFunID_MIN;
const stReqDrawHeroScoreReward_ProtoFunID stReqDrawHeroScoreReward::ProtoFunID_MAX;
const int stReqDrawHeroScoreReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawHeroScoreReward::kIdFieldNumber;
#endif  // !_MSC_VER

stReqDrawHeroScoreReward::stReqDrawHeroScoreReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawHeroScoreReward::InitAsDefaultInstance() {
}

stReqDrawHeroScoreReward::stReqDrawHeroScoreReward(const stReqDrawHeroScoreReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawHeroScoreReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawHeroScoreReward::~stReqDrawHeroScoreReward() {
  SharedDtor();
}

void stReqDrawHeroScoreReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawHeroScoreReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawHeroScoreReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawHeroScoreReward_descriptor_;
}

const stReqDrawHeroScoreReward& stReqDrawHeroScoreReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDrawHeroScoreReward* stReqDrawHeroScoreReward::default_instance_ = NULL;

stReqDrawHeroScoreReward* stReqDrawHeroScoreReward::New() const {
  return new stReqDrawHeroScoreReward;
}

void stReqDrawHeroScoreReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawHeroScoreReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawHeroScoreReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawHeroScoreReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawHeroScoreReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawHeroScoreReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawHeroScoreReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawHeroScoreReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawHeroScoreReward::MergeFrom(const stReqDrawHeroScoreReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawHeroScoreReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawHeroScoreReward::CopyFrom(const stReqDrawHeroScoreReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawHeroScoreReward::IsInitialized() const {

  return true;
}

void stReqDrawHeroScoreReward::Swap(stReqDrawHeroScoreReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawHeroScoreReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawHeroScoreReward_descriptor_;
  metadata.reflection = stReqDrawHeroScoreReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDrawHeroScoreRewardRet_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroScoreRewardRet_eResult_descriptor_;
}
bool stDrawHeroScoreRewardRet_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroScoreRewardRet_eResult stDrawHeroScoreRewardRet::eSuccess;
const stDrawHeroScoreRewardRet_eResult stDrawHeroScoreRewardRet::eScore_Not_Enough;
const stDrawHeroScoreRewardRet_eResult stDrawHeroScoreRewardRet::eHas_Got_Reward;
const stDrawHeroScoreRewardRet_eResult stDrawHeroScoreRewardRet::eInner_Error;
const stDrawHeroScoreRewardRet_eResult stDrawHeroScoreRewardRet::eBagFull;
const stDrawHeroScoreRewardRet_eResult stDrawHeroScoreRewardRet::eResult_MIN;
const stDrawHeroScoreRewardRet_eResult stDrawHeroScoreRewardRet::eResult_MAX;
const int stDrawHeroScoreRewardRet::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawHeroScoreRewardRet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroScoreRewardRet_ProtoModID_descriptor_;
}
bool stDrawHeroScoreRewardRet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroScoreRewardRet_ProtoModID stDrawHeroScoreRewardRet::ModID;
const stDrawHeroScoreRewardRet_ProtoModID stDrawHeroScoreRewardRet::ProtoModID_MIN;
const stDrawHeroScoreRewardRet_ProtoModID stDrawHeroScoreRewardRet::ProtoModID_MAX;
const int stDrawHeroScoreRewardRet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawHeroScoreRewardRet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroScoreRewardRet_ProtoFunID_descriptor_;
}
bool stDrawHeroScoreRewardRet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 75:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroScoreRewardRet_ProtoFunID stDrawHeroScoreRewardRet::FunID;
const stDrawHeroScoreRewardRet_ProtoFunID stDrawHeroScoreRewardRet::ProtoFunID_MIN;
const stDrawHeroScoreRewardRet_ProtoFunID stDrawHeroScoreRewardRet::ProtoFunID_MAX;
const int stDrawHeroScoreRewardRet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDrawHeroScoreRewardRet::kResultFieldNumber;
#endif  // !_MSC_VER

stDrawHeroScoreRewardRet::stDrawHeroScoreRewardRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDrawHeroScoreRewardRet::InitAsDefaultInstance() {
}

stDrawHeroScoreRewardRet::stDrawHeroScoreRewardRet(const stDrawHeroScoreRewardRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDrawHeroScoreRewardRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDrawHeroScoreRewardRet::~stDrawHeroScoreRewardRet() {
  SharedDtor();
}

void stDrawHeroScoreRewardRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDrawHeroScoreRewardRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDrawHeroScoreRewardRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroScoreRewardRet_descriptor_;
}

const stDrawHeroScoreRewardRet& stDrawHeroScoreRewardRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stDrawHeroScoreRewardRet* stDrawHeroScoreRewardRet::default_instance_ = NULL;

stDrawHeroScoreRewardRet* stDrawHeroScoreRewardRet::New() const {
  return new stDrawHeroScoreRewardRet;
}

void stDrawHeroScoreRewardRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDrawHeroScoreRewardRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stDrawHeroScoreRewardRet.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stDrawHeroScoreRewardRet_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stDrawHeroScoreRewardRet_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDrawHeroScoreRewardRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stDrawHeroScoreRewardRet.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDrawHeroScoreRewardRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stDrawHeroScoreRewardRet.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDrawHeroScoreRewardRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stDrawHeroScoreRewardRet.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDrawHeroScoreRewardRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDrawHeroScoreRewardRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDrawHeroScoreRewardRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDrawHeroScoreRewardRet::MergeFrom(const stDrawHeroScoreRewardRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDrawHeroScoreRewardRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDrawHeroScoreRewardRet::CopyFrom(const stDrawHeroScoreRewardRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDrawHeroScoreRewardRet::IsInitialized() const {

  return true;
}

void stDrawHeroScoreRewardRet::Swap(stDrawHeroScoreRewardRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDrawHeroScoreRewardRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDrawHeroScoreRewardRet_descriptor_;
  metadata.reflection = stDrawHeroScoreRewardRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawHeroRankReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawHeroRankReward_ProtoModID_descriptor_;
}
bool stReqDrawHeroRankReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawHeroRankReward_ProtoModID stReqDrawHeroRankReward::ModID;
const stReqDrawHeroRankReward_ProtoModID stReqDrawHeroRankReward::ProtoModID_MIN;
const stReqDrawHeroRankReward_ProtoModID stReqDrawHeroRankReward::ProtoModID_MAX;
const int stReqDrawHeroRankReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawHeroRankReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawHeroRankReward_ProtoFunID_descriptor_;
}
bool stReqDrawHeroRankReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 76:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawHeroRankReward_ProtoFunID stReqDrawHeroRankReward::FunID;
const stReqDrawHeroRankReward_ProtoFunID stReqDrawHeroRankReward::ProtoFunID_MIN;
const stReqDrawHeroRankReward_ProtoFunID stReqDrawHeroRankReward::ProtoFunID_MAX;
const int stReqDrawHeroRankReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawHeroRankReward::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqDrawHeroRankReward::stReqDrawHeroRankReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawHeroRankReward::InitAsDefaultInstance() {
}

stReqDrawHeroRankReward::stReqDrawHeroRankReward(const stReqDrawHeroRankReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawHeroRankReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawHeroRankReward::~stReqDrawHeroRankReward() {
  SharedDtor();
}

void stReqDrawHeroRankReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawHeroRankReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawHeroRankReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawHeroRankReward_descriptor_;
}

const stReqDrawHeroRankReward& stReqDrawHeroRankReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDrawHeroRankReward* stReqDrawHeroRankReward::default_instance_ = NULL;

stReqDrawHeroRankReward* stReqDrawHeroRankReward::New() const {
  return new stReqDrawHeroRankReward;
}

void stReqDrawHeroRankReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawHeroRankReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawHeroRankReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawHeroRankReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawHeroRankReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawHeroRankReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawHeroRankReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawHeroRankReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawHeroRankReward::MergeFrom(const stReqDrawHeroRankReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawHeroRankReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawHeroRankReward::CopyFrom(const stReqDrawHeroRankReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawHeroRankReward::IsInitialized() const {

  return true;
}

void stReqDrawHeroRankReward::Swap(stReqDrawHeroRankReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawHeroRankReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawHeroRankReward_descriptor_;
  metadata.reflection = stReqDrawHeroRankReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroRankReward_eResult_descriptor_;
}
bool stDrawHeroRankReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroRankReward_eResult stDrawHeroRankReward::eSuccess;
const stDrawHeroRankReward_eResult stDrawHeroRankReward::eHas_No_Rewards;
const stDrawHeroRankReward_eResult stDrawHeroRankReward::eHas_Got_Reward;
const stDrawHeroRankReward_eResult stDrawHeroRankReward::eInner_Error;
const stDrawHeroRankReward_eResult stDrawHeroRankReward::eResult_MIN;
const stDrawHeroRankReward_eResult stDrawHeroRankReward::eResult_MAX;
const int stDrawHeroRankReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroRankReward_ProtoModID_descriptor_;
}
bool stDrawHeroRankReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroRankReward_ProtoModID stDrawHeroRankReward::ModID;
const stDrawHeroRankReward_ProtoModID stDrawHeroRankReward::ProtoModID_MIN;
const stDrawHeroRankReward_ProtoModID stDrawHeroRankReward::ProtoModID_MAX;
const int stDrawHeroRankReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroRankReward_ProtoFunID_descriptor_;
}
bool stDrawHeroRankReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 77:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroRankReward_ProtoFunID stDrawHeroRankReward::FunID;
const stDrawHeroRankReward_ProtoFunID stDrawHeroRankReward::ProtoFunID_MIN;
const stDrawHeroRankReward_ProtoFunID stDrawHeroRankReward::ProtoFunID_MAX;
const int stDrawHeroRankReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDrawHeroRankReward::kResultFieldNumber;
#endif  // !_MSC_VER

stDrawHeroRankReward::stDrawHeroRankReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDrawHeroRankReward::InitAsDefaultInstance() {
}

stDrawHeroRankReward::stDrawHeroRankReward(const stDrawHeroRankReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDrawHeroRankReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDrawHeroRankReward::~stDrawHeroRankReward() {
  SharedDtor();
}

void stDrawHeroRankReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDrawHeroRankReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDrawHeroRankReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroRankReward_descriptor_;
}

const stDrawHeroRankReward& stDrawHeroRankReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stDrawHeroRankReward* stDrawHeroRankReward::default_instance_ = NULL;

stDrawHeroRankReward* stDrawHeroRankReward::New() const {
  return new stDrawHeroRankReward;
}

void stDrawHeroRankReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDrawHeroRankReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stDrawHeroRankReward.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stDrawHeroRankReward_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stDrawHeroRankReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDrawHeroRankReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stDrawHeroRankReward.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDrawHeroRankReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stDrawHeroRankReward.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDrawHeroRankReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stDrawHeroRankReward.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDrawHeroRankReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDrawHeroRankReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDrawHeroRankReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDrawHeroRankReward::MergeFrom(const stDrawHeroRankReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDrawHeroRankReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDrawHeroRankReward::CopyFrom(const stDrawHeroRankReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDrawHeroRankReward::IsInitialized() const {

  return true;
}

void stDrawHeroRankReward::Swap(stDrawHeroRankReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDrawHeroRankReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDrawHeroRankReward_descriptor_;
  metadata.reflection = stDrawHeroRankReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCompensationList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCompensationList_ProtoModID_descriptor_;
}
bool stReqCompensationList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCompensationList_ProtoModID stReqCompensationList::ModID;
const stReqCompensationList_ProtoModID stReqCompensationList::ProtoModID_MIN;
const stReqCompensationList_ProtoModID stReqCompensationList::ProtoModID_MAX;
const int stReqCompensationList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCompensationList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCompensationList_ProtoFunID_descriptor_;
}
bool stReqCompensationList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 78:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCompensationList_ProtoFunID stReqCompensationList::FunID;
const stReqCompensationList_ProtoFunID stReqCompensationList::ProtoFunID_MIN;
const stReqCompensationList_ProtoFunID stReqCompensationList::ProtoFunID_MAX;
const int stReqCompensationList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCompensationList::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqCompensationList::stReqCompensationList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCompensationList::InitAsDefaultInstance() {
}

stReqCompensationList::stReqCompensationList(const stReqCompensationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCompensationList::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCompensationList::~stReqCompensationList() {
  SharedDtor();
}

void stReqCompensationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCompensationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCompensationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCompensationList_descriptor_;
}

const stReqCompensationList& stReqCompensationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqCompensationList* stReqCompensationList::default_instance_ = NULL;

stReqCompensationList* stReqCompensationList::New() const {
  return new stReqCompensationList;
}

void stReqCompensationList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCompensationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCompensationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCompensationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCompensationList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCompensationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCompensationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCompensationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCompensationList::MergeFrom(const stReqCompensationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCompensationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCompensationList::CopyFrom(const stReqCompensationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCompensationList::IsInitialized() const {

  return true;
}

void stReqCompensationList::Swap(stReqCompensationList* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCompensationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCompensationList_descriptor_;
  metadata.reflection = stReqCompensationList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCompensationItem::kItemIDFieldNumber;
const int stCompensationItem::kNumFieldNumber;
#endif  // !_MSC_VER

stCompensationItem::stCompensationItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCompensationItem::InitAsDefaultInstance() {
}

stCompensationItem::stCompensationItem(const stCompensationItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCompensationItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCompensationItem::~stCompensationItem() {
  SharedDtor();
}

void stCompensationItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCompensationItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCompensationItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCompensationItem_descriptor_;
}

const stCompensationItem& stCompensationItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCompensationItem* stCompensationItem::default_instance_ = NULL;

stCompensationItem* stCompensationItem::New() const {
  return new stCompensationItem;
}

void stCompensationItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCompensationItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCompensationItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCompensationItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCompensationItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCompensationItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCompensationItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCompensationItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCompensationItem::MergeFrom(const stCompensationItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCompensationItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCompensationItem::CopyFrom(const stCompensationItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCompensationItem::IsInitialized() const {

  return true;
}

void stCompensationItem::Swap(stCompensationItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCompensationItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCompensationItem_descriptor_;
  metadata.reflection = stCompensationItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCompensationInfo::kIdFieldNumber;
const int stCompensationInfo::kDescFieldNumber;
const int stCompensationInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

stCompensationInfo::stCompensationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCompensationInfo::InitAsDefaultInstance() {
}

stCompensationInfo::stCompensationInfo(const stCompensationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCompensationInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCompensationInfo::~stCompensationInfo() {
  SharedDtor();
}

void stCompensationInfo::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void stCompensationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCompensationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCompensationInfo_descriptor_;
}

const stCompensationInfo& stCompensationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCompensationInfo* stCompensationInfo::default_instance_ = NULL;

stCompensationInfo* stCompensationInfo::New() const {
  return new stCompensationInfo;
}

void stCompensationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCompensationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_desc;
        break;
      }

      // optional string desc = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .MiscProto.stCompensationItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCompensationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->desc(), output);
  }

  // repeated .MiscProto.stCompensationItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCompensationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string desc = 2;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->desc(), target);
  }

  // repeated .MiscProto.stCompensationItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCompensationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string desc = 2;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  // repeated .MiscProto.stCompensationItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCompensationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCompensationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCompensationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCompensationInfo::MergeFrom(const stCompensationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCompensationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCompensationInfo::CopyFrom(const stCompensationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCompensationInfo::IsInitialized() const {

  return true;
}

void stCompensationInfo::Swap(stCompensationInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(desc_, other->desc_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCompensationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCompensationInfo_descriptor_;
  metadata.reflection = stCompensationInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetCompensationList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCompensationList_ProtoModID_descriptor_;
}
bool stRetCompensationList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCompensationList_ProtoModID stRetCompensationList::ModID;
const stRetCompensationList_ProtoModID stRetCompensationList::ProtoModID_MIN;
const stRetCompensationList_ProtoModID stRetCompensationList::ProtoModID_MAX;
const int stRetCompensationList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetCompensationList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCompensationList_ProtoFunID_descriptor_;
}
bool stRetCompensationList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 79:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCompensationList_ProtoFunID stRetCompensationList::FunID;
const stRetCompensationList_ProtoFunID stRetCompensationList::ProtoFunID_MIN;
const stRetCompensationList_ProtoFunID stRetCompensationList::ProtoFunID_MAX;
const int stRetCompensationList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetCompensationList::kInfoFieldNumber;
#endif  // !_MSC_VER

stRetCompensationList::stRetCompensationList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetCompensationList::InitAsDefaultInstance() {
}

stRetCompensationList::stRetCompensationList(const stRetCompensationList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetCompensationList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetCompensationList::~stRetCompensationList() {
  SharedDtor();
}

void stRetCompensationList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetCompensationList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetCompensationList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCompensationList_descriptor_;
}

const stRetCompensationList& stRetCompensationList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetCompensationList* stRetCompensationList::default_instance_ = NULL;

stRetCompensationList* stRetCompensationList::New() const {
  return new stRetCompensationList;
}

void stRetCompensationList::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetCompensationList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stCompensationInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetCompensationList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stCompensationInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetCompensationList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stCompensationInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetCompensationList::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stCompensationInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetCompensationList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetCompensationList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetCompensationList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetCompensationList::MergeFrom(const stRetCompensationList& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetCompensationList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetCompensationList::CopyFrom(const stRetCompensationList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetCompensationList::IsInitialized() const {

  return true;
}

void stRetCompensationList::Swap(stRetCompensationList* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetCompensationList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetCompensationList_descriptor_;
  metadata.reflection = stRetCompensationList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGotCompensation_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGotCompensation_ProtoModID_descriptor_;
}
bool stReqGotCompensation_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGotCompensation_ProtoModID stReqGotCompensation::ModID;
const stReqGotCompensation_ProtoModID stReqGotCompensation::ProtoModID_MIN;
const stReqGotCompensation_ProtoModID stReqGotCompensation::ProtoModID_MAX;
const int stReqGotCompensation::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGotCompensation_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGotCompensation_ProtoFunID_descriptor_;
}
bool stReqGotCompensation_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 80:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGotCompensation_ProtoFunID stReqGotCompensation::FunID;
const stReqGotCompensation_ProtoFunID stReqGotCompensation::ProtoFunID_MIN;
const stReqGotCompensation_ProtoFunID stReqGotCompensation::ProtoFunID_MAX;
const int stReqGotCompensation::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGotCompensation::kIdFieldNumber;
#endif  // !_MSC_VER

stReqGotCompensation::stReqGotCompensation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGotCompensation::InitAsDefaultInstance() {
}

stReqGotCompensation::stReqGotCompensation(const stReqGotCompensation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGotCompensation::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGotCompensation::~stReqGotCompensation() {
  SharedDtor();
}

void stReqGotCompensation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGotCompensation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGotCompensation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGotCompensation_descriptor_;
}

const stReqGotCompensation& stReqGotCompensation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqGotCompensation* stReqGotCompensation::default_instance_ = NULL;

stReqGotCompensation* stReqGotCompensation::New() const {
  return new stReqGotCompensation;
}

void stReqGotCompensation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGotCompensation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGotCompensation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGotCompensation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGotCompensation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGotCompensation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGotCompensation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGotCompensation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGotCompensation::MergeFrom(const stReqGotCompensation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGotCompensation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGotCompensation::CopyFrom(const stReqGotCompensation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGotCompensation::IsInitialized() const {

  return true;
}

void stReqGotCompensation::Swap(stReqGotCompensation* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGotCompensation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGotCompensation_descriptor_;
  metadata.reflection = stReqGotCompensation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGotCompensationResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotCompensationResult_eResult_descriptor_;
}
bool stGotCompensationResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotCompensationResult_eResult stGotCompensationResult::eSuccess;
const stGotCompensationResult_eResult stGotCompensationResult::eHas_Got;
const stGotCompensationResult_eResult stGotCompensationResult::eResult_MIN;
const stGotCompensationResult_eResult stGotCompensationResult::eResult_MAX;
const int stGotCompensationResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGotCompensationResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotCompensationResult_ProtoModID_descriptor_;
}
bool stGotCompensationResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotCompensationResult_ProtoModID stGotCompensationResult::ModID;
const stGotCompensationResult_ProtoModID stGotCompensationResult::ProtoModID_MIN;
const stGotCompensationResult_ProtoModID stGotCompensationResult::ProtoModID_MAX;
const int stGotCompensationResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGotCompensationResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotCompensationResult_ProtoFunID_descriptor_;
}
bool stGotCompensationResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 81:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGotCompensationResult_ProtoFunID stGotCompensationResult::FunID;
const stGotCompensationResult_ProtoFunID stGotCompensationResult::ProtoFunID_MIN;
const stGotCompensationResult_ProtoFunID stGotCompensationResult::ProtoFunID_MAX;
const int stGotCompensationResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGotCompensationResult::kResultFieldNumber;
#endif  // !_MSC_VER

stGotCompensationResult::stGotCompensationResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGotCompensationResult::InitAsDefaultInstance() {
}

stGotCompensationResult::stGotCompensationResult(const stGotCompensationResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGotCompensationResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGotCompensationResult::~stGotCompensationResult() {
  SharedDtor();
}

void stGotCompensationResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGotCompensationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGotCompensationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGotCompensationResult_descriptor_;
}

const stGotCompensationResult& stGotCompensationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGotCompensationResult* stGotCompensationResult::default_instance_ = NULL;

stGotCompensationResult* stGotCompensationResult::New() const {
  return new stGotCompensationResult;
}

void stGotCompensationResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGotCompensationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGotCompensationResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stGotCompensationResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stGotCompensationResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGotCompensationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGotCompensationResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGotCompensationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGotCompensationResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGotCompensationResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGotCompensationResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGotCompensationResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGotCompensationResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGotCompensationResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGotCompensationResult::MergeFrom(const stGotCompensationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGotCompensationResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGotCompensationResult::CopyFrom(const stGotCompensationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGotCompensationResult::IsInitialized() const {

  return true;
}

void stGotCompensationResult::Swap(stGotCompensationResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGotCompensationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGotCompensationResult_descriptor_;
  metadata.reflection = stGotCompensationResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReq7DayActivityInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReq7DayActivityInfo_ProtoModID_descriptor_;
}
bool stReq7DayActivityInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReq7DayActivityInfo_ProtoModID stReq7DayActivityInfo::ModID;
const stReq7DayActivityInfo_ProtoModID stReq7DayActivityInfo::ProtoModID_MIN;
const stReq7DayActivityInfo_ProtoModID stReq7DayActivityInfo::ProtoModID_MAX;
const int stReq7DayActivityInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReq7DayActivityInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReq7DayActivityInfo_ProtoFunID_descriptor_;
}
bool stReq7DayActivityInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 82:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReq7DayActivityInfo_ProtoFunID stReq7DayActivityInfo::FunID;
const stReq7DayActivityInfo_ProtoFunID stReq7DayActivityInfo::ProtoFunID_MIN;
const stReq7DayActivityInfo_ProtoFunID stReq7DayActivityInfo::ProtoFunID_MAX;
const int stReq7DayActivityInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReq7DayActivityInfo::kDayFieldNumber;
#endif  // !_MSC_VER

stReq7DayActivityInfo::stReq7DayActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReq7DayActivityInfo::InitAsDefaultInstance() {
}

stReq7DayActivityInfo::stReq7DayActivityInfo(const stReq7DayActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReq7DayActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReq7DayActivityInfo::~stReq7DayActivityInfo() {
  SharedDtor();
}

void stReq7DayActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReq7DayActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReq7DayActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReq7DayActivityInfo_descriptor_;
}

const stReq7DayActivityInfo& stReq7DayActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReq7DayActivityInfo* stReq7DayActivityInfo::default_instance_ = NULL;

stReq7DayActivityInfo* stReq7DayActivityInfo::New() const {
  return new stReq7DayActivityInfo;
}

void stReq7DayActivityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReq7DayActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReq7DayActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReq7DayActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReq7DayActivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReq7DayActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReq7DayActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReq7DayActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReq7DayActivityInfo::MergeFrom(const stReq7DayActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReq7DayActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReq7DayActivityInfo::CopyFrom(const stReq7DayActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReq7DayActivityInfo::IsInitialized() const {

  return true;
}

void stReq7DayActivityInfo::Swap(stReq7DayActivityInfo* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReq7DayActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReq7DayActivityInfo_descriptor_;
  metadata.reflection = stReq7DayActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynSDGoalInfo::kIdFieldNumber;
const int stSynSDGoalInfo::kCondFieldNumber;
const int stSynSDGoalInfo::kValueFieldNumber;
const int stSynSDGoalInfo::kHasGotRewardFieldNumber;
#endif  // !_MSC_VER

stSynSDGoalInfo::stSynSDGoalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynSDGoalInfo::InitAsDefaultInstance() {
}

stSynSDGoalInfo::stSynSDGoalInfo(const stSynSDGoalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynSDGoalInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  cond_ = 0u;
  value_ = 0u;
  hasgotreward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynSDGoalInfo::~stSynSDGoalInfo() {
  SharedDtor();
}

void stSynSDGoalInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynSDGoalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynSDGoalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynSDGoalInfo_descriptor_;
}

const stSynSDGoalInfo& stSynSDGoalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynSDGoalInfo* stSynSDGoalInfo::default_instance_ = NULL;

stSynSDGoalInfo* stSynSDGoalInfo::New() const {
  return new stSynSDGoalInfo;
}

void stSynSDGoalInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    cond_ = 0u;
    value_ = 0u;
    hasgotreward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynSDGoalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cond;
        break;
      }

      // optional uint32 cond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cond_)));
          set_has_cond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hasGotReward;
        break;
      }

      // optional bool hasGotReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGotReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasgotreward_)));
          set_has_hasgotreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynSDGoalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 cond = 2;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cond(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  // optional bool hasGotReward = 4;
  if (has_hasgotreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hasgotreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynSDGoalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 cond = 2;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cond(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  // optional bool hasGotReward = 4;
  if (has_hasgotreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hasgotreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynSDGoalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 cond = 2;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cond());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional bool hasGotReward = 4;
    if (has_hasgotreward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynSDGoalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynSDGoalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynSDGoalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynSDGoalInfo::MergeFrom(const stSynSDGoalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cond()) {
      set_cond(from.cond());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_hasgotreward()) {
      set_hasgotreward(from.hasgotreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynSDGoalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynSDGoalInfo::CopyFrom(const stSynSDGoalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynSDGoalInfo::IsInitialized() const {

  return true;
}

void stSynSDGoalInfo::Swap(stSynSDGoalInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cond_, other->cond_);
    std::swap(value_, other->value_);
    std::swap(hasgotreward_, other->hasgotreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynSDGoalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynSDGoalInfo_descriptor_;
  metadata.reflection = stSynSDGoalInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRet7DayActivityInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRet7DayActivityInfo_ProtoModID_descriptor_;
}
bool stRet7DayActivityInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRet7DayActivityInfo_ProtoModID stRet7DayActivityInfo::ModID;
const stRet7DayActivityInfo_ProtoModID stRet7DayActivityInfo::ProtoModID_MIN;
const stRet7DayActivityInfo_ProtoModID stRet7DayActivityInfo::ProtoModID_MAX;
const int stRet7DayActivityInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRet7DayActivityInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRet7DayActivityInfo_ProtoFunID_descriptor_;
}
bool stRet7DayActivityInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 83:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRet7DayActivityInfo_ProtoFunID stRet7DayActivityInfo::FunID;
const stRet7DayActivityInfo_ProtoFunID stRet7DayActivityInfo::ProtoFunID_MIN;
const stRet7DayActivityInfo_ProtoFunID stRet7DayActivityInfo::ProtoFunID_MAX;
const int stRet7DayActivityInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRet7DayActivityInfo::kDayFieldNumber;
const int stRet7DayActivityInfo::kLoginGoalFieldNumber;
const int stRet7DayActivityInfo::kGifBagGoalFieldNumber;
const int stRet7DayActivityInfo::kModule1GoalFieldNumber;
const int stRet7DayActivityInfo::kModule2GoalFieldNumber;
#endif  // !_MSC_VER

stRet7DayActivityInfo::stRet7DayActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRet7DayActivityInfo::InitAsDefaultInstance() {
}

stRet7DayActivityInfo::stRet7DayActivityInfo(const stRet7DayActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRet7DayActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRet7DayActivityInfo::~stRet7DayActivityInfo() {
  SharedDtor();
}

void stRet7DayActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRet7DayActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRet7DayActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRet7DayActivityInfo_descriptor_;
}

const stRet7DayActivityInfo& stRet7DayActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRet7DayActivityInfo* stRet7DayActivityInfo::default_instance_ = NULL;

stRet7DayActivityInfo* stRet7DayActivityInfo::New() const {
  return new stRet7DayActivityInfo;
}

void stRet7DayActivityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
  }
  logingoal_.Clear();
  gifbaggoal_.Clear();
  module1goal_.Clear();
  module2goal_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRet7DayActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginGoal;
        break;
      }

      // repeated .MiscProto.stSynSDGoalInfo loginGoal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginGoal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_logingoal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginGoal;
        if (input->ExpectTag(26)) goto parse_gifBagGoal;
        break;
      }

      // repeated .MiscProto.stSynSDGoalInfo gifBagGoal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gifBagGoal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gifbaggoal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gifBagGoal;
        if (input->ExpectTag(34)) goto parse_module1Goal;
        break;
      }

      // repeated .MiscProto.stSynSDGoalInfo module1Goal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module1Goal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module1goal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_module1Goal;
        if (input->ExpectTag(42)) goto parse_module2Goal;
        break;
      }

      // repeated .MiscProto.stSynSDGoalInfo module2Goal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module2Goal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_module2goal()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_module2Goal;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRet7DayActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // repeated .MiscProto.stSynSDGoalInfo loginGoal = 2;
  for (int i = 0; i < this->logingoal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->logingoal(i), output);
  }

  // repeated .MiscProto.stSynSDGoalInfo gifBagGoal = 3;
  for (int i = 0; i < this->gifbaggoal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gifbaggoal(i), output);
  }

  // repeated .MiscProto.stSynSDGoalInfo module1Goal = 4;
  for (int i = 0; i < this->module1goal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->module1goal(i), output);
  }

  // repeated .MiscProto.stSynSDGoalInfo module2Goal = 5;
  for (int i = 0; i < this->module2goal_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->module2goal(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRet7DayActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // repeated .MiscProto.stSynSDGoalInfo loginGoal = 2;
  for (int i = 0; i < this->logingoal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->logingoal(i), target);
  }

  // repeated .MiscProto.stSynSDGoalInfo gifBagGoal = 3;
  for (int i = 0; i < this->gifbaggoal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gifbaggoal(i), target);
  }

  // repeated .MiscProto.stSynSDGoalInfo module1Goal = 4;
  for (int i = 0; i < this->module1goal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->module1goal(i), target);
  }

  // repeated .MiscProto.stSynSDGoalInfo module2Goal = 5;
  for (int i = 0; i < this->module2goal_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->module2goal(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRet7DayActivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  // repeated .MiscProto.stSynSDGoalInfo loginGoal = 2;
  total_size += 1 * this->logingoal_size();
  for (int i = 0; i < this->logingoal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->logingoal(i));
  }

  // repeated .MiscProto.stSynSDGoalInfo gifBagGoal = 3;
  total_size += 1 * this->gifbaggoal_size();
  for (int i = 0; i < this->gifbaggoal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gifbaggoal(i));
  }

  // repeated .MiscProto.stSynSDGoalInfo module1Goal = 4;
  total_size += 1 * this->module1goal_size();
  for (int i = 0; i < this->module1goal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module1goal(i));
  }

  // repeated .MiscProto.stSynSDGoalInfo module2Goal = 5;
  total_size += 1 * this->module2goal_size();
  for (int i = 0; i < this->module2goal_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->module2goal(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRet7DayActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRet7DayActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRet7DayActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRet7DayActivityInfo::MergeFrom(const stRet7DayActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  logingoal_.MergeFrom(from.logingoal_);
  gifbaggoal_.MergeFrom(from.gifbaggoal_);
  module1goal_.MergeFrom(from.module1goal_);
  module2goal_.MergeFrom(from.module2goal_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRet7DayActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRet7DayActivityInfo::CopyFrom(const stRet7DayActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRet7DayActivityInfo::IsInitialized() const {

  return true;
}

void stRet7DayActivityInfo::Swap(stRet7DayActivityInfo* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    logingoal_.Swap(&other->logingoal_);
    gifbaggoal_.Swap(&other->gifbaggoal_);
    module1goal_.Swap(&other->module1goal_);
    module2goal_.Swap(&other->module2goal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRet7DayActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRet7DayActivityInfo_descriptor_;
  metadata.reflection = stRet7DayActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSevenDayReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSevenDayReward_ProtoModID_descriptor_;
}
bool stReqSevenDayReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSevenDayReward_ProtoModID stReqSevenDayReward::ModID;
const stReqSevenDayReward_ProtoModID stReqSevenDayReward::ProtoModID_MIN;
const stReqSevenDayReward_ProtoModID stReqSevenDayReward::ProtoModID_MAX;
const int stReqSevenDayReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSevenDayReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSevenDayReward_ProtoFunID_descriptor_;
}
bool stReqSevenDayReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 84:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSevenDayReward_ProtoFunID stReqSevenDayReward::FunID;
const stReqSevenDayReward_ProtoFunID stReqSevenDayReward::ProtoFunID_MIN;
const stReqSevenDayReward_ProtoFunID stReqSevenDayReward::ProtoFunID_MAX;
const int stReqSevenDayReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSevenDayReward::kDayFieldNumber;
const int stReqSevenDayReward::kGoalTypeFieldNumber;
const int stReqSevenDayReward::kIdFieldNumber;
#endif  // !_MSC_VER

stReqSevenDayReward::stReqSevenDayReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSevenDayReward::InitAsDefaultInstance() {
}

stReqSevenDayReward::stReqSevenDayReward(const stReqSevenDayReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSevenDayReward::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  goaltype_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSevenDayReward::~stReqSevenDayReward() {
  SharedDtor();
}

void stReqSevenDayReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSevenDayReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSevenDayReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSevenDayReward_descriptor_;
}

const stReqSevenDayReward& stReqSevenDayReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqSevenDayReward* stReqSevenDayReward::default_instance_ = NULL;

stReqSevenDayReward* stReqSevenDayReward::New() const {
  return new stReqSevenDayReward;
}

void stReqSevenDayReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
    goaltype_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSevenDayReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goalType;
        break;
      }

      // optional uint32 goalType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goaltype_)));
          set_has_goaltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSevenDayReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // optional uint32 goalType = 2;
  if (has_goaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goaltype(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSevenDayReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // optional uint32 goalType = 2;
  if (has_goaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goaltype(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSevenDayReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 goalType = 2;
    if (has_goaltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goaltype());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSevenDayReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSevenDayReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSevenDayReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSevenDayReward::MergeFrom(const stReqSevenDayReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_goaltype()) {
      set_goaltype(from.goaltype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSevenDayReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSevenDayReward::CopyFrom(const stReqSevenDayReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSevenDayReward::IsInitialized() const {

  return true;
}

void stReqSevenDayReward::Swap(stReqSevenDayReward* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(goaltype_, other->goaltype_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSevenDayReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSevenDayReward_descriptor_;
  metadata.reflection = stReqSevenDayReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSevenDayRewardRet_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSevenDayRewardRet_eResult_descriptor_;
}
bool stSevenDayRewardRet_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSevenDayRewardRet_eResult stSevenDayRewardRet::eSuccess;
const stSevenDayRewardRet_eResult stSevenDayRewardRet::eCond_Not_Meet;
const stSevenDayRewardRet_eResult stSevenDayRewardRet::eHas_Got_Reward;
const stSevenDayRewardRet_eResult stSevenDayRewardRet::eInner_Error;
const stSevenDayRewardRet_eResult stSevenDayRewardRet::eBag_Full;
const stSevenDayRewardRet_eResult stSevenDayRewardRet::eNot_Enough_Diamond;
const stSevenDayRewardRet_eResult stSevenDayRewardRet::eResult_MIN;
const stSevenDayRewardRet_eResult stSevenDayRewardRet::eResult_MAX;
const int stSevenDayRewardRet::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSevenDayRewardRet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSevenDayRewardRet_ProtoModID_descriptor_;
}
bool stSevenDayRewardRet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSevenDayRewardRet_ProtoModID stSevenDayRewardRet::ModID;
const stSevenDayRewardRet_ProtoModID stSevenDayRewardRet::ProtoModID_MIN;
const stSevenDayRewardRet_ProtoModID stSevenDayRewardRet::ProtoModID_MAX;
const int stSevenDayRewardRet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSevenDayRewardRet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSevenDayRewardRet_ProtoFunID_descriptor_;
}
bool stSevenDayRewardRet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 85:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSevenDayRewardRet_ProtoFunID stSevenDayRewardRet::FunID;
const stSevenDayRewardRet_ProtoFunID stSevenDayRewardRet::ProtoFunID_MIN;
const stSevenDayRewardRet_ProtoFunID stSevenDayRewardRet::ProtoFunID_MAX;
const int stSevenDayRewardRet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSevenDayRewardRet::kResultFieldNumber;
const int stSevenDayRewardRet::kGoalTypeFieldNumber;
const int stSevenDayRewardRet::kIdFieldNumber;
const int stSevenDayRewardRet::kDayFieldNumber;
#endif  // !_MSC_VER

stSevenDayRewardRet::stSevenDayRewardRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSevenDayRewardRet::InitAsDefaultInstance() {
}

stSevenDayRewardRet::stSevenDayRewardRet(const stSevenDayRewardRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSevenDayRewardRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  goaltype_ = 0u;
  id_ = 0u;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSevenDayRewardRet::~stSevenDayRewardRet() {
  SharedDtor();
}

void stSevenDayRewardRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSevenDayRewardRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSevenDayRewardRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSevenDayRewardRet_descriptor_;
}

const stSevenDayRewardRet& stSevenDayRewardRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSevenDayRewardRet* stSevenDayRewardRet::default_instance_ = NULL;

stSevenDayRewardRet* stSevenDayRewardRet::New() const {
  return new stSevenDayRewardRet;
}

void stSevenDayRewardRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    goaltype_ = 0u;
    id_ = 0u;
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSevenDayRewardRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stSevenDayRewardRet.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stSevenDayRewardRet_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stSevenDayRewardRet_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goalType;
        break;
      }

      // optional uint32 goalType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goalType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goaltype_)));
          set_has_goaltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_day;
        break;
      }

      // optional uint32 day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSevenDayRewardRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stSevenDayRewardRet.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 goalType = 2;
  if (has_goaltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->goaltype(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional uint32 day = 4;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSevenDayRewardRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stSevenDayRewardRet.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 goalType = 2;
  if (has_goaltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->goaltype(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional uint32 day = 4;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSevenDayRewardRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stSevenDayRewardRet.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 goalType = 2;
    if (has_goaltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goaltype());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 day = 4;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSevenDayRewardRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSevenDayRewardRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSevenDayRewardRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSevenDayRewardRet::MergeFrom(const stSevenDayRewardRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_goaltype()) {
      set_goaltype(from.goaltype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSevenDayRewardRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSevenDayRewardRet::CopyFrom(const stSevenDayRewardRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSevenDayRewardRet::IsInitialized() const {

  return true;
}

void stSevenDayRewardRet::Swap(stSevenDayRewardRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(goaltype_, other->goaltype_);
    std::swap(id_, other->id_);
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSevenDayRewardRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSevenDayRewardRet_descriptor_;
  metadata.reflection = stSevenDayRewardRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSevenDayHasRewardTip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSevenDayHasRewardTip_ProtoModID_descriptor_;
}
bool stSevenDayHasRewardTip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSevenDayHasRewardTip_ProtoModID stSevenDayHasRewardTip::ModID;
const stSevenDayHasRewardTip_ProtoModID stSevenDayHasRewardTip::ProtoModID_MIN;
const stSevenDayHasRewardTip_ProtoModID stSevenDayHasRewardTip::ProtoModID_MAX;
const int stSevenDayHasRewardTip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSevenDayHasRewardTip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSevenDayHasRewardTip_ProtoFunID_descriptor_;
}
bool stSevenDayHasRewardTip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 86:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSevenDayHasRewardTip_ProtoFunID stSevenDayHasRewardTip::FunID;
const stSevenDayHasRewardTip_ProtoFunID stSevenDayHasRewardTip::ProtoFunID_MIN;
const stSevenDayHasRewardTip_ProtoFunID stSevenDayHasRewardTip::ProtoFunID_MAX;
const int stSevenDayHasRewardTip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSevenDayHasRewardTip::kDayFieldNumber;
const int stSevenDayHasRewardTip::kHasRewardFieldNumber;
#endif  // !_MSC_VER

stSevenDayHasRewardTip::stSevenDayHasRewardTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSevenDayHasRewardTip::InitAsDefaultInstance() {
}

stSevenDayHasRewardTip::stSevenDayHasRewardTip(const stSevenDayHasRewardTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSevenDayHasRewardTip::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  hasreward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSevenDayHasRewardTip::~stSevenDayHasRewardTip() {
  SharedDtor();
}

void stSevenDayHasRewardTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSevenDayHasRewardTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSevenDayHasRewardTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSevenDayHasRewardTip_descriptor_;
}

const stSevenDayHasRewardTip& stSevenDayHasRewardTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSevenDayHasRewardTip* stSevenDayHasRewardTip::default_instance_ = NULL;

stSevenDayHasRewardTip* stSevenDayHasRewardTip::New() const {
  return new stSevenDayHasRewardTip;
}

void stSevenDayHasRewardTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
    hasreward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSevenDayHasRewardTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasReward;
        break;
      }

      // optional bool hasReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasreward_)));
          set_has_hasreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSevenDayHasRewardTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  // optional bool hasReward = 2;
  if (has_hasreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->hasreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSevenDayHasRewardTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  // optional bool hasReward = 2;
  if (has_hasreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->hasreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSevenDayHasRewardTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional bool hasReward = 2;
    if (has_hasreward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSevenDayHasRewardTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSevenDayHasRewardTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSevenDayHasRewardTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSevenDayHasRewardTip::MergeFrom(const stSevenDayHasRewardTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hasreward()) {
      set_hasreward(from.hasreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSevenDayHasRewardTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSevenDayHasRewardTip::CopyFrom(const stSevenDayHasRewardTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSevenDayHasRewardTip::IsInitialized() const {

  return true;
}

void stSevenDayHasRewardTip::Swap(stSevenDayHasRewardTip* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(hasreward_, other->hasreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSevenDayHasRewardTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSevenDayHasRewardTip_descriptor_;
  metadata.reflection = stSevenDayHasRewardTip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAppStoreCfg_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAppStoreCfg_ProtoModID_descriptor_;
}
bool stAppStoreCfg_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAppStoreCfg_ProtoModID stAppStoreCfg::ModID;
const stAppStoreCfg_ProtoModID stAppStoreCfg::ProtoModID_MIN;
const stAppStoreCfg_ProtoModID stAppStoreCfg::ProtoModID_MAX;
const int stAppStoreCfg::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAppStoreCfg_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAppStoreCfg_ProtoFunID_descriptor_;
}
bool stAppStoreCfg_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 87:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAppStoreCfg_ProtoFunID stAppStoreCfg::FunID;
const stAppStoreCfg_ProtoFunID stAppStoreCfg::ProtoFunID_MIN;
const stAppStoreCfg_ProtoFunID stAppStoreCfg::ProtoFunID_MAX;
const int stAppStoreCfg::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAppStoreCfg::kOpenAppVersionFieldNumber;
const int stAppStoreCfg::kIsSandboxFieldNumber;
const int stAppStoreCfg::kDirectBuyFieldNumber;
#endif  // !_MSC_VER

stAppStoreCfg::stAppStoreCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAppStoreCfg::InitAsDefaultInstance() {
}

stAppStoreCfg::stAppStoreCfg(const stAppStoreCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAppStoreCfg::SharedCtor() {
  _cached_size_ = 0;
  openappversion_ = false;
  issandbox_ = false;
  directbuy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAppStoreCfg::~stAppStoreCfg() {
  SharedDtor();
}

void stAppStoreCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAppStoreCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAppStoreCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAppStoreCfg_descriptor_;
}

const stAppStoreCfg& stAppStoreCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stAppStoreCfg* stAppStoreCfg::default_instance_ = NULL;

stAppStoreCfg* stAppStoreCfg::New() const {
  return new stAppStoreCfg;
}

void stAppStoreCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    openappversion_ = false;
    issandbox_ = false;
    directbuy_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAppStoreCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool openAppVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &openappversion_)));
          set_has_openappversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isSandbox;
        break;
      }

      // optional bool isSandbox = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSandbox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issandbox_)));
          set_has_issandbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_directBuy;
        break;
      }

      // optional bool directBuy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_directBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &directbuy_)));
          set_has_directbuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAppStoreCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool openAppVersion = 1;
  if (has_openappversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->openappversion(), output);
  }

  // optional bool isSandbox = 2;
  if (has_issandbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issandbox(), output);
  }

  // optional bool directBuy = 3;
  if (has_directbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->directbuy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAppStoreCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool openAppVersion = 1;
  if (has_openappversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->openappversion(), target);
  }

  // optional bool isSandbox = 2;
  if (has_issandbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issandbox(), target);
  }

  // optional bool directBuy = 3;
  if (has_directbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->directbuy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAppStoreCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool openAppVersion = 1;
    if (has_openappversion()) {
      total_size += 1 + 1;
    }

    // optional bool isSandbox = 2;
    if (has_issandbox()) {
      total_size += 1 + 1;
    }

    // optional bool directBuy = 3;
    if (has_directbuy()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAppStoreCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAppStoreCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAppStoreCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAppStoreCfg::MergeFrom(const stAppStoreCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openappversion()) {
      set_openappversion(from.openappversion());
    }
    if (from.has_issandbox()) {
      set_issandbox(from.issandbox());
    }
    if (from.has_directbuy()) {
      set_directbuy(from.directbuy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAppStoreCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAppStoreCfg::CopyFrom(const stAppStoreCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAppStoreCfg::IsInitialized() const {

  return true;
}

void stAppStoreCfg::Swap(stAppStoreCfg* other) {
  if (other != this) {
    std::swap(openappversion_, other->openappversion_);
    std::swap(issandbox_, other->issandbox_);
    std::swap(directbuy_, other->directbuy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAppStoreCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAppStoreCfg_descriptor_;
  metadata.reflection = stAppStoreCfg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOpenWindowTip_eAction_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenWindowTip_eAction_descriptor_;
}
bool stOpenWindowTip_eAction_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenWindowTip_eAction stOpenWindowTip::eNotify_Download_New_Version;
const stOpenWindowTip_eAction stOpenWindowTip::eAction_MIN;
const stOpenWindowTip_eAction stOpenWindowTip::eAction_MAX;
const int stOpenWindowTip::eAction_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenWindowTip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenWindowTip_ProtoModID_descriptor_;
}
bool stOpenWindowTip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenWindowTip_ProtoModID stOpenWindowTip::ModID;
const stOpenWindowTip_ProtoModID stOpenWindowTip::ProtoModID_MIN;
const stOpenWindowTip_ProtoModID stOpenWindowTip::ProtoModID_MAX;
const int stOpenWindowTip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenWindowTip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenWindowTip_ProtoFunID_descriptor_;
}
bool stOpenWindowTip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 88:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenWindowTip_ProtoFunID stOpenWindowTip::FunID;
const stOpenWindowTip_ProtoFunID stOpenWindowTip::ProtoFunID_MIN;
const stOpenWindowTip_ProtoFunID stOpenWindowTip::ProtoFunID_MAX;
const int stOpenWindowTip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOpenWindowTip::kActionFieldNumber;
const int stOpenWindowTip::kContentFieldNumber;
#endif  // !_MSC_VER

stOpenWindowTip::stOpenWindowTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOpenWindowTip::InitAsDefaultInstance() {
}

stOpenWindowTip::stOpenWindowTip(const stOpenWindowTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOpenWindowTip::SharedCtor() {
  _cached_size_ = 0;
  action_ = 1;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOpenWindowTip::~stOpenWindowTip() {
  SharedDtor();
}

void stOpenWindowTip::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void stOpenWindowTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOpenWindowTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenWindowTip_descriptor_;
}

const stOpenWindowTip& stOpenWindowTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stOpenWindowTip* stOpenWindowTip::default_instance_ = NULL;

stOpenWindowTip* stOpenWindowTip::New() const {
  return new stOpenWindowTip;
}

void stOpenWindowTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    action_ = 1;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOpenWindowTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stOpenWindowTip.eAction action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stOpenWindowTip_eAction_IsValid(value)) {
            set_action(static_cast< ::MiscProto::stOpenWindowTip_eAction >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOpenWindowTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stOpenWindowTip.eAction action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOpenWindowTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stOpenWindowTip.eAction action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->action(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOpenWindowTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stOpenWindowTip.eAction action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOpenWindowTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOpenWindowTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOpenWindowTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOpenWindowTip::MergeFrom(const stOpenWindowTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOpenWindowTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOpenWindowTip::CopyFrom(const stOpenWindowTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOpenWindowTip::IsInitialized() const {

  return true;
}

void stOpenWindowTip::Swap(stOpenWindowTip* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOpenWindowTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOpenWindowTip_descriptor_;
  metadata.reflection = stOpenWindowTip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRechargeActivityList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRechargeActivityList_ProtoModID_descriptor_;
}
bool stReqRechargeActivityList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRechargeActivityList_ProtoModID stReqRechargeActivityList::ModID;
const stReqRechargeActivityList_ProtoModID stReqRechargeActivityList::ProtoModID_MIN;
const stReqRechargeActivityList_ProtoModID stReqRechargeActivityList::ProtoModID_MAX;
const int stReqRechargeActivityList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRechargeActivityList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRechargeActivityList_ProtoFunID_descriptor_;
}
bool stReqRechargeActivityList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 89:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRechargeActivityList_ProtoFunID stReqRechargeActivityList::FunID;
const stReqRechargeActivityList_ProtoFunID stReqRechargeActivityList::ProtoFunID_MIN;
const stReqRechargeActivityList_ProtoFunID stReqRechargeActivityList::ProtoFunID_MAX;
const int stReqRechargeActivityList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRechargeActivityList::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqRechargeActivityList::stReqRechargeActivityList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRechargeActivityList::InitAsDefaultInstance() {
}

stReqRechargeActivityList::stReqRechargeActivityList(const stReqRechargeActivityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRechargeActivityList::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRechargeActivityList::~stReqRechargeActivityList() {
  SharedDtor();
}

void stReqRechargeActivityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRechargeActivityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRechargeActivityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRechargeActivityList_descriptor_;
}

const stReqRechargeActivityList& stReqRechargeActivityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqRechargeActivityList* stReqRechargeActivityList::default_instance_ = NULL;

stReqRechargeActivityList* stReqRechargeActivityList::New() const {
  return new stReqRechargeActivityList;
}

void stReqRechargeActivityList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRechargeActivityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRechargeActivityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRechargeActivityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRechargeActivityList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRechargeActivityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRechargeActivityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRechargeActivityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRechargeActivityList::MergeFrom(const stReqRechargeActivityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRechargeActivityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRechargeActivityList::CopyFrom(const stReqRechargeActivityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRechargeActivityList::IsInitialized() const {

  return true;
}

void stReqRechargeActivityList::Swap(stReqRechargeActivityList* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRechargeActivityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRechargeActivityList_descriptor_;
  metadata.reflection = stReqRechargeActivityList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynRechargeActivityInfo::kIdFieldNumber;
const int stSynRechargeActivityInfo::kRechargeNumFieldNumber;
const int stSynRechargeActivityInfo::kGotRewardStepsFieldNumber;
#endif  // !_MSC_VER

stSynRechargeActivityInfo::stSynRechargeActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRechargeActivityInfo::InitAsDefaultInstance() {
}

stSynRechargeActivityInfo::stSynRechargeActivityInfo(const stSynRechargeActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRechargeActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rechargenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRechargeActivityInfo::~stSynRechargeActivityInfo() {
  SharedDtor();
}

void stSynRechargeActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRechargeActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRechargeActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRechargeActivityInfo_descriptor_;
}

const stSynRechargeActivityInfo& stSynRechargeActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynRechargeActivityInfo* stSynRechargeActivityInfo::default_instance_ = NULL;

stSynRechargeActivityInfo* stSynRechargeActivityInfo::New() const {
  return new stSynRechargeActivityInfo;
}

void stSynRechargeActivityInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    rechargenum_ = 0u;
  }
  gotrewardsteps_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRechargeActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rechargeNum;
        break;
      }

      // optional uint32 rechargeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargenum_)));
          set_has_rechargenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gotRewardSteps;
        break;
      }

      // repeated uint32 gotRewardSteps = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gotRewardSteps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_gotrewardsteps())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gotrewardsteps())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gotRewardSteps;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRechargeActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 rechargeNum = 2;
  if (has_rechargenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rechargenum(), output);
  }

  // repeated uint32 gotRewardSteps = 3;
  for (int i = 0; i < this->gotrewardsteps_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->gotrewardsteps(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRechargeActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 rechargeNum = 2;
  if (has_rechargenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rechargenum(), target);
  }

  // repeated uint32 gotRewardSteps = 3;
  for (int i = 0; i < this->gotrewardsteps_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->gotrewardsteps(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRechargeActivityInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 rechargeNum = 2;
    if (has_rechargenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargenum());
    }

  }
  // repeated uint32 gotRewardSteps = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gotrewardsteps_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gotrewardsteps(i));
    }
    total_size += 1 * this->gotrewardsteps_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRechargeActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRechargeActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRechargeActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRechargeActivityInfo::MergeFrom(const stSynRechargeActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gotrewardsteps_.MergeFrom(from.gotrewardsteps_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rechargenum()) {
      set_rechargenum(from.rechargenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRechargeActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRechargeActivityInfo::CopyFrom(const stSynRechargeActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRechargeActivityInfo::IsInitialized() const {

  return true;
}

void stSynRechargeActivityInfo::Swap(stSynRechargeActivityInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rechargenum_, other->rechargenum_);
    gotrewardsteps_.Swap(&other->gotrewardsteps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRechargeActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRechargeActivityInfo_descriptor_;
  metadata.reflection = stSynRechargeActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRechargeActivityList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRechargeActivityList_ProtoModID_descriptor_;
}
bool stRetRechargeActivityList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRechargeActivityList_ProtoModID stRetRechargeActivityList::ModID;
const stRetRechargeActivityList_ProtoModID stRetRechargeActivityList::ProtoModID_MIN;
const stRetRechargeActivityList_ProtoModID stRetRechargeActivityList::ProtoModID_MAX;
const int stRetRechargeActivityList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRechargeActivityList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRechargeActivityList_ProtoFunID_descriptor_;
}
bool stRetRechargeActivityList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 90:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRechargeActivityList_ProtoFunID stRetRechargeActivityList::FunID;
const stRetRechargeActivityList_ProtoFunID stRetRechargeActivityList::ProtoFunID_MIN;
const stRetRechargeActivityList_ProtoFunID stRetRechargeActivityList::ProtoFunID_MAX;
const int stRetRechargeActivityList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRechargeActivityList::kInfosFieldNumber;
#endif  // !_MSC_VER

stRetRechargeActivityList::stRetRechargeActivityList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRechargeActivityList::InitAsDefaultInstance() {
}

stRetRechargeActivityList::stRetRechargeActivityList(const stRetRechargeActivityList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRechargeActivityList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRechargeActivityList::~stRetRechargeActivityList() {
  SharedDtor();
}

void stRetRechargeActivityList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRechargeActivityList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRechargeActivityList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRechargeActivityList_descriptor_;
}

const stRetRechargeActivityList& stRetRechargeActivityList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetRechargeActivityList* stRetRechargeActivityList::default_instance_ = NULL;

stRetRechargeActivityList* stRetRechargeActivityList::New() const {
  return new stRetRechargeActivityList;
}

void stRetRechargeActivityList::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRechargeActivityList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stSynRechargeActivityInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRechargeActivityList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stSynRechargeActivityInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRechargeActivityList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stSynRechargeActivityInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRechargeActivityList::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stSynRechargeActivityInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRechargeActivityList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRechargeActivityList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRechargeActivityList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRechargeActivityList::MergeFrom(const stRetRechargeActivityList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRechargeActivityList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRechargeActivityList::CopyFrom(const stRetRechargeActivityList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRechargeActivityList::IsInitialized() const {

  return true;
}

void stRetRechargeActivityList::Swap(stRetRechargeActivityList* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRechargeActivityList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRechargeActivityList_descriptor_;
  metadata.reflection = stRetRechargeActivityList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRechargeActivtiyReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRechargeActivtiyReward_ProtoModID_descriptor_;
}
bool stReqRechargeActivtiyReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRechargeActivtiyReward_ProtoModID stReqRechargeActivtiyReward::ModID;
const stReqRechargeActivtiyReward_ProtoModID stReqRechargeActivtiyReward::ProtoModID_MIN;
const stReqRechargeActivtiyReward_ProtoModID stReqRechargeActivtiyReward::ProtoModID_MAX;
const int stReqRechargeActivtiyReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRechargeActivtiyReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRechargeActivtiyReward_ProtoFunID_descriptor_;
}
bool stReqRechargeActivtiyReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 91:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRechargeActivtiyReward_ProtoFunID stReqRechargeActivtiyReward::FunID;
const stReqRechargeActivtiyReward_ProtoFunID stReqRechargeActivtiyReward::ProtoFunID_MIN;
const stReqRechargeActivtiyReward_ProtoFunID stReqRechargeActivtiyReward::ProtoFunID_MAX;
const int stReqRechargeActivtiyReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRechargeActivtiyReward::kActivityIDFieldNumber;
const int stReqRechargeActivtiyReward::kStepIDFieldNumber;
#endif  // !_MSC_VER

stReqRechargeActivtiyReward::stReqRechargeActivtiyReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRechargeActivtiyReward::InitAsDefaultInstance() {
}

stReqRechargeActivtiyReward::stReqRechargeActivtiyReward(const stReqRechargeActivtiyReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRechargeActivtiyReward::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  stepid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRechargeActivtiyReward::~stReqRechargeActivtiyReward() {
  SharedDtor();
}

void stReqRechargeActivtiyReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRechargeActivtiyReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRechargeActivtiyReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRechargeActivtiyReward_descriptor_;
}

const stReqRechargeActivtiyReward& stReqRechargeActivtiyReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqRechargeActivtiyReward* stReqRechargeActivtiyReward::default_instance_ = NULL;

stReqRechargeActivtiyReward* stReqRechargeActivtiyReward::New() const {
  return new stReqRechargeActivtiyReward;
}

void stReqRechargeActivtiyReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    stepid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRechargeActivtiyReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRechargeActivtiyReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stepid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRechargeActivtiyReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stepid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRechargeActivtiyReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 stepID = 2;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRechargeActivtiyReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRechargeActivtiyReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRechargeActivtiyReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRechargeActivtiyReward::MergeFrom(const stReqRechargeActivtiyReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRechargeActivtiyReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRechargeActivtiyReward::CopyFrom(const stReqRechargeActivtiyReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRechargeActivtiyReward::IsInitialized() const {

  return true;
}

void stReqRechargeActivtiyReward::Swap(stReqRechargeActivtiyReward* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(stepid_, other->stepid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRechargeActivtiyReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRechargeActivtiyReward_descriptor_;
  metadata.reflection = stReqRechargeActivtiyReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRechargeActivityReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRechargeActivityReward_eResult_descriptor_;
}
bool stRetRechargeActivityReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRechargeActivityReward_eResult stRetRechargeActivityReward::eSuccess;
const stRetRechargeActivityReward_eResult stRetRechargeActivityReward::eCond_Not_Meet;
const stRetRechargeActivityReward_eResult stRetRechargeActivityReward::eBagFull;
const stRetRechargeActivityReward_eResult stRetRechargeActivityReward::eHas_Got_Reward;
const stRetRechargeActivityReward_eResult stRetRechargeActivityReward::eInner_Error;
const stRetRechargeActivityReward_eResult stRetRechargeActivityReward::eResult_MIN;
const stRetRechargeActivityReward_eResult stRetRechargeActivityReward::eResult_MAX;
const int stRetRechargeActivityReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRechargeActivityReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRechargeActivityReward_ProtoModID_descriptor_;
}
bool stRetRechargeActivityReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRechargeActivityReward_ProtoModID stRetRechargeActivityReward::ModID;
const stRetRechargeActivityReward_ProtoModID stRetRechargeActivityReward::ProtoModID_MIN;
const stRetRechargeActivityReward_ProtoModID stRetRechargeActivityReward::ProtoModID_MAX;
const int stRetRechargeActivityReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRechargeActivityReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRechargeActivityReward_ProtoFunID_descriptor_;
}
bool stRetRechargeActivityReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 92:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRechargeActivityReward_ProtoFunID stRetRechargeActivityReward::FunID;
const stRetRechargeActivityReward_ProtoFunID stRetRechargeActivityReward::ProtoFunID_MIN;
const stRetRechargeActivityReward_ProtoFunID stRetRechargeActivityReward::ProtoFunID_MAX;
const int stRetRechargeActivityReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRechargeActivityReward::kActivityIDFieldNumber;
const int stRetRechargeActivityReward::kStepIDFieldNumber;
const int stRetRechargeActivityReward::kResultFieldNumber;
#endif  // !_MSC_VER

stRetRechargeActivityReward::stRetRechargeActivityReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRechargeActivityReward::InitAsDefaultInstance() {
}

stRetRechargeActivityReward::stRetRechargeActivityReward(const stRetRechargeActivityReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRechargeActivityReward::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  stepid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRechargeActivityReward::~stRetRechargeActivityReward() {
  SharedDtor();
}

void stRetRechargeActivityReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRechargeActivityReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRechargeActivityReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRechargeActivityReward_descriptor_;
}

const stRetRechargeActivityReward& stRetRechargeActivityReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetRechargeActivityReward* stRetRechargeActivityReward::default_instance_ = NULL;

stRetRechargeActivityReward* stRetRechargeActivityReward::New() const {
  return new stRetRechargeActivityReward;
}

void stRetRechargeActivityReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    stepid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRechargeActivityReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .MiscProto.stRetRechargeActivityReward.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetRechargeActivityReward_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetRechargeActivityReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRechargeActivityReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stepid(), output);
  }

  // optional .MiscProto.stRetRechargeActivityReward.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRechargeActivityReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stepid(), target);
  }

  // optional .MiscProto.stRetRechargeActivityReward.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRechargeActivityReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 stepID = 2;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional .MiscProto.stRetRechargeActivityReward.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRechargeActivityReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRechargeActivityReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRechargeActivityReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRechargeActivityReward::MergeFrom(const stRetRechargeActivityReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRechargeActivityReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRechargeActivityReward::CopyFrom(const stRetRechargeActivityReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRechargeActivityReward::IsInitialized() const {

  return true;
}

void stRetRechargeActivityReward::Swap(stRetRechargeActivityReward* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(stepid_, other->stepid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRechargeActivityReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRechargeActivityReward_descriptor_;
  metadata.reflection = stRetRechargeActivityReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynInvestigation::kQuestIDFieldNumber;
const int stSynInvestigation::kLevelsFieldNumber;
#endif  // !_MSC_VER

stSynInvestigation::stSynInvestigation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynInvestigation::InitAsDefaultInstance() {
}

stSynInvestigation::stSynInvestigation(const stSynInvestigation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynInvestigation::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynInvestigation::~stSynInvestigation() {
  SharedDtor();
}

void stSynInvestigation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynInvestigation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynInvestigation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynInvestigation_descriptor_;
}

const stSynInvestigation& stSynInvestigation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynInvestigation* stSynInvestigation::default_instance_ = NULL;

stSynInvestigation* stSynInvestigation::New() const {
  return new stSynInvestigation;
}

void stSynInvestigation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
  }
  levels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynInvestigation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levels;
        break;
      }

      // repeated uint32 levels = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levels:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_levels())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_levels())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynInvestigation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questID = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // repeated uint32 levels = 2;
  for (int i = 0; i < this->levels_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->levels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynInvestigation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questID = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // repeated uint32 levels = 2;
  for (int i = 0; i < this->levels_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->levels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynInvestigation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questID = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

  }
  // repeated uint32 levels = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->levels_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->levels(i));
    }
    total_size += 1 * this->levels_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynInvestigation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynInvestigation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynInvestigation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynInvestigation::MergeFrom(const stSynInvestigation& from) {
  GOOGLE_CHECK_NE(&from, this);
  levels_.MergeFrom(from.levels_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynInvestigation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynInvestigation::CopyFrom(const stSynInvestigation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynInvestigation::IsInitialized() const {

  return true;
}

void stSynInvestigation::Swap(stSynInvestigation* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    levels_.Swap(&other->levels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynInvestigation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynInvestigation_descriptor_;
  metadata.reflection = stSynInvestigation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynAllInvestigation_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllInvestigation_ProtoModID_descriptor_;
}
bool stSynAllInvestigation_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllInvestigation_ProtoModID stSynAllInvestigation::ModID;
const stSynAllInvestigation_ProtoModID stSynAllInvestigation::ProtoModID_MIN;
const stSynAllInvestigation_ProtoModID stSynAllInvestigation::ProtoModID_MAX;
const int stSynAllInvestigation::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynAllInvestigation_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllInvestigation_ProtoFunID_descriptor_;
}
bool stSynAllInvestigation_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 93:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllInvestigation_ProtoFunID stSynAllInvestigation::FunID;
const stSynAllInvestigation_ProtoFunID stSynAllInvestigation::ProtoFunID_MIN;
const stSynAllInvestigation_ProtoFunID stSynAllInvestigation::ProtoFunID_MAX;
const int stSynAllInvestigation::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynAllInvestigation::kInfosFieldNumber;
#endif  // !_MSC_VER

stSynAllInvestigation::stSynAllInvestigation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynAllInvestigation::InitAsDefaultInstance() {
}

stSynAllInvestigation::stSynAllInvestigation(const stSynAllInvestigation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynAllInvestigation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynAllInvestigation::~stSynAllInvestigation() {
  SharedDtor();
}

void stSynAllInvestigation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynAllInvestigation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynAllInvestigation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllInvestigation_descriptor_;
}

const stSynAllInvestigation& stSynAllInvestigation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynAllInvestigation* stSynAllInvestigation::default_instance_ = NULL;

stSynAllInvestigation* stSynAllInvestigation::New() const {
  return new stSynAllInvestigation;
}

void stSynAllInvestigation::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynAllInvestigation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stSynInvestigation infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynAllInvestigation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stSynInvestigation infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynAllInvestigation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stSynInvestigation infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynAllInvestigation::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stSynInvestigation infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynAllInvestigation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynAllInvestigation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynAllInvestigation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynAllInvestigation::MergeFrom(const stSynAllInvestigation& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynAllInvestigation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynAllInvestigation::CopyFrom(const stSynAllInvestigation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynAllInvestigation::IsInitialized() const {

  return true;
}

void stSynAllInvestigation::Swap(stSynAllInvestigation* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynAllInvestigation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynAllInvestigation_descriptor_;
  metadata.reflection = stSynAllInvestigation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stInvestAnswer::kProblemIDFieldNumber;
const int stInvestAnswer::kAnswerAFieldNumber;
const int stInvestAnswer::kAnswerBFieldNumber;
const int stInvestAnswer::kAnswerCFieldNumber;
const int stInvestAnswer::kAnswerDFieldNumber;
const int stInvestAnswer::kAnswerEFieldNumber;
const int stInvestAnswer::kAnswerFFieldNumber;
const int stInvestAnswer::kAnswerGFieldNumber;
const int stInvestAnswer::kAnswerHFieldNumber;
const int stInvestAnswer::kAnswerIFieldNumber;
const int stInvestAnswer::kAnswerJFieldNumber;
#endif  // !_MSC_VER

stInvestAnswer::stInvestAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInvestAnswer::InitAsDefaultInstance() {
}

stInvestAnswer::stInvestAnswer(const stInvestAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInvestAnswer::SharedCtor() {
  _cached_size_ = 0;
  problemid_ = 0u;
  answera_ = false;
  answerb_ = false;
  answerc_ = false;
  answerd_ = false;
  answere_ = false;
  answerf_ = false;
  answerg_ = false;
  answerh_ = false;
  answeri_ = false;
  answerj_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInvestAnswer::~stInvestAnswer() {
  SharedDtor();
}

void stInvestAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInvestAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInvestAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvestAnswer_descriptor_;
}

const stInvestAnswer& stInvestAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stInvestAnswer* stInvestAnswer::default_instance_ = NULL;

stInvestAnswer* stInvestAnswer::New() const {
  return new stInvestAnswer;
}

void stInvestAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    problemid_ = 0u;
    answera_ = false;
    answerb_ = false;
    answerc_ = false;
    answerd_ = false;
    answere_ = false;
    answerf_ = false;
    answerg_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    answerh_ = false;
    answeri_ = false;
    answerj_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInvestAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 problemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &problemid_)));
          set_has_problemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_answerA;
        break;
      }

      // optional bool answerA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answera_)));
          set_has_answera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_answerB;
        break;
      }

      // optional bool answerB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerb_)));
          set_has_answerb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_answerC;
        break;
      }

      // optional bool answerC = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerc_)));
          set_has_answerc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_answerD;
        break;
      }

      // optional bool answerD = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerd_)));
          set_has_answerd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_answerE;
        break;
      }

      // optional bool answerE = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answere_)));
          set_has_answere();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_answerF;
        break;
      }

      // optional bool answerF = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerf_)));
          set_has_answerf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_answerG;
        break;
      }

      // optional bool answerG = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerg_)));
          set_has_answerg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_answerH;
        break;
      }

      // optional bool answerH = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerh_)));
          set_has_answerh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_answerI;
        break;
      }

      // optional bool answerI = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answeri_)));
          set_has_answeri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_answerJ;
        break;
      }

      // optional bool answerJ = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerJ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerj_)));
          set_has_answerj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInvestAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 problemID = 1;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->problemid(), output);
  }

  // optional bool answerA = 2;
  if (has_answera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->answera(), output);
  }

  // optional bool answerB = 3;
  if (has_answerb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->answerb(), output);
  }

  // optional bool answerC = 4;
  if (has_answerc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->answerc(), output);
  }

  // optional bool answerD = 5;
  if (has_answerd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->answerd(), output);
  }

  // optional bool answerE = 6;
  if (has_answere()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->answere(), output);
  }

  // optional bool answerF = 7;
  if (has_answerf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->answerf(), output);
  }

  // optional bool answerG = 8;
  if (has_answerg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->answerg(), output);
  }

  // optional bool answerH = 9;
  if (has_answerh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->answerh(), output);
  }

  // optional bool answerI = 10;
  if (has_answeri()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->answeri(), output);
  }

  // optional bool answerJ = 11;
  if (has_answerj()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->answerj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInvestAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 problemID = 1;
  if (has_problemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->problemid(), target);
  }

  // optional bool answerA = 2;
  if (has_answera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->answera(), target);
  }

  // optional bool answerB = 3;
  if (has_answerb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->answerb(), target);
  }

  // optional bool answerC = 4;
  if (has_answerc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->answerc(), target);
  }

  // optional bool answerD = 5;
  if (has_answerd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->answerd(), target);
  }

  // optional bool answerE = 6;
  if (has_answere()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->answere(), target);
  }

  // optional bool answerF = 7;
  if (has_answerf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->answerf(), target);
  }

  // optional bool answerG = 8;
  if (has_answerg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->answerg(), target);
  }

  // optional bool answerH = 9;
  if (has_answerh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->answerh(), target);
  }

  // optional bool answerI = 10;
  if (has_answeri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->answeri(), target);
  }

  // optional bool answerJ = 11;
  if (has_answerj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->answerj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInvestAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 problemID = 1;
    if (has_problemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->problemid());
    }

    // optional bool answerA = 2;
    if (has_answera()) {
      total_size += 1 + 1;
    }

    // optional bool answerB = 3;
    if (has_answerb()) {
      total_size += 1 + 1;
    }

    // optional bool answerC = 4;
    if (has_answerc()) {
      total_size += 1 + 1;
    }

    // optional bool answerD = 5;
    if (has_answerd()) {
      total_size += 1 + 1;
    }

    // optional bool answerE = 6;
    if (has_answere()) {
      total_size += 1 + 1;
    }

    // optional bool answerF = 7;
    if (has_answerf()) {
      total_size += 1 + 1;
    }

    // optional bool answerG = 8;
    if (has_answerg()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool answerH = 9;
    if (has_answerh()) {
      total_size += 1 + 1;
    }

    // optional bool answerI = 10;
    if (has_answeri()) {
      total_size += 1 + 1;
    }

    // optional bool answerJ = 11;
    if (has_answerj()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInvestAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInvestAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInvestAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInvestAnswer::MergeFrom(const stInvestAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_problemid()) {
      set_problemid(from.problemid());
    }
    if (from.has_answera()) {
      set_answera(from.answera());
    }
    if (from.has_answerb()) {
      set_answerb(from.answerb());
    }
    if (from.has_answerc()) {
      set_answerc(from.answerc());
    }
    if (from.has_answerd()) {
      set_answerd(from.answerd());
    }
    if (from.has_answere()) {
      set_answere(from.answere());
    }
    if (from.has_answerf()) {
      set_answerf(from.answerf());
    }
    if (from.has_answerg()) {
      set_answerg(from.answerg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_answerh()) {
      set_answerh(from.answerh());
    }
    if (from.has_answeri()) {
      set_answeri(from.answeri());
    }
    if (from.has_answerj()) {
      set_answerj(from.answerj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInvestAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInvestAnswer::CopyFrom(const stInvestAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInvestAnswer::IsInitialized() const {

  return true;
}

void stInvestAnswer::Swap(stInvestAnswer* other) {
  if (other != this) {
    std::swap(problemid_, other->problemid_);
    std::swap(answera_, other->answera_);
    std::swap(answerb_, other->answerb_);
    std::swap(answerc_, other->answerc_);
    std::swap(answerd_, other->answerd_);
    std::swap(answere_, other->answere_);
    std::swap(answerf_, other->answerf_);
    std::swap(answerg_, other->answerg_);
    std::swap(answerh_, other->answerh_);
    std::swap(answeri_, other->answeri_);
    std::swap(answerj_, other->answerj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInvestAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInvestAnswer_descriptor_;
  metadata.reflection = stInvestAnswer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqInvestgationReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInvestgationReward_ProtoModID_descriptor_;
}
bool stReqInvestgationReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqInvestgationReward_ProtoModID stReqInvestgationReward::ModID;
const stReqInvestgationReward_ProtoModID stReqInvestgationReward::ProtoModID_MIN;
const stReqInvestgationReward_ProtoModID stReqInvestgationReward::ProtoModID_MAX;
const int stReqInvestgationReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqInvestgationReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInvestgationReward_ProtoFunID_descriptor_;
}
bool stReqInvestgationReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 94:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqInvestgationReward_ProtoFunID stReqInvestgationReward::FunID;
const stReqInvestgationReward_ProtoFunID stReqInvestgationReward::ProtoFunID_MIN;
const stReqInvestgationReward_ProtoFunID stReqInvestgationReward::ProtoFunID_MAX;
const int stReqInvestgationReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqInvestgationReward::kQuestIDFieldNumber;
const int stReqInvestgationReward::kLevelFieldNumber;
const int stReqInvestgationReward::kAnswersFieldNumber;
const int stReqInvestgationReward::kUseTimeFieldNumber;
#endif  // !_MSC_VER

stReqInvestgationReward::stReqInvestgationReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqInvestgationReward::InitAsDefaultInstance() {
}

stReqInvestgationReward::stReqInvestgationReward(const stReqInvestgationReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqInvestgationReward::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  level_ = 0u;
  usetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqInvestgationReward::~stReqInvestgationReward() {
  SharedDtor();
}

void stReqInvestgationReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqInvestgationReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqInvestgationReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInvestgationReward_descriptor_;
}

const stReqInvestgationReward& stReqInvestgationReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqInvestgationReward* stReqInvestgationReward::default_instance_ = NULL;

stReqInvestgationReward* stReqInvestgationReward::New() const {
  return new stReqInvestgationReward;
}

void stReqInvestgationReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
    level_ = 0u;
    usetime_ = 0u;
  }
  answers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqInvestgationReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_answers;
        break;
      }

      // repeated .MiscProto.stInvestAnswer answers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_answers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_answers;
        if (input->ExpectTag(40)) goto parse_useTime;
        break;
      }

      // optional uint32 useTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetime_)));
          set_has_usetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqInvestgationReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questID = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // repeated .MiscProto.stInvestAnswer answers = 3;
  for (int i = 0; i < this->answers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->answers(i), output);
  }

  // optional uint32 useTime = 5;
  if (has_usetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->usetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqInvestgationReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questID = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // repeated .MiscProto.stInvestAnswer answers = 3;
  for (int i = 0; i < this->answers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->answers(i), target);
  }

  // optional uint32 useTime = 5;
  if (has_usetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->usetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqInvestgationReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questID = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 useTime = 5;
    if (has_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usetime());
    }

  }
  // repeated .MiscProto.stInvestAnswer answers = 3;
  total_size += 1 * this->answers_size();
  for (int i = 0; i < this->answers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->answers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqInvestgationReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqInvestgationReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqInvestgationReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqInvestgationReward::MergeFrom(const stReqInvestgationReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  answers_.MergeFrom(from.answers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_usetime()) {
      set_usetime(from.usetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqInvestgationReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqInvestgationReward::CopyFrom(const stReqInvestgationReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqInvestgationReward::IsInitialized() const {

  return true;
}

void stReqInvestgationReward::Swap(stReqInvestgationReward* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(level_, other->level_);
    answers_.Swap(&other->answers_);
    std::swap(usetime_, other->usetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqInvestgationReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqInvestgationReward_descriptor_;
  metadata.reflection = stReqInvestgationReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInvestgationRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvestgationRewardResult_eResult_descriptor_;
}
bool stInvestgationRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvestgationRewardResult_eResult stInvestgationRewardResult::eInner_Error;
const stInvestgationRewardResult_eResult stInvestgationRewardResult::eHas_Got_Reward;
const stInvestgationRewardResult_eResult stInvestgationRewardResult::eBag_Full;
const stInvestgationRewardResult_eResult stInvestgationRewardResult::eSuccess;
const stInvestgationRewardResult_eResult stInvestgationRewardResult::eResult_MIN;
const stInvestgationRewardResult_eResult stInvestgationRewardResult::eResult_MAX;
const int stInvestgationRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInvestgationRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvestgationRewardResult_ProtoModID_descriptor_;
}
bool stInvestgationRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvestgationRewardResult_ProtoModID stInvestgationRewardResult::ModID;
const stInvestgationRewardResult_ProtoModID stInvestgationRewardResult::ProtoModID_MIN;
const stInvestgationRewardResult_ProtoModID stInvestgationRewardResult::ProtoModID_MAX;
const int stInvestgationRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInvestgationRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvestgationRewardResult_ProtoFunID_descriptor_;
}
bool stInvestgationRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 95:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvestgationRewardResult_ProtoFunID stInvestgationRewardResult::FunID;
const stInvestgationRewardResult_ProtoFunID stInvestgationRewardResult::ProtoFunID_MIN;
const stInvestgationRewardResult_ProtoFunID stInvestgationRewardResult::ProtoFunID_MAX;
const int stInvestgationRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInvestgationRewardResult::kResultFieldNumber;
#endif  // !_MSC_VER

stInvestgationRewardResult::stInvestgationRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInvestgationRewardResult::InitAsDefaultInstance() {
}

stInvestgationRewardResult::stInvestgationRewardResult(const stInvestgationRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInvestgationRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInvestgationRewardResult::~stInvestgationRewardResult() {
  SharedDtor();
}

void stInvestgationRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInvestgationRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInvestgationRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvestgationRewardResult_descriptor_;
}

const stInvestgationRewardResult& stInvestgationRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stInvestgationRewardResult* stInvestgationRewardResult::default_instance_ = NULL;

stInvestgationRewardResult* stInvestgationRewardResult::New() const {
  return new stInvestgationRewardResult;
}

void stInvestgationRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInvestgationRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stInvestgationRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stInvestgationRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stInvestgationRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInvestgationRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stInvestgationRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInvestgationRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stInvestgationRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInvestgationRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stInvestgationRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInvestgationRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInvestgationRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInvestgationRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInvestgationRewardResult::MergeFrom(const stInvestgationRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInvestgationRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInvestgationRewardResult::CopyFrom(const stInvestgationRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInvestgationRewardResult::IsInitialized() const {

  return true;
}

void stInvestgationRewardResult::Swap(stInvestgationRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInvestgationRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInvestgationRewardResult_descriptor_;
  metadata.reflection = stInvestgationRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqActivityShop_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqActivityShop_ProtoModID_descriptor_;
}
bool stReqActivityShop_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqActivityShop_ProtoModID stReqActivityShop::ModID;
const stReqActivityShop_ProtoModID stReqActivityShop::ProtoModID_MIN;
const stReqActivityShop_ProtoModID stReqActivityShop::ProtoModID_MAX;
const int stReqActivityShop::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqActivityShop_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqActivityShop_ProtoFunID_descriptor_;
}
bool stReqActivityShop_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 96:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqActivityShop_ProtoFunID stReqActivityShop::FunID;
const stReqActivityShop_ProtoFunID stReqActivityShop::ProtoFunID_MIN;
const stReqActivityShop_ProtoFunID stReqActivityShop::ProtoFunID_MAX;
const int stReqActivityShop::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqActivityShop::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqActivityShop::stReqActivityShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqActivityShop::InitAsDefaultInstance() {
}

stReqActivityShop::stReqActivityShop(const stReqActivityShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqActivityShop::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqActivityShop::~stReqActivityShop() {
  SharedDtor();
}

void stReqActivityShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqActivityShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqActivityShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqActivityShop_descriptor_;
}

const stReqActivityShop& stReqActivityShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqActivityShop* stReqActivityShop::default_instance_ = NULL;

stReqActivityShop* stReqActivityShop::New() const {
  return new stReqActivityShop;
}

void stReqActivityShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqActivityShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqActivityShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqActivityShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqActivityShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqActivityShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqActivityShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqActivityShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqActivityShop::MergeFrom(const stReqActivityShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqActivityShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqActivityShop::CopyFrom(const stReqActivityShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqActivityShop::IsInitialized() const {

  return true;
}

void stReqActivityShop::Swap(stReqActivityShop* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqActivityShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqActivityShop_descriptor_;
  metadata.reflection = stReqActivityShop_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stActivityShopList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityShopList_ProtoModID_descriptor_;
}
bool stActivityShopList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActivityShopList_ProtoModID stActivityShopList::ModID;
const stActivityShopList_ProtoModID stActivityShopList::ProtoModID_MIN;
const stActivityShopList_ProtoModID stActivityShopList::ProtoModID_MAX;
const int stActivityShopList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stActivityShopList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityShopList_ProtoFunID_descriptor_;
}
bool stActivityShopList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 97:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActivityShopList_ProtoFunID stActivityShopList::FunID;
const stActivityShopList_ProtoFunID stActivityShopList::ProtoFunID_MIN;
const stActivityShopList_ProtoFunID stActivityShopList::ProtoFunID_MAX;
const int stActivityShopList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stActivityShopList::kActivityIDsFieldNumber;
#endif  // !_MSC_VER

stActivityShopList::stActivityShopList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stActivityShopList::InitAsDefaultInstance() {
}

stActivityShopList::stActivityShopList(const stActivityShopList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stActivityShopList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stActivityShopList::~stActivityShopList() {
  SharedDtor();
}

void stActivityShopList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stActivityShopList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stActivityShopList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityShopList_descriptor_;
}

const stActivityShopList& stActivityShopList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stActivityShopList* stActivityShopList::default_instance_ = NULL;

stActivityShopList* stActivityShopList::New() const {
  return new stActivityShopList;
}

void stActivityShopList::Clear() {
  activityids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stActivityShopList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 activityIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_activityids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_activityids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_activityIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stActivityShopList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 activityIDs = 1;
  for (int i = 0; i < this->activityids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->activityids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stActivityShopList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 activityIDs = 1;
  for (int i = 0; i < this->activityids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->activityids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stActivityShopList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 activityIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->activityids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->activityids(i));
    }
    total_size += 1 * this->activityids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stActivityShopList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stActivityShopList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stActivityShopList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stActivityShopList::MergeFrom(const stActivityShopList& from) {
  GOOGLE_CHECK_NE(&from, this);
  activityids_.MergeFrom(from.activityids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stActivityShopList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stActivityShopList::CopyFrom(const stActivityShopList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stActivityShopList::IsInitialized() const {

  return true;
}

void stActivityShopList::Swap(stActivityShopList* other) {
  if (other != this) {
    activityids_.Swap(&other->activityids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stActivityShopList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stActivityShopList_descriptor_;
  metadata.reflection = stActivityShopList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLuchShopInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuchShopInfo_ProtoModID_descriptor_;
}
bool stLuchShopInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLuchShopInfo_ProtoModID stLuchShopInfo::ModID;
const stLuchShopInfo_ProtoModID stLuchShopInfo::ProtoModID_MIN;
const stLuchShopInfo_ProtoModID stLuchShopInfo::ProtoModID_MAX;
const int stLuchShopInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLuchShopInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuchShopInfo_ProtoFunID_descriptor_;
}
bool stLuchShopInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 98:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLuchShopInfo_ProtoFunID stLuchShopInfo::FunID;
const stLuchShopInfo_ProtoFunID stLuchShopInfo::ProtoFunID_MIN;
const stLuchShopInfo_ProtoFunID stLuchShopInfo::ProtoFunID_MAX;
const int stLuchShopInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLuchShopInfo::kCurRewardVipLvFieldNumber;
const int stLuchShopInfo::kRandRewardEntryIDFieldNumber;
const int stLuchShopInfo::kHasGotRewardFieldNumber;
const int stLuchShopInfo::kTodayHasRechargeFieldNumber;
const int stLuchShopInfo::kOpenWindowTimeFieldNumber;
const int stLuchShopInfo::kRechargeMeetCondTimeFieldNumber;
const int stLuchShopInfo::kOpenSvrDayFieldNumber;
#endif  // !_MSC_VER

stLuchShopInfo::stLuchShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLuchShopInfo::InitAsDefaultInstance() {
}

stLuchShopInfo::stLuchShopInfo(const stLuchShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLuchShopInfo::SharedCtor() {
  _cached_size_ = 0;
  currewardviplv_ = 0u;
  randrewardentryid_ = 0u;
  hasgotreward_ = false;
  todayhasrecharge_ = 0u;
  openwindowtime_ = 0u;
  rechargemeetcondtime_ = 0u;
  opensvrday_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLuchShopInfo::~stLuchShopInfo() {
  SharedDtor();
}

void stLuchShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLuchShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLuchShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuchShopInfo_descriptor_;
}

const stLuchShopInfo& stLuchShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stLuchShopInfo* stLuchShopInfo::default_instance_ = NULL;

stLuchShopInfo* stLuchShopInfo::New() const {
  return new stLuchShopInfo;
}

void stLuchShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currewardviplv_ = 0u;
    randrewardentryid_ = 0u;
    hasgotreward_ = false;
    todayhasrecharge_ = 0u;
    openwindowtime_ = 0u;
    rechargemeetcondtime_ = 0u;
    opensvrday_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLuchShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curRewardVipLv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currewardviplv_)));
          set_has_currewardviplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_randRewardEntryID;
        break;
      }

      // optional uint32 randRewardEntryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randRewardEntryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randrewardentryid_)));
          set_has_randrewardentryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasGotReward;
        break;
      }

      // optional bool hasGotReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGotReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasgotreward_)));
          set_has_hasgotreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_todayHasRecharge;
        break;
      }

      // optional uint32 todayHasRecharge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayHasRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todayhasrecharge_)));
          set_has_todayhasrecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_openWindowTime;
        break;
      }

      // optional uint32 openWindowTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openWindowTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openwindowtime_)));
          set_has_openwindowtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rechargeMeetCondTime;
        break;
      }

      // optional uint32 rechargeMeetCondTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeMeetCondTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargemeetcondtime_)));
          set_has_rechargemeetcondtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_openSvrDay;
        break;
      }

      // optional uint32 openSvrDay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openSvrDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opensvrday_)));
          set_has_opensvrday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLuchShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curRewardVipLv = 1;
  if (has_currewardviplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->currewardviplv(), output);
  }

  // optional uint32 randRewardEntryID = 2;
  if (has_randrewardentryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->randrewardentryid(), output);
  }

  // optional bool hasGotReward = 3;
  if (has_hasgotreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->hasgotreward(), output);
  }

  // optional uint32 todayHasRecharge = 4;
  if (has_todayhasrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->todayhasrecharge(), output);
  }

  // optional uint32 openWindowTime = 5;
  if (has_openwindowtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->openwindowtime(), output);
  }

  // optional uint32 rechargeMeetCondTime = 6;
  if (has_rechargemeetcondtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->rechargemeetcondtime(), output);
  }

  // optional uint32 openSvrDay = 7;
  if (has_opensvrday()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->opensvrday(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLuchShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curRewardVipLv = 1;
  if (has_currewardviplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->currewardviplv(), target);
  }

  // optional uint32 randRewardEntryID = 2;
  if (has_randrewardentryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->randrewardentryid(), target);
  }

  // optional bool hasGotReward = 3;
  if (has_hasgotreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->hasgotreward(), target);
  }

  // optional uint32 todayHasRecharge = 4;
  if (has_todayhasrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->todayhasrecharge(), target);
  }

  // optional uint32 openWindowTime = 5;
  if (has_openwindowtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->openwindowtime(), target);
  }

  // optional uint32 rechargeMeetCondTime = 6;
  if (has_rechargemeetcondtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->rechargemeetcondtime(), target);
  }

  // optional uint32 openSvrDay = 7;
  if (has_opensvrday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->opensvrday(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLuchShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curRewardVipLv = 1;
    if (has_currewardviplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currewardviplv());
    }

    // optional uint32 randRewardEntryID = 2;
    if (has_randrewardentryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randrewardentryid());
    }

    // optional bool hasGotReward = 3;
    if (has_hasgotreward()) {
      total_size += 1 + 1;
    }

    // optional uint32 todayHasRecharge = 4;
    if (has_todayhasrecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todayhasrecharge());
    }

    // optional uint32 openWindowTime = 5;
    if (has_openwindowtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openwindowtime());
    }

    // optional uint32 rechargeMeetCondTime = 6;
    if (has_rechargemeetcondtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargemeetcondtime());
    }

    // optional uint32 openSvrDay = 7;
    if (has_opensvrday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opensvrday());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLuchShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLuchShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLuchShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLuchShopInfo::MergeFrom(const stLuchShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currewardviplv()) {
      set_currewardviplv(from.currewardviplv());
    }
    if (from.has_randrewardentryid()) {
      set_randrewardentryid(from.randrewardentryid());
    }
    if (from.has_hasgotreward()) {
      set_hasgotreward(from.hasgotreward());
    }
    if (from.has_todayhasrecharge()) {
      set_todayhasrecharge(from.todayhasrecharge());
    }
    if (from.has_openwindowtime()) {
      set_openwindowtime(from.openwindowtime());
    }
    if (from.has_rechargemeetcondtime()) {
      set_rechargemeetcondtime(from.rechargemeetcondtime());
    }
    if (from.has_opensvrday()) {
      set_opensvrday(from.opensvrday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLuchShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLuchShopInfo::CopyFrom(const stLuchShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLuchShopInfo::IsInitialized() const {

  return true;
}

void stLuchShopInfo::Swap(stLuchShopInfo* other) {
  if (other != this) {
    std::swap(currewardviplv_, other->currewardviplv_);
    std::swap(randrewardentryid_, other->randrewardentryid_);
    std::swap(hasgotreward_, other->hasgotreward_);
    std::swap(todayhasrecharge_, other->todayhasrecharge_);
    std::swap(openwindowtime_, other->openwindowtime_);
    std::swap(rechargemeetcondtime_, other->rechargemeetcondtime_);
    std::swap(opensvrday_, other->opensvrday_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLuchShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLuchShopInfo_descriptor_;
  metadata.reflection = stLuchShopInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynLuckShopTodayRecharge_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynLuckShopTodayRecharge_ProtoModID_descriptor_;
}
bool stSynLuckShopTodayRecharge_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynLuckShopTodayRecharge_ProtoModID stSynLuckShopTodayRecharge::ModID;
const stSynLuckShopTodayRecharge_ProtoModID stSynLuckShopTodayRecharge::ProtoModID_MIN;
const stSynLuckShopTodayRecharge_ProtoModID stSynLuckShopTodayRecharge::ProtoModID_MAX;
const int stSynLuckShopTodayRecharge::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynLuckShopTodayRecharge_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynLuckShopTodayRecharge_ProtoFunID_descriptor_;
}
bool stSynLuckShopTodayRecharge_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynLuckShopTodayRecharge_ProtoFunID stSynLuckShopTodayRecharge::FunID;
const stSynLuckShopTodayRecharge_ProtoFunID stSynLuckShopTodayRecharge::ProtoFunID_MIN;
const stSynLuckShopTodayRecharge_ProtoFunID stSynLuckShopTodayRecharge::ProtoFunID_MAX;
const int stSynLuckShopTodayRecharge::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynLuckShopTodayRecharge::kNumFieldNumber;
#endif  // !_MSC_VER

stSynLuckShopTodayRecharge::stSynLuckShopTodayRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynLuckShopTodayRecharge::InitAsDefaultInstance() {
}

stSynLuckShopTodayRecharge::stSynLuckShopTodayRecharge(const stSynLuckShopTodayRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynLuckShopTodayRecharge::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynLuckShopTodayRecharge::~stSynLuckShopTodayRecharge() {
  SharedDtor();
}

void stSynLuckShopTodayRecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynLuckShopTodayRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynLuckShopTodayRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynLuckShopTodayRecharge_descriptor_;
}

const stSynLuckShopTodayRecharge& stSynLuckShopTodayRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynLuckShopTodayRecharge* stSynLuckShopTodayRecharge::default_instance_ = NULL;

stSynLuckShopTodayRecharge* stSynLuckShopTodayRecharge::New() const {
  return new stSynLuckShopTodayRecharge;
}

void stSynLuckShopTodayRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynLuckShopTodayRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynLuckShopTodayRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynLuckShopTodayRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynLuckShopTodayRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynLuckShopTodayRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynLuckShopTodayRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynLuckShopTodayRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynLuckShopTodayRecharge::MergeFrom(const stSynLuckShopTodayRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynLuckShopTodayRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynLuckShopTodayRecharge::CopyFrom(const stSynLuckShopTodayRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynLuckShopTodayRecharge::IsInitialized() const {

  return true;
}

void stSynLuckShopTodayRecharge::Swap(stSynLuckShopTodayRecharge* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynLuckShopTodayRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynLuckShopTodayRecharge_descriptor_;
  metadata.reflection = stSynLuckShopTodayRecharge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLuckShopReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckShopReward_ProtoModID_descriptor_;
}
bool stReqLuckShopReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLuckShopReward_ProtoModID stReqLuckShopReward::ModID;
const stReqLuckShopReward_ProtoModID stReqLuckShopReward::ProtoModID_MIN;
const stReqLuckShopReward_ProtoModID stReqLuckShopReward::ProtoModID_MAX;
const int stReqLuckShopReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLuckShopReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckShopReward_ProtoFunID_descriptor_;
}
bool stReqLuckShopReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLuckShopReward_ProtoFunID stReqLuckShopReward::FunID;
const stReqLuckShopReward_ProtoFunID stReqLuckShopReward::ProtoFunID_MIN;
const stReqLuckShopReward_ProtoFunID stReqLuckShopReward::ProtoFunID_MAX;
const int stReqLuckShopReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLuckShopReward::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqLuckShopReward::stReqLuckShopReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLuckShopReward::InitAsDefaultInstance() {
}

stReqLuckShopReward::stReqLuckShopReward(const stReqLuckShopReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLuckShopReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLuckShopReward::~stReqLuckShopReward() {
  SharedDtor();
}

void stReqLuckShopReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLuckShopReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLuckShopReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckShopReward_descriptor_;
}

const stReqLuckShopReward& stReqLuckShopReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqLuckShopReward* stReqLuckShopReward::default_instance_ = NULL;

stReqLuckShopReward* stReqLuckShopReward::New() const {
  return new stReqLuckShopReward;
}

void stReqLuckShopReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLuckShopReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLuckShopReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLuckShopReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLuckShopReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLuckShopReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLuckShopReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLuckShopReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLuckShopReward::MergeFrom(const stReqLuckShopReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLuckShopReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLuckShopReward::CopyFrom(const stReqLuckShopReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLuckShopReward::IsInitialized() const {

  return true;
}

void stReqLuckShopReward::Swap(stReqLuckShopReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLuckShopReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLuckShopReward_descriptor_;
  metadata.reflection = stReqLuckShopReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLuckShopRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckShopRewardResult_eResult_descriptor_;
}
bool stLuckShopRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLuckShopRewardResult_eResult stLuckShopRewardResult::eSuccess;
const stLuckShopRewardResult_eResult stLuckShopRewardResult::eHas_Got_Reward;
const stLuckShopRewardResult_eResult stLuckShopRewardResult::eRecharge_Not_Enough;
const stLuckShopRewardResult_eResult stLuckShopRewardResult::eBag_Full;
const stLuckShopRewardResult_eResult stLuckShopRewardResult::eInner_Error;
const stLuckShopRewardResult_eResult stLuckShopRewardResult::eResult_MIN;
const stLuckShopRewardResult_eResult stLuckShopRewardResult::eResult_MAX;
const int stLuckShopRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLuckShopRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckShopRewardResult_ProtoModID_descriptor_;
}
bool stLuckShopRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLuckShopRewardResult_ProtoModID stLuckShopRewardResult::ModID;
const stLuckShopRewardResult_ProtoModID stLuckShopRewardResult::ProtoModID_MIN;
const stLuckShopRewardResult_ProtoModID stLuckShopRewardResult::ProtoModID_MAX;
const int stLuckShopRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLuckShopRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckShopRewardResult_ProtoFunID_descriptor_;
}
bool stLuckShopRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 101:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLuckShopRewardResult_ProtoFunID stLuckShopRewardResult::FunID;
const stLuckShopRewardResult_ProtoFunID stLuckShopRewardResult::ProtoFunID_MIN;
const stLuckShopRewardResult_ProtoFunID stLuckShopRewardResult::ProtoFunID_MAX;
const int stLuckShopRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLuckShopRewardResult::kResultFieldNumber;
#endif  // !_MSC_VER

stLuckShopRewardResult::stLuckShopRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLuckShopRewardResult::InitAsDefaultInstance() {
}

stLuckShopRewardResult::stLuckShopRewardResult(const stLuckShopRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLuckShopRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLuckShopRewardResult::~stLuckShopRewardResult() {
  SharedDtor();
}

void stLuckShopRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLuckShopRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLuckShopRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckShopRewardResult_descriptor_;
}

const stLuckShopRewardResult& stLuckShopRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stLuckShopRewardResult* stLuckShopRewardResult::default_instance_ = NULL;

stLuckShopRewardResult* stLuckShopRewardResult::New() const {
  return new stLuckShopRewardResult;
}

void stLuckShopRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLuckShopRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stLuckShopRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stLuckShopRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stLuckShopRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLuckShopRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stLuckShopRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLuckShopRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stLuckShopRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLuckShopRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stLuckShopRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLuckShopRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLuckShopRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLuckShopRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLuckShopRewardResult::MergeFrom(const stLuckShopRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLuckShopRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLuckShopRewardResult::CopyFrom(const stLuckShopRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLuckShopRewardResult::IsInitialized() const {

  return true;
}

void stLuckShopRewardResult::Swap(stLuckShopRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLuckShopRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLuckShopRewardResult_descriptor_;
  metadata.reflection = stLuckShopRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSaveOpenLuckShopWinTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveOpenLuckShopWinTime_ProtoModID_descriptor_;
}
bool stSaveOpenLuckShopWinTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSaveOpenLuckShopWinTime_ProtoModID stSaveOpenLuckShopWinTime::ModID;
const stSaveOpenLuckShopWinTime_ProtoModID stSaveOpenLuckShopWinTime::ProtoModID_MIN;
const stSaveOpenLuckShopWinTime_ProtoModID stSaveOpenLuckShopWinTime::ProtoModID_MAX;
const int stSaveOpenLuckShopWinTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSaveOpenLuckShopWinTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveOpenLuckShopWinTime_ProtoFunID_descriptor_;
}
bool stSaveOpenLuckShopWinTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSaveOpenLuckShopWinTime_ProtoFunID stSaveOpenLuckShopWinTime::FunID;
const stSaveOpenLuckShopWinTime_ProtoFunID stSaveOpenLuckShopWinTime::ProtoFunID_MIN;
const stSaveOpenLuckShopWinTime_ProtoFunID stSaveOpenLuckShopWinTime::ProtoFunID_MAX;
const int stSaveOpenLuckShopWinTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSaveOpenLuckShopWinTime::kCharIDFieldNumber;
#endif  // !_MSC_VER

stSaveOpenLuckShopWinTime::stSaveOpenLuckShopWinTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSaveOpenLuckShopWinTime::InitAsDefaultInstance() {
}

stSaveOpenLuckShopWinTime::stSaveOpenLuckShopWinTime(const stSaveOpenLuckShopWinTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSaveOpenLuckShopWinTime::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSaveOpenLuckShopWinTime::~stSaveOpenLuckShopWinTime() {
  SharedDtor();
}

void stSaveOpenLuckShopWinTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSaveOpenLuckShopWinTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSaveOpenLuckShopWinTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveOpenLuckShopWinTime_descriptor_;
}

const stSaveOpenLuckShopWinTime& stSaveOpenLuckShopWinTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSaveOpenLuckShopWinTime* stSaveOpenLuckShopWinTime::default_instance_ = NULL;

stSaveOpenLuckShopWinTime* stSaveOpenLuckShopWinTime::New() const {
  return new stSaveOpenLuckShopWinTime;
}

void stSaveOpenLuckShopWinTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSaveOpenLuckShopWinTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSaveOpenLuckShopWinTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSaveOpenLuckShopWinTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSaveOpenLuckShopWinTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSaveOpenLuckShopWinTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSaveOpenLuckShopWinTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSaveOpenLuckShopWinTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSaveOpenLuckShopWinTime::MergeFrom(const stSaveOpenLuckShopWinTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSaveOpenLuckShopWinTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSaveOpenLuckShopWinTime::CopyFrom(const stSaveOpenLuckShopWinTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSaveOpenLuckShopWinTime::IsInitialized() const {

  return true;
}

void stSaveOpenLuckShopWinTime::Swap(stSaveOpenLuckShopWinTime* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSaveOpenLuckShopWinTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSaveOpenLuckShopWinTime_descriptor_;
  metadata.reflection = stSaveOpenLuckShopWinTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLuckShopRechargeMeetCondTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckShopRechargeMeetCondTime_ProtoModID_descriptor_;
}
bool stLuckShopRechargeMeetCondTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLuckShopRechargeMeetCondTime_ProtoModID stLuckShopRechargeMeetCondTime::ModID;
const stLuckShopRechargeMeetCondTime_ProtoModID stLuckShopRechargeMeetCondTime::ProtoModID_MIN;
const stLuckShopRechargeMeetCondTime_ProtoModID stLuckShopRechargeMeetCondTime::ProtoModID_MAX;
const int stLuckShopRechargeMeetCondTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLuckShopRechargeMeetCondTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckShopRechargeMeetCondTime_ProtoFunID_descriptor_;
}
bool stLuckShopRechargeMeetCondTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 103:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLuckShopRechargeMeetCondTime_ProtoFunID stLuckShopRechargeMeetCondTime::FunID;
const stLuckShopRechargeMeetCondTime_ProtoFunID stLuckShopRechargeMeetCondTime::ProtoFunID_MIN;
const stLuckShopRechargeMeetCondTime_ProtoFunID stLuckShopRechargeMeetCondTime::ProtoFunID_MAX;
const int stLuckShopRechargeMeetCondTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLuckShopRechargeMeetCondTime::kMeetCondTimeFieldNumber;
#endif  // !_MSC_VER

stLuckShopRechargeMeetCondTime::stLuckShopRechargeMeetCondTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLuckShopRechargeMeetCondTime::InitAsDefaultInstance() {
}

stLuckShopRechargeMeetCondTime::stLuckShopRechargeMeetCondTime(const stLuckShopRechargeMeetCondTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLuckShopRechargeMeetCondTime::SharedCtor() {
  _cached_size_ = 0;
  meetcondtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLuckShopRechargeMeetCondTime::~stLuckShopRechargeMeetCondTime() {
  SharedDtor();
}

void stLuckShopRechargeMeetCondTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLuckShopRechargeMeetCondTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLuckShopRechargeMeetCondTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckShopRechargeMeetCondTime_descriptor_;
}

const stLuckShopRechargeMeetCondTime& stLuckShopRechargeMeetCondTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stLuckShopRechargeMeetCondTime* stLuckShopRechargeMeetCondTime::default_instance_ = NULL;

stLuckShopRechargeMeetCondTime* stLuckShopRechargeMeetCondTime::New() const {
  return new stLuckShopRechargeMeetCondTime;
}

void stLuckShopRechargeMeetCondTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    meetcondtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLuckShopRechargeMeetCondTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 meetCondTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &meetcondtime_)));
          set_has_meetcondtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLuckShopRechargeMeetCondTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 meetCondTime = 1;
  if (has_meetcondtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->meetcondtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLuckShopRechargeMeetCondTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 meetCondTime = 1;
  if (has_meetcondtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->meetcondtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLuckShopRechargeMeetCondTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 meetCondTime = 1;
    if (has_meetcondtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->meetcondtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLuckShopRechargeMeetCondTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLuckShopRechargeMeetCondTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLuckShopRechargeMeetCondTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLuckShopRechargeMeetCondTime::MergeFrom(const stLuckShopRechargeMeetCondTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meetcondtime()) {
      set_meetcondtime(from.meetcondtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLuckShopRechargeMeetCondTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLuckShopRechargeMeetCondTime::CopyFrom(const stLuckShopRechargeMeetCondTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLuckShopRechargeMeetCondTime::IsInitialized() const {

  return true;
}

void stLuckShopRechargeMeetCondTime::Swap(stLuckShopRechargeMeetCondTime* other) {
  if (other != this) {
    std::swap(meetcondtime_, other->meetcondtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLuckShopRechargeMeetCondTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLuckShopRechargeMeetCondTime_descriptor_;
  metadata.reflection = stLuckShopRechargeMeetCondTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenGuardWin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenGuardWin_ProtoModID_descriptor_;
}
bool stReqOpenGuardWin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenGuardWin_ProtoModID stReqOpenGuardWin::ModID;
const stReqOpenGuardWin_ProtoModID stReqOpenGuardWin::ProtoModID_MIN;
const stReqOpenGuardWin_ProtoModID stReqOpenGuardWin::ProtoModID_MAX;
const int stReqOpenGuardWin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenGuardWin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenGuardWin_ProtoFunID_descriptor_;
}
bool stReqOpenGuardWin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 104:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenGuardWin_ProtoFunID stReqOpenGuardWin::FunID;
const stReqOpenGuardWin_ProtoFunID stReqOpenGuardWin::ProtoFunID_MIN;
const stReqOpenGuardWin_ProtoFunID stReqOpenGuardWin::ProtoFunID_MAX;
const int stReqOpenGuardWin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenGuardWin::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenGuardWin::stReqOpenGuardWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenGuardWin::InitAsDefaultInstance() {
}

stReqOpenGuardWin::stReqOpenGuardWin(const stReqOpenGuardWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenGuardWin::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenGuardWin::~stReqOpenGuardWin() {
  SharedDtor();
}

void stReqOpenGuardWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenGuardWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenGuardWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenGuardWin_descriptor_;
}

const stReqOpenGuardWin& stReqOpenGuardWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqOpenGuardWin* stReqOpenGuardWin::default_instance_ = NULL;

stReqOpenGuardWin* stReqOpenGuardWin::New() const {
  return new stReqOpenGuardWin;
}

void stReqOpenGuardWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenGuardWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenGuardWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenGuardWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenGuardWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenGuardWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenGuardWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenGuardWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenGuardWin::MergeFrom(const stReqOpenGuardWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenGuardWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenGuardWin::CopyFrom(const stReqOpenGuardWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenGuardWin::IsInitialized() const {

  return true;
}

void stReqOpenGuardWin::Swap(stReqOpenGuardWin* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenGuardWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenGuardWin_descriptor_;
  metadata.reflection = stReqOpenGuardWin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGuardEnemy::kCharIDFieldNumber;
const int stGuardEnemy::kNameFieldNumber;
const int stGuardEnemy::kJobFieldNumber;
const int stGuardEnemy::kSexFieldNumber;
#endif  // !_MSC_VER

stGuardEnemy::stGuardEnemy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuardEnemy::InitAsDefaultInstance() {
}

stGuardEnemy::stGuardEnemy(const stGuardEnemy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuardEnemy::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuardEnemy::~stGuardEnemy() {
  SharedDtor();
}

void stGuardEnemy::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stGuardEnemy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuardEnemy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuardEnemy_descriptor_;
}

const stGuardEnemy& stGuardEnemy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGuardEnemy* stGuardEnemy::default_instance_ = NULL;

stGuardEnemy* stGuardEnemy::New() const {
  return new stGuardEnemy;
}

void stGuardEnemy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuardEnemy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuardEnemy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuardEnemy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuardEnemy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuardEnemy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuardEnemy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuardEnemy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuardEnemy::MergeFrom(const stGuardEnemy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuardEnemy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuardEnemy::CopyFrom(const stGuardEnemy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuardEnemy::IsInitialized() const {

  return true;
}

void stGuardEnemy::Swap(stGuardEnemy* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuardEnemy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuardEnemy_descriptor_;
  metadata.reflection = stGuardEnemy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGuardBaseInfo::kCharIDFieldNumber;
const int stGuardBaseInfo::kQualityFieldNumber;
const int stGuardBaseInfo::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

stGuardBaseInfo::stGuardBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuardBaseInfo::InitAsDefaultInstance() {
}

stGuardBaseInfo::stGuardBaseInfo(const stGuardBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuardBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  quality_ = 0u;
  remaintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuardBaseInfo::~stGuardBaseInfo() {
  SharedDtor();
}

void stGuardBaseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuardBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuardBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuardBaseInfo_descriptor_;
}

const stGuardBaseInfo& stGuardBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGuardBaseInfo* stGuardBaseInfo::default_instance_ = NULL;

stGuardBaseInfo* stGuardBaseInfo::New() const {
  return new stGuardBaseInfo;
}

void stGuardBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    quality_ = 0u;
    remaintime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuardBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remainTime;
        break;
      }

      // optional uint32 remainTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuardBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quality(), output);
  }

  // optional uint32 remainTime = 3;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remaintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuardBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quality(), target);
  }

  // optional uint32 remainTime = 3;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->remaintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuardBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 remainTime = 3;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuardBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuardBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuardBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuardBaseInfo::MergeFrom(const stGuardBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuardBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuardBaseInfo::CopyFrom(const stGuardBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuardBaseInfo::IsInitialized() const {

  return true;
}

void stGuardBaseInfo::Swap(stGuardBaseInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(quality_, other->quality_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuardBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuardBaseInfo_descriptor_;
  metadata.reflection = stGuardBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGuardDetailInfo::kCharIDFieldNumber;
const int stGuardDetailInfo::kNameFieldNumber;
const int stGuardDetailInfo::kQualityFieldNumber;
const int stGuardDetailInfo::kGuildNameFieldNumber;
const int stGuardDetailInfo::kFriendNameFieldNumber;
const int stGuardDetailInfo::kBeInterceptNumFieldNumber;
const int stGuardDetailInfo::kRemainTimeFieldNumber;
const int stGuardDetailInfo::kLevelFieldNumber;
const int stGuardDetailInfo::kInspiredNumFieldNumber;
#endif  // !_MSC_VER

stGuardDetailInfo::stGuardDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuardDetailInfo::InitAsDefaultInstance() {
}

stGuardDetailInfo::stGuardDetailInfo(const stGuardDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuardDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beinterceptnum_ = 0u;
  remaintime_ = 0u;
  level_ = 0u;
  inspirednum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuardDetailInfo::~stGuardDetailInfo() {
  SharedDtor();
}

void stGuardDetailInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void stGuardDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuardDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuardDetailInfo_descriptor_;
}

const stGuardDetailInfo& stGuardDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGuardDetailInfo* stGuardDetailInfo::default_instance_ = NULL;

stGuardDetailInfo* stGuardDetailInfo::New() const {
  return new stGuardDetailInfo;
}

void stGuardDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0u;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    beinterceptnum_ = 0u;
    remaintime_ = 0u;
    level_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    inspirednum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuardDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_guildName;
        break;
      }

      // optional string guildName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_friendName;
        break;
      }

      // optional string friendName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_beInterceptNum;
        break;
      }

      // optional uint32 beInterceptNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beInterceptNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beinterceptnum_)));
          set_has_beinterceptnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_remainTime;
        break;
      }

      // optional uint32 remainTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_level;
        break;
      }

      // optional uint32 level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_inspiredNum;
        break;
      }

      // optional uint32 inspiredNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inspiredNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inspirednum_)));
          set_has_inspirednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuardDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // optional string guildName = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->guildname(), output);
  }

  // optional string friendName = 5;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->friendname(), output);
  }

  // optional uint32 beInterceptNum = 6;
  if (has_beinterceptnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->beinterceptnum(), output);
  }

  // optional uint32 remainTime = 7;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->remaintime(), output);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->level(), output);
  }

  // optional uint32 inspiredNum = 9;
  if (has_inspirednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->inspirednum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuardDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  // optional string guildName = 4;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->guildname(), target);
  }

  // optional string friendName = 5;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->friendname(), target);
  }

  // optional uint32 beInterceptNum = 6;
  if (has_beinterceptnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->beinterceptnum(), target);
  }

  // optional uint32 remainTime = 7;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->remaintime(), target);
  }

  // optional uint32 level = 8;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->level(), target);
  }

  // optional uint32 inspiredNum = 9;
  if (has_inspirednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->inspirednum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuardDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional string guildName = 4;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional string friendName = 5;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // optional uint32 beInterceptNum = 6;
    if (has_beinterceptnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beinterceptnum());
    }

    // optional uint32 remainTime = 7;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

    // optional uint32 level = 8;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 inspiredNum = 9;
    if (has_inspirednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inspirednum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuardDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuardDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuardDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuardDetailInfo::MergeFrom(const stGuardDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_beinterceptnum()) {
      set_beinterceptnum(from.beinterceptnum());
    }
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_inspirednum()) {
      set_inspirednum(from.inspirednum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuardDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuardDetailInfo::CopyFrom(const stGuardDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuardDetailInfo::IsInitialized() const {

  return true;
}

void stGuardDetailInfo::Swap(stGuardDetailInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(guildname_, other->guildname_);
    std::swap(friendname_, other->friendname_);
    std::swap(beinterceptnum_, other->beinterceptnum_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(level_, other->level_);
    std::swap(inspirednum_, other->inspirednum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuardDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuardDetailInfo_descriptor_;
  metadata.reflection = stGuardDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuardWinInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuardWinInfo_ProtoModID_descriptor_;
}
bool stGuardWinInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuardWinInfo_ProtoModID stGuardWinInfo::ModID;
const stGuardWinInfo_ProtoModID stGuardWinInfo::ProtoModID_MIN;
const stGuardWinInfo_ProtoModID stGuardWinInfo::ProtoModID_MAX;
const int stGuardWinInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuardWinInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuardWinInfo_ProtoFunID_descriptor_;
}
bool stGuardWinInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 105:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuardWinInfo_ProtoFunID stGuardWinInfo::FunID;
const stGuardWinInfo_ProtoFunID stGuardWinInfo::ProtoFunID_MIN;
const stGuardWinInfo_ProtoFunID stGuardWinInfo::ProtoFunID_MAX;
const int stGuardWinInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuardWinInfo::kGuardNumFieldNumber;
const int stGuardWinInfo::kInterceptNumFieldNumber;
const int stGuardWinInfo::kHelpNumFieldNumber;
const int stGuardWinInfo::kEnemiesFieldNumber;
const int stGuardWinInfo::kGuardInfosFieldNumber;
const int stGuardWinInfo::kInterceptCDFieldNumber;
const int stGuardWinInfo::kGuardRemainTimeFieldNumber;
#endif  // !_MSC_VER

stGuardWinInfo::stGuardWinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuardWinInfo::InitAsDefaultInstance() {
}

stGuardWinInfo::stGuardWinInfo(const stGuardWinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuardWinInfo::SharedCtor() {
  _cached_size_ = 0;
  guardnum_ = 0u;
  interceptnum_ = 0u;
  helpnum_ = 0u;
  interceptcd_ = 0u;
  guardremaintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuardWinInfo::~stGuardWinInfo() {
  SharedDtor();
}

void stGuardWinInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuardWinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuardWinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuardWinInfo_descriptor_;
}

const stGuardWinInfo& stGuardWinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGuardWinInfo* stGuardWinInfo::default_instance_ = NULL;

stGuardWinInfo* stGuardWinInfo::New() const {
  return new stGuardWinInfo;
}

void stGuardWinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guardnum_ = 0u;
    interceptnum_ = 0u;
    helpnum_ = 0u;
    interceptcd_ = 0u;
    guardremaintime_ = 0u;
  }
  enemies_.Clear();
  guardinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuardWinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guardNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guardnum_)));
          set_has_guardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_interceptNum;
        break;
      }

      // optional uint32 interceptNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interceptNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interceptnum_)));
          set_has_interceptnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_helpNum;
        break;
      }

      // optional uint32 helpNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &helpnum_)));
          set_has_helpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_enemies;
        break;
      }

      // repeated .MiscProto.stGuardBaseInfo enemies = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enemies:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enemies()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_enemies;
        if (input->ExpectTag(42)) goto parse_guardInfos;
        break;
      }

      // repeated .MiscProto.stGuardBaseInfo guardInfos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guardInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guardinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guardInfos;
        if (input->ExpectTag(48)) goto parse_interceptCD;
        break;
      }

      // optional uint32 interceptCD = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interceptCD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interceptcd_)));
          set_has_interceptcd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_guardRemainTime;
        break;
      }

      // optional uint32 guardRemainTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guardRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guardremaintime_)));
          set_has_guardremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuardWinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guardNum = 1;
  if (has_guardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guardnum(), output);
  }

  // optional uint32 interceptNum = 2;
  if (has_interceptnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->interceptnum(), output);
  }

  // optional uint32 helpNum = 3;
  if (has_helpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->helpnum(), output);
  }

  // repeated .MiscProto.stGuardBaseInfo enemies = 4;
  for (int i = 0; i < this->enemies_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->enemies(i), output);
  }

  // repeated .MiscProto.stGuardBaseInfo guardInfos = 5;
  for (int i = 0; i < this->guardinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->guardinfos(i), output);
  }

  // optional uint32 interceptCD = 6;
  if (has_interceptcd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->interceptcd(), output);
  }

  // optional uint32 guardRemainTime = 7;
  if (has_guardremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->guardremaintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuardWinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guardNum = 1;
  if (has_guardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guardnum(), target);
  }

  // optional uint32 interceptNum = 2;
  if (has_interceptnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->interceptnum(), target);
  }

  // optional uint32 helpNum = 3;
  if (has_helpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->helpnum(), target);
  }

  // repeated .MiscProto.stGuardBaseInfo enemies = 4;
  for (int i = 0; i < this->enemies_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enemies(i), target);
  }

  // repeated .MiscProto.stGuardBaseInfo guardInfos = 5;
  for (int i = 0; i < this->guardinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->guardinfos(i), target);
  }

  // optional uint32 interceptCD = 6;
  if (has_interceptcd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->interceptcd(), target);
  }

  // optional uint32 guardRemainTime = 7;
  if (has_guardremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->guardremaintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuardWinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guardNum = 1;
    if (has_guardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guardnum());
    }

    // optional uint32 interceptNum = 2;
    if (has_interceptnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interceptnum());
    }

    // optional uint32 helpNum = 3;
    if (has_helpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->helpnum());
    }

    // optional uint32 interceptCD = 6;
    if (has_interceptcd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interceptcd());
    }

    // optional uint32 guardRemainTime = 7;
    if (has_guardremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guardremaintime());
    }

  }
  // repeated .MiscProto.stGuardBaseInfo enemies = 4;
  total_size += 1 * this->enemies_size();
  for (int i = 0; i < this->enemies_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enemies(i));
  }

  // repeated .MiscProto.stGuardBaseInfo guardInfos = 5;
  total_size += 1 * this->guardinfos_size();
  for (int i = 0; i < this->guardinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guardinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuardWinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuardWinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuardWinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuardWinInfo::MergeFrom(const stGuardWinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  enemies_.MergeFrom(from.enemies_);
  guardinfos_.MergeFrom(from.guardinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guardnum()) {
      set_guardnum(from.guardnum());
    }
    if (from.has_interceptnum()) {
      set_interceptnum(from.interceptnum());
    }
    if (from.has_helpnum()) {
      set_helpnum(from.helpnum());
    }
    if (from.has_interceptcd()) {
      set_interceptcd(from.interceptcd());
    }
    if (from.has_guardremaintime()) {
      set_guardremaintime(from.guardremaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuardWinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuardWinInfo::CopyFrom(const stGuardWinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuardWinInfo::IsInitialized() const {

  return true;
}

void stGuardWinInfo::Swap(stGuardWinInfo* other) {
  if (other != this) {
    std::swap(guardnum_, other->guardnum_);
    std::swap(interceptnum_, other->interceptnum_);
    std::swap(helpnum_, other->helpnum_);
    enemies_.Swap(&other->enemies_);
    guardinfos_.Swap(&other->guardinfos_);
    std::swap(interceptcd_, other->interceptcd_);
    std::swap(guardremaintime_, other->guardremaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuardWinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuardWinInfo_descriptor_;
  metadata.reflection = stGuardWinInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetInterceptCD_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptCD_ProtoModID_descriptor_;
}
bool stResetInterceptCD_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetInterceptCD_ProtoModID stResetInterceptCD::ModID;
const stResetInterceptCD_ProtoModID stResetInterceptCD::ProtoModID_MIN;
const stResetInterceptCD_ProtoModID stResetInterceptCD::ProtoModID_MAX;
const int stResetInterceptCD::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetInterceptCD_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptCD_ProtoFunID_descriptor_;
}
bool stResetInterceptCD_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 106:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetInterceptCD_ProtoFunID stResetInterceptCD::FunID;
const stResetInterceptCD_ProtoFunID stResetInterceptCD::ProtoFunID_MIN;
const stResetInterceptCD_ProtoFunID stResetInterceptCD::ProtoFunID_MAX;
const int stResetInterceptCD::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetInterceptCD::kCharIDFieldNumber;
#endif  // !_MSC_VER

stResetInterceptCD::stResetInterceptCD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetInterceptCD::InitAsDefaultInstance() {
}

stResetInterceptCD::stResetInterceptCD(const stResetInterceptCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetInterceptCD::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetInterceptCD::~stResetInterceptCD() {
  SharedDtor();
}

void stResetInterceptCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetInterceptCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetInterceptCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptCD_descriptor_;
}

const stResetInterceptCD& stResetInterceptCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stResetInterceptCD* stResetInterceptCD::default_instance_ = NULL;

stResetInterceptCD* stResetInterceptCD::New() const {
  return new stResetInterceptCD;
}

void stResetInterceptCD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetInterceptCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetInterceptCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetInterceptCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetInterceptCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetInterceptCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetInterceptCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetInterceptCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetInterceptCD::MergeFrom(const stResetInterceptCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetInterceptCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetInterceptCD::CopyFrom(const stResetInterceptCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetInterceptCD::IsInitialized() const {

  return true;
}

void stResetInterceptCD::Swap(stResetInterceptCD* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetInterceptCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetInterceptCD_descriptor_;
  metadata.reflection = stResetInterceptCD_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetInterceptCDResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptCDResult_eResult_descriptor_;
}
bool stResetInterceptCDResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetInterceptCDResult_eResult stResetInterceptCDResult::eSuccess;
const stResetInterceptCDResult_eResult stResetInterceptCDResult::eDiamond_Not_Enough;
const stResetInterceptCDResult_eResult stResetInterceptCDResult::eInner_Cfg_Error;
const stResetInterceptCDResult_eResult stResetInterceptCDResult::eResult_MIN;
const stResetInterceptCDResult_eResult stResetInterceptCDResult::eResult_MAX;
const int stResetInterceptCDResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetInterceptCDResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptCDResult_ProtoModID_descriptor_;
}
bool stResetInterceptCDResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetInterceptCDResult_ProtoModID stResetInterceptCDResult::ModID;
const stResetInterceptCDResult_ProtoModID stResetInterceptCDResult::ProtoModID_MIN;
const stResetInterceptCDResult_ProtoModID stResetInterceptCDResult::ProtoModID_MAX;
const int stResetInterceptCDResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetInterceptCDResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptCDResult_ProtoFunID_descriptor_;
}
bool stResetInterceptCDResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 107:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetInterceptCDResult_ProtoFunID stResetInterceptCDResult::FunID;
const stResetInterceptCDResult_ProtoFunID stResetInterceptCDResult::ProtoFunID_MIN;
const stResetInterceptCDResult_ProtoFunID stResetInterceptCDResult::ProtoFunID_MAX;
const int stResetInterceptCDResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetInterceptCDResult::kResultFieldNumber;
#endif  // !_MSC_VER

stResetInterceptCDResult::stResetInterceptCDResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetInterceptCDResult::InitAsDefaultInstance() {
}

stResetInterceptCDResult::stResetInterceptCDResult(const stResetInterceptCDResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetInterceptCDResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetInterceptCDResult::~stResetInterceptCDResult() {
  SharedDtor();
}

void stResetInterceptCDResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetInterceptCDResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetInterceptCDResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptCDResult_descriptor_;
}

const stResetInterceptCDResult& stResetInterceptCDResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stResetInterceptCDResult* stResetInterceptCDResult::default_instance_ = NULL;

stResetInterceptCDResult* stResetInterceptCDResult::New() const {
  return new stResetInterceptCDResult;
}

void stResetInterceptCDResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetInterceptCDResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stResetInterceptCDResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stResetInterceptCDResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stResetInterceptCDResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetInterceptCDResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stResetInterceptCDResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetInterceptCDResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stResetInterceptCDResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetInterceptCDResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stResetInterceptCDResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetInterceptCDResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetInterceptCDResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetInterceptCDResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetInterceptCDResult::MergeFrom(const stResetInterceptCDResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetInterceptCDResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetInterceptCDResult::CopyFrom(const stResetInterceptCDResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetInterceptCDResult::IsInitialized() const {

  return true;
}

void stResetInterceptCDResult::Swap(stResetInterceptCDResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetInterceptCDResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetInterceptCDResult_descriptor_;
  metadata.reflection = stResetInterceptCDResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetInterceptNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptNum_ProtoModID_descriptor_;
}
bool stResetInterceptNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetInterceptNum_ProtoModID stResetInterceptNum::ModID;
const stResetInterceptNum_ProtoModID stResetInterceptNum::ProtoModID_MIN;
const stResetInterceptNum_ProtoModID stResetInterceptNum::ProtoModID_MAX;
const int stResetInterceptNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetInterceptNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptNum_ProtoFunID_descriptor_;
}
bool stResetInterceptNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 108:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetInterceptNum_ProtoFunID stResetInterceptNum::FunID;
const stResetInterceptNum_ProtoFunID stResetInterceptNum::ProtoFunID_MIN;
const stResetInterceptNum_ProtoFunID stResetInterceptNum::ProtoFunID_MAX;
const int stResetInterceptNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetInterceptNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stResetInterceptNum::stResetInterceptNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetInterceptNum::InitAsDefaultInstance() {
}

stResetInterceptNum::stResetInterceptNum(const stResetInterceptNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetInterceptNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetInterceptNum::~stResetInterceptNum() {
  SharedDtor();
}

void stResetInterceptNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetInterceptNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetInterceptNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptNum_descriptor_;
}

const stResetInterceptNum& stResetInterceptNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stResetInterceptNum* stResetInterceptNum::default_instance_ = NULL;

stResetInterceptNum* stResetInterceptNum::New() const {
  return new stResetInterceptNum;
}

void stResetInterceptNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetInterceptNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetInterceptNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetInterceptNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetInterceptNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetInterceptNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetInterceptNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetInterceptNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetInterceptNum::MergeFrom(const stResetInterceptNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetInterceptNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetInterceptNum::CopyFrom(const stResetInterceptNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetInterceptNum::IsInitialized() const {

  return true;
}

void stResetInterceptNum::Swap(stResetInterceptNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetInterceptNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetInterceptNum_descriptor_;
  metadata.reflection = stResetInterceptNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResetInterceptNumResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptNumResult_eResult_descriptor_;
}
bool stResetInterceptNumResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetInterceptNumResult_eResult stResetInterceptNumResult::eSuccess;
const stResetInterceptNumResult_eResult stResetInterceptNumResult::eDiamond_Not_Enough;
const stResetInterceptNumResult_eResult stResetInterceptNumResult::eInner_Cfg_Error;
const stResetInterceptNumResult_eResult stResetInterceptNumResult::eNum_Use_Out;
const stResetInterceptNumResult_eResult stResetInterceptNumResult::eResult_MIN;
const stResetInterceptNumResult_eResult stResetInterceptNumResult::eResult_MAX;
const int stResetInterceptNumResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetInterceptNumResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptNumResult_ProtoModID_descriptor_;
}
bool stResetInterceptNumResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetInterceptNumResult_ProtoModID stResetInterceptNumResult::ModID;
const stResetInterceptNumResult_ProtoModID stResetInterceptNumResult::ProtoModID_MIN;
const stResetInterceptNumResult_ProtoModID stResetInterceptNumResult::ProtoModID_MAX;
const int stResetInterceptNumResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResetInterceptNumResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptNumResult_ProtoFunID_descriptor_;
}
bool stResetInterceptNumResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 109:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResetInterceptNumResult_ProtoFunID stResetInterceptNumResult::FunID;
const stResetInterceptNumResult_ProtoFunID stResetInterceptNumResult::ProtoFunID_MIN;
const stResetInterceptNumResult_ProtoFunID stResetInterceptNumResult::ProtoFunID_MAX;
const int stResetInterceptNumResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResetInterceptNumResult::kResultFieldNumber;
#endif  // !_MSC_VER

stResetInterceptNumResult::stResetInterceptNumResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResetInterceptNumResult::InitAsDefaultInstance() {
}

stResetInterceptNumResult::stResetInterceptNumResult(const stResetInterceptNumResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResetInterceptNumResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResetInterceptNumResult::~stResetInterceptNumResult() {
  SharedDtor();
}

void stResetInterceptNumResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResetInterceptNumResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResetInterceptNumResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResetInterceptNumResult_descriptor_;
}

const stResetInterceptNumResult& stResetInterceptNumResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stResetInterceptNumResult* stResetInterceptNumResult::default_instance_ = NULL;

stResetInterceptNumResult* stResetInterceptNumResult::New() const {
  return new stResetInterceptNumResult;
}

void stResetInterceptNumResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResetInterceptNumResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stResetInterceptNumResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stResetInterceptNumResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stResetInterceptNumResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResetInterceptNumResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stResetInterceptNumResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResetInterceptNumResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stResetInterceptNumResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResetInterceptNumResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stResetInterceptNumResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResetInterceptNumResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResetInterceptNumResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResetInterceptNumResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResetInterceptNumResult::MergeFrom(const stResetInterceptNumResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResetInterceptNumResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResetInterceptNumResult::CopyFrom(const stResetInterceptNumResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResetInterceptNumResult::IsInitialized() const {

  return true;
}

void stResetInterceptNumResult::Swap(stResetInterceptNumResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResetInterceptNumResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResetInterceptNumResult_descriptor_;
  metadata.reflection = stResetInterceptNumResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGuardDetailInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuardDetailInfo_ProtoModID_descriptor_;
}
bool stReqGuardDetailInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuardDetailInfo_ProtoModID stReqGuardDetailInfo::ModID;
const stReqGuardDetailInfo_ProtoModID stReqGuardDetailInfo::ProtoModID_MIN;
const stReqGuardDetailInfo_ProtoModID stReqGuardDetailInfo::ProtoModID_MAX;
const int stReqGuardDetailInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGuardDetailInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuardDetailInfo_ProtoFunID_descriptor_;
}
bool stReqGuardDetailInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 110:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuardDetailInfo_ProtoFunID stReqGuardDetailInfo::FunID;
const stReqGuardDetailInfo_ProtoFunID stReqGuardDetailInfo::ProtoFunID_MIN;
const stReqGuardDetailInfo_ProtoFunID stReqGuardDetailInfo::ProtoFunID_MAX;
const int stReqGuardDetailInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGuardDetailInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqGuardDetailInfo::stReqGuardDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGuardDetailInfo::InitAsDefaultInstance() {
}

stReqGuardDetailInfo::stReqGuardDetailInfo(const stReqGuardDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGuardDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGuardDetailInfo::~stReqGuardDetailInfo() {
  SharedDtor();
}

void stReqGuardDetailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGuardDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGuardDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuardDetailInfo_descriptor_;
}

const stReqGuardDetailInfo& stReqGuardDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqGuardDetailInfo* stReqGuardDetailInfo::default_instance_ = NULL;

stReqGuardDetailInfo* stReqGuardDetailInfo::New() const {
  return new stReqGuardDetailInfo;
}

void stReqGuardDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGuardDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGuardDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGuardDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGuardDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGuardDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGuardDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGuardDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGuardDetailInfo::MergeFrom(const stReqGuardDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGuardDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGuardDetailInfo::CopyFrom(const stReqGuardDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGuardDetailInfo::IsInitialized() const {

  return true;
}

void stReqGuardDetailInfo::Swap(stReqGuardDetailInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGuardDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGuardDetailInfo_descriptor_;
  metadata.reflection = stReqGuardDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetGuardDetailInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuardDetailInfo_ProtoModID_descriptor_;
}
bool stRetGuardDetailInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuardDetailInfo_ProtoModID stRetGuardDetailInfo::ModID;
const stRetGuardDetailInfo_ProtoModID stRetGuardDetailInfo::ProtoModID_MIN;
const stRetGuardDetailInfo_ProtoModID stRetGuardDetailInfo::ProtoModID_MAX;
const int stRetGuardDetailInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetGuardDetailInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuardDetailInfo_ProtoFunID_descriptor_;
}
bool stRetGuardDetailInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 111:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuardDetailInfo_ProtoFunID stRetGuardDetailInfo::FunID;
const stRetGuardDetailInfo_ProtoFunID stRetGuardDetailInfo::ProtoFunID_MIN;
const stRetGuardDetailInfo_ProtoFunID stRetGuardDetailInfo::ProtoFunID_MAX;
const int stRetGuardDetailInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetGuardDetailInfo::kDetailInfoFieldNumber;
#endif  // !_MSC_VER

stRetGuardDetailInfo::stRetGuardDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetGuardDetailInfo::InitAsDefaultInstance() {
  detailinfo_ = const_cast< ::MiscProto::stGuardDetailInfo*>(&::MiscProto::stGuardDetailInfo::default_instance());
}

stRetGuardDetailInfo::stRetGuardDetailInfo(const stRetGuardDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetGuardDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  detailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetGuardDetailInfo::~stRetGuardDetailInfo() {
  SharedDtor();
}

void stRetGuardDetailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete detailinfo_;
  }
}

void stRetGuardDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetGuardDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuardDetailInfo_descriptor_;
}

const stRetGuardDetailInfo& stRetGuardDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetGuardDetailInfo* stRetGuardDetailInfo::default_instance_ = NULL;

stRetGuardDetailInfo* stRetGuardDetailInfo::New() const {
  return new stRetGuardDetailInfo;
}

void stRetGuardDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_detailinfo()) {
      if (detailinfo_ != NULL) detailinfo_->::MiscProto::stGuardDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetGuardDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGuardDetailInfo detailInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetGuardDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGuardDetailInfo detailInfo = 1;
  if (has_detailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detailinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetGuardDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGuardDetailInfo detailInfo = 1;
  if (has_detailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detailinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetGuardDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGuardDetailInfo detailInfo = 1;
    if (has_detailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detailinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetGuardDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetGuardDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetGuardDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetGuardDetailInfo::MergeFrom(const stRetGuardDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_detailinfo()) {
      mutable_detailinfo()->::MiscProto::stGuardDetailInfo::MergeFrom(from.detailinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetGuardDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetGuardDetailInfo::CopyFrom(const stRetGuardDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetGuardDetailInfo::IsInitialized() const {

  return true;
}

void stRetGuardDetailInfo::Swap(stRetGuardDetailInfo* other) {
  if (other != this) {
    std::swap(detailinfo_, other->detailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetGuardDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetGuardDetailInfo_descriptor_;
  metadata.reflection = stRetGuardDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqIntercept_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIntercept_ProtoModID_descriptor_;
}
bool stReqIntercept_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqIntercept_ProtoModID stReqIntercept::ModID;
const stReqIntercept_ProtoModID stReqIntercept::ProtoModID_MIN;
const stReqIntercept_ProtoModID stReqIntercept::ProtoModID_MAX;
const int stReqIntercept::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqIntercept_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIntercept_ProtoFunID_descriptor_;
}
bool stReqIntercept_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 112:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqIntercept_ProtoFunID stReqIntercept::FunID;
const stReqIntercept_ProtoFunID stReqIntercept::ProtoFunID_MIN;
const stReqIntercept_ProtoFunID stReqIntercept::ProtoFunID_MAX;
const int stReqIntercept::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqIntercept::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqIntercept::stReqIntercept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqIntercept::InitAsDefaultInstance() {
}

stReqIntercept::stReqIntercept(const stReqIntercept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqIntercept::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqIntercept::~stReqIntercept() {
  SharedDtor();
}

void stReqIntercept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqIntercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqIntercept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIntercept_descriptor_;
}

const stReqIntercept& stReqIntercept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqIntercept* stReqIntercept::default_instance_ = NULL;

stReqIntercept* stReqIntercept::New() const {
  return new stReqIntercept;
}

void stReqIntercept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqIntercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqIntercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqIntercept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqIntercept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqIntercept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqIntercept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqIntercept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqIntercept::MergeFrom(const stReqIntercept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqIntercept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqIntercept::CopyFrom(const stReqIntercept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqIntercept::IsInitialized() const {

  return true;
}

void stReqIntercept::Swap(stReqIntercept* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqIntercept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqIntercept_descriptor_;
  metadata.reflection = stReqIntercept_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stIntercerptResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntercerptResult_eResult_descriptor_;
}
bool stIntercerptResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stIntercerptResult_eResult stIntercerptResult::eSuccess;
const stIntercerptResult_eResult stIntercerptResult::eNot_Begin_Guard;
const stIntercerptResult_eResult stIntercerptResult::eIntercept_Num_Use_Out;
const stIntercerptResult_eResult stIntercerptResult::eBeing_Intercepted;
const stIntercerptResult_eResult stIntercerptResult::eSafe_State;
const stIntercerptResult_eResult stIntercerptResult::eBeIntercept_Num_Use_Out;
const stIntercerptResult_eResult stIntercerptResult::eHelp_This_Guard;
const stIntercerptResult_eResult stIntercerptResult::eResult_MIN;
const stIntercerptResult_eResult stIntercerptResult::eResult_MAX;
const int stIntercerptResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stIntercerptResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntercerptResult_ProtoModID_descriptor_;
}
bool stIntercerptResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stIntercerptResult_ProtoModID stIntercerptResult::ModID;
const stIntercerptResult_ProtoModID stIntercerptResult::ProtoModID_MIN;
const stIntercerptResult_ProtoModID stIntercerptResult::ProtoModID_MAX;
const int stIntercerptResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stIntercerptResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntercerptResult_ProtoFunID_descriptor_;
}
bool stIntercerptResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 113:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stIntercerptResult_ProtoFunID stIntercerptResult::FunID;
const stIntercerptResult_ProtoFunID stIntercerptResult::ProtoFunID_MIN;
const stIntercerptResult_ProtoFunID stIntercerptResult::ProtoFunID_MAX;
const int stIntercerptResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stIntercerptResult::kResultFieldNumber;
#endif  // !_MSC_VER

stIntercerptResult::stIntercerptResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stIntercerptResult::InitAsDefaultInstance() {
}

stIntercerptResult::stIntercerptResult(const stIntercerptResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stIntercerptResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stIntercerptResult::~stIntercerptResult() {
  SharedDtor();
}

void stIntercerptResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stIntercerptResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stIntercerptResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntercerptResult_descriptor_;
}

const stIntercerptResult& stIntercerptResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stIntercerptResult* stIntercerptResult::default_instance_ = NULL;

stIntercerptResult* stIntercerptResult::New() const {
  return new stIntercerptResult;
}

void stIntercerptResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stIntercerptResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stIntercerptResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stIntercerptResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stIntercerptResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stIntercerptResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stIntercerptResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stIntercerptResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stIntercerptResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stIntercerptResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stIntercerptResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stIntercerptResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stIntercerptResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stIntercerptResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stIntercerptResult::MergeFrom(const stIntercerptResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stIntercerptResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stIntercerptResult::CopyFrom(const stIntercerptResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stIntercerptResult::IsInitialized() const {

  return true;
}

void stIntercerptResult::Swap(stIntercerptResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stIntercerptResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stIntercerptResult_descriptor_;
  metadata.reflection = stIntercerptResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGuard_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuard_ProtoModID_descriptor_;
}
bool stReqGuard_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuard_ProtoModID stReqGuard::ModID;
const stReqGuard_ProtoModID stReqGuard::ProtoModID_MIN;
const stReqGuard_ProtoModID stReqGuard::ProtoModID_MAX;
const int stReqGuard::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGuard_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuard_ProtoFunID_descriptor_;
}
bool stReqGuard_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 114:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuard_ProtoFunID stReqGuard::FunID;
const stReqGuard_ProtoFunID stReqGuard::ProtoFunID_MIN;
const stReqGuard_ProtoFunID stReqGuard::ProtoFunID_MAX;
const int stReqGuard::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGuard::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqGuard::stReqGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGuard::InitAsDefaultInstance() {
}

stReqGuard::stReqGuard(const stReqGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGuard::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGuard::~stReqGuard() {
  SharedDtor();
}

void stReqGuard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuard_descriptor_;
}

const stReqGuard& stReqGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqGuard* stReqGuard::default_instance_ = NULL;

stReqGuard* stReqGuard::New() const {
  return new stReqGuard;
}

void stReqGuard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGuard::MergeFrom(const stReqGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGuard::CopyFrom(const stReqGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGuard::IsInitialized() const {

  return true;
}

void stReqGuard::Swap(stReqGuard* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGuard_descriptor_;
  metadata.reflection = stReqGuard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetGuardWin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuardWin_ProtoModID_descriptor_;
}
bool stRetGuardWin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuardWin_ProtoModID stRetGuardWin::ModID;
const stRetGuardWin_ProtoModID stRetGuardWin::ProtoModID_MIN;
const stRetGuardWin_ProtoModID stRetGuardWin::ProtoModID_MAX;
const int stRetGuardWin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetGuardWin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuardWin_ProtoFunID_descriptor_;
}
bool stRetGuardWin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 115:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuardWin_ProtoFunID stRetGuardWin::FunID;
const stRetGuardWin_ProtoFunID stRetGuardWin::ProtoFunID_MIN;
const stRetGuardWin_ProtoFunID stRetGuardWin::ProtoFunID_MAX;
const int stRetGuardWin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetGuardWin::kQualityFieldNumber;
const int stRetGuardWin::kRefreshNumFieldNumber;
const int stRetGuardWin::kBuffFieldNumber;
const int stRetGuardWin::kFriendNameFieldNumber;
const int stRetGuardWin::kCanFreeRefreshFieldNumber;
#endif  // !_MSC_VER

stRetGuardWin::stRetGuardWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetGuardWin::InitAsDefaultInstance() {
}

stRetGuardWin::stRetGuardWin(const stRetGuardWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetGuardWin::SharedCtor() {
  _cached_size_ = 0;
  quality_ = 0u;
  refreshnum_ = 0u;
  buff_ = 0u;
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  canfreerefresh_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetGuardWin::~stRetGuardWin() {
  SharedDtor();
}

void stRetGuardWin::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void stRetGuardWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetGuardWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuardWin_descriptor_;
}

const stRetGuardWin& stRetGuardWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetGuardWin* stRetGuardWin::default_instance_ = NULL;

stRetGuardWin* stRetGuardWin::New() const {
  return new stRetGuardWin;
}

void stRetGuardWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quality_ = 0u;
    refreshnum_ = 0u;
    buff_ = 0u;
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    canfreerefresh_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetGuardWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 quality = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_refreshNum;
        break;
      }

      // optional uint32 refreshNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshnum_)));
          set_has_refreshnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buff;
        break;
      }

      // optional uint32 buff = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buff_)));
          set_has_buff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friendName;
        break;
      }

      // optional string friendName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_canFreeRefresh;
        break;
      }

      // optional bool canFreeRefresh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canFreeRefresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canfreerefresh_)));
          set_has_canfreerefresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetGuardWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 quality = 1;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quality(), output);
  }

  // optional uint32 refreshNum = 2;
  if (has_refreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->refreshnum(), output);
  }

  // optional uint32 buff = 3;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buff(), output);
  }

  // optional string friendName = 4;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->friendname(), output);
  }

  // optional bool canFreeRefresh = 5;
  if (has_canfreerefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->canfreerefresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetGuardWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 quality = 1;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quality(), target);
  }

  // optional uint32 refreshNum = 2;
  if (has_refreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->refreshnum(), target);
  }

  // optional uint32 buff = 3;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buff(), target);
  }

  // optional string friendName = 4;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->friendname(), target);
  }

  // optional bool canFreeRefresh = 5;
  if (has_canfreerefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->canfreerefresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetGuardWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 refreshNum = 2;
    if (has_refreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshnum());
    }

    // optional uint32 buff = 3;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buff());
    }

    // optional string friendName = 4;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // optional bool canFreeRefresh = 5;
    if (has_canfreerefresh()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetGuardWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetGuardWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetGuardWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetGuardWin::MergeFrom(const stRetGuardWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_refreshnum()) {
      set_refreshnum(from.refreshnum());
    }
    if (from.has_buff()) {
      set_buff(from.buff());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_canfreerefresh()) {
      set_canfreerefresh(from.canfreerefresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetGuardWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetGuardWin::CopyFrom(const stRetGuardWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetGuardWin::IsInitialized() const {

  return true;
}

void stRetGuardWin::Swap(stRetGuardWin* other) {
  if (other != this) {
    std::swap(quality_, other->quality_);
    std::swap(refreshnum_, other->refreshnum_);
    std::swap(buff_, other->buff_);
    std::swap(friendname_, other->friendname_);
    std::swap(canfreerefresh_, other->canfreerefresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetGuardWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetGuardWin_descriptor_;
  metadata.reflection = stRetGuardWin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSummonHighQualityGuard_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSummonHighQualityGuard_ProtoModID_descriptor_;
}
bool stReqSummonHighQualityGuard_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSummonHighQualityGuard_ProtoModID stReqSummonHighQualityGuard::ModID;
const stReqSummonHighQualityGuard_ProtoModID stReqSummonHighQualityGuard::ProtoModID_MIN;
const stReqSummonHighQualityGuard_ProtoModID stReqSummonHighQualityGuard::ProtoModID_MAX;
const int stReqSummonHighQualityGuard::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSummonHighQualityGuard_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSummonHighQualityGuard_ProtoFunID_descriptor_;
}
bool stReqSummonHighQualityGuard_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 116:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSummonHighQualityGuard_ProtoFunID stReqSummonHighQualityGuard::FunID;
const stReqSummonHighQualityGuard_ProtoFunID stReqSummonHighQualityGuard::ProtoFunID_MIN;
const stReqSummonHighQualityGuard_ProtoFunID stReqSummonHighQualityGuard::ProtoFunID_MAX;
const int stReqSummonHighQualityGuard::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSummonHighQualityGuard::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqSummonHighQualityGuard::stReqSummonHighQualityGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSummonHighQualityGuard::InitAsDefaultInstance() {
}

stReqSummonHighQualityGuard::stReqSummonHighQualityGuard(const stReqSummonHighQualityGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSummonHighQualityGuard::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSummonHighQualityGuard::~stReqSummonHighQualityGuard() {
  SharedDtor();
}

void stReqSummonHighQualityGuard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSummonHighQualityGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSummonHighQualityGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSummonHighQualityGuard_descriptor_;
}

const stReqSummonHighQualityGuard& stReqSummonHighQualityGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqSummonHighQualityGuard* stReqSummonHighQualityGuard::default_instance_ = NULL;

stReqSummonHighQualityGuard* stReqSummonHighQualityGuard::New() const {
  return new stReqSummonHighQualityGuard;
}

void stReqSummonHighQualityGuard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSummonHighQualityGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSummonHighQualityGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSummonHighQualityGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSummonHighQualityGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSummonHighQualityGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSummonHighQualityGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSummonHighQualityGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSummonHighQualityGuard::MergeFrom(const stReqSummonHighQualityGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSummonHighQualityGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSummonHighQualityGuard::CopyFrom(const stReqSummonHighQualityGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSummonHighQualityGuard::IsInitialized() const {

  return true;
}

void stReqSummonHighQualityGuard::Swap(stReqSummonHighQualityGuard* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSummonHighQualityGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSummonHighQualityGuard_descriptor_;
  metadata.reflection = stReqSummonHighQualityGuard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSummonHighQualityGuardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonHighQualityGuardResult_eResult_descriptor_;
}
bool stSummonHighQualityGuardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSummonHighQualityGuardResult_eResult stSummonHighQualityGuardResult::eSuccess;
const stSummonHighQualityGuardResult_eResult stSummonHighQualityGuardResult::eInner_Cfg_Error;
const stSummonHighQualityGuardResult_eResult stSummonHighQualityGuardResult::eDiamond_Not_Enough;
const stSummonHighQualityGuardResult_eResult stSummonHighQualityGuardResult::eResult_MIN;
const stSummonHighQualityGuardResult_eResult stSummonHighQualityGuardResult::eResult_MAX;
const int stSummonHighQualityGuardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSummonHighQualityGuardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonHighQualityGuardResult_ProtoModID_descriptor_;
}
bool stSummonHighQualityGuardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSummonHighQualityGuardResult_ProtoModID stSummonHighQualityGuardResult::ModID;
const stSummonHighQualityGuardResult_ProtoModID stSummonHighQualityGuardResult::ProtoModID_MIN;
const stSummonHighQualityGuardResult_ProtoModID stSummonHighQualityGuardResult::ProtoModID_MAX;
const int stSummonHighQualityGuardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSummonHighQualityGuardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonHighQualityGuardResult_ProtoFunID_descriptor_;
}
bool stSummonHighQualityGuardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 117:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSummonHighQualityGuardResult_ProtoFunID stSummonHighQualityGuardResult::FunID;
const stSummonHighQualityGuardResult_ProtoFunID stSummonHighQualityGuardResult::ProtoFunID_MIN;
const stSummonHighQualityGuardResult_ProtoFunID stSummonHighQualityGuardResult::ProtoFunID_MAX;
const int stSummonHighQualityGuardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSummonHighQualityGuardResult::kResultFieldNumber;
#endif  // !_MSC_VER

stSummonHighQualityGuardResult::stSummonHighQualityGuardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSummonHighQualityGuardResult::InitAsDefaultInstance() {
}

stSummonHighQualityGuardResult::stSummonHighQualityGuardResult(const stSummonHighQualityGuardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSummonHighQualityGuardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSummonHighQualityGuardResult::~stSummonHighQualityGuardResult() {
  SharedDtor();
}

void stSummonHighQualityGuardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSummonHighQualityGuardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSummonHighQualityGuardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonHighQualityGuardResult_descriptor_;
}

const stSummonHighQualityGuardResult& stSummonHighQualityGuardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSummonHighQualityGuardResult* stSummonHighQualityGuardResult::default_instance_ = NULL;

stSummonHighQualityGuardResult* stSummonHighQualityGuardResult::New() const {
  return new stSummonHighQualityGuardResult;
}

void stSummonHighQualityGuardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSummonHighQualityGuardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stSummonHighQualityGuardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stSummonHighQualityGuardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stSummonHighQualityGuardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSummonHighQualityGuardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stSummonHighQualityGuardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSummonHighQualityGuardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stSummonHighQualityGuardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSummonHighQualityGuardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stSummonHighQualityGuardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSummonHighQualityGuardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSummonHighQualityGuardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSummonHighQualityGuardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSummonHighQualityGuardResult::MergeFrom(const stSummonHighQualityGuardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSummonHighQualityGuardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSummonHighQualityGuardResult::CopyFrom(const stSummonHighQualityGuardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSummonHighQualityGuardResult::IsInitialized() const {

  return true;
}

void stSummonHighQualityGuardResult::Swap(stSummonHighQualityGuardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSummonHighQualityGuardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSummonHighQualityGuardResult_descriptor_;
  metadata.reflection = stSummonHighQualityGuardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGuardInspired_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuardInspired_ProtoModID_descriptor_;
}
bool stReqGuardInspired_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuardInspired_ProtoModID stReqGuardInspired::ModID;
const stReqGuardInspired_ProtoModID stReqGuardInspired::ProtoModID_MIN;
const stReqGuardInspired_ProtoModID stReqGuardInspired::ProtoModID_MAX;
const int stReqGuardInspired::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGuardInspired_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuardInspired_ProtoFunID_descriptor_;
}
bool stReqGuardInspired_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 118:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuardInspired_ProtoFunID stReqGuardInspired::FunID;
const stReqGuardInspired_ProtoFunID stReqGuardInspired::ProtoFunID_MIN;
const stReqGuardInspired_ProtoFunID stReqGuardInspired::ProtoFunID_MAX;
const int stReqGuardInspired::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGuardInspired::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqGuardInspired::stReqGuardInspired()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGuardInspired::InitAsDefaultInstance() {
}

stReqGuardInspired::stReqGuardInspired(const stReqGuardInspired& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGuardInspired::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGuardInspired::~stReqGuardInspired() {
  SharedDtor();
}

void stReqGuardInspired::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGuardInspired::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGuardInspired::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuardInspired_descriptor_;
}

const stReqGuardInspired& stReqGuardInspired::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqGuardInspired* stReqGuardInspired::default_instance_ = NULL;

stReqGuardInspired* stReqGuardInspired::New() const {
  return new stReqGuardInspired;
}

void stReqGuardInspired::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGuardInspired::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGuardInspired::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGuardInspired::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGuardInspired::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGuardInspired::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGuardInspired* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGuardInspired*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGuardInspired::MergeFrom(const stReqGuardInspired& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGuardInspired::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGuardInspired::CopyFrom(const stReqGuardInspired& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGuardInspired::IsInitialized() const {

  return true;
}

void stReqGuardInspired::Swap(stReqGuardInspired* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGuardInspired::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGuardInspired_descriptor_;
  metadata.reflection = stReqGuardInspired_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuardInspiredResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuardInspiredResult_eResult_descriptor_;
}
bool stGuardInspiredResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuardInspiredResult_eResult stGuardInspiredResult::eSuccess;
const stGuardInspiredResult_eResult stGuardInspiredResult::eDiamond_Not_Enough;
const stGuardInspiredResult_eResult stGuardInspiredResult::eResult_MIN;
const stGuardInspiredResult_eResult stGuardInspiredResult::eResult_MAX;
const int stGuardInspiredResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuardInspiredResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuardInspiredResult_ProtoModID_descriptor_;
}
bool stGuardInspiredResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuardInspiredResult_ProtoModID stGuardInspiredResult::ModID;
const stGuardInspiredResult_ProtoModID stGuardInspiredResult::ProtoModID_MIN;
const stGuardInspiredResult_ProtoModID stGuardInspiredResult::ProtoModID_MAX;
const int stGuardInspiredResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuardInspiredResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuardInspiredResult_ProtoFunID_descriptor_;
}
bool stGuardInspiredResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 119:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuardInspiredResult_ProtoFunID stGuardInspiredResult::FunID;
const stGuardInspiredResult_ProtoFunID stGuardInspiredResult::ProtoFunID_MIN;
const stGuardInspiredResult_ProtoFunID stGuardInspiredResult::ProtoFunID_MAX;
const int stGuardInspiredResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuardInspiredResult::kResultFieldNumber;
const int stGuardInspiredResult::kNumFieldNumber;
#endif  // !_MSC_VER

stGuardInspiredResult::stGuardInspiredResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuardInspiredResult::InitAsDefaultInstance() {
}

stGuardInspiredResult::stGuardInspiredResult(const stGuardInspiredResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuardInspiredResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuardInspiredResult::~stGuardInspiredResult() {
  SharedDtor();
}

void stGuardInspiredResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuardInspiredResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuardInspiredResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuardInspiredResult_descriptor_;
}

const stGuardInspiredResult& stGuardInspiredResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGuardInspiredResult* stGuardInspiredResult::default_instance_ = NULL;

stGuardInspiredResult* stGuardInspiredResult::New() const {
  return new stGuardInspiredResult;
}

void stGuardInspiredResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuardInspiredResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGuardInspiredResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stGuardInspiredResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stGuardInspiredResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuardInspiredResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGuardInspiredResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuardInspiredResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGuardInspiredResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuardInspiredResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGuardInspiredResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuardInspiredResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuardInspiredResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuardInspiredResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuardInspiredResult::MergeFrom(const stGuardInspiredResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuardInspiredResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuardInspiredResult::CopyFrom(const stGuardInspiredResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuardInspiredResult::IsInitialized() const {

  return true;
}

void stGuardInspiredResult::Swap(stGuardInspiredResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuardInspiredResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuardInspiredResult_descriptor_;
  metadata.reflection = stGuardInspiredResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshGuardQuality_ProtoModID_descriptor_;
}
bool stReqRefreshGuardQuality_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshGuardQuality_ProtoModID stReqRefreshGuardQuality::ModID;
const stReqRefreshGuardQuality_ProtoModID stReqRefreshGuardQuality::ProtoModID_MIN;
const stReqRefreshGuardQuality_ProtoModID stReqRefreshGuardQuality::ProtoModID_MAX;
const int stReqRefreshGuardQuality::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshGuardQuality_ProtoFunID_descriptor_;
}
bool stReqRefreshGuardQuality_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 120:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshGuardQuality_ProtoFunID stReqRefreshGuardQuality::FunID;
const stReqRefreshGuardQuality_ProtoFunID stReqRefreshGuardQuality::ProtoFunID_MIN;
const stReqRefreshGuardQuality_ProtoFunID stReqRefreshGuardQuality::ProtoFunID_MAX;
const int stReqRefreshGuardQuality::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRefreshGuardQuality::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqRefreshGuardQuality::stReqRefreshGuardQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRefreshGuardQuality::InitAsDefaultInstance() {
}

stReqRefreshGuardQuality::stReqRefreshGuardQuality(const stReqRefreshGuardQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRefreshGuardQuality::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRefreshGuardQuality::~stReqRefreshGuardQuality() {
  SharedDtor();
}

void stReqRefreshGuardQuality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRefreshGuardQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRefreshGuardQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshGuardQuality_descriptor_;
}

const stReqRefreshGuardQuality& stReqRefreshGuardQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqRefreshGuardQuality* stReqRefreshGuardQuality::default_instance_ = NULL;

stReqRefreshGuardQuality* stReqRefreshGuardQuality::New() const {
  return new stReqRefreshGuardQuality;
}

void stReqRefreshGuardQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRefreshGuardQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRefreshGuardQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRefreshGuardQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRefreshGuardQuality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRefreshGuardQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRefreshGuardQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRefreshGuardQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRefreshGuardQuality::MergeFrom(const stReqRefreshGuardQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRefreshGuardQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRefreshGuardQuality::CopyFrom(const stReqRefreshGuardQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRefreshGuardQuality::IsInitialized() const {

  return true;
}

void stReqRefreshGuardQuality::Swap(stReqRefreshGuardQuality* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRefreshGuardQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRefreshGuardQuality_descriptor_;
  metadata.reflection = stReqRefreshGuardQuality_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRefreshGuardQualityResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRefreshGuardQualityResult_eResult_descriptor_;
}
bool stRetRefreshGuardQualityResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRefreshGuardQualityResult_eResult stRetRefreshGuardQualityResult::eSuccess;
const stRetRefreshGuardQualityResult_eResult stRetRefreshGuardQualityResult::eDiamond_Not_Enough;
const stRetRefreshGuardQualityResult_eResult stRetRefreshGuardQualityResult::eFail;
const stRetRefreshGuardQualityResult_eResult stRetRefreshGuardQualityResult::eResult_MIN;
const stRetRefreshGuardQualityResult_eResult stRetRefreshGuardQualityResult::eResult_MAX;
const int stRetRefreshGuardQualityResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRefreshGuardQualityResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRefreshGuardQualityResult_ProtoModID_descriptor_;
}
bool stRetRefreshGuardQualityResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRefreshGuardQualityResult_ProtoModID stRetRefreshGuardQualityResult::ModID;
const stRetRefreshGuardQualityResult_ProtoModID stRetRefreshGuardQualityResult::ProtoModID_MIN;
const stRetRefreshGuardQualityResult_ProtoModID stRetRefreshGuardQualityResult::ProtoModID_MAX;
const int stRetRefreshGuardQualityResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRefreshGuardQualityResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRefreshGuardQualityResult_ProtoFunID_descriptor_;
}
bool stRetRefreshGuardQualityResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 121:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRefreshGuardQualityResult_ProtoFunID stRetRefreshGuardQualityResult::FunID;
const stRetRefreshGuardQualityResult_ProtoFunID stRetRefreshGuardQualityResult::ProtoFunID_MIN;
const stRetRefreshGuardQualityResult_ProtoFunID stRetRefreshGuardQualityResult::ProtoFunID_MAX;
const int stRetRefreshGuardQualityResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRefreshGuardQualityResult::kResultFieldNumber;
const int stRetRefreshGuardQualityResult::kQualityFieldNumber;
#endif  // !_MSC_VER

stRetRefreshGuardQualityResult::stRetRefreshGuardQualityResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRefreshGuardQualityResult::InitAsDefaultInstance() {
}

stRetRefreshGuardQualityResult::stRetRefreshGuardQualityResult(const stRetRefreshGuardQualityResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRefreshGuardQualityResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRefreshGuardQualityResult::~stRetRefreshGuardQualityResult() {
  SharedDtor();
}

void stRetRefreshGuardQualityResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRefreshGuardQualityResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRefreshGuardQualityResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRefreshGuardQualityResult_descriptor_;
}

const stRetRefreshGuardQualityResult& stRetRefreshGuardQualityResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetRefreshGuardQualityResult* stRetRefreshGuardQualityResult::default_instance_ = NULL;

stRetRefreshGuardQualityResult* stRetRefreshGuardQualityResult::New() const {
  return new stRetRefreshGuardQualityResult;
}

void stRetRefreshGuardQualityResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    quality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRefreshGuardQualityResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRetRefreshGuardQualityResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetRefreshGuardQualityResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetRefreshGuardQualityResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRefreshGuardQualityResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRetRefreshGuardQualityResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRefreshGuardQualityResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRetRefreshGuardQualityResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRefreshGuardQualityResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRetRefreshGuardQualityResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRefreshGuardQualityResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRefreshGuardQualityResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRefreshGuardQualityResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRefreshGuardQualityResult::MergeFrom(const stRetRefreshGuardQualityResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRefreshGuardQualityResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRefreshGuardQualityResult::CopyFrom(const stRetRefreshGuardQualityResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRefreshGuardQualityResult::IsInitialized() const {

  return true;
}

void stRetRefreshGuardQualityResult::Swap(stRetRefreshGuardQualityResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRefreshGuardQualityResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRefreshGuardQualityResult_descriptor_;
  metadata.reflection = stRetRefreshGuardQualityResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCanHelpGuardFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCanHelpGuardFriend_ProtoModID_descriptor_;
}
bool stReqCanHelpGuardFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCanHelpGuardFriend_ProtoModID stReqCanHelpGuardFriend::ModID;
const stReqCanHelpGuardFriend_ProtoModID stReqCanHelpGuardFriend::ProtoModID_MIN;
const stReqCanHelpGuardFriend_ProtoModID stReqCanHelpGuardFriend::ProtoModID_MAX;
const int stReqCanHelpGuardFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCanHelpGuardFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCanHelpGuardFriend_ProtoFunID_descriptor_;
}
bool stReqCanHelpGuardFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 122:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCanHelpGuardFriend_ProtoFunID stReqCanHelpGuardFriend::FunID;
const stReqCanHelpGuardFriend_ProtoFunID stReqCanHelpGuardFriend::ProtoFunID_MIN;
const stReqCanHelpGuardFriend_ProtoFunID stReqCanHelpGuardFriend::ProtoFunID_MAX;
const int stReqCanHelpGuardFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCanHelpGuardFriend::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqCanHelpGuardFriend::stReqCanHelpGuardFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCanHelpGuardFriend::InitAsDefaultInstance() {
}

stReqCanHelpGuardFriend::stReqCanHelpGuardFriend(const stReqCanHelpGuardFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCanHelpGuardFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCanHelpGuardFriend::~stReqCanHelpGuardFriend() {
  SharedDtor();
}

void stReqCanHelpGuardFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCanHelpGuardFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCanHelpGuardFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCanHelpGuardFriend_descriptor_;
}

const stReqCanHelpGuardFriend& stReqCanHelpGuardFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqCanHelpGuardFriend* stReqCanHelpGuardFriend::default_instance_ = NULL;

stReqCanHelpGuardFriend* stReqCanHelpGuardFriend::New() const {
  return new stReqCanHelpGuardFriend;
}

void stReqCanHelpGuardFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCanHelpGuardFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCanHelpGuardFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCanHelpGuardFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCanHelpGuardFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCanHelpGuardFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCanHelpGuardFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCanHelpGuardFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCanHelpGuardFriend::MergeFrom(const stReqCanHelpGuardFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCanHelpGuardFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCanHelpGuardFriend::CopyFrom(const stReqCanHelpGuardFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCanHelpGuardFriend::IsInitialized() const {

  return true;
}

void stReqCanHelpGuardFriend::Swap(stReqCanHelpGuardFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCanHelpGuardFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCanHelpGuardFriend_descriptor_;
  metadata.reflection = stReqCanHelpGuardFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stHelpGaurdFriendInfo::kCharIDFieldNumber;
const int stHelpGaurdFriendInfo::kNameFieldNumber;
const int stHelpGaurdFriendInfo::kRemainHelpNumFieldNumber;
const int stHelpGaurdFriendInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

stHelpGaurdFriendInfo::stHelpGaurdFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHelpGaurdFriendInfo::InitAsDefaultInstance() {
}

stHelpGaurdFriendInfo::stHelpGaurdFriendInfo(const stHelpGaurdFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHelpGaurdFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remainhelpnum_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHelpGaurdFriendInfo::~stHelpGaurdFriendInfo() {
  SharedDtor();
}

void stHelpGaurdFriendInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stHelpGaurdFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHelpGaurdFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHelpGaurdFriendInfo_descriptor_;
}

const stHelpGaurdFriendInfo& stHelpGaurdFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stHelpGaurdFriendInfo* stHelpGaurdFriendInfo::default_instance_ = NULL;

stHelpGaurdFriendInfo* stHelpGaurdFriendInfo::New() const {
  return new stHelpGaurdFriendInfo;
}

void stHelpGaurdFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    remainhelpnum_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHelpGaurdFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remainHelpNum;
        break;
      }

      // optional uint32 remainHelpNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainHelpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remainhelpnum_)));
          set_has_remainhelpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHelpGaurdFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 remainHelpNum = 3;
  if (has_remainhelpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->remainhelpnum(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHelpGaurdFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 remainHelpNum = 3;
  if (has_remainhelpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->remainhelpnum(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHelpGaurdFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 remainHelpNum = 3;
    if (has_remainhelpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remainhelpnum());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHelpGaurdFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHelpGaurdFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHelpGaurdFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHelpGaurdFriendInfo::MergeFrom(const stHelpGaurdFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_remainhelpnum()) {
      set_remainhelpnum(from.remainhelpnum());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHelpGaurdFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHelpGaurdFriendInfo::CopyFrom(const stHelpGaurdFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHelpGaurdFriendInfo::IsInitialized() const {

  return true;
}

void stHelpGaurdFriendInfo::Swap(stHelpGaurdFriendInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(remainhelpnum_, other->remainhelpnum_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHelpGaurdFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHelpGaurdFriendInfo_descriptor_;
  metadata.reflection = stHelpGaurdFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetCanHelpGuardFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCanHelpGuardFriend_ProtoModID_descriptor_;
}
bool stRetCanHelpGuardFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCanHelpGuardFriend_ProtoModID stRetCanHelpGuardFriend::ModID;
const stRetCanHelpGuardFriend_ProtoModID stRetCanHelpGuardFriend::ProtoModID_MIN;
const stRetCanHelpGuardFriend_ProtoModID stRetCanHelpGuardFriend::ProtoModID_MAX;
const int stRetCanHelpGuardFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetCanHelpGuardFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCanHelpGuardFriend_ProtoFunID_descriptor_;
}
bool stRetCanHelpGuardFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 123:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetCanHelpGuardFriend_ProtoFunID stRetCanHelpGuardFriend::FunID;
const stRetCanHelpGuardFriend_ProtoFunID stRetCanHelpGuardFriend::ProtoFunID_MIN;
const stRetCanHelpGuardFriend_ProtoFunID stRetCanHelpGuardFriend::ProtoFunID_MAX;
const int stRetCanHelpGuardFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetCanHelpGuardFriend::kInfosFieldNumber;
#endif  // !_MSC_VER

stRetCanHelpGuardFriend::stRetCanHelpGuardFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetCanHelpGuardFriend::InitAsDefaultInstance() {
}

stRetCanHelpGuardFriend::stRetCanHelpGuardFriend(const stRetCanHelpGuardFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetCanHelpGuardFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetCanHelpGuardFriend::~stRetCanHelpGuardFriend() {
  SharedDtor();
}

void stRetCanHelpGuardFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetCanHelpGuardFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetCanHelpGuardFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetCanHelpGuardFriend_descriptor_;
}

const stRetCanHelpGuardFriend& stRetCanHelpGuardFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetCanHelpGuardFriend* stRetCanHelpGuardFriend::default_instance_ = NULL;

stRetCanHelpGuardFriend* stRetCanHelpGuardFriend::New() const {
  return new stRetCanHelpGuardFriend;
}

void stRetCanHelpGuardFriend::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetCanHelpGuardFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stHelpGaurdFriendInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetCanHelpGuardFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stHelpGaurdFriendInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetCanHelpGuardFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stHelpGaurdFriendInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetCanHelpGuardFriend::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stHelpGaurdFriendInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetCanHelpGuardFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetCanHelpGuardFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetCanHelpGuardFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetCanHelpGuardFriend::MergeFrom(const stRetCanHelpGuardFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetCanHelpGuardFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetCanHelpGuardFriend::CopyFrom(const stRetCanHelpGuardFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetCanHelpGuardFriend::IsInitialized() const {

  return true;
}

void stRetCanHelpGuardFriend::Swap(stRetCanHelpGuardFriend* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetCanHelpGuardFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetCanHelpGuardFriend_descriptor_;
  metadata.reflection = stRetCanHelpGuardFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuard_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteFriendForHelpGuard_ProtoModID_descriptor_;
}
bool stInviteFriendForHelpGuard_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteFriendForHelpGuard_ProtoModID stInviteFriendForHelpGuard::ModID;
const stInviteFriendForHelpGuard_ProtoModID stInviteFriendForHelpGuard::ProtoModID_MIN;
const stInviteFriendForHelpGuard_ProtoModID stInviteFriendForHelpGuard::ProtoModID_MAX;
const int stInviteFriendForHelpGuard::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuard_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteFriendForHelpGuard_ProtoFunID_descriptor_;
}
bool stInviteFriendForHelpGuard_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 124:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteFriendForHelpGuard_ProtoFunID stInviteFriendForHelpGuard::FunID;
const stInviteFriendForHelpGuard_ProtoFunID stInviteFriendForHelpGuard::ProtoFunID_MIN;
const stInviteFriendForHelpGuard_ProtoFunID stInviteFriendForHelpGuard::ProtoFunID_MAX;
const int stInviteFriendForHelpGuard::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInviteFriendForHelpGuard::kCharIDFieldNumber;
#endif  // !_MSC_VER

stInviteFriendForHelpGuard::stInviteFriendForHelpGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInviteFriendForHelpGuard::InitAsDefaultInstance() {
}

stInviteFriendForHelpGuard::stInviteFriendForHelpGuard(const stInviteFriendForHelpGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInviteFriendForHelpGuard::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInviteFriendForHelpGuard::~stInviteFriendForHelpGuard() {
  SharedDtor();
}

void stInviteFriendForHelpGuard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInviteFriendForHelpGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInviteFriendForHelpGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteFriendForHelpGuard_descriptor_;
}

const stInviteFriendForHelpGuard& stInviteFriendForHelpGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stInviteFriendForHelpGuard* stInviteFriendForHelpGuard::default_instance_ = NULL;

stInviteFriendForHelpGuard* stInviteFriendForHelpGuard::New() const {
  return new stInviteFriendForHelpGuard;
}

void stInviteFriendForHelpGuard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInviteFriendForHelpGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInviteFriendForHelpGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInviteFriendForHelpGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInviteFriendForHelpGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInviteFriendForHelpGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInviteFriendForHelpGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInviteFriendForHelpGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInviteFriendForHelpGuard::MergeFrom(const stInviteFriendForHelpGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInviteFriendForHelpGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInviteFriendForHelpGuard::CopyFrom(const stInviteFriendForHelpGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInviteFriendForHelpGuard::IsInitialized() const {

  return true;
}

void stInviteFriendForHelpGuard::Swap(stInviteFriendForHelpGuard* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInviteFriendForHelpGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInviteFriendForHelpGuard_descriptor_;
  metadata.reflection = stInviteFriendForHelpGuard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteFriendForHelpGuardResult_eResult_descriptor_;
}
bool stInviteFriendForHelpGuardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteFriendForHelpGuardResult_eResult stInviteFriendForHelpGuardResult::eSuccess;
const stInviteFriendForHelpGuardResult_eResult stInviteFriendForHelpGuardResult::eHelp_Num_Use_Out;
const stInviteFriendForHelpGuardResult_eResult stInviteFriendForHelpGuardResult::eNot_Online;
const stInviteFriendForHelpGuardResult_eResult stInviteFriendForHelpGuardResult::eRefuse;
const stInviteFriendForHelpGuardResult_eResult stInviteFriendForHelpGuardResult::eResult_MIN;
const stInviteFriendForHelpGuardResult_eResult stInviteFriendForHelpGuardResult::eResult_MAX;
const int stInviteFriendForHelpGuardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteFriendForHelpGuardResult_ProtoModID_descriptor_;
}
bool stInviteFriendForHelpGuardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteFriendForHelpGuardResult_ProtoModID stInviteFriendForHelpGuardResult::ModID;
const stInviteFriendForHelpGuardResult_ProtoModID stInviteFriendForHelpGuardResult::ProtoModID_MIN;
const stInviteFriendForHelpGuardResult_ProtoModID stInviteFriendForHelpGuardResult::ProtoModID_MAX;
const int stInviteFriendForHelpGuardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInviteFriendForHelpGuardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteFriendForHelpGuardResult_ProtoFunID_descriptor_;
}
bool stInviteFriendForHelpGuardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 125:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteFriendForHelpGuardResult_ProtoFunID stInviteFriendForHelpGuardResult::FunID;
const stInviteFriendForHelpGuardResult_ProtoFunID stInviteFriendForHelpGuardResult::ProtoFunID_MIN;
const stInviteFriendForHelpGuardResult_ProtoFunID stInviteFriendForHelpGuardResult::ProtoFunID_MAX;
const int stInviteFriendForHelpGuardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInviteFriendForHelpGuardResult::kResultFieldNumber;
#endif  // !_MSC_VER

stInviteFriendForHelpGuardResult::stInviteFriendForHelpGuardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInviteFriendForHelpGuardResult::InitAsDefaultInstance() {
}

stInviteFriendForHelpGuardResult::stInviteFriendForHelpGuardResult(const stInviteFriendForHelpGuardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInviteFriendForHelpGuardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInviteFriendForHelpGuardResult::~stInviteFriendForHelpGuardResult() {
  SharedDtor();
}

void stInviteFriendForHelpGuardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInviteFriendForHelpGuardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInviteFriendForHelpGuardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteFriendForHelpGuardResult_descriptor_;
}

const stInviteFriendForHelpGuardResult& stInviteFriendForHelpGuardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stInviteFriendForHelpGuardResult* stInviteFriendForHelpGuardResult::default_instance_ = NULL;

stInviteFriendForHelpGuardResult* stInviteFriendForHelpGuardResult::New() const {
  return new stInviteFriendForHelpGuardResult;
}

void stInviteFriendForHelpGuardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInviteFriendForHelpGuardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stInviteFriendForHelpGuardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stInviteFriendForHelpGuardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stInviteFriendForHelpGuardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInviteFriendForHelpGuardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stInviteFriendForHelpGuardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInviteFriendForHelpGuardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stInviteFriendForHelpGuardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInviteFriendForHelpGuardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stInviteFriendForHelpGuardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInviteFriendForHelpGuardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInviteFriendForHelpGuardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInviteFriendForHelpGuardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInviteFriendForHelpGuardResult::MergeFrom(const stInviteFriendForHelpGuardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInviteFriendForHelpGuardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInviteFriendForHelpGuardResult::CopyFrom(const stInviteFriendForHelpGuardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInviteFriendForHelpGuardResult::IsInitialized() const {

  return true;
}

void stInviteFriendForHelpGuardResult::Swap(stInviteFriendForHelpGuardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInviteFriendForHelpGuardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInviteFriendForHelpGuardResult_descriptor_;
  metadata.reflection = stInviteFriendForHelpGuardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAskFriendHelpGuard_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskFriendHelpGuard_ProtoModID_descriptor_;
}
bool stAskFriendHelpGuard_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAskFriendHelpGuard_ProtoModID stAskFriendHelpGuard::ModID;
const stAskFriendHelpGuard_ProtoModID stAskFriendHelpGuard::ProtoModID_MIN;
const stAskFriendHelpGuard_ProtoModID stAskFriendHelpGuard::ProtoModID_MAX;
const int stAskFriendHelpGuard::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAskFriendHelpGuard_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskFriendHelpGuard_ProtoFunID_descriptor_;
}
bool stAskFriendHelpGuard_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 126:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAskFriendHelpGuard_ProtoFunID stAskFriendHelpGuard::FunID;
const stAskFriendHelpGuard_ProtoFunID stAskFriendHelpGuard::ProtoFunID_MIN;
const stAskFriendHelpGuard_ProtoFunID stAskFriendHelpGuard::ProtoFunID_MAX;
const int stAskFriendHelpGuard::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAskFriendHelpGuard::kInviterNameFieldNumber;
const int stAskFriendHelpGuard::kInviterIDFieldNumber;
#endif  // !_MSC_VER

stAskFriendHelpGuard::stAskFriendHelpGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAskFriendHelpGuard::InitAsDefaultInstance() {
}

stAskFriendHelpGuard::stAskFriendHelpGuard(const stAskFriendHelpGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAskFriendHelpGuard::SharedCtor() {
  _cached_size_ = 0;
  invitername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inviterid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAskFriendHelpGuard::~stAskFriendHelpGuard() {
  SharedDtor();
}

void stAskFriendHelpGuard::SharedDtor() {
  if (invitername_ != &::google::protobuf::internal::kEmptyString) {
    delete invitername_;
  }
  if (this != default_instance_) {
  }
}

void stAskFriendHelpGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAskFriendHelpGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskFriendHelpGuard_descriptor_;
}

const stAskFriendHelpGuard& stAskFriendHelpGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stAskFriendHelpGuard* stAskFriendHelpGuard::default_instance_ = NULL;

stAskFriendHelpGuard* stAskFriendHelpGuard::New() const {
  return new stAskFriendHelpGuard;
}

void stAskFriendHelpGuard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_invitername()) {
      if (invitername_ != &::google::protobuf::internal::kEmptyString) {
        invitername_->clear();
      }
    }
    inviterid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAskFriendHelpGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string inviterName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitername().data(), this->invitername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inviterID;
        break;
      }

      // optional uint32 inviterID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviterid_)));
          set_has_inviterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAskFriendHelpGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string inviterName = 1;
  if (has_invitername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitername().data(), this->invitername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->invitername(), output);
  }

  // optional uint32 inviterID = 2;
  if (has_inviterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inviterid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAskFriendHelpGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string inviterName = 1;
  if (has_invitername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitername().data(), this->invitername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->invitername(), target);
  }

  // optional uint32 inviterID = 2;
  if (has_inviterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inviterid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAskFriendHelpGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string inviterName = 1;
    if (has_invitername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitername());
    }

    // optional uint32 inviterID = 2;
    if (has_inviterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviterid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAskFriendHelpGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAskFriendHelpGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAskFriendHelpGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAskFriendHelpGuard::MergeFrom(const stAskFriendHelpGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invitername()) {
      set_invitername(from.invitername());
    }
    if (from.has_inviterid()) {
      set_inviterid(from.inviterid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAskFriendHelpGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAskFriendHelpGuard::CopyFrom(const stAskFriendHelpGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAskFriendHelpGuard::IsInitialized() const {

  return true;
}

void stAskFriendHelpGuard::Swap(stAskFriendHelpGuard* other) {
  if (other != this) {
    std::swap(invitername_, other->invitername_);
    std::swap(inviterid_, other->inviterid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAskFriendHelpGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAskFriendHelpGuard_descriptor_;
  metadata.reflection = stAskFriendHelpGuard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplyHelpGuard_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyHelpGuard_ProtoModID_descriptor_;
}
bool stReplyHelpGuard_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyHelpGuard_ProtoModID stReplyHelpGuard::ModID;
const stReplyHelpGuard_ProtoModID stReplyHelpGuard::ProtoModID_MIN;
const stReplyHelpGuard_ProtoModID stReplyHelpGuard::ProtoModID_MAX;
const int stReplyHelpGuard::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyHelpGuard_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyHelpGuard_ProtoFunID_descriptor_;
}
bool stReplyHelpGuard_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 127:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyHelpGuard_ProtoFunID stReplyHelpGuard::FunID;
const stReplyHelpGuard_ProtoFunID stReplyHelpGuard::ProtoFunID_MIN;
const stReplyHelpGuard_ProtoFunID stReplyHelpGuard::ProtoFunID_MAX;
const int stReplyHelpGuard::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplyHelpGuard::kAgreeFieldNumber;
const int stReplyHelpGuard::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReplyHelpGuard::stReplyHelpGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplyHelpGuard::InitAsDefaultInstance() {
}

stReplyHelpGuard::stReplyHelpGuard(const stReplyHelpGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplyHelpGuard::SharedCtor() {
  _cached_size_ = 0;
  agree_ = false;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplyHelpGuard::~stReplyHelpGuard() {
  SharedDtor();
}

void stReplyHelpGuard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReplyHelpGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplyHelpGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyHelpGuard_descriptor_;
}

const stReplyHelpGuard& stReplyHelpGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReplyHelpGuard* stReplyHelpGuard::default_instance_ = NULL;

stReplyHelpGuard* stReplyHelpGuard::New() const {
  return new stReplyHelpGuard;
}

void stReplyHelpGuard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agree_ = false;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplyHelpGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool agree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplyHelpGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool agree = 1;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agree(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplyHelpGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool agree = 1;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agree(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplyHelpGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool agree = 1;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplyHelpGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplyHelpGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplyHelpGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplyHelpGuard::MergeFrom(const stReplyHelpGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplyHelpGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplyHelpGuard::CopyFrom(const stReplyHelpGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplyHelpGuard::IsInitialized() const {

  return true;
}

void stReplyHelpGuard::Swap(stReplyHelpGuard* other) {
  if (other != this) {
    std::swap(agree_, other->agree_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplyHelpGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplyHelpGuard_descriptor_;
  metadata.reflection = stReplyHelpGuard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplyHelpGuardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyHelpGuardResult_eResult_descriptor_;
}
bool stReplyHelpGuardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyHelpGuardResult_eResult stReplyHelpGuardResult::eSuccess;
const stReplyHelpGuardResult_eResult stReplyHelpGuardResult::eHas_Start;
const stReplyHelpGuardResult_eResult stReplyHelpGuardResult::eHelp_Num_Use_Out;
const stReplyHelpGuardResult_eResult stReplyHelpGuardResult::eHas_Friend_Help;
const stReplyHelpGuardResult_eResult stReplyHelpGuardResult::eResult_MIN;
const stReplyHelpGuardResult_eResult stReplyHelpGuardResult::eResult_MAX;
const int stReplyHelpGuardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyHelpGuardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyHelpGuardResult_ProtoModID_descriptor_;
}
bool stReplyHelpGuardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyHelpGuardResult_ProtoModID stReplyHelpGuardResult::ModID;
const stReplyHelpGuardResult_ProtoModID stReplyHelpGuardResult::ProtoModID_MIN;
const stReplyHelpGuardResult_ProtoModID stReplyHelpGuardResult::ProtoModID_MAX;
const int stReplyHelpGuardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyHelpGuardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyHelpGuardResult_ProtoFunID_descriptor_;
}
bool stReplyHelpGuardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 128:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyHelpGuardResult_ProtoFunID stReplyHelpGuardResult::FunID;
const stReplyHelpGuardResult_ProtoFunID stReplyHelpGuardResult::ProtoFunID_MIN;
const stReplyHelpGuardResult_ProtoFunID stReplyHelpGuardResult::ProtoFunID_MAX;
const int stReplyHelpGuardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplyHelpGuardResult::kResultFieldNumber;
#endif  // !_MSC_VER

stReplyHelpGuardResult::stReplyHelpGuardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplyHelpGuardResult::InitAsDefaultInstance() {
}

stReplyHelpGuardResult::stReplyHelpGuardResult(const stReplyHelpGuardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplyHelpGuardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplyHelpGuardResult::~stReplyHelpGuardResult() {
  SharedDtor();
}

void stReplyHelpGuardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReplyHelpGuardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplyHelpGuardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyHelpGuardResult_descriptor_;
}

const stReplyHelpGuardResult& stReplyHelpGuardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReplyHelpGuardResult* stReplyHelpGuardResult::default_instance_ = NULL;

stReplyHelpGuardResult* stReplyHelpGuardResult::New() const {
  return new stReplyHelpGuardResult;
}

void stReplyHelpGuardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplyHelpGuardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stReplyHelpGuardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stReplyHelpGuardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stReplyHelpGuardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplyHelpGuardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stReplyHelpGuardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplyHelpGuardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stReplyHelpGuardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplyHelpGuardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stReplyHelpGuardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplyHelpGuardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplyHelpGuardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplyHelpGuardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplyHelpGuardResult::MergeFrom(const stReplyHelpGuardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplyHelpGuardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplyHelpGuardResult::CopyFrom(const stReplyHelpGuardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplyHelpGuardResult::IsInitialized() const {

  return true;
}

void stReplyHelpGuardResult::Swap(stReplyHelpGuardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplyHelpGuardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplyHelpGuardResult_descriptor_;
  metadata.reflection = stReplyHelpGuardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserAgreeHelpGuard_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserAgreeHelpGuard_ProtoModID_descriptor_;
}
bool stUserAgreeHelpGuard_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserAgreeHelpGuard_ProtoModID stUserAgreeHelpGuard::ModID;
const stUserAgreeHelpGuard_ProtoModID stUserAgreeHelpGuard::ProtoModID_MIN;
const stUserAgreeHelpGuard_ProtoModID stUserAgreeHelpGuard::ProtoModID_MAX;
const int stUserAgreeHelpGuard::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserAgreeHelpGuard_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserAgreeHelpGuard_ProtoFunID_descriptor_;
}
bool stUserAgreeHelpGuard_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 129:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserAgreeHelpGuard_ProtoFunID stUserAgreeHelpGuard::FunID;
const stUserAgreeHelpGuard_ProtoFunID stUserAgreeHelpGuard::ProtoFunID_MIN;
const stUserAgreeHelpGuard_ProtoFunID stUserAgreeHelpGuard::ProtoFunID_MAX;
const int stUserAgreeHelpGuard::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserAgreeHelpGuard::kNameFieldNumber;
const int stUserAgreeHelpGuard::kCharIDFieldNumber;
#endif  // !_MSC_VER

stUserAgreeHelpGuard::stUserAgreeHelpGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserAgreeHelpGuard::InitAsDefaultInstance() {
}

stUserAgreeHelpGuard::stUserAgreeHelpGuard(const stUserAgreeHelpGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserAgreeHelpGuard::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserAgreeHelpGuard::~stUserAgreeHelpGuard() {
  SharedDtor();
}

void stUserAgreeHelpGuard::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stUserAgreeHelpGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserAgreeHelpGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserAgreeHelpGuard_descriptor_;
}

const stUserAgreeHelpGuard& stUserAgreeHelpGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stUserAgreeHelpGuard* stUserAgreeHelpGuard::default_instance_ = NULL;

stUserAgreeHelpGuard* stUserAgreeHelpGuard::New() const {
  return new stUserAgreeHelpGuard;
}

void stUserAgreeHelpGuard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserAgreeHelpGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserAgreeHelpGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserAgreeHelpGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserAgreeHelpGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserAgreeHelpGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserAgreeHelpGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserAgreeHelpGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserAgreeHelpGuard::MergeFrom(const stUserAgreeHelpGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserAgreeHelpGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserAgreeHelpGuard::CopyFrom(const stUserAgreeHelpGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserAgreeHelpGuard::IsInitialized() const {

  return true;
}

void stUserAgreeHelpGuard::Swap(stUserAgreeHelpGuard* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserAgreeHelpGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserAgreeHelpGuard_descriptor_;
  metadata.reflection = stUserAgreeHelpGuard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBeginGuard_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginGuard_ProtoModID_descriptor_;
}
bool stBeginGuard_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginGuard_ProtoModID stBeginGuard::ModID;
const stBeginGuard_ProtoModID stBeginGuard::ProtoModID_MIN;
const stBeginGuard_ProtoModID stBeginGuard::ProtoModID_MAX;
const int stBeginGuard::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBeginGuard_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginGuard_ProtoFunID_descriptor_;
}
bool stBeginGuard_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 130:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginGuard_ProtoFunID stBeginGuard::FunID;
const stBeginGuard_ProtoFunID stBeginGuard::ProtoFunID_MIN;
const stBeginGuard_ProtoFunID stBeginGuard::ProtoFunID_MAX;
const int stBeginGuard::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBeginGuard::kCharIDFieldNumber;
#endif  // !_MSC_VER

stBeginGuard::stBeginGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBeginGuard::InitAsDefaultInstance() {
}

stBeginGuard::stBeginGuard(const stBeginGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBeginGuard::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBeginGuard::~stBeginGuard() {
  SharedDtor();
}

void stBeginGuard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBeginGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBeginGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginGuard_descriptor_;
}

const stBeginGuard& stBeginGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBeginGuard* stBeginGuard::default_instance_ = NULL;

stBeginGuard* stBeginGuard::New() const {
  return new stBeginGuard;
}

void stBeginGuard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBeginGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBeginGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBeginGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBeginGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBeginGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBeginGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBeginGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBeginGuard::MergeFrom(const stBeginGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBeginGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBeginGuard::CopyFrom(const stBeginGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBeginGuard::IsInitialized() const {

  return true;
}

void stBeginGuard::Swap(stBeginGuard* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBeginGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBeginGuard_descriptor_;
  metadata.reflection = stBeginGuard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBeginGuardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginGuardResult_eResult_descriptor_;
}
bool stBeginGuardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginGuardResult_eResult stBeginGuardResult::eSuccess;
const stBeginGuardResult_eResult stBeginGuardResult::eHas_Begin;
const stBeginGuardResult_eResult stBeginGuardResult::eUse_Out_Num;
const stBeginGuardResult_eResult stBeginGuardResult::eResult_MIN;
const stBeginGuardResult_eResult stBeginGuardResult::eResult_MAX;
const int stBeginGuardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBeginGuardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginGuardResult_ProtoModID_descriptor_;
}
bool stBeginGuardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginGuardResult_ProtoModID stBeginGuardResult::ModID;
const stBeginGuardResult_ProtoModID stBeginGuardResult::ProtoModID_MIN;
const stBeginGuardResult_ProtoModID stBeginGuardResult::ProtoModID_MAX;
const int stBeginGuardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBeginGuardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginGuardResult_ProtoFunID_descriptor_;
}
bool stBeginGuardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 131:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginGuardResult_ProtoFunID stBeginGuardResult::FunID;
const stBeginGuardResult_ProtoFunID stBeginGuardResult::ProtoFunID_MIN;
const stBeginGuardResult_ProtoFunID stBeginGuardResult::ProtoFunID_MAX;
const int stBeginGuardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBeginGuardResult::kResultFieldNumber;
#endif  // !_MSC_VER

stBeginGuardResult::stBeginGuardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBeginGuardResult::InitAsDefaultInstance() {
}

stBeginGuardResult::stBeginGuardResult(const stBeginGuardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBeginGuardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBeginGuardResult::~stBeginGuardResult() {
  SharedDtor();
}

void stBeginGuardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBeginGuardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBeginGuardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginGuardResult_descriptor_;
}

const stBeginGuardResult& stBeginGuardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBeginGuardResult* stBeginGuardResult::default_instance_ = NULL;

stBeginGuardResult* stBeginGuardResult::New() const {
  return new stBeginGuardResult;
}

void stBeginGuardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBeginGuardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stBeginGuardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stBeginGuardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stBeginGuardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBeginGuardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stBeginGuardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBeginGuardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stBeginGuardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBeginGuardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stBeginGuardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBeginGuardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBeginGuardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBeginGuardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBeginGuardResult::MergeFrom(const stBeginGuardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBeginGuardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBeginGuardResult::CopyFrom(const stBeginGuardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBeginGuardResult::IsInitialized() const {

  return true;
}

void stBeginGuardResult::Swap(stBeginGuardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBeginGuardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBeginGuardResult_descriptor_;
  metadata.reflection = stBeginGuardResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stInterceptInfo::kTimestampFieldNumber;
const int stInterceptInfo::kContentFieldNumber;
#endif  // !_MSC_VER

stInterceptInfo::stInterceptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInterceptInfo::InitAsDefaultInstance() {
}

stInterceptInfo::stInterceptInfo(const stInterceptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInterceptInfo::SharedCtor() {
  _cached_size_ = 0;
  timestamp_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInterceptInfo::~stInterceptInfo() {
  SharedDtor();
}

void stInterceptInfo::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void stInterceptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInterceptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInterceptInfo_descriptor_;
}

const stInterceptInfo& stInterceptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stInterceptInfo* stInterceptInfo::default_instance_ = NULL;

stInterceptInfo* stInterceptInfo::New() const {
  return new stInterceptInfo;
}

void stInterceptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timestamp_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInterceptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInterceptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInterceptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInterceptInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 timestamp = 1;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInterceptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInterceptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInterceptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInterceptInfo::MergeFrom(const stInterceptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInterceptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInterceptInfo::CopyFrom(const stInterceptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInterceptInfo::IsInitialized() const {

  return true;
}

void stInterceptInfo::Swap(stInterceptInfo* other) {
  if (other != this) {
    std::swap(timestamp_, other->timestamp_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInterceptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInterceptInfo_descriptor_;
  metadata.reflection = stInterceptInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqInterceptInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInterceptInfo_ProtoModID_descriptor_;
}
bool stReqInterceptInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqInterceptInfo_ProtoModID stReqInterceptInfo::ModID;
const stReqInterceptInfo_ProtoModID stReqInterceptInfo::ProtoModID_MIN;
const stReqInterceptInfo_ProtoModID stReqInterceptInfo::ProtoModID_MAX;
const int stReqInterceptInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqInterceptInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInterceptInfo_ProtoFunID_descriptor_;
}
bool stReqInterceptInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 132:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqInterceptInfo_ProtoFunID stReqInterceptInfo::FunID;
const stReqInterceptInfo_ProtoFunID stReqInterceptInfo::ProtoFunID_MIN;
const stReqInterceptInfo_ProtoFunID stReqInterceptInfo::ProtoFunID_MAX;
const int stReqInterceptInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqInterceptInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqInterceptInfo::stReqInterceptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqInterceptInfo::InitAsDefaultInstance() {
}

stReqInterceptInfo::stReqInterceptInfo(const stReqInterceptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqInterceptInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqInterceptInfo::~stReqInterceptInfo() {
  SharedDtor();
}

void stReqInterceptInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqInterceptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqInterceptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInterceptInfo_descriptor_;
}

const stReqInterceptInfo& stReqInterceptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqInterceptInfo* stReqInterceptInfo::default_instance_ = NULL;

stReqInterceptInfo* stReqInterceptInfo::New() const {
  return new stReqInterceptInfo;
}

void stReqInterceptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqInterceptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqInterceptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqInterceptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqInterceptInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqInterceptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqInterceptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqInterceptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqInterceptInfo::MergeFrom(const stReqInterceptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqInterceptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqInterceptInfo::CopyFrom(const stReqInterceptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqInterceptInfo::IsInitialized() const {

  return true;
}

void stReqInterceptInfo::Swap(stReqInterceptInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqInterceptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqInterceptInfo_descriptor_;
  metadata.reflection = stReqInterceptInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetInterceptInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetInterceptInfo_ProtoModID_descriptor_;
}
bool stRetInterceptInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetInterceptInfo_ProtoModID stRetInterceptInfo::ModID;
const stRetInterceptInfo_ProtoModID stRetInterceptInfo::ProtoModID_MIN;
const stRetInterceptInfo_ProtoModID stRetInterceptInfo::ProtoModID_MAX;
const int stRetInterceptInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetInterceptInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetInterceptInfo_ProtoFunID_descriptor_;
}
bool stRetInterceptInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 133:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetInterceptInfo_ProtoFunID stRetInterceptInfo::FunID;
const stRetInterceptInfo_ProtoFunID stRetInterceptInfo::ProtoFunID_MIN;
const stRetInterceptInfo_ProtoFunID stRetInterceptInfo::ProtoFunID_MAX;
const int stRetInterceptInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetInterceptInfo::kInfosFieldNumber;
#endif  // !_MSC_VER

stRetInterceptInfo::stRetInterceptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetInterceptInfo::InitAsDefaultInstance() {
}

stRetInterceptInfo::stRetInterceptInfo(const stRetInterceptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetInterceptInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetInterceptInfo::~stRetInterceptInfo() {
  SharedDtor();
}

void stRetInterceptInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetInterceptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetInterceptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetInterceptInfo_descriptor_;
}

const stRetInterceptInfo& stRetInterceptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetInterceptInfo* stRetInterceptInfo::default_instance_ = NULL;

stRetInterceptInfo* stRetInterceptInfo::New() const {
  return new stRetInterceptInfo;
}

void stRetInterceptInfo::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetInterceptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stInterceptInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetInterceptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stInterceptInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetInterceptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stInterceptInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetInterceptInfo::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stInterceptInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetInterceptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetInterceptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetInterceptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetInterceptInfo::MergeFrom(const stRetInterceptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetInterceptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetInterceptInfo::CopyFrom(const stRetInterceptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetInterceptInfo::IsInitialized() const {

  return true;
}

void stRetInterceptInfo::Swap(stRetInterceptInfo* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetInterceptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetInterceptInfo_descriptor_;
  metadata.reflection = stRetInterceptInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRechargeActivityInfoItem::kIdFieldNumber;
const int stRechargeActivityInfoItem::kRechargeNumFieldNumber;
#endif  // !_MSC_VER

stRechargeActivityInfoItem::stRechargeActivityInfoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRechargeActivityInfoItem::InitAsDefaultInstance() {
}

stRechargeActivityInfoItem::stRechargeActivityInfoItem(const stRechargeActivityInfoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRechargeActivityInfoItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  rechargenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRechargeActivityInfoItem::~stRechargeActivityInfoItem() {
  SharedDtor();
}

void stRechargeActivityInfoItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRechargeActivityInfoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRechargeActivityInfoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechargeActivityInfoItem_descriptor_;
}

const stRechargeActivityInfoItem& stRechargeActivityInfoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRechargeActivityInfoItem* stRechargeActivityInfoItem::default_instance_ = NULL;

stRechargeActivityInfoItem* stRechargeActivityInfoItem::New() const {
  return new stRechargeActivityInfoItem;
}

void stRechargeActivityInfoItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    rechargenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRechargeActivityInfoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rechargeNum;
        break;
      }

      // optional uint32 rechargeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargenum_)));
          set_has_rechargenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRechargeActivityInfoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 rechargeNum = 2;
  if (has_rechargenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rechargenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRechargeActivityInfoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 rechargeNum = 2;
  if (has_rechargenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rechargenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRechargeActivityInfoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 rechargeNum = 2;
    if (has_rechargenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRechargeActivityInfoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRechargeActivityInfoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRechargeActivityInfoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRechargeActivityInfoItem::MergeFrom(const stRechargeActivityInfoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rechargenum()) {
      set_rechargenum(from.rechargenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRechargeActivityInfoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRechargeActivityInfoItem::CopyFrom(const stRechargeActivityInfoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRechargeActivityInfoItem::IsInitialized() const {

  return true;
}

void stRechargeActivityInfoItem::Swap(stRechargeActivityInfoItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rechargenum_, other->rechargenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRechargeActivityInfoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRechargeActivityInfoItem_descriptor_;
  metadata.reflection = stRechargeActivityInfoItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyRechargeActivityInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRechargeActivityInfo_ProtoModID_descriptor_;
}
bool stNotifyRechargeActivityInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyRechargeActivityInfo_ProtoModID stNotifyRechargeActivityInfo::ModID;
const stNotifyRechargeActivityInfo_ProtoModID stNotifyRechargeActivityInfo::ProtoModID_MIN;
const stNotifyRechargeActivityInfo_ProtoModID stNotifyRechargeActivityInfo::ProtoModID_MAX;
const int stNotifyRechargeActivityInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyRechargeActivityInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRechargeActivityInfo_ProtoFunID_descriptor_;
}
bool stNotifyRechargeActivityInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 134:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyRechargeActivityInfo_ProtoFunID stNotifyRechargeActivityInfo::FunID;
const stNotifyRechargeActivityInfo_ProtoFunID stNotifyRechargeActivityInfo::ProtoFunID_MIN;
const stNotifyRechargeActivityInfo_ProtoFunID stNotifyRechargeActivityInfo::ProtoFunID_MAX;
const int stNotifyRechargeActivityInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyRechargeActivityInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

stNotifyRechargeActivityInfo::stNotifyRechargeActivityInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyRechargeActivityInfo::InitAsDefaultInstance() {
}

stNotifyRechargeActivityInfo::stNotifyRechargeActivityInfo(const stNotifyRechargeActivityInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyRechargeActivityInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyRechargeActivityInfo::~stNotifyRechargeActivityInfo() {
  SharedDtor();
}

void stNotifyRechargeActivityInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyRechargeActivityInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyRechargeActivityInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRechargeActivityInfo_descriptor_;
}

const stNotifyRechargeActivityInfo& stNotifyRechargeActivityInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stNotifyRechargeActivityInfo* stNotifyRechargeActivityInfo::default_instance_ = NULL;

stNotifyRechargeActivityInfo* stNotifyRechargeActivityInfo::New() const {
  return new stNotifyRechargeActivityInfo;
}

void stNotifyRechargeActivityInfo::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyRechargeActivityInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stRechargeActivityInfoItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyRechargeActivityInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stRechargeActivityInfoItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyRechargeActivityInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stRechargeActivityInfoItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyRechargeActivityInfo::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stRechargeActivityInfoItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyRechargeActivityInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyRechargeActivityInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyRechargeActivityInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyRechargeActivityInfo::MergeFrom(const stNotifyRechargeActivityInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyRechargeActivityInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyRechargeActivityInfo::CopyFrom(const stNotifyRechargeActivityInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyRechargeActivityInfo::IsInitialized() const {

  return true;
}

void stNotifyRechargeActivityInfo::Swap(stNotifyRechargeActivityInfo* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyRechargeActivityInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyRechargeActivityInfo_descriptor_;
  metadata.reflection = stNotifyRechargeActivityInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLuckShopRefreshResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckShopRefreshResult_ProtoModID_descriptor_;
}
bool stLuckShopRefreshResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLuckShopRefreshResult_ProtoModID stLuckShopRefreshResult::ModID;
const stLuckShopRefreshResult_ProtoModID stLuckShopRefreshResult::ProtoModID_MIN;
const stLuckShopRefreshResult_ProtoModID stLuckShopRefreshResult::ProtoModID_MAX;
const int stLuckShopRefreshResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLuckShopRefreshResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckShopRefreshResult_ProtoFunID_descriptor_;
}
bool stLuckShopRefreshResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 135:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLuckShopRefreshResult_ProtoFunID stLuckShopRefreshResult::FunID;
const stLuckShopRefreshResult_ProtoFunID stLuckShopRefreshResult::ProtoFunID_MIN;
const stLuckShopRefreshResult_ProtoFunID stLuckShopRefreshResult::ProtoFunID_MAX;
const int stLuckShopRefreshResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLuckShopRefreshResult::kCurRefreshVipLvFieldNumber;
const int stLuckShopRefreshResult::kEntryIDFieldNumber;
#endif  // !_MSC_VER

stLuckShopRefreshResult::stLuckShopRefreshResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLuckShopRefreshResult::InitAsDefaultInstance() {
}

stLuckShopRefreshResult::stLuckShopRefreshResult(const stLuckShopRefreshResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLuckShopRefreshResult::SharedCtor() {
  _cached_size_ = 0;
  currefreshviplv_ = 0u;
  entryid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLuckShopRefreshResult::~stLuckShopRefreshResult() {
  SharedDtor();
}

void stLuckShopRefreshResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLuckShopRefreshResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLuckShopRefreshResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckShopRefreshResult_descriptor_;
}

const stLuckShopRefreshResult& stLuckShopRefreshResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stLuckShopRefreshResult* stLuckShopRefreshResult::default_instance_ = NULL;

stLuckShopRefreshResult* stLuckShopRefreshResult::New() const {
  return new stLuckShopRefreshResult;
}

void stLuckShopRefreshResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currefreshviplv_ = 0u;
    entryid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLuckShopRefreshResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curRefreshVipLv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currefreshviplv_)));
          set_has_currefreshviplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entryID;
        break;
      }

      // optional uint32 entryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entryid_)));
          set_has_entryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLuckShopRefreshResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curRefreshVipLv = 1;
  if (has_currefreshviplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->currefreshviplv(), output);
  }

  // optional uint32 entryID = 2;
  if (has_entryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLuckShopRefreshResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curRefreshVipLv = 1;
  if (has_currefreshviplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->currefreshviplv(), target);
  }

  // optional uint32 entryID = 2;
  if (has_entryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLuckShopRefreshResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curRefreshVipLv = 1;
    if (has_currefreshviplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currefreshviplv());
    }

    // optional uint32 entryID = 2;
    if (has_entryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLuckShopRefreshResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLuckShopRefreshResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLuckShopRefreshResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLuckShopRefreshResult::MergeFrom(const stLuckShopRefreshResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currefreshviplv()) {
      set_currefreshviplv(from.currefreshviplv());
    }
    if (from.has_entryid()) {
      set_entryid(from.entryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLuckShopRefreshResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLuckShopRefreshResult::CopyFrom(const stLuckShopRefreshResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLuckShopRefreshResult::IsInitialized() const {

  return true;
}

void stLuckShopRefreshResult::Swap(stLuckShopRefreshResult* other) {
  if (other != this) {
    std::swap(currefreshviplv_, other->currefreshviplv_);
    std::swap(entryid_, other->entryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLuckShopRefreshResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLuckShopRefreshResult_descriptor_;
  metadata.reflection = stLuckShopRefreshResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyGuardFinish_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuardFinish_ProtoModID_descriptor_;
}
bool stNotifyGuardFinish_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGuardFinish_ProtoModID stNotifyGuardFinish::ModID;
const stNotifyGuardFinish_ProtoModID stNotifyGuardFinish::ProtoModID_MIN;
const stNotifyGuardFinish_ProtoModID stNotifyGuardFinish::ProtoModID_MAX;
const int stNotifyGuardFinish::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyGuardFinish_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuardFinish_ProtoFunID_descriptor_;
}
bool stNotifyGuardFinish_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 136:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGuardFinish_ProtoFunID stNotifyGuardFinish::FunID;
const stNotifyGuardFinish_ProtoFunID stNotifyGuardFinish::ProtoFunID_MIN;
const stNotifyGuardFinish_ProtoFunID stNotifyGuardFinish::ProtoFunID_MAX;
const int stNotifyGuardFinish::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyGuardFinish::kQualityFieldNumber;
const int stNotifyGuardFinish::kBeInterceptNumFieldNumber;
const int stNotifyGuardFinish::kFriendNameFieldNumber;
const int stNotifyGuardFinish::kResID1FieldNumber;
const int stNotifyGuardFinish::kResNum1FieldNumber;
const int stNotifyGuardFinish::kResID2FieldNumber;
const int stNotifyGuardFinish::kResNum2FieldNumber;
const int stNotifyGuardFinish::kResID3FieldNumber;
const int stNotifyGuardFinish::kResNum3FieldNumber;
const int stNotifyGuardFinish::kGuardIDFieldNumber;
#endif  // !_MSC_VER

stNotifyGuardFinish::stNotifyGuardFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyGuardFinish::InitAsDefaultInstance() {
}

stNotifyGuardFinish::stNotifyGuardFinish(const stNotifyGuardFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyGuardFinish::SharedCtor() {
  _cached_size_ = 0;
  quality_ = 0u;
  beinterceptnum_ = 0u;
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resid1_ = 0u;
  resnum1_ = 0u;
  resid2_ = 0u;
  resnum2_ = 0u;
  resid3_ = 0u;
  resnum3_ = 0u;
  guardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyGuardFinish::~stNotifyGuardFinish() {
  SharedDtor();
}

void stNotifyGuardFinish::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void stNotifyGuardFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyGuardFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuardFinish_descriptor_;
}

const stNotifyGuardFinish& stNotifyGuardFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stNotifyGuardFinish* stNotifyGuardFinish::default_instance_ = NULL;

stNotifyGuardFinish* stNotifyGuardFinish::New() const {
  return new stNotifyGuardFinish;
}

void stNotifyGuardFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quality_ = 0u;
    beinterceptnum_ = 0u;
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    resid1_ = 0u;
    resnum1_ = 0u;
    resid2_ = 0u;
    resnum2_ = 0u;
    resid3_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    resnum3_ = 0u;
    guardid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyGuardFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 quality = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beInterceptNum;
        break;
      }

      // optional uint32 beInterceptNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beInterceptNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beinterceptnum_)));
          set_has_beinterceptnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendName;
        break;
      }

      // optional string friendName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resID1;
        break;
      }

      // optional uint32 resID1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid1_)));
          set_has_resid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resNum1;
        break;
      }

      // optional uint32 resNum1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum1_)));
          set_has_resnum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resID2;
        break;
      }

      // optional uint32 resID2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid2_)));
          set_has_resid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_resNum2;
        break;
      }

      // optional uint32 resNum2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum2_)));
          set_has_resnum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_resID3;
        break;
      }

      // optional uint32 resID3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid3_)));
          set_has_resid3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_resNum3;
        break;
      }

      // optional uint32 resNum3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum3_)));
          set_has_resnum3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_guardID;
        break;
      }

      // optional uint32 guardID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guardid_)));
          set_has_guardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyGuardFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 quality = 1;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quality(), output);
  }

  // optional uint32 beInterceptNum = 2;
  if (has_beinterceptnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->beinterceptnum(), output);
  }

  // optional string friendName = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->friendname(), output);
  }

  // optional uint32 resID1 = 4;
  if (has_resid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resid1(), output);
  }

  // optional uint32 resNum1 = 5;
  if (has_resnum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resnum1(), output);
  }

  // optional uint32 resID2 = 6;
  if (has_resid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->resid2(), output);
  }

  // optional uint32 resNum2 = 7;
  if (has_resnum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->resnum2(), output);
  }

  // optional uint32 resID3 = 8;
  if (has_resid3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->resid3(), output);
  }

  // optional uint32 resNum3 = 9;
  if (has_resnum3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->resnum3(), output);
  }

  // optional uint32 guardID = 10;
  if (has_guardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->guardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyGuardFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 quality = 1;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quality(), target);
  }

  // optional uint32 beInterceptNum = 2;
  if (has_beinterceptnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->beinterceptnum(), target);
  }

  // optional string friendName = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->friendname(), target);
  }

  // optional uint32 resID1 = 4;
  if (has_resid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resid1(), target);
  }

  // optional uint32 resNum1 = 5;
  if (has_resnum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resnum1(), target);
  }

  // optional uint32 resID2 = 6;
  if (has_resid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->resid2(), target);
  }

  // optional uint32 resNum2 = 7;
  if (has_resnum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->resnum2(), target);
  }

  // optional uint32 resID3 = 8;
  if (has_resid3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->resid3(), target);
  }

  // optional uint32 resNum3 = 9;
  if (has_resnum3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->resnum3(), target);
  }

  // optional uint32 guardID = 10;
  if (has_guardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->guardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyGuardFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 beInterceptNum = 2;
    if (has_beinterceptnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beinterceptnum());
    }

    // optional string friendName = 3;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // optional uint32 resID1 = 4;
    if (has_resid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid1());
    }

    // optional uint32 resNum1 = 5;
    if (has_resnum1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum1());
    }

    // optional uint32 resID2 = 6;
    if (has_resid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid2());
    }

    // optional uint32 resNum2 = 7;
    if (has_resnum2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum2());
    }

    // optional uint32 resID3 = 8;
    if (has_resid3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid3());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 resNum3 = 9;
    if (has_resnum3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum3());
    }

    // optional uint32 guardID = 10;
    if (has_guardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyGuardFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyGuardFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyGuardFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyGuardFinish::MergeFrom(const stNotifyGuardFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_beinterceptnum()) {
      set_beinterceptnum(from.beinterceptnum());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_resid1()) {
      set_resid1(from.resid1());
    }
    if (from.has_resnum1()) {
      set_resnum1(from.resnum1());
    }
    if (from.has_resid2()) {
      set_resid2(from.resid2());
    }
    if (from.has_resnum2()) {
      set_resnum2(from.resnum2());
    }
    if (from.has_resid3()) {
      set_resid3(from.resid3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_resnum3()) {
      set_resnum3(from.resnum3());
    }
    if (from.has_guardid()) {
      set_guardid(from.guardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyGuardFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyGuardFinish::CopyFrom(const stNotifyGuardFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyGuardFinish::IsInitialized() const {

  return true;
}

void stNotifyGuardFinish::Swap(stNotifyGuardFinish* other) {
  if (other != this) {
    std::swap(quality_, other->quality_);
    std::swap(beinterceptnum_, other->beinterceptnum_);
    std::swap(friendname_, other->friendname_);
    std::swap(resid1_, other->resid1_);
    std::swap(resnum1_, other->resnum1_);
    std::swap(resid2_, other->resid2_);
    std::swap(resnum2_, other->resnum2_);
    std::swap(resid3_, other->resid3_);
    std::swap(resnum3_, other->resnum3_);
    std::swap(guardid_, other->guardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyGuardFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyGuardFinish_descriptor_;
  metadata.reflection = stNotifyGuardFinish_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyFriendGuardFinish_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFriendGuardFinish_ProtoModID_descriptor_;
}
bool stNotifyFriendGuardFinish_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyFriendGuardFinish_ProtoModID stNotifyFriendGuardFinish::ModID;
const stNotifyFriendGuardFinish_ProtoModID stNotifyFriendGuardFinish::ProtoModID_MIN;
const stNotifyFriendGuardFinish_ProtoModID stNotifyFriendGuardFinish::ProtoModID_MAX;
const int stNotifyFriendGuardFinish::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyFriendGuardFinish_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFriendGuardFinish_ProtoFunID_descriptor_;
}
bool stNotifyFriendGuardFinish_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 137:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyFriendGuardFinish_ProtoFunID stNotifyFriendGuardFinish::FunID;
const stNotifyFriendGuardFinish_ProtoFunID stNotifyFriendGuardFinish::ProtoFunID_MIN;
const stNotifyFriendGuardFinish_ProtoFunID stNotifyFriendGuardFinish::ProtoFunID_MAX;
const int stNotifyFriendGuardFinish::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyFriendGuardFinish::kQualityFieldNumber;
const int stNotifyFriendGuardFinish::kBeInterceptNumFieldNumber;
const int stNotifyFriendGuardFinish::kFriendNameFieldNumber;
const int stNotifyFriendGuardFinish::kResID1FieldNumber;
const int stNotifyFriendGuardFinish::kResNum1FieldNumber;
const int stNotifyFriendGuardFinish::kResID2FieldNumber;
const int stNotifyFriendGuardFinish::kResNum2FieldNumber;
const int stNotifyFriendGuardFinish::kGuardIDFieldNumber;
#endif  // !_MSC_VER

stNotifyFriendGuardFinish::stNotifyFriendGuardFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyFriendGuardFinish::InitAsDefaultInstance() {
}

stNotifyFriendGuardFinish::stNotifyFriendGuardFinish(const stNotifyFriendGuardFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyFriendGuardFinish::SharedCtor() {
  _cached_size_ = 0;
  quality_ = 0u;
  beinterceptnum_ = 0u;
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resid1_ = 0u;
  resnum1_ = 0u;
  resid2_ = 0u;
  resnum2_ = 0u;
  guardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyFriendGuardFinish::~stNotifyFriendGuardFinish() {
  SharedDtor();
}

void stNotifyFriendGuardFinish::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void stNotifyFriendGuardFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyFriendGuardFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFriendGuardFinish_descriptor_;
}

const stNotifyFriendGuardFinish& stNotifyFriendGuardFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stNotifyFriendGuardFinish* stNotifyFriendGuardFinish::default_instance_ = NULL;

stNotifyFriendGuardFinish* stNotifyFriendGuardFinish::New() const {
  return new stNotifyFriendGuardFinish;
}

void stNotifyFriendGuardFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    quality_ = 0u;
    beinterceptnum_ = 0u;
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    resid1_ = 0u;
    resnum1_ = 0u;
    resid2_ = 0u;
    resnum2_ = 0u;
    guardid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyFriendGuardFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 quality = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beInterceptNum;
        break;
      }

      // optional uint32 beInterceptNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beInterceptNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beinterceptnum_)));
          set_has_beinterceptnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendName;
        break;
      }

      // optional string friendName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resID1;
        break;
      }

      // optional uint32 resID1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid1_)));
          set_has_resid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resNum1;
        break;
      }

      // optional uint32 resNum1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum1_)));
          set_has_resnum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resID2;
        break;
      }

      // optional uint32 resID2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid2_)));
          set_has_resid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_resNum2;
        break;
      }

      // optional uint32 resNum2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum2_)));
          set_has_resnum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_guardID;
        break;
      }

      // optional uint32 guardID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guardid_)));
          set_has_guardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyFriendGuardFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 quality = 1;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->quality(), output);
  }

  // optional uint32 beInterceptNum = 2;
  if (has_beinterceptnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->beinterceptnum(), output);
  }

  // optional string friendName = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->friendname(), output);
  }

  // optional uint32 resID1 = 4;
  if (has_resid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resid1(), output);
  }

  // optional uint32 resNum1 = 5;
  if (has_resnum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resnum1(), output);
  }

  // optional uint32 resID2 = 6;
  if (has_resid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->resid2(), output);
  }

  // optional uint32 resNum2 = 7;
  if (has_resnum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->resnum2(), output);
  }

  // optional uint32 guardID = 8;
  if (has_guardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->guardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyFriendGuardFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 quality = 1;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->quality(), target);
  }

  // optional uint32 beInterceptNum = 2;
  if (has_beinterceptnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->beinterceptnum(), target);
  }

  // optional string friendName = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->friendname(), target);
  }

  // optional uint32 resID1 = 4;
  if (has_resid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resid1(), target);
  }

  // optional uint32 resNum1 = 5;
  if (has_resnum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resnum1(), target);
  }

  // optional uint32 resID2 = 6;
  if (has_resid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->resid2(), target);
  }

  // optional uint32 resNum2 = 7;
  if (has_resnum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->resnum2(), target);
  }

  // optional uint32 guardID = 8;
  if (has_guardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->guardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyFriendGuardFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 quality = 1;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 beInterceptNum = 2;
    if (has_beinterceptnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beinterceptnum());
    }

    // optional string friendName = 3;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // optional uint32 resID1 = 4;
    if (has_resid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid1());
    }

    // optional uint32 resNum1 = 5;
    if (has_resnum1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum1());
    }

    // optional uint32 resID2 = 6;
    if (has_resid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid2());
    }

    // optional uint32 resNum2 = 7;
    if (has_resnum2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum2());
    }

    // optional uint32 guardID = 8;
    if (has_guardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyFriendGuardFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyFriendGuardFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyFriendGuardFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyFriendGuardFinish::MergeFrom(const stNotifyFriendGuardFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_beinterceptnum()) {
      set_beinterceptnum(from.beinterceptnum());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_resid1()) {
      set_resid1(from.resid1());
    }
    if (from.has_resnum1()) {
      set_resnum1(from.resnum1());
    }
    if (from.has_resid2()) {
      set_resid2(from.resid2());
    }
    if (from.has_resnum2()) {
      set_resnum2(from.resnum2());
    }
    if (from.has_guardid()) {
      set_guardid(from.guardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyFriendGuardFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyFriendGuardFinish::CopyFrom(const stNotifyFriendGuardFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyFriendGuardFinish::IsInitialized() const {

  return true;
}

void stNotifyFriendGuardFinish::Swap(stNotifyFriendGuardFinish* other) {
  if (other != this) {
    std::swap(quality_, other->quality_);
    std::swap(beinterceptnum_, other->beinterceptnum_);
    std::swap(friendname_, other->friendname_);
    std::swap(resid1_, other->resid1_);
    std::swap(resnum1_, other->resnum1_);
    std::swap(resid2_, other->resid2_);
    std::swap(resnum2_, other->resnum2_);
    std::swap(guardid_, other->guardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyFriendGuardFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyFriendGuardFinish_descriptor_;
  metadata.reflection = stNotifyFriendGuardFinish_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyInterceptResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyInterceptResult_ProtoModID_descriptor_;
}
bool stNotifyInterceptResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyInterceptResult_ProtoModID stNotifyInterceptResult::ModID;
const stNotifyInterceptResult_ProtoModID stNotifyInterceptResult::ProtoModID_MIN;
const stNotifyInterceptResult_ProtoModID stNotifyInterceptResult::ProtoModID_MAX;
const int stNotifyInterceptResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyInterceptResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyInterceptResult_ProtoFunID_descriptor_;
}
bool stNotifyInterceptResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 138:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyInterceptResult_ProtoFunID stNotifyInterceptResult::FunID;
const stNotifyInterceptResult_ProtoFunID stNotifyInterceptResult::ProtoFunID_MIN;
const stNotifyInterceptResult_ProtoFunID stNotifyInterceptResult::ProtoFunID_MAX;
const int stNotifyInterceptResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyInterceptResult::kWinFieldNumber;
const int stNotifyInterceptResult::kFlagFieldNumber;
#endif  // !_MSC_VER

stNotifyInterceptResult::stNotifyInterceptResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyInterceptResult::InitAsDefaultInstance() {
}

stNotifyInterceptResult::stNotifyInterceptResult(const stNotifyInterceptResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyInterceptResult::SharedCtor() {
  _cached_size_ = 0;
  win_ = false;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyInterceptResult::~stNotifyInterceptResult() {
  SharedDtor();
}

void stNotifyInterceptResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyInterceptResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyInterceptResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyInterceptResult_descriptor_;
}

const stNotifyInterceptResult& stNotifyInterceptResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stNotifyInterceptResult* stNotifyInterceptResult::default_instance_ = NULL;

stNotifyInterceptResult* stNotifyInterceptResult::New() const {
  return new stNotifyInterceptResult;
}

void stNotifyInterceptResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    win_ = false;
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyInterceptResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyInterceptResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool win = 1;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->win(), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyInterceptResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool win = 1;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->win(), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyInterceptResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool win = 1;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyInterceptResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyInterceptResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyInterceptResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyInterceptResult::MergeFrom(const stNotifyInterceptResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyInterceptResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyInterceptResult::CopyFrom(const stNotifyInterceptResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyInterceptResult::IsInitialized() const {

  return true;
}

void stNotifyInterceptResult::Swap(stNotifyInterceptResult* other) {
  if (other != this) {
    std::swap(win_, other->win_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyInterceptResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyInterceptResult_descriptor_;
  metadata.reflection = stNotifyInterceptResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplyNotifyIntercept_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyNotifyIntercept_ProtoModID_descriptor_;
}
bool stReplyNotifyIntercept_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyNotifyIntercept_ProtoModID stReplyNotifyIntercept::ModID;
const stReplyNotifyIntercept_ProtoModID stReplyNotifyIntercept::ProtoModID_MIN;
const stReplyNotifyIntercept_ProtoModID stReplyNotifyIntercept::ProtoModID_MAX;
const int stReplyNotifyIntercept::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyNotifyIntercept_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyNotifyIntercept_ProtoFunID_descriptor_;
}
bool stReplyNotifyIntercept_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 139:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyNotifyIntercept_ProtoFunID stReplyNotifyIntercept::FunID;
const stReplyNotifyIntercept_ProtoFunID stReplyNotifyIntercept::ProtoFunID_MIN;
const stReplyNotifyIntercept_ProtoFunID stReplyNotifyIntercept::ProtoFunID_MAX;
const int stReplyNotifyIntercept::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplyNotifyIntercept::kResID1FieldNumber;
const int stReplyNotifyIntercept::kResNum1FieldNumber;
const int stReplyNotifyIntercept::kResID2FieldNumber;
const int stReplyNotifyIntercept::kResNum2FieldNumber;
#endif  // !_MSC_VER

stReplyNotifyIntercept::stReplyNotifyIntercept()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplyNotifyIntercept::InitAsDefaultInstance() {
}

stReplyNotifyIntercept::stReplyNotifyIntercept(const stReplyNotifyIntercept& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplyNotifyIntercept::SharedCtor() {
  _cached_size_ = 0;
  resid1_ = 0u;
  resnum1_ = 0u;
  resid2_ = 0u;
  resnum2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplyNotifyIntercept::~stReplyNotifyIntercept() {
  SharedDtor();
}

void stReplyNotifyIntercept::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReplyNotifyIntercept::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplyNotifyIntercept::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyNotifyIntercept_descriptor_;
}

const stReplyNotifyIntercept& stReplyNotifyIntercept::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReplyNotifyIntercept* stReplyNotifyIntercept::default_instance_ = NULL;

stReplyNotifyIntercept* stReplyNotifyIntercept::New() const {
  return new stReplyNotifyIntercept;
}

void stReplyNotifyIntercept::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resid1_ = 0u;
    resnum1_ = 0u;
    resid2_ = 0u;
    resnum2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplyNotifyIntercept::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resID1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid1_)));
          set_has_resid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resNum1;
        break;
      }

      // optional uint32 resNum1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum1_)));
          set_has_resnum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resID2;
        break;
      }

      // optional uint32 resID2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid2_)));
          set_has_resid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resNum2;
        break;
      }

      // optional uint32 resNum2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum2_)));
          set_has_resnum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplyNotifyIntercept::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 resID1 = 1;
  if (has_resid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resid1(), output);
  }

  // optional uint32 resNum1 = 2;
  if (has_resnum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resnum1(), output);
  }

  // optional uint32 resID2 = 3;
  if (has_resid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resid2(), output);
  }

  // optional uint32 resNum2 = 4;
  if (has_resnum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resnum2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplyNotifyIntercept::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 resID1 = 1;
  if (has_resid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resid1(), target);
  }

  // optional uint32 resNum1 = 2;
  if (has_resnum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resnum1(), target);
  }

  // optional uint32 resID2 = 3;
  if (has_resid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resid2(), target);
  }

  // optional uint32 resNum2 = 4;
  if (has_resnum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resnum2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplyNotifyIntercept::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 resID1 = 1;
    if (has_resid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid1());
    }

    // optional uint32 resNum1 = 2;
    if (has_resnum1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum1());
    }

    // optional uint32 resID2 = 3;
    if (has_resid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid2());
    }

    // optional uint32 resNum2 = 4;
    if (has_resnum2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplyNotifyIntercept::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplyNotifyIntercept* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplyNotifyIntercept*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplyNotifyIntercept::MergeFrom(const stReplyNotifyIntercept& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resid1()) {
      set_resid1(from.resid1());
    }
    if (from.has_resnum1()) {
      set_resnum1(from.resnum1());
    }
    if (from.has_resid2()) {
      set_resid2(from.resid2());
    }
    if (from.has_resnum2()) {
      set_resnum2(from.resnum2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplyNotifyIntercept::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplyNotifyIntercept::CopyFrom(const stReplyNotifyIntercept& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplyNotifyIntercept::IsInitialized() const {

  return true;
}

void stReplyNotifyIntercept::Swap(stReplyNotifyIntercept* other) {
  if (other != this) {
    std::swap(resid1_, other->resid1_);
    std::swap(resnum1_, other->resnum1_);
    std::swap(resid2_, other->resid2_);
    std::swap(resnum2_, other->resnum2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplyNotifyIntercept::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplyNotifyIntercept_descriptor_;
  metadata.reflection = stReplyNotifyIntercept_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stQuickFinishGuard_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishGuard_ProtoModID_descriptor_;
}
bool stQuickFinishGuard_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQuickFinishGuard_ProtoModID stQuickFinishGuard::ModID;
const stQuickFinishGuard_ProtoModID stQuickFinishGuard::ProtoModID_MIN;
const stQuickFinishGuard_ProtoModID stQuickFinishGuard::ProtoModID_MAX;
const int stQuickFinishGuard::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stQuickFinishGuard_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishGuard_ProtoFunID_descriptor_;
}
bool stQuickFinishGuard_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 140:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQuickFinishGuard_ProtoFunID stQuickFinishGuard::FunID;
const stQuickFinishGuard_ProtoFunID stQuickFinishGuard::ProtoFunID_MIN;
const stQuickFinishGuard_ProtoFunID stQuickFinishGuard::ProtoFunID_MAX;
const int stQuickFinishGuard::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stQuickFinishGuard::kCharIDFieldNumber;
#endif  // !_MSC_VER

stQuickFinishGuard::stQuickFinishGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stQuickFinishGuard::InitAsDefaultInstance() {
}

stQuickFinishGuard::stQuickFinishGuard(const stQuickFinishGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stQuickFinishGuard::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQuickFinishGuard::~stQuickFinishGuard() {
  SharedDtor();
}

void stQuickFinishGuard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQuickFinishGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQuickFinishGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishGuard_descriptor_;
}

const stQuickFinishGuard& stQuickFinishGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stQuickFinishGuard* stQuickFinishGuard::default_instance_ = NULL;

stQuickFinishGuard* stQuickFinishGuard::New() const {
  return new stQuickFinishGuard;
}

void stQuickFinishGuard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQuickFinishGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stQuickFinishGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stQuickFinishGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stQuickFinishGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQuickFinishGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQuickFinishGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQuickFinishGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQuickFinishGuard::MergeFrom(const stQuickFinishGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQuickFinishGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQuickFinishGuard::CopyFrom(const stQuickFinishGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQuickFinishGuard::IsInitialized() const {

  return true;
}

void stQuickFinishGuard::Swap(stQuickFinishGuard* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQuickFinishGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQuickFinishGuard_descriptor_;
  metadata.reflection = stQuickFinishGuard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stQuickFinishGuardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishGuardResult_eResult_descriptor_;
}
bool stQuickFinishGuardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQuickFinishGuardResult_eResult stQuickFinishGuardResult::eSuccess;
const stQuickFinishGuardResult_eResult stQuickFinishGuardResult::eHas_Not_Begin;
const stQuickFinishGuardResult_eResult stQuickFinishGuardResult::eDiamond_Not_Enough;
const stQuickFinishGuardResult_eResult stQuickFinishGuardResult::eBeing_Intercepted;
const stQuickFinishGuardResult_eResult stQuickFinishGuardResult::eResult_MIN;
const stQuickFinishGuardResult_eResult stQuickFinishGuardResult::eResult_MAX;
const int stQuickFinishGuardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stQuickFinishGuardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishGuardResult_ProtoModID_descriptor_;
}
bool stQuickFinishGuardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQuickFinishGuardResult_ProtoModID stQuickFinishGuardResult::ModID;
const stQuickFinishGuardResult_ProtoModID stQuickFinishGuardResult::ProtoModID_MIN;
const stQuickFinishGuardResult_ProtoModID stQuickFinishGuardResult::ProtoModID_MAX;
const int stQuickFinishGuardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stQuickFinishGuardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishGuardResult_ProtoFunID_descriptor_;
}
bool stQuickFinishGuardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 141:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQuickFinishGuardResult_ProtoFunID stQuickFinishGuardResult::FunID;
const stQuickFinishGuardResult_ProtoFunID stQuickFinishGuardResult::ProtoFunID_MIN;
const stQuickFinishGuardResult_ProtoFunID stQuickFinishGuardResult::ProtoFunID_MAX;
const int stQuickFinishGuardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stQuickFinishGuardResult::kResultFieldNumber;
#endif  // !_MSC_VER

stQuickFinishGuardResult::stQuickFinishGuardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stQuickFinishGuardResult::InitAsDefaultInstance() {
}

stQuickFinishGuardResult::stQuickFinishGuardResult(const stQuickFinishGuardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stQuickFinishGuardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQuickFinishGuardResult::~stQuickFinishGuardResult() {
  SharedDtor();
}

void stQuickFinishGuardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQuickFinishGuardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQuickFinishGuardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishGuardResult_descriptor_;
}

const stQuickFinishGuardResult& stQuickFinishGuardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stQuickFinishGuardResult* stQuickFinishGuardResult::default_instance_ = NULL;

stQuickFinishGuardResult* stQuickFinishGuardResult::New() const {
  return new stQuickFinishGuardResult;
}

void stQuickFinishGuardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQuickFinishGuardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stQuickFinishGuardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stQuickFinishGuardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stQuickFinishGuardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stQuickFinishGuardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stQuickFinishGuardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stQuickFinishGuardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stQuickFinishGuardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stQuickFinishGuardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stQuickFinishGuardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQuickFinishGuardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQuickFinishGuardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQuickFinishGuardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQuickFinishGuardResult::MergeFrom(const stQuickFinishGuardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQuickFinishGuardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQuickFinishGuardResult::CopyFrom(const stQuickFinishGuardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQuickFinishGuardResult::IsInitialized() const {

  return true;
}

void stQuickFinishGuardResult::Swap(stQuickFinishGuardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQuickFinishGuardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQuickFinishGuardResult_descriptor_;
  metadata.reflection = stQuickFinishGuardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyDelTitle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyDelTitle_ProtoModID_descriptor_;
}
bool stNotifyDelTitle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyDelTitle_ProtoModID stNotifyDelTitle::ModID;
const stNotifyDelTitle_ProtoModID stNotifyDelTitle::ProtoModID_MIN;
const stNotifyDelTitle_ProtoModID stNotifyDelTitle::ProtoModID_MAX;
const int stNotifyDelTitle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyDelTitle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyDelTitle_ProtoFunID_descriptor_;
}
bool stNotifyDelTitle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 142:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyDelTitle_ProtoFunID stNotifyDelTitle::FunID;
const stNotifyDelTitle_ProtoFunID stNotifyDelTitle::ProtoFunID_MIN;
const stNotifyDelTitle_ProtoFunID stNotifyDelTitle::ProtoFunID_MAX;
const int stNotifyDelTitle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyDelTitle::kTitleIDFieldNumber;
#endif  // !_MSC_VER

stNotifyDelTitle::stNotifyDelTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyDelTitle::InitAsDefaultInstance() {
}

stNotifyDelTitle::stNotifyDelTitle(const stNotifyDelTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyDelTitle::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyDelTitle::~stNotifyDelTitle() {
  SharedDtor();
}

void stNotifyDelTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyDelTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyDelTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyDelTitle_descriptor_;
}

const stNotifyDelTitle& stNotifyDelTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stNotifyDelTitle* stNotifyDelTitle::default_instance_ = NULL;

stNotifyDelTitle* stNotifyDelTitle::New() const {
  return new stNotifyDelTitle;
}

void stNotifyDelTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyDelTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 titleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyDelTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 titleID = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->titleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyDelTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 titleID = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->titleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyDelTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 titleID = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->titleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyDelTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyDelTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyDelTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyDelTitle::MergeFrom(const stNotifyDelTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyDelTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyDelTitle::CopyFrom(const stNotifyDelTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyDelTitle::IsInitialized() const {

  return true;
}

void stNotifyDelTitle::Swap(stNotifyDelTitle* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyDelTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyDelTitle_descriptor_;
  metadata.reflection = stNotifyDelTitle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBeInterceptTip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeInterceptTip_ProtoModID_descriptor_;
}
bool stBeInterceptTip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeInterceptTip_ProtoModID stBeInterceptTip::ModID;
const stBeInterceptTip_ProtoModID stBeInterceptTip::ProtoModID_MIN;
const stBeInterceptTip_ProtoModID stBeInterceptTip::ProtoModID_MAX;
const int stBeInterceptTip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBeInterceptTip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeInterceptTip_ProtoFunID_descriptor_;
}
bool stBeInterceptTip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 143:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeInterceptTip_ProtoFunID stBeInterceptTip::FunID;
const stBeInterceptTip_ProtoFunID stBeInterceptTip::ProtoFunID_MIN;
const stBeInterceptTip_ProtoFunID stBeInterceptTip::ProtoFunID_MAX;
const int stBeInterceptTip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBeInterceptTip::kWinFieldNumber;
const int stBeInterceptTip::kNameFieldNumber;
const int stBeInterceptTip::kQualityFieldNumber;
#endif  // !_MSC_VER

stBeInterceptTip::stBeInterceptTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBeInterceptTip::InitAsDefaultInstance() {
}

stBeInterceptTip::stBeInterceptTip(const stBeInterceptTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBeInterceptTip::SharedCtor() {
  _cached_size_ = 0;
  win_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBeInterceptTip::~stBeInterceptTip() {
  SharedDtor();
}

void stBeInterceptTip::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stBeInterceptTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBeInterceptTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeInterceptTip_descriptor_;
}

const stBeInterceptTip& stBeInterceptTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBeInterceptTip* stBeInterceptTip::default_instance_ = NULL;

stBeInterceptTip* stBeInterceptTip::New() const {
  return new stBeInterceptTip;
}

void stBeInterceptTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    win_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    quality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBeInterceptTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool win = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBeInterceptTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool win = 1;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->win(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBeInterceptTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool win = 1;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->win(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBeInterceptTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool win = 1;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBeInterceptTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBeInterceptTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBeInterceptTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBeInterceptTip::MergeFrom(const stBeInterceptTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBeInterceptTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBeInterceptTip::CopyFrom(const stBeInterceptTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBeInterceptTip::IsInitialized() const {

  return true;
}

void stBeInterceptTip::Swap(stBeInterceptTip* other) {
  if (other != this) {
    std::swap(win_, other->win_);
    std::swap(name_, other->name_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBeInterceptTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBeInterceptTip_descriptor_;
  metadata.reflection = stBeInterceptTip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOnlineNotifyNewInterceptInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnlineNotifyNewInterceptInfo_ProtoModID_descriptor_;
}
bool stOnlineNotifyNewInterceptInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOnlineNotifyNewInterceptInfo_ProtoModID stOnlineNotifyNewInterceptInfo::ModID;
const stOnlineNotifyNewInterceptInfo_ProtoModID stOnlineNotifyNewInterceptInfo::ProtoModID_MIN;
const stOnlineNotifyNewInterceptInfo_ProtoModID stOnlineNotifyNewInterceptInfo::ProtoModID_MAX;
const int stOnlineNotifyNewInterceptInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOnlineNotifyNewInterceptInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnlineNotifyNewInterceptInfo_ProtoFunID_descriptor_;
}
bool stOnlineNotifyNewInterceptInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 144:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOnlineNotifyNewInterceptInfo_ProtoFunID stOnlineNotifyNewInterceptInfo::FunID;
const stOnlineNotifyNewInterceptInfo_ProtoFunID stOnlineNotifyNewInterceptInfo::ProtoFunID_MIN;
const stOnlineNotifyNewInterceptInfo_ProtoFunID stOnlineNotifyNewInterceptInfo::ProtoFunID_MAX;
const int stOnlineNotifyNewInterceptInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOnlineNotifyNewInterceptInfo::kNumFieldNumber;
const int stOnlineNotifyNewInterceptInfo::kGuardNumFieldNumber;
const int stOnlineNotifyNewInterceptInfo::kIntercertNumFieldNumber;
#endif  // !_MSC_VER

stOnlineNotifyNewInterceptInfo::stOnlineNotifyNewInterceptInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOnlineNotifyNewInterceptInfo::InitAsDefaultInstance() {
}

stOnlineNotifyNewInterceptInfo::stOnlineNotifyNewInterceptInfo(const stOnlineNotifyNewInterceptInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOnlineNotifyNewInterceptInfo::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  guardnum_ = 0u;
  intercertnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOnlineNotifyNewInterceptInfo::~stOnlineNotifyNewInterceptInfo() {
  SharedDtor();
}

void stOnlineNotifyNewInterceptInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOnlineNotifyNewInterceptInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOnlineNotifyNewInterceptInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnlineNotifyNewInterceptInfo_descriptor_;
}

const stOnlineNotifyNewInterceptInfo& stOnlineNotifyNewInterceptInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stOnlineNotifyNewInterceptInfo* stOnlineNotifyNewInterceptInfo::default_instance_ = NULL;

stOnlineNotifyNewInterceptInfo* stOnlineNotifyNewInterceptInfo::New() const {
  return new stOnlineNotifyNewInterceptInfo;
}

void stOnlineNotifyNewInterceptInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
    guardnum_ = 0u;
    intercertnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOnlineNotifyNewInterceptInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guardNum;
        break;
      }

      // optional uint32 guardNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guardnum_)));
          set_has_guardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_intercertNum;
        break;
      }

      // optional uint32 intercertNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intercertNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &intercertnum_)));
          set_has_intercertnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOnlineNotifyNewInterceptInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional uint32 guardNum = 2;
  if (has_guardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guardnum(), output);
  }

  // optional uint32 intercertNum = 3;
  if (has_intercertnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->intercertnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOnlineNotifyNewInterceptInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional uint32 guardNum = 2;
  if (has_guardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guardnum(), target);
  }

  // optional uint32 intercertNum = 3;
  if (has_intercertnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->intercertnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOnlineNotifyNewInterceptInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 guardNum = 2;
    if (has_guardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guardnum());
    }

    // optional uint32 intercertNum = 3;
    if (has_intercertnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->intercertnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOnlineNotifyNewInterceptInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOnlineNotifyNewInterceptInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOnlineNotifyNewInterceptInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOnlineNotifyNewInterceptInfo::MergeFrom(const stOnlineNotifyNewInterceptInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_guardnum()) {
      set_guardnum(from.guardnum());
    }
    if (from.has_intercertnum()) {
      set_intercertnum(from.intercertnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOnlineNotifyNewInterceptInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOnlineNotifyNewInterceptInfo::CopyFrom(const stOnlineNotifyNewInterceptInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOnlineNotifyNewInterceptInfo::IsInitialized() const {

  return true;
}

void stOnlineNotifyNewInterceptInfo::Swap(stOnlineNotifyNewInterceptInfo* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(guardnum_, other->guardnum_);
    std::swap(intercertnum_, other->intercertnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOnlineNotifyNewInterceptInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOnlineNotifyNewInterceptInfo_descriptor_;
  metadata.reflection = stOnlineNotifyNewInterceptInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenLimitFashionDrawWin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenLimitFashionDrawWin_ProtoModID_descriptor_;
}
bool stReqOpenLimitFashionDrawWin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenLimitFashionDrawWin_ProtoModID stReqOpenLimitFashionDrawWin::ModID;
const stReqOpenLimitFashionDrawWin_ProtoModID stReqOpenLimitFashionDrawWin::ProtoModID_MIN;
const stReqOpenLimitFashionDrawWin_ProtoModID stReqOpenLimitFashionDrawWin::ProtoModID_MAX;
const int stReqOpenLimitFashionDrawWin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenLimitFashionDrawWin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenLimitFashionDrawWin_ProtoFunID_descriptor_;
}
bool stReqOpenLimitFashionDrawWin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 145:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenLimitFashionDrawWin_ProtoFunID stReqOpenLimitFashionDrawWin::FunID;
const stReqOpenLimitFashionDrawWin_ProtoFunID stReqOpenLimitFashionDrawWin::ProtoFunID_MIN;
const stReqOpenLimitFashionDrawWin_ProtoFunID stReqOpenLimitFashionDrawWin::ProtoFunID_MAX;
const int stReqOpenLimitFashionDrawWin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenLimitFashionDrawWin::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenLimitFashionDrawWin::stReqOpenLimitFashionDrawWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenLimitFashionDrawWin::InitAsDefaultInstance() {
}

stReqOpenLimitFashionDrawWin::stReqOpenLimitFashionDrawWin(const stReqOpenLimitFashionDrawWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenLimitFashionDrawWin::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenLimitFashionDrawWin::~stReqOpenLimitFashionDrawWin() {
  SharedDtor();
}

void stReqOpenLimitFashionDrawWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenLimitFashionDrawWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenLimitFashionDrawWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenLimitFashionDrawWin_descriptor_;
}

const stReqOpenLimitFashionDrawWin& stReqOpenLimitFashionDrawWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqOpenLimitFashionDrawWin* stReqOpenLimitFashionDrawWin::default_instance_ = NULL;

stReqOpenLimitFashionDrawWin* stReqOpenLimitFashionDrawWin::New() const {
  return new stReqOpenLimitFashionDrawWin;
}

void stReqOpenLimitFashionDrawWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenLimitFashionDrawWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenLimitFashionDrawWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenLimitFashionDrawWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenLimitFashionDrawWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenLimitFashionDrawWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenLimitFashionDrawWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenLimitFashionDrawWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenLimitFashionDrawWin::MergeFrom(const stReqOpenLimitFashionDrawWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenLimitFashionDrawWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenLimitFashionDrawWin::CopyFrom(const stReqOpenLimitFashionDrawWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenLimitFashionDrawWin::IsInitialized() const {

  return true;
}

void stReqOpenLimitFashionDrawWin::Swap(stReqOpenLimitFashionDrawWin* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenLimitFashionDrawWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenLimitFashionDrawWin_descriptor_;
  metadata.reflection = stReqOpenLimitFashionDrawWin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetLimitFashionDrawWinInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLimitFashionDrawWinInfo_ProtoModID_descriptor_;
}
bool stRetLimitFashionDrawWinInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLimitFashionDrawWinInfo_ProtoModID stRetLimitFashionDrawWinInfo::ModID;
const stRetLimitFashionDrawWinInfo_ProtoModID stRetLimitFashionDrawWinInfo::ProtoModID_MIN;
const stRetLimitFashionDrawWinInfo_ProtoModID stRetLimitFashionDrawWinInfo::ProtoModID_MAX;
const int stRetLimitFashionDrawWinInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLimitFashionDrawWinInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLimitFashionDrawWinInfo_ProtoFunID_descriptor_;
}
bool stRetLimitFashionDrawWinInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 146:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLimitFashionDrawWinInfo_ProtoFunID stRetLimitFashionDrawWinInfo::FunID;
const stRetLimitFashionDrawWinInfo_ProtoFunID stRetLimitFashionDrawWinInfo::ProtoFunID_MIN;
const stRetLimitFashionDrawWinInfo_ProtoFunID stRetLimitFashionDrawWinInfo::ProtoFunID_MAX;
const int stRetLimitFashionDrawWinInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetLimitFashionDrawWinInfo::kCanDrawNumFieldNumber;
const int stRetLimitFashionDrawWinInfo::kHasDrawedIDFieldNumber;
#endif  // !_MSC_VER

stRetLimitFashionDrawWinInfo::stRetLimitFashionDrawWinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetLimitFashionDrawWinInfo::InitAsDefaultInstance() {
}

stRetLimitFashionDrawWinInfo::stRetLimitFashionDrawWinInfo(const stRetLimitFashionDrawWinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetLimitFashionDrawWinInfo::SharedCtor() {
  _cached_size_ = 0;
  candrawnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetLimitFashionDrawWinInfo::~stRetLimitFashionDrawWinInfo() {
  SharedDtor();
}

void stRetLimitFashionDrawWinInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetLimitFashionDrawWinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetLimitFashionDrawWinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLimitFashionDrawWinInfo_descriptor_;
}

const stRetLimitFashionDrawWinInfo& stRetLimitFashionDrawWinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetLimitFashionDrawWinInfo* stRetLimitFashionDrawWinInfo::default_instance_ = NULL;

stRetLimitFashionDrawWinInfo* stRetLimitFashionDrawWinInfo::New() const {
  return new stRetLimitFashionDrawWinInfo;
}

void stRetLimitFashionDrawWinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    candrawnum_ = 0u;
  }
  hasdrawedid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetLimitFashionDrawWinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 canDrawNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &candrawnum_)));
          set_has_candrawnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasDrawedID;
        break;
      }

      // repeated uint32 hasDrawedID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasDrawedID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_hasdrawedid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hasdrawedid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasDrawedID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetLimitFashionDrawWinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 canDrawNum = 1;
  if (has_candrawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->candrawnum(), output);
  }

  // repeated uint32 hasDrawedID = 2;
  for (int i = 0; i < this->hasdrawedid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->hasdrawedid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetLimitFashionDrawWinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 canDrawNum = 1;
  if (has_candrawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->candrawnum(), target);
  }

  // repeated uint32 hasDrawedID = 2;
  for (int i = 0; i < this->hasdrawedid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->hasdrawedid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetLimitFashionDrawWinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 canDrawNum = 1;
    if (has_candrawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->candrawnum());
    }

  }
  // repeated uint32 hasDrawedID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->hasdrawedid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hasdrawedid(i));
    }
    total_size += 1 * this->hasdrawedid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetLimitFashionDrawWinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetLimitFashionDrawWinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetLimitFashionDrawWinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetLimitFashionDrawWinInfo::MergeFrom(const stRetLimitFashionDrawWinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  hasdrawedid_.MergeFrom(from.hasdrawedid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_candrawnum()) {
      set_candrawnum(from.candrawnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetLimitFashionDrawWinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetLimitFashionDrawWinInfo::CopyFrom(const stRetLimitFashionDrawWinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetLimitFashionDrawWinInfo::IsInitialized() const {

  return true;
}

void stRetLimitFashionDrawWinInfo::Swap(stRetLimitFashionDrawWinInfo* other) {
  if (other != this) {
    std::swap(candrawnum_, other->candrawnum_);
    hasdrawedid_.Swap(&other->hasdrawedid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetLimitFashionDrawWinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetLimitFashionDrawWinInfo_descriptor_;
  metadata.reflection = stRetLimitFashionDrawWinInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawLimitFashion_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawLimitFashion_ProtoModID_descriptor_;
}
bool stReqDrawLimitFashion_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawLimitFashion_ProtoModID stReqDrawLimitFashion::ModID;
const stReqDrawLimitFashion_ProtoModID stReqDrawLimitFashion::ProtoModID_MIN;
const stReqDrawLimitFashion_ProtoModID stReqDrawLimitFashion::ProtoModID_MAX;
const int stReqDrawLimitFashion::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawLimitFashion_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawLimitFashion_ProtoFunID_descriptor_;
}
bool stReqDrawLimitFashion_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 147:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawLimitFashion_ProtoFunID stReqDrawLimitFashion::FunID;
const stReqDrawLimitFashion_ProtoFunID stReqDrawLimitFashion::ProtoFunID_MIN;
const stReqDrawLimitFashion_ProtoFunID stReqDrawLimitFashion::ProtoFunID_MAX;
const int stReqDrawLimitFashion::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawLimitFashion::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqDrawLimitFashion::stReqDrawLimitFashion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawLimitFashion::InitAsDefaultInstance() {
}

stReqDrawLimitFashion::stReqDrawLimitFashion(const stReqDrawLimitFashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawLimitFashion::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawLimitFashion::~stReqDrawLimitFashion() {
  SharedDtor();
}

void stReqDrawLimitFashion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawLimitFashion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawLimitFashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawLimitFashion_descriptor_;
}

const stReqDrawLimitFashion& stReqDrawLimitFashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDrawLimitFashion* stReqDrawLimitFashion::default_instance_ = NULL;

stReqDrawLimitFashion* stReqDrawLimitFashion::New() const {
  return new stReqDrawLimitFashion;
}

void stReqDrawLimitFashion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawLimitFashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawLimitFashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawLimitFashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawLimitFashion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawLimitFashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawLimitFashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawLimitFashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawLimitFashion::MergeFrom(const stReqDrawLimitFashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawLimitFashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawLimitFashion::CopyFrom(const stReqDrawLimitFashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawLimitFashion::IsInitialized() const {

  return true;
}

void stReqDrawLimitFashion::Swap(stReqDrawLimitFashion* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawLimitFashion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawLimitFashion_descriptor_;
  metadata.reflection = stReqDrawLimitFashion_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDrawLimitFashionResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawLimitFashionResult_eResult_descriptor_;
}
bool stDrawLimitFashionResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawLimitFashionResult_eResult stDrawLimitFashionResult::eSuccess;
const stDrawLimitFashionResult_eResult stDrawLimitFashionResult::eBag_Full;
const stDrawLimitFashionResult_eResult stDrawLimitFashionResult::eHas_Not_Draw_Num;
const stDrawLimitFashionResult_eResult stDrawLimitFashionResult::eActivity_Not_Open;
const stDrawLimitFashionResult_eResult stDrawLimitFashionResult::eDraw_Out;
const stDrawLimitFashionResult_eResult stDrawLimitFashionResult::eResult_MIN;
const stDrawLimitFashionResult_eResult stDrawLimitFashionResult::eResult_MAX;
const int stDrawLimitFashionResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawLimitFashionResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawLimitFashionResult_ProtoModID_descriptor_;
}
bool stDrawLimitFashionResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawLimitFashionResult_ProtoModID stDrawLimitFashionResult::ModID;
const stDrawLimitFashionResult_ProtoModID stDrawLimitFashionResult::ProtoModID_MIN;
const stDrawLimitFashionResult_ProtoModID stDrawLimitFashionResult::ProtoModID_MAX;
const int stDrawLimitFashionResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawLimitFashionResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawLimitFashionResult_ProtoFunID_descriptor_;
}
bool stDrawLimitFashionResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 148:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawLimitFashionResult_ProtoFunID stDrawLimitFashionResult::FunID;
const stDrawLimitFashionResult_ProtoFunID stDrawLimitFashionResult::ProtoFunID_MIN;
const stDrawLimitFashionResult_ProtoFunID stDrawLimitFashionResult::ProtoFunID_MAX;
const int stDrawLimitFashionResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDrawLimitFashionResult::kResultFieldNumber;
const int stDrawLimitFashionResult::kIdFieldNumber;
#endif  // !_MSC_VER

stDrawLimitFashionResult::stDrawLimitFashionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDrawLimitFashionResult::InitAsDefaultInstance() {
}

stDrawLimitFashionResult::stDrawLimitFashionResult(const stDrawLimitFashionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDrawLimitFashionResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDrawLimitFashionResult::~stDrawLimitFashionResult() {
  SharedDtor();
}

void stDrawLimitFashionResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDrawLimitFashionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDrawLimitFashionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawLimitFashionResult_descriptor_;
}

const stDrawLimitFashionResult& stDrawLimitFashionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stDrawLimitFashionResult* stDrawLimitFashionResult::default_instance_ = NULL;

stDrawLimitFashionResult* stDrawLimitFashionResult::New() const {
  return new stDrawLimitFashionResult;
}

void stDrawLimitFashionResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDrawLimitFashionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stDrawLimitFashionResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stDrawLimitFashionResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stDrawLimitFashionResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDrawLimitFashionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stDrawLimitFashionResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDrawLimitFashionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stDrawLimitFashionResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDrawLimitFashionResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stDrawLimitFashionResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDrawLimitFashionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDrawLimitFashionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDrawLimitFashionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDrawLimitFashionResult::MergeFrom(const stDrawLimitFashionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDrawLimitFashionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDrawLimitFashionResult::CopyFrom(const stDrawLimitFashionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDrawLimitFashionResult::IsInitialized() const {

  return true;
}

void stDrawLimitFashionResult::Swap(stDrawLimitFashionResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDrawLimitFashionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDrawLimitFashionResult_descriptor_;
  metadata.reflection = stDrawLimitFashionResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stExchangeItem::kItemIDFieldNumber;
const int stExchangeItem::kNumFieldNumber;
#endif  // !_MSC_VER

stExchangeItem::stExchangeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExchangeItem::InitAsDefaultInstance() {
}

stExchangeItem::stExchangeItem(const stExchangeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExchangeItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExchangeItem::~stExchangeItem() {
  SharedDtor();
}

void stExchangeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExchangeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExchangeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExchangeItem_descriptor_;
}

const stExchangeItem& stExchangeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stExchangeItem* stExchangeItem::default_instance_ = NULL;

stExchangeItem* stExchangeItem::New() const {
  return new stExchangeItem;
}

void stExchangeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExchangeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExchangeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExchangeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExchangeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExchangeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExchangeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExchangeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExchangeItem::MergeFrom(const stExchangeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExchangeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExchangeItem::CopyFrom(const stExchangeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExchangeItem::IsInitialized() const {

  return true;
}

void stExchangeItem::Swap(stExchangeItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExchangeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExchangeItem_descriptor_;
  metadata.reflection = stExchangeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynExchangeActivityiStep::kNeedItemsFieldNumber;
const int stSynExchangeActivityiStep::kGotItemsFieldNumber;
const int stSynExchangeActivityiStep::kHasExchgNumFieldNumber;
const int stSynExchangeActivityiStep::kMaxExchgNumFieldNumber;
const int stSynExchangeActivityiStep::kStepIDFieldNumber;
const int stSynExchangeActivityiStep::kDescFieldNumber;
#endif  // !_MSC_VER

stSynExchangeActivityiStep::stSynExchangeActivityiStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynExchangeActivityiStep::InitAsDefaultInstance() {
}

stSynExchangeActivityiStep::stSynExchangeActivityiStep(const stSynExchangeActivityiStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynExchangeActivityiStep::SharedCtor() {
  _cached_size_ = 0;
  hasexchgnum_ = 0u;
  maxexchgnum_ = 0u;
  stepid_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynExchangeActivityiStep::~stSynExchangeActivityiStep() {
  SharedDtor();
}

void stSynExchangeActivityiStep::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void stSynExchangeActivityiStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynExchangeActivityiStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynExchangeActivityiStep_descriptor_;
}

const stSynExchangeActivityiStep& stSynExchangeActivityiStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynExchangeActivityiStep* stSynExchangeActivityiStep::default_instance_ = NULL;

stSynExchangeActivityiStep* stSynExchangeActivityiStep::New() const {
  return new stSynExchangeActivityiStep;
}

void stSynExchangeActivityiStep::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    hasexchgnum_ = 0u;
    maxexchgnum_ = 0u;
    stepid_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  needitems_.Clear();
  gotitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynExchangeActivityiStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stExchangeItem needItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_needItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_needitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_needItems;
        if (input->ExpectTag(18)) goto parse_gotItems;
        break;
      }

      // repeated .MiscProto.stExchangeItem gotItems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gotItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gotitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gotItems;
        if (input->ExpectTag(24)) goto parse_hasExchgNum;
        break;
      }

      // optional uint32 hasExchgNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasExchgNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasexchgnum_)));
          set_has_hasexchgnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxExchgNum;
        break;
      }

      // optional uint32 maxExchgNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxExchgNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxexchgnum_)));
          set_has_maxexchgnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_desc;
        break;
      }

      // optional string desc = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynExchangeActivityiStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stExchangeItem needItems = 1;
  for (int i = 0; i < this->needitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->needitems(i), output);
  }

  // repeated .MiscProto.stExchangeItem gotItems = 2;
  for (int i = 0; i < this->gotitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gotitems(i), output);
  }

  // optional uint32 hasExchgNum = 3;
  if (has_hasexchgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hasexchgnum(), output);
  }

  // optional uint32 maxExchgNum = 4;
  if (has_maxexchgnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxexchgnum(), output);
  }

  // optional uint32 stepID = 5;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->stepid(), output);
  }

  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynExchangeActivityiStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stExchangeItem needItems = 1;
  for (int i = 0; i < this->needitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->needitems(i), target);
  }

  // repeated .MiscProto.stExchangeItem gotItems = 2;
  for (int i = 0; i < this->gotitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gotitems(i), target);
  }

  // optional uint32 hasExchgNum = 3;
  if (has_hasexchgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hasexchgnum(), target);
  }

  // optional uint32 maxExchgNum = 4;
  if (has_maxexchgnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxexchgnum(), target);
  }

  // optional uint32 stepID = 5;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->stepid(), target);
  }

  // optional string desc = 6;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynExchangeActivityiStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 hasExchgNum = 3;
    if (has_hasexchgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasexchgnum());
    }

    // optional uint32 maxExchgNum = 4;
    if (has_maxexchgnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxexchgnum());
    }

    // optional uint32 stepID = 5;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional string desc = 6;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  // repeated .MiscProto.stExchangeItem needItems = 1;
  total_size += 1 * this->needitems_size();
  for (int i = 0; i < this->needitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->needitems(i));
  }

  // repeated .MiscProto.stExchangeItem gotItems = 2;
  total_size += 1 * this->gotitems_size();
  for (int i = 0; i < this->gotitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gotitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynExchangeActivityiStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynExchangeActivityiStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynExchangeActivityiStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynExchangeActivityiStep::MergeFrom(const stSynExchangeActivityiStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  needitems_.MergeFrom(from.needitems_);
  gotitems_.MergeFrom(from.gotitems_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_hasexchgnum()) {
      set_hasexchgnum(from.hasexchgnum());
    }
    if (from.has_maxexchgnum()) {
      set_maxexchgnum(from.maxexchgnum());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynExchangeActivityiStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynExchangeActivityiStep::CopyFrom(const stSynExchangeActivityiStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynExchangeActivityiStep::IsInitialized() const {

  return true;
}

void stSynExchangeActivityiStep::Swap(stSynExchangeActivityiStep* other) {
  if (other != this) {
    needitems_.Swap(&other->needitems_);
    gotitems_.Swap(&other->gotitems_);
    std::swap(hasexchgnum_, other->hasexchgnum_);
    std::swap(maxexchgnum_, other->maxexchgnum_);
    std::swap(stepid_, other->stepid_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynExchangeActivityiStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynExchangeActivityiStep_descriptor_;
  metadata.reflection = stSynExchangeActivityiStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynExchangeActivity::kStepFieldNumber;
const int stSynExchangeActivity::kActivityIDFieldNumber;
const int stSynExchangeActivity::kTitileFieldNumber;
const int stSynExchangeActivity::kDescFieldNumber;
const int stSynExchangeActivity::kDailyRefreshFieldNumber;
#endif  // !_MSC_VER

stSynExchangeActivity::stSynExchangeActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynExchangeActivity::InitAsDefaultInstance() {
}

stSynExchangeActivity::stSynExchangeActivity(const stSynExchangeActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynExchangeActivity::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  titile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dailyrefresh_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynExchangeActivity::~stSynExchangeActivity() {
  SharedDtor();
}

void stSynExchangeActivity::SharedDtor() {
  if (titile_ != &::google::protobuf::internal::kEmptyString) {
    delete titile_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void stSynExchangeActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynExchangeActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynExchangeActivity_descriptor_;
}

const stSynExchangeActivity& stSynExchangeActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynExchangeActivity* stSynExchangeActivity::default_instance_ = NULL;

stSynExchangeActivity* stSynExchangeActivity::New() const {
  return new stSynExchangeActivity;
}

void stSynExchangeActivity::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    activityid_ = 0u;
    if (has_titile()) {
      if (titile_ != &::google::protobuf::internal::kEmptyString) {
        titile_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    dailyrefresh_ = false;
  }
  step_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynExchangeActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stSynExchangeActivityiStep step = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_step()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_step;
        if (input->ExpectTag(16)) goto parse_activityID;
        break;
      }

      // optional uint32 activityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_titile;
        break;
      }

      // optional string titile = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titile().data(), this->titile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_desc;
        break;
      }

      // optional string desc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dailyRefresh;
        break;
      }

      // optional bool dailyRefresh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyRefresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dailyrefresh_)));
          set_has_dailyrefresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynExchangeActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stSynExchangeActivityiStep step = 1;
  for (int i = 0; i < this->step_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->step(i), output);
  }

  // optional uint32 activityID = 2;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activityid(), output);
  }

  // optional string titile = 3;
  if (has_titile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titile().data(), this->titile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->titile(), output);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->desc(), output);
  }

  // optional bool dailyRefresh = 5;
  if (has_dailyrefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->dailyrefresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynExchangeActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stSynExchangeActivityiStep step = 1;
  for (int i = 0; i < this->step_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->step(i), target);
  }

  // optional uint32 activityID = 2;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activityid(), target);
  }

  // optional string titile = 3;
  if (has_titile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titile().data(), this->titile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->titile(), target);
  }

  // optional string desc = 4;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc(), target);
  }

  // optional bool dailyRefresh = 5;
  if (has_dailyrefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->dailyrefresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynExchangeActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 activityID = 2;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional string titile = 3;
    if (has_titile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titile());
    }

    // optional string desc = 4;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional bool dailyRefresh = 5;
    if (has_dailyrefresh()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MiscProto.stSynExchangeActivityiStep step = 1;
  total_size += 1 * this->step_size();
  for (int i = 0; i < this->step_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->step(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynExchangeActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynExchangeActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynExchangeActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynExchangeActivity::MergeFrom(const stSynExchangeActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  step_.MergeFrom(from.step_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_titile()) {
      set_titile(from.titile());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_dailyrefresh()) {
      set_dailyrefresh(from.dailyrefresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynExchangeActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynExchangeActivity::CopyFrom(const stSynExchangeActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynExchangeActivity::IsInitialized() const {

  return true;
}

void stSynExchangeActivity::Swap(stSynExchangeActivity* other) {
  if (other != this) {
    step_.Swap(&other->step_);
    std::swap(activityid_, other->activityid_);
    std::swap(titile_, other->titile_);
    std::swap(desc_, other->desc_);
    std::swap(dailyrefresh_, other->dailyrefresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynExchangeActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynExchangeActivity_descriptor_;
  metadata.reflection = stSynExchangeActivity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetExchangeActivity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExchangeActivity_ProtoModID_descriptor_;
}
bool stRetExchangeActivity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExchangeActivity_ProtoModID stRetExchangeActivity::ModID;
const stRetExchangeActivity_ProtoModID stRetExchangeActivity::ProtoModID_MIN;
const stRetExchangeActivity_ProtoModID stRetExchangeActivity::ProtoModID_MAX;
const int stRetExchangeActivity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetExchangeActivity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExchangeActivity_ProtoFunID_descriptor_;
}
bool stRetExchangeActivity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 149:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetExchangeActivity_ProtoFunID stRetExchangeActivity::FunID;
const stRetExchangeActivity_ProtoFunID stRetExchangeActivity::ProtoFunID_MIN;
const stRetExchangeActivity_ProtoFunID stRetExchangeActivity::ProtoFunID_MAX;
const int stRetExchangeActivity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetExchangeActivity::kActivityFieldNumber;
#endif  // !_MSC_VER

stRetExchangeActivity::stRetExchangeActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetExchangeActivity::InitAsDefaultInstance() {
}

stRetExchangeActivity::stRetExchangeActivity(const stRetExchangeActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetExchangeActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetExchangeActivity::~stRetExchangeActivity() {
  SharedDtor();
}

void stRetExchangeActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetExchangeActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetExchangeActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetExchangeActivity_descriptor_;
}

const stRetExchangeActivity& stRetExchangeActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetExchangeActivity* stRetExchangeActivity::default_instance_ = NULL;

stRetExchangeActivity* stRetExchangeActivity::New() const {
  return new stRetExchangeActivity;
}

void stRetExchangeActivity::Clear() {
  activity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetExchangeActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stSynExchangeActivity activity = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activity;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetExchangeActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stSynExchangeActivity activity = 1;
  for (int i = 0; i < this->activity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activity(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetExchangeActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stSynExchangeActivity activity = 1;
  for (int i = 0; i < this->activity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activity(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetExchangeActivity::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stSynExchangeActivity activity = 1;
  total_size += 1 * this->activity_size();
  for (int i = 0; i < this->activity_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activity(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetExchangeActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetExchangeActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetExchangeActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetExchangeActivity::MergeFrom(const stRetExchangeActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  activity_.MergeFrom(from.activity_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetExchangeActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetExchangeActivity::CopyFrom(const stRetExchangeActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetExchangeActivity::IsInitialized() const {

  return true;
}

void stRetExchangeActivity::Swap(stRetExchangeActivity* other) {
  if (other != this) {
    activity_.Swap(&other->activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetExchangeActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetExchangeActivity_descriptor_;
  metadata.reflection = stRetExchangeActivity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqExchangeItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExchangeItem_ProtoModID_descriptor_;
}
bool stReqExchangeItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExchangeItem_ProtoModID stReqExchangeItem::ModID;
const stReqExchangeItem_ProtoModID stReqExchangeItem::ProtoModID_MIN;
const stReqExchangeItem_ProtoModID stReqExchangeItem::ProtoModID_MAX;
const int stReqExchangeItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqExchangeItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExchangeItem_ProtoFunID_descriptor_;
}
bool stReqExchangeItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 150:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqExchangeItem_ProtoFunID stReqExchangeItem::FunID;
const stReqExchangeItem_ProtoFunID stReqExchangeItem::ProtoFunID_MIN;
const stReqExchangeItem_ProtoFunID stReqExchangeItem::ProtoFunID_MAX;
const int stReqExchangeItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqExchangeItem::kActivityIDFieldNumber;
const int stReqExchangeItem::kStepIDFieldNumber;
#endif  // !_MSC_VER

stReqExchangeItem::stReqExchangeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqExchangeItem::InitAsDefaultInstance() {
}

stReqExchangeItem::stReqExchangeItem(const stReqExchangeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqExchangeItem::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  stepid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqExchangeItem::~stReqExchangeItem() {
  SharedDtor();
}

void stReqExchangeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqExchangeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqExchangeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqExchangeItem_descriptor_;
}

const stReqExchangeItem& stReqExchangeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqExchangeItem* stReqExchangeItem::default_instance_ = NULL;

stReqExchangeItem* stReqExchangeItem::New() const {
  return new stReqExchangeItem;
}

void stReqExchangeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    stepid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqExchangeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqExchangeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stepid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqExchangeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stepid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqExchangeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 stepID = 2;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqExchangeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqExchangeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqExchangeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqExchangeItem::MergeFrom(const stReqExchangeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqExchangeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqExchangeItem::CopyFrom(const stReqExchangeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqExchangeItem::IsInitialized() const {

  return true;
}

void stReqExchangeItem::Swap(stReqExchangeItem* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(stepid_, other->stepid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqExchangeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqExchangeItem_descriptor_;
  metadata.reflection = stReqExchangeItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stExchangeItemResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExchangeItemResult_eResult_descriptor_;
}
bool stExchangeItemResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExchangeItemResult_eResult stExchangeItemResult::eSuccess;
const stExchangeItemResult_eResult stExchangeItemResult::eTime_Use_Out;
const stExchangeItemResult_eResult stExchangeItemResult::eBag_Full;
const stExchangeItemResult_eResult stExchangeItemResult::eActivity_Finish;
const stExchangeItemResult_eResult stExchangeItemResult::eHas_Not_Enough_Item;
const stExchangeItemResult_eResult stExchangeItemResult::eResult_MIN;
const stExchangeItemResult_eResult stExchangeItemResult::eResult_MAX;
const int stExchangeItemResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExchangeItemResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExchangeItemResult_ProtoModID_descriptor_;
}
bool stExchangeItemResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExchangeItemResult_ProtoModID stExchangeItemResult::ModID;
const stExchangeItemResult_ProtoModID stExchangeItemResult::ProtoModID_MIN;
const stExchangeItemResult_ProtoModID stExchangeItemResult::ProtoModID_MAX;
const int stExchangeItemResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExchangeItemResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExchangeItemResult_ProtoFunID_descriptor_;
}
bool stExchangeItemResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 151:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExchangeItemResult_ProtoFunID stExchangeItemResult::FunID;
const stExchangeItemResult_ProtoFunID stExchangeItemResult::ProtoFunID_MIN;
const stExchangeItemResult_ProtoFunID stExchangeItemResult::ProtoFunID_MAX;
const int stExchangeItemResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stExchangeItemResult::kResultFieldNumber;
const int stExchangeItemResult::kActivityIDFieldNumber;
const int stExchangeItemResult::kStepIDFieldNumber;
#endif  // !_MSC_VER

stExchangeItemResult::stExchangeItemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExchangeItemResult::InitAsDefaultInstance() {
}

stExchangeItemResult::stExchangeItemResult(const stExchangeItemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExchangeItemResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  activityid_ = 0u;
  stepid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExchangeItemResult::~stExchangeItemResult() {
  SharedDtor();
}

void stExchangeItemResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExchangeItemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExchangeItemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExchangeItemResult_descriptor_;
}

const stExchangeItemResult& stExchangeItemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stExchangeItemResult* stExchangeItemResult::default_instance_ = NULL;

stExchangeItemResult* stExchangeItemResult::New() const {
  return new stExchangeItemResult;
}

void stExchangeItemResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    activityid_ = 0u;
    stepid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExchangeItemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stExchangeItemResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stExchangeItemResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stExchangeItemResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activityID;
        break;
      }

      // optional uint32 activityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExchangeItemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stExchangeItemResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 activityID = 2;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activityid(), output);
  }

  // optional uint32 stepID = 3;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stepid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExchangeItemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stExchangeItemResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 activityID = 2;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activityid(), target);
  }

  // optional uint32 stepID = 3;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stepid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExchangeItemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stExchangeItemResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 activityID = 2;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 stepID = 3;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExchangeItemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExchangeItemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExchangeItemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExchangeItemResult::MergeFrom(const stExchangeItemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExchangeItemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExchangeItemResult::CopyFrom(const stExchangeItemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExchangeItemResult::IsInitialized() const {

  return true;
}

void stExchangeItemResult::Swap(stExchangeItemResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(activityid_, other->activityid_);
    std::swap(stepid_, other->stepid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExchangeItemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExchangeItemResult_descriptor_;
  metadata.reflection = stExchangeItemResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRecycleRechargeActivity::kActivityIDFieldNumber;
const int stRecycleRechargeActivity::kTitileFieldNumber;
const int stRecycleRechargeActivity::kDescFieldNumber;
const int stRecycleRechargeActivity::kMaxRewardNumFieldNumber;
const int stRecycleRechargeActivity::kGotRewardNumFieldNumber;
const int stRecycleRechargeActivity::kStepValFieldNumber;
const int stRecycleRechargeActivity::kStepFieldNumber;
#endif  // !_MSC_VER

stRecycleRechargeActivity::stRecycleRechargeActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRecycleRechargeActivity::InitAsDefaultInstance() {
  step_ = const_cast< ::MiscProto::stSynActivityStepInfo*>(&::MiscProto::stSynActivityStepInfo::default_instance());
}

stRecycleRechargeActivity::stRecycleRechargeActivity(const stRecycleRechargeActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRecycleRechargeActivity::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  titile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxrewardnum_ = 0u;
  gotrewardnum_ = 0u;
  stepval_ = 0u;
  step_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRecycleRechargeActivity::~stRecycleRechargeActivity() {
  SharedDtor();
}

void stRecycleRechargeActivity::SharedDtor() {
  if (titile_ != &::google::protobuf::internal::kEmptyString) {
    delete titile_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
    delete step_;
  }
}

void stRecycleRechargeActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRecycleRechargeActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRecycleRechargeActivity_descriptor_;
}

const stRecycleRechargeActivity& stRecycleRechargeActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRecycleRechargeActivity* stRecycleRechargeActivity::default_instance_ = NULL;

stRecycleRechargeActivity* stRecycleRechargeActivity::New() const {
  return new stRecycleRechargeActivity;
}

void stRecycleRechargeActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    if (has_titile()) {
      if (titile_ != &::google::protobuf::internal::kEmptyString) {
        titile_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    maxrewardnum_ = 0u;
    gotrewardnum_ = 0u;
    stepval_ = 0u;
    if (has_step()) {
      if (step_ != NULL) step_->::MiscProto::stSynActivityStepInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRecycleRechargeActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_titile;
        break;
      }

      // optional string titile = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_titile()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->titile().data(), this->titile().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxRewardNum;
        break;
      }

      // optional uint32 maxRewardNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxRewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxrewardnum_)));
          set_has_maxrewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gotRewardNum;
        break;
      }

      // optional uint32 gotRewardNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gotRewardNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gotrewardnum_)));
          set_has_gotrewardnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_stepVal;
        break;
      }

      // optional uint32 stepVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepval_)));
          set_has_stepval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_step;
        break;
      }

      // optional .MiscProto.stSynActivityStepInfo step = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_step()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRecycleRechargeActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional string titile = 2;
  if (has_titile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titile().data(), this->titile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->titile(), output);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // optional uint32 maxRewardNum = 4;
  if (has_maxrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxrewardnum(), output);
  }

  // optional uint32 gotRewardNum = 5;
  if (has_gotrewardnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gotrewardnum(), output);
  }

  // optional uint32 stepVal = 6;
  if (has_stepval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->stepval(), output);
  }

  // optional .MiscProto.stSynActivityStepInfo step = 7;
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->step(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRecycleRechargeActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional string titile = 2;
  if (has_titile()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->titile().data(), this->titile().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->titile(), target);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional uint32 maxRewardNum = 4;
  if (has_maxrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxrewardnum(), target);
  }

  // optional uint32 gotRewardNum = 5;
  if (has_gotrewardnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gotrewardnum(), target);
  }

  // optional uint32 stepVal = 6;
  if (has_stepval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->stepval(), target);
  }

  // optional .MiscProto.stSynActivityStepInfo step = 7;
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->step(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRecycleRechargeActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional string titile = 2;
    if (has_titile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->titile());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional uint32 maxRewardNum = 4;
    if (has_maxrewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxrewardnum());
    }

    // optional uint32 gotRewardNum = 5;
    if (has_gotrewardnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gotrewardnum());
    }

    // optional uint32 stepVal = 6;
    if (has_stepval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepval());
    }

    // optional .MiscProto.stSynActivityStepInfo step = 7;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->step());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRecycleRechargeActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRecycleRechargeActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRecycleRechargeActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRecycleRechargeActivity::MergeFrom(const stRecycleRechargeActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_titile()) {
      set_titile(from.titile());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_maxrewardnum()) {
      set_maxrewardnum(from.maxrewardnum());
    }
    if (from.has_gotrewardnum()) {
      set_gotrewardnum(from.gotrewardnum());
    }
    if (from.has_stepval()) {
      set_stepval(from.stepval());
    }
    if (from.has_step()) {
      mutable_step()->::MiscProto::stSynActivityStepInfo::MergeFrom(from.step());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRecycleRechargeActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRecycleRechargeActivity::CopyFrom(const stRecycleRechargeActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRecycleRechargeActivity::IsInitialized() const {

  return true;
}

void stRecycleRechargeActivity::Swap(stRecycleRechargeActivity* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(titile_, other->titile_);
    std::swap(desc_, other->desc_);
    std::swap(maxrewardnum_, other->maxrewardnum_);
    std::swap(gotrewardnum_, other->gotrewardnum_);
    std::swap(stepval_, other->stepval_);
    std::swap(step_, other->step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRecycleRechargeActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRecycleRechargeActivity_descriptor_;
  metadata.reflection = stRecycleRechargeActivity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendRecycleRechargeActivity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendRecycleRechargeActivity_ProtoModID_descriptor_;
}
bool stSendRecycleRechargeActivity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendRecycleRechargeActivity_ProtoModID stSendRecycleRechargeActivity::ModID;
const stSendRecycleRechargeActivity_ProtoModID stSendRecycleRechargeActivity::ProtoModID_MIN;
const stSendRecycleRechargeActivity_ProtoModID stSendRecycleRechargeActivity::ProtoModID_MAX;
const int stSendRecycleRechargeActivity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendRecycleRechargeActivity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendRecycleRechargeActivity_ProtoFunID_descriptor_;
}
bool stSendRecycleRechargeActivity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 152:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendRecycleRechargeActivity_ProtoFunID stSendRecycleRechargeActivity::FunID;
const stSendRecycleRechargeActivity_ProtoFunID stSendRecycleRechargeActivity::ProtoFunID_MIN;
const stSendRecycleRechargeActivity_ProtoFunID stSendRecycleRechargeActivity::ProtoFunID_MAX;
const int stSendRecycleRechargeActivity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendRecycleRechargeActivity::kActivtiesFieldNumber;
#endif  // !_MSC_VER

stSendRecycleRechargeActivity::stSendRecycleRechargeActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendRecycleRechargeActivity::InitAsDefaultInstance() {
}

stSendRecycleRechargeActivity::stSendRecycleRechargeActivity(const stSendRecycleRechargeActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendRecycleRechargeActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendRecycleRechargeActivity::~stSendRecycleRechargeActivity() {
  SharedDtor();
}

void stSendRecycleRechargeActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendRecycleRechargeActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendRecycleRechargeActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendRecycleRechargeActivity_descriptor_;
}

const stSendRecycleRechargeActivity& stSendRecycleRechargeActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSendRecycleRechargeActivity* stSendRecycleRechargeActivity::default_instance_ = NULL;

stSendRecycleRechargeActivity* stSendRecycleRechargeActivity::New() const {
  return new stSendRecycleRechargeActivity;
}

void stSendRecycleRechargeActivity::Clear() {
  activties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendRecycleRechargeActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stRecycleRechargeActivity activties = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activties()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_activties;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendRecycleRechargeActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stRecycleRechargeActivity activties = 1;
  for (int i = 0; i < this->activties_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->activties(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendRecycleRechargeActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stRecycleRechargeActivity activties = 1;
  for (int i = 0; i < this->activties_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->activties(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendRecycleRechargeActivity::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stRecycleRechargeActivity activties = 1;
  total_size += 1 * this->activties_size();
  for (int i = 0; i < this->activties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activties(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendRecycleRechargeActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendRecycleRechargeActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendRecycleRechargeActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendRecycleRechargeActivity::MergeFrom(const stSendRecycleRechargeActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  activties_.MergeFrom(from.activties_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendRecycleRechargeActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendRecycleRechargeActivity::CopyFrom(const stSendRecycleRechargeActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendRecycleRechargeActivity::IsInitialized() const {

  return true;
}

void stSendRecycleRechargeActivity::Swap(stSendRecycleRechargeActivity* other) {
  if (other != this) {
    activties_.Swap(&other->activties_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendRecycleRechargeActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendRecycleRechargeActivity_descriptor_;
  metadata.reflection = stSendRecycleRechargeActivity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRecycleRechargeActReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecycleRechargeActReward_ProtoModID_descriptor_;
}
bool stReqRecycleRechargeActReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecycleRechargeActReward_ProtoModID stReqRecycleRechargeActReward::ModID;
const stReqRecycleRechargeActReward_ProtoModID stReqRecycleRechargeActReward::ProtoModID_MIN;
const stReqRecycleRechargeActReward_ProtoModID stReqRecycleRechargeActReward::ProtoModID_MAX;
const int stReqRecycleRechargeActReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRecycleRechargeActReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecycleRechargeActReward_ProtoFunID_descriptor_;
}
bool stReqRecycleRechargeActReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 153:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecycleRechargeActReward_ProtoFunID stReqRecycleRechargeActReward::FunID;
const stReqRecycleRechargeActReward_ProtoFunID stReqRecycleRechargeActReward::ProtoFunID_MIN;
const stReqRecycleRechargeActReward_ProtoFunID stReqRecycleRechargeActReward::ProtoFunID_MAX;
const int stReqRecycleRechargeActReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRecycleRechargeActReward::kActivityIDFieldNumber;
const int stReqRecycleRechargeActReward::kStepIDFieldNumber;
#endif  // !_MSC_VER

stReqRecycleRechargeActReward::stReqRecycleRechargeActReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRecycleRechargeActReward::InitAsDefaultInstance() {
}

stReqRecycleRechargeActReward::stReqRecycleRechargeActReward(const stReqRecycleRechargeActReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRecycleRechargeActReward::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  stepid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRecycleRechargeActReward::~stReqRecycleRechargeActReward() {
  SharedDtor();
}

void stReqRecycleRechargeActReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRecycleRechargeActReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRecycleRechargeActReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecycleRechargeActReward_descriptor_;
}

const stReqRecycleRechargeActReward& stReqRecycleRechargeActReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqRecycleRechargeActReward* stReqRecycleRechargeActReward::default_instance_ = NULL;

stReqRecycleRechargeActReward* stReqRecycleRechargeActReward::New() const {
  return new stReqRecycleRechargeActReward;
}

void stReqRecycleRechargeActReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    stepid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRecycleRechargeActReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRecycleRechargeActReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->stepid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRecycleRechargeActReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional uint32 stepID = 2;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->stepid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRecycleRechargeActReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 stepID = 2;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRecycleRechargeActReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRecycleRechargeActReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRecycleRechargeActReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRecycleRechargeActReward::MergeFrom(const stReqRecycleRechargeActReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRecycleRechargeActReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRecycleRechargeActReward::CopyFrom(const stReqRecycleRechargeActReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRecycleRechargeActReward::IsInitialized() const {

  return true;
}

void stReqRecycleRechargeActReward::Swap(stReqRecycleRechargeActReward* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(stepid_, other->stepid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRecycleRechargeActReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRecycleRechargeActReward_descriptor_;
  metadata.reflection = stReqRecycleRechargeActReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRecycleRechargeActReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecycleRechargeActReward_eResult_descriptor_;
}
bool stRetRecycleRechargeActReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward::eSuccess;
const stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward::eBag_Full;
const stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward::eTime_Use_Out;
const stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward::eNot_Begin;
const stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward::eSelect_Not_Exist;
const stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward::eRecharge_Not_Enough;
const stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward::eResult_MIN;
const stRetRecycleRechargeActReward_eResult stRetRecycleRechargeActReward::eResult_MAX;
const int stRetRecycleRechargeActReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRecycleRechargeActReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecycleRechargeActReward_ProtoModID_descriptor_;
}
bool stRetRecycleRechargeActReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRecycleRechargeActReward_ProtoModID stRetRecycleRechargeActReward::ModID;
const stRetRecycleRechargeActReward_ProtoModID stRetRecycleRechargeActReward::ProtoModID_MIN;
const stRetRecycleRechargeActReward_ProtoModID stRetRecycleRechargeActReward::ProtoModID_MAX;
const int stRetRecycleRechargeActReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRecycleRechargeActReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecycleRechargeActReward_ProtoFunID_descriptor_;
}
bool stRetRecycleRechargeActReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 154:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRecycleRechargeActReward_ProtoFunID stRetRecycleRechargeActReward::FunID;
const stRetRecycleRechargeActReward_ProtoFunID stRetRecycleRechargeActReward::ProtoFunID_MIN;
const stRetRecycleRechargeActReward_ProtoFunID stRetRecycleRechargeActReward::ProtoFunID_MAX;
const int stRetRecycleRechargeActReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRecycleRechargeActReward::kResultFieldNumber;
const int stRetRecycleRechargeActReward::kActivityIDFieldNumber;
#endif  // !_MSC_VER

stRetRecycleRechargeActReward::stRetRecycleRechargeActReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRecycleRechargeActReward::InitAsDefaultInstance() {
}

stRetRecycleRechargeActReward::stRetRecycleRechargeActReward(const stRetRecycleRechargeActReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRecycleRechargeActReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  activityid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRecycleRechargeActReward::~stRetRecycleRechargeActReward() {
  SharedDtor();
}

void stRetRecycleRechargeActReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRecycleRechargeActReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRecycleRechargeActReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRecycleRechargeActReward_descriptor_;
}

const stRetRecycleRechargeActReward& stRetRecycleRechargeActReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetRecycleRechargeActReward* stRetRecycleRechargeActReward::default_instance_ = NULL;

stRetRecycleRechargeActReward* stRetRecycleRechargeActReward::New() const {
  return new stRetRecycleRechargeActReward;
}

void stRetRecycleRechargeActReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    activityid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRecycleRechargeActReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRetRecycleRechargeActReward.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetRecycleRechargeActReward_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetRecycleRechargeActReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activityID;
        break;
      }

      // optional uint32 activityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRecycleRechargeActReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRetRecycleRechargeActReward.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 activityID = 2;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activityid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRecycleRechargeActReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRetRecycleRechargeActReward.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 activityID = 2;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activityid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRecycleRechargeActReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRetRecycleRechargeActReward.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 activityID = 2;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRecycleRechargeActReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRecycleRechargeActReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRecycleRechargeActReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRecycleRechargeActReward::MergeFrom(const stRetRecycleRechargeActReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRecycleRechargeActReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRecycleRechargeActReward::CopyFrom(const stRetRecycleRechargeActReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRecycleRechargeActReward::IsInitialized() const {

  return true;
}

void stRetRecycleRechargeActReward::Swap(stRetRecycleRechargeActReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(activityid_, other->activityid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRecycleRechargeActReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRecycleRechargeActReward_descriptor_;
  metadata.reflection = stRetRecycleRechargeActReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCommonActInfoItem::kIdFieldNumber;
const int stCommonActInfoItem::kTypeFieldNumber;
const int stCommonActInfoItem::kValFieldNumber;
#endif  // !_MSC_VER

stCommonActInfoItem::stCommonActInfoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCommonActInfoItem::InitAsDefaultInstance() {
}

stCommonActInfoItem::stCommonActInfoItem(const stCommonActInfoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCommonActInfoItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  val_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCommonActInfoItem::~stCommonActInfoItem() {
  SharedDtor();
}

void stCommonActInfoItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCommonActInfoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCommonActInfoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCommonActInfoItem_descriptor_;
}

const stCommonActInfoItem& stCommonActInfoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stCommonActInfoItem* stCommonActInfoItem::default_instance_ = NULL;

stCommonActInfoItem* stCommonActInfoItem::New() const {
  return new stCommonActInfoItem;
}

void stCommonActInfoItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    val_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCommonActInfoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_val;
        break;
      }

      // optional uint32 val = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCommonActInfoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 val = 3;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCommonActInfoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 val = 3;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCommonActInfoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 val = 3;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCommonActInfoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCommonActInfoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCommonActInfoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCommonActInfoItem::MergeFrom(const stCommonActInfoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCommonActInfoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCommonActInfoItem::CopyFrom(const stCommonActInfoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCommonActInfoItem::IsInitialized() const {

  return true;
}

void stCommonActInfoItem::Swap(stCommonActInfoItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCommonActInfoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCommonActInfoItem_descriptor_;
  metadata.reflection = stCommonActInfoItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshCommonActInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshCommonActInfo_ProtoModID_descriptor_;
}
bool stRefreshCommonActInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshCommonActInfo_ProtoModID stRefreshCommonActInfo::ModID;
const stRefreshCommonActInfo_ProtoModID stRefreshCommonActInfo::ProtoModID_MIN;
const stRefreshCommonActInfo_ProtoModID stRefreshCommonActInfo::ProtoModID_MAX;
const int stRefreshCommonActInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshCommonActInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshCommonActInfo_ProtoFunID_descriptor_;
}
bool stRefreshCommonActInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 155:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshCommonActInfo_ProtoFunID stRefreshCommonActInfo::FunID;
const stRefreshCommonActInfo_ProtoFunID stRefreshCommonActInfo::ProtoFunID_MIN;
const stRefreshCommonActInfo_ProtoFunID stRefreshCommonActInfo::ProtoFunID_MAX;
const int stRefreshCommonActInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshCommonActInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

stRefreshCommonActInfo::stRefreshCommonActInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshCommonActInfo::InitAsDefaultInstance() {
}

stRefreshCommonActInfo::stRefreshCommonActInfo(const stRefreshCommonActInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshCommonActInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshCommonActInfo::~stRefreshCommonActInfo() {
  SharedDtor();
}

void stRefreshCommonActInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefreshCommonActInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshCommonActInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshCommonActInfo_descriptor_;
}

const stRefreshCommonActInfo& stRefreshCommonActInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRefreshCommonActInfo* stRefreshCommonActInfo::default_instance_ = NULL;

stRefreshCommonActInfo* stRefreshCommonActInfo::New() const {
  return new stRefreshCommonActInfo;
}

void stRefreshCommonActInfo::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshCommonActInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stCommonActInfoItem items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshCommonActInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stCommonActInfoItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshCommonActInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stCommonActInfoItem items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshCommonActInfo::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stCommonActInfoItem items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshCommonActInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshCommonActInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshCommonActInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshCommonActInfo::MergeFrom(const stRefreshCommonActInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshCommonActInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshCommonActInfo::CopyFrom(const stRefreshCommonActInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshCommonActInfo::IsInitialized() const {

  return true;
}

void stRefreshCommonActInfo::Swap(stRefreshCommonActInfo* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshCommonActInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshCommonActInfo_descriptor_;
  metadata.reflection = stRefreshCommonActInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAKeyFetchAttach_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAKeyFetchAttach_ProtoModID_descriptor_;
}
bool stReqAKeyFetchAttach_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAKeyFetchAttach_ProtoModID stReqAKeyFetchAttach::ModID;
const stReqAKeyFetchAttach_ProtoModID stReqAKeyFetchAttach::ProtoModID_MIN;
const stReqAKeyFetchAttach_ProtoModID stReqAKeyFetchAttach::ProtoModID_MAX;
const int stReqAKeyFetchAttach::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAKeyFetchAttach_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAKeyFetchAttach_ProtoFunID_descriptor_;
}
bool stReqAKeyFetchAttach_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 156:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAKeyFetchAttach_ProtoFunID stReqAKeyFetchAttach::FunID;
const stReqAKeyFetchAttach_ProtoFunID stReqAKeyFetchAttach::ProtoFunID_MIN;
const stReqAKeyFetchAttach_ProtoFunID stReqAKeyFetchAttach::ProtoFunID_MAX;
const int stReqAKeyFetchAttach::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAKeyFetchAttach::kIdFieldNumber;
#endif  // !_MSC_VER

stReqAKeyFetchAttach::stReqAKeyFetchAttach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAKeyFetchAttach::InitAsDefaultInstance() {
}

stReqAKeyFetchAttach::stReqAKeyFetchAttach(const stReqAKeyFetchAttach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAKeyFetchAttach::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAKeyFetchAttach::~stReqAKeyFetchAttach() {
  SharedDtor();
}

void stReqAKeyFetchAttach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAKeyFetchAttach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAKeyFetchAttach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAKeyFetchAttach_descriptor_;
}

const stReqAKeyFetchAttach& stReqAKeyFetchAttach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqAKeyFetchAttach* stReqAKeyFetchAttach::default_instance_ = NULL;

stReqAKeyFetchAttach* stReqAKeyFetchAttach::New() const {
  return new stReqAKeyFetchAttach;
}

void stReqAKeyFetchAttach::Clear() {
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAKeyFetchAttach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAKeyFetchAttach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAKeyFetchAttach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAKeyFetchAttach::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAKeyFetchAttach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAKeyFetchAttach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAKeyFetchAttach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAKeyFetchAttach::MergeFrom(const stReqAKeyFetchAttach& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAKeyFetchAttach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAKeyFetchAttach::CopyFrom(const stReqAKeyFetchAttach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAKeyFetchAttach::IsInitialized() const {

  return true;
}

void stReqAKeyFetchAttach::Swap(stReqAKeyFetchAttach* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAKeyFetchAttach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAKeyFetchAttach_descriptor_;
  metadata.reflection = stReqAKeyFetchAttach_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAKeyFetchAttachResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyFetchAttachResult_Result_descriptor_;
}
bool stAKeyFetchAttachResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAKeyFetchAttachResult_Result stAKeyFetchAttachResult::SUCCESS;
const stAKeyFetchAttachResult_Result stAKeyFetchAttachResult::ATTACH_NOT_EXIST;
const stAKeyFetchAttachResult_Result stAKeyFetchAttachResult::Result_MIN;
const stAKeyFetchAttachResult_Result stAKeyFetchAttachResult::Result_MAX;
const int stAKeyFetchAttachResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAKeyFetchAttachResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyFetchAttachResult_ProtoModID_descriptor_;
}
bool stAKeyFetchAttachResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAKeyFetchAttachResult_ProtoModID stAKeyFetchAttachResult::ModID;
const stAKeyFetchAttachResult_ProtoModID stAKeyFetchAttachResult::ProtoModID_MIN;
const stAKeyFetchAttachResult_ProtoModID stAKeyFetchAttachResult::ProtoModID_MAX;
const int stAKeyFetchAttachResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAKeyFetchAttachResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyFetchAttachResult_ProtoFunID_descriptor_;
}
bool stAKeyFetchAttachResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 157:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAKeyFetchAttachResult_ProtoFunID stAKeyFetchAttachResult::FunID;
const stAKeyFetchAttachResult_ProtoFunID stAKeyFetchAttachResult::ProtoFunID_MIN;
const stAKeyFetchAttachResult_ProtoFunID stAKeyFetchAttachResult::ProtoFunID_MAX;
const int stAKeyFetchAttachResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAKeyFetchAttachResult::kResultFieldNumber;
#endif  // !_MSC_VER

stAKeyFetchAttachResult::stAKeyFetchAttachResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAKeyFetchAttachResult::InitAsDefaultInstance() {
}

stAKeyFetchAttachResult::stAKeyFetchAttachResult(const stAKeyFetchAttachResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAKeyFetchAttachResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAKeyFetchAttachResult::~stAKeyFetchAttachResult() {
  SharedDtor();
}

void stAKeyFetchAttachResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAKeyFetchAttachResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAKeyFetchAttachResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyFetchAttachResult_descriptor_;
}

const stAKeyFetchAttachResult& stAKeyFetchAttachResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stAKeyFetchAttachResult* stAKeyFetchAttachResult::default_instance_ = NULL;

stAKeyFetchAttachResult* stAKeyFetchAttachResult::New() const {
  return new stAKeyFetchAttachResult;
}

void stAKeyFetchAttachResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAKeyFetchAttachResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stAKeyFetchAttachResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stAKeyFetchAttachResult_Result_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stAKeyFetchAttachResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAKeyFetchAttachResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stAKeyFetchAttachResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAKeyFetchAttachResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stAKeyFetchAttachResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAKeyFetchAttachResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stAKeyFetchAttachResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAKeyFetchAttachResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAKeyFetchAttachResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAKeyFetchAttachResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAKeyFetchAttachResult::MergeFrom(const stAKeyFetchAttachResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAKeyFetchAttachResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAKeyFetchAttachResult::CopyFrom(const stAKeyFetchAttachResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAKeyFetchAttachResult::IsInitialized() const {

  return true;
}

void stAKeyFetchAttachResult::Swap(stAKeyFetchAttachResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAKeyFetchAttachResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAKeyFetchAttachResult_descriptor_;
  metadata.reflection = stAKeyFetchAttachResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGloryfashion_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGloryfashion_ProtoModID_descriptor_;
}
bool stReqGloryfashion_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGloryfashion_ProtoModID stReqGloryfashion::ModID;
const stReqGloryfashion_ProtoModID stReqGloryfashion::ProtoModID_MIN;
const stReqGloryfashion_ProtoModID stReqGloryfashion::ProtoModID_MAX;
const int stReqGloryfashion::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGloryfashion_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGloryfashion_ProtoFunID_descriptor_;
}
bool stReqGloryfashion_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 158:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGloryfashion_ProtoFunID stReqGloryfashion::FunID;
const stReqGloryfashion_ProtoFunID stReqGloryfashion::ProtoFunID_MIN;
const stReqGloryfashion_ProtoFunID stReqGloryfashion::ProtoFunID_MAX;
const int stReqGloryfashion::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGloryfashion::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqGloryfashion::stReqGloryfashion()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGloryfashion::InitAsDefaultInstance() {
}

stReqGloryfashion::stReqGloryfashion(const stReqGloryfashion& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGloryfashion::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGloryfashion::~stReqGloryfashion() {
  SharedDtor();
}

void stReqGloryfashion::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGloryfashion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGloryfashion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGloryfashion_descriptor_;
}

const stReqGloryfashion& stReqGloryfashion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqGloryfashion* stReqGloryfashion::default_instance_ = NULL;

stReqGloryfashion* stReqGloryfashion::New() const {
  return new stReqGloryfashion;
}

void stReqGloryfashion::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGloryfashion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGloryfashion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGloryfashion::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGloryfashion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGloryfashion::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGloryfashion* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGloryfashion*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGloryfashion::MergeFrom(const stReqGloryfashion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGloryfashion::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGloryfashion::CopyFrom(const stReqGloryfashion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGloryfashion::IsInitialized() const {

  return true;
}

void stReqGloryfashion::Swap(stReqGloryfashion* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGloryfashion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGloryfashion_descriptor_;
  metadata.reflection = stReqGloryfashion_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGloryfashionResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryfashionResult_eResult_descriptor_;
}
bool stGloryfashionResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGloryfashionResult_eResult stGloryfashionResult::eSuccess;
const stGloryfashionResult_eResult stGloryfashionResult::eRecharge_Not_Enough;
const stGloryfashionResult_eResult stGloryfashionResult::eBag_Full;
const stGloryfashionResult_eResult stGloryfashionResult::eNot_Open_Time;
const stGloryfashionResult_eResult stGloryfashionResult::eResult_MIN;
const stGloryfashionResult_eResult stGloryfashionResult::eResult_MAX;
const int stGloryfashionResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGloryfashionResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryfashionResult_ProtoModID_descriptor_;
}
bool stGloryfashionResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGloryfashionResult_ProtoModID stGloryfashionResult::ModID;
const stGloryfashionResult_ProtoModID stGloryfashionResult::ProtoModID_MIN;
const stGloryfashionResult_ProtoModID stGloryfashionResult::ProtoModID_MAX;
const int stGloryfashionResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGloryfashionResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryfashionResult_ProtoFunID_descriptor_;
}
bool stGloryfashionResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 159:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGloryfashionResult_ProtoFunID stGloryfashionResult::FunID;
const stGloryfashionResult_ProtoFunID stGloryfashionResult::ProtoFunID_MIN;
const stGloryfashionResult_ProtoFunID stGloryfashionResult::ProtoFunID_MAX;
const int stGloryfashionResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGloryfashionResult::kResultFieldNumber;
#endif  // !_MSC_VER

stGloryfashionResult::stGloryfashionResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGloryfashionResult::InitAsDefaultInstance() {
}

stGloryfashionResult::stGloryfashionResult(const stGloryfashionResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGloryfashionResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGloryfashionResult::~stGloryfashionResult() {
  SharedDtor();
}

void stGloryfashionResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGloryfashionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGloryfashionResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryfashionResult_descriptor_;
}

const stGloryfashionResult& stGloryfashionResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGloryfashionResult* stGloryfashionResult::default_instance_ = NULL;

stGloryfashionResult* stGloryfashionResult::New() const {
  return new stGloryfashionResult;
}

void stGloryfashionResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGloryfashionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGloryfashionResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stGloryfashionResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stGloryfashionResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGloryfashionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGloryfashionResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGloryfashionResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGloryfashionResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGloryfashionResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGloryfashionResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGloryfashionResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGloryfashionResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGloryfashionResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGloryfashionResult::MergeFrom(const stGloryfashionResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGloryfashionResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGloryfashionResult::CopyFrom(const stGloryfashionResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGloryfashionResult::IsInitialized() const {

  return true;
}

void stGloryfashionResult::Swap(stGloryfashionResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGloryfashionResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGloryfashionResult_descriptor_;
  metadata.reflection = stGloryfashionResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDevilCallItem_eRewardStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallItem_eRewardStatus_descriptor_;
}
bool stDevilCallItem_eRewardStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCallItem_eRewardStatus stDevilCallItem::eHas_Reward;
const stDevilCallItem_eRewardStatus stDevilCallItem::eNo_Reward;
const stDevilCallItem_eRewardStatus stDevilCallItem::eGot_Reward;
const stDevilCallItem_eRewardStatus stDevilCallItem::eRewardStatus_MIN;
const stDevilCallItem_eRewardStatus stDevilCallItem::eRewardStatus_MAX;
const int stDevilCallItem::eRewardStatus_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDevilCallItem::kItemIdFieldNumber;
const int stDevilCallItem::kBossDrawStatusFieldNumber;
const int stDevilCallItem::kCommonDrawStatusFieldNumber;
const int stDevilCallItem::kName1FieldNumber;
const int stDevilCallItem::kName2FieldNumber;
const int stDevilCallItem::kName3FieldNumber;
const int stDevilCallItem::kHasPassFieldNumber;
#endif  // !_MSC_VER

stDevilCallItem::stDevilCallItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDevilCallItem::InitAsDefaultInstance() {
}

stDevilCallItem::stDevilCallItem(const stDevilCallItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDevilCallItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  bossdrawstatus_ = 0u;
  commondrawstatus_ = 0u;
  name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  haspass_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDevilCallItem::~stDevilCallItem() {
  SharedDtor();
}

void stDevilCallItem::SharedDtor() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name3_ != &::google::protobuf::internal::kEmptyString) {
    delete name3_;
  }
  if (this != default_instance_) {
  }
}

void stDevilCallItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDevilCallItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallItem_descriptor_;
}

const stDevilCallItem& stDevilCallItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stDevilCallItem* stDevilCallItem::default_instance_ = NULL;

stDevilCallItem* stDevilCallItem::New() const {
  return new stDevilCallItem;
}

void stDevilCallItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    bossdrawstatus_ = 0u;
    commondrawstatus_ = 0u;
    if (has_name1()) {
      if (name1_ != &::google::protobuf::internal::kEmptyString) {
        name1_->clear();
      }
    }
    if (has_name2()) {
      if (name2_ != &::google::protobuf::internal::kEmptyString) {
        name2_->clear();
      }
    }
    if (has_name3()) {
      if (name3_ != &::google::protobuf::internal::kEmptyString) {
        name3_->clear();
      }
    }
    haspass_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDevilCallItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossDrawStatus;
        break;
      }

      // optional uint32 bossDrawStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossDrawStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossdrawstatus_)));
          set_has_bossdrawstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_commonDrawStatus;
        break;
      }

      // optional uint32 commonDrawStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commonDrawStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commondrawstatus_)));
          set_has_commondrawstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name1;
        break;
      }

      // optional string name1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name1().data(), this->name1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name2;
        break;
      }

      // optional string name2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name2().data(), this->name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name3;
        break;
      }

      // optional string name3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name3().data(), this->name3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hasPass;
        break;
      }

      // optional bool hasPass = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haspass_)));
          set_has_haspass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDevilCallItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 bossDrawStatus = 2;
  if (has_bossdrawstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossdrawstatus(), output);
  }

  // optional uint32 commonDrawStatus = 3;
  if (has_commondrawstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->commondrawstatus(), output);
  }

  // optional string name1 = 4;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name1(), output);
  }

  // optional string name2 = 5;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name2(), output);
  }

  // optional string name3 = 6;
  if (has_name3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name3().data(), this->name3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name3(), output);
  }

  // optional bool hasPass = 7;
  if (has_haspass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->haspass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDevilCallItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 bossDrawStatus = 2;
  if (has_bossdrawstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossdrawstatus(), target);
  }

  // optional uint32 commonDrawStatus = 3;
  if (has_commondrawstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->commondrawstatus(), target);
  }

  // optional string name1 = 4;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name1(), target);
  }

  // optional string name2 = 5;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name2(), target);
  }

  // optional string name3 = 6;
  if (has_name3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name3().data(), this->name3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name3(), target);
  }

  // optional bool hasPass = 7;
  if (has_haspass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->haspass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDevilCallItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 bossDrawStatus = 2;
    if (has_bossdrawstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossdrawstatus());
    }

    // optional uint32 commonDrawStatus = 3;
    if (has_commondrawstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commondrawstatus());
    }

    // optional string name1 = 4;
    if (has_name1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name1());
    }

    // optional string name2 = 5;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }

    // optional string name3 = 6;
    if (has_name3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name3());
    }

    // optional bool hasPass = 7;
    if (has_haspass()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDevilCallItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDevilCallItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDevilCallItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDevilCallItem::MergeFrom(const stDevilCallItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_bossdrawstatus()) {
      set_bossdrawstatus(from.bossdrawstatus());
    }
    if (from.has_commondrawstatus()) {
      set_commondrawstatus(from.commondrawstatus());
    }
    if (from.has_name1()) {
      set_name1(from.name1());
    }
    if (from.has_name2()) {
      set_name2(from.name2());
    }
    if (from.has_name3()) {
      set_name3(from.name3());
    }
    if (from.has_haspass()) {
      set_haspass(from.haspass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDevilCallItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDevilCallItem::CopyFrom(const stDevilCallItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDevilCallItem::IsInitialized() const {

  return true;
}

void stDevilCallItem::Swap(stDevilCallItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(bossdrawstatus_, other->bossdrawstatus_);
    std::swap(commondrawstatus_, other->commondrawstatus_);
    std::swap(name1_, other->name1_);
    std::swap(name2_, other->name2_);
    std::swap(name3_, other->name3_);
    std::swap(haspass_, other->haspass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDevilCallItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDevilCallItem_descriptor_;
  metadata.reflection = stDevilCallItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAllDevilCall_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAllDevilCall_ProtoModID_descriptor_;
}
bool stReqAllDevilCall_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAllDevilCall_ProtoModID stReqAllDevilCall::ModID;
const stReqAllDevilCall_ProtoModID stReqAllDevilCall::ProtoModID_MIN;
const stReqAllDevilCall_ProtoModID stReqAllDevilCall::ProtoModID_MAX;
const int stReqAllDevilCall::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAllDevilCall_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAllDevilCall_ProtoFunID_descriptor_;
}
bool stReqAllDevilCall_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 160:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAllDevilCall_ProtoFunID stReqAllDevilCall::FunID;
const stReqAllDevilCall_ProtoFunID stReqAllDevilCall::ProtoFunID_MIN;
const stReqAllDevilCall_ProtoFunID stReqAllDevilCall::ProtoFunID_MAX;
const int stReqAllDevilCall::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAllDevilCall::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqAllDevilCall::stReqAllDevilCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAllDevilCall::InitAsDefaultInstance() {
}

stReqAllDevilCall::stReqAllDevilCall(const stReqAllDevilCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAllDevilCall::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAllDevilCall::~stReqAllDevilCall() {
  SharedDtor();
}

void stReqAllDevilCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAllDevilCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAllDevilCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAllDevilCall_descriptor_;
}

const stReqAllDevilCall& stReqAllDevilCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqAllDevilCall* stReqAllDevilCall::default_instance_ = NULL;

stReqAllDevilCall* stReqAllDevilCall::New() const {
  return new stReqAllDevilCall;
}

void stReqAllDevilCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAllDevilCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAllDevilCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAllDevilCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAllDevilCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAllDevilCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAllDevilCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAllDevilCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAllDevilCall::MergeFrom(const stReqAllDevilCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAllDevilCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAllDevilCall::CopyFrom(const stReqAllDevilCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAllDevilCall::IsInitialized() const {

  return true;
}

void stReqAllDevilCall::Swap(stReqAllDevilCall* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAllDevilCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAllDevilCall_descriptor_;
  metadata.reflection = stReqAllDevilCall_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetAllDevilCall_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAllDevilCall_eResult_descriptor_;
}
bool stRetAllDevilCall_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetAllDevilCall_eResult stRetAllDevilCall::eSuccess;
const stRetAllDevilCall_eResult stRetAllDevilCall::eLvl_Limit;
const stRetAllDevilCall_eResult stRetAllDevilCall::eResult_MIN;
const stRetAllDevilCall_eResult stRetAllDevilCall::eResult_MAX;
const int stRetAllDevilCall::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetAllDevilCall_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAllDevilCall_ProtoModID_descriptor_;
}
bool stRetAllDevilCall_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetAllDevilCall_ProtoModID stRetAllDevilCall::ModID;
const stRetAllDevilCall_ProtoModID stRetAllDevilCall::ProtoModID_MIN;
const stRetAllDevilCall_ProtoModID stRetAllDevilCall::ProtoModID_MAX;
const int stRetAllDevilCall::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetAllDevilCall_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAllDevilCall_ProtoFunID_descriptor_;
}
bool stRetAllDevilCall_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 161:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetAllDevilCall_ProtoFunID stRetAllDevilCall::FunID;
const stRetAllDevilCall_ProtoFunID stRetAllDevilCall::ProtoFunID_MIN;
const stRetAllDevilCall_ProtoFunID stRetAllDevilCall::ProtoFunID_MAX;
const int stRetAllDevilCall::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetAllDevilCall::kResultFieldNumber;
const int stRetAllDevilCall::kItemFieldNumber;
#endif  // !_MSC_VER

stRetAllDevilCall::stRetAllDevilCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetAllDevilCall::InitAsDefaultInstance() {
}

stRetAllDevilCall::stRetAllDevilCall(const stRetAllDevilCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetAllDevilCall::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetAllDevilCall::~stRetAllDevilCall() {
  SharedDtor();
}

void stRetAllDevilCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetAllDevilCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetAllDevilCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAllDevilCall_descriptor_;
}

const stRetAllDevilCall& stRetAllDevilCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetAllDevilCall* stRetAllDevilCall::default_instance_ = NULL;

stRetAllDevilCall* stRetAllDevilCall::New() const {
  return new stRetAllDevilCall;
}

void stRetAllDevilCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetAllDevilCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRetAllDevilCall.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetAllDevilCall_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetAllDevilCall_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .MiscProto.stDevilCallItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetAllDevilCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRetAllDevilCall.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // repeated .MiscProto.stDevilCallItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetAllDevilCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRetAllDevilCall.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // repeated .MiscProto.stDevilCallItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetAllDevilCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRetAllDevilCall.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .MiscProto.stDevilCallItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetAllDevilCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetAllDevilCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetAllDevilCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetAllDevilCall::MergeFrom(const stRetAllDevilCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetAllDevilCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetAllDevilCall::CopyFrom(const stRetAllDevilCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetAllDevilCall::IsInitialized() const {

  return true;
}

void stRetAllDevilCall::Swap(stRetAllDevilCall* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetAllDevilCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetAllDevilCall_descriptor_;
  metadata.reflection = stRetAllDevilCall_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDevilCallReward_eType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDevilCallReward_eType_descriptor_;
}
bool stReqDevilCallReward_eType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDevilCallReward_eType stReqDevilCallReward::eBoss_Reward;
const stReqDevilCallReward_eType stReqDevilCallReward::eCommon_Reward;
const stReqDevilCallReward_eType stReqDevilCallReward::eType_MIN;
const stReqDevilCallReward_eType stReqDevilCallReward::eType_MAX;
const int stReqDevilCallReward::eType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDevilCallReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDevilCallReward_ProtoModID_descriptor_;
}
bool stReqDevilCallReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDevilCallReward_ProtoModID stReqDevilCallReward::ModID;
const stReqDevilCallReward_ProtoModID stReqDevilCallReward::ProtoModID_MIN;
const stReqDevilCallReward_ProtoModID stReqDevilCallReward::ProtoModID_MAX;
const int stReqDevilCallReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDevilCallReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDevilCallReward_ProtoFunID_descriptor_;
}
bool stReqDevilCallReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 162:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDevilCallReward_ProtoFunID stReqDevilCallReward::FunID;
const stReqDevilCallReward_ProtoFunID stReqDevilCallReward::ProtoFunID_MIN;
const stReqDevilCallReward_ProtoFunID stReqDevilCallReward::ProtoFunID_MAX;
const int stReqDevilCallReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDevilCallReward::kRewardTypeFieldNumber;
const int stReqDevilCallReward::kBossIdFieldNumber;
#endif  // !_MSC_VER

stReqDevilCallReward::stReqDevilCallReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDevilCallReward::InitAsDefaultInstance() {
}

stReqDevilCallReward::stReqDevilCallReward(const stReqDevilCallReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDevilCallReward::SharedCtor() {
  _cached_size_ = 0;
  rewardtype_ = 1;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDevilCallReward::~stReqDevilCallReward() {
  SharedDtor();
}

void stReqDevilCallReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDevilCallReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDevilCallReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDevilCallReward_descriptor_;
}

const stReqDevilCallReward& stReqDevilCallReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDevilCallReward* stReqDevilCallReward::default_instance_ = NULL;

stReqDevilCallReward* stReqDevilCallReward::New() const {
  return new stReqDevilCallReward;
}

void stReqDevilCallReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardtype_ = 1;
    bossid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDevilCallReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stReqDevilCallReward.eType rewardType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stReqDevilCallReward_eType_IsValid(value)) {
            set_rewardtype(static_cast< ::MiscProto::stReqDevilCallReward_eType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional uint32 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDevilCallReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stReqDevilCallReward.eType rewardType = 1;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rewardtype(), output);
  }

  // optional uint32 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDevilCallReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stReqDevilCallReward.eType rewardType = 1;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rewardtype(), target);
  }

  // optional uint32 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDevilCallReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stReqDevilCallReward.eType rewardType = 1;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rewardtype());
    }

    // optional uint32 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDevilCallReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDevilCallReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDevilCallReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDevilCallReward::MergeFrom(const stReqDevilCallReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDevilCallReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDevilCallReward::CopyFrom(const stReqDevilCallReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDevilCallReward::IsInitialized() const {

  return true;
}

void stReqDevilCallReward::Swap(stReqDevilCallReward* other) {
  if (other != this) {
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDevilCallReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDevilCallReward_descriptor_;
  metadata.reflection = stReqDevilCallReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_eType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCallReward_eType_descriptor_;
}
bool stRetDevilCallReward_eType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDevilCallReward_eType stRetDevilCallReward::eBoss_Reward;
const stRetDevilCallReward_eType stRetDevilCallReward::eCommon_Reward;
const stRetDevilCallReward_eType stRetDevilCallReward::eType_MIN;
const stRetDevilCallReward_eType stRetDevilCallReward::eType_MAX;
const int stRetDevilCallReward::eType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCallReward_eResult_descriptor_;
}
bool stRetDevilCallReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDevilCallReward_eResult stRetDevilCallReward::eSuccess;
const stRetDevilCallReward_eResult stRetDevilCallReward::eNot_That_Reward;
const stRetDevilCallReward_eResult stRetDevilCallReward::eAlready_Draw;
const stRetDevilCallReward_eResult stRetDevilCallReward::eBag_Full;
const stRetDevilCallReward_eResult stRetDevilCallReward::eLvl_limit;
const stRetDevilCallReward_eResult stRetDevilCallReward::eResult_MIN;
const stRetDevilCallReward_eResult stRetDevilCallReward::eResult_MAX;
const int stRetDevilCallReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCallReward_ProtoModID_descriptor_;
}
bool stRetDevilCallReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDevilCallReward_ProtoModID stRetDevilCallReward::ModID;
const stRetDevilCallReward_ProtoModID stRetDevilCallReward::ProtoModID_MIN;
const stRetDevilCallReward_ProtoModID stRetDevilCallReward::ProtoModID_MAX;
const int stRetDevilCallReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDevilCallReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCallReward_ProtoFunID_descriptor_;
}
bool stRetDevilCallReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 163:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDevilCallReward_ProtoFunID stRetDevilCallReward::FunID;
const stRetDevilCallReward_ProtoFunID stRetDevilCallReward::ProtoFunID_MIN;
const stRetDevilCallReward_ProtoFunID stRetDevilCallReward::ProtoFunID_MAX;
const int stRetDevilCallReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDevilCallReward::kRewardTypeFieldNumber;
const int stRetDevilCallReward::kResultFieldNumber;
const int stRetDevilCallReward::kBossIdFieldNumber;
#endif  // !_MSC_VER

stRetDevilCallReward::stRetDevilCallReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDevilCallReward::InitAsDefaultInstance() {
}

stRetDevilCallReward::stRetDevilCallReward(const stRetDevilCallReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDevilCallReward::SharedCtor() {
  _cached_size_ = 0;
  rewardtype_ = 1;
  result_ = 1;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDevilCallReward::~stRetDevilCallReward() {
  SharedDtor();
}

void stRetDevilCallReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDevilCallReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDevilCallReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCallReward_descriptor_;
}

const stRetDevilCallReward& stRetDevilCallReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDevilCallReward* stRetDevilCallReward::default_instance_ = NULL;

stRetDevilCallReward* stRetDevilCallReward::New() const {
  return new stRetDevilCallReward;
}

void stRetDevilCallReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardtype_ = 1;
    result_ = 1;
    bossid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDevilCallReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRetDevilCallReward.eType rewardType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetDevilCallReward_eType_IsValid(value)) {
            set_rewardtype(static_cast< ::MiscProto::stRetDevilCallReward_eType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MiscProto.stRetDevilCallReward.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetDevilCallReward_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetDevilCallReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bossId;
        break;
      }

      // optional uint32 bossId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDevilCallReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRetDevilCallReward.eType rewardType = 1;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rewardtype(), output);
  }

  // optional .MiscProto.stRetDevilCallReward.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional uint32 bossId = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDevilCallReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRetDevilCallReward.eType rewardType = 1;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rewardtype(), target);
  }

  // optional .MiscProto.stRetDevilCallReward.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional uint32 bossId = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDevilCallReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRetDevilCallReward.eType rewardType = 1;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rewardtype());
    }

    // optional .MiscProto.stRetDevilCallReward.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 bossId = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDevilCallReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDevilCallReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDevilCallReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDevilCallReward::MergeFrom(const stRetDevilCallReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDevilCallReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDevilCallReward::CopyFrom(const stRetDevilCallReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDevilCallReward::IsInitialized() const {

  return true;
}

void stRetDevilCallReward::Swap(stRetDevilCallReward* other) {
  if (other != this) {
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(result_, other->result_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDevilCallReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDevilCallReward_descriptor_;
  metadata.reflection = stRetDevilCallReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDevilCall_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDevilCall_ProtoModID_descriptor_;
}
bool stReqDevilCall_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDevilCall_ProtoModID stReqDevilCall::ModID;
const stReqDevilCall_ProtoModID stReqDevilCall::ProtoModID_MIN;
const stReqDevilCall_ProtoModID stReqDevilCall::ProtoModID_MAX;
const int stReqDevilCall::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDevilCall_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDevilCall_ProtoFunID_descriptor_;
}
bool stReqDevilCall_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 164:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDevilCall_ProtoFunID stReqDevilCall::FunID;
const stReqDevilCall_ProtoFunID stReqDevilCall::ProtoFunID_MIN;
const stReqDevilCall_ProtoFunID stReqDevilCall::ProtoFunID_MAX;
const int stReqDevilCall::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDevilCall::kBossIdFieldNumber;
#endif  // !_MSC_VER

stReqDevilCall::stReqDevilCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDevilCall::InitAsDefaultInstance() {
}

stReqDevilCall::stReqDevilCall(const stReqDevilCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDevilCall::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDevilCall::~stReqDevilCall() {
  SharedDtor();
}

void stReqDevilCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDevilCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDevilCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDevilCall_descriptor_;
}

const stReqDevilCall& stReqDevilCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDevilCall* stReqDevilCall::default_instance_ = NULL;

stReqDevilCall* stReqDevilCall::New() const {
  return new stReqDevilCall;
}

void stReqDevilCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDevilCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bossId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDevilCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bossId = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDevilCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bossId = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDevilCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bossId = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDevilCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDevilCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDevilCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDevilCall::MergeFrom(const stReqDevilCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDevilCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDevilCall::CopyFrom(const stReqDevilCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDevilCall::IsInitialized() const {

  return true;
}

void stReqDevilCall::Swap(stReqDevilCall* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDevilCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDevilCall_descriptor_;
  metadata.reflection = stReqDevilCall_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDevilCall_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCall_eResult_descriptor_;
}
bool stRetDevilCall_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDevilCall_eResult stRetDevilCall::eSuccess;
const stRetDevilCall_eResult stRetDevilCall::eRes_Not_Enough;
const stRetDevilCall_eResult stRetDevilCall::eBag_Full;
const stRetDevilCall_eResult stRetDevilCall::eNot_Open;
const stRetDevilCall_eResult stRetDevilCall::eNo_Such_Id;
const stRetDevilCall_eResult stRetDevilCall::eLvl_limit;
const stRetDevilCall_eResult stRetDevilCall::eResult_MIN;
const stRetDevilCall_eResult stRetDevilCall::eResult_MAX;
const int stRetDevilCall::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDevilCall_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCall_ProtoModID_descriptor_;
}
bool stRetDevilCall_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDevilCall_ProtoModID stRetDevilCall::ModID;
const stRetDevilCall_ProtoModID stRetDevilCall::ProtoModID_MIN;
const stRetDevilCall_ProtoModID stRetDevilCall::ProtoModID_MAX;
const int stRetDevilCall::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDevilCall_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCall_ProtoFunID_descriptor_;
}
bool stRetDevilCall_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 165:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDevilCall_ProtoFunID stRetDevilCall::FunID;
const stRetDevilCall_ProtoFunID stRetDevilCall::ProtoFunID_MIN;
const stRetDevilCall_ProtoFunID stRetDevilCall::ProtoFunID_MAX;
const int stRetDevilCall::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDevilCall::kIdFieldNumber;
const int stRetDevilCall::kResultFieldNumber;
const int stRetDevilCall::kItemsFieldNumber;
#endif  // !_MSC_VER

stRetDevilCall::stRetDevilCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDevilCall::InitAsDefaultInstance() {
}

stRetDevilCall::stRetDevilCall(const stRetDevilCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDevilCall::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDevilCall::~stRetDevilCall() {
  SharedDtor();
}

void stRetDevilCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDevilCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDevilCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCall_descriptor_;
}

const stRetDevilCall& stRetDevilCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDevilCall* stRetDevilCall::default_instance_ = NULL;

stRetDevilCall* stRetDevilCall::New() const {
  return new stRetDevilCall;
}

void stRetDevilCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    result_ = 1;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDevilCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MiscProto.stRetDevilCall.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetDevilCall_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetDevilCall_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .MiscProto.stSynDrawItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDevilCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .MiscProto.stRetDevilCall.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // repeated .MiscProto.stSynDrawItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDevilCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .MiscProto.stRetDevilCall.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // repeated .MiscProto.stSynDrawItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDevilCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .MiscProto.stRetDevilCall.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  // repeated .MiscProto.stSynDrawItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDevilCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDevilCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDevilCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDevilCall::MergeFrom(const stRetDevilCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDevilCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDevilCall::CopyFrom(const stRetDevilCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDevilCall::IsInitialized() const {

  return true;
}

void stRetDevilCall::Swap(stRetDevilCall* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDevilCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDevilCall_descriptor_;
  metadata.reflection = stRetDevilCall_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDevilCallSummary_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDevilCallSummary_ProtoModID_descriptor_;
}
bool stReqDevilCallSummary_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDevilCallSummary_ProtoModID stReqDevilCallSummary::ModID;
const stReqDevilCallSummary_ProtoModID stReqDevilCallSummary::ProtoModID_MIN;
const stReqDevilCallSummary_ProtoModID stReqDevilCallSummary::ProtoModID_MAX;
const int stReqDevilCallSummary::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDevilCallSummary_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDevilCallSummary_ProtoFunID_descriptor_;
}
bool stReqDevilCallSummary_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 166:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDevilCallSummary_ProtoFunID stReqDevilCallSummary::FunID;
const stReqDevilCallSummary_ProtoFunID stReqDevilCallSummary::ProtoFunID_MIN;
const stReqDevilCallSummary_ProtoFunID stReqDevilCallSummary::ProtoFunID_MAX;
const int stReqDevilCallSummary::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDevilCallSummary::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqDevilCallSummary::stReqDevilCallSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDevilCallSummary::InitAsDefaultInstance() {
}

stReqDevilCallSummary::stReqDevilCallSummary(const stReqDevilCallSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDevilCallSummary::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDevilCallSummary::~stReqDevilCallSummary() {
  SharedDtor();
}

void stReqDevilCallSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDevilCallSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDevilCallSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDevilCallSummary_descriptor_;
}

const stReqDevilCallSummary& stReqDevilCallSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDevilCallSummary* stReqDevilCallSummary::default_instance_ = NULL;

stReqDevilCallSummary* stReqDevilCallSummary::New() const {
  return new stReqDevilCallSummary;
}

void stReqDevilCallSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDevilCallSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDevilCallSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDevilCallSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDevilCallSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDevilCallSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDevilCallSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDevilCallSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDevilCallSummary::MergeFrom(const stReqDevilCallSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDevilCallSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDevilCallSummary::CopyFrom(const stReqDevilCallSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDevilCallSummary::IsInitialized() const {

  return true;
}

void stReqDevilCallSummary::Swap(stReqDevilCallSummary* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDevilCallSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDevilCallSummary_descriptor_;
  metadata.reflection = stReqDevilCallSummary_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDevilCallSummary_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCallSummary_ProtoModID_descriptor_;
}
bool stRetDevilCallSummary_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDevilCallSummary_ProtoModID stRetDevilCallSummary::ModID;
const stRetDevilCallSummary_ProtoModID stRetDevilCallSummary::ProtoModID_MIN;
const stRetDevilCallSummary_ProtoModID stRetDevilCallSummary::ProtoModID_MAX;
const int stRetDevilCallSummary::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDevilCallSummary_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCallSummary_ProtoFunID_descriptor_;
}
bool stRetDevilCallSummary_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 167:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDevilCallSummary_ProtoFunID stRetDevilCallSummary::FunID;
const stRetDevilCallSummary_ProtoFunID stRetDevilCallSummary::ProtoFunID_MIN;
const stRetDevilCallSummary_ProtoFunID stRetDevilCallSummary::ProtoFunID_MAX;
const int stRetDevilCallSummary::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDevilCallSummary::kItemFieldNumber;
#endif  // !_MSC_VER

stRetDevilCallSummary::stRetDevilCallSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDevilCallSummary::InitAsDefaultInstance() {
}

stRetDevilCallSummary::stRetDevilCallSummary(const stRetDevilCallSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDevilCallSummary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDevilCallSummary::~stRetDevilCallSummary() {
  SharedDtor();
}

void stRetDevilCallSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDevilCallSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDevilCallSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDevilCallSummary_descriptor_;
}

const stRetDevilCallSummary& stRetDevilCallSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDevilCallSummary* stRetDevilCallSummary::default_instance_ = NULL;

stRetDevilCallSummary* stRetDevilCallSummary::New() const {
  return new stRetDevilCallSummary;
}

void stRetDevilCallSummary::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDevilCallSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stDevilCallItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDevilCallSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stDevilCallItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDevilCallSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stDevilCallItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDevilCallSummary::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stDevilCallItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDevilCallSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDevilCallSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDevilCallSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDevilCallSummary::MergeFrom(const stRetDevilCallSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDevilCallSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDevilCallSummary::CopyFrom(const stRetDevilCallSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDevilCallSummary::IsInitialized() const {

  return true;
}

void stRetDevilCallSummary::Swap(stRetDevilCallSummary* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDevilCallSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDevilCallSummary_descriptor_;
  metadata.reflection = stRetDevilCallSummary_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayType_ProtoModID_descriptor_;
}
bool stReqPayType_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPayType_ProtoModID stReqPayType::ModID;
const stReqPayType_ProtoModID stReqPayType::ProtoModID_MIN;
const stReqPayType_ProtoModID stReqPayType::ProtoModID_MAX;
const int stReqPayType::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayType_ProtoFunID_descriptor_;
}
bool stReqPayType_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 168:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPayType_ProtoFunID stReqPayType::FunID;
const stReqPayType_ProtoFunID stReqPayType::ProtoFunID_MIN;
const stReqPayType_ProtoFunID stReqPayType::ProtoFunID_MAX;
const int stReqPayType::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPayType::kCharIDFieldNumber;
const int stReqPayType::kItemIdFieldNumber;
const int stReqPayType::kServerIdFieldNumber;
const int stReqPayType::kIsExtendFieldNumber;
const int stReqPayType::kDataFieldNumber;
#endif  // !_MSC_VER

stReqPayType::stReqPayType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPayType::InitAsDefaultInstance() {
}

stReqPayType::stReqPayType(const stReqPayType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPayType::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  itemid_ = 0u;
  serverid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isextend_ = false;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPayType::~stReqPayType() {
  SharedDtor();
}

void stReqPayType::SharedDtor() {
  if (serverid_ != &::google::protobuf::internal::kEmptyString) {
    delete serverid_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stReqPayType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPayType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayType_descriptor_;
}

const stReqPayType& stReqPayType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqPayType* stReqPayType::default_instance_ = NULL;

stReqPayType* stReqPayType::New() const {
  return new stReqPayType;
}

void stReqPayType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    itemid_ = 0u;
    if (has_serverid()) {
      if (serverid_ != &::google::protobuf::internal::kEmptyString) {
        serverid_->clear();
      }
    }
    isextend_ = false;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPayType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_serverId;
        break;
      }

      // optional string serverId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_serverid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serverid().data(), this->serverid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isExtend;
        break;
      }

      // optional bool isExtend = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isExtend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isextend_)));
          set_has_isextend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional string data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPayType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional string serverId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->serverid(), output);
  }

  // optional bool isExtend = 4;
  if (has_isextend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isextend(), output);
  }

  // optional string data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPayType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional string serverId = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serverid().data(), this->serverid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->serverid(), target);
  }

  // optional bool isExtend = 4;
  if (has_isextend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isextend(), target);
  }

  // optional string data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPayType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string serverId = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->serverid());
    }

    // optional bool isExtend = 4;
    if (has_isextend()) {
      total_size += 1 + 1;
    }

    // optional string data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPayType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPayType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPayType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPayType::MergeFrom(const stReqPayType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_isextend()) {
      set_isextend(from.isextend());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPayType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPayType::CopyFrom(const stReqPayType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPayType::IsInitialized() const {

  return true;
}

void stReqPayType::Swap(stReqPayType* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(serverid_, other->serverid_);
    std::swap(isextend_, other->isextend_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPayType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPayType_descriptor_;
  metadata.reflection = stReqPayType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetPayType_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetPayType_eResult_descriptor_;
}
bool stRetPayType_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetPayType_eResult stRetPayType::eSuccess;
const stRetPayType_eResult stRetPayType::eNo_Such_Item;
const stRetPayType_eResult stRetPayType::eSame_Order_Id;
const stRetPayType_eResult stRetPayType::eResult_MIN;
const stRetPayType_eResult stRetPayType::eResult_MAX;
const int stRetPayType::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetPayType_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetPayType_ProtoModID_descriptor_;
}
bool stRetPayType_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetPayType_ProtoModID stRetPayType::ModID;
const stRetPayType_ProtoModID stRetPayType::ProtoModID_MIN;
const stRetPayType_ProtoModID stRetPayType::ProtoModID_MAX;
const int stRetPayType::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetPayType_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetPayType_ProtoFunID_descriptor_;
}
bool stRetPayType_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 169:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetPayType_ProtoFunID stRetPayType::FunID;
const stRetPayType_ProtoFunID stRetPayType::ProtoFunID_MIN;
const stRetPayType_ProtoFunID stRetPayType::ProtoFunID_MAX;
const int stRetPayType::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetPayType::kPayTypeFieldNumber;
const int stRetPayType::kItemIdFieldNumber;
const int stRetPayType::kOrderIdFieldNumber;
const int stRetPayType::kResFieldNumber;
#endif  // !_MSC_VER

stRetPayType::stRetPayType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetPayType::InitAsDefaultInstance() {
}

stRetPayType::stRetPayType(const stRetPayType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetPayType::SharedCtor() {
  _cached_size_ = 0;
  paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = 0u;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetPayType::~stRetPayType() {
  SharedDtor();
}

void stRetPayType::SharedDtor() {
  if (paytype_ != &::google::protobuf::internal::kEmptyString) {
    delete paytype_;
  }
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void stRetPayType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetPayType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetPayType_descriptor_;
}

const stRetPayType& stRetPayType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetPayType* stRetPayType::default_instance_ = NULL;

stRetPayType* stRetPayType::New() const {
  return new stRetPayType;
}

void stRetPayType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_paytype()) {
      if (paytype_ != &::google::protobuf::internal::kEmptyString) {
        paytype_->clear();
      }
    }
    itemid_ = 0u;
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    res_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetPayType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string payType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paytype().data(), this->paytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderId;
        break;
      }

      // optional string orderId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }

      // optional .MiscProto.stRetPayType.eResult res = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetPayType_eResult_IsValid(value)) {
            set_res(static_cast< ::MiscProto::stRetPayType_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetPayType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string payType = 1;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paytype().data(), this->paytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->paytype(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional string orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }

  // optional .MiscProto.stRetPayType.eResult res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetPayType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string payType = 1;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paytype().data(), this->paytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->paytype(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional string orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  // optional .MiscProto.stRetPayType.eResult res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetPayType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string payType = 1;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paytype());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string orderId = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional .MiscProto.stRetPayType.eResult res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetPayType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetPayType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetPayType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetPayType::MergeFrom(const stRetPayType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetPayType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetPayType::CopyFrom(const stRetPayType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetPayType::IsInitialized() const {

  return true;
}

void stRetPayType::Swap(stRetPayType* other) {
  if (other != this) {
    std::swap(paytype_, other->paytype_);
    std::swap(itemid_, other->itemid_);
    std::swap(orderid_, other->orderid_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetPayType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetPayType_descriptor_;
  metadata.reflection = stRetPayType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOperateActvity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOperateActvity_ProtoModID_descriptor_;
}
bool stReqOperateActvity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOperateActvity_ProtoModID stReqOperateActvity::ModID;
const stReqOperateActvity_ProtoModID stReqOperateActvity::ProtoModID_MIN;
const stReqOperateActvity_ProtoModID stReqOperateActvity::ProtoModID_MAX;
const int stReqOperateActvity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOperateActvity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOperateActvity_ProtoFunID_descriptor_;
}
bool stReqOperateActvity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 170:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOperateActvity_ProtoFunID stReqOperateActvity::FunID;
const stReqOperateActvity_ProtoFunID stReqOperateActvity::ProtoFunID_MIN;
const stReqOperateActvity_ProtoFunID stReqOperateActvity::ProtoFunID_MAX;
const int stReqOperateActvity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOperateActvity::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOperateActvity::stReqOperateActvity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOperateActvity::InitAsDefaultInstance() {
}

stReqOperateActvity::stReqOperateActvity(const stReqOperateActvity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOperateActvity::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOperateActvity::~stReqOperateActvity() {
  SharedDtor();
}

void stReqOperateActvity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOperateActvity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOperateActvity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOperateActvity_descriptor_;
}

const stReqOperateActvity& stReqOperateActvity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqOperateActvity* stReqOperateActvity::default_instance_ = NULL;

stReqOperateActvity* stReqOperateActvity::New() const {
  return new stReqOperateActvity;
}

void stReqOperateActvity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOperateActvity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOperateActvity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOperateActvity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOperateActvity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOperateActvity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOperateActvity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOperateActvity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOperateActvity::MergeFrom(const stReqOperateActvity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOperateActvity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOperateActvity::CopyFrom(const stReqOperateActvity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOperateActvity::IsInitialized() const {

  return true;
}

void stReqOperateActvity::Swap(stReqOperateActvity* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOperateActvity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOperateActvity_descriptor_;
  metadata.reflection = stReqOperateActvity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stOperateActvityItemInfo::kItemIdFieldNumber;
const int stOperateActvityItemInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

stOperateActvityItemInfo::stOperateActvityItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOperateActvityItemInfo::InitAsDefaultInstance() {
}

stOperateActvityItemInfo::stOperateActvityItemInfo(const stOperateActvityItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOperateActvityItemInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOperateActvityItemInfo::~stOperateActvityItemInfo() {
  SharedDtor();
}

void stOperateActvityItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOperateActvityItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOperateActvityItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActvityItemInfo_descriptor_;
}

const stOperateActvityItemInfo& stOperateActvityItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stOperateActvityItemInfo* stOperateActvityItemInfo::default_instance_ = NULL;

stOperateActvityItemInfo* stOperateActvityItemInfo::New() const {
  return new stOperateActvityItemInfo;
}

void stOperateActvityItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOperateActvityItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOperateActvityItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOperateActvityItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOperateActvityItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOperateActvityItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOperateActvityItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOperateActvityItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOperateActvityItemInfo::MergeFrom(const stOperateActvityItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOperateActvityItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOperateActvityItemInfo::CopyFrom(const stOperateActvityItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOperateActvityItemInfo::IsInitialized() const {

  return true;
}

void stOperateActvityItemInfo::Swap(stOperateActvityItemInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOperateActvityItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOperateActvityItemInfo_descriptor_;
  metadata.reflection = stOperateActvityItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stOperateActvityItems::kActivityIdFieldNumber;
const int stOperateActvityItems::kConditionFieldNumber;
const int stOperateActvityItems::kItemInfoFieldNumber;
#endif  // !_MSC_VER

stOperateActvityItems::stOperateActvityItems()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOperateActvityItems::InitAsDefaultInstance() {
}

stOperateActvityItems::stOperateActvityItems(const stOperateActvityItems& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOperateActvityItems::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  condition_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOperateActvityItems::~stOperateActvityItems() {
  SharedDtor();
}

void stOperateActvityItems::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOperateActvityItems::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOperateActvityItems::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActvityItems_descriptor_;
}

const stOperateActvityItems& stOperateActvityItems::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stOperateActvityItems* stOperateActvityItems::default_instance_ = NULL;

stOperateActvityItems* stOperateActvityItems::New() const {
  return new stOperateActvityItems;
}

void stOperateActvityItems::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    condition_ = 0u;
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOperateActvityItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_condition;
        break;
      }

      // optional uint32 condition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemInfo;
        break;
      }

      // repeated .MiscProto.stOperateActvityItemInfo itemInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOperateActvityItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityId = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional uint32 condition = 2;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->condition(), output);
  }

  // repeated .MiscProto.stOperateActvityItemInfo itemInfo = 3;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOperateActvityItems::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityId = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional uint32 condition = 2;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->condition(), target);
  }

  // repeated .MiscProto.stOperateActvityItemInfo itemInfo = 3;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOperateActvityItems::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityId = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 condition = 2;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->condition());
    }

  }
  // repeated .MiscProto.stOperateActvityItemInfo itemInfo = 3;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOperateActvityItems::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOperateActvityItems* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOperateActvityItems*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOperateActvityItems::MergeFrom(const stOperateActvityItems& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOperateActvityItems::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOperateActvityItems::CopyFrom(const stOperateActvityItems& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOperateActvityItems::IsInitialized() const {

  return true;
}

void stOperateActvityItems::Swap(stOperateActvityItems* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(condition_, other->condition_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOperateActvityItems::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOperateActvityItems_descriptor_;
  metadata.reflection = stOperateActvityItems_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetOperateActvity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOperateActvity_ProtoModID_descriptor_;
}
bool stRetOperateActvity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOperateActvity_ProtoModID stRetOperateActvity::ModID;
const stRetOperateActvity_ProtoModID stRetOperateActvity::ProtoModID_MIN;
const stRetOperateActvity_ProtoModID stRetOperateActvity::ProtoModID_MAX;
const int stRetOperateActvity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetOperateActvity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOperateActvity_ProtoFunID_descriptor_;
}
bool stRetOperateActvity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 171:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOperateActvity_ProtoFunID stRetOperateActvity::FunID;
const stRetOperateActvity_ProtoFunID stRetOperateActvity::ProtoFunID_MIN;
const stRetOperateActvity_ProtoFunID stRetOperateActvity::ProtoFunID_MAX;
const int stRetOperateActvity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetOperateActvity::kItemsFieldNumber;
#endif  // !_MSC_VER

stRetOperateActvity::stRetOperateActvity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetOperateActvity::InitAsDefaultInstance() {
}

stRetOperateActvity::stRetOperateActvity(const stRetOperateActvity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetOperateActvity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetOperateActvity::~stRetOperateActvity() {
  SharedDtor();
}

void stRetOperateActvity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetOperateActvity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetOperateActvity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOperateActvity_descriptor_;
}

const stRetOperateActvity& stRetOperateActvity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetOperateActvity* stRetOperateActvity::default_instance_ = NULL;

stRetOperateActvity* stRetOperateActvity::New() const {
  return new stRetOperateActvity;
}

void stRetOperateActvity::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetOperateActvity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stOperateActvityItems items = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetOperateActvity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stOperateActvityItems items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetOperateActvity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stOperateActvityItems items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetOperateActvity::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stOperateActvityItems items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetOperateActvity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetOperateActvity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetOperateActvity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetOperateActvity::MergeFrom(const stRetOperateActvity& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetOperateActvity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetOperateActvity::CopyFrom(const stRetOperateActvity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetOperateActvity::IsInitialized() const {

  return true;
}

void stRetOperateActvity::Swap(stRetOperateActvity* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetOperateActvity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetOperateActvity_descriptor_;
  metadata.reflection = stRetOperateActvity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOperateActvityReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOperateActvityReward_ProtoModID_descriptor_;
}
bool stReqOperateActvityReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOperateActvityReward_ProtoModID stReqOperateActvityReward::ModID;
const stReqOperateActvityReward_ProtoModID stReqOperateActvityReward::ProtoModID_MIN;
const stReqOperateActvityReward_ProtoModID stReqOperateActvityReward::ProtoModID_MAX;
const int stReqOperateActvityReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOperateActvityReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOperateActvityReward_ProtoFunID_descriptor_;
}
bool stReqOperateActvityReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 172:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOperateActvityReward_ProtoFunID stReqOperateActvityReward::FunID;
const stReqOperateActvityReward_ProtoFunID stReqOperateActvityReward::ProtoFunID_MIN;
const stReqOperateActvityReward_ProtoFunID stReqOperateActvityReward::ProtoFunID_MAX;
const int stReqOperateActvityReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOperateActvityReward::kActivityIdFieldNumber;
const int stReqOperateActvityReward::kItemIdFieldNumber;
#endif  // !_MSC_VER

stReqOperateActvityReward::stReqOperateActvityReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOperateActvityReward::InitAsDefaultInstance() {
}

stReqOperateActvityReward::stReqOperateActvityReward(const stReqOperateActvityReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOperateActvityReward::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOperateActvityReward::~stReqOperateActvityReward() {
  SharedDtor();
}

void stReqOperateActvityReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOperateActvityReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOperateActvityReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOperateActvityReward_descriptor_;
}

const stReqOperateActvityReward& stReqOperateActvityReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqOperateActvityReward* stReqOperateActvityReward::default_instance_ = NULL;

stReqOperateActvityReward* stReqOperateActvityReward::New() const {
  return new stReqOperateActvityReward;
}

void stReqOperateActvityReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOperateActvityReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOperateActvityReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityId = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOperateActvityReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityId = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOperateActvityReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityId = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOperateActvityReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOperateActvityReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOperateActvityReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOperateActvityReward::MergeFrom(const stReqOperateActvityReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOperateActvityReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOperateActvityReward::CopyFrom(const stReqOperateActvityReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOperateActvityReward::IsInitialized() const {

  return true;
}

void stReqOperateActvityReward::Swap(stReqOperateActvityReward* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOperateActvityReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOperateActvityReward_descriptor_;
  metadata.reflection = stReqOperateActvityReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetOperateActvityReward_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOperateActvityReward_Result_descriptor_;
}
bool stRetOperateActvityReward_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOperateActvityReward_Result stRetOperateActvityReward::SUCCESS;
const stRetOperateActvityReward_Result stRetOperateActvityReward::ACTIVITY_EXPIRE;
const stRetOperateActvityReward_Result stRetOperateActvityReward::INVALID_ID;
const stRetOperateActvityReward_Result stRetOperateActvityReward::INNER_ERROR;
const stRetOperateActvityReward_Result stRetOperateActvityReward::REWARD_ALREAD_DRAW;
const stRetOperateActvityReward_Result stRetOperateActvityReward::CONDITION_LIMIT;
const stRetOperateActvityReward_Result stRetOperateActvityReward::BAG_FULL;
const stRetOperateActvityReward_Result stRetOperateActvityReward::RESOURCE_LIMIT;
const stRetOperateActvityReward_Result stRetOperateActvityReward::Result_MIN;
const stRetOperateActvityReward_Result stRetOperateActvityReward::Result_MAX;
const int stRetOperateActvityReward::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetOperateActvityReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOperateActvityReward_ProtoModID_descriptor_;
}
bool stRetOperateActvityReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOperateActvityReward_ProtoModID stRetOperateActvityReward::ModID;
const stRetOperateActvityReward_ProtoModID stRetOperateActvityReward::ProtoModID_MIN;
const stRetOperateActvityReward_ProtoModID stRetOperateActvityReward::ProtoModID_MAX;
const int stRetOperateActvityReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetOperateActvityReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOperateActvityReward_ProtoFunID_descriptor_;
}
bool stRetOperateActvityReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 173:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOperateActvityReward_ProtoFunID stRetOperateActvityReward::FunID;
const stRetOperateActvityReward_ProtoFunID stRetOperateActvityReward::ProtoFunID_MIN;
const stRetOperateActvityReward_ProtoFunID stRetOperateActvityReward::ProtoFunID_MAX;
const int stRetOperateActvityReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetOperateActvityReward::kActivityIdFieldNumber;
const int stRetOperateActvityReward::kItemIdFieldNumber;
const int stRetOperateActvityReward::kResFieldNumber;
#endif  // !_MSC_VER

stRetOperateActvityReward::stRetOperateActvityReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetOperateActvityReward::InitAsDefaultInstance() {
}

stRetOperateActvityReward::stRetOperateActvityReward(const stRetOperateActvityReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetOperateActvityReward::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  itemid_ = 0u;
  res_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetOperateActvityReward::~stRetOperateActvityReward() {
  SharedDtor();
}

void stRetOperateActvityReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetOperateActvityReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetOperateActvityReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOperateActvityReward_descriptor_;
}

const stRetOperateActvityReward& stRetOperateActvityReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetOperateActvityReward* stRetOperateActvityReward::default_instance_ = NULL;

stRetOperateActvityReward* stRetOperateActvityReward::New() const {
  return new stRetOperateActvityReward;
}

void stRetOperateActvityReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    itemid_ = 0u;
    res_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetOperateActvityReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // optional .MiscProto.stRetOperateActvityReward.Result res = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetOperateActvityReward_Result_IsValid(value)) {
            set_res(static_cast< ::MiscProto::stRetOperateActvityReward_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetOperateActvityReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityId = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional .MiscProto.stRetOperateActvityReward.Result res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetOperateActvityReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityId = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional .MiscProto.stRetOperateActvityReward.Result res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetOperateActvityReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityId = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional .MiscProto.stRetOperateActvityReward.Result res = 3;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetOperateActvityReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetOperateActvityReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetOperateActvityReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetOperateActvityReward::MergeFrom(const stRetOperateActvityReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetOperateActvityReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetOperateActvityReward::CopyFrom(const stRetOperateActvityReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetOperateActvityReward::IsInitialized() const {

  return true;
}

void stRetOperateActvityReward::Swap(stRetOperateActvityReward* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(itemid_, other->itemid_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetOperateActvityReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetOperateActvityReward_descriptor_;
  metadata.reflection = stRetOperateActvityReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqIllusionSprite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIllusionSprite_ProtoModID_descriptor_;
}
bool stReqIllusionSprite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqIllusionSprite_ProtoModID stReqIllusionSprite::ModID;
const stReqIllusionSprite_ProtoModID stReqIllusionSprite::ProtoModID_MIN;
const stReqIllusionSprite_ProtoModID stReqIllusionSprite::ProtoModID_MAX;
const int stReqIllusionSprite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqIllusionSprite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIllusionSprite_ProtoFunID_descriptor_;
}
bool stReqIllusionSprite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 174:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqIllusionSprite_ProtoFunID stReqIllusionSprite::FunID;
const stReqIllusionSprite_ProtoFunID stReqIllusionSprite::ProtoFunID_MIN;
const stReqIllusionSprite_ProtoFunID stReqIllusionSprite::ProtoFunID_MAX;
const int stReqIllusionSprite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqIllusionSprite::kIdFieldNumber;
#endif  // !_MSC_VER

stReqIllusionSprite::stReqIllusionSprite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqIllusionSprite::InitAsDefaultInstance() {
}

stReqIllusionSprite::stReqIllusionSprite(const stReqIllusionSprite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqIllusionSprite::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqIllusionSprite::~stReqIllusionSprite() {
  SharedDtor();
}

void stReqIllusionSprite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqIllusionSprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqIllusionSprite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIllusionSprite_descriptor_;
}

const stReqIllusionSprite& stReqIllusionSprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqIllusionSprite* stReqIllusionSprite::default_instance_ = NULL;

stReqIllusionSprite* stReqIllusionSprite::New() const {
  return new stReqIllusionSprite;
}

void stReqIllusionSprite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqIllusionSprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqIllusionSprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqIllusionSprite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqIllusionSprite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqIllusionSprite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqIllusionSprite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqIllusionSprite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqIllusionSprite::MergeFrom(const stReqIllusionSprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqIllusionSprite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqIllusionSprite::CopyFrom(const stReqIllusionSprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqIllusionSprite::IsInitialized() const {

  return true;
}

void stReqIllusionSprite::Swap(stReqIllusionSprite* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqIllusionSprite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqIllusionSprite_descriptor_;
  metadata.reflection = stReqIllusionSprite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stIllusionSpriteSkillItem::kSkillIdFieldNumber;
const int stIllusionSpriteSkillItem::kSkillLvlFieldNumber;
#endif  // !_MSC_VER

stIllusionSpriteSkillItem::stIllusionSpriteSkillItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stIllusionSpriteSkillItem::InitAsDefaultInstance() {
}

stIllusionSpriteSkillItem::stIllusionSpriteSkillItem(const stIllusionSpriteSkillItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stIllusionSpriteSkillItem::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  skilllvl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stIllusionSpriteSkillItem::~stIllusionSpriteSkillItem() {
  SharedDtor();
}

void stIllusionSpriteSkillItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stIllusionSpriteSkillItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stIllusionSpriteSkillItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIllusionSpriteSkillItem_descriptor_;
}

const stIllusionSpriteSkillItem& stIllusionSpriteSkillItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stIllusionSpriteSkillItem* stIllusionSpriteSkillItem::default_instance_ = NULL;

stIllusionSpriteSkillItem* stIllusionSpriteSkillItem::New() const {
  return new stIllusionSpriteSkillItem;
}

void stIllusionSpriteSkillItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    skilllvl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stIllusionSpriteSkillItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillLvl;
        break;
      }

      // optional uint32 skillLvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllvl_)));
          set_has_skilllvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stIllusionSpriteSkillItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillId = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 skillLvl = 2;
  if (has_skilllvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skilllvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stIllusionSpriteSkillItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillId = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 skillLvl = 2;
  if (has_skilllvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skilllvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stIllusionSpriteSkillItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillId = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillLvl = 2;
    if (has_skilllvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stIllusionSpriteSkillItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stIllusionSpriteSkillItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stIllusionSpriteSkillItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stIllusionSpriteSkillItem::MergeFrom(const stIllusionSpriteSkillItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllvl()) {
      set_skilllvl(from.skilllvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stIllusionSpriteSkillItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stIllusionSpriteSkillItem::CopyFrom(const stIllusionSpriteSkillItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stIllusionSpriteSkillItem::IsInitialized() const {

  return true;
}

void stIllusionSpriteSkillItem::Swap(stIllusionSpriteSkillItem* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(skilllvl_, other->skilllvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stIllusionSpriteSkillItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stIllusionSpriteSkillItem_descriptor_;
  metadata.reflection = stIllusionSpriteSkillItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetIllusionSprite_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSprite_eResult_descriptor_;
}
bool stRetIllusionSprite_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetIllusionSprite_eResult stRetIllusionSprite::eSuccess;
const stRetIllusionSprite_eResult stRetIllusionSprite::eNo_Such_Id;
const stRetIllusionSprite_eResult stRetIllusionSprite::eResult_MIN;
const stRetIllusionSprite_eResult stRetIllusionSprite::eResult_MAX;
const int stRetIllusionSprite::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetIllusionSprite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSprite_ProtoModID_descriptor_;
}
bool stRetIllusionSprite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetIllusionSprite_ProtoModID stRetIllusionSprite::ModID;
const stRetIllusionSprite_ProtoModID stRetIllusionSprite::ProtoModID_MIN;
const stRetIllusionSprite_ProtoModID stRetIllusionSprite::ProtoModID_MAX;
const int stRetIllusionSprite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetIllusionSprite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSprite_ProtoFunID_descriptor_;
}
bool stRetIllusionSprite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 175:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetIllusionSprite_ProtoFunID stRetIllusionSprite::FunID;
const stRetIllusionSprite_ProtoFunID stRetIllusionSprite::ProtoFunID_MIN;
const stRetIllusionSprite_ProtoFunID stRetIllusionSprite::ProtoFunID_MAX;
const int stRetIllusionSprite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetIllusionSprite::kIdFieldNumber;
const int stRetIllusionSprite::kLvlFieldNumber;
const int stRetIllusionSprite::kExpFieldNumber;
const int stRetIllusionSprite::kTalentNumFieldNumber;
const int stRetIllusionSprite::kSkillsFieldNumber;
const int stRetIllusionSprite::kResFieldNumber;
#endif  // !_MSC_VER

stRetIllusionSprite::stRetIllusionSprite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetIllusionSprite::InitAsDefaultInstance() {
}

stRetIllusionSprite::stRetIllusionSprite(const stRetIllusionSprite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetIllusionSprite::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  lvl_ = 0u;
  exp_ = 0u;
  talentnum_ = 0u;
  res_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetIllusionSprite::~stRetIllusionSprite() {
  SharedDtor();
}

void stRetIllusionSprite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetIllusionSprite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetIllusionSprite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSprite_descriptor_;
}

const stRetIllusionSprite& stRetIllusionSprite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetIllusionSprite* stRetIllusionSprite::default_instance_ = NULL;

stRetIllusionSprite* stRetIllusionSprite::New() const {
  return new stRetIllusionSprite;
}

void stRetIllusionSprite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    lvl_ = 0u;
    exp_ = 0u;
    talentnum_ = 0u;
    res_ = 1;
  }
  skills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetIllusionSprite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvl;
        break;
      }

      // optional uint32 lvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_talentNum;
        break;
      }

      // optional uint32 talentNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talentNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talentnum_)));
          set_has_talentnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skills;
        break;
      }

      // repeated .MiscProto.stIllusionSpriteSkillItem skills = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skills:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skills()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_skills;
        if (input->ExpectTag(48)) goto parse_res;
        break;
      }

      // optional .MiscProto.stRetIllusionSprite.eResult res = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetIllusionSprite_eResult_IsValid(value)) {
            set_res(static_cast< ::MiscProto::stRetIllusionSprite_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetIllusionSprite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 lvl = 2;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lvl(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 talentNum = 4;
  if (has_talentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->talentnum(), output);
  }

  // repeated .MiscProto.stIllusionSpriteSkillItem skills = 5;
  for (int i = 0; i < this->skills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->skills(i), output);
  }

  // optional .MiscProto.stRetIllusionSprite.eResult res = 6;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetIllusionSprite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 lvl = 2;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lvl(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 talentNum = 4;
  if (has_talentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->talentnum(), target);
  }

  // repeated .MiscProto.stIllusionSpriteSkillItem skills = 5;
  for (int i = 0; i < this->skills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->skills(i), target);
  }

  // optional .MiscProto.stRetIllusionSprite.eResult res = 6;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetIllusionSprite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 lvl = 2;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 talentNum = 4;
    if (has_talentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talentnum());
    }

    // optional .MiscProto.stRetIllusionSprite.eResult res = 6;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  // repeated .MiscProto.stIllusionSpriteSkillItem skills = 5;
  total_size += 1 * this->skills_size();
  for (int i = 0; i < this->skills_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skills(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetIllusionSprite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetIllusionSprite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetIllusionSprite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetIllusionSprite::MergeFrom(const stRetIllusionSprite& from) {
  GOOGLE_CHECK_NE(&from, this);
  skills_.MergeFrom(from.skills_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_talentnum()) {
      set_talentnum(from.talentnum());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetIllusionSprite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetIllusionSprite::CopyFrom(const stRetIllusionSprite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetIllusionSprite::IsInitialized() const {

  return true;
}

void stRetIllusionSprite::Swap(stRetIllusionSprite* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lvl_, other->lvl_);
    std::swap(exp_, other->exp_);
    std::swap(talentnum_, other->talentnum_);
    skills_.Swap(&other->skills_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetIllusionSprite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetIllusionSprite_descriptor_;
  metadata.reflection = stRetIllusionSprite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int illusionSpriteEatItem::kIdFieldNumber;
const int illusionSpriteEatItem::kNumFieldNumber;
#endif  // !_MSC_VER

illusionSpriteEatItem::illusionSpriteEatItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void illusionSpriteEatItem::InitAsDefaultInstance() {
}

illusionSpriteEatItem::illusionSpriteEatItem(const illusionSpriteEatItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void illusionSpriteEatItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

illusionSpriteEatItem::~illusionSpriteEatItem() {
  SharedDtor();
}

void illusionSpriteEatItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void illusionSpriteEatItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* illusionSpriteEatItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return illusionSpriteEatItem_descriptor_;
}

const illusionSpriteEatItem& illusionSpriteEatItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

illusionSpriteEatItem* illusionSpriteEatItem::default_instance_ = NULL;

illusionSpriteEatItem* illusionSpriteEatItem::New() const {
  return new illusionSpriteEatItem;
}

void illusionSpriteEatItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool illusionSpriteEatItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void illusionSpriteEatItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* illusionSpriteEatItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int illusionSpriteEatItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void illusionSpriteEatItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const illusionSpriteEatItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const illusionSpriteEatItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void illusionSpriteEatItem::MergeFrom(const illusionSpriteEatItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void illusionSpriteEatItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void illusionSpriteEatItem::CopyFrom(const illusionSpriteEatItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool illusionSpriteEatItem::IsInitialized() const {

  return true;
}

void illusionSpriteEatItem::Swap(illusionSpriteEatItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata illusionSpriteEatItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = illusionSpriteEatItem_descriptor_;
  metadata.reflection = illusionSpriteEatItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteEat_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIllusionSpriteEat_ProtoModID_descriptor_;
}
bool stReqIllusionSpriteEat_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqIllusionSpriteEat_ProtoModID stReqIllusionSpriteEat::ModID;
const stReqIllusionSpriteEat_ProtoModID stReqIllusionSpriteEat::ProtoModID_MIN;
const stReqIllusionSpriteEat_ProtoModID stReqIllusionSpriteEat::ProtoModID_MAX;
const int stReqIllusionSpriteEat::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteEat_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIllusionSpriteEat_ProtoFunID_descriptor_;
}
bool stReqIllusionSpriteEat_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 176:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqIllusionSpriteEat_ProtoFunID stReqIllusionSpriteEat::FunID;
const stReqIllusionSpriteEat_ProtoFunID stReqIllusionSpriteEat::ProtoFunID_MIN;
const stReqIllusionSpriteEat_ProtoFunID stReqIllusionSpriteEat::ProtoFunID_MAX;
const int stReqIllusionSpriteEat::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqIllusionSpriteEat::kIdFieldNumber;
const int stReqIllusionSpriteEat::kEatItemFieldNumber;
#endif  // !_MSC_VER

stReqIllusionSpriteEat::stReqIllusionSpriteEat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqIllusionSpriteEat::InitAsDefaultInstance() {
}

stReqIllusionSpriteEat::stReqIllusionSpriteEat(const stReqIllusionSpriteEat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqIllusionSpriteEat::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqIllusionSpriteEat::~stReqIllusionSpriteEat() {
  SharedDtor();
}

void stReqIllusionSpriteEat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqIllusionSpriteEat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqIllusionSpriteEat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIllusionSpriteEat_descriptor_;
}

const stReqIllusionSpriteEat& stReqIllusionSpriteEat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqIllusionSpriteEat* stReqIllusionSpriteEat::default_instance_ = NULL;

stReqIllusionSpriteEat* stReqIllusionSpriteEat::New() const {
  return new stReqIllusionSpriteEat;
}

void stReqIllusionSpriteEat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  eatitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqIllusionSpriteEat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eatItem;
        break;
      }

      // repeated .MiscProto.illusionSpriteEatItem eatItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eatItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_eatitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_eatItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqIllusionSpriteEat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .MiscProto.illusionSpriteEatItem eatItem = 2;
  for (int i = 0; i < this->eatitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->eatitem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqIllusionSpriteEat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .MiscProto.illusionSpriteEatItem eatItem = 2;
  for (int i = 0; i < this->eatitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->eatitem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqIllusionSpriteEat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  // repeated .MiscProto.illusionSpriteEatItem eatItem = 2;
  total_size += 1 * this->eatitem_size();
  for (int i = 0; i < this->eatitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->eatitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqIllusionSpriteEat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqIllusionSpriteEat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqIllusionSpriteEat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqIllusionSpriteEat::MergeFrom(const stReqIllusionSpriteEat& from) {
  GOOGLE_CHECK_NE(&from, this);
  eatitem_.MergeFrom(from.eatitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqIllusionSpriteEat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqIllusionSpriteEat::CopyFrom(const stReqIllusionSpriteEat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqIllusionSpriteEat::IsInitialized() const {

  return true;
}

void stReqIllusionSpriteEat::Swap(stReqIllusionSpriteEat* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    eatitem_.Swap(&other->eatitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqIllusionSpriteEat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqIllusionSpriteEat_descriptor_;
  metadata.reflection = stReqIllusionSpriteEat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteEat_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSpriteEat_eResult_descriptor_;
}
bool stRetIllusionSpriteEat_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetIllusionSpriteEat_eResult stRetIllusionSpriteEat::eSuccess;
const stRetIllusionSpriteEat_eResult stRetIllusionSpriteEat::eNo_Such_Id;
const stRetIllusionSpriteEat_eResult stRetIllusionSpriteEat::eInvalid_item;
const stRetIllusionSpriteEat_eResult stRetIllusionSpriteEat::eMax_Lvl_Limit;
const stRetIllusionSpriteEat_eResult stRetIllusionSpriteEat::eItem_Not_Enough;
const stRetIllusionSpriteEat_eResult stRetIllusionSpriteEat::eResult_MIN;
const stRetIllusionSpriteEat_eResult stRetIllusionSpriteEat::eResult_MAX;
const int stRetIllusionSpriteEat::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteEat_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSpriteEat_ProtoModID_descriptor_;
}
bool stRetIllusionSpriteEat_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetIllusionSpriteEat_ProtoModID stRetIllusionSpriteEat::ModID;
const stRetIllusionSpriteEat_ProtoModID stRetIllusionSpriteEat::ProtoModID_MIN;
const stRetIllusionSpriteEat_ProtoModID stRetIllusionSpriteEat::ProtoModID_MAX;
const int stRetIllusionSpriteEat::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteEat_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSpriteEat_ProtoFunID_descriptor_;
}
bool stRetIllusionSpriteEat_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 177:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetIllusionSpriteEat_ProtoFunID stRetIllusionSpriteEat::FunID;
const stRetIllusionSpriteEat_ProtoFunID stRetIllusionSpriteEat::ProtoFunID_MIN;
const stRetIllusionSpriteEat_ProtoFunID stRetIllusionSpriteEat::ProtoFunID_MAX;
const int stRetIllusionSpriteEat::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetIllusionSpriteEat::kIdFieldNumber;
const int stRetIllusionSpriteEat::kLvlFieldNumber;
const int stRetIllusionSpriteEat::kExpFieldNumber;
const int stRetIllusionSpriteEat::kTalentNumFieldNumber;
const int stRetIllusionSpriteEat::kResFieldNumber;
#endif  // !_MSC_VER

stRetIllusionSpriteEat::stRetIllusionSpriteEat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetIllusionSpriteEat::InitAsDefaultInstance() {
}

stRetIllusionSpriteEat::stRetIllusionSpriteEat(const stRetIllusionSpriteEat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetIllusionSpriteEat::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  lvl_ = 0u;
  exp_ = 0u;
  talentnum_ = 0u;
  res_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetIllusionSpriteEat::~stRetIllusionSpriteEat() {
  SharedDtor();
}

void stRetIllusionSpriteEat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetIllusionSpriteEat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetIllusionSpriteEat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSpriteEat_descriptor_;
}

const stRetIllusionSpriteEat& stRetIllusionSpriteEat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetIllusionSpriteEat* stRetIllusionSpriteEat::default_instance_ = NULL;

stRetIllusionSpriteEat* stRetIllusionSpriteEat::New() const {
  return new stRetIllusionSpriteEat;
}

void stRetIllusionSpriteEat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    lvl_ = 0u;
    exp_ = 0u;
    talentnum_ = 0u;
    res_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetIllusionSpriteEat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvl;
        break;
      }

      // optional uint32 lvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_talentNum;
        break;
      }

      // optional uint32 talentNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talentNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talentnum_)));
          set_has_talentnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_res;
        break;
      }

      // optional .MiscProto.stRetIllusionSpriteEat.eResult res = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetIllusionSpriteEat_eResult_IsValid(value)) {
            set_res(static_cast< ::MiscProto::stRetIllusionSpriteEat_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetIllusionSpriteEat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 lvl = 2;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lvl(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 talentNum = 4;
  if (has_talentnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->talentnum(), output);
  }

  // optional .MiscProto.stRetIllusionSpriteEat.eResult res = 5;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetIllusionSpriteEat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 lvl = 2;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lvl(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 talentNum = 4;
  if (has_talentnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->talentnum(), target);
  }

  // optional .MiscProto.stRetIllusionSpriteEat.eResult res = 5;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetIllusionSpriteEat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 lvl = 2;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 talentNum = 4;
    if (has_talentnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talentnum());
    }

    // optional .MiscProto.stRetIllusionSpriteEat.eResult res = 5;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetIllusionSpriteEat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetIllusionSpriteEat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetIllusionSpriteEat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetIllusionSpriteEat::MergeFrom(const stRetIllusionSpriteEat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_talentnum()) {
      set_talentnum(from.talentnum());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetIllusionSpriteEat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetIllusionSpriteEat::CopyFrom(const stRetIllusionSpriteEat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetIllusionSpriteEat::IsInitialized() const {

  return true;
}

void stRetIllusionSpriteEat::Swap(stRetIllusionSpriteEat* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lvl_, other->lvl_);
    std::swap(exp_, other->exp_);
    std::swap(talentnum_, other->talentnum_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetIllusionSpriteEat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetIllusionSpriteEat_descriptor_;
  metadata.reflection = stRetIllusionSpriteEat_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteSkillUp_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIllusionSpriteSkillUp_ProtoModID_descriptor_;
}
bool stReqIllusionSpriteSkillUp_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqIllusionSpriteSkillUp_ProtoModID stReqIllusionSpriteSkillUp::ModID;
const stReqIllusionSpriteSkillUp_ProtoModID stReqIllusionSpriteSkillUp::ProtoModID_MIN;
const stReqIllusionSpriteSkillUp_ProtoModID stReqIllusionSpriteSkillUp::ProtoModID_MAX;
const int stReqIllusionSpriteSkillUp::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqIllusionSpriteSkillUp_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIllusionSpriteSkillUp_ProtoFunID_descriptor_;
}
bool stReqIllusionSpriteSkillUp_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 178:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqIllusionSpriteSkillUp_ProtoFunID stReqIllusionSpriteSkillUp::FunID;
const stReqIllusionSpriteSkillUp_ProtoFunID stReqIllusionSpriteSkillUp::ProtoFunID_MIN;
const stReqIllusionSpriteSkillUp_ProtoFunID stReqIllusionSpriteSkillUp::ProtoFunID_MAX;
const int stReqIllusionSpriteSkillUp::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqIllusionSpriteSkillUp::kIdFieldNumber;
const int stReqIllusionSpriteSkillUp::kSkillIdFieldNumber;
#endif  // !_MSC_VER

stReqIllusionSpriteSkillUp::stReqIllusionSpriteSkillUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqIllusionSpriteSkillUp::InitAsDefaultInstance() {
}

stReqIllusionSpriteSkillUp::stReqIllusionSpriteSkillUp(const stReqIllusionSpriteSkillUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqIllusionSpriteSkillUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  skillid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqIllusionSpriteSkillUp::~stReqIllusionSpriteSkillUp() {
  SharedDtor();
}

void stReqIllusionSpriteSkillUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqIllusionSpriteSkillUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqIllusionSpriteSkillUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqIllusionSpriteSkillUp_descriptor_;
}

const stReqIllusionSpriteSkillUp& stReqIllusionSpriteSkillUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqIllusionSpriteSkillUp* stReqIllusionSpriteSkillUp::default_instance_ = NULL;

stReqIllusionSpriteSkillUp* stReqIllusionSpriteSkillUp::New() const {
  return new stReqIllusionSpriteSkillUp;
}

void stReqIllusionSpriteSkillUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    skillid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqIllusionSpriteSkillUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional uint32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqIllusionSpriteSkillUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqIllusionSpriteSkillUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqIllusionSpriteSkillUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqIllusionSpriteSkillUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqIllusionSpriteSkillUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqIllusionSpriteSkillUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqIllusionSpriteSkillUp::MergeFrom(const stReqIllusionSpriteSkillUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqIllusionSpriteSkillUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqIllusionSpriteSkillUp::CopyFrom(const stReqIllusionSpriteSkillUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqIllusionSpriteSkillUp::IsInitialized() const {

  return true;
}

void stReqIllusionSpriteSkillUp::Swap(stReqIllusionSpriteSkillUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqIllusionSpriteSkillUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqIllusionSpriteSkillUp_descriptor_;
  metadata.reflection = stReqIllusionSpriteSkillUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteSkillUp_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSpriteSkillUp_eResult_descriptor_;
}
bool stRetIllusionSpriteSkillUp_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp::eSuccess;
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp::eNo_Such_Id;
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp::eNo_Such_Skill_Id;
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp::eLess_Of_Talent_Num;
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp::eMax_Lvl_Limit;
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp::eLast_Skill_Lvl_Limit;
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp::eInner_Error;
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp::eResult_MIN;
const stRetIllusionSpriteSkillUp_eResult stRetIllusionSpriteSkillUp::eResult_MAX;
const int stRetIllusionSpriteSkillUp::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteSkillUp_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSpriteSkillUp_ProtoModID_descriptor_;
}
bool stRetIllusionSpriteSkillUp_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetIllusionSpriteSkillUp_ProtoModID stRetIllusionSpriteSkillUp::ModID;
const stRetIllusionSpriteSkillUp_ProtoModID stRetIllusionSpriteSkillUp::ProtoModID_MIN;
const stRetIllusionSpriteSkillUp_ProtoModID stRetIllusionSpriteSkillUp::ProtoModID_MAX;
const int stRetIllusionSpriteSkillUp::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetIllusionSpriteSkillUp_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSpriteSkillUp_ProtoFunID_descriptor_;
}
bool stRetIllusionSpriteSkillUp_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 179:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetIllusionSpriteSkillUp_ProtoFunID stRetIllusionSpriteSkillUp::FunID;
const stRetIllusionSpriteSkillUp_ProtoFunID stRetIllusionSpriteSkillUp::ProtoFunID_MIN;
const stRetIllusionSpriteSkillUp_ProtoFunID stRetIllusionSpriteSkillUp::ProtoFunID_MAX;
const int stRetIllusionSpriteSkillUp::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetIllusionSpriteSkillUp::kIdFieldNumber;
const int stRetIllusionSpriteSkillUp::kSkillIdFieldNumber;
const int stRetIllusionSpriteSkillUp::kSkillLvlFieldNumber;
const int stRetIllusionSpriteSkillUp::kResFieldNumber;
#endif  // !_MSC_VER

stRetIllusionSpriteSkillUp::stRetIllusionSpriteSkillUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetIllusionSpriteSkillUp::InitAsDefaultInstance() {
}

stRetIllusionSpriteSkillUp::stRetIllusionSpriteSkillUp(const stRetIllusionSpriteSkillUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetIllusionSpriteSkillUp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  skillid_ = 0u;
  skilllvl_ = 0u;
  res_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetIllusionSpriteSkillUp::~stRetIllusionSpriteSkillUp() {
  SharedDtor();
}

void stRetIllusionSpriteSkillUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetIllusionSpriteSkillUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetIllusionSpriteSkillUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetIllusionSpriteSkillUp_descriptor_;
}

const stRetIllusionSpriteSkillUp& stRetIllusionSpriteSkillUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetIllusionSpriteSkillUp* stRetIllusionSpriteSkillUp::default_instance_ = NULL;

stRetIllusionSpriteSkillUp* stRetIllusionSpriteSkillUp::New() const {
  return new stRetIllusionSpriteSkillUp;
}

void stRetIllusionSpriteSkillUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    skillid_ = 0u;
    skilllvl_ = 0u;
    res_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetIllusionSpriteSkillUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional uint32 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillLvl;
        break;
      }

      // optional uint32 skillLvl = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllvl_)));
          set_has_skilllvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_res;
        break;
      }

      // optional .MiscProto.stRetIllusionSpriteSkillUp.eResult res = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetIllusionSpriteSkillUp_eResult_IsValid(value)) {
            set_res(static_cast< ::MiscProto::stRetIllusionSpriteSkillUp_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetIllusionSpriteSkillUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skillid(), output);
  }

  // optional uint32 skillLvl = 3;
  if (has_skilllvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->skilllvl(), output);
  }

  // optional .MiscProto.stRetIllusionSpriteSkillUp.eResult res = 4;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetIllusionSpriteSkillUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skillid(), target);
  }

  // optional uint32 skillLvl = 3;
  if (has_skilllvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->skilllvl(), target);
  }

  // optional .MiscProto.stRetIllusionSpriteSkillUp.eResult res = 4;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetIllusionSpriteSkillUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 skillLvl = 3;
    if (has_skilllvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllvl());
    }

    // optional .MiscProto.stRetIllusionSpriteSkillUp.eResult res = 4;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->res());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetIllusionSpriteSkillUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetIllusionSpriteSkillUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetIllusionSpriteSkillUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetIllusionSpriteSkillUp::MergeFrom(const stRetIllusionSpriteSkillUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllvl()) {
      set_skilllvl(from.skilllvl());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetIllusionSpriteSkillUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetIllusionSpriteSkillUp::CopyFrom(const stRetIllusionSpriteSkillUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetIllusionSpriteSkillUp::IsInitialized() const {

  return true;
}

void stRetIllusionSpriteSkillUp::Swap(stRetIllusionSpriteSkillUp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllvl_, other->skilllvl_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetIllusionSpriteSkillUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetIllusionSpriteSkillUp_descriptor_;
  metadata.reflection = stRetIllusionSpriteSkillUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRepOpenDiscoverWindow_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRepOpenDiscoverWindow_ProtoModID_descriptor_;
}
bool stRepOpenDiscoverWindow_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRepOpenDiscoverWindow_ProtoModID stRepOpenDiscoverWindow::ModID;
const stRepOpenDiscoverWindow_ProtoModID stRepOpenDiscoverWindow::ProtoModID_MIN;
const stRepOpenDiscoverWindow_ProtoModID stRepOpenDiscoverWindow::ProtoModID_MAX;
const int stRepOpenDiscoverWindow::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRepOpenDiscoverWindow_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRepOpenDiscoverWindow_ProtoFunID_descriptor_;
}
bool stRepOpenDiscoverWindow_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 180:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRepOpenDiscoverWindow_ProtoFunID stRepOpenDiscoverWindow::FunID;
const stRepOpenDiscoverWindow_ProtoFunID stRepOpenDiscoverWindow::ProtoFunID_MIN;
const stRepOpenDiscoverWindow_ProtoFunID stRepOpenDiscoverWindow::ProtoFunID_MAX;
const int stRepOpenDiscoverWindow::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRepOpenDiscoverWindow::kCharIDFieldNumber;
#endif  // !_MSC_VER

stRepOpenDiscoverWindow::stRepOpenDiscoverWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRepOpenDiscoverWindow::InitAsDefaultInstance() {
}

stRepOpenDiscoverWindow::stRepOpenDiscoverWindow(const stRepOpenDiscoverWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRepOpenDiscoverWindow::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRepOpenDiscoverWindow::~stRepOpenDiscoverWindow() {
  SharedDtor();
}

void stRepOpenDiscoverWindow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRepOpenDiscoverWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRepOpenDiscoverWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRepOpenDiscoverWindow_descriptor_;
}

const stRepOpenDiscoverWindow& stRepOpenDiscoverWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRepOpenDiscoverWindow* stRepOpenDiscoverWindow::default_instance_ = NULL;

stRepOpenDiscoverWindow* stRepOpenDiscoverWindow::New() const {
  return new stRepOpenDiscoverWindow;
}

void stRepOpenDiscoverWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRepOpenDiscoverWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRepOpenDiscoverWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRepOpenDiscoverWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRepOpenDiscoverWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRepOpenDiscoverWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRepOpenDiscoverWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRepOpenDiscoverWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRepOpenDiscoverWindow::MergeFrom(const stRepOpenDiscoverWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRepOpenDiscoverWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRepOpenDiscoverWindow::CopyFrom(const stRepOpenDiscoverWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRepOpenDiscoverWindow::IsInitialized() const {

  return true;
}

void stRepOpenDiscoverWindow::Swap(stRepOpenDiscoverWindow* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRepOpenDiscoverWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRepOpenDiscoverWindow_descriptor_;
  metadata.reflection = stRepOpenDiscoverWindow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOpenDiscoverWindowResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenDiscoverWindowResult_ProtoModID_descriptor_;
}
bool stOpenDiscoverWindowResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenDiscoverWindowResult_ProtoModID stOpenDiscoverWindowResult::ModID;
const stOpenDiscoverWindowResult_ProtoModID stOpenDiscoverWindowResult::ProtoModID_MIN;
const stOpenDiscoverWindowResult_ProtoModID stOpenDiscoverWindowResult::ProtoModID_MAX;
const int stOpenDiscoverWindowResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenDiscoverWindowResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenDiscoverWindowResult_ProtoFunID_descriptor_;
}
bool stOpenDiscoverWindowResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 181:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenDiscoverWindowResult_ProtoFunID stOpenDiscoverWindowResult::FunID;
const stOpenDiscoverWindowResult_ProtoFunID stOpenDiscoverWindowResult::ProtoFunID_MIN;
const stOpenDiscoverWindowResult_ProtoFunID stOpenDiscoverWindowResult::ProtoFunID_MAX;
const int stOpenDiscoverWindowResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOpenDiscoverWindowResult::kMapIDFieldNumber;
const int stOpenDiscoverWindowResult::kPlaceFieldNumber;
const int stOpenDiscoverWindowResult::kTaskIDFieldNumber;
const int stOpenDiscoverWindowResult::kStateFieldNumber;
const int stOpenDiscoverWindowResult::kBattleNumFieldNumber;
const int stOpenDiscoverWindowResult::kIntegralFieldNumber;
const int stOpenDiscoverWindowResult::kRefreshNumFieldNumber;
const int stOpenDiscoverWindowResult::kPlayDiceNumFieldNumber;
const int stOpenDiscoverWindowResult::kCanUseNumFieldNumber;
const int stOpenDiscoverWindowResult::kHasReceivedIdentifyFieldNumber;
#endif  // !_MSC_VER

stOpenDiscoverWindowResult::stOpenDiscoverWindowResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOpenDiscoverWindowResult::InitAsDefaultInstance() {
}

stOpenDiscoverWindowResult::stOpenDiscoverWindowResult(const stOpenDiscoverWindowResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOpenDiscoverWindowResult::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  place_ = 0u;
  taskid_ = 0u;
  state_ = 0u;
  battlenum_ = 0u;
  integral_ = 0u;
  refreshnum_ = 0u;
  playdicenum_ = 0u;
  canusenum_ = 0u;
  hasreceivedidentify_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOpenDiscoverWindowResult::~stOpenDiscoverWindowResult() {
  SharedDtor();
}

void stOpenDiscoverWindowResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOpenDiscoverWindowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOpenDiscoverWindowResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenDiscoverWindowResult_descriptor_;
}

const stOpenDiscoverWindowResult& stOpenDiscoverWindowResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stOpenDiscoverWindowResult* stOpenDiscoverWindowResult::default_instance_ = NULL;

stOpenDiscoverWindowResult* stOpenDiscoverWindowResult::New() const {
  return new stOpenDiscoverWindowResult;
}

void stOpenDiscoverWindowResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    place_ = 0u;
    taskid_ = 0u;
    state_ = 0u;
    battlenum_ = 0u;
    integral_ = 0u;
    refreshnum_ = 0u;
    playdicenum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    canusenum_ = 0u;
    hasreceivedidentify_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOpenDiscoverWindowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_place;
        break;
      }

      // optional uint32 place = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_place:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &place_)));
          set_has_place();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskID;
        break;
      }

      // optional uint32 taskID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state;
        break;
      }

      // optional uint32 state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_battleNum;
        break;
      }

      // optional uint32 battleNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlenum_)));
          set_has_battlenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_refreshNum;
        break;
      }

      // optional uint32 refreshNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refreshNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refreshnum_)));
          set_has_refreshnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_playDiceNum;
        break;
      }

      // optional uint32 playDiceNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playDiceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playdicenum_)));
          set_has_playdicenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_canUseNum;
        break;
      }

      // optional uint32 canUseNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canUseNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &canusenum_)));
          set_has_canusenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hasReceivedIdentify;
        break;
      }

      // optional uint32 hasReceivedIdentify = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasReceivedIdentify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasreceivedidentify_)));
          set_has_hasreceivedidentify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOpenDiscoverWindowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mapID = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }

  // optional uint32 place = 2;
  if (has_place()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->place(), output);
  }

  // optional uint32 taskID = 3;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->taskid(), output);
  }

  // optional uint32 state = 4;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->state(), output);
  }

  // optional uint32 battleNum = 5;
  if (has_battlenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->battlenum(), output);
  }

  // optional uint32 integral = 6;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->integral(), output);
  }

  // optional uint32 refreshNum = 7;
  if (has_refreshnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->refreshnum(), output);
  }

  // optional uint32 playDiceNum = 8;
  if (has_playdicenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->playdicenum(), output);
  }

  // optional uint32 canUseNum = 9;
  if (has_canusenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->canusenum(), output);
  }

  // optional uint32 hasReceivedIdentify = 10;
  if (has_hasreceivedidentify()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->hasreceivedidentify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOpenDiscoverWindowResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mapID = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }

  // optional uint32 place = 2;
  if (has_place()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->place(), target);
  }

  // optional uint32 taskID = 3;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->taskid(), target);
  }

  // optional uint32 state = 4;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->state(), target);
  }

  // optional uint32 battleNum = 5;
  if (has_battlenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->battlenum(), target);
  }

  // optional uint32 integral = 6;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->integral(), target);
  }

  // optional uint32 refreshNum = 7;
  if (has_refreshnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->refreshnum(), target);
  }

  // optional uint32 playDiceNum = 8;
  if (has_playdicenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->playdicenum(), target);
  }

  // optional uint32 canUseNum = 9;
  if (has_canusenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->canusenum(), target);
  }

  // optional uint32 hasReceivedIdentify = 10;
  if (has_hasreceivedidentify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->hasreceivedidentify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOpenDiscoverWindowResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 place = 2;
    if (has_place()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->place());
    }

    // optional uint32 taskID = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 state = 4;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional uint32 battleNum = 5;
    if (has_battlenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlenum());
    }

    // optional uint32 integral = 6;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->integral());
    }

    // optional uint32 refreshNum = 7;
    if (has_refreshnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refreshnum());
    }

    // optional uint32 playDiceNum = 8;
    if (has_playdicenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playdicenum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 canUseNum = 9;
    if (has_canusenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->canusenum());
    }

    // optional uint32 hasReceivedIdentify = 10;
    if (has_hasreceivedidentify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasreceivedidentify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOpenDiscoverWindowResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOpenDiscoverWindowResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOpenDiscoverWindowResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOpenDiscoverWindowResult::MergeFrom(const stOpenDiscoverWindowResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_place()) {
      set_place(from.place());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_battlenum()) {
      set_battlenum(from.battlenum());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_refreshnum()) {
      set_refreshnum(from.refreshnum());
    }
    if (from.has_playdicenum()) {
      set_playdicenum(from.playdicenum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_canusenum()) {
      set_canusenum(from.canusenum());
    }
    if (from.has_hasreceivedidentify()) {
      set_hasreceivedidentify(from.hasreceivedidentify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOpenDiscoverWindowResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOpenDiscoverWindowResult::CopyFrom(const stOpenDiscoverWindowResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOpenDiscoverWindowResult::IsInitialized() const {

  return true;
}

void stOpenDiscoverWindowResult::Swap(stOpenDiscoverWindowResult* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(place_, other->place_);
    std::swap(taskid_, other->taskid_);
    std::swap(state_, other->state_);
    std::swap(battlenum_, other->battlenum_);
    std::swap(integral_, other->integral_);
    std::swap(refreshnum_, other->refreshnum_);
    std::swap(playdicenum_, other->playdicenum_);
    std::swap(canusenum_, other->canusenum_);
    std::swap(hasreceivedidentify_, other->hasreceivedidentify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOpenDiscoverWindowResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOpenDiscoverWindowResult_descriptor_;
  metadata.reflection = stOpenDiscoverWindowResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPlayDice_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPlayDice_ProtoModID_descriptor_;
}
bool stReqPlayDice_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPlayDice_ProtoModID stReqPlayDice::ModID;
const stReqPlayDice_ProtoModID stReqPlayDice::ProtoModID_MIN;
const stReqPlayDice_ProtoModID stReqPlayDice::ProtoModID_MAX;
const int stReqPlayDice::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPlayDice_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPlayDice_ProtoFunID_descriptor_;
}
bool stReqPlayDice_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 182:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPlayDice_ProtoFunID stReqPlayDice::FunID;
const stReqPlayDice_ProtoFunID stReqPlayDice::ProtoFunID_MIN;
const stReqPlayDice_ProtoFunID stReqPlayDice::ProtoFunID_MAX;
const int stReqPlayDice::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPlayDice::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqPlayDice::stReqPlayDice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPlayDice::InitAsDefaultInstance() {
}

stReqPlayDice::stReqPlayDice(const stReqPlayDice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPlayDice::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPlayDice::~stReqPlayDice() {
  SharedDtor();
}

void stReqPlayDice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqPlayDice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPlayDice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPlayDice_descriptor_;
}

const stReqPlayDice& stReqPlayDice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqPlayDice* stReqPlayDice::default_instance_ = NULL;

stReqPlayDice* stReqPlayDice::New() const {
  return new stReqPlayDice;
}

void stReqPlayDice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPlayDice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPlayDice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPlayDice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPlayDice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPlayDice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPlayDice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPlayDice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPlayDice::MergeFrom(const stReqPlayDice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPlayDice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPlayDice::CopyFrom(const stReqPlayDice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPlayDice::IsInitialized() const {

  return true;
}

void stReqPlayDice::Swap(stReqPlayDice* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPlayDice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPlayDice_descriptor_;
  metadata.reflection = stReqPlayDice_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPlayDiceResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayDiceResult_eResult_descriptor_;
}
bool stPlayDiceResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPlayDiceResult_eResult stPlayDiceResult::eSuccess;
const stPlayDiceResult_eResult stPlayDiceResult::eNot_Dice_NUM;
const stPlayDiceResult_eResult stPlayDiceResult::eTask_Not_Finish;
const stPlayDiceResult_eResult stPlayDiceResult::eInner_Error;
const stPlayDiceResult_eResult stPlayDiceResult::eThe_End;
const stPlayDiceResult_eResult stPlayDiceResult::eResult_MIN;
const stPlayDiceResult_eResult stPlayDiceResult::eResult_MAX;
const int stPlayDiceResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPlayDiceResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayDiceResult_ProtoModID_descriptor_;
}
bool stPlayDiceResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPlayDiceResult_ProtoModID stPlayDiceResult::ModID;
const stPlayDiceResult_ProtoModID stPlayDiceResult::ProtoModID_MIN;
const stPlayDiceResult_ProtoModID stPlayDiceResult::ProtoModID_MAX;
const int stPlayDiceResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPlayDiceResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayDiceResult_ProtoFunID_descriptor_;
}
bool stPlayDiceResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 183:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPlayDiceResult_ProtoFunID stPlayDiceResult::FunID;
const stPlayDiceResult_ProtoFunID stPlayDiceResult::ProtoFunID_MIN;
const stPlayDiceResult_ProtoFunID stPlayDiceResult::ProtoFunID_MAX;
const int stPlayDiceResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPlayDiceResult::kResultFieldNumber;
const int stPlayDiceResult::kPointFieldNumber;
const int stPlayDiceResult::kMapIDFieldNumber;
const int stPlayDiceResult::kTaskIDFieldNumber;
const int stPlayDiceResult::kStateFieldNumber;
#endif  // !_MSC_VER

stPlayDiceResult::stPlayDiceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPlayDiceResult::InitAsDefaultInstance() {
}

stPlayDiceResult::stPlayDiceResult(const stPlayDiceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPlayDiceResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  point_ = 0u;
  mapid_ = 0u;
  taskid_ = 0u;
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPlayDiceResult::~stPlayDiceResult() {
  SharedDtor();
}

void stPlayDiceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stPlayDiceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPlayDiceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayDiceResult_descriptor_;
}

const stPlayDiceResult& stPlayDiceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stPlayDiceResult* stPlayDiceResult::default_instance_ = NULL;

stPlayDiceResult* stPlayDiceResult::New() const {
  return new stPlayDiceResult;
}

void stPlayDiceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    point_ = 0u;
    mapid_ = 0u;
    taskid_ = 0u;
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPlayDiceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stPlayDiceResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stPlayDiceResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stPlayDiceResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // optional uint32 point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapID;
        break;
      }

      // optional uint32 mapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_taskID;
        break;
      }

      // optional uint32 taskID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state;
        break;
      }

      // optional uint32 state = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPlayDiceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stPlayDiceResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->point(), output);
  }

  // optional uint32 mapID = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mapid(), output);
  }

  // optional uint32 taskID = 4;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->taskid(), output);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPlayDiceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stPlayDiceResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->point(), target);
  }

  // optional uint32 mapID = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mapid(), target);
  }

  // optional uint32 taskID = 4;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->taskid(), target);
  }

  // optional uint32 state = 5;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPlayDiceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stPlayDiceResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->point());
    }

    // optional uint32 mapID = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional uint32 taskID = 4;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 state = 5;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPlayDiceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPlayDiceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPlayDiceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPlayDiceResult::MergeFrom(const stPlayDiceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPlayDiceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPlayDiceResult::CopyFrom(const stPlayDiceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPlayDiceResult::IsInitialized() const {

  return true;
}

void stPlayDiceResult::Swap(stPlayDiceResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(point_, other->point_);
    std::swap(mapid_, other->mapid_);
    std::swap(taskid_, other->taskid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPlayDiceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPlayDiceResult_descriptor_;
  metadata.reflection = stPlayDiceResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGetOrGiveUpTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetOrGiveUpTask_ProtoModID_descriptor_;
}
bool stReqGetOrGiveUpTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGetOrGiveUpTask_ProtoModID stReqGetOrGiveUpTask::ModID;
const stReqGetOrGiveUpTask_ProtoModID stReqGetOrGiveUpTask::ProtoModID_MIN;
const stReqGetOrGiveUpTask_ProtoModID stReqGetOrGiveUpTask::ProtoModID_MAX;
const int stReqGetOrGiveUpTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGetOrGiveUpTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetOrGiveUpTask_ProtoFunID_descriptor_;
}
bool stReqGetOrGiveUpTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 184:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGetOrGiveUpTask_ProtoFunID stReqGetOrGiveUpTask::FunID;
const stReqGetOrGiveUpTask_ProtoFunID stReqGetOrGiveUpTask::ProtoFunID_MIN;
const stReqGetOrGiveUpTask_ProtoFunID stReqGetOrGiveUpTask::ProtoFunID_MAX;
const int stReqGetOrGiveUpTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGetOrGiveUpTask::kTagFieldNumber;
#endif  // !_MSC_VER

stReqGetOrGiveUpTask::stReqGetOrGiveUpTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGetOrGiveUpTask::InitAsDefaultInstance() {
}

stReqGetOrGiveUpTask::stReqGetOrGiveUpTask(const stReqGetOrGiveUpTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGetOrGiveUpTask::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGetOrGiveUpTask::~stReqGetOrGiveUpTask() {
  SharedDtor();
}

void stReqGetOrGiveUpTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGetOrGiveUpTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGetOrGiveUpTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetOrGiveUpTask_descriptor_;
}

const stReqGetOrGiveUpTask& stReqGetOrGiveUpTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqGetOrGiveUpTask* stReqGetOrGiveUpTask::default_instance_ = NULL;

stReqGetOrGiveUpTask* stReqGetOrGiveUpTask::New() const {
  return new stReqGetOrGiveUpTask;
}

void stReqGetOrGiveUpTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGetOrGiveUpTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGetOrGiveUpTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGetOrGiveUpTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGetOrGiveUpTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGetOrGiveUpTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGetOrGiveUpTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGetOrGiveUpTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGetOrGiveUpTask::MergeFrom(const stReqGetOrGiveUpTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGetOrGiveUpTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGetOrGiveUpTask::CopyFrom(const stReqGetOrGiveUpTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGetOrGiveUpTask::IsInitialized() const {

  return true;
}

void stReqGetOrGiveUpTask::Swap(stReqGetOrGiveUpTask* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGetOrGiveUpTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGetOrGiveUpTask_descriptor_;
  metadata.reflection = stReqGetOrGiveUpTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGetTaskResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetTaskResult_eResult_descriptor_;
}
bool stGetTaskResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetTaskResult_eResult stGetTaskResult::eSuccess;
const stGetTaskResult_eResult stGetTaskResult::eThe_Begin;
const stGetTaskResult_eResult stGetTaskResult::eTask_Not_Finish;
const stGetTaskResult_eResult stGetTaskResult::eInner_Error;
const stGetTaskResult_eResult stGetTaskResult::eResult_MIN;
const stGetTaskResult_eResult stGetTaskResult::eResult_MAX;
const int stGetTaskResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetTaskResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetTaskResult_ProtoModID_descriptor_;
}
bool stGetTaskResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetTaskResult_ProtoModID stGetTaskResult::ModID;
const stGetTaskResult_ProtoModID stGetTaskResult::ProtoModID_MIN;
const stGetTaskResult_ProtoModID stGetTaskResult::ProtoModID_MAX;
const int stGetTaskResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetTaskResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetTaskResult_ProtoFunID_descriptor_;
}
bool stGetTaskResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 185:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetTaskResult_ProtoFunID stGetTaskResult::FunID;
const stGetTaskResult_ProtoFunID stGetTaskResult::ProtoFunID_MIN;
const stGetTaskResult_ProtoFunID stGetTaskResult::ProtoFunID_MAX;
const int stGetTaskResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGetTaskResult::kResultFieldNumber;
const int stGetTaskResult::kTaskTypeFieldNumber;
const int stGetTaskResult::kTaskIDFieldNumber;
#endif  // !_MSC_VER

stGetTaskResult::stGetTaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGetTaskResult::InitAsDefaultInstance() {
}

stGetTaskResult::stGetTaskResult(const stGetTaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGetTaskResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  tasktype_ = 0u;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGetTaskResult::~stGetTaskResult() {
  SharedDtor();
}

void stGetTaskResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGetTaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGetTaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetTaskResult_descriptor_;
}

const stGetTaskResult& stGetTaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGetTaskResult* stGetTaskResult::default_instance_ = NULL;

stGetTaskResult* stGetTaskResult::New() const {
  return new stGetTaskResult;
}

void stGetTaskResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    tasktype_ = 0u;
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGetTaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGetTaskResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stGetTaskResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stGetTaskResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskType;
        break;
      }

      // optional uint32 taskType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskID;
        break;
      }

      // optional uint32 taskID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGetTaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGetTaskResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 taskType = 2;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tasktype(), output);
  }

  // optional uint32 taskID = 3;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGetTaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGetTaskResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 taskType = 2;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tasktype(), target);
  }

  // optional uint32 taskID = 3;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGetTaskResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGetTaskResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 taskType = 2;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // optional uint32 taskID = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGetTaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGetTaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGetTaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGetTaskResult::MergeFrom(const stGetTaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGetTaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGetTaskResult::CopyFrom(const stGetTaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGetTaskResult::IsInitialized() const {

  return true;
}

void stGetTaskResult::Swap(stGetTaskResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGetTaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGetTaskResult_descriptor_;
  metadata.reflection = stGetTaskResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGiveUpTaskResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveUpTaskResult_eResult_descriptor_;
}
bool stGiveUpTaskResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveUpTaskResult_eResult stGiveUpTaskResult::eSuccess;
const stGiveUpTaskResult_eResult stGiveUpTaskResult::eTask_Has_Receive;
const stGiveUpTaskResult_eResult stGiveUpTaskResult::eInner_Error;
const stGiveUpTaskResult_eResult stGiveUpTaskResult::eResult_MIN;
const stGiveUpTaskResult_eResult stGiveUpTaskResult::eResult_MAX;
const int stGiveUpTaskResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveUpTaskResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveUpTaskResult_ProtoModID_descriptor_;
}
bool stGiveUpTaskResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveUpTaskResult_ProtoModID stGiveUpTaskResult::ModID;
const stGiveUpTaskResult_ProtoModID stGiveUpTaskResult::ProtoModID_MIN;
const stGiveUpTaskResult_ProtoModID stGiveUpTaskResult::ProtoModID_MAX;
const int stGiveUpTaskResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveUpTaskResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveUpTaskResult_ProtoFunID_descriptor_;
}
bool stGiveUpTaskResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 186:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveUpTaskResult_ProtoFunID stGiveUpTaskResult::FunID;
const stGiveUpTaskResult_ProtoFunID stGiveUpTaskResult::ProtoFunID_MIN;
const stGiveUpTaskResult_ProtoFunID stGiveUpTaskResult::ProtoFunID_MAX;
const int stGiveUpTaskResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGiveUpTaskResult::kResultFieldNumber;
#endif  // !_MSC_VER

stGiveUpTaskResult::stGiveUpTaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiveUpTaskResult::InitAsDefaultInstance() {
}

stGiveUpTaskResult::stGiveUpTaskResult(const stGiveUpTaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiveUpTaskResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiveUpTaskResult::~stGiveUpTaskResult() {
  SharedDtor();
}

void stGiveUpTaskResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiveUpTaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiveUpTaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveUpTaskResult_descriptor_;
}

const stGiveUpTaskResult& stGiveUpTaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGiveUpTaskResult* stGiveUpTaskResult::default_instance_ = NULL;

stGiveUpTaskResult* stGiveUpTaskResult::New() const {
  return new stGiveUpTaskResult;
}

void stGiveUpTaskResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiveUpTaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGiveUpTaskResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stGiveUpTaskResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stGiveUpTaskResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiveUpTaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGiveUpTaskResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiveUpTaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGiveUpTaskResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiveUpTaskResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGiveUpTaskResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiveUpTaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiveUpTaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiveUpTaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiveUpTaskResult::MergeFrom(const stGiveUpTaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiveUpTaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiveUpTaskResult::CopyFrom(const stGiveUpTaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiveUpTaskResult::IsInitialized() const {

  return true;
}

void stGiveUpTaskResult::Swap(stGiveUpTaskResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiveUpTaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiveUpTaskResult_descriptor_;
  metadata.reflection = stGiveUpTaskResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshNum_ProtoModID_descriptor_;
}
bool stReqRefreshNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshNum_ProtoModID stReqRefreshNum::ModID;
const stReqRefreshNum_ProtoModID stReqRefreshNum::ProtoModID_MIN;
const stReqRefreshNum_ProtoModID stReqRefreshNum::ProtoModID_MAX;
const int stReqRefreshNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshNum_ProtoFunID_descriptor_;
}
bool stReqRefreshNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 187:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshNum_ProtoFunID stReqRefreshNum::FunID;
const stReqRefreshNum_ProtoFunID stReqRefreshNum::ProtoFunID_MIN;
const stReqRefreshNum_ProtoFunID stReqRefreshNum::ProtoFunID_MAX;
const int stReqRefreshNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRefreshNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqRefreshNum::stReqRefreshNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRefreshNum::InitAsDefaultInstance() {
}

stReqRefreshNum::stReqRefreshNum(const stReqRefreshNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRefreshNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRefreshNum::~stReqRefreshNum() {
  SharedDtor();
}

void stReqRefreshNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRefreshNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRefreshNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshNum_descriptor_;
}

const stReqRefreshNum& stReqRefreshNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqRefreshNum* stReqRefreshNum::default_instance_ = NULL;

stReqRefreshNum* stReqRefreshNum::New() const {
  return new stReqRefreshNum;
}

void stReqRefreshNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRefreshNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRefreshNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRefreshNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRefreshNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRefreshNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRefreshNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRefreshNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRefreshNum::MergeFrom(const stReqRefreshNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRefreshNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRefreshNum::CopyFrom(const stReqRefreshNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRefreshNum::IsInitialized() const {

  return true;
}

void stReqRefreshNum::Swap(stReqRefreshNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRefreshNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRefreshNum_descriptor_;
  metadata.reflection = stReqRefreshNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshNumResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshNumResult_eResult_descriptor_;
}
bool stRefreshNumResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshNumResult_eResult stRefreshNumResult::eSuccess;
const stRefreshNumResult_eResult stRefreshNumResult::eInner_Error;
const stRefreshNumResult_eResult stRefreshNumResult::eNum_Useless_Over;
const stRefreshNumResult_eResult stRefreshNumResult::eDIAMOND_NOT_ENOUGH;
const stRefreshNumResult_eResult stRefreshNumResult::eResult_MIN;
const stRefreshNumResult_eResult stRefreshNumResult::eResult_MAX;
const int stRefreshNumResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshNumResult_ProtoModID_descriptor_;
}
bool stRefreshNumResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshNumResult_ProtoModID stRefreshNumResult::ModID;
const stRefreshNumResult_ProtoModID stRefreshNumResult::ProtoModID_MIN;
const stRefreshNumResult_ProtoModID stRefreshNumResult::ProtoModID_MAX;
const int stRefreshNumResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshNumResult_ProtoFunID_descriptor_;
}
bool stRefreshNumResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 188:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshNumResult_ProtoFunID stRefreshNumResult::FunID;
const stRefreshNumResult_ProtoFunID stRefreshNumResult::ProtoFunID_MIN;
const stRefreshNumResult_ProtoFunID stRefreshNumResult::ProtoFunID_MAX;
const int stRefreshNumResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshNumResult::kResultFieldNumber;
const int stRefreshNumResult::kCountFieldNumber;
#endif  // !_MSC_VER

stRefreshNumResult::stRefreshNumResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshNumResult::InitAsDefaultInstance() {
}

stRefreshNumResult::stRefreshNumResult(const stRefreshNumResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshNumResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshNumResult::~stRefreshNumResult() {
  SharedDtor();
}

void stRefreshNumResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefreshNumResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshNumResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshNumResult_descriptor_;
}

const stRefreshNumResult& stRefreshNumResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRefreshNumResult* stRefreshNumResult::default_instance_ = NULL;

stRefreshNumResult* stRefreshNumResult::New() const {
  return new stRefreshNumResult;
}

void stRefreshNumResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshNumResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRefreshNumResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRefreshNumResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRefreshNumResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshNumResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRefreshNumResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshNumResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRefreshNumResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshNumResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRefreshNumResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshNumResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshNumResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshNumResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshNumResult::MergeFrom(const stRefreshNumResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshNumResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshNumResult::CopyFrom(const stRefreshNumResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshNumResult::IsInitialized() const {

  return true;
}

void stRefreshNumResult::Swap(stRefreshNumResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshNumResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshNumResult_descriptor_;
  metadata.reflection = stRefreshNumResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGetIntegralReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetIntegralReward_ProtoModID_descriptor_;
}
bool stReqGetIntegralReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGetIntegralReward_ProtoModID stReqGetIntegralReward::ModID;
const stReqGetIntegralReward_ProtoModID stReqGetIntegralReward::ProtoModID_MIN;
const stReqGetIntegralReward_ProtoModID stReqGetIntegralReward::ProtoModID_MAX;
const int stReqGetIntegralReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGetIntegralReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetIntegralReward_ProtoFunID_descriptor_;
}
bool stReqGetIntegralReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 189:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGetIntegralReward_ProtoFunID stReqGetIntegralReward::FunID;
const stReqGetIntegralReward_ProtoFunID stReqGetIntegralReward::ProtoFunID_MIN;
const stReqGetIntegralReward_ProtoFunID stReqGetIntegralReward::ProtoFunID_MAX;
const int stReqGetIntegralReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGetIntegralReward::kRewardIDFieldNumber;
#endif  // !_MSC_VER

stReqGetIntegralReward::stReqGetIntegralReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGetIntegralReward::InitAsDefaultInstance() {
}

stReqGetIntegralReward::stReqGetIntegralReward(const stReqGetIntegralReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGetIntegralReward::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGetIntegralReward::~stReqGetIntegralReward() {
  SharedDtor();
}

void stReqGetIntegralReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGetIntegralReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGetIntegralReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetIntegralReward_descriptor_;
}

const stReqGetIntegralReward& stReqGetIntegralReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqGetIntegralReward* stReqGetIntegralReward::default_instance_ = NULL;

stReqGetIntegralReward* stReqGetIntegralReward::New() const {
  return new stReqGetIntegralReward;
}

void stReqGetIntegralReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGetIntegralReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rewardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGetIntegralReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rewardID = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGetIntegralReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rewardID = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGetIntegralReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rewardID = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGetIntegralReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGetIntegralReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGetIntegralReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGetIntegralReward::MergeFrom(const stReqGetIntegralReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGetIntegralReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGetIntegralReward::CopyFrom(const stReqGetIntegralReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGetIntegralReward::IsInitialized() const {

  return true;
}

void stReqGetIntegralReward::Swap(stReqGetIntegralReward* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGetIntegralReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGetIntegralReward_descriptor_;
  metadata.reflection = stReqGetIntegralReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGetIntegralRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetIntegralRewardResult_eResult_descriptor_;
}
bool stGetIntegralRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetIntegralRewardResult_eResult stGetIntegralRewardResult::eSuccess;
const stGetIntegralRewardResult_eResult stGetIntegralRewardResult::eInner_Error;
const stGetIntegralRewardResult_eResult stGetIntegralRewardResult::eNum_Useless_Over;
const stGetIntegralRewardResult_eResult stGetIntegralRewardResult::eHas_Received;
const stGetIntegralRewardResult_eResult stGetIntegralRewardResult::eBAG_SLOT_NOT_ENOUGH;
const stGetIntegralRewardResult_eResult stGetIntegralRewardResult::eResult_MIN;
const stGetIntegralRewardResult_eResult stGetIntegralRewardResult::eResult_MAX;
const int stGetIntegralRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetIntegralRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetIntegralRewardResult_ProtoModID_descriptor_;
}
bool stGetIntegralRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetIntegralRewardResult_ProtoModID stGetIntegralRewardResult::ModID;
const stGetIntegralRewardResult_ProtoModID stGetIntegralRewardResult::ProtoModID_MIN;
const stGetIntegralRewardResult_ProtoModID stGetIntegralRewardResult::ProtoModID_MAX;
const int stGetIntegralRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetIntegralRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetIntegralRewardResult_ProtoFunID_descriptor_;
}
bool stGetIntegralRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 190:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetIntegralRewardResult_ProtoFunID stGetIntegralRewardResult::FunID;
const stGetIntegralRewardResult_ProtoFunID stGetIntegralRewardResult::ProtoFunID_MIN;
const stGetIntegralRewardResult_ProtoFunID stGetIntegralRewardResult::ProtoFunID_MAX;
const int stGetIntegralRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGetIntegralRewardResult::kResultFieldNumber;
const int stGetIntegralRewardResult::kValueFieldNumber;
#endif  // !_MSC_VER

stGetIntegralRewardResult::stGetIntegralRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGetIntegralRewardResult::InitAsDefaultInstance() {
}

stGetIntegralRewardResult::stGetIntegralRewardResult(const stGetIntegralRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGetIntegralRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGetIntegralRewardResult::~stGetIntegralRewardResult() {
  SharedDtor();
}

void stGetIntegralRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGetIntegralRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGetIntegralRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetIntegralRewardResult_descriptor_;
}

const stGetIntegralRewardResult& stGetIntegralRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGetIntegralRewardResult* stGetIntegralRewardResult::default_instance_ = NULL;

stGetIntegralRewardResult* stGetIntegralRewardResult::New() const {
  return new stGetIntegralRewardResult;
}

void stGetIntegralRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGetIntegralRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGetIntegralRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stGetIntegralRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stGetIntegralRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGetIntegralRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGetIntegralRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGetIntegralRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGetIntegralRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGetIntegralRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGetIntegralRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGetIntegralRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGetIntegralRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGetIntegralRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGetIntegralRewardResult::MergeFrom(const stGetIntegralRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGetIntegralRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGetIntegralRewardResult::CopyFrom(const stGetIntegralRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGetIntegralRewardResult::IsInitialized() const {

  return true;
}

void stGetIntegralRewardResult::Swap(stGetIntegralRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGetIntegralRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGetIntegralRewardResult_descriptor_;
  metadata.reflection = stGetIntegralRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGiveReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGiveReward_ProtoModID_descriptor_;
}
bool stReqGiveReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGiveReward_ProtoModID stReqGiveReward::ModID;
const stReqGiveReward_ProtoModID stReqGiveReward::ProtoModID_MIN;
const stReqGiveReward_ProtoModID stReqGiveReward::ProtoModID_MAX;
const int stReqGiveReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGiveReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGiveReward_ProtoFunID_descriptor_;
}
bool stReqGiveReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 191:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGiveReward_ProtoFunID stReqGiveReward::FunID;
const stReqGiveReward_ProtoFunID stReqGiveReward::ProtoFunID_MIN;
const stReqGiveReward_ProtoFunID stReqGiveReward::ProtoFunID_MAX;
const int stReqGiveReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGiveReward::kTagFieldNumber;
#endif  // !_MSC_VER

stReqGiveReward::stReqGiveReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGiveReward::InitAsDefaultInstance() {
}

stReqGiveReward::stReqGiveReward(const stReqGiveReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGiveReward::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGiveReward::~stReqGiveReward() {
  SharedDtor();
}

void stReqGiveReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGiveReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGiveReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGiveReward_descriptor_;
}

const stReqGiveReward& stReqGiveReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqGiveReward* stReqGiveReward::default_instance_ = NULL;

stReqGiveReward* stReqGiveReward::New() const {
  return new stReqGiveReward;
}

void stReqGiveReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGiveReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGiveReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGiveReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGiveReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGiveReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGiveReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGiveReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGiveReward::MergeFrom(const stReqGiveReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGiveReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGiveReward::CopyFrom(const stReqGiveReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGiveReward::IsInitialized() const {

  return true;
}

void stReqGiveReward::Swap(stReqGiveReward* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGiveReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGiveReward_descriptor_;
  metadata.reflection = stReqGiveReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGiveRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveRewardResult_eResult_descriptor_;
}
bool stGiveRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveRewardResult_eResult stGiveRewardResult::eSuccess;
const stGiveRewardResult_eResult stGiveRewardResult::eInner_Error;
const stGiveRewardResult_eResult stGiveRewardResult::eTask_Has_Receive;
const stGiveRewardResult_eResult stGiveRewardResult::eBAG_SLOT_NOT_ENOUGH;
const stGiveRewardResult_eResult stGiveRewardResult::eHas_Received;
const stGiveRewardResult_eResult stGiveRewardResult::eResult_MIN;
const stGiveRewardResult_eResult stGiveRewardResult::eResult_MAX;
const int stGiveRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveRewardResult_ProtoModID_descriptor_;
}
bool stGiveRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveRewardResult_ProtoModID stGiveRewardResult::ModID;
const stGiveRewardResult_ProtoModID stGiveRewardResult::ProtoModID_MIN;
const stGiveRewardResult_ProtoModID stGiveRewardResult::ProtoModID_MAX;
const int stGiveRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveRewardResult_ProtoFunID_descriptor_;
}
bool stGiveRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 192:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveRewardResult_ProtoFunID stGiveRewardResult::FunID;
const stGiveRewardResult_ProtoFunID stGiveRewardResult::ProtoFunID_MIN;
const stGiveRewardResult_ProtoFunID stGiveRewardResult::ProtoFunID_MAX;
const int stGiveRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGiveRewardResult::kResultFieldNumber;
const int stGiveRewardResult::kIntegralFieldNumber;
#endif  // !_MSC_VER

stGiveRewardResult::stGiveRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiveRewardResult::InitAsDefaultInstance() {
}

stGiveRewardResult::stGiveRewardResult(const stGiveRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiveRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  integral_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiveRewardResult::~stGiveRewardResult() {
  SharedDtor();
}

void stGiveRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiveRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiveRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveRewardResult_descriptor_;
}

const stGiveRewardResult& stGiveRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stGiveRewardResult* stGiveRewardResult::default_instance_ = NULL;

stGiveRewardResult* stGiveRewardResult::New() const {
  return new stGiveRewardResult;
}

void stGiveRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    integral_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiveRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stGiveRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stGiveRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stGiveRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_integral;
        break;
      }

      // optional uint32 integral = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiveRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stGiveRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 integral = 2;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->integral(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiveRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stGiveRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 integral = 2;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->integral(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiveRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stGiveRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 integral = 2;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->integral());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiveRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiveRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiveRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiveRewardResult::MergeFrom(const stGiveRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiveRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiveRewardResult::CopyFrom(const stGiveRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiveRewardResult::IsInitialized() const {

  return true;
}

void stGiveRewardResult::Swap(stGiveRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(integral_, other->integral_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiveRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiveRewardResult_descriptor_;
  metadata.reflection = stGiveRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLuckyDraw_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckyDraw_ProtoModID_descriptor_;
}
bool stReqLuckyDraw_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLuckyDraw_ProtoModID stReqLuckyDraw::ModID;
const stReqLuckyDraw_ProtoModID stReqLuckyDraw::ProtoModID_MIN;
const stReqLuckyDraw_ProtoModID stReqLuckyDraw::ProtoModID_MAX;
const int stReqLuckyDraw::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLuckyDraw_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckyDraw_ProtoFunID_descriptor_;
}
bool stReqLuckyDraw_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 193:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLuckyDraw_ProtoFunID stReqLuckyDraw::FunID;
const stReqLuckyDraw_ProtoFunID stReqLuckyDraw::ProtoFunID_MIN;
const stReqLuckyDraw_ProtoFunID stReqLuckyDraw::ProtoFunID_MAX;
const int stReqLuckyDraw::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLuckyDraw::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqLuckyDraw::stReqLuckyDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLuckyDraw::InitAsDefaultInstance() {
}

stReqLuckyDraw::stReqLuckyDraw(const stReqLuckyDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLuckyDraw::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLuckyDraw::~stReqLuckyDraw() {
  SharedDtor();
}

void stReqLuckyDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLuckyDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLuckyDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckyDraw_descriptor_;
}

const stReqLuckyDraw& stReqLuckyDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqLuckyDraw* stReqLuckyDraw::default_instance_ = NULL;

stReqLuckyDraw* stReqLuckyDraw::New() const {
  return new stReqLuckyDraw;
}

void stReqLuckyDraw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLuckyDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLuckyDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLuckyDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLuckyDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLuckyDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLuckyDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLuckyDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLuckyDraw::MergeFrom(const stReqLuckyDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLuckyDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLuckyDraw::CopyFrom(const stReqLuckyDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLuckyDraw::IsInitialized() const {

  return true;
}

void stReqLuckyDraw::Swap(stReqLuckyDraw* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLuckyDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLuckyDraw_descriptor_;
  metadata.reflection = stReqLuckyDraw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stLuckyDrawPointRewardInfo::kIdFieldNumber;
const int stLuckyDrawPointRewardInfo::kStatusFieldNumber;
#endif  // !_MSC_VER

stLuckyDrawPointRewardInfo::stLuckyDrawPointRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLuckyDrawPointRewardInfo::InitAsDefaultInstance() {
}

stLuckyDrawPointRewardInfo::stLuckyDrawPointRewardInfo(const stLuckyDrawPointRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLuckyDrawPointRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLuckyDrawPointRewardInfo::~stLuckyDrawPointRewardInfo() {
  SharedDtor();
}

void stLuckyDrawPointRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLuckyDrawPointRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLuckyDrawPointRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckyDrawPointRewardInfo_descriptor_;
}

const stLuckyDrawPointRewardInfo& stLuckyDrawPointRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stLuckyDrawPointRewardInfo* stLuckyDrawPointRewardInfo::default_instance_ = NULL;

stLuckyDrawPointRewardInfo* stLuckyDrawPointRewardInfo::New() const {
  return new stLuckyDrawPointRewardInfo;
}

void stLuckyDrawPointRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLuckyDrawPointRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLuckyDrawPointRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLuckyDrawPointRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLuckyDrawPointRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLuckyDrawPointRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLuckyDrawPointRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLuckyDrawPointRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLuckyDrawPointRewardInfo::MergeFrom(const stLuckyDrawPointRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLuckyDrawPointRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLuckyDrawPointRewardInfo::CopyFrom(const stLuckyDrawPointRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLuckyDrawPointRewardInfo::IsInitialized() const {

  return true;
}

void stLuckyDrawPointRewardInfo::Swap(stLuckyDrawPointRewardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLuckyDrawPointRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLuckyDrawPointRewardInfo_descriptor_;
  metadata.reflection = stLuckyDrawPointRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stLuckyDrawRewardInfo::kIdFieldNumber;
const int stLuckyDrawRewardInfo::kNumFieldNumber;
#endif  // !_MSC_VER

stLuckyDrawRewardInfo::stLuckyDrawRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLuckyDrawRewardInfo::InitAsDefaultInstance() {
}

stLuckyDrawRewardInfo::stLuckyDrawRewardInfo(const stLuckyDrawRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLuckyDrawRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLuckyDrawRewardInfo::~stLuckyDrawRewardInfo() {
  SharedDtor();
}

void stLuckyDrawRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLuckyDrawRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLuckyDrawRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckyDrawRewardInfo_descriptor_;
}

const stLuckyDrawRewardInfo& stLuckyDrawRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stLuckyDrawRewardInfo* stLuckyDrawRewardInfo::default_instance_ = NULL;

stLuckyDrawRewardInfo* stLuckyDrawRewardInfo::New() const {
  return new stLuckyDrawRewardInfo;
}

void stLuckyDrawRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLuckyDrawRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLuckyDrawRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLuckyDrawRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLuckyDrawRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLuckyDrawRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLuckyDrawRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLuckyDrawRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLuckyDrawRewardInfo::MergeFrom(const stLuckyDrawRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLuckyDrawRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLuckyDrawRewardInfo::CopyFrom(const stLuckyDrawRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLuckyDrawRewardInfo::IsInitialized() const {

  return true;
}

void stLuckyDrawRewardInfo::Swap(stLuckyDrawRewardInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLuckyDrawRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLuckyDrawRewardInfo_descriptor_;
  metadata.reflection = stLuckyDrawRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stLuckyDrawUserInfo::kNameFieldNumber;
const int stLuckyDrawUserInfo::kIdFieldNumber;
const int stLuckyDrawUserInfo::kNumFieldNumber;
#endif  // !_MSC_VER

stLuckyDrawUserInfo::stLuckyDrawUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLuckyDrawUserInfo::InitAsDefaultInstance() {
}

stLuckyDrawUserInfo::stLuckyDrawUserInfo(const stLuckyDrawUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLuckyDrawUserInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLuckyDrawUserInfo::~stLuckyDrawUserInfo() {
  SharedDtor();
}

void stLuckyDrawUserInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stLuckyDrawUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLuckyDrawUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLuckyDrawUserInfo_descriptor_;
}

const stLuckyDrawUserInfo& stLuckyDrawUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stLuckyDrawUserInfo* stLuckyDrawUserInfo::default_instance_ = NULL;

stLuckyDrawUserInfo* stLuckyDrawUserInfo::New() const {
  return new stLuckyDrawUserInfo;
}

void stLuckyDrawUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLuckyDrawUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLuckyDrawUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLuckyDrawUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLuckyDrawUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLuckyDrawUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLuckyDrawUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLuckyDrawUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLuckyDrawUserInfo::MergeFrom(const stLuckyDrawUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLuckyDrawUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLuckyDrawUserInfo::CopyFrom(const stLuckyDrawUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLuckyDrawUserInfo::IsInitialized() const {

  return true;
}

void stLuckyDrawUserInfo::Swap(stLuckyDrawUserInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLuckyDrawUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLuckyDrawUserInfo_descriptor_;
  metadata.reflection = stLuckyDrawUserInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetLuckyDraw_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDraw_ProtoModID_descriptor_;
}
bool stRetLuckyDraw_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLuckyDraw_ProtoModID stRetLuckyDraw::ModID;
const stRetLuckyDraw_ProtoModID stRetLuckyDraw::ProtoModID_MIN;
const stRetLuckyDraw_ProtoModID stRetLuckyDraw::ProtoModID_MAX;
const int stRetLuckyDraw::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLuckyDraw_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDraw_ProtoFunID_descriptor_;
}
bool stRetLuckyDraw_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 194:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLuckyDraw_ProtoFunID stRetLuckyDraw::FunID;
const stRetLuckyDraw_ProtoFunID stRetLuckyDraw::ProtoFunID_MIN;
const stRetLuckyDraw_ProtoFunID stRetLuckyDraw::ProtoFunID_MAX;
const int stRetLuckyDraw::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetLuckyDraw::kActivityidFieldNumber;
const int stRetLuckyDraw::kRewardFieldNumber;
const int stRetLuckyDraw::kDiamondFieldNumber;
const int stRetLuckyDraw::kPlayerFieldNumber;
const int stRetLuckyDraw::kLastFreeTimeFieldNumber;
#endif  // !_MSC_VER

stRetLuckyDraw::stRetLuckyDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetLuckyDraw::InitAsDefaultInstance() {
}

stRetLuckyDraw::stRetLuckyDraw(const stRetLuckyDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetLuckyDraw::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  diamond_ = 0u;
  lastfreetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetLuckyDraw::~stRetLuckyDraw() {
  SharedDtor();
}

void stRetLuckyDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetLuckyDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetLuckyDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDraw_descriptor_;
}

const stRetLuckyDraw& stRetLuckyDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetLuckyDraw* stRetLuckyDraw::default_instance_ = NULL;

stRetLuckyDraw* stRetLuckyDraw::New() const {
  return new stRetLuckyDraw;
}

void stRetLuckyDraw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    diamond_ = 0u;
    lastfreetime_ = 0u;
  }
  reward_.Clear();
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetLuckyDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .MiscProto.stLuckyDrawPointRewardInfo reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectTag(24)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player;
        break;
      }

      // repeated .MiscProto.stLuckyDrawUserInfo player = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player;
        if (input->ExpectTag(40)) goto parse_lastFreeTime;
        break;
      }

      // optional uint32 lastFreeTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastFreeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastfreetime_)));
          set_has_lastfreetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetLuckyDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityid = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // repeated .MiscProto.stLuckyDrawPointRewardInfo reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  // optional uint32 diamond = 3;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->diamond(), output);
  }

  // repeated .MiscProto.stLuckyDrawUserInfo player = 4;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player(i), output);
  }

  // optional uint32 lastFreeTime = 5;
  if (has_lastfreetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastfreetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetLuckyDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityid = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // repeated .MiscProto.stLuckyDrawPointRewardInfo reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  // optional uint32 diamond = 3;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->diamond(), target);
  }

  // repeated .MiscProto.stLuckyDrawUserInfo player = 4;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player(i), target);
  }

  // optional uint32 lastFreeTime = 5;
  if (has_lastfreetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastfreetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetLuckyDraw::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityid = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 diamond = 3;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 lastFreeTime = 5;
    if (has_lastfreetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastfreetime());
    }

  }
  // repeated .MiscProto.stLuckyDrawPointRewardInfo reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .MiscProto.stLuckyDrawUserInfo player = 4;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetLuckyDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetLuckyDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetLuckyDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetLuckyDraw::MergeFrom(const stRetLuckyDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_lastfreetime()) {
      set_lastfreetime(from.lastfreetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetLuckyDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetLuckyDraw::CopyFrom(const stRetLuckyDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetLuckyDraw::IsInitialized() const {

  return true;
}

void stRetLuckyDraw::Swap(stRetLuckyDraw* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    reward_.Swap(&other->reward_);
    std::swap(diamond_, other->diamond_);
    player_.Swap(&other->player_);
    std::swap(lastfreetime_, other->lastfreetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetLuckyDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetLuckyDraw_descriptor_;
  metadata.reflection = stRetLuckyDraw_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLuckyDrawReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckyDrawReward_ProtoModID_descriptor_;
}
bool stReqLuckyDrawReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLuckyDrawReward_ProtoModID stReqLuckyDrawReward::ModID;
const stReqLuckyDrawReward_ProtoModID stReqLuckyDrawReward::ProtoModID_MIN;
const stReqLuckyDrawReward_ProtoModID stReqLuckyDrawReward::ProtoModID_MAX;
const int stReqLuckyDrawReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLuckyDrawReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckyDrawReward_ProtoFunID_descriptor_;
}
bool stReqLuckyDrawReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 195:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLuckyDrawReward_ProtoFunID stReqLuckyDrawReward::FunID;
const stReqLuckyDrawReward_ProtoFunID stReqLuckyDrawReward::ProtoFunID_MIN;
const stReqLuckyDrawReward_ProtoFunID stReqLuckyDrawReward::ProtoFunID_MAX;
const int stReqLuckyDrawReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLuckyDrawReward::kTypeFieldNumber;
const int stReqLuckyDrawReward::kIdFieldNumber;
#endif  // !_MSC_VER

stReqLuckyDrawReward::stReqLuckyDrawReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLuckyDrawReward::InitAsDefaultInstance() {
}

stReqLuckyDrawReward::stReqLuckyDrawReward(const stReqLuckyDrawReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLuckyDrawReward::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLuckyDrawReward::~stReqLuckyDrawReward() {
  SharedDtor();
}

void stReqLuckyDrawReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLuckyDrawReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLuckyDrawReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckyDrawReward_descriptor_;
}

const stReqLuckyDrawReward& stReqLuckyDrawReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqLuckyDrawReward* stReqLuckyDrawReward::default_instance_ = NULL;

stReqLuckyDrawReward* stReqLuckyDrawReward::New() const {
  return new stReqLuckyDrawReward;
}

void stReqLuckyDrawReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLuckyDrawReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLuckyDrawReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLuckyDrawReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLuckyDrawReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLuckyDrawReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLuckyDrawReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLuckyDrawReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLuckyDrawReward::MergeFrom(const stReqLuckyDrawReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLuckyDrawReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLuckyDrawReward::CopyFrom(const stReqLuckyDrawReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLuckyDrawReward::IsInitialized() const {

  return true;
}

void stReqLuckyDrawReward::Swap(stReqLuckyDrawReward* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLuckyDrawReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLuckyDrawReward_descriptor_;
  metadata.reflection = stReqLuckyDrawReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetLuckyDrawReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDrawReward_eResult_descriptor_;
}
bool stRetLuckyDrawReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLuckyDrawReward_eResult stRetLuckyDrawReward::eSuccess;
const stRetLuckyDrawReward_eResult stRetLuckyDrawReward::eBag_Full;
const stRetLuckyDrawReward_eResult stRetLuckyDrawReward::eDiamond_Less;
const stRetLuckyDrawReward_eResult stRetLuckyDrawReward::eActivity_Expire;
const stRetLuckyDrawReward_eResult stRetLuckyDrawReward::eNo_Such_Id;
const stRetLuckyDrawReward_eResult stRetLuckyDrawReward::eResult_MIN;
const stRetLuckyDrawReward_eResult stRetLuckyDrawReward::eResult_MAX;
const int stRetLuckyDrawReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLuckyDrawReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDrawReward_ProtoModID_descriptor_;
}
bool stRetLuckyDrawReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLuckyDrawReward_ProtoModID stRetLuckyDrawReward::ModID;
const stRetLuckyDrawReward_ProtoModID stRetLuckyDrawReward::ProtoModID_MIN;
const stRetLuckyDrawReward_ProtoModID stRetLuckyDrawReward::ProtoModID_MAX;
const int stRetLuckyDrawReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLuckyDrawReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDrawReward_ProtoFunID_descriptor_;
}
bool stRetLuckyDrawReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 196:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLuckyDrawReward_ProtoFunID stRetLuckyDrawReward::FunID;
const stRetLuckyDrawReward_ProtoFunID stRetLuckyDrawReward::ProtoFunID_MIN;
const stRetLuckyDrawReward_ProtoFunID stRetLuckyDrawReward::ProtoFunID_MAX;
const int stRetLuckyDrawReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetLuckyDrawReward::kIdFieldNumber;
const int stRetLuckyDrawReward::kRewardFieldNumber;
const int stRetLuckyDrawReward::kPlayerFieldNumber;
const int stRetLuckyDrawReward::kResultFieldNumber;
const int stRetLuckyDrawReward::kLastFreeTimeFieldNumber;
const int stRetLuckyDrawReward::kDiamondFieldNumber;
#endif  // !_MSC_VER

stRetLuckyDrawReward::stRetLuckyDrawReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetLuckyDrawReward::InitAsDefaultInstance() {
}

stRetLuckyDrawReward::stRetLuckyDrawReward(const stRetLuckyDrawReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetLuckyDrawReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  result_ = 1;
  lastfreetime_ = 0u;
  diamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetLuckyDrawReward::~stRetLuckyDrawReward() {
  SharedDtor();
}

void stRetLuckyDrawReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetLuckyDrawReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetLuckyDrawReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDrawReward_descriptor_;
}

const stRetLuckyDrawReward& stRetLuckyDrawReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetLuckyDrawReward* stRetLuckyDrawReward::default_instance_ = NULL;

stRetLuckyDrawReward* stRetLuckyDrawReward::New() const {
  return new stRetLuckyDrawReward;
}

void stRetLuckyDrawReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    result_ = 1;
    lastfreetime_ = 0u;
    diamond_ = 0u;
  }
  reward_.Clear();
  player_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetLuckyDrawReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        break;
      }

      // repeated .MiscProto.stLuckyDrawRewardInfo reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_reward;
        if (input->ExpectTag(26)) goto parse_player;
        break;
      }

      // repeated .MiscProto.stLuckyDrawUserInfo player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_player;
        if (input->ExpectTag(32)) goto parse_result;
        break;
      }

      // optional .MiscProto.stRetLuckyDrawReward.eResult result = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetLuckyDrawReward_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetLuckyDrawReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastFreeTime;
        break;
      }

      // optional uint32 lastFreeTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastFreeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastfreetime_)));
          set_has_lastfreetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetLuckyDrawReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .MiscProto.stLuckyDrawRewardInfo reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->reward(i), output);
  }

  // repeated .MiscProto.stLuckyDrawUserInfo player = 3;
  for (int i = 0; i < this->player_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->player(i), output);
  }

  // optional .MiscProto.stRetLuckyDrawReward.eResult result = 4;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->result(), output);
  }

  // optional uint32 lastFreeTime = 5;
  if (has_lastfreetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->lastfreetime(), output);
  }

  // optional uint32 diamond = 6;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->diamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetLuckyDrawReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .MiscProto.stLuckyDrawRewardInfo reward = 2;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->reward(i), target);
  }

  // repeated .MiscProto.stLuckyDrawUserInfo player = 3;
  for (int i = 0; i < this->player_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->player(i), target);
  }

  // optional .MiscProto.stRetLuckyDrawReward.eResult result = 4;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->result(), target);
  }

  // optional uint32 lastFreeTime = 5;
  if (has_lastfreetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->lastfreetime(), target);
  }

  // optional uint32 diamond = 6;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->diamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetLuckyDrawReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .MiscProto.stRetLuckyDrawReward.eResult result = 4;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 lastFreeTime = 5;
    if (has_lastfreetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastfreetime());
    }

    // optional uint32 diamond = 6;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

  }
  // repeated .MiscProto.stLuckyDrawRewardInfo reward = 2;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  // repeated .MiscProto.stLuckyDrawUserInfo player = 3;
  total_size += 1 * this->player_size();
  for (int i = 0; i < this->player_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetLuckyDrawReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetLuckyDrawReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetLuckyDrawReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetLuckyDrawReward::MergeFrom(const stRetLuckyDrawReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  player_.MergeFrom(from.player_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_lastfreetime()) {
      set_lastfreetime(from.lastfreetime());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetLuckyDrawReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetLuckyDrawReward::CopyFrom(const stRetLuckyDrawReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetLuckyDrawReward::IsInitialized() const {

  return true;
}

void stRetLuckyDrawReward::Swap(stRetLuckyDrawReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    reward_.Swap(&other->reward_);
    player_.Swap(&other->player_);
    std::swap(result_, other->result_);
    std::swap(lastfreetime_, other->lastfreetime_);
    std::swap(diamond_, other->diamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetLuckyDrawReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetLuckyDrawReward_descriptor_;
  metadata.reflection = stRetLuckyDrawReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLuckyDrawPointReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckyDrawPointReward_ProtoModID_descriptor_;
}
bool stReqLuckyDrawPointReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLuckyDrawPointReward_ProtoModID stReqLuckyDrawPointReward::ModID;
const stReqLuckyDrawPointReward_ProtoModID stReqLuckyDrawPointReward::ProtoModID_MIN;
const stReqLuckyDrawPointReward_ProtoModID stReqLuckyDrawPointReward::ProtoModID_MAX;
const int stReqLuckyDrawPointReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLuckyDrawPointReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckyDrawPointReward_ProtoFunID_descriptor_;
}
bool stReqLuckyDrawPointReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 197:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLuckyDrawPointReward_ProtoFunID stReqLuckyDrawPointReward::FunID;
const stReqLuckyDrawPointReward_ProtoFunID stReqLuckyDrawPointReward::ProtoFunID_MIN;
const stReqLuckyDrawPointReward_ProtoFunID stReqLuckyDrawPointReward::ProtoFunID_MAX;
const int stReqLuckyDrawPointReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLuckyDrawPointReward::kActivityidFieldNumber;
const int stReqLuckyDrawPointReward::kPointidFieldNumber;
#endif  // !_MSC_VER

stReqLuckyDrawPointReward::stReqLuckyDrawPointReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLuckyDrawPointReward::InitAsDefaultInstance() {
}

stReqLuckyDrawPointReward::stReqLuckyDrawPointReward(const stReqLuckyDrawPointReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLuckyDrawPointReward::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  pointid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLuckyDrawPointReward::~stReqLuckyDrawPointReward() {
  SharedDtor();
}

void stReqLuckyDrawPointReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLuckyDrawPointReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLuckyDrawPointReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLuckyDrawPointReward_descriptor_;
}

const stReqLuckyDrawPointReward& stReqLuckyDrawPointReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqLuckyDrawPointReward* stReqLuckyDrawPointReward::default_instance_ = NULL;

stReqLuckyDrawPointReward* stReqLuckyDrawPointReward::New() const {
  return new stReqLuckyDrawPointReward;
}

void stReqLuckyDrawPointReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    pointid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLuckyDrawPointReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pointid;
        break;
      }

      // optional uint32 pointid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointid_)));
          set_has_pointid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLuckyDrawPointReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityid = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional uint32 pointid = 2;
  if (has_pointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pointid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLuckyDrawPointReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityid = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional uint32 pointid = 2;
  if (has_pointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pointid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLuckyDrawPointReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityid = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 pointid = 2;
    if (has_pointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLuckyDrawPointReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLuckyDrawPointReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLuckyDrawPointReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLuckyDrawPointReward::MergeFrom(const stReqLuckyDrawPointReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_pointid()) {
      set_pointid(from.pointid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLuckyDrawPointReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLuckyDrawPointReward::CopyFrom(const stReqLuckyDrawPointReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLuckyDrawPointReward::IsInitialized() const {

  return true;
}

void stReqLuckyDrawPointReward::Swap(stReqLuckyDrawPointReward* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(pointid_, other->pointid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLuckyDrawPointReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLuckyDrawPointReward_descriptor_;
  metadata.reflection = stReqLuckyDrawPointReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetLuckyDrawPointReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDrawPointReward_eResult_descriptor_;
}
bool stRetLuckyDrawPointReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward::eSuccess;
const stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward::eBag_Full;
const stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward::eDiamond_Less;
const stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward::eActivity_Expire;
const stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward::eNo_Such_Id;
const stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward::eAlready_Get;
const stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward::eResult_MIN;
const stRetLuckyDrawPointReward_eResult stRetLuckyDrawPointReward::eResult_MAX;
const int stRetLuckyDrawPointReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLuckyDrawPointReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDrawPointReward_ProtoModID_descriptor_;
}
bool stRetLuckyDrawPointReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLuckyDrawPointReward_ProtoModID stRetLuckyDrawPointReward::ModID;
const stRetLuckyDrawPointReward_ProtoModID stRetLuckyDrawPointReward::ProtoModID_MIN;
const stRetLuckyDrawPointReward_ProtoModID stRetLuckyDrawPointReward::ProtoModID_MAX;
const int stRetLuckyDrawPointReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetLuckyDrawPointReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDrawPointReward_ProtoFunID_descriptor_;
}
bool stRetLuckyDrawPointReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 198:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetLuckyDrawPointReward_ProtoFunID stRetLuckyDrawPointReward::FunID;
const stRetLuckyDrawPointReward_ProtoFunID stRetLuckyDrawPointReward::ProtoFunID_MIN;
const stRetLuckyDrawPointReward_ProtoFunID stRetLuckyDrawPointReward::ProtoFunID_MAX;
const int stRetLuckyDrawPointReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetLuckyDrawPointReward::kActivityidFieldNumber;
const int stRetLuckyDrawPointReward::kPointidFieldNumber;
const int stRetLuckyDrawPointReward::kResultFieldNumber;
#endif  // !_MSC_VER

stRetLuckyDrawPointReward::stRetLuckyDrawPointReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetLuckyDrawPointReward::InitAsDefaultInstance() {
}

stRetLuckyDrawPointReward::stRetLuckyDrawPointReward(const stRetLuckyDrawPointReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetLuckyDrawPointReward::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  pointid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetLuckyDrawPointReward::~stRetLuckyDrawPointReward() {
  SharedDtor();
}

void stRetLuckyDrawPointReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetLuckyDrawPointReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetLuckyDrawPointReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetLuckyDrawPointReward_descriptor_;
}

const stRetLuckyDrawPointReward& stRetLuckyDrawPointReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetLuckyDrawPointReward* stRetLuckyDrawPointReward::default_instance_ = NULL;

stRetLuckyDrawPointReward* stRetLuckyDrawPointReward::New() const {
  return new stRetLuckyDrawPointReward;
}

void stRetLuckyDrawPointReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    pointid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetLuckyDrawPointReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pointid;
        break;
      }

      // optional uint32 pointid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pointid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pointid_)));
          set_has_pointid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .MiscProto.stRetLuckyDrawPointReward.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetLuckyDrawPointReward_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetLuckyDrawPointReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetLuckyDrawPointReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityid = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional uint32 pointid = 2;
  if (has_pointid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pointid(), output);
  }

  // optional .MiscProto.stRetLuckyDrawPointReward.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetLuckyDrawPointReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityid = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional uint32 pointid = 2;
  if (has_pointid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pointid(), target);
  }

  // optional .MiscProto.stRetLuckyDrawPointReward.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetLuckyDrawPointReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityid = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 pointid = 2;
    if (has_pointid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pointid());
    }

    // optional .MiscProto.stRetLuckyDrawPointReward.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetLuckyDrawPointReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetLuckyDrawPointReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetLuckyDrawPointReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetLuckyDrawPointReward::MergeFrom(const stRetLuckyDrawPointReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_pointid()) {
      set_pointid(from.pointid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetLuckyDrawPointReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetLuckyDrawPointReward::CopyFrom(const stRetLuckyDrawPointReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetLuckyDrawPointReward::IsInitialized() const {

  return true;
}

void stRetLuckyDrawPointReward::Swap(stRetLuckyDrawPointReward* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(pointid_, other->pointid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetLuckyDrawPointReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetLuckyDrawPointReward_descriptor_;
  metadata.reflection = stRetLuckyDrawPointReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRedPointRuls_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRedPointRuls_ProtoModID_descriptor_;
}
bool stReqRedPointRuls_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRedPointRuls_ProtoModID stReqRedPointRuls::ModID;
const stReqRedPointRuls_ProtoModID stReqRedPointRuls::ProtoModID_MIN;
const stReqRedPointRuls_ProtoModID stReqRedPointRuls::ProtoModID_MAX;
const int stReqRedPointRuls::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRedPointRuls_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRedPointRuls_ProtoFunID_descriptor_;
}
bool stReqRedPointRuls_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 199:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRedPointRuls_ProtoFunID stReqRedPointRuls::FunID;
const stReqRedPointRuls_ProtoFunID stReqRedPointRuls::ProtoFunID_MIN;
const stReqRedPointRuls_ProtoFunID stReqRedPointRuls::ProtoFunID_MAX;
const int stReqRedPointRuls::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRedPointRuls::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqRedPointRuls::stReqRedPointRuls()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRedPointRuls::InitAsDefaultInstance() {
}

stReqRedPointRuls::stReqRedPointRuls(const stReqRedPointRuls& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRedPointRuls::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRedPointRuls::~stReqRedPointRuls() {
  SharedDtor();
}

void stReqRedPointRuls::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRedPointRuls::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRedPointRuls::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRedPointRuls_descriptor_;
}

const stReqRedPointRuls& stReqRedPointRuls::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqRedPointRuls* stReqRedPointRuls::default_instance_ = NULL;

stReqRedPointRuls* stReqRedPointRuls::New() const {
  return new stReqRedPointRuls;
}

void stReqRedPointRuls::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRedPointRuls::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRedPointRuls::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRedPointRuls::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRedPointRuls::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRedPointRuls::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRedPointRuls* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRedPointRuls*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRedPointRuls::MergeFrom(const stReqRedPointRuls& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRedPointRuls::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRedPointRuls::CopyFrom(const stReqRedPointRuls& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRedPointRuls::IsInitialized() const {

  return true;
}

void stReqRedPointRuls::Swap(stReqRedPointRuls* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRedPointRuls::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRedPointRuls_descriptor_;
  metadata.reflection = stReqRedPointRuls_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRedPointRulsResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRedPointRulsResult_ProtoModID_descriptor_;
}
bool stRedPointRulsResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRedPointRulsResult_ProtoModID stRedPointRulsResult::ModID;
const stRedPointRulsResult_ProtoModID stRedPointRulsResult::ProtoModID_MIN;
const stRedPointRulsResult_ProtoModID stRedPointRulsResult::ProtoModID_MAX;
const int stRedPointRulsResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRedPointRulsResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRedPointRulsResult_ProtoFunID_descriptor_;
}
bool stRedPointRulsResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRedPointRulsResult_ProtoFunID stRedPointRulsResult::FunID;
const stRedPointRulsResult_ProtoFunID stRedPointRulsResult::ProtoFunID_MIN;
const stRedPointRulsResult_ProtoFunID stRedPointRulsResult::ProtoFunID_MAX;
const int stRedPointRulsResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRedPointRulsResult::kTimesFieldNumber;
const int stRedPointRulsResult::kCanGetRewardFieldNumber;
const int stRedPointRulsResult::kCanOpenIntegalBoxFieldNumber;
#endif  // !_MSC_VER

stRedPointRulsResult::stRedPointRulsResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRedPointRulsResult::InitAsDefaultInstance() {
}

stRedPointRulsResult::stRedPointRulsResult(const stRedPointRulsResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRedPointRulsResult::SharedCtor() {
  _cached_size_ = 0;
  times_ = false;
  cangetreward_ = false;
  canopenintegalbox_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRedPointRulsResult::~stRedPointRulsResult() {
  SharedDtor();
}

void stRedPointRulsResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRedPointRulsResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRedPointRulsResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRedPointRulsResult_descriptor_;
}

const stRedPointRulsResult& stRedPointRulsResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRedPointRulsResult* stRedPointRulsResult::default_instance_ = NULL;

stRedPointRulsResult* stRedPointRulsResult::New() const {
  return new stRedPointRulsResult;
}

void stRedPointRulsResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = false;
    cangetreward_ = false;
    canopenintegalbox_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRedPointRulsResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_canGetReward;
        break;
      }

      // optional bool canGetReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canGetReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cangetreward_)));
          set_has_cangetreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_canOpenIntegalBox;
        break;
      }

      // optional bool canOpenIntegalBox = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canOpenIntegalBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canopenintegalbox_)));
          set_has_canopenintegalbox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRedPointRulsResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->times(), output);
  }

  // optional bool canGetReward = 2;
  if (has_cangetreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cangetreward(), output);
  }

  // optional bool canOpenIntegalBox = 3;
  if (has_canopenintegalbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->canopenintegalbox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRedPointRulsResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->times(), target);
  }

  // optional bool canGetReward = 2;
  if (has_cangetreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cangetreward(), target);
  }

  // optional bool canOpenIntegalBox = 3;
  if (has_canopenintegalbox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->canopenintegalbox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRedPointRulsResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool times = 1;
    if (has_times()) {
      total_size += 1 + 1;
    }

    // optional bool canGetReward = 2;
    if (has_cangetreward()) {
      total_size += 1 + 1;
    }

    // optional bool canOpenIntegalBox = 3;
    if (has_canopenintegalbox()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRedPointRulsResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRedPointRulsResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRedPointRulsResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRedPointRulsResult::MergeFrom(const stRedPointRulsResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_cangetreward()) {
      set_cangetreward(from.cangetreward());
    }
    if (from.has_canopenintegalbox()) {
      set_canopenintegalbox(from.canopenintegalbox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRedPointRulsResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRedPointRulsResult::CopyFrom(const stRedPointRulsResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRedPointRulsResult::IsInitialized() const {

  return true;
}

void stRedPointRulsResult::Swap(stRedPointRulsResult* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(cangetreward_, other->cangetreward_);
    std::swap(canopenintegalbox_, other->canopenintegalbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRedPointRulsResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRedPointRulsResult_descriptor_;
  metadata.reflection = stRedPointRulsResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqInviteFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInviteFriend_ProtoModID_descriptor_;
}
bool stReqInviteFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqInviteFriend_ProtoModID stReqInviteFriend::ModID;
const stReqInviteFriend_ProtoModID stReqInviteFriend::ProtoModID_MIN;
const stReqInviteFriend_ProtoModID stReqInviteFriend::ProtoModID_MAX;
const int stReqInviteFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqInviteFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInviteFriend_ProtoFunID_descriptor_;
}
bool stReqInviteFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 201:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqInviteFriend_ProtoFunID stReqInviteFriend::FunID;
const stReqInviteFriend_ProtoFunID stReqInviteFriend::ProtoFunID_MIN;
const stReqInviteFriend_ProtoFunID stReqInviteFriend::ProtoFunID_MAX;
const int stReqInviteFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqInviteFriend::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqInviteFriend::stReqInviteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqInviteFriend::InitAsDefaultInstance() {
}

stReqInviteFriend::stReqInviteFriend(const stReqInviteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqInviteFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqInviteFriend::~stReqInviteFriend() {
  SharedDtor();
}

void stReqInviteFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqInviteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqInviteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqInviteFriend_descriptor_;
}

const stReqInviteFriend& stReqInviteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqInviteFriend* stReqInviteFriend::default_instance_ = NULL;

stReqInviteFriend* stReqInviteFriend::New() const {
  return new stReqInviteFriend;
}

void stReqInviteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqInviteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqInviteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqInviteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqInviteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqInviteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqInviteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqInviteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqInviteFriend::MergeFrom(const stReqInviteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqInviteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqInviteFriend::CopyFrom(const stReqInviteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqInviteFriend::IsInitialized() const {

  return true;
}

void stReqInviteFriend::Swap(stReqInviteFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqInviteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqInviteFriend_descriptor_;
  metadata.reflection = stReqInviteFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteFriendReward::kIdFieldNumber;
const int InviteFriendReward::kStatusFieldNumber;
#endif  // !_MSC_VER

InviteFriendReward::InviteFriendReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteFriendReward::InitAsDefaultInstance() {
}

InviteFriendReward::InviteFriendReward(const InviteFriendReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteFriendReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteFriendReward::~InviteFriendReward() {
  SharedDtor();
}

void InviteFriendReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteFriendReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteFriendReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteFriendReward_descriptor_;
}

const InviteFriendReward& InviteFriendReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

InviteFriendReward* InviteFriendReward::default_instance_ = NULL;

InviteFriendReward* InviteFriendReward::New() const {
  return new InviteFriendReward;
}

void InviteFriendReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteFriendReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional uint32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteFriendReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteFriendReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteFriendReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteFriendReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteFriendReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteFriendReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteFriendReward::MergeFrom(const InviteFriendReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteFriendReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteFriendReward::CopyFrom(const InviteFriendReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteFriendReward::IsInitialized() const {

  return true;
}

void InviteFriendReward::Swap(InviteFriendReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteFriendReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteFriendReward_descriptor_;
  metadata.reflection = InviteFriendReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetInviteFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetInviteFriend_ProtoModID_descriptor_;
}
bool stRetInviteFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetInviteFriend_ProtoModID stRetInviteFriend::ModID;
const stRetInviteFriend_ProtoModID stRetInviteFriend::ProtoModID_MIN;
const stRetInviteFriend_ProtoModID stRetInviteFriend::ProtoModID_MAX;
const int stRetInviteFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetInviteFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetInviteFriend_ProtoFunID_descriptor_;
}
bool stRetInviteFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 202:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetInviteFriend_ProtoFunID stRetInviteFriend::FunID;
const stRetInviteFriend_ProtoFunID stRetInviteFriend::ProtoFunID_MIN;
const stRetInviteFriend_ProtoFunID stRetInviteFriend::ProtoFunID_MAX;
const int stRetInviteFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetInviteFriend::kCodeFieldNumber;
const int stRetInviteFriend::kNumFieldNumber;
const int stRetInviteFriend::kUseInviteCodeFieldNumber;
const int stRetInviteFriend::kRewardFieldNumber;
#endif  // !_MSC_VER

stRetInviteFriend::stRetInviteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetInviteFriend::InitAsDefaultInstance() {
}

stRetInviteFriend::stRetInviteFriend(const stRetInviteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetInviteFriend::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0u;
  useinvitecode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetInviteFriend::~stRetInviteFriend() {
  SharedDtor();
}

void stRetInviteFriend::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void stRetInviteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetInviteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetInviteFriend_descriptor_;
}

const stRetInviteFriend& stRetInviteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetInviteFriend* stRetInviteFriend::default_instance_ = NULL;

stRetInviteFriend* stRetInviteFriend::New() const {
  return new stRetInviteFriend;
}

void stRetInviteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    num_ = 0u;
    useinvitecode_ = false;
  }
  reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetInviteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_useInviteCode;
        break;
      }

      // optional bool useInviteCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useInviteCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &useinvitecode_)));
          set_has_useinvitecode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        break;
      }

      // repeated .MiscProto.InviteFriendReward reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetInviteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional bool useInviteCode = 3;
  if (has_useinvitecode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->useinvitecode(), output);
  }

  // repeated .MiscProto.InviteFriendReward reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetInviteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional bool useInviteCode = 3;
  if (has_useinvitecode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->useinvitecode(), target);
  }

  // repeated .MiscProto.InviteFriendReward reward = 4;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetInviteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bool useInviteCode = 3;
    if (has_useinvitecode()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MiscProto.InviteFriendReward reward = 4;
  total_size += 1 * this->reward_size();
  for (int i = 0; i < this->reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetInviteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetInviteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetInviteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetInviteFriend::MergeFrom(const stRetInviteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_useinvitecode()) {
      set_useinvitecode(from.useinvitecode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetInviteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetInviteFriend::CopyFrom(const stRetInviteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetInviteFriend::IsInitialized() const {

  return true;
}

void stRetInviteFriend::Swap(stRetInviteFriend* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(num_, other->num_);
    std::swap(useinvitecode_, other->useinvitecode_);
    reward_.Swap(&other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetInviteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetInviteFriend_descriptor_;
  metadata.reflection = stRetInviteFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawInviteFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawInviteFriend_ProtoModID_descriptor_;
}
bool stReqDrawInviteFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawInviteFriend_ProtoModID stReqDrawInviteFriend::ModID;
const stReqDrawInviteFriend_ProtoModID stReqDrawInviteFriend::ProtoModID_MIN;
const stReqDrawInviteFriend_ProtoModID stReqDrawInviteFriend::ProtoModID_MAX;
const int stReqDrawInviteFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawInviteFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawInviteFriend_ProtoFunID_descriptor_;
}
bool stReqDrawInviteFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawInviteFriend_ProtoFunID stReqDrawInviteFriend::FunID;
const stReqDrawInviteFriend_ProtoFunID stReqDrawInviteFriend::ProtoFunID_MIN;
const stReqDrawInviteFriend_ProtoFunID stReqDrawInviteFriend::ProtoFunID_MAX;
const int stReqDrawInviteFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawInviteFriend::kIdFieldNumber;
#endif  // !_MSC_VER

stReqDrawInviteFriend::stReqDrawInviteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawInviteFriend::InitAsDefaultInstance() {
}

stReqDrawInviteFriend::stReqDrawInviteFriend(const stReqDrawInviteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawInviteFriend::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawInviteFriend::~stReqDrawInviteFriend() {
  SharedDtor();
}

void stReqDrawInviteFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawInviteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawInviteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawInviteFriend_descriptor_;
}

const stReqDrawInviteFriend& stReqDrawInviteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDrawInviteFriend* stReqDrawInviteFriend::default_instance_ = NULL;

stReqDrawInviteFriend* stReqDrawInviteFriend::New() const {
  return new stReqDrawInviteFriend;
}

void stReqDrawInviteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawInviteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawInviteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawInviteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawInviteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawInviteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawInviteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawInviteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawInviteFriend::MergeFrom(const stReqDrawInviteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawInviteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawInviteFriend::CopyFrom(const stReqDrawInviteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawInviteFriend::IsInitialized() const {

  return true;
}

void stReqDrawInviteFriend::Swap(stReqDrawInviteFriend* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawInviteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawInviteFriend_descriptor_;
  metadata.reflection = stReqDrawInviteFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDrawInviteFriend_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawInviteFriend_eResult_descriptor_;
}
bool stRetDrawInviteFriend_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawInviteFriend_eResult stRetDrawInviteFriend::eSuccess;
const stRetDrawInviteFriend_eResult stRetDrawInviteFriend::eBag_Full;
const stRetDrawInviteFriend_eResult stRetDrawInviteFriend::eLess_Of_Invite_Num;
const stRetDrawInviteFriend_eResult stRetDrawInviteFriend::eNo_Such_Id;
const stRetDrawInviteFriend_eResult stRetDrawInviteFriend::eAlready_Get;
const stRetDrawInviteFriend_eResult stRetDrawInviteFriend::eNot_Find_Record;
const stRetDrawInviteFriend_eResult stRetDrawInviteFriend::eResult_MIN;
const stRetDrawInviteFriend_eResult stRetDrawInviteFriend::eResult_MAX;
const int stRetDrawInviteFriend::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawInviteFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawInviteFriend_ProtoModID_descriptor_;
}
bool stRetDrawInviteFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawInviteFriend_ProtoModID stRetDrawInviteFriend::ModID;
const stRetDrawInviteFriend_ProtoModID stRetDrawInviteFriend::ProtoModID_MIN;
const stRetDrawInviteFriend_ProtoModID stRetDrawInviteFriend::ProtoModID_MAX;
const int stRetDrawInviteFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawInviteFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawInviteFriend_ProtoFunID_descriptor_;
}
bool stRetDrawInviteFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 204:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawInviteFriend_ProtoFunID stRetDrawInviteFriend::FunID;
const stRetDrawInviteFriend_ProtoFunID stRetDrawInviteFriend::ProtoFunID_MIN;
const stRetDrawInviteFriend_ProtoFunID stRetDrawInviteFriend::ProtoFunID_MAX;
const int stRetDrawInviteFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDrawInviteFriend::kIdFieldNumber;
const int stRetDrawInviteFriend::kResultFieldNumber;
#endif  // !_MSC_VER

stRetDrawInviteFriend::stRetDrawInviteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDrawInviteFriend::InitAsDefaultInstance() {
}

stRetDrawInviteFriend::stRetDrawInviteFriend(const stRetDrawInviteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDrawInviteFriend::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDrawInviteFriend::~stRetDrawInviteFriend() {
  SharedDtor();
}

void stRetDrawInviteFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDrawInviteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDrawInviteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawInviteFriend_descriptor_;
}

const stRetDrawInviteFriend& stRetDrawInviteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDrawInviteFriend* stRetDrawInviteFriend::default_instance_ = NULL;

stRetDrawInviteFriend* stRetDrawInviteFriend::New() const {
  return new stRetDrawInviteFriend;
}

void stRetDrawInviteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDrawInviteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MiscProto.stRetDrawInviteFriend.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetDrawInviteFriend_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetDrawInviteFriend_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDrawInviteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .MiscProto.stRetDrawInviteFriend.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDrawInviteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .MiscProto.stRetDrawInviteFriend.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDrawInviteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .MiscProto.stRetDrawInviteFriend.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDrawInviteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDrawInviteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDrawInviteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDrawInviteFriend::MergeFrom(const stRetDrawInviteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDrawInviteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDrawInviteFriend::CopyFrom(const stRetDrawInviteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDrawInviteFriend::IsInitialized() const {

  return true;
}

void stRetDrawInviteFriend::Swap(stRetDrawInviteFriend* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDrawInviteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDrawInviteFriend_descriptor_;
  metadata.reflection = stRetDrawInviteFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUseInviteCode_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseInviteCode_ProtoModID_descriptor_;
}
bool stReqUseInviteCode_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseInviteCode_ProtoModID stReqUseInviteCode::ModID;
const stReqUseInviteCode_ProtoModID stReqUseInviteCode::ProtoModID_MIN;
const stReqUseInviteCode_ProtoModID stReqUseInviteCode::ProtoModID_MAX;
const int stReqUseInviteCode::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUseInviteCode_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseInviteCode_ProtoFunID_descriptor_;
}
bool stReqUseInviteCode_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 205:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUseInviteCode_ProtoFunID stReqUseInviteCode::FunID;
const stReqUseInviteCode_ProtoFunID stReqUseInviteCode::ProtoFunID_MIN;
const stReqUseInviteCode_ProtoFunID stReqUseInviteCode::ProtoFunID_MAX;
const int stReqUseInviteCode::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUseInviteCode::kCodeFieldNumber;
#endif  // !_MSC_VER

stReqUseInviteCode::stReqUseInviteCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUseInviteCode::InitAsDefaultInstance() {
}

stReqUseInviteCode::stReqUseInviteCode(const stReqUseInviteCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUseInviteCode::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUseInviteCode::~stReqUseInviteCode() {
  SharedDtor();
}

void stReqUseInviteCode::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void stReqUseInviteCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUseInviteCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUseInviteCode_descriptor_;
}

const stReqUseInviteCode& stReqUseInviteCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqUseInviteCode* stReqUseInviteCode::default_instance_ = NULL;

stReqUseInviteCode* stReqUseInviteCode::New() const {
  return new stReqUseInviteCode;
}

void stReqUseInviteCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUseInviteCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUseInviteCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUseInviteCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUseInviteCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUseInviteCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUseInviteCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUseInviteCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUseInviteCode::MergeFrom(const stReqUseInviteCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUseInviteCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUseInviteCode::CopyFrom(const stReqUseInviteCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUseInviteCode::IsInitialized() const {

  return true;
}

void stReqUseInviteCode::Swap(stReqUseInviteCode* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUseInviteCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUseInviteCode_descriptor_;
  metadata.reflection = stReqUseInviteCode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetUseInviteCode_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseInviteCode_eResult_descriptor_;
}
bool stRetUseInviteCode_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseInviteCode_eResult stRetUseInviteCode::eSuccess;
const stRetUseInviteCode_eResult stRetUseInviteCode::eBag_Full;
const stRetUseInviteCode_eResult stRetUseInviteCode::eNo_Such_Code;
const stRetUseInviteCode_eResult stRetUseInviteCode::eAlready_Get;
const stRetUseInviteCode_eResult stRetUseInviteCode::eNot_Find_Record;
const stRetUseInviteCode_eResult stRetUseInviteCode::eInner_error;
const stRetUseInviteCode_eResult stRetUseInviteCode::eLevel_Limit;
const stRetUseInviteCode_eResult stRetUseInviteCode::eUse_Self_Code;
const stRetUseInviteCode_eResult stRetUseInviteCode::eResult_MIN;
const stRetUseInviteCode_eResult stRetUseInviteCode::eResult_MAX;
const int stRetUseInviteCode::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetUseInviteCode_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseInviteCode_ProtoModID_descriptor_;
}
bool stRetUseInviteCode_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseInviteCode_ProtoModID stRetUseInviteCode::ModID;
const stRetUseInviteCode_ProtoModID stRetUseInviteCode::ProtoModID_MIN;
const stRetUseInviteCode_ProtoModID stRetUseInviteCode::ProtoModID_MAX;
const int stRetUseInviteCode::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetUseInviteCode_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseInviteCode_ProtoFunID_descriptor_;
}
bool stRetUseInviteCode_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 206:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetUseInviteCode_ProtoFunID stRetUseInviteCode::FunID;
const stRetUseInviteCode_ProtoFunID stRetUseInviteCode::ProtoFunID_MIN;
const stRetUseInviteCode_ProtoFunID stRetUseInviteCode::ProtoFunID_MAX;
const int stRetUseInviteCode::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetUseInviteCode::kResultFieldNumber;
#endif  // !_MSC_VER

stRetUseInviteCode::stRetUseInviteCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetUseInviteCode::InitAsDefaultInstance() {
}

stRetUseInviteCode::stRetUseInviteCode(const stRetUseInviteCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetUseInviteCode::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetUseInviteCode::~stRetUseInviteCode() {
  SharedDtor();
}

void stRetUseInviteCode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetUseInviteCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetUseInviteCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetUseInviteCode_descriptor_;
}

const stRetUseInviteCode& stRetUseInviteCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetUseInviteCode* stRetUseInviteCode::default_instance_ = NULL;

stRetUseInviteCode* stRetUseInviteCode::New() const {
  return new stRetUseInviteCode;
}

void stRetUseInviteCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetUseInviteCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRetUseInviteCode.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetUseInviteCode_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetUseInviteCode_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetUseInviteCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRetUseInviteCode.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetUseInviteCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRetUseInviteCode.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetUseInviteCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRetUseInviteCode.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetUseInviteCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetUseInviteCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetUseInviteCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetUseInviteCode::MergeFrom(const stRetUseInviteCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetUseInviteCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetUseInviteCode::CopyFrom(const stRetUseInviteCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetUseInviteCode::IsInitialized() const {

  return true;
}

void stRetUseInviteCode::Swap(stRetUseInviteCode* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetUseInviteCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetUseInviteCode_descriptor_;
  metadata.reflection = stRetUseInviteCode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqShareInvite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqShareInvite_ProtoModID_descriptor_;
}
bool stReqShareInvite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqShareInvite_ProtoModID stReqShareInvite::ModID;
const stReqShareInvite_ProtoModID stReqShareInvite::ProtoModID_MIN;
const stReqShareInvite_ProtoModID stReqShareInvite::ProtoModID_MAX;
const int stReqShareInvite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqShareInvite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqShareInvite_ProtoFunID_descriptor_;
}
bool stReqShareInvite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 207:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqShareInvite_ProtoFunID stReqShareInvite::FunID;
const stReqShareInvite_ProtoFunID stReqShareInvite::ProtoFunID_MIN;
const stReqShareInvite_ProtoFunID stReqShareInvite::ProtoFunID_MAX;
const int stReqShareInvite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqShareInvite::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqShareInvite::stReqShareInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqShareInvite::InitAsDefaultInstance() {
}

stReqShareInvite::stReqShareInvite(const stReqShareInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqShareInvite::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqShareInvite::~stReqShareInvite() {
  SharedDtor();
}

void stReqShareInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqShareInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqShareInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqShareInvite_descriptor_;
}

const stReqShareInvite& stReqShareInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqShareInvite* stReqShareInvite::default_instance_ = NULL;

stReqShareInvite* stReqShareInvite::New() const {
  return new stReqShareInvite;
}

void stReqShareInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqShareInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqShareInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqShareInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqShareInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqShareInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqShareInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqShareInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqShareInvite::MergeFrom(const stReqShareInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqShareInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqShareInvite::CopyFrom(const stReqShareInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqShareInvite::IsInitialized() const {

  return true;
}

void stReqShareInvite::Swap(stReqShareInvite* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqShareInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqShareInvite_descriptor_;
  metadata.reflection = stReqShareInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetShareInvite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetShareInvite_ProtoModID_descriptor_;
}
bool stRetShareInvite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetShareInvite_ProtoModID stRetShareInvite::ModID;
const stRetShareInvite_ProtoModID stRetShareInvite::ProtoModID_MIN;
const stRetShareInvite_ProtoModID stRetShareInvite::ProtoModID_MAX;
const int stRetShareInvite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetShareInvite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetShareInvite_ProtoFunID_descriptor_;
}
bool stRetShareInvite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 208:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetShareInvite_ProtoFunID stRetShareInvite::FunID;
const stRetShareInvite_ProtoFunID stRetShareInvite::ProtoFunID_MIN;
const stRetShareInvite_ProtoFunID stRetShareInvite::ProtoFunID_MAX;
const int stRetShareInvite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetShareInvite::kNumFieldNumber;
#endif  // !_MSC_VER

stRetShareInvite::stRetShareInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetShareInvite::InitAsDefaultInstance() {
}

stRetShareInvite::stRetShareInvite(const stRetShareInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetShareInvite::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetShareInvite::~stRetShareInvite() {
  SharedDtor();
}

void stRetShareInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetShareInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetShareInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetShareInvite_descriptor_;
}

const stRetShareInvite& stRetShareInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetShareInvite* stRetShareInvite::default_instance_ = NULL;

stRetShareInvite* stRetShareInvite::New() const {
  return new stRetShareInvite;
}

void stRetShareInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetShareInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetShareInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetShareInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetShareInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetShareInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetShareInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetShareInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetShareInvite::MergeFrom(const stRetShareInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetShareInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetShareInvite::CopyFrom(const stRetShareInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetShareInvite::IsInitialized() const {

  return true;
}

void stRetShareInvite::Swap(stRetShareInvite* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetShareInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetShareInvite_descriptor_;
  metadata.reflection = stRetShareInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDailyShareInvite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDailyShareInvite_ProtoModID_descriptor_;
}
bool stReqDailyShareInvite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDailyShareInvite_ProtoModID stReqDailyShareInvite::ModID;
const stReqDailyShareInvite_ProtoModID stReqDailyShareInvite::ProtoModID_MIN;
const stReqDailyShareInvite_ProtoModID stReqDailyShareInvite::ProtoModID_MAX;
const int stReqDailyShareInvite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDailyShareInvite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDailyShareInvite_ProtoFunID_descriptor_;
}
bool stReqDailyShareInvite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 209:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDailyShareInvite_ProtoFunID stReqDailyShareInvite::FunID;
const stReqDailyShareInvite_ProtoFunID stReqDailyShareInvite::ProtoFunID_MIN;
const stReqDailyShareInvite_ProtoFunID stReqDailyShareInvite::ProtoFunID_MAX;
const int stReqDailyShareInvite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDailyShareInvite::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqDailyShareInvite::stReqDailyShareInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDailyShareInvite::InitAsDefaultInstance() {
}

stReqDailyShareInvite::stReqDailyShareInvite(const stReqDailyShareInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDailyShareInvite::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDailyShareInvite::~stReqDailyShareInvite() {
  SharedDtor();
}

void stReqDailyShareInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDailyShareInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDailyShareInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDailyShareInvite_descriptor_;
}

const stReqDailyShareInvite& stReqDailyShareInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDailyShareInvite* stReqDailyShareInvite::default_instance_ = NULL;

stReqDailyShareInvite* stReqDailyShareInvite::New() const {
  return new stReqDailyShareInvite;
}

void stReqDailyShareInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDailyShareInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDailyShareInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDailyShareInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDailyShareInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDailyShareInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDailyShareInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDailyShareInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDailyShareInvite::MergeFrom(const stReqDailyShareInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDailyShareInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDailyShareInvite::CopyFrom(const stReqDailyShareInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDailyShareInvite::IsInitialized() const {

  return true;
}

void stReqDailyShareInvite::Swap(stReqDailyShareInvite* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDailyShareInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDailyShareInvite_descriptor_;
  metadata.reflection = stReqDailyShareInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDailyShareInvite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDailyShareInvite_ProtoModID_descriptor_;
}
bool stRetDailyShareInvite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDailyShareInvite_ProtoModID stRetDailyShareInvite::ModID;
const stRetDailyShareInvite_ProtoModID stRetDailyShareInvite::ProtoModID_MIN;
const stRetDailyShareInvite_ProtoModID stRetDailyShareInvite::ProtoModID_MAX;
const int stRetDailyShareInvite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDailyShareInvite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDailyShareInvite_ProtoFunID_descriptor_;
}
bool stRetDailyShareInvite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 210:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDailyShareInvite_ProtoFunID stRetDailyShareInvite::FunID;
const stRetDailyShareInvite_ProtoFunID stRetDailyShareInvite::ProtoFunID_MIN;
const stRetDailyShareInvite_ProtoFunID stRetDailyShareInvite::ProtoFunID_MAX;
const int stRetDailyShareInvite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDailyShareInvite::kNumFieldNumber;
const int stRetDailyShareInvite::kIdFieldNumber;
const int stRetDailyShareInvite::kOnceRewardFieldNumber;
#endif  // !_MSC_VER

stRetDailyShareInvite::stRetDailyShareInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDailyShareInvite::InitAsDefaultInstance() {
}

stRetDailyShareInvite::stRetDailyShareInvite(const stRetDailyShareInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDailyShareInvite::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  oncereward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDailyShareInvite::~stRetDailyShareInvite() {
  SharedDtor();
}

void stRetDailyShareInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDailyShareInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDailyShareInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDailyShareInvite_descriptor_;
}

const stRetDailyShareInvite& stRetDailyShareInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDailyShareInvite* stRetDailyShareInvite::default_instance_ = NULL;

stRetDailyShareInvite* stRetDailyShareInvite::New() const {
  return new stRetDailyShareInvite;
}

void stRetDailyShareInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
    oncereward_ = false;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDailyShareInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // repeated uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectTag(24)) goto parse_onceReward;
        break;
      }

      // optional bool onceReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onceReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &oncereward_)));
          set_has_oncereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDailyShareInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->id(i), output);
  }

  // optional bool onceReward = 3;
  if (has_oncereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->oncereward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDailyShareInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->id(i), target);
  }

  // optional bool onceReward = 3;
  if (has_oncereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->oncereward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDailyShareInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bool onceReward = 3;
    if (has_oncereward()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDailyShareInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDailyShareInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDailyShareInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDailyShareInvite::MergeFrom(const stRetDailyShareInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_oncereward()) {
      set_oncereward(from.oncereward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDailyShareInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDailyShareInvite::CopyFrom(const stRetDailyShareInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDailyShareInvite::IsInitialized() const {

  return true;
}

void stRetDailyShareInvite::Swap(stRetDailyShareInvite* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    id_.Swap(&other->id_);
    std::swap(oncereward_, other->oncereward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDailyShareInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDailyShareInvite_descriptor_;
  metadata.reflection = stRetDailyShareInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawDailyShareReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawDailyShareReward_ProtoModID_descriptor_;
}
bool stReqDrawDailyShareReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawDailyShareReward_ProtoModID stReqDrawDailyShareReward::ModID;
const stReqDrawDailyShareReward_ProtoModID stReqDrawDailyShareReward::ProtoModID_MIN;
const stReqDrawDailyShareReward_ProtoModID stReqDrawDailyShareReward::ProtoModID_MAX;
const int stReqDrawDailyShareReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawDailyShareReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawDailyShareReward_ProtoFunID_descriptor_;
}
bool stReqDrawDailyShareReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 211:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawDailyShareReward_ProtoFunID stReqDrawDailyShareReward::FunID;
const stReqDrawDailyShareReward_ProtoFunID stReqDrawDailyShareReward::ProtoFunID_MIN;
const stReqDrawDailyShareReward_ProtoFunID stReqDrawDailyShareReward::ProtoFunID_MAX;
const int stReqDrawDailyShareReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawDailyShareReward::kIdFieldNumber;
#endif  // !_MSC_VER

stReqDrawDailyShareReward::stReqDrawDailyShareReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawDailyShareReward::InitAsDefaultInstance() {
}

stReqDrawDailyShareReward::stReqDrawDailyShareReward(const stReqDrawDailyShareReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawDailyShareReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawDailyShareReward::~stReqDrawDailyShareReward() {
  SharedDtor();
}

void stReqDrawDailyShareReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawDailyShareReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawDailyShareReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawDailyShareReward_descriptor_;
}

const stReqDrawDailyShareReward& stReqDrawDailyShareReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDrawDailyShareReward* stReqDrawDailyShareReward::default_instance_ = NULL;

stReqDrawDailyShareReward* stReqDrawDailyShareReward::New() const {
  return new stReqDrawDailyShareReward;
}

void stReqDrawDailyShareReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawDailyShareReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawDailyShareReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawDailyShareReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawDailyShareReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawDailyShareReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawDailyShareReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawDailyShareReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawDailyShareReward::MergeFrom(const stReqDrawDailyShareReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawDailyShareReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawDailyShareReward::CopyFrom(const stReqDrawDailyShareReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawDailyShareReward::IsInitialized() const {

  return true;
}

void stReqDrawDailyShareReward::Swap(stReqDrawDailyShareReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawDailyShareReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawDailyShareReward_descriptor_;
  metadata.reflection = stReqDrawDailyShareReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDrawDailyShareReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawDailyShareReward_eResult_descriptor_;
}
bool stRetDrawDailyShareReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawDailyShareReward_eResult stRetDrawDailyShareReward::eSuccess;
const stRetDrawDailyShareReward_eResult stRetDrawDailyShareReward::eBag_Full;
const stRetDrawDailyShareReward_eResult stRetDrawDailyShareReward::eLess_Of_Num;
const stRetDrawDailyShareReward_eResult stRetDrawDailyShareReward::eAlready_Get;
const stRetDrawDailyShareReward_eResult stRetDrawDailyShareReward::eNot_Find_Id;
const stRetDrawDailyShareReward_eResult stRetDrawDailyShareReward::eResult_MIN;
const stRetDrawDailyShareReward_eResult stRetDrawDailyShareReward::eResult_MAX;
const int stRetDrawDailyShareReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawDailyShareReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawDailyShareReward_ProtoModID_descriptor_;
}
bool stRetDrawDailyShareReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawDailyShareReward_ProtoModID stRetDrawDailyShareReward::ModID;
const stRetDrawDailyShareReward_ProtoModID stRetDrawDailyShareReward::ProtoModID_MIN;
const stRetDrawDailyShareReward_ProtoModID stRetDrawDailyShareReward::ProtoModID_MAX;
const int stRetDrawDailyShareReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawDailyShareReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawDailyShareReward_ProtoFunID_descriptor_;
}
bool stRetDrawDailyShareReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 212:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawDailyShareReward_ProtoFunID stRetDrawDailyShareReward::FunID;
const stRetDrawDailyShareReward_ProtoFunID stRetDrawDailyShareReward::ProtoFunID_MIN;
const stRetDrawDailyShareReward_ProtoFunID stRetDrawDailyShareReward::ProtoFunID_MAX;
const int stRetDrawDailyShareReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDrawDailyShareReward::kIdFieldNumber;
const int stRetDrawDailyShareReward::kResultFieldNumber;
#endif  // !_MSC_VER

stRetDrawDailyShareReward::stRetDrawDailyShareReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDrawDailyShareReward::InitAsDefaultInstance() {
}

stRetDrawDailyShareReward::stRetDrawDailyShareReward(const stRetDrawDailyShareReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDrawDailyShareReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDrawDailyShareReward::~stRetDrawDailyShareReward() {
  SharedDtor();
}

void stRetDrawDailyShareReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDrawDailyShareReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDrawDailyShareReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawDailyShareReward_descriptor_;
}

const stRetDrawDailyShareReward& stRetDrawDailyShareReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDrawDailyShareReward* stRetDrawDailyShareReward::default_instance_ = NULL;

stRetDrawDailyShareReward* stRetDrawDailyShareReward::New() const {
  return new stRetDrawDailyShareReward;
}

void stRetDrawDailyShareReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDrawDailyShareReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MiscProto.stRetDrawDailyShareReward.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetDrawDailyShareReward_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetDrawDailyShareReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDrawDailyShareReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .MiscProto.stRetDrawDailyShareReward.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDrawDailyShareReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .MiscProto.stRetDrawDailyShareReward.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDrawDailyShareReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .MiscProto.stRetDrawDailyShareReward.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDrawDailyShareReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDrawDailyShareReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDrawDailyShareReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDrawDailyShareReward::MergeFrom(const stRetDrawDailyShareReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDrawDailyShareReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDrawDailyShareReward::CopyFrom(const stRetDrawDailyShareReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDrawDailyShareReward::IsInitialized() const {

  return true;
}

void stRetDrawDailyShareReward::Swap(stRetDrawDailyShareReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDrawDailyShareReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDrawDailyShareReward_descriptor_;
  metadata.reflection = stRetDrawDailyShareReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawOnceShareReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawOnceShareReward_ProtoModID_descriptor_;
}
bool stReqDrawOnceShareReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawOnceShareReward_ProtoModID stReqDrawOnceShareReward::ModID;
const stReqDrawOnceShareReward_ProtoModID stReqDrawOnceShareReward::ProtoModID_MIN;
const stReqDrawOnceShareReward_ProtoModID stReqDrawOnceShareReward::ProtoModID_MAX;
const int stReqDrawOnceShareReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawOnceShareReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawOnceShareReward_ProtoFunID_descriptor_;
}
bool stReqDrawOnceShareReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 213:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawOnceShareReward_ProtoFunID stReqDrawOnceShareReward::FunID;
const stReqDrawOnceShareReward_ProtoFunID stReqDrawOnceShareReward::ProtoFunID_MIN;
const stReqDrawOnceShareReward_ProtoFunID stReqDrawOnceShareReward::ProtoFunID_MAX;
const int stReqDrawOnceShareReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawOnceShareReward::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqDrawOnceShareReward::stReqDrawOnceShareReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawOnceShareReward::InitAsDefaultInstance() {
}

stReqDrawOnceShareReward::stReqDrawOnceShareReward(const stReqDrawOnceShareReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawOnceShareReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawOnceShareReward::~stReqDrawOnceShareReward() {
  SharedDtor();
}

void stReqDrawOnceShareReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawOnceShareReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawOnceShareReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawOnceShareReward_descriptor_;
}

const stReqDrawOnceShareReward& stReqDrawOnceShareReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDrawOnceShareReward* stReqDrawOnceShareReward::default_instance_ = NULL;

stReqDrawOnceShareReward* stReqDrawOnceShareReward::New() const {
  return new stReqDrawOnceShareReward;
}

void stReqDrawOnceShareReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawOnceShareReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawOnceShareReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawOnceShareReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawOnceShareReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawOnceShareReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawOnceShareReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawOnceShareReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawOnceShareReward::MergeFrom(const stReqDrawOnceShareReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawOnceShareReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawOnceShareReward::CopyFrom(const stReqDrawOnceShareReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawOnceShareReward::IsInitialized() const {

  return true;
}

void stReqDrawOnceShareReward::Swap(stReqDrawOnceShareReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawOnceShareReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawOnceShareReward_descriptor_;
  metadata.reflection = stReqDrawOnceShareReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDrawOnceShareReward_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawOnceShareReward_eResult_descriptor_;
}
bool stRetDrawOnceShareReward_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawOnceShareReward_eResult stRetDrawOnceShareReward::eSuccess;
const stRetDrawOnceShareReward_eResult stRetDrawOnceShareReward::eBag_Full;
const stRetDrawOnceShareReward_eResult stRetDrawOnceShareReward::eAlready_Get;
const stRetDrawOnceShareReward_eResult stRetDrawOnceShareReward::eLess_Of_Num;
const stRetDrawOnceShareReward_eResult stRetDrawOnceShareReward::eResult_MIN;
const stRetDrawOnceShareReward_eResult stRetDrawOnceShareReward::eResult_MAX;
const int stRetDrawOnceShareReward::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawOnceShareReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawOnceShareReward_ProtoModID_descriptor_;
}
bool stRetDrawOnceShareReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawOnceShareReward_ProtoModID stRetDrawOnceShareReward::ModID;
const stRetDrawOnceShareReward_ProtoModID stRetDrawOnceShareReward::ProtoModID_MIN;
const stRetDrawOnceShareReward_ProtoModID stRetDrawOnceShareReward::ProtoModID_MAX;
const int stRetDrawOnceShareReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawOnceShareReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawOnceShareReward_ProtoFunID_descriptor_;
}
bool stRetDrawOnceShareReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 214:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawOnceShareReward_ProtoFunID stRetDrawOnceShareReward::FunID;
const stRetDrawOnceShareReward_ProtoFunID stRetDrawOnceShareReward::ProtoFunID_MIN;
const stRetDrawOnceShareReward_ProtoFunID stRetDrawOnceShareReward::ProtoFunID_MAX;
const int stRetDrawOnceShareReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDrawOnceShareReward::kResultFieldNumber;
#endif  // !_MSC_VER

stRetDrawOnceShareReward::stRetDrawOnceShareReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDrawOnceShareReward::InitAsDefaultInstance() {
}

stRetDrawOnceShareReward::stRetDrawOnceShareReward(const stRetDrawOnceShareReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDrawOnceShareReward::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDrawOnceShareReward::~stRetDrawOnceShareReward() {
  SharedDtor();
}

void stRetDrawOnceShareReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDrawOnceShareReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDrawOnceShareReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawOnceShareReward_descriptor_;
}

const stRetDrawOnceShareReward& stRetDrawOnceShareReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDrawOnceShareReward* stRetDrawOnceShareReward::default_instance_ = NULL;

stRetDrawOnceShareReward* stRetDrawOnceShareReward::New() const {
  return new stRetDrawOnceShareReward;
}

void stRetDrawOnceShareReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDrawOnceShareReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRetDrawOnceShareReward.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetDrawOnceShareReward_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetDrawOnceShareReward_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDrawOnceShareReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRetDrawOnceShareReward.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDrawOnceShareReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRetDrawOnceShareReward.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDrawOnceShareReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRetDrawOnceShareReward.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDrawOnceShareReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDrawOnceShareReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDrawOnceShareReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDrawOnceShareReward::MergeFrom(const stRetDrawOnceShareReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDrawOnceShareReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDrawOnceShareReward::CopyFrom(const stRetDrawOnceShareReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDrawOnceShareReward::IsInitialized() const {

  return true;
}

void stRetDrawOnceShareReward::Swap(stRetDrawOnceShareReward* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDrawOnceShareReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDrawOnceShareReward_descriptor_;
  metadata.reflection = stRetDrawOnceShareReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyInterceptServerResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyInterceptServerResult_eResult_descriptor_;
}
bool stNotifyInterceptServerResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyInterceptServerResult_eResult stNotifyInterceptServerResult::eWin;
const stNotifyInterceptServerResult_eResult stNotifyInterceptServerResult::eLose;
const stNotifyInterceptServerResult_eResult stNotifyInterceptServerResult::eTimeout;
const stNotifyInterceptServerResult_eResult stNotifyInterceptServerResult::eResult_MIN;
const stNotifyInterceptServerResult_eResult stNotifyInterceptServerResult::eResult_MAX;
const int stNotifyInterceptServerResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyInterceptServerResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyInterceptServerResult_ProtoModID_descriptor_;
}
bool stNotifyInterceptServerResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyInterceptServerResult_ProtoModID stNotifyInterceptServerResult::ModID;
const stNotifyInterceptServerResult_ProtoModID stNotifyInterceptServerResult::ProtoModID_MIN;
const stNotifyInterceptServerResult_ProtoModID stNotifyInterceptServerResult::ProtoModID_MAX;
const int stNotifyInterceptServerResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyInterceptServerResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyInterceptServerResult_ProtoFunID_descriptor_;
}
bool stNotifyInterceptServerResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 215:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyInterceptServerResult_ProtoFunID stNotifyInterceptServerResult::FunID;
const stNotifyInterceptServerResult_ProtoFunID stNotifyInterceptServerResult::ProtoFunID_MIN;
const stNotifyInterceptServerResult_ProtoFunID stNotifyInterceptServerResult::ProtoFunID_MAX;
const int stNotifyInterceptServerResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyInterceptServerResult::kResultFieldNumber;
#endif  // !_MSC_VER

stNotifyInterceptServerResult::stNotifyInterceptServerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyInterceptServerResult::InitAsDefaultInstance() {
}

stNotifyInterceptServerResult::stNotifyInterceptServerResult(const stNotifyInterceptServerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyInterceptServerResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyInterceptServerResult::~stNotifyInterceptServerResult() {
  SharedDtor();
}

void stNotifyInterceptServerResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyInterceptServerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyInterceptServerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyInterceptServerResult_descriptor_;
}

const stNotifyInterceptServerResult& stNotifyInterceptServerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stNotifyInterceptServerResult* stNotifyInterceptServerResult::default_instance_ = NULL;

stNotifyInterceptServerResult* stNotifyInterceptServerResult::New() const {
  return new stNotifyInterceptServerResult;
}

void stNotifyInterceptServerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyInterceptServerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stNotifyInterceptServerResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stNotifyInterceptServerResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stNotifyInterceptServerResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyInterceptServerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stNotifyInterceptServerResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyInterceptServerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stNotifyInterceptServerResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyInterceptServerResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stNotifyInterceptServerResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyInterceptServerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyInterceptServerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyInterceptServerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyInterceptServerResult::MergeFrom(const stNotifyInterceptServerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyInterceptServerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyInterceptServerResult::CopyFrom(const stNotifyInterceptServerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyInterceptServerResult::IsInitialized() const {

  return true;
}

void stNotifyInterceptServerResult::Swap(stNotifyInterceptServerResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyInterceptServerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyInterceptServerResult_descriptor_;
  metadata.reflection = stNotifyInterceptServerResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqReceiveState_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveState_ProtoModID_descriptor_;
}
bool stReqReceiveState_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReceiveState_ProtoModID stReqReceiveState::ModID;
const stReqReceiveState_ProtoModID stReqReceiveState::ProtoModID_MIN;
const stReqReceiveState_ProtoModID stReqReceiveState::ProtoModID_MAX;
const int stReqReceiveState::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqReceiveState_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveState_ProtoFunID_descriptor_;
}
bool stReqReceiveState_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 216:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReceiveState_ProtoFunID stReqReceiveState::FunID;
const stReqReceiveState_ProtoFunID stReqReceiveState::ProtoFunID_MIN;
const stReqReceiveState_ProtoFunID stReqReceiveState::ProtoFunID_MAX;
const int stReqReceiveState::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqReceiveState::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqReceiveState::stReqReceiveState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqReceiveState::InitAsDefaultInstance() {
}

stReqReceiveState::stReqReceiveState(const stReqReceiveState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqReceiveState::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqReceiveState::~stReqReceiveState() {
  SharedDtor();
}

void stReqReceiveState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqReceiveState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqReceiveState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveState_descriptor_;
}

const stReqReceiveState& stReqReceiveState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqReceiveState* stReqReceiveState::default_instance_ = NULL;

stReqReceiveState* stReqReceiveState::New() const {
  return new stReqReceiveState;
}

void stReqReceiveState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqReceiveState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqReceiveState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqReceiveState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqReceiveState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqReceiveState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqReceiveState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqReceiveState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqReceiveState::MergeFrom(const stReqReceiveState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqReceiveState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqReceiveState::CopyFrom(const stReqReceiveState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqReceiveState::IsInitialized() const {

  return true;
}

void stReqReceiveState::Swap(stReqReceiveState* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqReceiveState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqReceiveState_descriptor_;
  metadata.reflection = stReqReceiveState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReceiveStateResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveStateResult_ProtoModID_descriptor_;
}
bool stReceiveStateResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveStateResult_ProtoModID stReceiveStateResult::ModID;
const stReceiveStateResult_ProtoModID stReceiveStateResult::ProtoModID_MIN;
const stReceiveStateResult_ProtoModID stReceiveStateResult::ProtoModID_MAX;
const int stReceiveStateResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReceiveStateResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveStateResult_ProtoFunID_descriptor_;
}
bool stReceiveStateResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 217:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveStateResult_ProtoFunID stReceiveStateResult::FunID;
const stReceiveStateResult_ProtoFunID stReceiveStateResult::ProtoFunID_MIN;
const stReceiveStateResult_ProtoFunID stReceiveStateResult::ProtoFunID_MAX;
const int stReceiveStateResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReceiveStateResult::kIsReceiveFieldNumber;
#endif  // !_MSC_VER

stReceiveStateResult::stReceiveStateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReceiveStateResult::InitAsDefaultInstance() {
}

stReceiveStateResult::stReceiveStateResult(const stReceiveStateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReceiveStateResult::SharedCtor() {
  _cached_size_ = 0;
  isreceive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReceiveStateResult::~stReceiveStateResult() {
  SharedDtor();
}

void stReceiveStateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReceiveStateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReceiveStateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveStateResult_descriptor_;
}

const stReceiveStateResult& stReceiveStateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReceiveStateResult* stReceiveStateResult::default_instance_ = NULL;

stReceiveStateResult* stReceiveStateResult::New() const {
  return new stReceiveStateResult;
}

void stReceiveStateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isreceive_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReceiveStateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isReceive = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isreceive_)));
          set_has_isreceive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReceiveStateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isReceive = 1;
  if (has_isreceive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isreceive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReceiveStateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isReceive = 1;
  if (has_isreceive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isreceive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReceiveStateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isReceive = 1;
    if (has_isreceive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReceiveStateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReceiveStateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReceiveStateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReceiveStateResult::MergeFrom(const stReceiveStateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isreceive()) {
      set_isreceive(from.isreceive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReceiveStateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReceiveStateResult::CopyFrom(const stReceiveStateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReceiveStateResult::IsInitialized() const {

  return true;
}

void stReceiveStateResult::Swap(stReceiveStateResult* other) {
  if (other != this) {
    std::swap(isreceive_, other->isreceive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReceiveStateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReceiveStateResult_descriptor_;
  metadata.reflection = stReceiveStateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqReceiveReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveReward_ProtoModID_descriptor_;
}
bool stReqReceiveReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReceiveReward_ProtoModID stReqReceiveReward::ModID;
const stReqReceiveReward_ProtoModID stReqReceiveReward::ProtoModID_MIN;
const stReqReceiveReward_ProtoModID stReqReceiveReward::ProtoModID_MAX;
const int stReqReceiveReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqReceiveReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveReward_ProtoFunID_descriptor_;
}
bool stReqReceiveReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 218:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReceiveReward_ProtoFunID stReqReceiveReward::FunID;
const stReqReceiveReward_ProtoFunID stReqReceiveReward::ProtoFunID_MIN;
const stReqReceiveReward_ProtoFunID stReqReceiveReward::ProtoFunID_MAX;
const int stReqReceiveReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqReceiveReward::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqReceiveReward::stReqReceiveReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqReceiveReward::InitAsDefaultInstance() {
}

stReqReceiveReward::stReqReceiveReward(const stReqReceiveReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqReceiveReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqReceiveReward::~stReqReceiveReward() {
  SharedDtor();
}

void stReqReceiveReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqReceiveReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqReceiveReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveReward_descriptor_;
}

const stReqReceiveReward& stReqReceiveReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqReceiveReward* stReqReceiveReward::default_instance_ = NULL;

stReqReceiveReward* stReqReceiveReward::New() const {
  return new stReqReceiveReward;
}

void stReqReceiveReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqReceiveReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqReceiveReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqReceiveReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqReceiveReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqReceiveReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqReceiveReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqReceiveReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqReceiveReward::MergeFrom(const stReqReceiveReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqReceiveReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqReceiveReward::CopyFrom(const stReqReceiveReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqReceiveReward::IsInitialized() const {

  return true;
}

void stReqReceiveReward::Swap(stReqReceiveReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqReceiveReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqReceiveReward_descriptor_;
  metadata.reflection = stReqReceiveReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReceiveRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveRewardResult_eResult_descriptor_;
}
bool stReceiveRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveRewardResult_eResult stReceiveRewardResult::eSuccess;
const stReceiveRewardResult_eResult stReceiveRewardResult::eHas_Got_Reward;
const stReceiveRewardResult_eResult stReceiveRewardResult::eRecharge_Not_Enough;
const stReceiveRewardResult_eResult stReceiveRewardResult::eBag_Full;
const stReceiveRewardResult_eResult stReceiveRewardResult::eInner_Error;
const stReceiveRewardResult_eResult stReceiveRewardResult::eIs_Not_Open;
const stReceiveRewardResult_eResult stReceiveRewardResult::eResult_MIN;
const stReceiveRewardResult_eResult stReceiveRewardResult::eResult_MAX;
const int stReceiveRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReceiveRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveRewardResult_ProtoModID_descriptor_;
}
bool stReceiveRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveRewardResult_ProtoModID stReceiveRewardResult::ModID;
const stReceiveRewardResult_ProtoModID stReceiveRewardResult::ProtoModID_MIN;
const stReceiveRewardResult_ProtoModID stReceiveRewardResult::ProtoModID_MAX;
const int stReceiveRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReceiveRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveRewardResult_ProtoFunID_descriptor_;
}
bool stReceiveRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 219:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveRewardResult_ProtoFunID stReceiveRewardResult::FunID;
const stReceiveRewardResult_ProtoFunID stReceiveRewardResult::ProtoFunID_MIN;
const stReceiveRewardResult_ProtoFunID stReceiveRewardResult::ProtoFunID_MAX;
const int stReceiveRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReceiveRewardResult::kResultFieldNumber;
#endif  // !_MSC_VER

stReceiveRewardResult::stReceiveRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReceiveRewardResult::InitAsDefaultInstance() {
}

stReceiveRewardResult::stReceiveRewardResult(const stReceiveRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReceiveRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReceiveRewardResult::~stReceiveRewardResult() {
  SharedDtor();
}

void stReceiveRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReceiveRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReceiveRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveRewardResult_descriptor_;
}

const stReceiveRewardResult& stReceiveRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReceiveRewardResult* stReceiveRewardResult::default_instance_ = NULL;

stReceiveRewardResult* stReceiveRewardResult::New() const {
  return new stReceiveRewardResult;
}

void stReceiveRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReceiveRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stReceiveRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stReceiveRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stReceiveRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReceiveRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stReceiveRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReceiveRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stReceiveRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReceiveRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stReceiveRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReceiveRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReceiveRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReceiveRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReceiveRewardResult::MergeFrom(const stReceiveRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReceiveRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReceiveRewardResult::CopyFrom(const stReceiveRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReceiveRewardResult::IsInitialized() const {

  return true;
}

void stReceiveRewardResult::Swap(stReceiveRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReceiveRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReceiveRewardResult_descriptor_;
  metadata.reflection = stReceiveRewardResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAcitivityLimitPetItem::kIdFieldNumber;
const int stAcitivityLimitPetItem::kActiviyIdFieldNumber;
const int stAcitivityLimitPetItem::kStartTimeFieldNumber;
const int stAcitivityLimitPetItem::kEndTimeFieldNumber;
#endif  // !_MSC_VER

stAcitivityLimitPetItem::stAcitivityLimitPetItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAcitivityLimitPetItem::InitAsDefaultInstance() {
}

stAcitivityLimitPetItem::stAcitivityLimitPetItem(const stAcitivityLimitPetItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAcitivityLimitPetItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  activiyid_ = 0u;
  starttime_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAcitivityLimitPetItem::~stAcitivityLimitPetItem() {
  SharedDtor();
}

void stAcitivityLimitPetItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAcitivityLimitPetItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAcitivityLimitPetItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAcitivityLimitPetItem_descriptor_;
}

const stAcitivityLimitPetItem& stAcitivityLimitPetItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stAcitivityLimitPetItem* stAcitivityLimitPetItem::default_instance_ = NULL;

stAcitivityLimitPetItem* stAcitivityLimitPetItem::New() const {
  return new stAcitivityLimitPetItem;
}

void stAcitivityLimitPetItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    activiyid_ = 0u;
    starttime_ = 0u;
    endtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAcitivityLimitPetItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activiyId;
        break;
      }

      // optional uint32 activiyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activiyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activiyid_)));
          set_has_activiyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }

      // optional uint32 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endTime;
        break;
      }

      // optional uint32 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAcitivityLimitPetItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 activiyId = 2;
  if (has_activiyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activiyid(), output);
  }

  // optional uint32 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starttime(), output);
  }

  // optional uint32 endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAcitivityLimitPetItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 activiyId = 2;
  if (has_activiyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activiyid(), target);
  }

  // optional uint32 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starttime(), target);
  }

  // optional uint32 endTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAcitivityLimitPetItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 activiyId = 2;
    if (has_activiyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activiyid());
    }

    // optional uint32 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAcitivityLimitPetItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAcitivityLimitPetItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAcitivityLimitPetItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAcitivityLimitPetItem::MergeFrom(const stAcitivityLimitPetItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_activiyid()) {
      set_activiyid(from.activiyid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAcitivityLimitPetItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAcitivityLimitPetItem::CopyFrom(const stAcitivityLimitPetItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAcitivityLimitPetItem::IsInitialized() const {

  return true;
}

void stAcitivityLimitPetItem::Swap(stAcitivityLimitPetItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(activiyid_, other->activiyid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAcitivityLimitPetItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAcitivityLimitPetItem_descriptor_;
  metadata.reflection = stAcitivityLimitPetItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendAllAcitivityLimitPet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendAllAcitivityLimitPet_ProtoModID_descriptor_;
}
bool stSendAllAcitivityLimitPet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendAllAcitivityLimitPet_ProtoModID stSendAllAcitivityLimitPet::ModID;
const stSendAllAcitivityLimitPet_ProtoModID stSendAllAcitivityLimitPet::ProtoModID_MIN;
const stSendAllAcitivityLimitPet_ProtoModID stSendAllAcitivityLimitPet::ProtoModID_MAX;
const int stSendAllAcitivityLimitPet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendAllAcitivityLimitPet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendAllAcitivityLimitPet_ProtoFunID_descriptor_;
}
bool stSendAllAcitivityLimitPet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 220:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendAllAcitivityLimitPet_ProtoFunID stSendAllAcitivityLimitPet::FunID;
const stSendAllAcitivityLimitPet_ProtoFunID stSendAllAcitivityLimitPet::ProtoFunID_MIN;
const stSendAllAcitivityLimitPet_ProtoFunID stSendAllAcitivityLimitPet::ProtoFunID_MAX;
const int stSendAllAcitivityLimitPet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendAllAcitivityLimitPet::kItemFieldNumber;
#endif  // !_MSC_VER

stSendAllAcitivityLimitPet::stSendAllAcitivityLimitPet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendAllAcitivityLimitPet::InitAsDefaultInstance() {
}

stSendAllAcitivityLimitPet::stSendAllAcitivityLimitPet(const stSendAllAcitivityLimitPet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendAllAcitivityLimitPet::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendAllAcitivityLimitPet::~stSendAllAcitivityLimitPet() {
  SharedDtor();
}

void stSendAllAcitivityLimitPet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendAllAcitivityLimitPet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendAllAcitivityLimitPet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendAllAcitivityLimitPet_descriptor_;
}

const stSendAllAcitivityLimitPet& stSendAllAcitivityLimitPet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSendAllAcitivityLimitPet* stSendAllAcitivityLimitPet::default_instance_ = NULL;

stSendAllAcitivityLimitPet* stSendAllAcitivityLimitPet::New() const {
  return new stSendAllAcitivityLimitPet;
}

void stSendAllAcitivityLimitPet::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendAllAcitivityLimitPet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stAcitivityLimitPetItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendAllAcitivityLimitPet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stAcitivityLimitPetItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendAllAcitivityLimitPet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stAcitivityLimitPetItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendAllAcitivityLimitPet::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stAcitivityLimitPetItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendAllAcitivityLimitPet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendAllAcitivityLimitPet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendAllAcitivityLimitPet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendAllAcitivityLimitPet::MergeFrom(const stSendAllAcitivityLimitPet& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendAllAcitivityLimitPet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendAllAcitivityLimitPet::CopyFrom(const stSendAllAcitivityLimitPet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendAllAcitivityLimitPet::IsInitialized() const {

  return true;
}

void stSendAllAcitivityLimitPet::Swap(stSendAllAcitivityLimitPet* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendAllAcitivityLimitPet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendAllAcitivityLimitPet_descriptor_;
  metadata.reflection = stSendAllAcitivityLimitPet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendLateWalfareActivity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLateWalfareActivity_ProtoModID_descriptor_;
}
bool stSendLateWalfareActivity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendLateWalfareActivity_ProtoModID stSendLateWalfareActivity::ModID;
const stSendLateWalfareActivity_ProtoModID stSendLateWalfareActivity::ProtoModID_MIN;
const stSendLateWalfareActivity_ProtoModID stSendLateWalfareActivity::ProtoModID_MAX;
const int stSendLateWalfareActivity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendLateWalfareActivity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLateWalfareActivity_ProtoFunID_descriptor_;
}
bool stSendLateWalfareActivity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 221:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendLateWalfareActivity_ProtoFunID stSendLateWalfareActivity::FunID;
const stSendLateWalfareActivity_ProtoFunID stSendLateWalfareActivity::ProtoFunID_MIN;
const stSendLateWalfareActivity_ProtoFunID stSendLateWalfareActivity::ProtoFunID_MAX;
const int stSendLateWalfareActivity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendLateWalfareActivity::kIdFieldNumber;
const int stSendLateWalfareActivity::kExpireTimeFieldNumber;
const int stSendLateWalfareActivity::kRewardIdFieldNumber;
#endif  // !_MSC_VER

stSendLateWalfareActivity::stSendLateWalfareActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendLateWalfareActivity::InitAsDefaultInstance() {
}

stSendLateWalfareActivity::stSendLateWalfareActivity(const stSendLateWalfareActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendLateWalfareActivity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  expiretime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendLateWalfareActivity::~stSendLateWalfareActivity() {
  SharedDtor();
}

void stSendLateWalfareActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendLateWalfareActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendLateWalfareActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLateWalfareActivity_descriptor_;
}

const stSendLateWalfareActivity& stSendLateWalfareActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSendLateWalfareActivity* stSendLateWalfareActivity::default_instance_ = NULL;

stSendLateWalfareActivity* stSendLateWalfareActivity::New() const {
  return new stSendLateWalfareActivity;
}

void stSendLateWalfareActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    expiretime_ = 0u;
  }
  rewardid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendLateWalfareActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expireTime;
        break;
      }

      // optional uint32 expireTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardId;
        break;
      }

      // repeated uint32 rewardId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_rewardid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendLateWalfareActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 expireTime = 2;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expiretime(), output);
  }

  // repeated uint32 rewardId = 3;
  for (int i = 0; i < this->rewardid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rewardid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendLateWalfareActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 expireTime = 2;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expiretime(), target);
  }

  // repeated uint32 rewardId = 3;
  for (int i = 0; i < this->rewardid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->rewardid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendLateWalfareActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 expireTime = 2;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }

  }
  // repeated uint32 rewardId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardid(i));
    }
    total_size += 1 * this->rewardid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendLateWalfareActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendLateWalfareActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendLateWalfareActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendLateWalfareActivity::MergeFrom(const stSendLateWalfareActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardid_.MergeFrom(from.rewardid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendLateWalfareActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendLateWalfareActivity::CopyFrom(const stSendLateWalfareActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendLateWalfareActivity::IsInitialized() const {

  return true;
}

void stSendLateWalfareActivity::Swap(stSendLateWalfareActivity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(expiretime_, other->expiretime_);
    rewardid_.Swap(&other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendLateWalfareActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendLateWalfareActivity_descriptor_;
  metadata.reflection = stSendLateWalfareActivity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawLateWalfare_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawLateWalfare_ProtoModID_descriptor_;
}
bool stReqDrawLateWalfare_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawLateWalfare_ProtoModID stReqDrawLateWalfare::ModID;
const stReqDrawLateWalfare_ProtoModID stReqDrawLateWalfare::ProtoModID_MIN;
const stReqDrawLateWalfare_ProtoModID stReqDrawLateWalfare::ProtoModID_MAX;
const int stReqDrawLateWalfare::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawLateWalfare_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawLateWalfare_ProtoFunID_descriptor_;
}
bool stReqDrawLateWalfare_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 222:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawLateWalfare_ProtoFunID stReqDrawLateWalfare::FunID;
const stReqDrawLateWalfare_ProtoFunID stReqDrawLateWalfare::ProtoFunID_MIN;
const stReqDrawLateWalfare_ProtoFunID stReqDrawLateWalfare::ProtoFunID_MAX;
const int stReqDrawLateWalfare::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawLateWalfare::kRewardIdFieldNumber;
#endif  // !_MSC_VER

stReqDrawLateWalfare::stReqDrawLateWalfare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawLateWalfare::InitAsDefaultInstance() {
}

stReqDrawLateWalfare::stReqDrawLateWalfare(const stReqDrawLateWalfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawLateWalfare::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawLateWalfare::~stReqDrawLateWalfare() {
  SharedDtor();
}

void stReqDrawLateWalfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawLateWalfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawLateWalfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawLateWalfare_descriptor_;
}

const stReqDrawLateWalfare& stReqDrawLateWalfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDrawLateWalfare* stReqDrawLateWalfare::default_instance_ = NULL;

stReqDrawLateWalfare* stReqDrawLateWalfare::New() const {
  return new stReqDrawLateWalfare;
}

void stReqDrawLateWalfare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawLateWalfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rewardId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawLateWalfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawLateWalfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawLateWalfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawLateWalfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawLateWalfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawLateWalfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawLateWalfare::MergeFrom(const stReqDrawLateWalfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawLateWalfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawLateWalfare::CopyFrom(const stReqDrawLateWalfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawLateWalfare::IsInitialized() const {

  return true;
}

void stReqDrawLateWalfare::Swap(stReqDrawLateWalfare* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawLateWalfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawLateWalfare_descriptor_;
  metadata.reflection = stReqDrawLateWalfare_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDrawLateWalfare_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawLateWalfare_eResult_descriptor_;
}
bool stRetDrawLateWalfare_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawLateWalfare_eResult stRetDrawLateWalfare::eSuccess;
const stRetDrawLateWalfare_eResult stRetDrawLateWalfare::eNot_Open;
const stRetDrawLateWalfare_eResult stRetDrawLateWalfare::eAlread_Draw;
const stRetDrawLateWalfare_eResult stRetDrawLateWalfare::eActivity_Expire;
const stRetDrawLateWalfare_eResult stRetDrawLateWalfare::eNo_Such_Id;
const stRetDrawLateWalfare_eResult stRetDrawLateWalfare::eDiamond_Not_Enough;
const stRetDrawLateWalfare_eResult stRetDrawLateWalfare::eResult_MIN;
const stRetDrawLateWalfare_eResult stRetDrawLateWalfare::eResult_MAX;
const int stRetDrawLateWalfare::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawLateWalfare_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawLateWalfare_ProtoModID_descriptor_;
}
bool stRetDrawLateWalfare_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawLateWalfare_ProtoModID stRetDrawLateWalfare::ModID;
const stRetDrawLateWalfare_ProtoModID stRetDrawLateWalfare::ProtoModID_MIN;
const stRetDrawLateWalfare_ProtoModID stRetDrawLateWalfare::ProtoModID_MAX;
const int stRetDrawLateWalfare::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawLateWalfare_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawLateWalfare_ProtoFunID_descriptor_;
}
bool stRetDrawLateWalfare_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 223:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawLateWalfare_ProtoFunID stRetDrawLateWalfare::FunID;
const stRetDrawLateWalfare_ProtoFunID stRetDrawLateWalfare::ProtoFunID_MIN;
const stRetDrawLateWalfare_ProtoFunID stRetDrawLateWalfare::ProtoFunID_MAX;
const int stRetDrawLateWalfare::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDrawLateWalfare::kRewardIdFieldNumber;
const int stRetDrawLateWalfare::kResultFieldNumber;
#endif  // !_MSC_VER

stRetDrawLateWalfare::stRetDrawLateWalfare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDrawLateWalfare::InitAsDefaultInstance() {
}

stRetDrawLateWalfare::stRetDrawLateWalfare(const stRetDrawLateWalfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDrawLateWalfare::SharedCtor() {
  _cached_size_ = 0;
  rewardid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDrawLateWalfare::~stRetDrawLateWalfare() {
  SharedDtor();
}

void stRetDrawLateWalfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDrawLateWalfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDrawLateWalfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawLateWalfare_descriptor_;
}

const stRetDrawLateWalfare& stRetDrawLateWalfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDrawLateWalfare* stRetDrawLateWalfare::default_instance_ = NULL;

stRetDrawLateWalfare* stRetDrawLateWalfare::New() const {
  return new stRetDrawLateWalfare;
}

void stRetDrawLateWalfare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDrawLateWalfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rewardId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .MiscProto.stRetDrawLateWalfare.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetDrawLateWalfare_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetDrawLateWalfare_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDrawLateWalfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rewardId = 1;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rewardid(), output);
  }

  // optional .MiscProto.stRetDrawLateWalfare.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDrawLateWalfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rewardId = 1;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rewardid(), target);
  }

  // optional .MiscProto.stRetDrawLateWalfare.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDrawLateWalfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rewardId = 1;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

    // optional .MiscProto.stRetDrawLateWalfare.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDrawLateWalfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDrawLateWalfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDrawLateWalfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDrawLateWalfare::MergeFrom(const stRetDrawLateWalfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDrawLateWalfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDrawLateWalfare::CopyFrom(const stRetDrawLateWalfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDrawLateWalfare::IsInitialized() const {

  return true;
}

void stRetDrawLateWalfare::Swap(stRetDrawLateWalfare* other) {
  if (other != this) {
    std::swap(rewardid_, other->rewardid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDrawLateWalfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDrawLateWalfare_descriptor_;
  metadata.reflection = stRetDrawLateWalfare_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stResGetBackItem::kTypeFieldNumber;
const int stResGetBackItem::kNumFieldNumber;
#endif  // !_MSC_VER

stResGetBackItem::stResGetBackItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResGetBackItem::InitAsDefaultInstance() {
}

stResGetBackItem::stResGetBackItem(const stResGetBackItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResGetBackItem::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResGetBackItem::~stResGetBackItem() {
  SharedDtor();
}

void stResGetBackItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stResGetBackItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResGetBackItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResGetBackItem_descriptor_;
}

const stResGetBackItem& stResGetBackItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stResGetBackItem* stResGetBackItem::default_instance_ = NULL;

stResGetBackItem* stResGetBackItem::New() const {
  return new stResGetBackItem;
}

void stResGetBackItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResGetBackItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResGetBackItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResGetBackItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResGetBackItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResGetBackItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResGetBackItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResGetBackItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResGetBackItem::MergeFrom(const stResGetBackItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResGetBackItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResGetBackItem::CopyFrom(const stResGetBackItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResGetBackItem::IsInitialized() const {

  return true;
}

void stResGetBackItem::Swap(stResGetBackItem* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResGetBackItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResGetBackItem_descriptor_;
  metadata.reflection = stResGetBackItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendAllResGetBack_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendAllResGetBack_ProtoModID_descriptor_;
}
bool stSendAllResGetBack_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendAllResGetBack_ProtoModID stSendAllResGetBack::ModID;
const stSendAllResGetBack_ProtoModID stSendAllResGetBack::ProtoModID_MIN;
const stSendAllResGetBack_ProtoModID stSendAllResGetBack::ProtoModID_MAX;
const int stSendAllResGetBack::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendAllResGetBack_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendAllResGetBack_ProtoFunID_descriptor_;
}
bool stSendAllResGetBack_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 224:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendAllResGetBack_ProtoFunID stSendAllResGetBack::FunID;
const stSendAllResGetBack_ProtoFunID stSendAllResGetBack::ProtoFunID_MIN;
const stSendAllResGetBack_ProtoFunID stSendAllResGetBack::ProtoFunID_MAX;
const int stSendAllResGetBack::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendAllResGetBack::kItemFieldNumber;
#endif  // !_MSC_VER

stSendAllResGetBack::stSendAllResGetBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendAllResGetBack::InitAsDefaultInstance() {
}

stSendAllResGetBack::stSendAllResGetBack(const stSendAllResGetBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendAllResGetBack::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendAllResGetBack::~stSendAllResGetBack() {
  SharedDtor();
}

void stSendAllResGetBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendAllResGetBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendAllResGetBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendAllResGetBack_descriptor_;
}

const stSendAllResGetBack& stSendAllResGetBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSendAllResGetBack* stSendAllResGetBack::default_instance_ = NULL;

stSendAllResGetBack* stSendAllResGetBack::New() const {
  return new stSendAllResGetBack;
}

void stSendAllResGetBack::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendAllResGetBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stResGetBackItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendAllResGetBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stResGetBackItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendAllResGetBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stResGetBackItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendAllResGetBack::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stResGetBackItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendAllResGetBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendAllResGetBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendAllResGetBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendAllResGetBack::MergeFrom(const stSendAllResGetBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendAllResGetBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendAllResGetBack::CopyFrom(const stSendAllResGetBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendAllResGetBack::IsInitialized() const {

  return true;
}

void stSendAllResGetBack::Swap(stSendAllResGetBack* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendAllResGetBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendAllResGetBack_descriptor_;
  metadata.reflection = stSendAllResGetBack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawResGetBack_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawResGetBack_ProtoModID_descriptor_;
}
bool stReqDrawResGetBack_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawResGetBack_ProtoModID stReqDrawResGetBack::ModID;
const stReqDrawResGetBack_ProtoModID stReqDrawResGetBack::ProtoModID_MIN;
const stReqDrawResGetBack_ProtoModID stReqDrawResGetBack::ProtoModID_MAX;
const int stReqDrawResGetBack::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawResGetBack_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawResGetBack_ProtoFunID_descriptor_;
}
bool stReqDrawResGetBack_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 225:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawResGetBack_ProtoFunID stReqDrawResGetBack::FunID;
const stReqDrawResGetBack_ProtoFunID stReqDrawResGetBack::ProtoFunID_MIN;
const stReqDrawResGetBack_ProtoFunID stReqDrawResGetBack::ProtoFunID_MAX;
const int stReqDrawResGetBack::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawResGetBack::kTypeFieldNumber;
const int stReqDrawResGetBack::kNumFieldNumber;
#endif  // !_MSC_VER

stReqDrawResGetBack::stReqDrawResGetBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawResGetBack::InitAsDefaultInstance() {
}

stReqDrawResGetBack::stReqDrawResGetBack(const stReqDrawResGetBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawResGetBack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawResGetBack::~stReqDrawResGetBack() {
  SharedDtor();
}

void stReqDrawResGetBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawResGetBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawResGetBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawResGetBack_descriptor_;
}

const stReqDrawResGetBack& stReqDrawResGetBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDrawResGetBack* stReqDrawResGetBack::default_instance_ = NULL;

stReqDrawResGetBack* stReqDrawResGetBack::New() const {
  return new stReqDrawResGetBack;
}

void stReqDrawResGetBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawResGetBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawResGetBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawResGetBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawResGetBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawResGetBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawResGetBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawResGetBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawResGetBack::MergeFrom(const stReqDrawResGetBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawResGetBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawResGetBack::CopyFrom(const stReqDrawResGetBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawResGetBack::IsInitialized() const {

  return true;
}

void stReqDrawResGetBack::Swap(stReqDrawResGetBack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawResGetBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawResGetBack_descriptor_;
  metadata.reflection = stReqDrawResGetBack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDrawResGetBack_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawResGetBack_eResult_descriptor_;
}
bool stRetDrawResGetBack_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawResGetBack_eResult stRetDrawResGetBack::eSuccess;
const stRetDrawResGetBack_eResult stRetDrawResGetBack::eAlread_Draw;
const stRetDrawResGetBack_eResult stRetDrawResGetBack::eNo_Such_Type;
const stRetDrawResGetBack_eResult stRetDrawResGetBack::eDiamond_Not_Enough;
const stRetDrawResGetBack_eResult stRetDrawResGetBack::eTimes_Not_Enough;
const stRetDrawResGetBack_eResult stRetDrawResGetBack::eResult_MIN;
const stRetDrawResGetBack_eResult stRetDrawResGetBack::eResult_MAX;
const int stRetDrawResGetBack::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawResGetBack_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawResGetBack_ProtoModID_descriptor_;
}
bool stRetDrawResGetBack_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawResGetBack_ProtoModID stRetDrawResGetBack::ModID;
const stRetDrawResGetBack_ProtoModID stRetDrawResGetBack::ProtoModID_MIN;
const stRetDrawResGetBack_ProtoModID stRetDrawResGetBack::ProtoModID_MAX;
const int stRetDrawResGetBack::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawResGetBack_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawResGetBack_ProtoFunID_descriptor_;
}
bool stRetDrawResGetBack_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 226:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawResGetBack_ProtoFunID stRetDrawResGetBack::FunID;
const stRetDrawResGetBack_ProtoFunID stRetDrawResGetBack::ProtoFunID_MIN;
const stRetDrawResGetBack_ProtoFunID stRetDrawResGetBack::ProtoFunID_MAX;
const int stRetDrawResGetBack::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDrawResGetBack::kTypeFieldNumber;
const int stRetDrawResGetBack::kNumFieldNumber;
const int stRetDrawResGetBack::kResultFieldNumber;
#endif  // !_MSC_VER

stRetDrawResGetBack::stRetDrawResGetBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDrawResGetBack::InitAsDefaultInstance() {
}

stRetDrawResGetBack::stRetDrawResGetBack(const stRetDrawResGetBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDrawResGetBack::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  num_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDrawResGetBack::~stRetDrawResGetBack() {
  SharedDtor();
}

void stRetDrawResGetBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDrawResGetBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDrawResGetBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawResGetBack_descriptor_;
}

const stRetDrawResGetBack& stRetDrawResGetBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDrawResGetBack* stRetDrawResGetBack::default_instance_ = NULL;

stRetDrawResGetBack* stRetDrawResGetBack::New() const {
  return new stRetDrawResGetBack;
}

void stRetDrawResGetBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    num_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDrawResGetBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional .MiscProto.stRetDrawResGetBack.eResult result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetDrawResGetBack_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetDrawResGetBack_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDrawResGetBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional .MiscProto.stRetDrawResGetBack.eResult result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDrawResGetBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional .MiscProto.stRetDrawResGetBack.eResult result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDrawResGetBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional .MiscProto.stRetDrawResGetBack.eResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDrawResGetBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDrawResGetBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDrawResGetBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDrawResGetBack::MergeFrom(const stRetDrawResGetBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDrawResGetBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDrawResGetBack::CopyFrom(const stRetDrawResGetBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDrawResGetBack::IsInitialized() const {

  return true;
}

void stRetDrawResGetBack::Swap(stRetDrawResGetBack* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDrawResGetBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDrawResGetBack_descriptor_;
  metadata.reflection = stRetDrawResGetBack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawAllResGetBack_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawAllResGetBack_ProtoModID_descriptor_;
}
bool stReqDrawAllResGetBack_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawAllResGetBack_ProtoModID stReqDrawAllResGetBack::ModID;
const stReqDrawAllResGetBack_ProtoModID stReqDrawAllResGetBack::ProtoModID_MIN;
const stReqDrawAllResGetBack_ProtoModID stReqDrawAllResGetBack::ProtoModID_MAX;
const int stReqDrawAllResGetBack::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawAllResGetBack_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawAllResGetBack_ProtoFunID_descriptor_;
}
bool stReqDrawAllResGetBack_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 227:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawAllResGetBack_ProtoFunID stReqDrawAllResGetBack::FunID;
const stReqDrawAllResGetBack_ProtoFunID stReqDrawAllResGetBack::ProtoFunID_MIN;
const stReqDrawAllResGetBack_ProtoFunID stReqDrawAllResGetBack::ProtoFunID_MAX;
const int stReqDrawAllResGetBack::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawAllResGetBack::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqDrawAllResGetBack::stReqDrawAllResGetBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawAllResGetBack::InitAsDefaultInstance() {
}

stReqDrawAllResGetBack::stReqDrawAllResGetBack(const stReqDrawAllResGetBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawAllResGetBack::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawAllResGetBack::~stReqDrawAllResGetBack() {
  SharedDtor();
}

void stReqDrawAllResGetBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawAllResGetBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawAllResGetBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawAllResGetBack_descriptor_;
}

const stReqDrawAllResGetBack& stReqDrawAllResGetBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqDrawAllResGetBack* stReqDrawAllResGetBack::default_instance_ = NULL;

stReqDrawAllResGetBack* stReqDrawAllResGetBack::New() const {
  return new stReqDrawAllResGetBack;
}

void stReqDrawAllResGetBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawAllResGetBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawAllResGetBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawAllResGetBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawAllResGetBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawAllResGetBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawAllResGetBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawAllResGetBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawAllResGetBack::MergeFrom(const stReqDrawAllResGetBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawAllResGetBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawAllResGetBack::CopyFrom(const stReqDrawAllResGetBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawAllResGetBack::IsInitialized() const {

  return true;
}

void stReqDrawAllResGetBack::Swap(stReqDrawAllResGetBack* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawAllResGetBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawAllResGetBack_descriptor_;
  metadata.reflection = stReqDrawAllResGetBack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDrawAllResGetBack_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawAllResGetBack_eResult_descriptor_;
}
bool stRetDrawAllResGetBack_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawAllResGetBack_eResult stRetDrawAllResGetBack::eSuccess;
const stRetDrawAllResGetBack_eResult stRetDrawAllResGetBack::eNo_Res_Back;
const stRetDrawAllResGetBack_eResult stRetDrawAllResGetBack::eDiamond_Not_Enough;
const stRetDrawAllResGetBack_eResult stRetDrawAllResGetBack::eResult_MIN;
const stRetDrawAllResGetBack_eResult stRetDrawAllResGetBack::eResult_MAX;
const int stRetDrawAllResGetBack::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawAllResGetBack_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawAllResGetBack_ProtoModID_descriptor_;
}
bool stRetDrawAllResGetBack_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawAllResGetBack_ProtoModID stRetDrawAllResGetBack::ModID;
const stRetDrawAllResGetBack_ProtoModID stRetDrawAllResGetBack::ProtoModID_MIN;
const stRetDrawAllResGetBack_ProtoModID stRetDrawAllResGetBack::ProtoModID_MAX;
const int stRetDrawAllResGetBack::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDrawAllResGetBack_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawAllResGetBack_ProtoFunID_descriptor_;
}
bool stRetDrawAllResGetBack_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 228:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDrawAllResGetBack_ProtoFunID stRetDrawAllResGetBack::FunID;
const stRetDrawAllResGetBack_ProtoFunID stRetDrawAllResGetBack::ProtoFunID_MIN;
const stRetDrawAllResGetBack_ProtoFunID stRetDrawAllResGetBack::ProtoFunID_MAX;
const int stRetDrawAllResGetBack::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDrawAllResGetBack::kResultFieldNumber;
#endif  // !_MSC_VER

stRetDrawAllResGetBack::stRetDrawAllResGetBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDrawAllResGetBack::InitAsDefaultInstance() {
}

stRetDrawAllResGetBack::stRetDrawAllResGetBack(const stRetDrawAllResGetBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDrawAllResGetBack::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDrawAllResGetBack::~stRetDrawAllResGetBack() {
  SharedDtor();
}

void stRetDrawAllResGetBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDrawAllResGetBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDrawAllResGetBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDrawAllResGetBack_descriptor_;
}

const stRetDrawAllResGetBack& stRetDrawAllResGetBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetDrawAllResGetBack* stRetDrawAllResGetBack::default_instance_ = NULL;

stRetDrawAllResGetBack* stRetDrawAllResGetBack::New() const {
  return new stRetDrawAllResGetBack;
}

void stRetDrawAllResGetBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDrawAllResGetBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRetDrawAllResGetBack.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetDrawAllResGetBack_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetDrawAllResGetBack_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDrawAllResGetBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRetDrawAllResGetBack.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDrawAllResGetBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRetDrawAllResGetBack.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDrawAllResGetBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRetDrawAllResGetBack.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDrawAllResGetBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDrawAllResGetBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDrawAllResGetBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDrawAllResGetBack::MergeFrom(const stRetDrawAllResGetBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDrawAllResGetBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDrawAllResGetBack::CopyFrom(const stRetDrawAllResGetBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDrawAllResGetBack::IsInitialized() const {

  return true;
}

void stRetDrawAllResGetBack::Swap(stRetDrawAllResGetBack* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDrawAllResGetBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDrawAllResGetBack_descriptor_;
  metadata.reflection = stRetDrawAllResGetBack_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenMonsterWindow_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenMonsterWindow_ProtoModID_descriptor_;
}
bool stReqOpenMonsterWindow_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenMonsterWindow_ProtoModID stReqOpenMonsterWindow::ModID;
const stReqOpenMonsterWindow_ProtoModID stReqOpenMonsterWindow::ProtoModID_MIN;
const stReqOpenMonsterWindow_ProtoModID stReqOpenMonsterWindow::ProtoModID_MAX;
const int stReqOpenMonsterWindow::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenMonsterWindow_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenMonsterWindow_ProtoFunID_descriptor_;
}
bool stReqOpenMonsterWindow_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 229:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenMonsterWindow_ProtoFunID stReqOpenMonsterWindow::FunID;
const stReqOpenMonsterWindow_ProtoFunID stReqOpenMonsterWindow::ProtoFunID_MIN;
const stReqOpenMonsterWindow_ProtoFunID stReqOpenMonsterWindow::ProtoFunID_MAX;
const int stReqOpenMonsterWindow::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenMonsterWindow::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenMonsterWindow::stReqOpenMonsterWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenMonsterWindow::InitAsDefaultInstance() {
}

stReqOpenMonsterWindow::stReqOpenMonsterWindow(const stReqOpenMonsterWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenMonsterWindow::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenMonsterWindow::~stReqOpenMonsterWindow() {
  SharedDtor();
}

void stReqOpenMonsterWindow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenMonsterWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenMonsterWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenMonsterWindow_descriptor_;
}

const stReqOpenMonsterWindow& stReqOpenMonsterWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqOpenMonsterWindow* stReqOpenMonsterWindow::default_instance_ = NULL;

stReqOpenMonsterWindow* stReqOpenMonsterWindow::New() const {
  return new stReqOpenMonsterWindow;
}

void stReqOpenMonsterWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenMonsterWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenMonsterWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenMonsterWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenMonsterWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenMonsterWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenMonsterWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenMonsterWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenMonsterWindow::MergeFrom(const stReqOpenMonsterWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenMonsterWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenMonsterWindow::CopyFrom(const stReqOpenMonsterWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenMonsterWindow::IsInitialized() const {

  return true;
}

void stReqOpenMonsterWindow::Swap(stReqOpenMonsterWindow* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenMonsterWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenMonsterWindow_descriptor_;
  metadata.reflection = stReqOpenMonsterWindow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOpenMonsterWindowResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenMonsterWindowResult_ProtoModID_descriptor_;
}
bool stOpenMonsterWindowResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenMonsterWindowResult_ProtoModID stOpenMonsterWindowResult::ModID;
const stOpenMonsterWindowResult_ProtoModID stOpenMonsterWindowResult::ProtoModID_MIN;
const stOpenMonsterWindowResult_ProtoModID stOpenMonsterWindowResult::ProtoModID_MAX;
const int stOpenMonsterWindowResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenMonsterWindowResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenMonsterWindowResult_ProtoFunID_descriptor_;
}
bool stOpenMonsterWindowResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 230:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenMonsterWindowResult_ProtoFunID stOpenMonsterWindowResult::FunID;
const stOpenMonsterWindowResult_ProtoFunID stOpenMonsterWindowResult::ProtoFunID_MIN;
const stOpenMonsterWindowResult_ProtoFunID stOpenMonsterWindowResult::ProtoFunID_MAX;
const int stOpenMonsterWindowResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOpenMonsterWindowResult::kBossLvFieldNumber;
const int stOpenMonsterWindowResult::kBossHpFieldNumber;
const int stOpenMonsterWindowResult::kTimeFieldNumber;
const int stOpenMonsterWindowResult::kAttackTimeFieldNumber;
const int stOpenMonsterWindowResult::kBuyTimeFieldNumber;
#endif  // !_MSC_VER

stOpenMonsterWindowResult::stOpenMonsterWindowResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOpenMonsterWindowResult::InitAsDefaultInstance() {
}

stOpenMonsterWindowResult::stOpenMonsterWindowResult(const stOpenMonsterWindowResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOpenMonsterWindowResult::SharedCtor() {
  _cached_size_ = 0;
  bosslv_ = 0u;
  bosshp_ = 0u;
  time_ = 0u;
  attacktime_ = 0u;
  buytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOpenMonsterWindowResult::~stOpenMonsterWindowResult() {
  SharedDtor();
}

void stOpenMonsterWindowResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOpenMonsterWindowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOpenMonsterWindowResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenMonsterWindowResult_descriptor_;
}

const stOpenMonsterWindowResult& stOpenMonsterWindowResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stOpenMonsterWindowResult* stOpenMonsterWindowResult::default_instance_ = NULL;

stOpenMonsterWindowResult* stOpenMonsterWindowResult::New() const {
  return new stOpenMonsterWindowResult;
}

void stOpenMonsterWindowResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bosslv_ = 0u;
    bosshp_ = 0u;
    time_ = 0u;
    attacktime_ = 0u;
    buytime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOpenMonsterWindowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bossLv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslv_)));
          set_has_bosslv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossHp;
        break;
      }

      // optional uint32 bossHp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossHp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosshp_)));
          set_has_bosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attackTime;
        break;
      }

      // optional uint32 attackTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacktime_)));
          set_has_attacktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buyTime;
        break;
      }

      // optional uint32 buyTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOpenMonsterWindowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bossLv = 1;
  if (has_bosslv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bosslv(), output);
  }

  // optional uint32 bossHp = 2;
  if (has_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bosshp(), output);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time(), output);
  }

  // optional uint32 attackTime = 4;
  if (has_attacktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attacktime(), output);
  }

  // optional uint32 buyTime = 5;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->buytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOpenMonsterWindowResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bossLv = 1;
  if (has_bosslv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bosslv(), target);
  }

  // optional uint32 bossHp = 2;
  if (has_bosshp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bosshp(), target);
  }

  // optional uint32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time(), target);
  }

  // optional uint32 attackTime = 4;
  if (has_attacktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attacktime(), target);
  }

  // optional uint32 buyTime = 5;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->buytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOpenMonsterWindowResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bossLv = 1;
    if (has_bosslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslv());
    }

    // optional uint32 bossHp = 2;
    if (has_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosshp());
    }

    // optional uint32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 attackTime = 4;
    if (has_attacktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacktime());
    }

    // optional uint32 buyTime = 5;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOpenMonsterWindowResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOpenMonsterWindowResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOpenMonsterWindowResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOpenMonsterWindowResult::MergeFrom(const stOpenMonsterWindowResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bosslv()) {
      set_bosslv(from.bosslv());
    }
    if (from.has_bosshp()) {
      set_bosshp(from.bosshp());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_attacktime()) {
      set_attacktime(from.attacktime());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOpenMonsterWindowResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOpenMonsterWindowResult::CopyFrom(const stOpenMonsterWindowResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOpenMonsterWindowResult::IsInitialized() const {

  return true;
}

void stOpenMonsterWindowResult::Swap(stOpenMonsterWindowResult* other) {
  if (other != this) {
    std::swap(bosslv_, other->bosslv_);
    std::swap(bosshp_, other->bosshp_);
    std::swap(time_, other->time_);
    std::swap(attacktime_, other->attacktime_);
    std::swap(buytime_, other->buytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOpenMonsterWindowResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOpenMonsterWindowResult_descriptor_;
  metadata.reflection = stOpenMonsterWindowResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAttackMonster_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAttackMonster_ProtoModID_descriptor_;
}
bool stReqAttackMonster_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAttackMonster_ProtoModID stReqAttackMonster::ModID;
const stReqAttackMonster_ProtoModID stReqAttackMonster::ProtoModID_MIN;
const stReqAttackMonster_ProtoModID stReqAttackMonster::ProtoModID_MAX;
const int stReqAttackMonster::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAttackMonster_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAttackMonster_ProtoFunID_descriptor_;
}
bool stReqAttackMonster_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 231:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAttackMonster_ProtoFunID stReqAttackMonster::FunID;
const stReqAttackMonster_ProtoFunID stReqAttackMonster::ProtoFunID_MIN;
const stReqAttackMonster_ProtoFunID stReqAttackMonster::ProtoFunID_MAX;
const int stReqAttackMonster::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAttackMonster::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqAttackMonster::stReqAttackMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAttackMonster::InitAsDefaultInstance() {
}

stReqAttackMonster::stReqAttackMonster(const stReqAttackMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAttackMonster::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAttackMonster::~stReqAttackMonster() {
  SharedDtor();
}

void stReqAttackMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAttackMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAttackMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAttackMonster_descriptor_;
}

const stReqAttackMonster& stReqAttackMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqAttackMonster* stReqAttackMonster::default_instance_ = NULL;

stReqAttackMonster* stReqAttackMonster::New() const {
  return new stReqAttackMonster;
}

void stReqAttackMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAttackMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAttackMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAttackMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAttackMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAttackMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAttackMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAttackMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAttackMonster::MergeFrom(const stReqAttackMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAttackMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAttackMonster::CopyFrom(const stReqAttackMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAttackMonster::IsInitialized() const {

  return true;
}

void stReqAttackMonster::Swap(stReqAttackMonster* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAttackMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAttackMonster_descriptor_;
  metadata.reflection = stReqAttackMonster_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAttackMonsterResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAttackMonsterResult_eResult_descriptor_;
}
bool stAttackMonsterResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAttackMonsterResult_eResult stAttackMonsterResult::eSuccess;
const stAttackMonsterResult_eResult stAttackMonsterResult::eInner_Error;
const stAttackMonsterResult_eResult stAttackMonsterResult::eTime_Out;
const stAttackMonsterResult_eResult stAttackMonsterResult::eResult_MIN;
const stAttackMonsterResult_eResult stAttackMonsterResult::eResult_MAX;
const int stAttackMonsterResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAttackMonsterResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAttackMonsterResult_ProtoModID_descriptor_;
}
bool stAttackMonsterResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAttackMonsterResult_ProtoModID stAttackMonsterResult::ModID;
const stAttackMonsterResult_ProtoModID stAttackMonsterResult::ProtoModID_MIN;
const stAttackMonsterResult_ProtoModID stAttackMonsterResult::ProtoModID_MAX;
const int stAttackMonsterResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAttackMonsterResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAttackMonsterResult_ProtoFunID_descriptor_;
}
bool stAttackMonsterResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 232:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAttackMonsterResult_ProtoFunID stAttackMonsterResult::FunID;
const stAttackMonsterResult_ProtoFunID stAttackMonsterResult::ProtoFunID_MIN;
const stAttackMonsterResult_ProtoFunID stAttackMonsterResult::ProtoFunID_MAX;
const int stAttackMonsterResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAttackMonsterResult::kResultFieldNumber;
#endif  // !_MSC_VER

stAttackMonsterResult::stAttackMonsterResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAttackMonsterResult::InitAsDefaultInstance() {
}

stAttackMonsterResult::stAttackMonsterResult(const stAttackMonsterResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAttackMonsterResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAttackMonsterResult::~stAttackMonsterResult() {
  SharedDtor();
}

void stAttackMonsterResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAttackMonsterResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAttackMonsterResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAttackMonsterResult_descriptor_;
}

const stAttackMonsterResult& stAttackMonsterResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stAttackMonsterResult* stAttackMonsterResult::default_instance_ = NULL;

stAttackMonsterResult* stAttackMonsterResult::New() const {
  return new stAttackMonsterResult;
}

void stAttackMonsterResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAttackMonsterResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stAttackMonsterResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stAttackMonsterResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stAttackMonsterResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAttackMonsterResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stAttackMonsterResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAttackMonsterResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stAttackMonsterResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAttackMonsterResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stAttackMonsterResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAttackMonsterResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAttackMonsterResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAttackMonsterResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAttackMonsterResult::MergeFrom(const stAttackMonsterResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAttackMonsterResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAttackMonsterResult::CopyFrom(const stAttackMonsterResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAttackMonsterResult::IsInitialized() const {

  return true;
}

void stAttackMonsterResult::Swap(stAttackMonsterResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAttackMonsterResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAttackMonsterResult_descriptor_;
  metadata.reflection = stAttackMonsterResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBuyAttackTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyAttackTime_ProtoModID_descriptor_;
}
bool stReqBuyAttackTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyAttackTime_ProtoModID stReqBuyAttackTime::ModID;
const stReqBuyAttackTime_ProtoModID stReqBuyAttackTime::ProtoModID_MIN;
const stReqBuyAttackTime_ProtoModID stReqBuyAttackTime::ProtoModID_MAX;
const int stReqBuyAttackTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBuyAttackTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyAttackTime_ProtoFunID_descriptor_;
}
bool stReqBuyAttackTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 233:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyAttackTime_ProtoFunID stReqBuyAttackTime::FunID;
const stReqBuyAttackTime_ProtoFunID stReqBuyAttackTime::ProtoFunID_MIN;
const stReqBuyAttackTime_ProtoFunID stReqBuyAttackTime::ProtoFunID_MAX;
const int stReqBuyAttackTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBuyAttackTime::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqBuyAttackTime::stReqBuyAttackTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBuyAttackTime::InitAsDefaultInstance() {
}

stReqBuyAttackTime::stReqBuyAttackTime(const stReqBuyAttackTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBuyAttackTime::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBuyAttackTime::~stReqBuyAttackTime() {
  SharedDtor();
}

void stReqBuyAttackTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBuyAttackTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBuyAttackTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyAttackTime_descriptor_;
}

const stReqBuyAttackTime& stReqBuyAttackTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqBuyAttackTime* stReqBuyAttackTime::default_instance_ = NULL;

stReqBuyAttackTime* stReqBuyAttackTime::New() const {
  return new stReqBuyAttackTime;
}

void stReqBuyAttackTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBuyAttackTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBuyAttackTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBuyAttackTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBuyAttackTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBuyAttackTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBuyAttackTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBuyAttackTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBuyAttackTime::MergeFrom(const stReqBuyAttackTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBuyAttackTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBuyAttackTime::CopyFrom(const stReqBuyAttackTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBuyAttackTime::IsInitialized() const {

  return true;
}

void stReqBuyAttackTime::Swap(stReqBuyAttackTime* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBuyAttackTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBuyAttackTime_descriptor_;
  metadata.reflection = stReqBuyAttackTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyAttackTimeResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyAttackTimeResult_eResult_descriptor_;
}
bool stBuyAttackTimeResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyAttackTimeResult_eResult stBuyAttackTimeResult::eSuccess;
const stBuyAttackTimeResult_eResult stBuyAttackTimeResult::eInner_Error;
const stBuyAttackTimeResult_eResult stBuyAttackTimeResult::eDiamond_Not_Enough;
const stBuyAttackTimeResult_eResult stBuyAttackTimeResult::eMax_Count;
const stBuyAttackTimeResult_eResult stBuyAttackTimeResult::eItem_Not_Enough;
const stBuyAttackTimeResult_eResult stBuyAttackTimeResult::eResult_MIN;
const stBuyAttackTimeResult_eResult stBuyAttackTimeResult::eResult_MAX;
const int stBuyAttackTimeResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyAttackTimeResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyAttackTimeResult_ProtoModID_descriptor_;
}
bool stBuyAttackTimeResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyAttackTimeResult_ProtoModID stBuyAttackTimeResult::ModID;
const stBuyAttackTimeResult_ProtoModID stBuyAttackTimeResult::ProtoModID_MIN;
const stBuyAttackTimeResult_ProtoModID stBuyAttackTimeResult::ProtoModID_MAX;
const int stBuyAttackTimeResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyAttackTimeResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyAttackTimeResult_ProtoFunID_descriptor_;
}
bool stBuyAttackTimeResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 234:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyAttackTimeResult_ProtoFunID stBuyAttackTimeResult::FunID;
const stBuyAttackTimeResult_ProtoFunID stBuyAttackTimeResult::ProtoFunID_MIN;
const stBuyAttackTimeResult_ProtoFunID stBuyAttackTimeResult::ProtoFunID_MAX;
const int stBuyAttackTimeResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyAttackTimeResult::kResultFieldNumber;
#endif  // !_MSC_VER

stBuyAttackTimeResult::stBuyAttackTimeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyAttackTimeResult::InitAsDefaultInstance() {
}

stBuyAttackTimeResult::stBuyAttackTimeResult(const stBuyAttackTimeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyAttackTimeResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyAttackTimeResult::~stBuyAttackTimeResult() {
  SharedDtor();
}

void stBuyAttackTimeResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBuyAttackTimeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyAttackTimeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyAttackTimeResult_descriptor_;
}

const stBuyAttackTimeResult& stBuyAttackTimeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBuyAttackTimeResult* stBuyAttackTimeResult::default_instance_ = NULL;

stBuyAttackTimeResult* stBuyAttackTimeResult::New() const {
  return new stBuyAttackTimeResult;
}

void stBuyAttackTimeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyAttackTimeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stBuyAttackTimeResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stBuyAttackTimeResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stBuyAttackTimeResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyAttackTimeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stBuyAttackTimeResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyAttackTimeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stBuyAttackTimeResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyAttackTimeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stBuyAttackTimeResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyAttackTimeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyAttackTimeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyAttackTimeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyAttackTimeResult::MergeFrom(const stBuyAttackTimeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyAttackTimeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyAttackTimeResult::CopyFrom(const stBuyAttackTimeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyAttackTimeResult::IsInitialized() const {

  return true;
}

void stBuyAttackTimeResult::Swap(stBuyAttackTimeResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyAttackTimeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyAttackTimeResult_descriptor_;
  metadata.reflection = stBuyAttackTimeResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAKeyAttackMonster_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAKeyAttackMonster_ProtoModID_descriptor_;
}
bool stReqAKeyAttackMonster_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAKeyAttackMonster_ProtoModID stReqAKeyAttackMonster::ModID;
const stReqAKeyAttackMonster_ProtoModID stReqAKeyAttackMonster::ProtoModID_MIN;
const stReqAKeyAttackMonster_ProtoModID stReqAKeyAttackMonster::ProtoModID_MAX;
const int stReqAKeyAttackMonster::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAKeyAttackMonster_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAKeyAttackMonster_ProtoFunID_descriptor_;
}
bool stReqAKeyAttackMonster_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 235:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAKeyAttackMonster_ProtoFunID stReqAKeyAttackMonster::FunID;
const stReqAKeyAttackMonster_ProtoFunID stReqAKeyAttackMonster::ProtoFunID_MIN;
const stReqAKeyAttackMonster_ProtoFunID stReqAKeyAttackMonster::ProtoFunID_MAX;
const int stReqAKeyAttackMonster::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAKeyAttackMonster::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqAKeyAttackMonster::stReqAKeyAttackMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAKeyAttackMonster::InitAsDefaultInstance() {
}

stReqAKeyAttackMonster::stReqAKeyAttackMonster(const stReqAKeyAttackMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAKeyAttackMonster::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAKeyAttackMonster::~stReqAKeyAttackMonster() {
  SharedDtor();
}

void stReqAKeyAttackMonster::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAKeyAttackMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAKeyAttackMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAKeyAttackMonster_descriptor_;
}

const stReqAKeyAttackMonster& stReqAKeyAttackMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqAKeyAttackMonster* stReqAKeyAttackMonster::default_instance_ = NULL;

stReqAKeyAttackMonster* stReqAKeyAttackMonster::New() const {
  return new stReqAKeyAttackMonster;
}

void stReqAKeyAttackMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAKeyAttackMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAKeyAttackMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAKeyAttackMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAKeyAttackMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAKeyAttackMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAKeyAttackMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAKeyAttackMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAKeyAttackMonster::MergeFrom(const stReqAKeyAttackMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAKeyAttackMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAKeyAttackMonster::CopyFrom(const stReqAKeyAttackMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAKeyAttackMonster::IsInitialized() const {

  return true;
}

void stReqAKeyAttackMonster::Swap(stReqAKeyAttackMonster* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAKeyAttackMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAKeyAttackMonster_descriptor_;
  metadata.reflection = stReqAKeyAttackMonster_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAKeyAttackMonsterResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyAttackMonsterResult_eResult_descriptor_;
}
bool stAKeyAttackMonsterResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAKeyAttackMonsterResult_eResult stAKeyAttackMonsterResult::eSuccess;
const stAKeyAttackMonsterResult_eResult stAKeyAttackMonsterResult::eInner_Error;
const stAKeyAttackMonsterResult_eResult stAKeyAttackMonsterResult::eTime_Out;
const stAKeyAttackMonsterResult_eResult stAKeyAttackMonsterResult::eVip_Lv_Too_Low;
const stAKeyAttackMonsterResult_eResult stAKeyAttackMonsterResult::eResult_MIN;
const stAKeyAttackMonsterResult_eResult stAKeyAttackMonsterResult::eResult_MAX;
const int stAKeyAttackMonsterResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAKeyAttackMonsterResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyAttackMonsterResult_ProtoModID_descriptor_;
}
bool stAKeyAttackMonsterResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAKeyAttackMonsterResult_ProtoModID stAKeyAttackMonsterResult::ModID;
const stAKeyAttackMonsterResult_ProtoModID stAKeyAttackMonsterResult::ProtoModID_MIN;
const stAKeyAttackMonsterResult_ProtoModID stAKeyAttackMonsterResult::ProtoModID_MAX;
const int stAKeyAttackMonsterResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAKeyAttackMonsterResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyAttackMonsterResult_ProtoFunID_descriptor_;
}
bool stAKeyAttackMonsterResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 236:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAKeyAttackMonsterResult_ProtoFunID stAKeyAttackMonsterResult::FunID;
const stAKeyAttackMonsterResult_ProtoFunID stAKeyAttackMonsterResult::ProtoFunID_MIN;
const stAKeyAttackMonsterResult_ProtoFunID stAKeyAttackMonsterResult::ProtoFunID_MAX;
const int stAKeyAttackMonsterResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAKeyAttackMonsterResult::kResultFieldNumber;
#endif  // !_MSC_VER

stAKeyAttackMonsterResult::stAKeyAttackMonsterResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAKeyAttackMonsterResult::InitAsDefaultInstance() {
}

stAKeyAttackMonsterResult::stAKeyAttackMonsterResult(const stAKeyAttackMonsterResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAKeyAttackMonsterResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAKeyAttackMonsterResult::~stAKeyAttackMonsterResult() {
  SharedDtor();
}

void stAKeyAttackMonsterResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAKeyAttackMonsterResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAKeyAttackMonsterResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAKeyAttackMonsterResult_descriptor_;
}

const stAKeyAttackMonsterResult& stAKeyAttackMonsterResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stAKeyAttackMonsterResult* stAKeyAttackMonsterResult::default_instance_ = NULL;

stAKeyAttackMonsterResult* stAKeyAttackMonsterResult::New() const {
  return new stAKeyAttackMonsterResult;
}

void stAKeyAttackMonsterResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAKeyAttackMonsterResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stAKeyAttackMonsterResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stAKeyAttackMonsterResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stAKeyAttackMonsterResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAKeyAttackMonsterResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stAKeyAttackMonsterResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAKeyAttackMonsterResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stAKeyAttackMonsterResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAKeyAttackMonsterResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stAKeyAttackMonsterResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAKeyAttackMonsterResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAKeyAttackMonsterResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAKeyAttackMonsterResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAKeyAttackMonsterResult::MergeFrom(const stAKeyAttackMonsterResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAKeyAttackMonsterResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAKeyAttackMonsterResult::CopyFrom(const stAKeyAttackMonsterResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAKeyAttackMonsterResult::IsInitialized() const {

  return true;
}

void stAKeyAttackMonsterResult::Swap(stAKeyAttackMonsterResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAKeyAttackMonsterResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAKeyAttackMonsterResult_descriptor_;
  metadata.reflection = stAKeyAttackMonsterResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynTipItem::kItemIDFieldNumber;
const int stSynTipItem::kNumFieldNumber;
#endif  // !_MSC_VER

stSynTipItem::stSynTipItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynTipItem::InitAsDefaultInstance() {
}

stSynTipItem::stSynTipItem(const stSynTipItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynTipItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynTipItem::~stSynTipItem() {
  SharedDtor();
}

void stSynTipItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynTipItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynTipItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTipItem_descriptor_;
}

const stSynTipItem& stSynTipItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSynTipItem* stSynTipItem::default_instance_ = NULL;

stSynTipItem* stSynTipItem::New() const {
  return new stSynTipItem;
}

void stSynTipItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynTipItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynTipItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynTipItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynTipItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynTipItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynTipItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynTipItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynTipItem::MergeFrom(const stSynTipItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynTipItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynTipItem::CopyFrom(const stSynTipItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynTipItem::IsInitialized() const {

  return true;
}

void stSynTipItem::Swap(stSynTipItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynTipItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynTipItem_descriptor_;
  metadata.reflection = stSynTipItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainItemTip_ProtoModID_descriptor_;
}
bool stObtainItemTip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stObtainItemTip_ProtoModID stObtainItemTip::ModID;
const stObtainItemTip_ProtoModID stObtainItemTip::ProtoModID_MIN;
const stObtainItemTip_ProtoModID stObtainItemTip::ProtoModID_MAX;
const int stObtainItemTip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainItemTip_ProtoFunID_descriptor_;
}
bool stObtainItemTip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 237:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stObtainItemTip_ProtoFunID stObtainItemTip::FunID;
const stObtainItemTip_ProtoFunID stObtainItemTip::ProtoFunID_MIN;
const stObtainItemTip_ProtoFunID stObtainItemTip::ProtoFunID_MAX;
const int stObtainItemTip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stObtainItemTip::kGetItemsFieldNumber;
#endif  // !_MSC_VER

stObtainItemTip::stObtainItemTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stObtainItemTip::InitAsDefaultInstance() {
}

stObtainItemTip::stObtainItemTip(const stObtainItemTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stObtainItemTip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stObtainItemTip::~stObtainItemTip() {
  SharedDtor();
}

void stObtainItemTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stObtainItemTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stObtainItemTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainItemTip_descriptor_;
}

const stObtainItemTip& stObtainItemTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stObtainItemTip* stObtainItemTip::default_instance_ = NULL;

stObtainItemTip* stObtainItemTip::New() const {
  return new stObtainItemTip;
}

void stObtainItemTip::Clear() {
  getitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stObtainItemTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stSynTipItem getItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_getitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_getItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stObtainItemTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stSynTipItem getItems = 1;
  for (int i = 0; i < this->getitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->getitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stObtainItemTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stSynTipItem getItems = 1;
  for (int i = 0; i < this->getitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->getitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stObtainItemTip::ByteSize() const {
  int total_size = 0;

  // repeated .MiscProto.stSynTipItem getItems = 1;
  total_size += 1 * this->getitems_size();
  for (int i = 0; i < this->getitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->getitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stObtainItemTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stObtainItemTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stObtainItemTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stObtainItemTip::MergeFrom(const stObtainItemTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  getitems_.MergeFrom(from.getitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stObtainItemTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stObtainItemTip::CopyFrom(const stObtainItemTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stObtainItemTip::IsInitialized() const {

  return true;
}

void stObtainItemTip::Swap(stObtainItemTip* other) {
  if (other != this) {
    getitems_.Swap(&other->getitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stObtainItemTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stObtainItemTip_descriptor_;
  metadata.reflection = stObtainItemTip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserOnline_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserOnline_ProtoModID_descriptor_;
}
bool stUserOnline_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserOnline_ProtoModID stUserOnline::ModID;
const stUserOnline_ProtoModID stUserOnline::ProtoModID_MIN;
const stUserOnline_ProtoModID stUserOnline::ProtoModID_MAX;
const int stUserOnline::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserOnline_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserOnline_ProtoFunID_descriptor_;
}
bool stUserOnline_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 238:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserOnline_ProtoFunID stUserOnline::FunID;
const stUserOnline_ProtoFunID stUserOnline::ProtoFunID_MIN;
const stUserOnline_ProtoFunID stUserOnline::ProtoFunID_MAX;
const int stUserOnline::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserOnline::kMountListFieldNumber;
const int stUserOnline::kBattleMountIDFieldNumber;
const int stUserOnline::kIsFollowFieldNumber;
const int stUserOnline::kMountLvFieldNumber;
#endif  // !_MSC_VER

stUserOnline::stUserOnline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserOnline::InitAsDefaultInstance() {
}

stUserOnline::stUserOnline(const stUserOnline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserOnline::SharedCtor() {
  _cached_size_ = 0;
  battlemountid_ = 0u;
  isfollow_ = false;
  mountlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserOnline::~stUserOnline() {
  SharedDtor();
}

void stUserOnline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserOnline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserOnline_descriptor_;
}

const stUserOnline& stUserOnline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stUserOnline* stUserOnline::default_instance_ = NULL;

stUserOnline* stUserOnline::New() const {
  return new stUserOnline;
}

void stUserOnline::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    battlemountid_ = 0u;
    isfollow_ = false;
    mountlv_ = 0u;
  }
  mountlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mountList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mountList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_mountlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mountlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mountList;
        if (input->ExpectTag(16)) goto parse_battleMountID;
        break;
      }

      // optional uint32 battleMountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleMountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlemountid_)));
          set_has_battlemountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isFollow;
        break;
      }

      // optional bool isFollow = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfollow_)));
          set_has_isfollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mountLv;
        break;
      }

      // optional uint32 mountLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mountLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mountlv_)));
          set_has_mountlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 mountList = 1;
  for (int i = 0; i < this->mountlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->mountlist(i), output);
  }

  // optional uint32 battleMountID = 2;
  if (has_battlemountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battlemountid(), output);
  }

  // optional bool isFollow = 3;
  if (has_isfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfollow(), output);
  }

  // optional uint32 mountLv = 4;
  if (has_mountlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mountlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserOnline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 mountList = 1;
  for (int i = 0; i < this->mountlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->mountlist(i), target);
  }

  // optional uint32 battleMountID = 2;
  if (has_battlemountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battlemountid(), target);
  }

  // optional bool isFollow = 3;
  if (has_isfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfollow(), target);
  }

  // optional uint32 mountLv = 4;
  if (has_mountlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mountlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserOnline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 battleMountID = 2;
    if (has_battlemountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlemountid());
    }

    // optional bool isFollow = 3;
    if (has_isfollow()) {
      total_size += 1 + 1;
    }

    // optional uint32 mountLv = 4;
    if (has_mountlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mountlv());
    }

  }
  // repeated uint32 mountList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mountlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mountlist(i));
    }
    total_size += 1 * this->mountlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserOnline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserOnline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserOnline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserOnline::MergeFrom(const stUserOnline& from) {
  GOOGLE_CHECK_NE(&from, this);
  mountlist_.MergeFrom(from.mountlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_battlemountid()) {
      set_battlemountid(from.battlemountid());
    }
    if (from.has_isfollow()) {
      set_isfollow(from.isfollow());
    }
    if (from.has_mountlv()) {
      set_mountlv(from.mountlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserOnline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserOnline::CopyFrom(const stUserOnline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserOnline::IsInitialized() const {

  return true;
}

void stUserOnline::Swap(stUserOnline* other) {
  if (other != this) {
    mountlist_.Swap(&other->mountlist_);
    std::swap(battlemountid_, other->battlemountid_);
    std::swap(isfollow_, other->isfollow_);
    std::swap(mountlv_, other->mountlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserOnline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserOnline_descriptor_;
  metadata.reflection = stUserOnline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stConsumeItemInfo::kIdFieldNumber;
const int stConsumeItemInfo::kNumFieldNumber;
#endif  // !_MSC_VER

stConsumeItemInfo::stConsumeItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stConsumeItemInfo::InitAsDefaultInstance() {
}

stConsumeItemInfo::stConsumeItemInfo(const stConsumeItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stConsumeItemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stConsumeItemInfo::~stConsumeItemInfo() {
  SharedDtor();
}

void stConsumeItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stConsumeItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stConsumeItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stConsumeItemInfo_descriptor_;
}

const stConsumeItemInfo& stConsumeItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stConsumeItemInfo* stConsumeItemInfo::default_instance_ = NULL;

stConsumeItemInfo* stConsumeItemInfo::New() const {
  return new stConsumeItemInfo;
}

void stConsumeItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stConsumeItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stConsumeItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stConsumeItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stConsumeItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stConsumeItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stConsumeItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stConsumeItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stConsumeItemInfo::MergeFrom(const stConsumeItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stConsumeItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stConsumeItemInfo::CopyFrom(const stConsumeItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stConsumeItemInfo::IsInitialized() const {

  return true;
}

void stConsumeItemInfo::Swap(stConsumeItemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stConsumeItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stConsumeItemInfo_descriptor_;
  metadata.reflection = stConsumeItemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqMountLevelUp_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMountLevelUp_ProtoModID_descriptor_;
}
bool stReqMountLevelUp_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMountLevelUp_ProtoModID stReqMountLevelUp::ModID;
const stReqMountLevelUp_ProtoModID stReqMountLevelUp::ProtoModID_MIN;
const stReqMountLevelUp_ProtoModID stReqMountLevelUp::ProtoModID_MAX;
const int stReqMountLevelUp::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqMountLevelUp_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMountLevelUp_ProtoFunID_descriptor_;
}
bool stReqMountLevelUp_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 239:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMountLevelUp_ProtoFunID stReqMountLevelUp::FunID;
const stReqMountLevelUp_ProtoFunID stReqMountLevelUp::ProtoFunID_MIN;
const stReqMountLevelUp_ProtoFunID stReqMountLevelUp::ProtoFunID_MAX;
const int stReqMountLevelUp::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqMountLevelUp::kTypeFieldNumber;
const int stReqMountLevelUp::kItemInfoFieldNumber;
#endif  // !_MSC_VER

stReqMountLevelUp::stReqMountLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqMountLevelUp::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::MiscProto::stConsumeItemInfo*>(&::MiscProto::stConsumeItemInfo::default_instance());
}

stReqMountLevelUp::stReqMountLevelUp(const stReqMountLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqMountLevelUp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqMountLevelUp::~stReqMountLevelUp() {
  SharedDtor();
}

void stReqMountLevelUp::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void stReqMountLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqMountLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMountLevelUp_descriptor_;
}

const stReqMountLevelUp& stReqMountLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqMountLevelUp* stReqMountLevelUp::default_instance_ = NULL;

stReqMountLevelUp* stReqMountLevelUp::New() const {
  return new stReqMountLevelUp;
}

void stReqMountLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::MiscProto::stConsumeItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqMountLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.eLevelUpType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::eLevelUpType_IsValid(value)) {
            set_type(static_cast< ::MiscProto::eLevelUpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        break;
      }

      // optional .MiscProto.stConsumeItemInfo itemInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqMountLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.eLevelUpType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .MiscProto.stConsumeItemInfo itemInfo = 2;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqMountLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.eLevelUpType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .MiscProto.stConsumeItemInfo itemInfo = 2;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqMountLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.eLevelUpType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .MiscProto.stConsumeItemInfo itemInfo = 2;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqMountLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqMountLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqMountLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqMountLevelUp::MergeFrom(const stReqMountLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::MiscProto::stConsumeItemInfo::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqMountLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqMountLevelUp::CopyFrom(const stReqMountLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqMountLevelUp::IsInitialized() const {

  return true;
}

void stReqMountLevelUp::Swap(stReqMountLevelUp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqMountLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqMountLevelUp_descriptor_;
  metadata.reflection = stReqMountLevelUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMountLevelUpResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountLevelUpResult_eResult_descriptor_;
}
bool stMountLevelUpResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMountLevelUpResult_eResult stMountLevelUpResult::eSuccess;
const stMountLevelUpResult_eResult stMountLevelUpResult::eInner_Error;
const stMountLevelUpResult_eResult stMountLevelUpResult::eMax_Level;
const stMountLevelUpResult_eResult stMountLevelUpResult::eRes_Not_Enough;
const stMountLevelUpResult_eResult stMountLevelUpResult::eStar_max;
const stMountLevelUpResult_eResult stMountLevelUpResult::eResult_MIN;
const stMountLevelUpResult_eResult stMountLevelUpResult::eResult_MAX;
const int stMountLevelUpResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMountLevelUpResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountLevelUpResult_ProtoModID_descriptor_;
}
bool stMountLevelUpResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMountLevelUpResult_ProtoModID stMountLevelUpResult::ModID;
const stMountLevelUpResult_ProtoModID stMountLevelUpResult::ProtoModID_MIN;
const stMountLevelUpResult_ProtoModID stMountLevelUpResult::ProtoModID_MAX;
const int stMountLevelUpResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMountLevelUpResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountLevelUpResult_ProtoFunID_descriptor_;
}
bool stMountLevelUpResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 240:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMountLevelUpResult_ProtoFunID stMountLevelUpResult::FunID;
const stMountLevelUpResult_ProtoFunID stMountLevelUpResult::ProtoFunID_MIN;
const stMountLevelUpResult_ProtoFunID stMountLevelUpResult::ProtoFunID_MAX;
const int stMountLevelUpResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMountLevelUpResult::kResultFieldNumber;
const int stMountLevelUpResult::kLevelFieldNumber;
const int stMountLevelUpResult::kExpFieldNumber;
#endif  // !_MSC_VER

stMountLevelUpResult::stMountLevelUpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMountLevelUpResult::InitAsDefaultInstance() {
}

stMountLevelUpResult::stMountLevelUpResult(const stMountLevelUpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMountLevelUpResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  level_ = 0u;
  exp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMountLevelUpResult::~stMountLevelUpResult() {
  SharedDtor();
}

void stMountLevelUpResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMountLevelUpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMountLevelUpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountLevelUpResult_descriptor_;
}

const stMountLevelUpResult& stMountLevelUpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stMountLevelUpResult* stMountLevelUpResult::default_instance_ = NULL;

stMountLevelUpResult* stMountLevelUpResult::New() const {
  return new stMountLevelUpResult;
}

void stMountLevelUpResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    level_ = 0u;
    exp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMountLevelUpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stMountLevelUpResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stMountLevelUpResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stMountLevelUpResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMountLevelUpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stMountLevelUpResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMountLevelUpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stMountLevelUpResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMountLevelUpResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stMountLevelUpResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMountLevelUpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMountLevelUpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMountLevelUpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMountLevelUpResult::MergeFrom(const stMountLevelUpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMountLevelUpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMountLevelUpResult::CopyFrom(const stMountLevelUpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMountLevelUpResult::IsInitialized() const {

  return true;
}

void stMountLevelUpResult::Swap(stMountLevelUpResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMountLevelUpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMountLevelUpResult_descriptor_;
  metadata.reflection = stMountLevelUpResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqButtleMount_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqButtleMount_ProtoModID_descriptor_;
}
bool stReqButtleMount_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqButtleMount_ProtoModID stReqButtleMount::ModID;
const stReqButtleMount_ProtoModID stReqButtleMount::ProtoModID_MIN;
const stReqButtleMount_ProtoModID stReqButtleMount::ProtoModID_MAX;
const int stReqButtleMount::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqButtleMount_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqButtleMount_ProtoFunID_descriptor_;
}
bool stReqButtleMount_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 241:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqButtleMount_ProtoFunID stReqButtleMount::FunID;
const stReqButtleMount_ProtoFunID stReqButtleMount::ProtoFunID_MIN;
const stReqButtleMount_ProtoFunID stReqButtleMount::ProtoFunID_MAX;
const int stReqButtleMount::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqButtleMount::kIdFieldNumber;
#endif  // !_MSC_VER

stReqButtleMount::stReqButtleMount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqButtleMount::InitAsDefaultInstance() {
}

stReqButtleMount::stReqButtleMount(const stReqButtleMount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqButtleMount::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqButtleMount::~stReqButtleMount() {
  SharedDtor();
}

void stReqButtleMount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqButtleMount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqButtleMount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqButtleMount_descriptor_;
}

const stReqButtleMount& stReqButtleMount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqButtleMount* stReqButtleMount::default_instance_ = NULL;

stReqButtleMount* stReqButtleMount::New() const {
  return new stReqButtleMount;
}

void stReqButtleMount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqButtleMount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqButtleMount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqButtleMount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqButtleMount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqButtleMount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqButtleMount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqButtleMount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqButtleMount::MergeFrom(const stReqButtleMount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqButtleMount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqButtleMount::CopyFrom(const stReqButtleMount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqButtleMount::IsInitialized() const {

  return true;
}

void stReqButtleMount::Swap(stReqButtleMount* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqButtleMount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqButtleMount_descriptor_;
  metadata.reflection = stReqButtleMount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stButtleMountResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stButtleMountResult_eResult_descriptor_;
}
bool stButtleMountResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stButtleMountResult_eResult stButtleMountResult::eSuccess;
const stButtleMountResult_eResult stButtleMountResult::eInner_Error;
const stButtleMountResult_eResult stButtleMountResult::eIs_Not_Unlock;
const stButtleMountResult_eResult stButtleMountResult::eHas_Battle;
const stButtleMountResult_eResult stButtleMountResult::eResult_MIN;
const stButtleMountResult_eResult stButtleMountResult::eResult_MAX;
const int stButtleMountResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stButtleMountResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stButtleMountResult_ProtoModID_descriptor_;
}
bool stButtleMountResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stButtleMountResult_ProtoModID stButtleMountResult::ModID;
const stButtleMountResult_ProtoModID stButtleMountResult::ProtoModID_MIN;
const stButtleMountResult_ProtoModID stButtleMountResult::ProtoModID_MAX;
const int stButtleMountResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stButtleMountResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stButtleMountResult_ProtoFunID_descriptor_;
}
bool stButtleMountResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 242:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stButtleMountResult_ProtoFunID stButtleMountResult::FunID;
const stButtleMountResult_ProtoFunID stButtleMountResult::ProtoFunID_MIN;
const stButtleMountResult_ProtoFunID stButtleMountResult::ProtoFunID_MAX;
const int stButtleMountResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stButtleMountResult::kResultFieldNumber;
const int stButtleMountResult::kMountIdFieldNumber;
#endif  // !_MSC_VER

stButtleMountResult::stButtleMountResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stButtleMountResult::InitAsDefaultInstance() {
}

stButtleMountResult::stButtleMountResult(const stButtleMountResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stButtleMountResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  mountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stButtleMountResult::~stButtleMountResult() {
  SharedDtor();
}

void stButtleMountResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stButtleMountResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stButtleMountResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stButtleMountResult_descriptor_;
}

const stButtleMountResult& stButtleMountResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stButtleMountResult* stButtleMountResult::default_instance_ = NULL;

stButtleMountResult* stButtleMountResult::New() const {
  return new stButtleMountResult;
}

void stButtleMountResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    mountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stButtleMountResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stButtleMountResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stButtleMountResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stButtleMountResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mountId;
        break;
      }

      // optional uint32 mountId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stButtleMountResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stButtleMountResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 mountId = 2;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stButtleMountResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stButtleMountResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 mountId = 2;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stButtleMountResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stButtleMountResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 mountId = 2;
    if (has_mountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stButtleMountResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stButtleMountResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stButtleMountResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stButtleMountResult::MergeFrom(const stButtleMountResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stButtleMountResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stButtleMountResult::CopyFrom(const stButtleMountResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stButtleMountResult::IsInitialized() const {

  return true;
}

void stButtleMountResult::Swap(stButtleMountResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mountid_, other->mountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stButtleMountResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stButtleMountResult_descriptor_;
  metadata.reflection = stButtleMountResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqMountFollow_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMountFollow_ProtoModID_descriptor_;
}
bool stReqMountFollow_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMountFollow_ProtoModID stReqMountFollow::ModID;
const stReqMountFollow_ProtoModID stReqMountFollow::ProtoModID_MIN;
const stReqMountFollow_ProtoModID stReqMountFollow::ProtoModID_MAX;
const int stReqMountFollow::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqMountFollow_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMountFollow_ProtoFunID_descriptor_;
}
bool stReqMountFollow_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 243:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMountFollow_ProtoFunID stReqMountFollow::FunID;
const stReqMountFollow_ProtoFunID stReqMountFollow::ProtoFunID_MIN;
const stReqMountFollow_ProtoFunID stReqMountFollow::ProtoFunID_MAX;
const int stReqMountFollow::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqMountFollow::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqMountFollow::stReqMountFollow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqMountFollow::InitAsDefaultInstance() {
}

stReqMountFollow::stReqMountFollow(const stReqMountFollow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqMountFollow::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqMountFollow::~stReqMountFollow() {
  SharedDtor();
}

void stReqMountFollow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqMountFollow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqMountFollow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMountFollow_descriptor_;
}

const stReqMountFollow& stReqMountFollow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqMountFollow* stReqMountFollow::default_instance_ = NULL;

stReqMountFollow* stReqMountFollow::New() const {
  return new stReqMountFollow;
}

void stReqMountFollow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqMountFollow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqMountFollow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqMountFollow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqMountFollow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqMountFollow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqMountFollow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqMountFollow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqMountFollow::MergeFrom(const stReqMountFollow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqMountFollow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqMountFollow::CopyFrom(const stReqMountFollow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqMountFollow::IsInitialized() const {

  return true;
}

void stReqMountFollow::Swap(stReqMountFollow* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqMountFollow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqMountFollow_descriptor_;
  metadata.reflection = stReqMountFollow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMountFollowResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountFollowResult_eResult_descriptor_;
}
bool stMountFollowResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMountFollowResult_eResult stMountFollowResult::eSuccess;
const stMountFollowResult_eResult stMountFollowResult::eInner_Error;
const stMountFollowResult_eResult stMountFollowResult::eIs_Not_Battle;
const stMountFollowResult_eResult stMountFollowResult::eResult_MIN;
const stMountFollowResult_eResult stMountFollowResult::eResult_MAX;
const int stMountFollowResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMountFollowResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountFollowResult_ProtoModID_descriptor_;
}
bool stMountFollowResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMountFollowResult_ProtoModID stMountFollowResult::ModID;
const stMountFollowResult_ProtoModID stMountFollowResult::ProtoModID_MIN;
const stMountFollowResult_ProtoModID stMountFollowResult::ProtoModID_MAX;
const int stMountFollowResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMountFollowResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountFollowResult_ProtoFunID_descriptor_;
}
bool stMountFollowResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 244:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMountFollowResult_ProtoFunID stMountFollowResult::FunID;
const stMountFollowResult_ProtoFunID stMountFollowResult::ProtoFunID_MIN;
const stMountFollowResult_ProtoFunID stMountFollowResult::ProtoFunID_MAX;
const int stMountFollowResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMountFollowResult::kResultFieldNumber;
const int stMountFollowResult::kIsFollowFieldNumber;
#endif  // !_MSC_VER

stMountFollowResult::stMountFollowResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMountFollowResult::InitAsDefaultInstance() {
}

stMountFollowResult::stMountFollowResult(const stMountFollowResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMountFollowResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  isfollow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMountFollowResult::~stMountFollowResult() {
  SharedDtor();
}

void stMountFollowResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMountFollowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMountFollowResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountFollowResult_descriptor_;
}

const stMountFollowResult& stMountFollowResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stMountFollowResult* stMountFollowResult::default_instance_ = NULL;

stMountFollowResult* stMountFollowResult::New() const {
  return new stMountFollowResult;
}

void stMountFollowResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    isfollow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMountFollowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stMountFollowResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stMountFollowResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stMountFollowResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isFollow;
        break;
      }

      // optional bool isFollow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfollow_)));
          set_has_isfollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMountFollowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stMountFollowResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional bool isFollow = 2;
  if (has_isfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isfollow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMountFollowResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stMountFollowResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional bool isFollow = 2;
  if (has_isfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isfollow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMountFollowResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stMountFollowResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional bool isFollow = 2;
    if (has_isfollow()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMountFollowResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMountFollowResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMountFollowResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMountFollowResult::MergeFrom(const stMountFollowResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_isfollow()) {
      set_isfollow(from.isfollow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMountFollowResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMountFollowResult::CopyFrom(const stMountFollowResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMountFollowResult::IsInitialized() const {

  return true;
}

void stMountFollowResult::Swap(stMountFollowResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(isfollow_, other->isfollow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMountFollowResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMountFollowResult_descriptor_;
  metadata.reflection = stMountFollowResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqMountUnreal_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMountUnreal_ProtoModID_descriptor_;
}
bool stReqMountUnreal_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMountUnreal_ProtoModID stReqMountUnreal::ModID;
const stReqMountUnreal_ProtoModID stReqMountUnreal::ProtoModID_MIN;
const stReqMountUnreal_ProtoModID stReqMountUnreal::ProtoModID_MAX;
const int stReqMountUnreal::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqMountUnreal_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMountUnreal_ProtoFunID_descriptor_;
}
bool stReqMountUnreal_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 245:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMountUnreal_ProtoFunID stReqMountUnreal::FunID;
const stReqMountUnreal_ProtoFunID stReqMountUnreal::ProtoFunID_MIN;
const stReqMountUnreal_ProtoFunID stReqMountUnreal::ProtoFunID_MAX;
const int stReqMountUnreal::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqMountUnreal::kMountIdFieldNumber;
#endif  // !_MSC_VER

stReqMountUnreal::stReqMountUnreal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqMountUnreal::InitAsDefaultInstance() {
}

stReqMountUnreal::stReqMountUnreal(const stReqMountUnreal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqMountUnreal::SharedCtor() {
  _cached_size_ = 0;
  mountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqMountUnreal::~stReqMountUnreal() {
  SharedDtor();
}

void stReqMountUnreal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqMountUnreal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqMountUnreal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMountUnreal_descriptor_;
}

const stReqMountUnreal& stReqMountUnreal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqMountUnreal* stReqMountUnreal::default_instance_ = NULL;

stReqMountUnreal* stReqMountUnreal::New() const {
  return new stReqMountUnreal;
}

void stReqMountUnreal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqMountUnreal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 mountId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqMountUnreal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 mountId = 1;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqMountUnreal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 mountId = 1;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqMountUnreal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 mountId = 1;
    if (has_mountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqMountUnreal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqMountUnreal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqMountUnreal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqMountUnreal::MergeFrom(const stReqMountUnreal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqMountUnreal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqMountUnreal::CopyFrom(const stReqMountUnreal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqMountUnreal::IsInitialized() const {

  return true;
}

void stReqMountUnreal::Swap(stReqMountUnreal* other) {
  if (other != this) {
    std::swap(mountid_, other->mountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqMountUnreal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqMountUnreal_descriptor_;
  metadata.reflection = stReqMountUnreal_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMountUnrealResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountUnrealResult_eResult_descriptor_;
}
bool stMountUnrealResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMountUnrealResult_eResult stMountUnrealResult::eSuccess;
const stMountUnrealResult_eResult stMountUnrealResult::eInner_Error;
const stMountUnrealResult_eResult stMountUnrealResult::eCond_Not_Meet;
const stMountUnrealResult_eResult stMountUnrealResult::eRes_Not_Enough;
const stMountUnrealResult_eResult stMountUnrealResult::eMax_Unreal;
const stMountUnrealResult_eResult stMountUnrealResult::eResult_MIN;
const stMountUnrealResult_eResult stMountUnrealResult::eResult_MAX;
const int stMountUnrealResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMountUnrealResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountUnrealResult_ProtoModID_descriptor_;
}
bool stMountUnrealResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMountUnrealResult_ProtoModID stMountUnrealResult::ModID;
const stMountUnrealResult_ProtoModID stMountUnrealResult::ProtoModID_MIN;
const stMountUnrealResult_ProtoModID stMountUnrealResult::ProtoModID_MAX;
const int stMountUnrealResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMountUnrealResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountUnrealResult_ProtoFunID_descriptor_;
}
bool stMountUnrealResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 246:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMountUnrealResult_ProtoFunID stMountUnrealResult::FunID;
const stMountUnrealResult_ProtoFunID stMountUnrealResult::ProtoFunID_MIN;
const stMountUnrealResult_ProtoFunID stMountUnrealResult::ProtoFunID_MAX;
const int stMountUnrealResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMountUnrealResult::kResultFieldNumber;
const int stMountUnrealResult::kMountIdFieldNumber;
const int stMountUnrealResult::kOldMountIdFieldNumber;
#endif  // !_MSC_VER

stMountUnrealResult::stMountUnrealResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMountUnrealResult::InitAsDefaultInstance() {
}

stMountUnrealResult::stMountUnrealResult(const stMountUnrealResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMountUnrealResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  mountid_ = 0u;
  oldmountid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMountUnrealResult::~stMountUnrealResult() {
  SharedDtor();
}

void stMountUnrealResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMountUnrealResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMountUnrealResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMountUnrealResult_descriptor_;
}

const stMountUnrealResult& stMountUnrealResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stMountUnrealResult* stMountUnrealResult::default_instance_ = NULL;

stMountUnrealResult* stMountUnrealResult::New() const {
  return new stMountUnrealResult;
}

void stMountUnrealResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    mountid_ = 0u;
    oldmountid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMountUnrealResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stMountUnrealResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stMountUnrealResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stMountUnrealResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mountId;
        break;
      }

      // optional uint32 mountId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mountid_)));
          set_has_mountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldMountId;
        break;
      }

      // optional uint32 oldMountId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldMountId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldmountid_)));
          set_has_oldmountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMountUnrealResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stMountUnrealResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 mountId = 2;
  if (has_mountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mountid(), output);
  }

  // optional uint32 oldMountId = 3;
  if (has_oldmountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldmountid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMountUnrealResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stMountUnrealResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 mountId = 2;
  if (has_mountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mountid(), target);
  }

  // optional uint32 oldMountId = 3;
  if (has_oldmountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldmountid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMountUnrealResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stMountUnrealResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 mountId = 2;
    if (has_mountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mountid());
    }

    // optional uint32 oldMountId = 3;
    if (has_oldmountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldmountid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMountUnrealResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMountUnrealResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMountUnrealResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMountUnrealResult::MergeFrom(const stMountUnrealResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_mountid()) {
      set_mountid(from.mountid());
    }
    if (from.has_oldmountid()) {
      set_oldmountid(from.oldmountid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMountUnrealResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMountUnrealResult::CopyFrom(const stMountUnrealResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMountUnrealResult::IsInitialized() const {

  return true;
}

void stMountUnrealResult::Swap(stMountUnrealResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(mountid_, other->mountid_);
    std::swap(oldmountid_, other->oldmountid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMountUnrealResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMountUnrealResult_descriptor_;
  metadata.reflection = stMountUnrealResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenMountGrowWindow_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenMountGrowWindow_ProtoModID_descriptor_;
}
bool stReqOpenMountGrowWindow_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenMountGrowWindow_ProtoModID stReqOpenMountGrowWindow::ModID;
const stReqOpenMountGrowWindow_ProtoModID stReqOpenMountGrowWindow::ProtoModID_MIN;
const stReqOpenMountGrowWindow_ProtoModID stReqOpenMountGrowWindow::ProtoModID_MAX;
const int stReqOpenMountGrowWindow::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenMountGrowWindow_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenMountGrowWindow_ProtoFunID_descriptor_;
}
bool stReqOpenMountGrowWindow_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 247:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenMountGrowWindow_ProtoFunID stReqOpenMountGrowWindow::FunID;
const stReqOpenMountGrowWindow_ProtoFunID stReqOpenMountGrowWindow::ProtoFunID_MIN;
const stReqOpenMountGrowWindow_ProtoFunID stReqOpenMountGrowWindow::ProtoFunID_MAX;
const int stReqOpenMountGrowWindow::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenMountGrowWindow::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqOpenMountGrowWindow::stReqOpenMountGrowWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenMountGrowWindow::InitAsDefaultInstance() {
}

stReqOpenMountGrowWindow::stReqOpenMountGrowWindow(const stReqOpenMountGrowWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenMountGrowWindow::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenMountGrowWindow::~stReqOpenMountGrowWindow() {
  SharedDtor();
}

void stReqOpenMountGrowWindow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenMountGrowWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenMountGrowWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenMountGrowWindow_descriptor_;
}

const stReqOpenMountGrowWindow& stReqOpenMountGrowWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqOpenMountGrowWindow* stReqOpenMountGrowWindow::default_instance_ = NULL;

stReqOpenMountGrowWindow* stReqOpenMountGrowWindow::New() const {
  return new stReqOpenMountGrowWindow;
}

void stReqOpenMountGrowWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenMountGrowWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenMountGrowWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenMountGrowWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenMountGrowWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenMountGrowWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenMountGrowWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenMountGrowWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenMountGrowWindow::MergeFrom(const stReqOpenMountGrowWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenMountGrowWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenMountGrowWindow::CopyFrom(const stReqOpenMountGrowWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenMountGrowWindow::IsInitialized() const {

  return true;
}

void stReqOpenMountGrowWindow::Swap(stReqOpenMountGrowWindow* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenMountGrowWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenMountGrowWindow_descriptor_;
  metadata.reflection = stReqOpenMountGrowWindow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOpenMountGrowWindowResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenMountGrowWindowResult_ProtoModID_descriptor_;
}
bool stOpenMountGrowWindowResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenMountGrowWindowResult_ProtoModID stOpenMountGrowWindowResult::ModID;
const stOpenMountGrowWindowResult_ProtoModID stOpenMountGrowWindowResult::ProtoModID_MIN;
const stOpenMountGrowWindowResult_ProtoModID stOpenMountGrowWindowResult::ProtoModID_MAX;
const int stOpenMountGrowWindowResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOpenMountGrowWindowResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenMountGrowWindowResult_ProtoFunID_descriptor_;
}
bool stOpenMountGrowWindowResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 248:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOpenMountGrowWindowResult_ProtoFunID stOpenMountGrowWindowResult::FunID;
const stOpenMountGrowWindowResult_ProtoFunID stOpenMountGrowWindowResult::ProtoFunID_MIN;
const stOpenMountGrowWindowResult_ProtoFunID stOpenMountGrowWindowResult::ProtoFunID_MAX;
const int stOpenMountGrowWindowResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOpenMountGrowWindowResult::kLevelFieldNumber;
const int stOpenMountGrowWindowResult::kExpFieldNumber;
const int stOpenMountGrowWindowResult::kBattleFieldNumber;
#endif  // !_MSC_VER

stOpenMountGrowWindowResult::stOpenMountGrowWindowResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOpenMountGrowWindowResult::InitAsDefaultInstance() {
}

stOpenMountGrowWindowResult::stOpenMountGrowWindowResult(const stOpenMountGrowWindowResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOpenMountGrowWindowResult::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  exp_ = 0u;
  battle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOpenMountGrowWindowResult::~stOpenMountGrowWindowResult() {
  SharedDtor();
}

void stOpenMountGrowWindowResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOpenMountGrowWindowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOpenMountGrowWindowResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOpenMountGrowWindowResult_descriptor_;
}

const stOpenMountGrowWindowResult& stOpenMountGrowWindowResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stOpenMountGrowWindowResult* stOpenMountGrowWindowResult::default_instance_ = NULL;

stOpenMountGrowWindowResult* stOpenMountGrowWindowResult::New() const {
  return new stOpenMountGrowWindowResult;
}

void stOpenMountGrowWindowResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    exp_ = 0u;
    battle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOpenMountGrowWindowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battle;
        break;
      }

      // optional uint32 battle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_)));
          set_has_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOpenMountGrowWindowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exp(), output);
  }

  // optional uint32 battle = 3;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOpenMountGrowWindowResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // optional uint32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exp(), target);
  }

  // optional uint32 battle = 3;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOpenMountGrowWindowResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 battle = 3;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOpenMountGrowWindowResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOpenMountGrowWindowResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOpenMountGrowWindowResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOpenMountGrowWindowResult::MergeFrom(const stOpenMountGrowWindowResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_battle()) {
      set_battle(from.battle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOpenMountGrowWindowResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOpenMountGrowWindowResult::CopyFrom(const stOpenMountGrowWindowResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOpenMountGrowWindowResult::IsInitialized() const {

  return true;
}

void stOpenMountGrowWindowResult::Swap(stOpenMountGrowWindowResult* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(battle_, other->battle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOpenMountGrowWindowResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOpenMountGrowWindowResult_descriptor_;
  metadata.reflection = stOpenMountGrowWindowResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshBattle_ProtoModID_descriptor_;
}
bool stRefreshBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshBattle_ProtoModID stRefreshBattle::ModID;
const stRefreshBattle_ProtoModID stRefreshBattle::ProtoModID_MIN;
const stRefreshBattle_ProtoModID stRefreshBattle::ProtoModID_MAX;
const int stRefreshBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshBattle_ProtoFunID_descriptor_;
}
bool stRefreshBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 249:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshBattle_ProtoFunID stRefreshBattle::FunID;
const stRefreshBattle_ProtoFunID stRefreshBattle::ProtoFunID_MIN;
const stRefreshBattle_ProtoFunID stRefreshBattle::ProtoFunID_MAX;
const int stRefreshBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshBattle::kBattleFieldNumber;
#endif  // !_MSC_VER

stRefreshBattle::stRefreshBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshBattle::InitAsDefaultInstance() {
}

stRefreshBattle::stRefreshBattle(const stRefreshBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshBattle::SharedCtor() {
  _cached_size_ = 0;
  battle_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshBattle::~stRefreshBattle() {
  SharedDtor();
}

void stRefreshBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefreshBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshBattle_descriptor_;
}

const stRefreshBattle& stRefreshBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRefreshBattle* stRefreshBattle::default_instance_ = NULL;

stRefreshBattle* stRefreshBattle::New() const {
  return new stRefreshBattle;
}

void stRefreshBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battle_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 battle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_)));
          set_has_battle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 battle = 1;
  if (has_battle()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 battle = 1;
  if (has_battle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 battle = 1;
    if (has_battle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshBattle::MergeFrom(const stRefreshBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battle()) {
      set_battle(from.battle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshBattle::CopyFrom(const stRefreshBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshBattle::IsInitialized() const {

  return true;
}

void stRefreshBattle::Swap(stRefreshBattle* other) {
  if (other != this) {
    std::swap(battle_, other->battle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshBattle_descriptor_;
  metadata.reflection = stRefreshBattle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stLevelWflfareInfo::kLevelFieldNumber;
const int stLevelWflfareInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

stLevelWflfareInfo::stLevelWflfareInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLevelWflfareInfo::InitAsDefaultInstance() {
}

stLevelWflfareInfo::stLevelWflfareInfo(const stLevelWflfareInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLevelWflfareInfo::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLevelWflfareInfo::~stLevelWflfareInfo() {
  SharedDtor();
}

void stLevelWflfareInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLevelWflfareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLevelWflfareInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelWflfareInfo_descriptor_;
}

const stLevelWflfareInfo& stLevelWflfareInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stLevelWflfareInfo* stLevelWflfareInfo::default_instance_ = NULL;

stLevelWflfareInfo* stLevelWflfareInfo::New() const {
  return new stLevelWflfareInfo;
}

void stLevelWflfareInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLevelWflfareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLevelWflfareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLevelWflfareInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLevelWflfareInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLevelWflfareInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLevelWflfareInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLevelWflfareInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLevelWflfareInfo::MergeFrom(const stLevelWflfareInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLevelWflfareInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLevelWflfareInfo::CopyFrom(const stLevelWflfareInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLevelWflfareInfo::IsInitialized() const {

  return true;
}

void stLevelWflfareInfo::Swap(stLevelWflfareInfo* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLevelWflfareInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLevelWflfareInfo_descriptor_;
  metadata.reflection = stLevelWflfareInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHasGotRewardWflfareInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHasGotRewardWflfareInfo_ProtoModID_descriptor_;
}
bool stHasGotRewardWflfareInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHasGotRewardWflfareInfo_ProtoModID stHasGotRewardWflfareInfo::ModID;
const stHasGotRewardWflfareInfo_ProtoModID stHasGotRewardWflfareInfo::ProtoModID_MIN;
const stHasGotRewardWflfareInfo_ProtoModID stHasGotRewardWflfareInfo::ProtoModID_MAX;
const int stHasGotRewardWflfareInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHasGotRewardWflfareInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHasGotRewardWflfareInfo_ProtoFunID_descriptor_;
}
bool stHasGotRewardWflfareInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 250:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHasGotRewardWflfareInfo_ProtoFunID stHasGotRewardWflfareInfo::FunID;
const stHasGotRewardWflfareInfo_ProtoFunID stHasGotRewardWflfareInfo::ProtoFunID_MIN;
const stHasGotRewardWflfareInfo_ProtoFunID stHasGotRewardWflfareInfo::ProtoFunID_MAX;
const int stHasGotRewardWflfareInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHasGotRewardWflfareInfo::kInfoFieldNumber;
const int stHasGotRewardWflfareInfo::kIsOpenFieldNumber;
#endif  // !_MSC_VER

stHasGotRewardWflfareInfo::stHasGotRewardWflfareInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHasGotRewardWflfareInfo::InitAsDefaultInstance() {
}

stHasGotRewardWflfareInfo::stHasGotRewardWflfareInfo(const stHasGotRewardWflfareInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHasGotRewardWflfareInfo::SharedCtor() {
  _cached_size_ = 0;
  isopen_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHasGotRewardWflfareInfo::~stHasGotRewardWflfareInfo() {
  SharedDtor();
}

void stHasGotRewardWflfareInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHasGotRewardWflfareInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHasGotRewardWflfareInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHasGotRewardWflfareInfo_descriptor_;
}

const stHasGotRewardWflfareInfo& stHasGotRewardWflfareInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stHasGotRewardWflfareInfo* stHasGotRewardWflfareInfo::default_instance_ = NULL;

stHasGotRewardWflfareInfo* stHasGotRewardWflfareInfo::New() const {
  return new stHasGotRewardWflfareInfo;
}

void stHasGotRewardWflfareInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isopen_ = false;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHasGotRewardWflfareInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MiscProto.stLevelWflfareInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_isOpen;
        break;
      }

      // optional bool isOpen = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopen_)));
          set_has_isopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHasGotRewardWflfareInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MiscProto.stLevelWflfareInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional bool isOpen = 2;
  if (has_isopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isopen(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHasGotRewardWflfareInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MiscProto.stLevelWflfareInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional bool isOpen = 2;
  if (has_isopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isopen(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHasGotRewardWflfareInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool isOpen = 2;
    if (has_isopen()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MiscProto.stLevelWflfareInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHasGotRewardWflfareInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHasGotRewardWflfareInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHasGotRewardWflfareInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHasGotRewardWflfareInfo::MergeFrom(const stHasGotRewardWflfareInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isopen()) {
      set_isopen(from.isopen());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHasGotRewardWflfareInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHasGotRewardWflfareInfo::CopyFrom(const stHasGotRewardWflfareInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHasGotRewardWflfareInfo::IsInitialized() const {

  return true;
}

void stHasGotRewardWflfareInfo::Swap(stHasGotRewardWflfareInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(isopen_, other->isopen_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHasGotRewardWflfareInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHasGotRewardWflfareInfo_descriptor_;
  metadata.reflection = stHasGotRewardWflfareInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqReceiveWflfare_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveWflfare_ProtoModID_descriptor_;
}
bool stReqReceiveWflfare_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReceiveWflfare_ProtoModID stReqReceiveWflfare::ModID;
const stReqReceiveWflfare_ProtoModID stReqReceiveWflfare::ProtoModID_MIN;
const stReqReceiveWflfare_ProtoModID stReqReceiveWflfare::ProtoModID_MAX;
const int stReqReceiveWflfare::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqReceiveWflfare_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveWflfare_ProtoFunID_descriptor_;
}
bool stReqReceiveWflfare_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 251:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReceiveWflfare_ProtoFunID stReqReceiveWflfare::FunID;
const stReqReceiveWflfare_ProtoFunID stReqReceiveWflfare::ProtoFunID_MIN;
const stReqReceiveWflfare_ProtoFunID stReqReceiveWflfare::ProtoFunID_MAX;
const int stReqReceiveWflfare::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqReceiveWflfare::kLevelFieldNumber;
const int stReqReceiveWflfare::kTypeFieldNumber;
#endif  // !_MSC_VER

stReqReceiveWflfare::stReqReceiveWflfare()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqReceiveWflfare::InitAsDefaultInstance() {
}

stReqReceiveWflfare::stReqReceiveWflfare(const stReqReceiveWflfare& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqReceiveWflfare::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqReceiveWflfare::~stReqReceiveWflfare() {
  SharedDtor();
}

void stReqReceiveWflfare::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqReceiveWflfare::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqReceiveWflfare::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveWflfare_descriptor_;
}

const stReqReceiveWflfare& stReqReceiveWflfare::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqReceiveWflfare* stReqReceiveWflfare::default_instance_ = NULL;

stReqReceiveWflfare* stReqReceiveWflfare::New() const {
  return new stReqReceiveWflfare;
}

void stReqReceiveWflfare::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqReceiveWflfare::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqReceiveWflfare::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqReceiveWflfare::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqReceiveWflfare::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqReceiveWflfare::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqReceiveWflfare* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqReceiveWflfare*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqReceiveWflfare::MergeFrom(const stReqReceiveWflfare& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqReceiveWflfare::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqReceiveWflfare::CopyFrom(const stReqReceiveWflfare& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqReceiveWflfare::IsInitialized() const {

  return true;
}

void stReqReceiveWflfare::Swap(stReqReceiveWflfare* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqReceiveWflfare::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqReceiveWflfare_descriptor_;
  metadata.reflection = stReqReceiveWflfare_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReceiveWflfareResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveWflfareResult_eResult_descriptor_;
}
bool stReceiveWflfareResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveWflfareResult_eResult stReceiveWflfareResult::eSuccess;
const stReceiveWflfareResult_eResult stReceiveWflfareResult::eInner_Error;
const stReceiveWflfareResult_eResult stReceiveWflfareResult::eHas_Got_Reward;
const stReceiveWflfareResult_eResult stReceiveWflfareResult::eDiamond_Not_Enough;
const stReceiveWflfareResult_eResult stReceiveWflfareResult::eLevel_Too_Low;
const stReceiveWflfareResult_eResult stReceiveWflfareResult::eResult_MIN;
const stReceiveWflfareResult_eResult stReceiveWflfareResult::eResult_MAX;
const int stReceiveWflfareResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReceiveWflfareResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveWflfareResult_ProtoModID_descriptor_;
}
bool stReceiveWflfareResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveWflfareResult_ProtoModID stReceiveWflfareResult::ModID;
const stReceiveWflfareResult_ProtoModID stReceiveWflfareResult::ProtoModID_MIN;
const stReceiveWflfareResult_ProtoModID stReceiveWflfareResult::ProtoModID_MAX;
const int stReceiveWflfareResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReceiveWflfareResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveWflfareResult_ProtoFunID_descriptor_;
}
bool stReceiveWflfareResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 252:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveWflfareResult_ProtoFunID stReceiveWflfareResult::FunID;
const stReceiveWflfareResult_ProtoFunID stReceiveWflfareResult::ProtoFunID_MIN;
const stReceiveWflfareResult_ProtoFunID stReceiveWflfareResult::ProtoFunID_MAX;
const int stReceiveWflfareResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReceiveWflfareResult::kResultFieldNumber;
#endif  // !_MSC_VER

stReceiveWflfareResult::stReceiveWflfareResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReceiveWflfareResult::InitAsDefaultInstance() {
}

stReceiveWflfareResult::stReceiveWflfareResult(const stReceiveWflfareResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReceiveWflfareResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReceiveWflfareResult::~stReceiveWflfareResult() {
  SharedDtor();
}

void stReceiveWflfareResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReceiveWflfareResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReceiveWflfareResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveWflfareResult_descriptor_;
}

const stReceiveWflfareResult& stReceiveWflfareResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReceiveWflfareResult* stReceiveWflfareResult::default_instance_ = NULL;

stReceiveWflfareResult* stReceiveWflfareResult::New() const {
  return new stReceiveWflfareResult;
}

void stReceiveWflfareResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReceiveWflfareResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stReceiveWflfareResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stReceiveWflfareResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stReceiveWflfareResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReceiveWflfareResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stReceiveWflfareResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReceiveWflfareResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stReceiveWflfareResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReceiveWflfareResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stReceiveWflfareResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReceiveWflfareResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReceiveWflfareResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReceiveWflfareResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReceiveWflfareResult::MergeFrom(const stReceiveWflfareResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReceiveWflfareResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReceiveWflfareResult::CopyFrom(const stReceiveWflfareResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReceiveWflfareResult::IsInitialized() const {

  return true;
}

void stReceiveWflfareResult::Swap(stReceiveWflfareResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReceiveWflfareResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReceiveWflfareResult_descriptor_;
  metadata.reflection = stReceiveWflfareResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPaySign_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPaySign_ProtoModID_descriptor_;
}
bool stReqPaySign_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPaySign_ProtoModID stReqPaySign::ModID;
const stReqPaySign_ProtoModID stReqPaySign::ProtoModID_MIN;
const stReqPaySign_ProtoModID stReqPaySign::ProtoModID_MAX;
const int stReqPaySign::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPaySign_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPaySign_ProtoFunID_descriptor_;
}
bool stReqPaySign_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 253:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPaySign_ProtoFunID stReqPaySign::FunID;
const stReqPaySign_ProtoFunID stReqPaySign::ProtoFunID_MIN;
const stReqPaySign_ProtoFunID stReqPaySign::ProtoFunID_MAX;
const int stReqPaySign::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPaySign::kSdkidFieldNumber;
const int stReqPaySign::kDataFieldNumber;
#endif  // !_MSC_VER

stReqPaySign::stReqPaySign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPaySign::InitAsDefaultInstance() {
}

stReqPaySign::stReqPaySign(const stReqPaySign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPaySign::SharedCtor() {
  _cached_size_ = 0;
  sdkid_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPaySign::~stReqPaySign() {
  SharedDtor();
}

void stReqPaySign::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stReqPaySign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPaySign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPaySign_descriptor_;
}

const stReqPaySign& stReqPaySign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqPaySign* stReqPaySign::default_instance_ = NULL;

stReqPaySign* stReqPaySign::New() const {
  return new stReqPaySign;
}

void stReqPaySign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sdkid_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPaySign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sdkid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sdkid_)));
          set_has_sdkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional string data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPaySign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sdkid = 1;
  if (has_sdkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sdkid(), output);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPaySign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sdkid = 1;
  if (has_sdkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sdkid(), target);
  }

  // optional string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPaySign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sdkid = 1;
    if (has_sdkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sdkid());
    }

    // optional string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPaySign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPaySign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPaySign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPaySign::MergeFrom(const stReqPaySign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sdkid()) {
      set_sdkid(from.sdkid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPaySign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPaySign::CopyFrom(const stReqPaySign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPaySign::IsInitialized() const {

  return true;
}

void stReqPaySign::Swap(stReqPaySign* other) {
  if (other != this) {
    std::swap(sdkid_, other->sdkid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPaySign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPaySign_descriptor_;
  metadata.reflection = stReqPaySign_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetPaySign_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetPaySign_ProtoModID_descriptor_;
}
bool stRetPaySign_ProtoModID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetPaySign_ProtoModID stRetPaySign::ModID;
const stRetPaySign_ProtoModID stRetPaySign::ProtoModID_MIN;
const stRetPaySign_ProtoModID stRetPaySign::ProtoModID_MAX;
const int stRetPaySign::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetPaySign_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetPaySign_ProtoFunID_descriptor_;
}
bool stRetPaySign_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 254:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetPaySign_ProtoFunID stRetPaySign::FunID;
const stRetPaySign_ProtoFunID stRetPaySign::ProtoFunID_MIN;
const stRetPaySign_ProtoFunID stRetPaySign::ProtoFunID_MAX;
const int stRetPaySign::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetPaySign::kSignFieldNumber;
#endif  // !_MSC_VER

stRetPaySign::stRetPaySign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetPaySign::InitAsDefaultInstance() {
}

stRetPaySign::stRetPaySign(const stRetPaySign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetPaySign::SharedCtor() {
  _cached_size_ = 0;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetPaySign::~stRetPaySign() {
  SharedDtor();
}

void stRetPaySign::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void stRetPaySign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetPaySign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetPaySign_descriptor_;
}

const stRetPaySign& stRetPaySign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetPaySign* stRetPaySign::default_instance_ = NULL;

stRetPaySign* stRetPaySign::New() const {
  return new stRetPaySign;
}

void stRetPaySign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetPaySign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sign = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetPaySign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sign = 1;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetPaySign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sign = 1;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetPaySign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sign = 1;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetPaySign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetPaySign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetPaySign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetPaySign::MergeFrom(const stRetPaySign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetPaySign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetPaySign::CopyFrom(const stRetPaySign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetPaySign::IsInitialized() const {

  return true;
}

void stRetPaySign::Swap(stRetPaySign* other) {
  if (other != this) {
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetPaySign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetPaySign_descriptor_;
  metadata.reflection = stRetPaySign_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqServerPay_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqServerPay_ProtoModID_descriptor_;
}
bool stReqServerPay_ProtoModID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqServerPay_ProtoModID stReqServerPay::ModID;
const stReqServerPay_ProtoModID stReqServerPay::ProtoModID_MIN;
const stReqServerPay_ProtoModID stReqServerPay::ProtoModID_MAX;
const int stReqServerPay::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqServerPay_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqServerPay_ProtoFunID_descriptor_;
}
bool stReqServerPay_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqServerPay_ProtoFunID stReqServerPay::FunID;
const stReqServerPay_ProtoFunID stReqServerPay::ProtoFunID_MIN;
const stReqServerPay_ProtoFunID stReqServerPay::ProtoFunID_MAX;
const int stReqServerPay::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqServerPay::kSdkidFieldNumber;
const int stReqServerPay::kItemIdFieldNumber;
const int stReqServerPay::kMoneyFieldNumber;
const int stReqServerPay::kTokenFieldNumber;
#endif  // !_MSC_VER

stReqServerPay::stReqServerPay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqServerPay::InitAsDefaultInstance() {
}

stReqServerPay::stReqServerPay(const stReqServerPay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqServerPay::SharedCtor() {
  _cached_size_ = 0;
  sdkid_ = 0u;
  itemid_ = 0u;
  money_ = 0u;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqServerPay::~stReqServerPay() {
  SharedDtor();
}

void stReqServerPay::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void stReqServerPay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqServerPay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqServerPay_descriptor_;
}

const stReqServerPay& stReqServerPay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqServerPay* stReqServerPay::default_instance_ = NULL;

stReqServerPay* stReqServerPay::New() const {
  return new stReqServerPay;
}

void stReqServerPay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sdkid_ = 0u;
    itemid_ = 0u;
    money_ = 0u;
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqServerPay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sdkid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdkid_)));
          set_has_sdkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional uint32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_token;
        break;
      }

      // optional string token = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqServerPay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 sdkid = 1;
  if (has_sdkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sdkid(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional uint32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->money(), output);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqServerPay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 sdkid = 1;
  if (has_sdkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sdkid(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional uint32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->money(), target);
  }

  // optional string token = 4;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqServerPay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 sdkid = 1;
    if (has_sdkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sdkid());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional string token = 4;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqServerPay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqServerPay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqServerPay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqServerPay::MergeFrom(const stReqServerPay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sdkid()) {
      set_sdkid(from.sdkid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqServerPay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqServerPay::CopyFrom(const stReqServerPay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqServerPay::IsInitialized() const {

  return true;
}

void stReqServerPay::Swap(stReqServerPay* other) {
  if (other != this) {
    std::swap(sdkid_, other->sdkid_);
    std::swap(itemid_, other->itemid_);
    std::swap(money_, other->money_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqServerPay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqServerPay_descriptor_;
  metadata.reflection = stReqServerPay_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetServerPay_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetServerPay_eResult_descriptor_;
}
bool stRetServerPay_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetServerPay_eResult stRetServerPay::eSuccess;
const stRetServerPay_eResult stRetServerPay::eInner_Error;
const stRetServerPay_eResult stRetServerPay::eMoney_Not_Enough;
const stRetServerPay_eResult stRetServerPay::eItem;
const stRetServerPay_eResult stRetServerPay::eMoney;
const stRetServerPay_eResult stRetServerPay::eResult_MIN;
const stRetServerPay_eResult stRetServerPay::eResult_MAX;
const int stRetServerPay::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetServerPay_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetServerPay_ProtoModID_descriptor_;
}
bool stRetServerPay_ProtoModID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetServerPay_ProtoModID stRetServerPay::ModID;
const stRetServerPay_ProtoModID stRetServerPay::ProtoModID_MIN;
const stRetServerPay_ProtoModID stRetServerPay::ProtoModID_MAX;
const int stRetServerPay::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetServerPay_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetServerPay_ProtoFunID_descriptor_;
}
bool stRetServerPay_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetServerPay_ProtoFunID stRetServerPay::FunID;
const stRetServerPay_ProtoFunID stRetServerPay::ProtoFunID_MIN;
const stRetServerPay_ProtoFunID stRetServerPay::ProtoFunID_MAX;
const int stRetServerPay::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetServerPay::kResultFieldNumber;
const int stRetServerPay::kOrderIdFieldNumber;
#endif  // !_MSC_VER

stRetServerPay::stRetServerPay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetServerPay::InitAsDefaultInstance() {
}

stRetServerPay::stRetServerPay(const stRetServerPay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetServerPay::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetServerPay::~stRetServerPay() {
  SharedDtor();
}

void stRetServerPay::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void stRetServerPay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetServerPay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetServerPay_descriptor_;
}

const stRetServerPay& stRetServerPay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRetServerPay* stRetServerPay::default_instance_ = NULL;

stRetServerPay* stRetServerPay::New() const {
  return new stRetServerPay;
}

void stRetServerPay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetServerPay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRetServerPay.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRetServerPay_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRetServerPay_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_orderId;
        break;
      }

      // optional string orderId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetServerPay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRetServerPay.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string orderId = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->orderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetServerPay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRetServerPay.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string orderId = 2;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->orderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetServerPay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRetServerPay.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string orderId = 2;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetServerPay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetServerPay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetServerPay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetServerPay::MergeFrom(const stRetServerPay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetServerPay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetServerPay::CopyFrom(const stRetServerPay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetServerPay::IsInitialized() const {

  return true;
}

void stRetServerPay::Swap(stRetServerPay* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(orderid_, other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetServerPay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetServerPay_descriptor_;
  metadata.reflection = stRetServerPay_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSummonReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSummonReward_ProtoModID_descriptor_;
}
bool stReqSummonReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSummonReward_ProtoModID stReqSummonReward::ModID;
const stReqSummonReward_ProtoModID stReqSummonReward::ProtoModID_MIN;
const stReqSummonReward_ProtoModID stReqSummonReward::ProtoModID_MAX;
const int stReqSummonReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSummonReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSummonReward_ProtoFunID_descriptor_;
}
bool stReqSummonReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSummonReward_ProtoFunID stReqSummonReward::FunID;
const stReqSummonReward_ProtoFunID stReqSummonReward::ProtoFunID_MIN;
const stReqSummonReward_ProtoFunID stReqSummonReward::ProtoFunID_MAX;
const int stReqSummonReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSummonReward::kCountIdFieldNumber;
const int stReqSummonReward::kSummonTypeFieldNumber;
const int stReqSummonReward::kRewardTypeFieldNumber;
#endif  // !_MSC_VER

stReqSummonReward::stReqSummonReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSummonReward::InitAsDefaultInstance() {
}

stReqSummonReward::stReqSummonReward(const stReqSummonReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSummonReward::SharedCtor() {
  _cached_size_ = 0;
  countid_ = 0u;
  summontype_ = 0u;
  rewardtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSummonReward::~stReqSummonReward() {
  SharedDtor();
}

void stReqSummonReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSummonReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSummonReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSummonReward_descriptor_;
}

const stReqSummonReward& stReqSummonReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqSummonReward* stReqSummonReward::default_instance_ = NULL;

stReqSummonReward* stReqSummonReward::New() const {
  return new stReqSummonReward;
}

void stReqSummonReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countid_ = 0u;
    summontype_ = 0u;
    rewardtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSummonReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 countId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countid_)));
          set_has_countid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_summonType;
        break;
      }

      // optional uint32 summonType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summontype_)));
          set_has_summontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardType;
        break;
      }

      // optional uint32 rewardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtype_)));
          set_has_rewardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSummonReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 countId = 1;
  if (has_countid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->countid(), output);
  }

  // optional uint32 summonType = 2;
  if (has_summontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->summontype(), output);
  }

  // optional uint32 rewardType = 3;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rewardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSummonReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 countId = 1;
  if (has_countid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->countid(), target);
  }

  // optional uint32 summonType = 2;
  if (has_summontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->summontype(), target);
  }

  // optional uint32 rewardType = 3;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rewardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSummonReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 countId = 1;
    if (has_countid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countid());
    }

    // optional uint32 summonType = 2;
    if (has_summontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summontype());
    }

    // optional uint32 rewardType = 3;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSummonReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSummonReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSummonReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSummonReward::MergeFrom(const stReqSummonReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countid()) {
      set_countid(from.countid());
    }
    if (from.has_summontype()) {
      set_summontype(from.summontype());
    }
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSummonReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSummonReward::CopyFrom(const stReqSummonReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSummonReward::IsInitialized() const {

  return true;
}

void stReqSummonReward::Swap(stReqSummonReward* other) {
  if (other != this) {
    std::swap(countid_, other->countid_);
    std::swap(summontype_, other->summontype_);
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSummonReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSummonReward_descriptor_;
  metadata.reflection = stReqSummonReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSummonRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonRewardResult_eResult_descriptor_;
}
bool stSummonRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSummonRewardResult_eResult stSummonRewardResult::eSUCCESS;
const stSummonRewardResult_eResult stSummonRewardResult::eHAS_GET_REWARD;
const stSummonRewardResult_eResult stSummonRewardResult::eHAS_NOT_BUY_INVEST_PLAN;
const stSummonRewardResult_eResult stSummonRewardResult::eBAG_FULL;
const stSummonRewardResult_eResult stSummonRewardResult::eOTHER_ERROR;
const stSummonRewardResult_eResult stSummonRewardResult::eResult_MIN;
const stSummonRewardResult_eResult stSummonRewardResult::eResult_MAX;
const int stSummonRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSummonRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonRewardResult_ProtoModID_descriptor_;
}
bool stSummonRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSummonRewardResult_ProtoModID stSummonRewardResult::ModID;
const stSummonRewardResult_ProtoModID stSummonRewardResult::ProtoModID_MIN;
const stSummonRewardResult_ProtoModID stSummonRewardResult::ProtoModID_MAX;
const int stSummonRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSummonRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonRewardResult_ProtoFunID_descriptor_;
}
bool stSummonRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSummonRewardResult_ProtoFunID stSummonRewardResult::FunID;
const stSummonRewardResult_ProtoFunID stSummonRewardResult::ProtoFunID_MIN;
const stSummonRewardResult_ProtoFunID stSummonRewardResult::ProtoFunID_MAX;
const int stSummonRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSummonRewardResult::kResultFieldNumber;
const int stSummonRewardResult::kCountIdFieldNumber;
const int stSummonRewardResult::kSummonTypeFieldNumber;
const int stSummonRewardResult::kRewardTypeFieldNumber;
#endif  // !_MSC_VER

stSummonRewardResult::stSummonRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSummonRewardResult::InitAsDefaultInstance() {
}

stSummonRewardResult::stSummonRewardResult(const stSummonRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSummonRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  countid_ = 0u;
  summontype_ = 0u;
  rewardtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSummonRewardResult::~stSummonRewardResult() {
  SharedDtor();
}

void stSummonRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSummonRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSummonRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonRewardResult_descriptor_;
}

const stSummonRewardResult& stSummonRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSummonRewardResult* stSummonRewardResult::default_instance_ = NULL;

stSummonRewardResult* stSummonRewardResult::New() const {
  return new stSummonRewardResult;
}

void stSummonRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    countid_ = 0u;
    summontype_ = 0u;
    rewardtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSummonRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stSummonRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stSummonRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stSummonRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_countId;
        break;
      }

      // optional uint32 countId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countid_)));
          set_has_countid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_summonType;
        break;
      }

      // optional uint32 summonType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summontype_)));
          set_has_summontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardType;
        break;
      }

      // optional uint32 rewardType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtype_)));
          set_has_rewardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSummonRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stSummonRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 countId = 2;
  if (has_countid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->countid(), output);
  }

  // optional uint32 summonType = 3;
  if (has_summontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->summontype(), output);
  }

  // optional uint32 rewardType = 4;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rewardtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSummonRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stSummonRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 countId = 2;
  if (has_countid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->countid(), target);
  }

  // optional uint32 summonType = 3;
  if (has_summontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->summontype(), target);
  }

  // optional uint32 rewardType = 4;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rewardtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSummonRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stSummonRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 countId = 2;
    if (has_countid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countid());
    }

    // optional uint32 summonType = 3;
    if (has_summontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summontype());
    }

    // optional uint32 rewardType = 4;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSummonRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSummonRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSummonRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSummonRewardResult::MergeFrom(const stSummonRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_countid()) {
      set_countid(from.countid());
    }
    if (from.has_summontype()) {
      set_summontype(from.summontype());
    }
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSummonRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSummonRewardResult::CopyFrom(const stSummonRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSummonRewardResult::IsInitialized() const {

  return true;
}

void stSummonRewardResult::Swap(stSummonRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(countid_, other->countid_);
    std::swap(summontype_, other->summontype_);
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSummonRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSummonRewardResult_descriptor_;
  metadata.reflection = stSummonRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSummonData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSummonData_ProtoModID_descriptor_;
}
bool stReqSummonData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSummonData_ProtoModID stReqSummonData::ModID;
const stReqSummonData_ProtoModID stReqSummonData::ProtoModID_MIN;
const stReqSummonData_ProtoModID stReqSummonData::ProtoModID_MAX;
const int stReqSummonData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSummonData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSummonData_ProtoFunID_descriptor_;
}
bool stReqSummonData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSummonData_ProtoFunID stReqSummonData::FunID;
const stReqSummonData_ProtoFunID stReqSummonData::ProtoFunID_MIN;
const stReqSummonData_ProtoFunID stReqSummonData::ProtoFunID_MAX;
const int stReqSummonData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSummonData::kSummonTypeFieldNumber;
#endif  // !_MSC_VER

stReqSummonData::stReqSummonData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSummonData::InitAsDefaultInstance() {
}

stReqSummonData::stReqSummonData(const stReqSummonData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSummonData::SharedCtor() {
  _cached_size_ = 0;
  summontype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSummonData::~stReqSummonData() {
  SharedDtor();
}

void stReqSummonData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSummonData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSummonData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSummonData_descriptor_;
}

const stReqSummonData& stReqSummonData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqSummonData* stReqSummonData::default_instance_ = NULL;

stReqSummonData* stReqSummonData::New() const {
  return new stReqSummonData;
}

void stReqSummonData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    summontype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSummonData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 summonType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summontype_)));
          set_has_summontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSummonData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 summonType = 1;
  if (has_summontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->summontype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSummonData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 summonType = 1;
  if (has_summontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->summontype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSummonData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 summonType = 1;
    if (has_summontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summontype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSummonData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSummonData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSummonData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSummonData::MergeFrom(const stReqSummonData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summontype()) {
      set_summontype(from.summontype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSummonData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSummonData::CopyFrom(const stReqSummonData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSummonData::IsInitialized() const {

  return true;
}

void stReqSummonData::Swap(stReqSummonData* other) {
  if (other != this) {
    std::swap(summontype_, other->summontype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSummonData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSummonData_descriptor_;
  metadata.reflection = stReqSummonData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSummonDataResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonDataResult_ProtoModID_descriptor_;
}
bool stSummonDataResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSummonDataResult_ProtoModID stSummonDataResult::ModID;
const stSummonDataResult_ProtoModID stSummonDataResult::ProtoModID_MIN;
const stSummonDataResult_ProtoModID stSummonDataResult::ProtoModID_MAX;
const int stSummonDataResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSummonDataResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonDataResult_ProtoFunID_descriptor_;
}
bool stSummonDataResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSummonDataResult_ProtoFunID stSummonDataResult::FunID;
const stSummonDataResult_ProtoFunID stSummonDataResult::ProtoFunID_MIN;
const stSummonDataResult_ProtoFunID stSummonDataResult::ProtoFunID_MAX;
const int stSummonDataResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSummonDataResult::kHasBuySummonmentFieldNumber;
const int stSummonDataResult::kFreeSummonRewardListFieldNumber;
const int stSummonDataResult::kRechargeSummonRewardListFieldNumber;
const int stSummonDataResult::kSummonTypeFieldNumber;
const int stSummonDataResult::kCountIdFieldNumber;
const int stSummonDataResult::kCountNumFieldNumber;
const int stSummonDataResult::kBeginTimeFieldNumber;
const int stSummonDataResult::kEndTimeFieldNumber;
#endif  // !_MSC_VER

stSummonDataResult::stSummonDataResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSummonDataResult::InitAsDefaultInstance() {
}

stSummonDataResult::stSummonDataResult(const stSummonDataResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSummonDataResult::SharedCtor() {
  _cached_size_ = 0;
  hasbuysummonment_ = false;
  summontype_ = 0u;
  countid_ = 0u;
  countnum_ = 0u;
  begintime_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSummonDataResult::~stSummonDataResult() {
  SharedDtor();
}

void stSummonDataResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSummonDataResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSummonDataResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSummonDataResult_descriptor_;
}

const stSummonDataResult& stSummonDataResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stSummonDataResult* stSummonDataResult::default_instance_ = NULL;

stSummonDataResult* stSummonDataResult::New() const {
  return new stSummonDataResult;
}

void stSummonDataResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasbuysummonment_ = false;
    summontype_ = 0u;
    countid_ = 0u;
    countnum_ = 0u;
    begintime_ = 0u;
    endtime_ = 0u;
  }
  freesummonrewardlist_.Clear();
  rechargesummonrewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSummonDataResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hasBuySummonment = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbuysummonment_)));
          set_has_hasbuysummonment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freeSummonRewardList;
        break;
      }

      // repeated uint32 freeSummonRewardList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeSummonRewardList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_freesummonrewardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_freesummonrewardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freeSummonRewardList;
        if (input->ExpectTag(24)) goto parse_rechargeSummonRewardList;
        break;
      }

      // repeated uint32 rechargeSummonRewardList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeSummonRewardList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_rechargesummonrewardlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rechargesummonrewardlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rechargeSummonRewardList;
        if (input->ExpectTag(32)) goto parse_summonType;
        break;
      }

      // optional uint32 summonType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_summonType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &summontype_)));
          set_has_summontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_countId;
        break;
      }

      // optional uint32 countId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countid_)));
          set_has_countid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_countNum;
        break;
      }

      // optional uint32 countNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &countnum_)));
          set_has_countnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_beginTime;
        break;
      }

      // optional uint32 beginTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_endTime;
        break;
      }

      // optional uint32 endTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSummonDataResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hasBuySummonment = 1;
  if (has_hasbuysummonment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasbuysummonment(), output);
  }

  // repeated uint32 freeSummonRewardList = 2;
  for (int i = 0; i < this->freesummonrewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->freesummonrewardlist(i), output);
  }

  // repeated uint32 rechargeSummonRewardList = 3;
  for (int i = 0; i < this->rechargesummonrewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->rechargesummonrewardlist(i), output);
  }

  // optional uint32 summonType = 4;
  if (has_summontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->summontype(), output);
  }

  // optional uint32 countId = 5;
  if (has_countid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->countid(), output);
  }

  // optional uint32 countNum = 6;
  if (has_countnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->countnum(), output);
  }

  // optional uint32 beginTime = 7;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begintime(), output);
  }

  // optional uint32 endTime = 8;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSummonDataResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool hasBuySummonment = 1;
  if (has_hasbuysummonment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasbuysummonment(), target);
  }

  // repeated uint32 freeSummonRewardList = 2;
  for (int i = 0; i < this->freesummonrewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->freesummonrewardlist(i), target);
  }

  // repeated uint32 rechargeSummonRewardList = 3;
  for (int i = 0; i < this->rechargesummonrewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->rechargesummonrewardlist(i), target);
  }

  // optional uint32 summonType = 4;
  if (has_summontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->summontype(), target);
  }

  // optional uint32 countId = 5;
  if (has_countid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->countid(), target);
  }

  // optional uint32 countNum = 6;
  if (has_countnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->countnum(), target);
  }

  // optional uint32 beginTime = 7;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->begintime(), target);
  }

  // optional uint32 endTime = 8;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSummonDataResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hasBuySummonment = 1;
    if (has_hasbuysummonment()) {
      total_size += 1 + 1;
    }

    // optional uint32 summonType = 4;
    if (has_summontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->summontype());
    }

    // optional uint32 countId = 5;
    if (has_countid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countid());
    }

    // optional uint32 countNum = 6;
    if (has_countnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->countnum());
    }

    // optional uint32 beginTime = 7;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

    // optional uint32 endTime = 8;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  // repeated uint32 freeSummonRewardList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->freesummonrewardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->freesummonrewardlist(i));
    }
    total_size += 1 * this->freesummonrewardlist_size() + data_size;
  }

  // repeated uint32 rechargeSummonRewardList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rechargesummonrewardlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rechargesummonrewardlist(i));
    }
    total_size += 1 * this->rechargesummonrewardlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSummonDataResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSummonDataResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSummonDataResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSummonDataResult::MergeFrom(const stSummonDataResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  freesummonrewardlist_.MergeFrom(from.freesummonrewardlist_);
  rechargesummonrewardlist_.MergeFrom(from.rechargesummonrewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasbuysummonment()) {
      set_hasbuysummonment(from.hasbuysummonment());
    }
    if (from.has_summontype()) {
      set_summontype(from.summontype());
    }
    if (from.has_countid()) {
      set_countid(from.countid());
    }
    if (from.has_countnum()) {
      set_countnum(from.countnum());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSummonDataResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSummonDataResult::CopyFrom(const stSummonDataResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSummonDataResult::IsInitialized() const {

  return true;
}

void stSummonDataResult::Swap(stSummonDataResult* other) {
  if (other != this) {
    std::swap(hasbuysummonment_, other->hasbuysummonment_);
    freesummonrewardlist_.Swap(&other->freesummonrewardlist_);
    rechargesummonrewardlist_.Swap(&other->rechargesummonrewardlist_);
    std::swap(summontype_, other->summontype_);
    std::swap(countid_, other->countid_);
    std::swap(countnum_, other->countnum_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSummonDataResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSummonDataResult_descriptor_;
  metadata.reflection = stSummonDataResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuySummonPlanResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuySummonPlanResult_eResult_descriptor_;
}
bool stBuySummonPlanResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuySummonPlanResult_eResult stBuySummonPlanResult::eSUCCESS;
const stBuySummonPlanResult_eResult stBuySummonPlanResult::eDIAMOND_NOT_ENOGUH;
const stBuySummonPlanResult_eResult stBuySummonPlanResult::eVIP_LV_TOO_LOW;
const stBuySummonPlanResult_eResult stBuySummonPlanResult::eHAS_BUY;
const stBuySummonPlanResult_eResult stBuySummonPlanResult::eResult_MIN;
const stBuySummonPlanResult_eResult stBuySummonPlanResult::eResult_MAX;
const int stBuySummonPlanResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuySummonPlanResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuySummonPlanResult_ProtoModID_descriptor_;
}
bool stBuySummonPlanResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuySummonPlanResult_ProtoModID stBuySummonPlanResult::ModID;
const stBuySummonPlanResult_ProtoModID stBuySummonPlanResult::ProtoModID_MIN;
const stBuySummonPlanResult_ProtoModID stBuySummonPlanResult::ProtoModID_MAX;
const int stBuySummonPlanResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuySummonPlanResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuySummonPlanResult_ProtoFunID_descriptor_;
}
bool stBuySummonPlanResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuySummonPlanResult_ProtoFunID stBuySummonPlanResult::FunID;
const stBuySummonPlanResult_ProtoFunID stBuySummonPlanResult::ProtoFunID_MIN;
const stBuySummonPlanResult_ProtoFunID stBuySummonPlanResult::ProtoFunID_MAX;
const int stBuySummonPlanResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuySummonPlanResult::kResultFieldNumber;
const int stBuySummonPlanResult::kIndexFieldNumber;
#endif  // !_MSC_VER

stBuySummonPlanResult::stBuySummonPlanResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuySummonPlanResult::InitAsDefaultInstance() {
}

stBuySummonPlanResult::stBuySummonPlanResult(const stBuySummonPlanResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuySummonPlanResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  index_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuySummonPlanResult::~stBuySummonPlanResult() {
  SharedDtor();
}

void stBuySummonPlanResult::SharedDtor() {
  if (index_ != &::google::protobuf::internal::kEmptyString) {
    delete index_;
  }
  if (this != default_instance_) {
  }
}

void stBuySummonPlanResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuySummonPlanResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuySummonPlanResult_descriptor_;
}

const stBuySummonPlanResult& stBuySummonPlanResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stBuySummonPlanResult* stBuySummonPlanResult::default_instance_ = NULL;

stBuySummonPlanResult* stBuySummonPlanResult::New() const {
  return new stBuySummonPlanResult;
}

void stBuySummonPlanResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_index()) {
      if (index_ != &::google::protobuf::internal::kEmptyString) {
        index_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuySummonPlanResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stBuySummonPlanResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stBuySummonPlanResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stBuySummonPlanResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_index;
        break;
      }

      // optional string index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->index().data(), this->index().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuySummonPlanResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stBuySummonPlanResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional string index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuySummonPlanResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stBuySummonPlanResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional string index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->index().data(), this->index().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuySummonPlanResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stBuySummonPlanResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional string index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuySummonPlanResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuySummonPlanResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuySummonPlanResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuySummonPlanResult::MergeFrom(const stBuySummonPlanResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuySummonPlanResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuySummonPlanResult::CopyFrom(const stBuySummonPlanResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuySummonPlanResult::IsInitialized() const {

  return true;
}

void stBuySummonPlanResult::Swap(stBuySummonPlanResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuySummonPlanResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuySummonPlanResult_descriptor_;
  metadata.reflection = stBuySummonPlanResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRechargeCheck_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRechargeCheck_ProtoModID_descriptor_;
}
bool stReqRechargeCheck_ProtoModID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRechargeCheck_ProtoModID stReqRechargeCheck::ModID;
const stReqRechargeCheck_ProtoModID stReqRechargeCheck::ProtoModID_MIN;
const stReqRechargeCheck_ProtoModID stReqRechargeCheck::ProtoModID_MAX;
const int stReqRechargeCheck::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRechargeCheck_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRechargeCheck_ProtoFunID_descriptor_;
}
bool stReqRechargeCheck_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRechargeCheck_ProtoFunID stReqRechargeCheck::FunID;
const stReqRechargeCheck_ProtoFunID stReqRechargeCheck::ProtoFunID_MIN;
const stReqRechargeCheck_ProtoFunID stReqRechargeCheck::ProtoFunID_MAX;
const int stReqRechargeCheck::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRechargeCheck::kRechargeIdFieldNumber;
const int stReqRechargeCheck::kBuyCountFieldNumber;
#endif  // !_MSC_VER

stReqRechargeCheck::stReqRechargeCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRechargeCheck::InitAsDefaultInstance() {
}

stReqRechargeCheck::stReqRechargeCheck(const stReqRechargeCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRechargeCheck::SharedCtor() {
  _cached_size_ = 0;
  rechargeid_ = 0u;
  buycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRechargeCheck::~stReqRechargeCheck() {
  SharedDtor();
}

void stReqRechargeCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRechargeCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRechargeCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRechargeCheck_descriptor_;
}

const stReqRechargeCheck& stReqRechargeCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stReqRechargeCheck* stReqRechargeCheck::default_instance_ = NULL;

stReqRechargeCheck* stReqRechargeCheck::New() const {
  return new stReqRechargeCheck;
}

void stReqRechargeCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rechargeid_ = 0u;
    buycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRechargeCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rechargeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargeid_)));
          set_has_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buyCount;
        break;
      }

      // optional uint32 buyCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRechargeCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rechargeId = 1;
  if (has_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rechargeid(), output);
  }

  // optional uint32 buyCount = 2;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRechargeCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rechargeId = 1;
  if (has_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rechargeid(), target);
  }

  // optional uint32 buyCount = 2;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRechargeCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rechargeId = 1;
    if (has_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargeid());
    }

    // optional uint32 buyCount = 2;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRechargeCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRechargeCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRechargeCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRechargeCheck::MergeFrom(const stReqRechargeCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rechargeid()) {
      set_rechargeid(from.rechargeid());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRechargeCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRechargeCheck::CopyFrom(const stReqRechargeCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRechargeCheck::IsInitialized() const {

  return true;
}

void stReqRechargeCheck::Swap(stReqRechargeCheck* other) {
  if (other != this) {
    std::swap(rechargeid_, other->rechargeid_);
    std::swap(buycount_, other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRechargeCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRechargeCheck_descriptor_;
  metadata.reflection = stReqRechargeCheck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRechargeCheckResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechargeCheckResult_eResult_descriptor_;
}
bool stRechargeCheckResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRechargeCheckResult_eResult stRechargeCheckResult::eSuccess;
const stRechargeCheckResult_eResult stRechargeCheckResult::eBag_Full;
const stRechargeCheckResult_eResult stRechargeCheckResult::eNo_Times;
const stRechargeCheckResult_eResult stRechargeCheckResult::eOther_Error;
const stRechargeCheckResult_eResult stRechargeCheckResult::eResult_MIN;
const stRechargeCheckResult_eResult stRechargeCheckResult::eResult_MAX;
const int stRechargeCheckResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRechargeCheckResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechargeCheckResult_ProtoModID_descriptor_;
}
bool stRechargeCheckResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRechargeCheckResult_ProtoModID stRechargeCheckResult::ModID;
const stRechargeCheckResult_ProtoModID stRechargeCheckResult::ProtoModID_MIN;
const stRechargeCheckResult_ProtoModID stRechargeCheckResult::ProtoModID_MAX;
const int stRechargeCheckResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRechargeCheckResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechargeCheckResult_ProtoFunID_descriptor_;
}
bool stRechargeCheckResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRechargeCheckResult_ProtoFunID stRechargeCheckResult::FunID;
const stRechargeCheckResult_ProtoFunID stRechargeCheckResult::ProtoFunID_MIN;
const stRechargeCheckResult_ProtoFunID stRechargeCheckResult::ProtoFunID_MAX;
const int stRechargeCheckResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRechargeCheckResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRechargeCheckResult::stRechargeCheckResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRechargeCheckResult::InitAsDefaultInstance() {
}

stRechargeCheckResult::stRechargeCheckResult(const stRechargeCheckResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRechargeCheckResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRechargeCheckResult::~stRechargeCheckResult() {
  SharedDtor();
}

void stRechargeCheckResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRechargeCheckResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRechargeCheckResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechargeCheckResult_descriptor_;
}

const stRechargeCheckResult& stRechargeCheckResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Misc_2eproto();
  return *default_instance_;
}

stRechargeCheckResult* stRechargeCheckResult::default_instance_ = NULL;

stRechargeCheckResult* stRechargeCheckResult::New() const {
  return new stRechargeCheckResult;
}

void stRechargeCheckResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRechargeCheckResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MiscProto.stRechargeCheckResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::MiscProto::stRechargeCheckResult_eResult_IsValid(value)) {
            set_result(static_cast< ::MiscProto::stRechargeCheckResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRechargeCheckResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .MiscProto.stRechargeCheckResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRechargeCheckResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .MiscProto.stRechargeCheckResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRechargeCheckResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .MiscProto.stRechargeCheckResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRechargeCheckResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRechargeCheckResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRechargeCheckResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRechargeCheckResult::MergeFrom(const stRechargeCheckResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRechargeCheckResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRechargeCheckResult::CopyFrom(const stRechargeCheckResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRechargeCheckResult::IsInitialized() const {

  return true;
}

void stRechargeCheckResult::Swap(stRechargeCheckResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRechargeCheckResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRechargeCheckResult_descriptor_;
  metadata.reflection = stRechargeCheckResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MiscProto

// @@protoc_insertion_point(global_scope)
