// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Global.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Global.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Global {

namespace {

const ::google::protobuf::Descriptor* stLoginGlobal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLoginGlobal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginGlobal_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginGlobal_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCreateRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateRole_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateRole_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCreateRoleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCreateRoleResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateRoleResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateRoleResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSnapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSnapData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSnapData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSnapData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSnapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSnapData_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetSnapData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetSnapData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetSnapData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetSnapData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLoadData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLoadData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLoadData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLoadData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGateForwardProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGateForwardProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGateForwardProto_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGateForwardProto_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stForwardProto2Me_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForwardProto2Me_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stForwardProto2Me_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stForwardProto2Me_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBroadcastProto2AllUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadcastProto2AllUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadcastProto2AllUser_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadcastProto2AllUser_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLoginGlobalFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLoginGlobalFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginGlobalFail_FailReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginGlobalFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginGlobalFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyLoginOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyLoginOut_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyLoginOut_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyLoginOut_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGameSvrStartUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGameSvrStartUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGameSvrStartUp_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGameSvrStartUp_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stKillUserOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stKillUserOut_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillUserOut_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillUserOut_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stServerCfgPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stServerCfgPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* stNotifyGateSvrCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyGateSvrCfg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGateSvrCfg_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGateSvrCfg_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReloginGlobal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReloginGlobal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReloginGlobal_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReloginGlobal_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPlayerAutoConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPlayerAutoConnect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPlayerAutoConnect_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPlayerAutoConnect_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stClientLostConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stClientLostConnect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stClientLostConnect_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stClientLostConnect_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAskIsNewAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAskIsNewAccount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAskIsNewAccount_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAskIsNewAccount_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stIsNewAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stIsNewAccount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stIsNewAccount_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stIsNewAccount_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSaveRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSaveRoleInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRoleInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRoleInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRoleInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserEnterMapSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserEnterMapSuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserEnterMapSuccess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserEnterMapSuccess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRechargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRechargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stUserRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserRecharge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserRecharge_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserRecharge_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stProcessGM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stProcessGM_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stProcessGM_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stProcessGM_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynFetchLilianNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynFetchLilianNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynFetchLilianNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynFetchLilianNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynGuildID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynGuildID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGuildID_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGuildID_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCreateGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCreateGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCreateGuildDecMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCreateGuildDecMoney_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateGuildDecMoney_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateGuildDecMoney_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stForwardJoininGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForwardJoininGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stForwardJoininGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stForwardJoininGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddGuildContribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddGuildContribute_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddGuildContribute_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddGuildContribute_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBroadcastGuildChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadcastGuildChatInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadcastGuildChatInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadcastGuildChatInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuildPray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuildPray_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildPray_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildPray_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynUserLevel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynUserLevel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynUserLevel_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynUserLevel_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynCopymapStarNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynCopymapStarNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynCopymapStarNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynCopymapStarNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynUserBattlePower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynUserBattlePower_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynUserBattlePower_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynUserBattlePower_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendTeamChatInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendTeamChatInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendTeamChatInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendTeamChatInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stTeamLeaveCopyMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTeamLeaveCopyMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stTeamLeaveCopyMap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stTeamLeaveCopyMap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stTreasureCombine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTreasureCombine_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stTreasureCombine_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stTreasureCombine_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stTreasureCombineSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTreasureCombineSuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stTreasureCombineSuccess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stTreasureCombineSuccess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBuyPeaceModubleTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBuyPeaceModubleTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyPeaceModubleTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBuyPeaceModubleTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqChangeGameSvr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqChangeGameSvr_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChangeGameSvr_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChangeGameSvr_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stConfirmChangeGameSvr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stConfirmChangeGameSvr_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stConfirmChangeGameSvr_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stConfirmChangeGameSvr_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetOtherUserData2Me_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetOtherUserData2Me_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOtherUserData2Me_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetOtherUserData2Me_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMailAttach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMailAttach_reflection_ = NULL;
const ::google::protobuf::Descriptor* stObtainItemFromMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stObtainItemFromMail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stObtainItemFromMail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stObtainItemFromMail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynAddTreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynAddTreasure_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAddTreasure_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAddTreasure_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBeginPKWithOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBeginPKWithOther_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginPKWithOther_ePKType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginPKWithOther_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBeginPKWithOther_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserLeitaiChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserLeitaiChallenge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLeitaiChallenge_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLeitaiChallenge_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stArenaPKResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stArenaPKResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stArenaPKResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stArenaPKResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynDrawHeroScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynDrawHeroScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynDrawHeroScore_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynDrawHeroScore_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUpLeitaiUseTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUpLeitaiUseTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpLeitaiUseTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpLeitaiUseTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserLeaveGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserLeaveGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLeaveGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLeaveGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEnterCopymapMemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterCopymapMemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stTeamEnterCopyMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTeamEnterCopyMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stTeamEnterCopyMap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stTeamEnterCopyMap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOne2OnePVPEnterCopyMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOne2OnePVPEnterCopyMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPEnterCopyMap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPEnterCopyMap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stForwardCapture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForwardCapture_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stForwardCapture_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stForwardCapture_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCaptureRewardItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCaptureRewardItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stCaptureReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCaptureReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCaptureReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCaptureReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRealTimeBattleEnterCopymap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRealTimeBattleEnterCopymap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeBattleEnterCopymap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeBattleEnterCopymap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyAddLilian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyAddLilian_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddLilian_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddLilian_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEnterGuildCopymap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterGuildCopymap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterGuildCopymap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterGuildCopymap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynMyContribyte_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMyContribyte_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMyContribyte_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMyContribyte_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOnlineUserGMType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOnlineUserGMType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOnlineUserGMType_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOnlineUserGMType_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stForbidOnlineUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForbidOnlineUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stForbidOnlineUser_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stForbidOnlineUser_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOne2OnePVPFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOne2OnePVPFinish_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPFinish_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePVPFinish_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stActivityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stActivityConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynActivityConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynActivityConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynActivityConfig_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynActivityConfig_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCaptureTreasureFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCaptureTreasureFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCaptureTreasureFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCaptureTreasureFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCharID2Rank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCharID2Rank_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRankModuleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRankModuleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynRankModuleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRankModuleInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRankModuleInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRankModuleInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGiftBagReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiftBagReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGiveGiftBagReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiveGiftBagReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveGiftBagReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveGiftBagReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyGameSvrCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyGameSvrCfg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGameSvrCfg_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGameSvrCfg_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyCurEquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyCurEquipInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyCurEquipInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyCurEquipInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReloginGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReloginGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReloginGame_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReloginGame_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFirstKillBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFirstKillBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stTeamCopyMapFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTeamCopyMapFinish_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stTeamCopyMapFinish_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stTeamCopyMapFinish_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserOnlineSendFirstKillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserOnlineSendFirstKillInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserOnlineSendFirstKillInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserOnlineSendFirstKillInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stTeamFinishFirstKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTeamFinishFirstKill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stTeamFinishFirstKill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stTeamFinishFirstKill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSetClearWorldBossTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSetClearWorldBossTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetClearWorldBossTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetClearWorldBossTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSetWorldBossBuyNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSetWorldBossBuyNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetWorldBossBuyNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetWorldBossBuyNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserDecSP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserDecSP_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserDecSP_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserDecSP_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUsreDecLilian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUsreDecLilian_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUsreDecLilian_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUsreDecLilian_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserDamagePair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserDamagePair_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGuildCopymapFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuildCopymapFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildCopymapFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildCopymapFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuildCopymapKillBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuildCopymapKillBoss_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildCopymapKillBoss_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildCopymapKillBoss_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWorldBossCopymapFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWorldBossCopymapFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stWorldBossCopymapFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWorldBossCopymapFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stKillWorldBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stKillWorldBoss_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillWorldBoss_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillWorldBoss_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDrawHeroScoreReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDrawHeroScoreReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroScoreReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroScoreReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDrawHeroRankReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDrawHeroRankReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCompensantionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCompensantionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSetCompensationID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSetCompensationID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetCompensationID_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetCompensationID_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSetOpenServerDay_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSetOpenServerDay_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetOpenServerDay_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetOpenServerDay_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynGuildLv2AllMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynGuildLv2AllMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGuildLv2AllMember_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGuildLv2AllMember_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stForwardChgBadge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForwardChgBadge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stForwardChgBadge_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stForwardChgBadge_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWorldBossBuyDecDiamond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWorldBossBuyDecDiamond_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stWorldBossBuyDecDiamond_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWorldBossBuyDecDiamond_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuildDonateSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuildDonateSuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildDonateSuccess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildDonateSuccess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserLeaveWorldBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserLeaveWorldBoss_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLeaveWorldBoss_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLeaveWorldBoss_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyGameAutoConnect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyGameAutoConnect_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGameAutoConnect_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGameAutoConnect_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stForwardDrawHeroScoreReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForwardDrawHeroScoreReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stForwardDrawHeroScoreReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stForwardDrawHeroScoreReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyArenaReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyArenaReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyArenaReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyArenaReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stForwardInvestgateAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stForwardInvestgateAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardInvestgateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardInvestgateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ForwardInvestgateResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ForwardInvestgateResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGMModifyUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGMModifyUserInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGMModifyUserInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGMModifyUserInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynMyArenaRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMyArenaRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMyArenaRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMyArenaRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynVipLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynVipLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynVipLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynVipLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyClearArenaCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyClearArenaCD_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyClearArenaCD_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyClearArenaCD_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResetArenaChallengeNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResetArenaChallengeNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotfiyResetChallengeNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotfiyResetChallengeNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotfiyResetChallengeNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotfiyResetChallengeNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqResetInterceptNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqResetInterceptNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetInterceptNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqResetInterceptNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyClearInterceptCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyClearInterceptCD_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyClearInterceptCD_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyClearInterceptCD_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyResetInterceptNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyResetInterceptNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyResetInterceptNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyResetInterceptNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyGuardQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyGuardQuality_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGuardQuality_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGuardQuality_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyGuardInspiredSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyGuardInspiredSuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGuardInspiredSuccess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGuardInspiredSuccess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRefreshGuardQuality_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRefreshGuardQuality_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyClearOne2OneScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyClearOne2OneScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyClearOne2OneScore_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyClearOne2OneScore_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stClearOne2OneScoreSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stClearOne2OneScoreSuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stClearOne2OneScoreSuccess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stClearOne2OneScoreSuccess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInterceptReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInterceptReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInterceptReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInterceptReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stQuickFinishDecDiamond_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQuickFinishDecDiamond_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stQuickFinishDecDiamond_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stQuickFinishDecDiamond_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stQuickFinishDiamondSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQuickFinishDiamondSuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stQuickFinishDiamondSuccess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stQuickFinishDiamondSuccess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOne2OnePkWithRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOne2OnePkWithRobot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePkWithRobot_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOne2OnePkWithRobot_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyUserBeginGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyUserBeginGuard_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyUserBeginGuard_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyUserBeginGuard_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyUserInterceptResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyUserInterceptResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyUserInterceptResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyUserInterceptResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyCloseBetaReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyCloseBetaReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyCloseBetaReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyCloseBetaReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEnterManorFightMapUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterManorFightMapUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stEnterManorFightMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterManorFightMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterManorFightMap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterManorFightMap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stManorFightBattleProp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stManorFightBattleProp_reflection_ = NULL;
const ::google::protobuf::Descriptor* stFinishManorFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFinishManorFight_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFinishManorFight_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFinishManorFight_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExistName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExistName_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stExistName_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExistName_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExistName_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynName_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynName_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynName_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynGloryfashionCharID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynGloryfashionCharID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGloryfashionCharID_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGloryfashionCharID_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDevilCallItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDevilCallItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stAllDevilCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAllDevilCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAllDevilCall_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAllDevilCall_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDevilCallReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDevilCallReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCallReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCallReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDevilCallRewardRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDevilCallRewardRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCallRewardRet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCallRewardRet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDevilCall_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDevilCall_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCall_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCall_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDevilCallRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDevilCallRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCallRet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCallRet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDevilCallSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDevilCallSummary_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCallSummary_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDevilCallSummary_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExpeditionItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExpeditionItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stExpeditionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExpeditionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpeditionInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpeditionInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExpedition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExpedition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpedition_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpedition_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExpeditionHero_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExpeditionHero_reflection_ = NULL;
const ::google::protobuf::Descriptor* stExpeditionRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExpeditionRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpeditionRet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpeditionRet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExpeditionReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExpeditionReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpeditionReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpeditionReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExpeditionRewardRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExpeditionRewardRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpeditionRewardRet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpeditionRewardRet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFastExpedition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFastExpedition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFastExpedition_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFastExpedition_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFastExpeditionRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFastExpeditionRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFastExpeditionRet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFastExpeditionRet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelExpedition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelExpedition_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelExpedition_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelExpedition_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelExpeditionRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelExpeditionRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelExpeditionRet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelExpeditionRet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stExpeditionSummary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stExpeditionSummary_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpeditionSummary_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stExpeditionSummary_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGiveLilianDayTaskCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiveLilianDayTaskCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLilianDayTaskCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLilianDayTaskCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUpdateDamageRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUpdateDamageRank_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpdateDamageRank_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpdateDamageRank_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNoticeSendRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNoticeSendRankInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNoticeSendRankInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNoticeSendRankInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOperateActivityCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOperateActivityCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOperateActivityCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOperateActivityCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOperateActivityReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOperateActivityReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOperateActivityReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOperateActivityReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOperateActivityRewardCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOperateActivityRewardCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOperateActivityRewardCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOperateActivityRewardCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOperateActivityLotteryReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOperateActivityLotteryReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOperateActivityLotteryRewardCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOperateActivityLotteryRewardCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryRewardCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryRewardCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqPayTypeCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPayTypeCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqUserRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqUserRankInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUserRankInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqUserRankInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* userSortInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  userSortInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stUserRankInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserRankInfoResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserRankInfoResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserRankInfoResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEmeraldDreamCopymapFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEmeraldDreamCopymapFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEmeraldDreamCopymapFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEmeraldDreamCopymapFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stKillEmeraldDreamBoss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stKillEmeraldDreamBoss_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillEmeraldDreamBoss_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillEmeraldDreamBoss_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* strRemoveNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  strRemoveNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* strRemoveNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* strRemoveNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCopyMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCopyMapInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCopyMapInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCopyMapInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCopyMapInfoResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCopyMapInfoResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCopyMapInfoResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCopyMapInfoResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRealTimeTeamMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRealTimeTeamMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stOnPubLeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stOnPubLeaveTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stOnPubLeaveTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stOnPubLeaveTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDeductMoney_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDeductMoney_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDeductMoney_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDeductMoney_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDeductMoneyResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDeductMoneyResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDeductMoneyResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDeductMoneyResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDeductMoneyResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGiveReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiveReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGiveRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiveRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCheckMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCheckMission_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCheckMission_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCheckMission_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCheckTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCheckTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCheckTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCheckTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqEnterTaskLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEnterTaskLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterTaskLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterTaskLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDisbandTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDisbandTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDisbandTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDisbandTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawInviteReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawInviteReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawInviteReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawInviteReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawInviteRewardCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawInviteRewardCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawInviteRewardCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawInviteRewardCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDrawUseInviteReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDrawUseInviteReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawUseInviteReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDrawUseInviteReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRoleInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHeroLeagueEnterCopyMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroLeagueEnterCopyMap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueEnterCopyMap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueEnterCopyMap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHeroLeaguePkWithRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroLeaguePkWithRobot_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeaguePkWithRobot_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeaguePkWithRobot_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqHeroLeagueCheck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqHeroLeagueCheck_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroLeagueCheck_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroLeagueCheck_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqHeroLeagueCheck_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHeroLeagueMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroLeagueMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPubRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPubRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stHeroLeagueResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroLeagueResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRoleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRoleList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRoleList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRoleList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynRoleListResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRoleListResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRoleListResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynRoleListResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynChampionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynChampionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqSynChampionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSynChampionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqWorskip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqWorskip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqWorskip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqWorskip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWorskipResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWorskipResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stWorskipResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRedPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRedPoint_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRedPointResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRedPointResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInterceptResultToGlobal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInterceptResultToGlobal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInterceptResultToGlobal_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInterceptResultToGlobal_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRoomInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRoomInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRoomInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetAddTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetAddTeamMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetAddTeamMember_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetAddTeamMember_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MarryObjInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryObjInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqPropose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPropose_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAgreeMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAgreeMarry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqQuitWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqQuitWedding_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqQuitWedding_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqQuitWedding_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqReEnterWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqReEnterWedding_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReEnterWedding_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReEnterWedding_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBuyFireWork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBuyFireWork_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyFireWork_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBuyFireWork_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAgreeInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAgreeInvite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeInvite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeInvite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqTakeCandy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqTakeCandy_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyCoupleMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyCoupleMarry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarry_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarry_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendWeedingRing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendWeedingRing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendWeedingRing_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendWeedingRing_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMarryInfoCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMarryInfoCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMarryInfoCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMarryInfoCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUseFireWork_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUseFireWork_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseFireWork_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseFireWork_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetMarryInfoToCouple_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetMarryInfoToCouple_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetMarryInfoToCouple_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetMarryInfoToCouple_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyCoupleMarryCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyCoupleMarryCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarryCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarryCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetForceDivorce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetForceDivorce_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetForceDivorce_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetForceDivorce_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetForceDivorceCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetForceDivorceCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetForceDivorceCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetForceDivorceCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetRejectDivorce_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetRejectDivorce_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetDelUserOnlineMarryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDelUserOnlineMarryInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDelUserOnlineMarryInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDelUserOnlineMarryInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSynGuildBlackMarketLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSynGuildBlackMarketLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSynGuildBlackMarketLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSynGuildBlackMarketLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynGuildBlackMarketLvResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynGuildBlackMarketLvResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGuildBlackMarketLvResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGuildBlackMarketLvResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGloryUserPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGloryUserPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGloryUserDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGloryUserDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGloryUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGloryUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* stEnterResBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterResBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBroadResBattleInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadResBattleInvite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPubOffline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPubOffline_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPubOffline_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPubOffline_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDiscoverConsume_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDiscoverConsume_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDiscoverConsume_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDiscoverConsume_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynCoupleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynCoupleInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynCoupleInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynCoupleInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynResBattleUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynResBattleUserData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynResBattleTop50_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynResBattleTop50_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynResBattleKing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynResBattleKing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplyInviteResBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplyInviteResBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynGloryKingTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynGloryKingTitle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGloryKingTitle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGloryKingTitle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPubOnline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPubOnline_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPubOnline_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPubOnline_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResBattleSend2Pub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResBattleSend2Pub_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleSend2Pub_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleSend2Pub_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stServerParamItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stServerParamItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stServerParamSend2Game_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stServerParamSend2Game_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stServerParamSend2Game_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stServerParamSend2Game_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynUserPhotoID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynUserPhotoID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynUserPhotoID_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynUserPhotoID_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUseLvlBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUseLvlBox_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseLvlBox_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseLvlBox_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUseLvlBoxRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUseLvlBoxRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseLvlBoxRes_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseLvlBoxRes_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRechangeStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRechangeStatistics_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRechangeStatistics_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRechangeStatistics_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNftItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNftItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGlobal2GameQueryUserNft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGlobal2GameQueryUserNft_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGlobal2GameQueryUserNft_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGlobal2GameQueryUserNft_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGame2GlobalQueryUserNftResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGame2GlobalQueryUserNftResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGame2GlobalQueryUserNftResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGame2GlobalQueryUserNftResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGlobal2GameChangeNftItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGlobal2GameChangeNftItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGlobal2GameChangeNftItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGlobal2GameChangeNftItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGame2GlobalChangeNftItemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGame2GlobalChangeNftItemResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGame2GlobalChangeNftItemResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGame2GlobalChangeNftItemResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGame2GlobalNftVipGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGame2GlobalNftVipGift_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGame2GlobalNftVipGift_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGame2GlobalNftVipGift_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetNftOfflineUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetNftOfflineUserData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetNftOfflineUserData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetNftOfflineUserData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetChangeNftOfflineUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetChangeNftOfflineUserData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetChangeNftOfflineUserData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetChangeNftOfflineUserData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendUserLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendUserLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendUserLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendUserLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqKillUserOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqKillUserOut_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqKillUserOut_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqKillUserOut_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stKillUserOutResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stKillUserOutResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillUserOutResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillUserOutResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqSetUserGMType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSetUserGMType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSetUserGMType_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSetUserGMType_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSetUserGMTypeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSetUserGMTypeResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetUserGMTypeResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetUserGMTypeResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBanUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBanUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBanUser_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBanUser_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBanUserResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBanUserResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBanUserResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBanUserResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendMailAttach_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendMailAttach_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSendMail2User_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendMail2User_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendMail2User_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendMail2User_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendMail2UserResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendMail2UserResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendMail2UserResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendMail2UserResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWebMotifyUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWebMotifyUserInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWebMotifyUserInfoRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWebMotifyUserInfoRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfoRet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfoRet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddOrUpdateNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddOrUpdateNotice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddOrUpdateNotice_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddOrUpdateNotice_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDelNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDelNotice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDelNotice_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDelNotice_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWebNotifyRechargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWebNotifyRechargeInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stWebNotifyRechargeInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWebNotifyRechargeInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddGiftBagCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddGiftBagCfg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddGiftBagCfg_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddGiftBagCfg_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDelGiftBagCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDelGiftBagCfg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDelGiftBagCfg_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDelGiftBagCfg_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddBlackAndWhite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddBlackAndWhite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddBlackAndWhite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddBlackAndWhite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSetServerMaintenanceTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSetServerMaintenanceTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetServerMaintenanceTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSetServerMaintenanceTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGetSvrConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGetSvrConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetSvrConfig_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGetSvrConfig_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetSvrConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetSvrConfig_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetSvrConfig_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetSvrConfig_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUpdateSvrCfg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUpdateSvrCfg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpdateSvrCfg_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpdateSvrCfg_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyWebOnlineNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyWebOnlineNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyWebOnlineNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyWebOnlineNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEnterSelectPage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterSelectPage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterSelectPage_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterSelectPage_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyWebCreateRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyWebCreateRole_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyWebCreateRole_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyWebCreateRole_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendGuildLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendGuildLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* sstSendGuildResLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sstSendGuildResLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendModuleLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendModuleLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGetTxGiftBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGetTxGiftBag_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGetTxGiftBag_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGetTxGiftBag_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetGetTxGiftBag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetGetTxGiftBag_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGetTxGiftBag_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGetTxGiftBag_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUpdateSvrOpenTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUpdateSvrOpenTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResourceChgLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResourceChgLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUseInviteCode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUseInviteCode_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseInviteCode_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseInviteCode_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUseInviteCodeCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUseInviteCodeCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseInviteCodeCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUseInviteCodeCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLimitPetActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLimitPetActivityData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLimitPetActivityData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLimitPetActivityData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAcitivityLimitPetItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAcitivityLimitPetItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSendLimitPetActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendLimitPetActivityData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendShutDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendShutDown_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendShutDown_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendShutDown_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWeb2GlobalQueryUserNft_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWeb2GlobalQueryUserNft_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stWeb2GlobalQueryUserNft_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWeb2GlobalQueryUserNft_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGlobal2WebQueryUserNftResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGlobal2WebQueryUserNftResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGlobal2WebQueryUserNftResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGlobal2WebQueryUserNftResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWeb2GlobalChangeNftItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWeb2GlobalChangeNftItem_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stWeb2GlobalChangeNftItem_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWeb2GlobalChangeNftItem_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGlobal2WebChangeNftItemResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGlobal2WebChangeNftItemResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGlobal2WebChangeNftItemResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGlobal2WebChangeNftItemResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GlobalModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SaveType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eLoadRoleDataType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGMType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRealTimePKType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRankModule_ID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eNoticeOp_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Global_2eproto() {
  protobuf_AddDesc_Global_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Global.proto");
  GOOGLE_CHECK(file != NULL);
  stLoginGlobal_descriptor_ = file->message_type(0);
  static const int stLoginGlobal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGlobal, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGlobal, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGlobal, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGlobal, port_),
  };
  stLoginGlobal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLoginGlobal_descriptor_,
      stLoginGlobal::default_instance_,
      stLoginGlobal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGlobal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGlobal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLoginGlobal));
  stLoginGlobal_ProtoModID_descriptor_ = stLoginGlobal_descriptor_->enum_type(0);
  stLoginGlobal_ProtoFunID_descriptor_ = stLoginGlobal_descriptor_->enum_type(1);
  stCreateRole_descriptor_ = file->message_type(1);
  static const int stCreateRole_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, faceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, clientip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, serverid_),
  };
  stCreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCreateRole_descriptor_,
      stCreateRole::default_instance_,
      stCreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCreateRole));
  stCreateRole_ProtoModID_descriptor_ = stCreateRole_descriptor_->enum_type(0);
  stCreateRole_ProtoFunID_descriptor_ = stCreateRole_descriptor_->enum_type(1);
  stCreateRoleResult_descriptor_ = file->message_type(2);
  static const int stCreateRoleResult_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, createtime_),
  };
  stCreateRoleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCreateRoleResult_descriptor_,
      stCreateRoleResult::default_instance_,
      stCreateRoleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateRoleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCreateRoleResult));
  stCreateRoleResult_ProtoModID_descriptor_ = stCreateRoleResult_descriptor_->enum_type(0);
  stCreateRoleResult_ProtoFunID_descriptor_ = stCreateRoleResult_descriptor_->enum_type(1);
  stReqSnapData_descriptor_ = file->message_type(3);
  static const int stReqSnapData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSnapData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSnapData, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSnapData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSnapData, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSnapData, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSnapData, serverid_),
  };
  stReqSnapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSnapData_descriptor_,
      stReqSnapData::default_instance_,
      stReqSnapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSnapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSnapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSnapData));
  stReqSnapData_ProtoModID_descriptor_ = stReqSnapData_descriptor_->enum_type(0);
  stReqSnapData_ProtoFunID_descriptor_ = stReqSnapData_descriptor_->enum_type(1);
  stSnapData_descriptor_ = file->message_type(4);
  static const int stSnapData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSnapData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSnapData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSnapData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSnapData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSnapData, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSnapData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSnapData, serverid_),
  };
  stSnapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSnapData_descriptor_,
      stSnapData::default_instance_,
      stSnapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSnapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSnapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSnapData));
  stRetSnapData_descriptor_ = file->message_type(5);
  static const int stRetSnapData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSnapData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSnapData, account_),
  };
  stRetSnapData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetSnapData_descriptor_,
      stRetSnapData::default_instance_,
      stRetSnapData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSnapData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSnapData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetSnapData));
  stRetSnapData_ProtoModID_descriptor_ = stRetSnapData_descriptor_->enum_type(0);
  stRetSnapData_ProtoFunID_descriptor_ = stRetSnapData_descriptor_->enum_type(1);
  stReqLoadData_descriptor_ = file->message_type(6);
  static const int stReqLoadData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLoadData, gamesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLoadData, gatesvrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLoadData, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLoadData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLoadData, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLoadData, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLoadData, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLoadData, netip_),
  };
  stReqLoadData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLoadData_descriptor_,
      stReqLoadData::default_instance_,
      stReqLoadData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLoadData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLoadData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLoadData));
  stReqLoadData_ProtoModID_descriptor_ = stReqLoadData_descriptor_->enum_type(0);
  stReqLoadData_ProtoFunID_descriptor_ = stReqLoadData_descriptor_->enum_type(1);
  stGateForwardProto_descriptor_ = file->message_type(7);
  static const int stGateForwardProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardProto, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardProto, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardProto, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardProto, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardProto, data_),
  };
  stGateForwardProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGateForwardProto_descriptor_,
      stGateForwardProto::default_instance_,
      stGateForwardProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGateForwardProto));
  stGateForwardProto_ProtoModID_descriptor_ = stGateForwardProto_descriptor_->enum_type(0);
  stGateForwardProto_ProtoFunID_descriptor_ = stGateForwardProto_descriptor_->enum_type(1);
  stForwardProto2Me_descriptor_ = file->message_type(8);
  static const int stForwardProto2Me_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardProto2Me, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardProto2Me, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardProto2Me, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardProto2Me, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardProto2Me, data_),
  };
  stForwardProto2Me_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForwardProto2Me_descriptor_,
      stForwardProto2Me::default_instance_,
      stForwardProto2Me_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardProto2Me, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardProto2Me, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForwardProto2Me));
  stForwardProto2Me_ProtoModID_descriptor_ = stForwardProto2Me_descriptor_->enum_type(0);
  stForwardProto2Me_ProtoFunID_descriptor_ = stForwardProto2Me_descriptor_->enum_type(1);
  stBroadcastProto2AllUser_descriptor_ = file->message_type(9);
  static const int stBroadcastProto2AllUser_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2AllUser, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2AllUser, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2AllUser, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2AllUser, data_),
  };
  stBroadcastProto2AllUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadcastProto2AllUser_descriptor_,
      stBroadcastProto2AllUser::default_instance_,
      stBroadcastProto2AllUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2AllUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2AllUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadcastProto2AllUser));
  stBroadcastProto2AllUser_ProtoModID_descriptor_ = stBroadcastProto2AllUser_descriptor_->enum_type(0);
  stBroadcastProto2AllUser_ProtoFunID_descriptor_ = stBroadcastProto2AllUser_descriptor_->enum_type(1);
  stLoginGlobalFail_descriptor_ = file->message_type(10);
  static const int stLoginGlobalFail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGlobalFail, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGlobalFail, errocode_),
  };
  stLoginGlobalFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLoginGlobalFail_descriptor_,
      stLoginGlobalFail::default_instance_,
      stLoginGlobalFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGlobalFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGlobalFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLoginGlobalFail));
  stLoginGlobalFail_FailReason_descriptor_ = stLoginGlobalFail_descriptor_->enum_type(0);
  stLoginGlobalFail_ProtoModID_descriptor_ = stLoginGlobalFail_descriptor_->enum_type(1);
  stLoginGlobalFail_ProtoFunID_descriptor_ = stLoginGlobalFail_descriptor_->enum_type(2);
  stNotifyLoginOut_descriptor_ = file->message_type(11);
  static const int stNotifyLoginOut_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLoginOut, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLoginOut, account_),
  };
  stNotifyLoginOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyLoginOut_descriptor_,
      stNotifyLoginOut::default_instance_,
      stNotifyLoginOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLoginOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLoginOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyLoginOut));
  stNotifyLoginOut_ProtoModID_descriptor_ = stNotifyLoginOut_descriptor_->enum_type(0);
  stNotifyLoginOut_ProtoFunID_descriptor_ = stNotifyLoginOut_descriptor_->enum_type(1);
  stGameSvrStartUp_descriptor_ = file->message_type(12);
  static const int stGameSvrStartUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameSvrStartUp, svrid_),
  };
  stGameSvrStartUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGameSvrStartUp_descriptor_,
      stGameSvrStartUp::default_instance_,
      stGameSvrStartUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameSvrStartUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameSvrStartUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGameSvrStartUp));
  stGameSvrStartUp_ProtoModID_descriptor_ = stGameSvrStartUp_descriptor_->enum_type(0);
  stGameSvrStartUp_ProtoFunID_descriptor_ = stGameSvrStartUp_descriptor_->enum_type(1);
  stKillUserOut_descriptor_ = file->message_type(13);
  static const int stKillUserOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillUserOut, charid_),
  };
  stKillUserOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stKillUserOut_descriptor_,
      stKillUserOut::default_instance_,
      stKillUserOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillUserOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillUserOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stKillUserOut));
  stKillUserOut_ProtoModID_descriptor_ = stKillUserOut_descriptor_->enum_type(0);
  stKillUserOut_ProtoFunID_descriptor_ = stKillUserOut_descriptor_->enum_type(1);
  stServerCfgPair_descriptor_ = file->message_type(14);
  static const int stServerCfgPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerCfgPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerCfgPair, value_),
  };
  stServerCfgPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stServerCfgPair_descriptor_,
      stServerCfgPair::default_instance_,
      stServerCfgPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerCfgPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerCfgPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stServerCfgPair));
  stNotifyGateSvrCfg_descriptor_ = file->message_type(15);
  static const int stNotifyGateSvrCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGateSvrCfg, cfgpair_),
  };
  stNotifyGateSvrCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyGateSvrCfg_descriptor_,
      stNotifyGateSvrCfg::default_instance_,
      stNotifyGateSvrCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGateSvrCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGateSvrCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyGateSvrCfg));
  stNotifyGateSvrCfg_ProtoModID_descriptor_ = stNotifyGateSvrCfg_descriptor_->enum_type(0);
  stNotifyGateSvrCfg_ProtoFunID_descriptor_ = stNotifyGateSvrCfg_descriptor_->enum_type(1);
  stReloginGlobal_descriptor_ = file->message_type(16);
  static const int stReloginGlobal_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGlobal, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGlobal, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGlobal, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGlobal, account_),
  };
  stReloginGlobal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReloginGlobal_descriptor_,
      stReloginGlobal::default_instance_,
      stReloginGlobal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGlobal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGlobal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReloginGlobal));
  stReloginGlobal_ProtoModID_descriptor_ = stReloginGlobal_descriptor_->enum_type(0);
  stReloginGlobal_ProtoFunID_descriptor_ = stReloginGlobal_descriptor_->enum_type(1);
  stPlayerAutoConnect_descriptor_ = file->message_type(17);
  static const int stPlayerAutoConnect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerAutoConnect, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerAutoConnect, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerAutoConnect, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerAutoConnect, account_),
  };
  stPlayerAutoConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPlayerAutoConnect_descriptor_,
      stPlayerAutoConnect::default_instance_,
      stPlayerAutoConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerAutoConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPlayerAutoConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPlayerAutoConnect));
  stPlayerAutoConnect_ProtoModID_descriptor_ = stPlayerAutoConnect_descriptor_->enum_type(0);
  stPlayerAutoConnect_ProtoFunID_descriptor_ = stPlayerAutoConnect_descriptor_->enum_type(1);
  stClientLostConnect_descriptor_ = file->message_type(18);
  static const int stClientLostConnect_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClientLostConnect, account_),
  };
  stClientLostConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stClientLostConnect_descriptor_,
      stClientLostConnect::default_instance_,
      stClientLostConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClientLostConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClientLostConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stClientLostConnect));
  stClientLostConnect_ProtoModID_descriptor_ = stClientLostConnect_descriptor_->enum_type(0);
  stClientLostConnect_ProtoFunID_descriptor_ = stClientLostConnect_descriptor_->enum_type(1);
  stAskIsNewAccount_descriptor_ = file->message_type(19);
  static const int stAskIsNewAccount_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskIsNewAccount, account_),
  };
  stAskIsNewAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAskIsNewAccount_descriptor_,
      stAskIsNewAccount::default_instance_,
      stAskIsNewAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskIsNewAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskIsNewAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAskIsNewAccount));
  stAskIsNewAccount_ProtoModID_descriptor_ = stAskIsNewAccount_descriptor_->enum_type(0);
  stAskIsNewAccount_ProtoFunID_descriptor_ = stAskIsNewAccount_descriptor_->enum_type(1);
  stIsNewAccount_descriptor_ = file->message_type(20);
  static const int stIsNewAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIsNewAccount, isnew_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIsNewAccount, account_),
  };
  stIsNewAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stIsNewAccount_descriptor_,
      stIsNewAccount::default_instance_,
      stIsNewAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIsNewAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIsNewAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stIsNewAccount));
  stIsNewAccount_ProtoModID_descriptor_ = stIsNewAccount_descriptor_->enum_type(0);
  stIsNewAccount_ProtoFunID_descriptor_ = stIsNewAccount_descriptor_->enum_type(1);
  stSaveRoleInfo_descriptor_ = file->message_type(21);
  static const int stSaveRoleInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, data_),
  };
  stSaveRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSaveRoleInfo_descriptor_,
      stSaveRoleInfo::default_instance_,
      stSaveRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSaveRoleInfo));
  stSaveRoleInfo_ProtoModID_descriptor_ = stSaveRoleInfo_descriptor_->enum_type(0);
  stSaveRoleInfo_ProtoFunID_descriptor_ = stSaveRoleInfo_descriptor_->enum_type(1);
  stRetRoleInfo_descriptor_ = file->message_type(22);
  static const int stRetRoleInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, eloaddatatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, netip_),
  };
  stRetRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRoleInfo_descriptor_,
      stRetRoleInfo::default_instance_,
      stRetRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRoleInfo));
  stRetRoleInfo_ProtoModID_descriptor_ = stRetRoleInfo_descriptor_->enum_type(0);
  stRetRoleInfo_ProtoFunID_descriptor_ = stRetRoleInfo_descriptor_->enum_type(1);
  stUserEnterMapSuccess_descriptor_ = file->message_type(23);
  static const int stUserEnterMapSuccess_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, gmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, fetchliliannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, compensationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, pubserverindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, pubcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, photoid_),
  };
  stUserEnterMapSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserEnterMapSuccess_descriptor_,
      stUserEnterMapSuccess::default_instance_,
      stUserEnterMapSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserEnterMapSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserEnterMapSuccess));
  stUserEnterMapSuccess_ProtoModID_descriptor_ = stUserEnterMapSuccess_descriptor_->enum_type(0);
  stUserEnterMapSuccess_ProtoFunID_descriptor_ = stUserEnterMapSuccess_descriptor_->enum_type(1);
  stRechargeInfo_descriptor_ = file->message_type(24);
  static const int stRechargeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeInfo, data_),
  };
  stRechargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRechargeInfo_descriptor_,
      stRechargeInfo::default_instance_,
      stRechargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRechargeInfo));
  stUserRecharge_descriptor_ = file->message_type(25);
  static const int stUserRecharge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRecharge, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRecharge, rechargeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRecharge, isextend_),
  };
  stUserRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserRecharge_descriptor_,
      stUserRecharge::default_instance_,
      stUserRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserRecharge));
  stUserRecharge_ProtoModID_descriptor_ = stUserRecharge_descriptor_->enum_type(0);
  stUserRecharge_ProtoFunID_descriptor_ = stUserRecharge_descriptor_->enum_type(1);
  stProcessGM_descriptor_ = file->message_type(26);
  static const int stProcessGM_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stProcessGM, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stProcessGM, intparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stProcessGM, strparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stProcessGM, charid_),
  };
  stProcessGM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stProcessGM_descriptor_,
      stProcessGM::default_instance_,
      stProcessGM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stProcessGM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stProcessGM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stProcessGM));
  stProcessGM_ProtoModID_descriptor_ = stProcessGM_descriptor_->enum_type(0);
  stProcessGM_ProtoFunID_descriptor_ = stProcessGM_descriptor_->enum_type(1);
  stSynFetchLilianNum_descriptor_ = file->message_type(27);
  static const int stSynFetchLilianNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFetchLilianNum, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFetchLilianNum, num_),
  };
  stSynFetchLilianNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynFetchLilianNum_descriptor_,
      stSynFetchLilianNum::default_instance_,
      stSynFetchLilianNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFetchLilianNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFetchLilianNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynFetchLilianNum));
  stSynFetchLilianNum_ProtoModID_descriptor_ = stSynFetchLilianNum_descriptor_->enum_type(0);
  stSynFetchLilianNum_ProtoFunID_descriptor_ = stSynFetchLilianNum_descriptor_->enum_type(1);
  stSynGuildID_descriptor_ = file->message_type(28);
  static const int stSynGuildID_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildID, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildID, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildID, guildlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildID, joinintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildID, blackmarketlv_),
  };
  stSynGuildID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynGuildID_descriptor_,
      stSynGuildID::default_instance_,
      stSynGuildID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynGuildID));
  stSynGuildID_ProtoModID_descriptor_ = stSynGuildID_descriptor_->enum_type(0);
  stSynGuildID_ProtoFunID_descriptor_ = stSynGuildID_descriptor_->enum_type(1);
  stCreateGuild_descriptor_ = file->message_type(29);
  static const int stCreateGuild_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuild, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuild, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuild, badge_),
  };
  stCreateGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCreateGuild_descriptor_,
      stCreateGuild::default_instance_,
      stCreateGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCreateGuild));
  stCreateGuild_ProtoModID_descriptor_ = stCreateGuild_descriptor_->enum_type(0);
  stCreateGuild_ProtoFunID_descriptor_ = stCreateGuild_descriptor_->enum_type(1);
  stCreateGuildDecMoney_descriptor_ = file->message_type(30);
  static const int stCreateGuildDecMoney_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuildDecMoney, charid_),
  };
  stCreateGuildDecMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCreateGuildDecMoney_descriptor_,
      stCreateGuildDecMoney::default_instance_,
      stCreateGuildDecMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuildDecMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuildDecMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCreateGuildDecMoney));
  stCreateGuildDecMoney_ProtoModID_descriptor_ = stCreateGuildDecMoney_descriptor_->enum_type(0);
  stCreateGuildDecMoney_ProtoFunID_descriptor_ = stCreateGuildDecMoney_descriptor_->enum_type(1);
  stForwardJoininGuild_descriptor_ = file->message_type(31);
  static const int stForwardJoininGuild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardJoininGuild, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardJoininGuild, guildid_),
  };
  stForwardJoininGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForwardJoininGuild_descriptor_,
      stForwardJoininGuild::default_instance_,
      stForwardJoininGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardJoininGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardJoininGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForwardJoininGuild));
  stForwardJoininGuild_ProtoModID_descriptor_ = stForwardJoininGuild_descriptor_->enum_type(0);
  stForwardJoininGuild_ProtoFunID_descriptor_ = stForwardJoininGuild_descriptor_->enum_type(1);
  stAddGuildContribute_descriptor_ = file->message_type(32);
  static const int stAddGuildContribute_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddGuildContribute, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddGuildContribute, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddGuildContribute, todaydaycontribute_),
  };
  stAddGuildContribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddGuildContribute_descriptor_,
      stAddGuildContribute::default_instance_,
      stAddGuildContribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddGuildContribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddGuildContribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddGuildContribute));
  stAddGuildContribute_ProtoModID_descriptor_ = stAddGuildContribute_descriptor_->enum_type(0);
  stAddGuildContribute_ProtoFunID_descriptor_ = stAddGuildContribute_descriptor_->enum_type(1);
  stBroadcastGuildChatInfo_descriptor_ = file->message_type(33);
  static const int stBroadcastGuildChatInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastGuildChatInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastGuildChatInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastGuildChatInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastGuildChatInfo, isvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastGuildChatInfo, voiceurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastGuildChatInfo, voicelenght_),
  };
  stBroadcastGuildChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadcastGuildChatInfo_descriptor_,
      stBroadcastGuildChatInfo::default_instance_,
      stBroadcastGuildChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastGuildChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastGuildChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadcastGuildChatInfo));
  stBroadcastGuildChatInfo_ProtoModID_descriptor_ = stBroadcastGuildChatInfo_descriptor_->enum_type(0);
  stBroadcastGuildChatInfo_ProtoFunID_descriptor_ = stBroadcastGuildChatInfo_descriptor_->enum_type(1);
  stGuildPray_descriptor_ = file->message_type(34);
  static const int stGuildPray_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildPray, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildPray, buildinglv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildPray, extraboxid_),
  };
  stGuildPray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuildPray_descriptor_,
      stGuildPray::default_instance_,
      stGuildPray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildPray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildPray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuildPray));
  stGuildPray_ProtoModID_descriptor_ = stGuildPray_descriptor_->enum_type(0);
  stGuildPray_ProtoFunID_descriptor_ = stGuildPray_descriptor_->enum_type(1);
  stSynUserLevel_descriptor_ = file->message_type(35);
  static const int stSynUserLevel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserLevel, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserLevel, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserLevel, levelup_),
  };
  stSynUserLevel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynUserLevel_descriptor_,
      stSynUserLevel::default_instance_,
      stSynUserLevel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserLevel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserLevel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynUserLevel));
  stSynUserLevel_ProtoModID_descriptor_ = stSynUserLevel_descriptor_->enum_type(0);
  stSynUserLevel_ProtoFunID_descriptor_ = stSynUserLevel_descriptor_->enum_type(1);
  stSynCopymapStarNum_descriptor_ = file->message_type(36);
  static const int stSynCopymapStarNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCopymapStarNum, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCopymapStarNum, starnum_),
  };
  stSynCopymapStarNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynCopymapStarNum_descriptor_,
      stSynCopymapStarNum::default_instance_,
      stSynCopymapStarNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCopymapStarNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCopymapStarNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynCopymapStarNum));
  stSynCopymapStarNum_ProtoModID_descriptor_ = stSynCopymapStarNum_descriptor_->enum_type(0);
  stSynCopymapStarNum_ProtoFunID_descriptor_ = stSynCopymapStarNum_descriptor_->enum_type(1);
  stSynUserBattlePower_descriptor_ = file->message_type(37);
  static const int stSynUserBattlePower_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserBattlePower, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserBattlePower, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserBattlePower, maxhp_),
  };
  stSynUserBattlePower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynUserBattlePower_descriptor_,
      stSynUserBattlePower::default_instance_,
      stSynUserBattlePower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserBattlePower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserBattlePower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynUserBattlePower));
  stSynUserBattlePower_ProtoModID_descriptor_ = stSynUserBattlePower_descriptor_->enum_type(0);
  stSynUserBattlePower_ProtoFunID_descriptor_ = stSynUserBattlePower_descriptor_->enum_type(1);
  stSendTeamChatInfo_descriptor_ = file->message_type(38);
  static const int stSendTeamChatInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendTeamChatInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendTeamChatInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendTeamChatInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendTeamChatInfo, isvoice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendTeamChatInfo, voiceurl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendTeamChatInfo, voicelenght_),
  };
  stSendTeamChatInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendTeamChatInfo_descriptor_,
      stSendTeamChatInfo::default_instance_,
      stSendTeamChatInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendTeamChatInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendTeamChatInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendTeamChatInfo));
  stSendTeamChatInfo_ProtoModID_descriptor_ = stSendTeamChatInfo_descriptor_->enum_type(0);
  stSendTeamChatInfo_ProtoFunID_descriptor_ = stSendTeamChatInfo_descriptor_->enum_type(1);
  stTeamLeaveCopyMap_descriptor_ = file->message_type(39);
  static const int stTeamLeaveCopyMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamLeaveCopyMap, teamid_),
  };
  stTeamLeaveCopyMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTeamLeaveCopyMap_descriptor_,
      stTeamLeaveCopyMap::default_instance_,
      stTeamLeaveCopyMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamLeaveCopyMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamLeaveCopyMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTeamLeaveCopyMap));
  stTeamLeaveCopyMap_ProtoModID_descriptor_ = stTeamLeaveCopyMap_descriptor_->enum_type(0);
  stTeamLeaveCopyMap_ProtoFunID_descriptor_ = stTeamLeaveCopyMap_descriptor_->enum_type(1);
  stTreasureCombine_descriptor_ = file->message_type(40);
  static const int stTreasureCombine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTreasureCombine, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTreasureCombine, combinetype_),
  };
  stTreasureCombine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTreasureCombine_descriptor_,
      stTreasureCombine::default_instance_,
      stTreasureCombine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTreasureCombine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTreasureCombine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTreasureCombine));
  stTreasureCombine_ProtoModID_descriptor_ = stTreasureCombine_descriptor_->enum_type(0);
  stTreasureCombine_ProtoFunID_descriptor_ = stTreasureCombine_descriptor_->enum_type(1);
  stTreasureCombineSuccess_descriptor_ = file->message_type(41);
  static const int stTreasureCombineSuccess_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTreasureCombineSuccess, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTreasureCombineSuccess, itemid_),
  };
  stTreasureCombineSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTreasureCombineSuccess_descriptor_,
      stTreasureCombineSuccess::default_instance_,
      stTreasureCombineSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTreasureCombineSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTreasureCombineSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTreasureCombineSuccess));
  stTreasureCombineSuccess_ProtoModID_descriptor_ = stTreasureCombineSuccess_descriptor_->enum_type(0);
  stTreasureCombineSuccess_ProtoFunID_descriptor_ = stTreasureCombineSuccess_descriptor_->enum_type(1);
  stBuyPeaceModubleTime_descriptor_ = file->message_type(42);
  static const int stBuyPeaceModubleTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModubleTime, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModubleTime, addtime_),
  };
  stBuyPeaceModubleTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBuyPeaceModubleTime_descriptor_,
      stBuyPeaceModubleTime::default_instance_,
      stBuyPeaceModubleTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModubleTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBuyPeaceModubleTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBuyPeaceModubleTime));
  stBuyPeaceModubleTime_ProtoModID_descriptor_ = stBuyPeaceModubleTime_descriptor_->enum_type(0);
  stBuyPeaceModubleTime_ProtoFunID_descriptor_ = stBuyPeaceModubleTime_descriptor_->enum_type(1);
  stReqChangeGameSvr_descriptor_ = file->message_type(43);
  static const int stReqChangeGameSvr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeGameSvr, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeGameSvr, gamesvrid_),
  };
  stReqChangeGameSvr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqChangeGameSvr_descriptor_,
      stReqChangeGameSvr::default_instance_,
      stReqChangeGameSvr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeGameSvr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeGameSvr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqChangeGameSvr));
  stReqChangeGameSvr_ProtoModID_descriptor_ = stReqChangeGameSvr_descriptor_->enum_type(0);
  stReqChangeGameSvr_ProtoFunID_descriptor_ = stReqChangeGameSvr_descriptor_->enum_type(1);
  stConfirmChangeGameSvr_descriptor_ = file->message_type(44);
  static const int stConfirmChangeGameSvr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConfirmChangeGameSvr, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConfirmChangeGameSvr, gamesvrid_),
  };
  stConfirmChangeGameSvr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stConfirmChangeGameSvr_descriptor_,
      stConfirmChangeGameSvr::default_instance_,
      stConfirmChangeGameSvr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConfirmChangeGameSvr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stConfirmChangeGameSvr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stConfirmChangeGameSvr));
  stConfirmChangeGameSvr_ProtoModID_descriptor_ = stConfirmChangeGameSvr_descriptor_->enum_type(0);
  stConfirmChangeGameSvr_ProtoFunID_descriptor_ = stConfirmChangeGameSvr_descriptor_->enum_type(1);
  stRetOtherUserData2Me_descriptor_ = file->message_type(45);
  static const int stRetOtherUserData2Me_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOtherUserData2Me, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOtherUserData2Me, othercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOtherUserData2Me, isrobot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOtherUserData2Me, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOtherUserData2Me, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOtherUserData2Me, guildname_),
  };
  stRetOtherUserData2Me_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetOtherUserData2Me_descriptor_,
      stRetOtherUserData2Me::default_instance_,
      stRetOtherUserData2Me_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOtherUserData2Me, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetOtherUserData2Me, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetOtherUserData2Me));
  stRetOtherUserData2Me_ProtoModID_descriptor_ = stRetOtherUserData2Me_descriptor_->enum_type(0);
  stRetOtherUserData2Me_ProtoFunID_descriptor_ = stRetOtherUserData2Me_descriptor_->enum_type(1);
  stMailAttach_descriptor_ = file->message_type(46);
  static const int stMailAttach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMailAttach, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMailAttach, num_),
  };
  stMailAttach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMailAttach_descriptor_,
      stMailAttach::default_instance_,
      stMailAttach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMailAttach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMailAttach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMailAttach));
  stObtainItemFromMail_descriptor_ = file->message_type(47);
  static const int stObtainItemFromMail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItemFromMail, attachs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItemFromMail, charid_),
  };
  stObtainItemFromMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stObtainItemFromMail_descriptor_,
      stObtainItemFromMail::default_instance_,
      stObtainItemFromMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItemFromMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stObtainItemFromMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stObtainItemFromMail));
  stObtainItemFromMail_ProtoModID_descriptor_ = stObtainItemFromMail_descriptor_->enum_type(0);
  stObtainItemFromMail_ProtoFunID_descriptor_ = stObtainItemFromMail_descriptor_->enum_type(1);
  stSynAddTreasure_descriptor_ = file->message_type(48);
  static const int stSynAddTreasure_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAddTreasure, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAddTreasure, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAddTreasure, charid_),
  };
  stSynAddTreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynAddTreasure_descriptor_,
      stSynAddTreasure::default_instance_,
      stSynAddTreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAddTreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAddTreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynAddTreasure));
  stSynAddTreasure_ProtoModID_descriptor_ = stSynAddTreasure_descriptor_->enum_type(0);
  stSynAddTreasure_ProtoFunID_descriptor_ = stSynAddTreasure_descriptor_->enum_type(1);
  stBeginPKWithOther_descriptor_ = file->message_type(49);
  static const int stBeginPKWithOther_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginPKWithOther, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginPKWithOther, othercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginPKWithOther, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginPKWithOther, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginPKWithOther, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginPKWithOther, challengerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginPKWithOther, robotid_),
  };
  stBeginPKWithOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBeginPKWithOther_descriptor_,
      stBeginPKWithOther::default_instance_,
      stBeginPKWithOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginPKWithOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBeginPKWithOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBeginPKWithOther));
  stBeginPKWithOther_ePKType_descriptor_ = stBeginPKWithOther_descriptor_->enum_type(0);
  stBeginPKWithOther_ProtoModID_descriptor_ = stBeginPKWithOther_descriptor_->enum_type(1);
  stBeginPKWithOther_ProtoFunID_descriptor_ = stBeginPKWithOther_descriptor_->enum_type(2);
  stUserLeitaiChallenge_descriptor_ = file->message_type(50);
  static const int stUserLeitaiChallenge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeitaiChallenge, round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeitaiChallenge, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeitaiChallenge, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeitaiChallenge, challengecharid_),
  };
  stUserLeitaiChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserLeitaiChallenge_descriptor_,
      stUserLeitaiChallenge::default_instance_,
      stUserLeitaiChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeitaiChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeitaiChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserLeitaiChallenge));
  stUserLeitaiChallenge_ProtoModID_descriptor_ = stUserLeitaiChallenge_descriptor_->enum_type(0);
  stUserLeitaiChallenge_ProtoFunID_descriptor_ = stUserLeitaiChallenge_descriptor_->enum_type(1);
  stArenaPKResult_descriptor_ = file->message_type(51);
  static const int stArenaPKResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaPKResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaPKResult, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaPKResult, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaPKResult, historyrank_),
  };
  stArenaPKResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stArenaPKResult_descriptor_,
      stArenaPKResult::default_instance_,
      stArenaPKResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaPKResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stArenaPKResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stArenaPKResult));
  stArenaPKResult_ProtoModID_descriptor_ = stArenaPKResult_descriptor_->enum_type(0);
  stArenaPKResult_ProtoFunID_descriptor_ = stArenaPKResult_descriptor_->enum_type(1);
  stSynDrawHeroScore_descriptor_ = file->message_type(52);
  static const int stSynDrawHeroScore_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDrawHeroScore, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDrawHeroScore, score_),
  };
  stSynDrawHeroScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynDrawHeroScore_descriptor_,
      stSynDrawHeroScore::default_instance_,
      stSynDrawHeroScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDrawHeroScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDrawHeroScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynDrawHeroScore));
  stSynDrawHeroScore_ProtoModID_descriptor_ = stSynDrawHeroScore_descriptor_->enum_type(0);
  stSynDrawHeroScore_ProtoFunID_descriptor_ = stSynDrawHeroScore_descriptor_->enum_type(1);
  stUpLeitaiUseTime_descriptor_ = file->message_type(53);
  static const int stUpLeitaiUseTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpLeitaiUseTime, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpLeitaiUseTime, usetime_),
  };
  stUpLeitaiUseTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUpLeitaiUseTime_descriptor_,
      stUpLeitaiUseTime::default_instance_,
      stUpLeitaiUseTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpLeitaiUseTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpLeitaiUseTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUpLeitaiUseTime));
  stUpLeitaiUseTime_ProtoModID_descriptor_ = stUpLeitaiUseTime_descriptor_->enum_type(0);
  stUpLeitaiUseTime_ProtoFunID_descriptor_ = stUpLeitaiUseTime_descriptor_->enum_type(1);
  stUserLeaveGuild_descriptor_ = file->message_type(54);
  static const int stUserLeaveGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeaveGuild, charids_),
  };
  stUserLeaveGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserLeaveGuild_descriptor_,
      stUserLeaveGuild::default_instance_,
      stUserLeaveGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeaveGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeaveGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserLeaveGuild));
  stUserLeaveGuild_ProtoModID_descriptor_ = stUserLeaveGuild_descriptor_->enum_type(0);
  stUserLeaveGuild_ProtoFunID_descriptor_ = stUserLeaveGuild_descriptor_->enum_type(1);
  stEnterCopymapMemInfo_descriptor_ = file->message_type(55);
  static const int stEnterCopymapMemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterCopymapMemInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterCopymapMemInfo, adddamageper_),
  };
  stEnterCopymapMemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterCopymapMemInfo_descriptor_,
      stEnterCopymapMemInfo::default_instance_,
      stEnterCopymapMemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterCopymapMemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterCopymapMemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterCopymapMemInfo));
  stTeamEnterCopyMap_descriptor_ = file->message_type(56);
  static const int stTeamEnterCopyMap_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamEnterCopyMap, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamEnterCopyMap, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamEnterCopyMap, memerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamEnterCopyMap, bosshp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamEnterCopyMap, bosslv_),
  };
  stTeamEnterCopyMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTeamEnterCopyMap_descriptor_,
      stTeamEnterCopyMap::default_instance_,
      stTeamEnterCopyMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamEnterCopyMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamEnterCopyMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTeamEnterCopyMap));
  stTeamEnterCopyMap_ProtoModID_descriptor_ = stTeamEnterCopyMap_descriptor_->enum_type(0);
  stTeamEnterCopyMap_ProtoFunID_descriptor_ = stTeamEnterCopyMap_descriptor_->enum_type(1);
  stOne2OnePVPEnterCopyMap_descriptor_ = file->message_type(57);
  static const int stOne2OnePVPEnterCopyMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPEnterCopyMap, memberids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPEnterCopyMap, pkwithfriend_),
  };
  stOne2OnePVPEnterCopyMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOne2OnePVPEnterCopyMap_descriptor_,
      stOne2OnePVPEnterCopyMap::default_instance_,
      stOne2OnePVPEnterCopyMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPEnterCopyMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPEnterCopyMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOne2OnePVPEnterCopyMap));
  stOne2OnePVPEnterCopyMap_ProtoModID_descriptor_ = stOne2OnePVPEnterCopyMap_descriptor_->enum_type(0);
  stOne2OnePVPEnterCopyMap_ProtoFunID_descriptor_ = stOne2OnePVPEnterCopyMap_descriptor_->enum_type(1);
  stForwardCapture_descriptor_ = file->message_type(58);
  static const int stForwardCapture_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardCapture, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardCapture, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardCapture, combineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardCapture, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardCapture, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardCapture, multicapture_),
  };
  stForwardCapture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForwardCapture_descriptor_,
      stForwardCapture::default_instance_,
      stForwardCapture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardCapture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardCapture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForwardCapture));
  stForwardCapture_ProtoModID_descriptor_ = stForwardCapture_descriptor_->enum_type(0);
  stForwardCapture_ProtoFunID_descriptor_ = stForwardCapture_descriptor_->enum_type(1);
  stCaptureRewardItem_descriptor_ = file->message_type(59);
  static const int stCaptureRewardItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureRewardItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureRewardItem, num_),
  };
  stCaptureRewardItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCaptureRewardItem_descriptor_,
      stCaptureRewardItem::default_instance_,
      stCaptureRewardItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureRewardItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureRewardItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCaptureRewardItem));
  stCaptureReward_descriptor_ = file->message_type(60);
  static const int stCaptureReward_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureReward, dropid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureReward, moneycoef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureReward, expcoef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureReward, obtainpiece_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureReward, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureReward, multicapture_),
  };
  stCaptureReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCaptureReward_descriptor_,
      stCaptureReward::default_instance_,
      stCaptureReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCaptureReward));
  stCaptureReward_ProtoModID_descriptor_ = stCaptureReward_descriptor_->enum_type(0);
  stCaptureReward_ProtoFunID_descriptor_ = stCaptureReward_descriptor_->enum_type(1);
  stRealTimeBattleEnterCopymap_descriptor_ = file->message_type(61);
  static const int stRealTimeBattleEnterCopymap_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeBattleEnterCopymap, pktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeBattleEnterCopymap, teamaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeBattleEnterCopymap, teambid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeBattleEnterCopymap, teamamembers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeBattleEnterCopymap, teambmembers_),
  };
  stRealTimeBattleEnterCopymap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRealTimeBattleEnterCopymap_descriptor_,
      stRealTimeBattleEnterCopymap::default_instance_,
      stRealTimeBattleEnterCopymap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeBattleEnterCopymap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeBattleEnterCopymap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRealTimeBattleEnterCopymap));
  stRealTimeBattleEnterCopymap_ProtoModID_descriptor_ = stRealTimeBattleEnterCopymap_descriptor_->enum_type(0);
  stRealTimeBattleEnterCopymap_ProtoFunID_descriptor_ = stRealTimeBattleEnterCopymap_descriptor_->enum_type(1);
  stNotifyAddLilian_descriptor_ = file->message_type(62);
  static const int stNotifyAddLilian_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddLilian, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddLilian, num_),
  };
  stNotifyAddLilian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyAddLilian_descriptor_,
      stNotifyAddLilian::default_instance_,
      stNotifyAddLilian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddLilian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddLilian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyAddLilian));
  stNotifyAddLilian_ProtoModID_descriptor_ = stNotifyAddLilian_descriptor_->enum_type(0);
  stNotifyAddLilian_ProtoFunID_descriptor_ = stNotifyAddLilian_descriptor_->enum_type(1);
  stEnterGuildCopymap_descriptor_ = file->message_type(63);
  static const int stEnterGuildCopymap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterGuildCopymap, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterGuildCopymap, charid_),
  };
  stEnterGuildCopymap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterGuildCopymap_descriptor_,
      stEnterGuildCopymap::default_instance_,
      stEnterGuildCopymap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterGuildCopymap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterGuildCopymap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterGuildCopymap));
  stEnterGuildCopymap_ProtoModID_descriptor_ = stEnterGuildCopymap_descriptor_->enum_type(0);
  stEnterGuildCopymap_ProtoFunID_descriptor_ = stEnterGuildCopymap_descriptor_->enum_type(1);
  stSynMyContribyte_descriptor_ = file->message_type(64);
  static const int stSynMyContribyte_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyContribyte, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyContribyte, mycontribute_),
  };
  stSynMyContribyte_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMyContribyte_descriptor_,
      stSynMyContribyte::default_instance_,
      stSynMyContribyte_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyContribyte, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyContribyte, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMyContribyte));
  stSynMyContribyte_ProtoModID_descriptor_ = stSynMyContribyte_descriptor_->enum_type(0);
  stSynMyContribyte_ProtoFunID_descriptor_ = stSynMyContribyte_descriptor_->enum_type(1);
  stOnlineUserGMType_descriptor_ = file->message_type(65);
  static const int stOnlineUserGMType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineUserGMType, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineUserGMType, gmvalue_),
  };
  stOnlineUserGMType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOnlineUserGMType_descriptor_,
      stOnlineUserGMType::default_instance_,
      stOnlineUserGMType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineUserGMType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnlineUserGMType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOnlineUserGMType));
  stOnlineUserGMType_ProtoModID_descriptor_ = stOnlineUserGMType_descriptor_->enum_type(0);
  stOnlineUserGMType_ProtoFunID_descriptor_ = stOnlineUserGMType_descriptor_->enum_type(1);
  stForbidOnlineUser_descriptor_ = file->message_type(66);
  static const int stForbidOnlineUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForbidOnlineUser, charid_),
  };
  stForbidOnlineUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForbidOnlineUser_descriptor_,
      stForbidOnlineUser::default_instance_,
      stForbidOnlineUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForbidOnlineUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForbidOnlineUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForbidOnlineUser));
  stForbidOnlineUser_ProtoModID_descriptor_ = stForbidOnlineUser_descriptor_->enum_type(0);
  stForbidOnlineUser_ProtoFunID_descriptor_ = stForbidOnlineUser_descriptor_->enum_type(1);
  stOne2OnePVPFinish_descriptor_ = file->message_type(67);
  static const int stOne2OnePVPFinish_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFinish, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFinish, score1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFinish, win1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFinish, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFinish, score2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFinish, win2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFinish, pkwithfriend_),
  };
  stOne2OnePVPFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOne2OnePVPFinish_descriptor_,
      stOne2OnePVPFinish::default_instance_,
      stOne2OnePVPFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePVPFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOne2OnePVPFinish));
  stOne2OnePVPFinish_ProtoModID_descriptor_ = stOne2OnePVPFinish_descriptor_->enum_type(0);
  stOne2OnePVPFinish_ProtoFunID_descriptor_ = stOne2OnePVPFinish_descriptor_->enum_type(1);
  stActivityConfig_descriptor_ = file->message_type(68);
  static const int stActivityConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityConfig, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityConfig, cofing_),
  };
  stActivityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stActivityConfig_descriptor_,
      stActivityConfig::default_instance_,
      stActivityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stActivityConfig));
  stSynActivityConfig_descriptor_ = file->message_type(69);
  static const int stSynActivityConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityConfig, data_),
  };
  stSynActivityConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynActivityConfig_descriptor_,
      stSynActivityConfig::default_instance_,
      stSynActivityConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynActivityConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynActivityConfig));
  stSynActivityConfig_ProtoModID_descriptor_ = stSynActivityConfig_descriptor_->enum_type(0);
  stSynActivityConfig_ProtoFunID_descriptor_ = stSynActivityConfig_descriptor_->enum_type(1);
  stCaptureTreasureFail_descriptor_ = file->message_type(70);
  static const int stCaptureTreasureFail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureFail, charid_),
  };
  stCaptureTreasureFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCaptureTreasureFail_descriptor_,
      stCaptureTreasureFail::default_instance_,
      stCaptureTreasureFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCaptureTreasureFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCaptureTreasureFail));
  stCaptureTreasureFail_ProtoModID_descriptor_ = stCaptureTreasureFail_descriptor_->enum_type(0);
  stCaptureTreasureFail_ProtoFunID_descriptor_ = stCaptureTreasureFail_descriptor_->enum_type(1);
  stCharID2Rank_descriptor_ = file->message_type(71);
  static const int stCharID2Rank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCharID2Rank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCharID2Rank, rank_),
  };
  stCharID2Rank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCharID2Rank_descriptor_,
      stCharID2Rank::default_instance_,
      stCharID2Rank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCharID2Rank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCharID2Rank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCharID2Rank));
  stRankModuleInfo_descriptor_ = file->message_type(72);
  static const int stRankModuleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankModuleInfo, moduleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankModuleInfo, charid2rank_),
  };
  stRankModuleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRankModuleInfo_descriptor_,
      stRankModuleInfo::default_instance_,
      stRankModuleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankModuleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRankModuleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRankModuleInfo));
  stSynRankModuleInfo_descriptor_ = file->message_type(73);
  static const int stSynRankModuleInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRankModuleInfo, data_),
  };
  stSynRankModuleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRankModuleInfo_descriptor_,
      stSynRankModuleInfo::default_instance_,
      stSynRankModuleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRankModuleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRankModuleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRankModuleInfo));
  stSynRankModuleInfo_ProtoModID_descriptor_ = stSynRankModuleInfo_descriptor_->enum_type(0);
  stSynRankModuleInfo_ProtoFunID_descriptor_ = stSynRankModuleInfo_descriptor_->enum_type(1);
  stGiftBagReward_descriptor_ = file->message_type(74);
  static const int stGiftBagReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiftBagReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiftBagReward, num_),
  };
  stGiftBagReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiftBagReward_descriptor_,
      stGiftBagReward::default_instance_,
      stGiftBagReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiftBagReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiftBagReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiftBagReward));
  stGiveGiftBagReward_descriptor_ = file->message_type(75);
  static const int stGiveGiftBagReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveGiftBagReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveGiftBagReward, rewards_),
  };
  stGiveGiftBagReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiveGiftBagReward_descriptor_,
      stGiveGiftBagReward::default_instance_,
      stGiveGiftBagReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveGiftBagReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveGiftBagReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiveGiftBagReward));
  stGiveGiftBagReward_ProtoModID_descriptor_ = stGiveGiftBagReward_descriptor_->enum_type(0);
  stGiveGiftBagReward_ProtoFunID_descriptor_ = stGiveGiftBagReward_descriptor_->enum_type(1);
  stNotifyGameSvrCfg_descriptor_ = file->message_type(76);
  static const int stNotifyGameSvrCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGameSvrCfg, cfgpair_),
  };
  stNotifyGameSvrCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyGameSvrCfg_descriptor_,
      stNotifyGameSvrCfg::default_instance_,
      stNotifyGameSvrCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGameSvrCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGameSvrCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyGameSvrCfg));
  stNotifyGameSvrCfg_ProtoModID_descriptor_ = stNotifyGameSvrCfg_descriptor_->enum_type(0);
  stNotifyGameSvrCfg_ProtoFunID_descriptor_ = stNotifyGameSvrCfg_descriptor_->enum_type(1);
  stNotifyCurEquipInfo_descriptor_ = file->message_type(77);
  static const int stNotifyCurEquipInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCurEquipInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCurEquipInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCurEquipInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCurEquipInfo, effectid_),
  };
  stNotifyCurEquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyCurEquipInfo_descriptor_,
      stNotifyCurEquipInfo::default_instance_,
      stNotifyCurEquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCurEquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCurEquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyCurEquipInfo));
  stNotifyCurEquipInfo_ProtoModID_descriptor_ = stNotifyCurEquipInfo_descriptor_->enum_type(0);
  stNotifyCurEquipInfo_ProtoFunID_descriptor_ = stNotifyCurEquipInfo_descriptor_->enum_type(1);
  stReloginGame_descriptor_ = file->message_type(78);
  static const int stReloginGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGame, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGame, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGame, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGame, device_),
  };
  stReloginGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReloginGame_descriptor_,
      stReloginGame::default_instance_,
      stReloginGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReloginGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReloginGame));
  stReloginGame_ProtoModID_descriptor_ = stReloginGame_descriptor_->enum_type(0);
  stReloginGame_ProtoFunID_descriptor_ = stReloginGame_descriptor_->enum_type(1);
  stFirstKillBaseInfo_descriptor_ = file->message_type(79);
  static const int stFirstKillBaseInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFirstKillBaseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFirstKillBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFirstKillBaseInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFirstKillBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFirstKillBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFirstKillBaseInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFirstKillBaseInfo, photoid_),
  };
  stFirstKillBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFirstKillBaseInfo_descriptor_,
      stFirstKillBaseInfo::default_instance_,
      stFirstKillBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFirstKillBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFirstKillBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFirstKillBaseInfo));
  stTeamCopyMapFinish_descriptor_ = file->message_type(80);
  static const int stTeamCopyMapFinish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamCopyMapFinish, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamCopyMapFinish, userinfo_),
  };
  stTeamCopyMapFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTeamCopyMapFinish_descriptor_,
      stTeamCopyMapFinish::default_instance_,
      stTeamCopyMapFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamCopyMapFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamCopyMapFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTeamCopyMapFinish));
  stTeamCopyMapFinish_ProtoModID_descriptor_ = stTeamCopyMapFinish_descriptor_->enum_type(0);
  stTeamCopyMapFinish_ProtoFunID_descriptor_ = stTeamCopyMapFinish_descriptor_->enum_type(1);
  stUserOnlineSendFirstKillInfo_descriptor_ = file->message_type(81);
  static const int stUserOnlineSendFirstKillInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserOnlineSendFirstKillInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserOnlineSendFirstKillInfo, copymapid_),
  };
  stUserOnlineSendFirstKillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserOnlineSendFirstKillInfo_descriptor_,
      stUserOnlineSendFirstKillInfo::default_instance_,
      stUserOnlineSendFirstKillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserOnlineSendFirstKillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserOnlineSendFirstKillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserOnlineSendFirstKillInfo));
  stUserOnlineSendFirstKillInfo_ProtoModID_descriptor_ = stUserOnlineSendFirstKillInfo_descriptor_->enum_type(0);
  stUserOnlineSendFirstKillInfo_ProtoFunID_descriptor_ = stUserOnlineSendFirstKillInfo_descriptor_->enum_type(1);
  stTeamFinishFirstKill_descriptor_ = file->message_type(82);
  static const int stTeamFinishFirstKill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamFinishFirstKill, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamFinishFirstKill, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamFinishFirstKill, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamFinishFirstKill, charid3_),
  };
  stTeamFinishFirstKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTeamFinishFirstKill_descriptor_,
      stTeamFinishFirstKill::default_instance_,
      stTeamFinishFirstKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamFinishFirstKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeamFinishFirstKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTeamFinishFirstKill));
  stTeamFinishFirstKill_ProtoModID_descriptor_ = stTeamFinishFirstKill_descriptor_->enum_type(0);
  stTeamFinishFirstKill_ProtoFunID_descriptor_ = stTeamFinishFirstKill_descriptor_->enum_type(1);
  stSetClearWorldBossTime_descriptor_ = file->message_type(83);
  static const int stSetClearWorldBossTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetClearWorldBossTime, charid_),
  };
  stSetClearWorldBossTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSetClearWorldBossTime_descriptor_,
      stSetClearWorldBossTime::default_instance_,
      stSetClearWorldBossTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetClearWorldBossTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetClearWorldBossTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSetClearWorldBossTime));
  stSetClearWorldBossTime_ProtoModID_descriptor_ = stSetClearWorldBossTime_descriptor_->enum_type(0);
  stSetClearWorldBossTime_ProtoFunID_descriptor_ = stSetClearWorldBossTime_descriptor_->enum_type(1);
  stSetWorldBossBuyNum_descriptor_ = file->message_type(84);
  static const int stSetWorldBossBuyNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetWorldBossBuyNum, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetWorldBossBuyNum, buynum_),
  };
  stSetWorldBossBuyNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSetWorldBossBuyNum_descriptor_,
      stSetWorldBossBuyNum::default_instance_,
      stSetWorldBossBuyNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetWorldBossBuyNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetWorldBossBuyNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSetWorldBossBuyNum));
  stSetWorldBossBuyNum_ProtoModID_descriptor_ = stSetWorldBossBuyNum_descriptor_->enum_type(0);
  stSetWorldBossBuyNum_ProtoFunID_descriptor_ = stSetWorldBossBuyNum_descriptor_->enum_type(1);
  stUserDecSP_descriptor_ = file->message_type(85);
  static const int stUserDecSP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDecSP, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDecSP, sp_),
  };
  stUserDecSP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserDecSP_descriptor_,
      stUserDecSP::default_instance_,
      stUserDecSP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDecSP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDecSP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserDecSP));
  stUserDecSP_ProtoModID_descriptor_ = stUserDecSP_descriptor_->enum_type(0);
  stUserDecSP_ProtoFunID_descriptor_ = stUserDecSP_descriptor_->enum_type(1);
  stUsreDecLilian_descriptor_ = file->message_type(86);
  static const int stUsreDecLilian_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUsreDecLilian, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUsreDecLilian, lilian_),
  };
  stUsreDecLilian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUsreDecLilian_descriptor_,
      stUsreDecLilian::default_instance_,
      stUsreDecLilian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUsreDecLilian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUsreDecLilian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUsreDecLilian));
  stUsreDecLilian_ProtoModID_descriptor_ = stUsreDecLilian_descriptor_->enum_type(0);
  stUsreDecLilian_ProtoFunID_descriptor_ = stUsreDecLilian_descriptor_->enum_type(1);
  stUserDamagePair_descriptor_ = file->message_type(87);
  static const int stUserDamagePair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDamagePair, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDamagePair, damage_),
  };
  stUserDamagePair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserDamagePair_descriptor_,
      stUserDamagePair::default_instance_,
      stUserDamagePair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDamagePair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserDamagePair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserDamagePair));
  stGuildCopymapFail_descriptor_ = file->message_type(88);
  static const int stGuildCopymapFail_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildCopymapFail, damageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildCopymapFail, bosshp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildCopymapFail, copymapid_),
  };
  stGuildCopymapFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuildCopymapFail_descriptor_,
      stGuildCopymapFail::default_instance_,
      stGuildCopymapFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildCopymapFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildCopymapFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuildCopymapFail));
  stGuildCopymapFail_ProtoModID_descriptor_ = stGuildCopymapFail_descriptor_->enum_type(0);
  stGuildCopymapFail_ProtoFunID_descriptor_ = stGuildCopymapFail_descriptor_->enum_type(1);
  stGuildCopymapKillBoss_descriptor_ = file->message_type(89);
  static const int stGuildCopymapKillBoss_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildCopymapKillBoss, damageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildCopymapKillBoss, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildCopymapKillBoss, killcharid_),
  };
  stGuildCopymapKillBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuildCopymapKillBoss_descriptor_,
      stGuildCopymapKillBoss::default_instance_,
      stGuildCopymapKillBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildCopymapKillBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildCopymapKillBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuildCopymapKillBoss));
  stGuildCopymapKillBoss_ProtoModID_descriptor_ = stGuildCopymapKillBoss_descriptor_->enum_type(0);
  stGuildCopymapKillBoss_ProtoFunID_descriptor_ = stGuildCopymapKillBoss_descriptor_->enum_type(1);
  stWorldBossCopymapFail_descriptor_ = file->message_type(90);
  static const int stWorldBossCopymapFail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossCopymapFail, damageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossCopymapFail, bosshp_),
  };
  stWorldBossCopymapFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWorldBossCopymapFail_descriptor_,
      stWorldBossCopymapFail::default_instance_,
      stWorldBossCopymapFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossCopymapFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossCopymapFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWorldBossCopymapFail));
  stWorldBossCopymapFail_ProtoModID_descriptor_ = stWorldBossCopymapFail_descriptor_->enum_type(0);
  stWorldBossCopymapFail_ProtoFunID_descriptor_ = stWorldBossCopymapFail_descriptor_->enum_type(1);
  stKillWorldBoss_descriptor_ = file->message_type(91);
  static const int stKillWorldBoss_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillWorldBoss, damageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillWorldBoss, killcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillWorldBoss, bossid_),
  };
  stKillWorldBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stKillWorldBoss_descriptor_,
      stKillWorldBoss::default_instance_,
      stKillWorldBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillWorldBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillWorldBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stKillWorldBoss));
  stKillWorldBoss_ProtoModID_descriptor_ = stKillWorldBoss_descriptor_->enum_type(0);
  stKillWorldBoss_ProtoFunID_descriptor_ = stKillWorldBoss_descriptor_->enum_type(1);
  stDrawHeroScoreReward_descriptor_ = file->message_type(92);
  static const int stDrawHeroScoreReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroScoreReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroScoreReward, boxid_),
  };
  stDrawHeroScoreReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDrawHeroScoreReward_descriptor_,
      stDrawHeroScoreReward::default_instance_,
      stDrawHeroScoreReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroScoreReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroScoreReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDrawHeroScoreReward));
  stDrawHeroScoreReward_ProtoModID_descriptor_ = stDrawHeroScoreReward_descriptor_->enum_type(0);
  stDrawHeroScoreReward_ProtoFunID_descriptor_ = stDrawHeroScoreReward_descriptor_->enum_type(1);
  stDrawHeroRankReward_descriptor_ = file->message_type(93);
  static const int stDrawHeroRankReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroRankReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroRankReward, boxid_),
  };
  stDrawHeroRankReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDrawHeroRankReward_descriptor_,
      stDrawHeroRankReward::default_instance_,
      stDrawHeroRankReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroRankReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDrawHeroRankReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDrawHeroRankReward));
  stDrawHeroRankReward_ProtoModID_descriptor_ = stDrawHeroRankReward_descriptor_->enum_type(0);
  stDrawHeroRankReward_ProtoFunID_descriptor_ = stDrawHeroRankReward_descriptor_->enum_type(1);
  stCompensantionItem_descriptor_ = file->message_type(94);
  static const int stCompensantionItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensantionItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensantionItem, num_),
  };
  stCompensantionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCompensantionItem_descriptor_,
      stCompensantionItem::default_instance_,
      stCompensantionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensantionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCompensantionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCompensantionItem));
  stSetCompensationID_descriptor_ = file->message_type(95);
  static const int stSetCompensationID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetCompensationID, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetCompensationID, compensationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetCompensationID, items_),
  };
  stSetCompensationID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSetCompensationID_descriptor_,
      stSetCompensationID::default_instance_,
      stSetCompensationID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetCompensationID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetCompensationID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSetCompensationID));
  stSetCompensationID_ProtoModID_descriptor_ = stSetCompensationID_descriptor_->enum_type(0);
  stSetCompensationID_ProtoFunID_descriptor_ = stSetCompensationID_descriptor_->enum_type(1);
  stSetOpenServerDay_descriptor_ = file->message_type(96);
  static const int stSetOpenServerDay_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetOpenServerDay, day_),
  };
  stSetOpenServerDay_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSetOpenServerDay_descriptor_,
      stSetOpenServerDay::default_instance_,
      stSetOpenServerDay_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetOpenServerDay, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetOpenServerDay, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSetOpenServerDay));
  stSetOpenServerDay_ProtoModID_descriptor_ = stSetOpenServerDay_descriptor_->enum_type(0);
  stSetOpenServerDay_ProtoFunID_descriptor_ = stSetOpenServerDay_descriptor_->enum_type(1);
  stSynGuildLv2AllMember_descriptor_ = file->message_type(97);
  static const int stSynGuildLv2AllMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildLv2AllMember, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildLv2AllMember, guildlv_),
  };
  stSynGuildLv2AllMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynGuildLv2AllMember_descriptor_,
      stSynGuildLv2AllMember::default_instance_,
      stSynGuildLv2AllMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildLv2AllMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildLv2AllMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynGuildLv2AllMember));
  stSynGuildLv2AllMember_ProtoModID_descriptor_ = stSynGuildLv2AllMember_descriptor_->enum_type(0);
  stSynGuildLv2AllMember_ProtoFunID_descriptor_ = stSynGuildLv2AllMember_descriptor_->enum_type(1);
  stForwardChgBadge_descriptor_ = file->message_type(98);
  static const int stForwardChgBadge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardChgBadge, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardChgBadge, badgeid_),
  };
  stForwardChgBadge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForwardChgBadge_descriptor_,
      stForwardChgBadge::default_instance_,
      stForwardChgBadge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardChgBadge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardChgBadge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForwardChgBadge));
  stForwardChgBadge_ProtoModID_descriptor_ = stForwardChgBadge_descriptor_->enum_type(0);
  stForwardChgBadge_ProtoFunID_descriptor_ = stForwardChgBadge_descriptor_->enum_type(1);
  stWorldBossBuyDecDiamond_descriptor_ = file->message_type(99);
  static const int stWorldBossBuyDecDiamond_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossBuyDecDiamond, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossBuyDecDiamond, hasbuynum_),
  };
  stWorldBossBuyDecDiamond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWorldBossBuyDecDiamond_descriptor_,
      stWorldBossBuyDecDiamond::default_instance_,
      stWorldBossBuyDecDiamond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossBuyDecDiamond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorldBossBuyDecDiamond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWorldBossBuyDecDiamond));
  stWorldBossBuyDecDiamond_ProtoModID_descriptor_ = stWorldBossBuyDecDiamond_descriptor_->enum_type(0);
  stWorldBossBuyDecDiamond_ProtoFunID_descriptor_ = stWorldBossBuyDecDiamond_descriptor_->enum_type(1);
  stGuildDonateSuccess_descriptor_ = file->message_type(100);
  static const int stGuildDonateSuccess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildDonateSuccess, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildDonateSuccess, todaycontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildDonateSuccess, addcontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildDonateSuccess, donatetype_),
  };
  stGuildDonateSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuildDonateSuccess_descriptor_,
      stGuildDonateSuccess::default_instance_,
      stGuildDonateSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildDonateSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildDonateSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuildDonateSuccess));
  stGuildDonateSuccess_ProtoModID_descriptor_ = stGuildDonateSuccess_descriptor_->enum_type(0);
  stGuildDonateSuccess_ProtoFunID_descriptor_ = stGuildDonateSuccess_descriptor_->enum_type(1);
  stUserLeaveWorldBoss_descriptor_ = file->message_type(101);
  static const int stUserLeaveWorldBoss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeaveWorldBoss, charid_),
  };
  stUserLeaveWorldBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserLeaveWorldBoss_descriptor_,
      stUserLeaveWorldBoss::default_instance_,
      stUserLeaveWorldBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeaveWorldBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLeaveWorldBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserLeaveWorldBoss));
  stUserLeaveWorldBoss_ProtoModID_descriptor_ = stUserLeaveWorldBoss_descriptor_->enum_type(0);
  stUserLeaveWorldBoss_ProtoFunID_descriptor_ = stUserLeaveWorldBoss_descriptor_->enum_type(1);
  stNotifyGameAutoConnect_descriptor_ = file->message_type(102);
  static const int stNotifyGameAutoConnect_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGameAutoConnect, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGameAutoConnect, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGameAutoConnect, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGameAutoConnect, device_),
  };
  stNotifyGameAutoConnect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyGameAutoConnect_descriptor_,
      stNotifyGameAutoConnect::default_instance_,
      stNotifyGameAutoConnect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGameAutoConnect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGameAutoConnect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyGameAutoConnect));
  stNotifyGameAutoConnect_ProtoModID_descriptor_ = stNotifyGameAutoConnect_descriptor_->enum_type(0);
  stNotifyGameAutoConnect_ProtoFunID_descriptor_ = stNotifyGameAutoConnect_descriptor_->enum_type(1);
  stForwardDrawHeroScoreReward_descriptor_ = file->message_type(103);
  static const int stForwardDrawHeroScoreReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardDrawHeroScoreReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardDrawHeroScoreReward, scoreid_),
  };
  stForwardDrawHeroScoreReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForwardDrawHeroScoreReward_descriptor_,
      stForwardDrawHeroScoreReward::default_instance_,
      stForwardDrawHeroScoreReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardDrawHeroScoreReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardDrawHeroScoreReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForwardDrawHeroScoreReward));
  stForwardDrawHeroScoreReward_ProtoModID_descriptor_ = stForwardDrawHeroScoreReward_descriptor_->enum_type(0);
  stForwardDrawHeroScoreReward_ProtoFunID_descriptor_ = stForwardDrawHeroScoreReward_descriptor_->enum_type(1);
  stNotifyArenaReward_descriptor_ = file->message_type(104);
  static const int stNotifyArenaReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyArenaReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyArenaReward, restype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyArenaReward, resnum_),
  };
  stNotifyArenaReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyArenaReward_descriptor_,
      stNotifyArenaReward::default_instance_,
      stNotifyArenaReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyArenaReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyArenaReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyArenaReward));
  stNotifyArenaReward_ProtoModID_descriptor_ = stNotifyArenaReward_descriptor_->enum_type(0);
  stNotifyArenaReward_ProtoFunID_descriptor_ = stNotifyArenaReward_descriptor_->enum_type(1);
  stForwardInvestgateAnswer_descriptor_ = file->message_type(105);
  static const int stForwardInvestgateAnswer_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, problemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, answera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, answerb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, answerc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, answerd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, answere_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, answerf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, answerg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, answerh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, answeri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, answerj_),
  };
  stForwardInvestgateAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stForwardInvestgateAnswer_descriptor_,
      stForwardInvestgateAnswer::default_instance_,
      stForwardInvestgateAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stForwardInvestgateAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stForwardInvestgateAnswer));
  ForwardInvestgateResult_descriptor_ = file->message_type(106);
  static const int ForwardInvestgateResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInvestgateResult, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInvestgateResult, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInvestgateResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInvestgateResult, usetime_),
  };
  ForwardInvestgateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardInvestgateResult_descriptor_,
      ForwardInvestgateResult::default_instance_,
      ForwardInvestgateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInvestgateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardInvestgateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardInvestgateResult));
  ForwardInvestgateResult_ProtoModID_descriptor_ = ForwardInvestgateResult_descriptor_->enum_type(0);
  ForwardInvestgateResult_ProtoFunID_descriptor_ = ForwardInvestgateResult_descriptor_->enum_type(1);
  stGMModifyUserInfo_descriptor_ = file->message_type(107);
  static const int stGMModifyUserInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMModifyUserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMModifyUserInfo, newbieguideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMModifyUserInfo, goldcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMModifyUserInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMModifyUserInfo, vippoint_),
  };
  stGMModifyUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGMModifyUserInfo_descriptor_,
      stGMModifyUserInfo::default_instance_,
      stGMModifyUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMModifyUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGMModifyUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGMModifyUserInfo));
  stGMModifyUserInfo_ProtoModID_descriptor_ = stGMModifyUserInfo_descriptor_->enum_type(0);
  stGMModifyUserInfo_ProtoFunID_descriptor_ = stGMModifyUserInfo_descriptor_->enum_type(1);
  stSynMyArenaRank_descriptor_ = file->message_type(108);
  static const int stSynMyArenaRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyArenaRank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyArenaRank, rank_),
  };
  stSynMyArenaRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMyArenaRank_descriptor_,
      stSynMyArenaRank::default_instance_,
      stSynMyArenaRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyArenaRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMyArenaRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMyArenaRank));
  stSynMyArenaRank_ProtoModID_descriptor_ = stSynMyArenaRank_descriptor_->enum_type(0);
  stSynMyArenaRank_ProtoFunID_descriptor_ = stSynMyArenaRank_descriptor_->enum_type(1);
  stSynVipLv_descriptor_ = file->message_type(109);
  static const int stSynVipLv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynVipLv, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynVipLv, viplv_),
  };
  stSynVipLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynVipLv_descriptor_,
      stSynVipLv::default_instance_,
      stSynVipLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynVipLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynVipLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynVipLv));
  stSynVipLv_ProtoModID_descriptor_ = stSynVipLv_descriptor_->enum_type(0);
  stSynVipLv_ProtoFunID_descriptor_ = stSynVipLv_descriptor_->enum_type(1);
  stNotifyClearArenaCD_descriptor_ = file->message_type(110);
  static const int stNotifyClearArenaCD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyClearArenaCD, charid_),
  };
  stNotifyClearArenaCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyClearArenaCD_descriptor_,
      stNotifyClearArenaCD::default_instance_,
      stNotifyClearArenaCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyClearArenaCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyClearArenaCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyClearArenaCD));
  stNotifyClearArenaCD_ProtoModID_descriptor_ = stNotifyClearArenaCD_descriptor_->enum_type(0);
  stNotifyClearArenaCD_ProtoFunID_descriptor_ = stNotifyClearArenaCD_descriptor_->enum_type(1);
  stReqResetArenaChallengeNum_descriptor_ = file->message_type(111);
  static const int stReqResetArenaChallengeNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetArenaChallengeNum, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetArenaChallengeNum, curresetnum_),
  };
  stReqResetArenaChallengeNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResetArenaChallengeNum_descriptor_,
      stReqResetArenaChallengeNum::default_instance_,
      stReqResetArenaChallengeNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetArenaChallengeNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetArenaChallengeNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResetArenaChallengeNum));
  stReqResetArenaChallengeNum_ProtoModID_descriptor_ = stReqResetArenaChallengeNum_descriptor_->enum_type(0);
  stReqResetArenaChallengeNum_ProtoFunID_descriptor_ = stReqResetArenaChallengeNum_descriptor_->enum_type(1);
  stNotfiyResetChallengeNum_descriptor_ = file->message_type(112);
  static const int stNotfiyResetChallengeNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotfiyResetChallengeNum, charid_),
  };
  stNotfiyResetChallengeNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotfiyResetChallengeNum_descriptor_,
      stNotfiyResetChallengeNum::default_instance_,
      stNotfiyResetChallengeNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotfiyResetChallengeNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotfiyResetChallengeNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotfiyResetChallengeNum));
  stNotfiyResetChallengeNum_ProtoModID_descriptor_ = stNotfiyResetChallengeNum_descriptor_->enum_type(0);
  stNotfiyResetChallengeNum_ProtoFunID_descriptor_ = stNotfiyResetChallengeNum_descriptor_->enum_type(1);
  stReqResetInterceptNum_descriptor_ = file->message_type(113);
  static const int stReqResetInterceptNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetInterceptNum, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetInterceptNum, resetnum_),
  };
  stReqResetInterceptNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqResetInterceptNum_descriptor_,
      stReqResetInterceptNum::default_instance_,
      stReqResetInterceptNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetInterceptNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqResetInterceptNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqResetInterceptNum));
  stReqResetInterceptNum_ProtoModID_descriptor_ = stReqResetInterceptNum_descriptor_->enum_type(0);
  stReqResetInterceptNum_ProtoFunID_descriptor_ = stReqResetInterceptNum_descriptor_->enum_type(1);
  stNotifyClearInterceptCD_descriptor_ = file->message_type(114);
  static const int stNotifyClearInterceptCD_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyClearInterceptCD, charid_),
  };
  stNotifyClearInterceptCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyClearInterceptCD_descriptor_,
      stNotifyClearInterceptCD::default_instance_,
      stNotifyClearInterceptCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyClearInterceptCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyClearInterceptCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyClearInterceptCD));
  stNotifyClearInterceptCD_ProtoModID_descriptor_ = stNotifyClearInterceptCD_descriptor_->enum_type(0);
  stNotifyClearInterceptCD_ProtoFunID_descriptor_ = stNotifyClearInterceptCD_descriptor_->enum_type(1);
  stNotifyResetInterceptNum_descriptor_ = file->message_type(115);
  static const int stNotifyResetInterceptNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResetInterceptNum, charid_),
  };
  stNotifyResetInterceptNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyResetInterceptNum_descriptor_,
      stNotifyResetInterceptNum::default_instance_,
      stNotifyResetInterceptNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResetInterceptNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyResetInterceptNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyResetInterceptNum));
  stNotifyResetInterceptNum_ProtoModID_descriptor_ = stNotifyResetInterceptNum_descriptor_->enum_type(0);
  stNotifyResetInterceptNum_ProtoFunID_descriptor_ = stNotifyResetInterceptNum_descriptor_->enum_type(1);
  stNotifyGuardQuality_descriptor_ = file->message_type(116);
  static const int stNotifyGuardQuality_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardQuality, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardQuality, quality_),
  };
  stNotifyGuardQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyGuardQuality_descriptor_,
      stNotifyGuardQuality::default_instance_,
      stNotifyGuardQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyGuardQuality));
  stNotifyGuardQuality_ProtoModID_descriptor_ = stNotifyGuardQuality_descriptor_->enum_type(0);
  stNotifyGuardQuality_ProtoFunID_descriptor_ = stNotifyGuardQuality_descriptor_->enum_type(1);
  stNotifyGuardInspiredSuccess_descriptor_ = file->message_type(117);
  static const int stNotifyGuardInspiredSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardInspiredSuccess, charid_),
  };
  stNotifyGuardInspiredSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyGuardInspiredSuccess_descriptor_,
      stNotifyGuardInspiredSuccess::default_instance_,
      stNotifyGuardInspiredSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardInspiredSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuardInspiredSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyGuardInspiredSuccess));
  stNotifyGuardInspiredSuccess_ProtoModID_descriptor_ = stNotifyGuardInspiredSuccess_descriptor_->enum_type(0);
  stNotifyGuardInspiredSuccess_ProtoFunID_descriptor_ = stNotifyGuardInspiredSuccess_descriptor_->enum_type(1);
  stReqRefreshGuardQuality_descriptor_ = file->message_type(118);
  static const int stReqRefreshGuardQuality_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshGuardQuality, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshGuardQuality, quality_),
  };
  stReqRefreshGuardQuality_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRefreshGuardQuality_descriptor_,
      stReqRefreshGuardQuality::default_instance_,
      stReqRefreshGuardQuality_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshGuardQuality, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRefreshGuardQuality, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRefreshGuardQuality));
  stReqRefreshGuardQuality_ProtoModID_descriptor_ = stReqRefreshGuardQuality_descriptor_->enum_type(0);
  stReqRefreshGuardQuality_ProtoFunID_descriptor_ = stReqRefreshGuardQuality_descriptor_->enum_type(1);
  stNotifyClearOne2OneScore_descriptor_ = file->message_type(119);
  static const int stNotifyClearOne2OneScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyClearOne2OneScore, flag_),
  };
  stNotifyClearOne2OneScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyClearOne2OneScore_descriptor_,
      stNotifyClearOne2OneScore::default_instance_,
      stNotifyClearOne2OneScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyClearOne2OneScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyClearOne2OneScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyClearOne2OneScore));
  stNotifyClearOne2OneScore_ProtoModID_descriptor_ = stNotifyClearOne2OneScore_descriptor_->enum_type(0);
  stNotifyClearOne2OneScore_ProtoFunID_descriptor_ = stNotifyClearOne2OneScore_descriptor_->enum_type(1);
  stClearOne2OneScoreSuccess_descriptor_ = file->message_type(120);
  static const int stClearOne2OneScoreSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClearOne2OneScoreSuccess, flag_),
  };
  stClearOne2OneScoreSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stClearOne2OneScoreSuccess_descriptor_,
      stClearOne2OneScoreSuccess::default_instance_,
      stClearOne2OneScoreSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClearOne2OneScoreSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stClearOne2OneScoreSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stClearOne2OneScoreSuccess));
  stClearOne2OneScoreSuccess_ProtoModID_descriptor_ = stClearOne2OneScoreSuccess_descriptor_->enum_type(0);
  stClearOne2OneScoreSuccess_ProtoFunID_descriptor_ = stClearOne2OneScoreSuccess_descriptor_->enum_type(1);
  stInterceptReward_descriptor_ = file->message_type(121);
  static const int stInterceptReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptReward, resid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptReward, resnum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptReward, resid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptReward, resnum2_),
  };
  stInterceptReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInterceptReward_descriptor_,
      stInterceptReward::default_instance_,
      stInterceptReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInterceptReward));
  stInterceptReward_ProtoModID_descriptor_ = stInterceptReward_descriptor_->enum_type(0);
  stInterceptReward_ProtoFunID_descriptor_ = stInterceptReward_descriptor_->enum_type(1);
  stQuickFinishDecDiamond_descriptor_ = file->message_type(122);
  static const int stQuickFinishDecDiamond_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishDecDiamond, charid_),
  };
  stQuickFinishDecDiamond_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQuickFinishDecDiamond_descriptor_,
      stQuickFinishDecDiamond::default_instance_,
      stQuickFinishDecDiamond_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishDecDiamond, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishDecDiamond, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQuickFinishDecDiamond));
  stQuickFinishDecDiamond_ProtoModID_descriptor_ = stQuickFinishDecDiamond_descriptor_->enum_type(0);
  stQuickFinishDecDiamond_ProtoFunID_descriptor_ = stQuickFinishDecDiamond_descriptor_->enum_type(1);
  stQuickFinishDiamondSuccess_descriptor_ = file->message_type(123);
  static const int stQuickFinishDiamondSuccess_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishDiamondSuccess, charid_),
  };
  stQuickFinishDiamondSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQuickFinishDiamondSuccess_descriptor_,
      stQuickFinishDiamondSuccess::default_instance_,
      stQuickFinishDiamondSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishDiamondSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQuickFinishDiamondSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQuickFinishDiamondSuccess));
  stQuickFinishDiamondSuccess_ProtoModID_descriptor_ = stQuickFinishDiamondSuccess_descriptor_->enum_type(0);
  stQuickFinishDiamondSuccess_ProtoFunID_descriptor_ = stQuickFinishDiamondSuccess_descriptor_->enum_type(1);
  stOne2OnePkWithRobot_descriptor_ = file->message_type(124);
  static const int stOne2OnePkWithRobot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePkWithRobot, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePkWithRobot, robotgroup_),
  };
  stOne2OnePkWithRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOne2OnePkWithRobot_descriptor_,
      stOne2OnePkWithRobot::default_instance_,
      stOne2OnePkWithRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePkWithRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOne2OnePkWithRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOne2OnePkWithRobot));
  stOne2OnePkWithRobot_ProtoModID_descriptor_ = stOne2OnePkWithRobot_descriptor_->enum_type(0);
  stOne2OnePkWithRobot_ProtoFunID_descriptor_ = stOne2OnePkWithRobot_descriptor_->enum_type(1);
  stNotifyUserBeginGuard_descriptor_ = file->message_type(125);
  static const int stNotifyUserBeginGuard_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserBeginGuard, charid_),
  };
  stNotifyUserBeginGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyUserBeginGuard_descriptor_,
      stNotifyUserBeginGuard::default_instance_,
      stNotifyUserBeginGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserBeginGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserBeginGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyUserBeginGuard));
  stNotifyUserBeginGuard_ProtoModID_descriptor_ = stNotifyUserBeginGuard_descriptor_->enum_type(0);
  stNotifyUserBeginGuard_ProtoFunID_descriptor_ = stNotifyUserBeginGuard_descriptor_->enum_type(1);
  stNotifyUserInterceptResult_descriptor_ = file->message_type(126);
  static const int stNotifyUserInterceptResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserInterceptResult, charid_),
  };
  stNotifyUserInterceptResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyUserInterceptResult_descriptor_,
      stNotifyUserInterceptResult::default_instance_,
      stNotifyUserInterceptResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserInterceptResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserInterceptResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyUserInterceptResult));
  stNotifyUserInterceptResult_ProtoModID_descriptor_ = stNotifyUserInterceptResult_descriptor_->enum_type(0);
  stNotifyUserInterceptResult_ProtoFunID_descriptor_ = stNotifyUserInterceptResult_descriptor_->enum_type(1);
  stNotifyCloseBetaReward_descriptor_ = file->message_type(127);
  static const int stNotifyCloseBetaReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCloseBetaReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCloseBetaReward, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCloseBetaReward, givediamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCloseBetaReward, giverecharge_),
  };
  stNotifyCloseBetaReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyCloseBetaReward_descriptor_,
      stNotifyCloseBetaReward::default_instance_,
      stNotifyCloseBetaReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCloseBetaReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCloseBetaReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyCloseBetaReward));
  stNotifyCloseBetaReward_ProtoModID_descriptor_ = stNotifyCloseBetaReward_descriptor_->enum_type(0);
  stNotifyCloseBetaReward_ProtoFunID_descriptor_ = stNotifyCloseBetaReward_descriptor_->enum_type(1);
  stEnterManorFightMapUserInfo_descriptor_ = file->message_type(128);
  static const int stEnterManorFightMapUserInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMapUserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMapUserInfo, hp_),
  };
  stEnterManorFightMapUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterManorFightMapUserInfo_descriptor_,
      stEnterManorFightMapUserInfo::default_instance_,
      stEnterManorFightMapUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMapUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMapUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterManorFightMapUserInfo));
  stEnterManorFightMap_descriptor_ = file->message_type(129);
  static const int stEnterManorFightMap_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMap, guildamem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMap, guildbmem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMap, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMap, fomation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMap, teamaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMap, teambid_),
  };
  stEnterManorFightMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterManorFightMap_descriptor_,
      stEnterManorFightMap::default_instance_,
      stEnterManorFightMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterManorFightMap));
  stEnterManorFightMap_ProtoModID_descriptor_ = stEnterManorFightMap_descriptor_->enum_type(0);
  stEnterManorFightMap_ProtoFunID_descriptor_ = stEnterManorFightMap_descriptor_->enum_type(1);
  stManorFightBattleProp_descriptor_ = file->message_type(130);
  static const int stManorFightBattleProp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightBattleProp, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightBattleProp, charid_),
  };
  stManorFightBattleProp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stManorFightBattleProp_descriptor_,
      stManorFightBattleProp::default_instance_,
      stManorFightBattleProp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightBattleProp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightBattleProp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stManorFightBattleProp));
  stFinishManorFight_descriptor_ = file->message_type(131);
  static const int stFinishManorFight_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishManorFight, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishManorFight, fomation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishManorFight, teamaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishManorFight, teambid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishManorFight, bfail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishManorFight, bfinish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishManorFight, userinfo_),
  };
  stFinishManorFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFinishManorFight_descriptor_,
      stFinishManorFight::default_instance_,
      stFinishManorFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishManorFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFinishManorFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFinishManorFight));
  stFinishManorFight_ProtoModID_descriptor_ = stFinishManorFight_descriptor_->enum_type(0);
  stFinishManorFight_ProtoFunID_descriptor_ = stFinishManorFight_descriptor_->enum_type(1);
  stExistName_descriptor_ = file->message_type(132);
  static const int stExistName_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExistName, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExistName, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExistName, name_),
  };
  stExistName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExistName_descriptor_,
      stExistName::default_instance_,
      stExistName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExistName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExistName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExistName));
  stExistName_eResult_descriptor_ = stExistName_descriptor_->enum_type(0);
  stExistName_ProtoModID_descriptor_ = stExistName_descriptor_->enum_type(1);
  stExistName_ProtoFunID_descriptor_ = stExistName_descriptor_->enum_type(2);
  stSynName_descriptor_ = file->message_type(133);
  static const int stSynName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynName, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynName, name_),
  };
  stSynName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynName_descriptor_,
      stSynName::default_instance_,
      stSynName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynName));
  stSynName_ProtoModID_descriptor_ = stSynName_descriptor_->enum_type(0);
  stSynName_ProtoFunID_descriptor_ = stSynName_descriptor_->enum_type(1);
  stSynGloryfashionCharID_descriptor_ = file->message_type(134);
  static const int stSynGloryfashionCharID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGloryfashionCharID, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGloryfashionCharID, buytime_),
  };
  stSynGloryfashionCharID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynGloryfashionCharID_descriptor_,
      stSynGloryfashionCharID::default_instance_,
      stSynGloryfashionCharID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGloryfashionCharID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGloryfashionCharID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynGloryfashionCharID));
  stSynGloryfashionCharID_ProtoModID_descriptor_ = stSynGloryfashionCharID_descriptor_->enum_type(0);
  stSynGloryfashionCharID_ProtoFunID_descriptor_ = stSynGloryfashionCharID_descriptor_->enum_type(1);
  stDevilCallItem_descriptor_ = file->message_type(135);
  static const int stDevilCallItem_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, name1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, name3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, charid3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, haspass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, bossdrawstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, commondrawstatus_),
  };
  stDevilCallItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDevilCallItem_descriptor_,
      stDevilCallItem::default_instance_,
      stDevilCallItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDevilCallItem));
  stAllDevilCall_descriptor_ = file->message_type(136);
  static const int stAllDevilCall_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAllDevilCall, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAllDevilCall, item_),
  };
  stAllDevilCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAllDevilCall_descriptor_,
      stAllDevilCall::default_instance_,
      stAllDevilCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAllDevilCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAllDevilCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAllDevilCall));
  stAllDevilCall_ProtoModID_descriptor_ = stAllDevilCall_descriptor_->enum_type(0);
  stAllDevilCall_ProtoFunID_descriptor_ = stAllDevilCall_descriptor_->enum_type(1);
  stDevilCallReward_descriptor_ = file->message_type(137);
  static const int stDevilCallReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallReward, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallReward, rewardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallReward, gotpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallReward, status_),
  };
  stDevilCallReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDevilCallReward_descriptor_,
      stDevilCallReward::default_instance_,
      stDevilCallReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDevilCallReward));
  stDevilCallReward_ProtoModID_descriptor_ = stDevilCallReward_descriptor_->enum_type(0);
  stDevilCallReward_ProtoFunID_descriptor_ = stDevilCallReward_descriptor_->enum_type(1);
  stDevilCallRewardRet_descriptor_ = file->message_type(138);
  static const int stDevilCallRewardRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRewardRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRewardRet, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRewardRet, rewardtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRewardRet, status_),
  };
  stDevilCallRewardRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDevilCallRewardRet_descriptor_,
      stDevilCallRewardRet::default_instance_,
      stDevilCallRewardRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRewardRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRewardRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDevilCallRewardRet));
  stDevilCallRewardRet_ProtoModID_descriptor_ = stDevilCallRewardRet_descriptor_->enum_type(0);
  stDevilCallRewardRet_ProtoFunID_descriptor_ = stDevilCallRewardRet_descriptor_->enum_type(1);
  stDevilCall_descriptor_ = file->message_type(139);
  static const int stDevilCall_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCall, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCall, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCall, gotpass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCall, drawnum_),
  };
  stDevilCall_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDevilCall_descriptor_,
      stDevilCall::default_instance_,
      stDevilCall_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCall, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCall, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDevilCall));
  stDevilCall_ProtoModID_descriptor_ = stDevilCall_descriptor_->enum_type(0);
  stDevilCall_ProtoFunID_descriptor_ = stDevilCall_descriptor_->enum_type(1);
  stDevilCallRet_descriptor_ = file->message_type(140);
  static const int stDevilCallRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRet, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRet, drawnum_),
  };
  stDevilCallRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDevilCallRet_descriptor_,
      stDevilCallRet::default_instance_,
      stDevilCallRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDevilCallRet));
  stDevilCallRet_ProtoModID_descriptor_ = stDevilCallRet_descriptor_->enum_type(0);
  stDevilCallRet_ProtoFunID_descriptor_ = stDevilCallRet_descriptor_->enum_type(1);
  stDevilCallSummary_descriptor_ = file->message_type(141);
  static const int stDevilCallSummary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallSummary, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallSummary, item_),
  };
  stDevilCallSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDevilCallSummary_descriptor_,
      stDevilCallSummary::default_instance_,
      stDevilCallSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDevilCallSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDevilCallSummary));
  stDevilCallSummary_ProtoModID_descriptor_ = stDevilCallSummary_descriptor_->enum_type(0);
  stDevilCallSummary_ProtoFunID_descriptor_ = stDevilCallSummary_descriptor_->enum_type(1);
  stExpeditionItem_descriptor_ = file->message_type(142);
  static const int stExpeditionItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionItem, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionItem, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionItem, heroids_),
  };
  stExpeditionItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExpeditionItem_descriptor_,
      stExpeditionItem::default_instance_,
      stExpeditionItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExpeditionItem));
  stExpeditionInfo_descriptor_ = file->message_type(143);
  static const int stExpeditionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionInfo, items_),
  };
  stExpeditionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExpeditionInfo_descriptor_,
      stExpeditionInfo::default_instance_,
      stExpeditionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExpeditionInfo));
  stExpeditionInfo_ProtoModID_descriptor_ = stExpeditionInfo_descriptor_->enum_type(0);
  stExpeditionInfo_ProtoFunID_descriptor_ = stExpeditionInfo_descriptor_->enum_type(1);
  stExpedition_descriptor_ = file->message_type(144);
  static const int stExpedition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpedition, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpedition, expeids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpedition, heroids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpedition, usedhero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpedition, expeditionid_),
  };
  stExpedition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExpedition_descriptor_,
      stExpedition::default_instance_,
      stExpedition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpedition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpedition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExpedition));
  stExpedition_ProtoModID_descriptor_ = stExpedition_descriptor_->enum_type(0);
  stExpedition_ProtoFunID_descriptor_ = stExpedition_descriptor_->enum_type(1);
  stExpeditionHero_descriptor_ = file->message_type(145);
  static const int stExpeditionHero_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionHero, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionHero, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionHero, power_),
  };
  stExpeditionHero_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExpeditionHero_descriptor_,
      stExpeditionHero::default_instance_,
      stExpeditionHero_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionHero, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionHero, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExpeditionHero));
  stExpeditionRet_descriptor_ = file->message_type(146);
  static const int stExpeditionRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionRet, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionRet, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionRet, usedhero_),
  };
  stExpeditionRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExpeditionRet_descriptor_,
      stExpeditionRet::default_instance_,
      stExpeditionRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExpeditionRet));
  stExpeditionRet_ProtoModID_descriptor_ = stExpeditionRet_descriptor_->enum_type(0);
  stExpeditionRet_ProtoFunID_descriptor_ = stExpeditionRet_descriptor_->enum_type(1);
  stExpeditionReward_descriptor_ = file->message_type(147);
  static const int stExpeditionReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionReward, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionReward, finishtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionReward, usedhero_),
  };
  stExpeditionReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExpeditionReward_descriptor_,
      stExpeditionReward::default_instance_,
      stExpeditionReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExpeditionReward));
  stExpeditionReward_ProtoModID_descriptor_ = stExpeditionReward_descriptor_->enum_type(0);
  stExpeditionReward_ProtoFunID_descriptor_ = stExpeditionReward_descriptor_->enum_type(1);
  stExpeditionRewardRet_descriptor_ = file->message_type(148);
  static const int stExpeditionRewardRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionRewardRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionRewardRet, expeditionid_),
  };
  stExpeditionRewardRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExpeditionRewardRet_descriptor_,
      stExpeditionRewardRet::default_instance_,
      stExpeditionRewardRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionRewardRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionRewardRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExpeditionRewardRet));
  stExpeditionRewardRet_ProtoModID_descriptor_ = stExpeditionRewardRet_descriptor_->enum_type(0);
  stExpeditionRewardRet_ProtoFunID_descriptor_ = stExpeditionRewardRet_descriptor_->enum_type(1);
  stFastExpedition_descriptor_ = file->message_type(149);
  static const int stFastExpedition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFastExpedition, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFastExpedition, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFastExpedition, finishtime_),
  };
  stFastExpedition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFastExpedition_descriptor_,
      stFastExpedition::default_instance_,
      stFastExpedition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFastExpedition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFastExpedition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFastExpedition));
  stFastExpedition_ProtoModID_descriptor_ = stFastExpedition_descriptor_->enum_type(0);
  stFastExpedition_ProtoFunID_descriptor_ = stFastExpedition_descriptor_->enum_type(1);
  stFastExpeditionRet_descriptor_ = file->message_type(150);
  static const int stFastExpeditionRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFastExpeditionRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFastExpeditionRet, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFastExpeditionRet, finishtime_),
  };
  stFastExpeditionRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFastExpeditionRet_descriptor_,
      stFastExpeditionRet::default_instance_,
      stFastExpeditionRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFastExpeditionRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFastExpeditionRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFastExpeditionRet));
  stFastExpeditionRet_ProtoModID_descriptor_ = stFastExpeditionRet_descriptor_->enum_type(0);
  stFastExpeditionRet_ProtoFunID_descriptor_ = stFastExpeditionRet_descriptor_->enum_type(1);
  stCancelExpedition_descriptor_ = file->message_type(151);
  static const int stCancelExpedition_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelExpedition, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelExpedition, expeditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelExpedition, finishtime_),
  };
  stCancelExpedition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelExpedition_descriptor_,
      stCancelExpedition::default_instance_,
      stCancelExpedition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelExpedition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelExpedition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelExpedition));
  stCancelExpedition_ProtoModID_descriptor_ = stCancelExpedition_descriptor_->enum_type(0);
  stCancelExpedition_ProtoFunID_descriptor_ = stCancelExpedition_descriptor_->enum_type(1);
  stCancelExpeditionRet_descriptor_ = file->message_type(152);
  static const int stCancelExpeditionRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelExpeditionRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelExpeditionRet, expeditionid_),
  };
  stCancelExpeditionRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelExpeditionRet_descriptor_,
      stCancelExpeditionRet::default_instance_,
      stCancelExpeditionRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelExpeditionRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelExpeditionRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelExpeditionRet));
  stCancelExpeditionRet_ProtoModID_descriptor_ = stCancelExpeditionRet_descriptor_->enum_type(0);
  stCancelExpeditionRet_ProtoFunID_descriptor_ = stCancelExpeditionRet_descriptor_->enum_type(1);
  stExpeditionSummary_descriptor_ = file->message_type(153);
  static const int stExpeditionSummary_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionSummary, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionSummary, items_),
  };
  stExpeditionSummary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stExpeditionSummary_descriptor_,
      stExpeditionSummary::default_instance_,
      stExpeditionSummary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionSummary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stExpeditionSummary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stExpeditionSummary));
  stExpeditionSummary_ProtoModID_descriptor_ = stExpeditionSummary_descriptor_->enum_type(0);
  stExpeditionSummary_ProtoFunID_descriptor_ = stExpeditionSummary_descriptor_->enum_type(1);
  stGiveLilianDayTaskCb_descriptor_ = file->message_type(154);
  static const int stGiveLilianDayTaskCb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLilianDayTaskCb, charid_),
  };
  stGiveLilianDayTaskCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiveLilianDayTaskCb_descriptor_,
      stGiveLilianDayTaskCb::default_instance_,
      stGiveLilianDayTaskCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLilianDayTaskCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLilianDayTaskCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiveLilianDayTaskCb));
  stGiveLilianDayTaskCb_ProtoModID_descriptor_ = stGiveLilianDayTaskCb_descriptor_->enum_type(0);
  stGiveLilianDayTaskCb_ProtoFunID_descriptor_ = stGiveLilianDayTaskCb_descriptor_->enum_type(1);
  stUpdateDamageRank_descriptor_ = file->message_type(155);
  static const int stUpdateDamageRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateDamageRank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateDamageRank, damage_),
  };
  stUpdateDamageRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUpdateDamageRank_descriptor_,
      stUpdateDamageRank::default_instance_,
      stUpdateDamageRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateDamageRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateDamageRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUpdateDamageRank));
  stUpdateDamageRank_ProtoModID_descriptor_ = stUpdateDamageRank_descriptor_->enum_type(0);
  stUpdateDamageRank_ProtoFunID_descriptor_ = stUpdateDamageRank_descriptor_->enum_type(1);
  stNoticeSendRankInfo_descriptor_ = file->message_type(156);
  static const int stNoticeSendRankInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNoticeSendRankInfo, charid_),
  };
  stNoticeSendRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNoticeSendRankInfo_descriptor_,
      stNoticeSendRankInfo::default_instance_,
      stNoticeSendRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNoticeSendRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNoticeSendRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNoticeSendRankInfo));
  stNoticeSendRankInfo_ProtoModID_descriptor_ = stNoticeSendRankInfo_descriptor_->enum_type(0);
  stNoticeSendRankInfo_ProtoFunID_descriptor_ = stNoticeSendRankInfo_descriptor_->enum_type(1);
  stOperateActivityCb_descriptor_ = file->message_type(157);
  static const int stOperateActivityCb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityCb, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityCb, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityCb, num_),
  };
  stOperateActivityCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOperateActivityCb_descriptor_,
      stOperateActivityCb::default_instance_,
      stOperateActivityCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOperateActivityCb));
  stOperateActivityCb_ProtoModID_descriptor_ = stOperateActivityCb_descriptor_->enum_type(0);
  stOperateActivityCb_ProtoFunID_descriptor_ = stOperateActivityCb_descriptor_->enum_type(1);
  stOperateActivityReward_descriptor_ = file->message_type(158);
  static const int stOperateActivityReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityReward, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityReward, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityReward, boxid_),
  };
  stOperateActivityReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOperateActivityReward_descriptor_,
      stOperateActivityReward::default_instance_,
      stOperateActivityReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOperateActivityReward));
  stOperateActivityReward_ProtoModID_descriptor_ = stOperateActivityReward_descriptor_->enum_type(0);
  stOperateActivityReward_ProtoFunID_descriptor_ = stOperateActivityReward_descriptor_->enum_type(1);
  stOperateActivityRewardCb_descriptor_ = file->message_type(159);
  static const int stOperateActivityRewardCb_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityRewardCb, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityRewardCb, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityRewardCb, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityRewardCb, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityRewardCb, boxid_),
  };
  stOperateActivityRewardCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOperateActivityRewardCb_descriptor_,
      stOperateActivityRewardCb::default_instance_,
      stOperateActivityRewardCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityRewardCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityRewardCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOperateActivityRewardCb));
  stOperateActivityRewardCb_ProtoModID_descriptor_ = stOperateActivityRewardCb_descriptor_->enum_type(0);
  stOperateActivityRewardCb_ProtoFunID_descriptor_ = stOperateActivityRewardCb_descriptor_->enum_type(1);
  stOperateActivityLotteryReward_descriptor_ = file->message_type(160);
  static const int stOperateActivityLotteryReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityLotteryReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityLotteryReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityLotteryReward, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityLotteryReward, boxid_),
  };
  stOperateActivityLotteryReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOperateActivityLotteryReward_descriptor_,
      stOperateActivityLotteryReward::default_instance_,
      stOperateActivityLotteryReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityLotteryReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityLotteryReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOperateActivityLotteryReward));
  stOperateActivityLotteryReward_ProtoModID_descriptor_ = stOperateActivityLotteryReward_descriptor_->enum_type(0);
  stOperateActivityLotteryReward_ProtoFunID_descriptor_ = stOperateActivityLotteryReward_descriptor_->enum_type(1);
  stOperateActivityLotteryRewardCb_descriptor_ = file->message_type(161);
  static const int stOperateActivityLotteryRewardCb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityLotteryRewardCb, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityLotteryRewardCb, itemid_),
  };
  stOperateActivityLotteryRewardCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOperateActivityLotteryRewardCb_descriptor_,
      stOperateActivityLotteryRewardCb::default_instance_,
      stOperateActivityLotteryRewardCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityLotteryRewardCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOperateActivityLotteryRewardCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOperateActivityLotteryRewardCb));
  stOperateActivityLotteryRewardCb_ProtoModID_descriptor_ = stOperateActivityLotteryRewardCb_descriptor_->enum_type(0);
  stOperateActivityLotteryRewardCb_ProtoFunID_descriptor_ = stOperateActivityLotteryRewardCb_descriptor_->enum_type(1);
  stReqPayTypeCb_descriptor_ = file->message_type(162);
  static const int stReqPayTypeCb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, orderid_),
  };
  stReqPayTypeCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPayTypeCb_descriptor_,
      stReqPayTypeCb::default_instance_,
      stReqPayTypeCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPayTypeCb));
  stReqPayTypeCb_ProtoModID_descriptor_ = stReqPayTypeCb_descriptor_->enum_type(0);
  stReqPayTypeCb_ProtoFunID_descriptor_ = stReqPayTypeCb_descriptor_->enum_type(1);
  stReqUserRankInfo_descriptor_ = file->message_type(163);
  static const int stReqUserRankInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUserRankInfo, charid_),
  };
  stReqUserRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqUserRankInfo_descriptor_,
      stReqUserRankInfo::default_instance_,
      stReqUserRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUserRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqUserRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqUserRankInfo));
  stReqUserRankInfo_ProtoModID_descriptor_ = stReqUserRankInfo_descriptor_->enum_type(0);
  stReqUserRankInfo_ProtoFunID_descriptor_ = stReqUserRankInfo_descriptor_->enum_type(1);
  userSortInfo_descriptor_ = file->message_type(164);
  static const int userSortInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userSortInfo, name_),
  };
  userSortInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      userSortInfo_descriptor_,
      userSortInfo::default_instance_,
      userSortInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userSortInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(userSortInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(userSortInfo));
  stUserRankInfoResult_descriptor_ = file->message_type(165);
  static const int stUserRankInfoResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRankInfoResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRankInfoResult, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRankInfoResult, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRankInfoResult, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRankInfoResult, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRankInfoResult, levelid_),
  };
  stUserRankInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserRankInfoResult_descriptor_,
      stUserRankInfoResult::default_instance_,
      stUserRankInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRankInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserRankInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserRankInfoResult));
  stUserRankInfoResult_ProtoModID_descriptor_ = stUserRankInfoResult_descriptor_->enum_type(0);
  stUserRankInfoResult_ProtoFunID_descriptor_ = stUserRankInfoResult_descriptor_->enum_type(1);
  stEmeraldDreamCopymapFail_descriptor_ = file->message_type(166);
  static const int stEmeraldDreamCopymapFail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEmeraldDreamCopymapFail, damageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEmeraldDreamCopymapFail, bosshp_),
  };
  stEmeraldDreamCopymapFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEmeraldDreamCopymapFail_descriptor_,
      stEmeraldDreamCopymapFail::default_instance_,
      stEmeraldDreamCopymapFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEmeraldDreamCopymapFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEmeraldDreamCopymapFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEmeraldDreamCopymapFail));
  stEmeraldDreamCopymapFail_ProtoModID_descriptor_ = stEmeraldDreamCopymapFail_descriptor_->enum_type(0);
  stEmeraldDreamCopymapFail_ProtoFunID_descriptor_ = stEmeraldDreamCopymapFail_descriptor_->enum_type(1);
  stKillEmeraldDreamBoss_descriptor_ = file->message_type(167);
  static const int stKillEmeraldDreamBoss_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillEmeraldDreamBoss, damageinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillEmeraldDreamBoss, bossid_),
  };
  stKillEmeraldDreamBoss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stKillEmeraldDreamBoss_descriptor_,
      stKillEmeraldDreamBoss::default_instance_,
      stKillEmeraldDreamBoss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillEmeraldDreamBoss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillEmeraldDreamBoss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stKillEmeraldDreamBoss));
  stKillEmeraldDreamBoss_ProtoModID_descriptor_ = stKillEmeraldDreamBoss_descriptor_->enum_type(0);
  stKillEmeraldDreamBoss_ProtoFunID_descriptor_ = stKillEmeraldDreamBoss_descriptor_->enum_type(1);
  strRemoveNum_descriptor_ = file->message_type(168);
  static const int strRemoveNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strRemoveNum, charid_),
  };
  strRemoveNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      strRemoveNum_descriptor_,
      strRemoveNum::default_instance_,
      strRemoveNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strRemoveNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(strRemoveNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(strRemoveNum));
  strRemoveNum_ProtoModID_descriptor_ = strRemoveNum_descriptor_->enum_type(0);
  strRemoveNum_ProtoFunID_descriptor_ = strRemoveNum_descriptor_->enum_type(1);
  stCopyMapInfo_descriptor_ = file->message_type(169);
  static const int stCopyMapInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapInfo, charid_),
  };
  stCopyMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCopyMapInfo_descriptor_,
      stCopyMapInfo::default_instance_,
      stCopyMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCopyMapInfo));
  stCopyMapInfo_ProtoModID_descriptor_ = stCopyMapInfo_descriptor_->enum_type(0);
  stCopyMapInfo_ProtoFunID_descriptor_ = stCopyMapInfo_descriptor_->enum_type(1);
  stCopyMapInfoResult_descriptor_ = file->message_type(170);
  static const int stCopyMapInfoResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapInfoResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapInfoResult, levelid_),
  };
  stCopyMapInfoResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCopyMapInfoResult_descriptor_,
      stCopyMapInfoResult::default_instance_,
      stCopyMapInfoResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapInfoResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopyMapInfoResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCopyMapInfoResult));
  stCopyMapInfoResult_ProtoModID_descriptor_ = stCopyMapInfoResult_descriptor_->enum_type(0);
  stCopyMapInfoResult_ProtoFunID_descriptor_ = stCopyMapInfoResult_descriptor_->enum_type(1);
  stRealTimeTeamMatch_descriptor_ = file->message_type(171);
  static const int stRealTimeTeamMatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatch, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatch, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatch, memberid_),
  };
  stRealTimeTeamMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRealTimeTeamMatch_descriptor_,
      stRealTimeTeamMatch::default_instance_,
      stRealTimeTeamMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRealTimeTeamMatch));
  stRealTimeTeamMatch_ProtoModID_descriptor_ = stRealTimeTeamMatch_descriptor_->enum_type(0);
  stRealTimeTeamMatch_ProtoFunID_descriptor_ = stRealTimeTeamMatch_descriptor_->enum_type(1);
  stOnPubLeaveTeam_descriptor_ = file->message_type(172);
  static const int stOnPubLeaveTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnPubLeaveTeam, charid_),
  };
  stOnPubLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stOnPubLeaveTeam_descriptor_,
      stOnPubLeaveTeam::default_instance_,
      stOnPubLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnPubLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stOnPubLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stOnPubLeaveTeam));
  stOnPubLeaveTeam_ProtoModID_descriptor_ = stOnPubLeaveTeam_descriptor_->enum_type(0);
  stOnPubLeaveTeam_ProtoFunID_descriptor_ = stOnPubLeaveTeam_descriptor_->enum_type(1);
  stDeductMoney_descriptor_ = file->message_type(173);
  static const int stDeductMoney_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeductMoney, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeductMoney, charid_),
  };
  stDeductMoney_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDeductMoney_descriptor_,
      stDeductMoney::default_instance_,
      stDeductMoney_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeductMoney, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeductMoney, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDeductMoney));
  stDeductMoney_ProtoModID_descriptor_ = stDeductMoney_descriptor_->enum_type(0);
  stDeductMoney_ProtoFunID_descriptor_ = stDeductMoney_descriptor_->enum_type(1);
  stDeductMoneyResult_descriptor_ = file->message_type(174);
  static const int stDeductMoneyResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeductMoneyResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeductMoneyResult, charid_),
  };
  stDeductMoneyResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDeductMoneyResult_descriptor_,
      stDeductMoneyResult::default_instance_,
      stDeductMoneyResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeductMoneyResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDeductMoneyResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDeductMoneyResult));
  stDeductMoneyResult_eResult_descriptor_ = stDeductMoneyResult_descriptor_->enum_type(0);
  stDeductMoneyResult_ProtoModID_descriptor_ = stDeductMoneyResult_descriptor_->enum_type(1);
  stDeductMoneyResult_ProtoFunID_descriptor_ = stDeductMoneyResult_descriptor_->enum_type(2);
  stGiveReward_descriptor_ = file->message_type(175);
  static const int stGiveReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveReward, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveReward, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveReward, isintegralreward_),
  };
  stGiveReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiveReward_descriptor_,
      stGiveReward::default_instance_,
      stGiveReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiveReward));
  stGiveReward_ProtoModID_descriptor_ = stGiveReward_descriptor_->enum_type(0);
  stGiveReward_ProtoFunID_descriptor_ = stGiveReward_descriptor_->enum_type(1);
  stGiveRewardResult_descriptor_ = file->message_type(176);
  static const int stGiveRewardResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveRewardResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveRewardResult, rewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveRewardResult, isintegralreward_),
  };
  stGiveRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiveRewardResult_descriptor_,
      stGiveRewardResult::default_instance_,
      stGiveRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiveRewardResult));
  stGiveRewardResult_eResult_descriptor_ = stGiveRewardResult_descriptor_->enum_type(0);
  stGiveRewardResult_ProtoModID_descriptor_ = stGiveRewardResult_descriptor_->enum_type(1);
  stGiveRewardResult_ProtoFunID_descriptor_ = stGiveRewardResult_descriptor_->enum_type(2);
  stReqCheckMission_descriptor_ = file->message_type(177);
  static const int stReqCheckMission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCheckMission, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCheckMission, levelid_),
  };
  stReqCheckMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCheckMission_descriptor_,
      stReqCheckMission::default_instance_,
      stReqCheckMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCheckMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCheckMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCheckMission));
  stReqCheckMission_ProtoModID_descriptor_ = stReqCheckMission_descriptor_->enum_type(0);
  stReqCheckMission_ProtoFunID_descriptor_ = stReqCheckMission_descriptor_->enum_type(1);
  stReqCheckTask_descriptor_ = file->message_type(178);
  static const int stReqCheckTask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCheckTask, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCheckTask, squaretype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCheckTask, battletype_),
  };
  stReqCheckTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCheckTask_descriptor_,
      stReqCheckTask::default_instance_,
      stReqCheckTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCheckTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCheckTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCheckTask));
  stReqCheckTask_ProtoModID_descriptor_ = stReqCheckTask_descriptor_->enum_type(0);
  stReqCheckTask_ProtoFunID_descriptor_ = stReqCheckTask_descriptor_->enum_type(1);
  stReqEnterTaskLv_descriptor_ = file->message_type(179);
  static const int stReqEnterTaskLv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterTaskLv, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterTaskLv, levelid_),
  };
  stReqEnterTaskLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEnterTaskLv_descriptor_,
      stReqEnterTaskLv::default_instance_,
      stReqEnterTaskLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterTaskLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterTaskLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEnterTaskLv));
  stReqEnterTaskLv_ProtoModID_descriptor_ = stReqEnterTaskLv_descriptor_->enum_type(0);
  stReqEnterTaskLv_ProtoFunID_descriptor_ = stReqEnterTaskLv_descriptor_->enum_type(1);
  stReqDisbandTeam_descriptor_ = file->message_type(180);
  static const int stReqDisbandTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDisbandTeam, charid_),
  };
  stReqDisbandTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDisbandTeam_descriptor_,
      stReqDisbandTeam::default_instance_,
      stReqDisbandTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDisbandTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDisbandTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDisbandTeam));
  stReqDisbandTeam_ProtoModID_descriptor_ = stReqDisbandTeam_descriptor_->enum_type(0);
  stReqDisbandTeam_ProtoFunID_descriptor_ = stReqDisbandTeam_descriptor_->enum_type(1);
  stReqDrawInviteReward_descriptor_ = file->message_type(181);
  static const int stReqDrawInviteReward_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteReward, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteReward, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteReward, account_),
  };
  stReqDrawInviteReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawInviteReward_descriptor_,
      stReqDrawInviteReward::default_instance_,
      stReqDrawInviteReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawInviteReward));
  stReqDrawInviteReward_ProtoModID_descriptor_ = stReqDrawInviteReward_descriptor_->enum_type(0);
  stReqDrawInviteReward_ProtoFunID_descriptor_ = stReqDrawInviteReward_descriptor_->enum_type(1);
  stReqDrawInviteRewardCb_descriptor_ = file->message_type(182);
  static const int stReqDrawInviteRewardCb_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteRewardCb, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteRewardCb, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteRewardCb, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteRewardCb, account_),
  };
  stReqDrawInviteRewardCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawInviteRewardCb_descriptor_,
      stReqDrawInviteRewardCb::default_instance_,
      stReqDrawInviteRewardCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteRewardCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawInviteRewardCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawInviteRewardCb));
  stReqDrawInviteRewardCb_ProtoModID_descriptor_ = stReqDrawInviteRewardCb_descriptor_->enum_type(0);
  stReqDrawInviteRewardCb_ProtoFunID_descriptor_ = stReqDrawInviteRewardCb_descriptor_->enum_type(1);
  stReqDrawUseInviteReward_descriptor_ = file->message_type(183);
  static const int stReqDrawUseInviteReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawUseInviteReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawUseInviteReward, boxid_),
  };
  stReqDrawUseInviteReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDrawUseInviteReward_descriptor_,
      stReqDrawUseInviteReward::default_instance_,
      stReqDrawUseInviteReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawUseInviteReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDrawUseInviteReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDrawUseInviteReward));
  stReqDrawUseInviteReward_ProtoModID_descriptor_ = stReqDrawUseInviteReward_descriptor_->enum_type(0);
  stReqDrawUseInviteReward_ProtoFunID_descriptor_ = stReqDrawUseInviteReward_descriptor_->enum_type(1);
  stRoleInfo_descriptor_ = file->message_type(184);
  static const int stRoleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, normalserverid_),
  };
  stRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRoleInfo_descriptor_,
      stRoleInfo::default_instance_,
      stRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRoleInfo));
  stRoleInfo_ProtoModID_descriptor_ = stRoleInfo_descriptor_->enum_type(0);
  stRoleInfo_ProtoFunID_descriptor_ = stRoleInfo_descriptor_->enum_type(1);
  stHeroLeagueEnterCopyMap_descriptor_ = file->message_type(185);
  static const int stHeroLeagueEnterCopyMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueEnterCopyMap, memberids_),
  };
  stHeroLeagueEnterCopyMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroLeagueEnterCopyMap_descriptor_,
      stHeroLeagueEnterCopyMap::default_instance_,
      stHeroLeagueEnterCopyMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueEnterCopyMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueEnterCopyMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroLeagueEnterCopyMap));
  stHeroLeagueEnterCopyMap_ProtoModID_descriptor_ = stHeroLeagueEnterCopyMap_descriptor_->enum_type(0);
  stHeroLeagueEnterCopyMap_ProtoFunID_descriptor_ = stHeroLeagueEnterCopyMap_descriptor_->enum_type(1);
  stHeroLeaguePkWithRobot_descriptor_ = file->message_type(186);
  static const int stHeroLeaguePkWithRobot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeaguePkWithRobot, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeaguePkWithRobot, robotgroup_),
  };
  stHeroLeaguePkWithRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroLeaguePkWithRobot_descriptor_,
      stHeroLeaguePkWithRobot::default_instance_,
      stHeroLeaguePkWithRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeaguePkWithRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeaguePkWithRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroLeaguePkWithRobot));
  stHeroLeaguePkWithRobot_ProtoModID_descriptor_ = stHeroLeaguePkWithRobot_descriptor_->enum_type(0);
  stHeroLeaguePkWithRobot_ProtoFunID_descriptor_ = stHeroLeaguePkWithRobot_descriptor_->enum_type(1);
  stReqHeroLeagueCheck_descriptor_ = file->message_type(187);
  static const int stReqHeroLeagueCheck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroLeagueCheck, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroLeagueCheck, charid_),
  };
  stReqHeroLeagueCheck_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqHeroLeagueCheck_descriptor_,
      stReqHeroLeagueCheck::default_instance_,
      stReqHeroLeagueCheck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroLeagueCheck, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqHeroLeagueCheck, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqHeroLeagueCheck));
  stReqHeroLeagueCheck_eResult_descriptor_ = stReqHeroLeagueCheck_descriptor_->enum_type(0);
  stReqHeroLeagueCheck_ProtoModID_descriptor_ = stReqHeroLeagueCheck_descriptor_->enum_type(1);
  stReqHeroLeagueCheck_ProtoFunID_descriptor_ = stReqHeroLeagueCheck_descriptor_->enum_type(2);
  stHeroLeagueMatch_descriptor_ = file->message_type(188);
  static const int stHeroLeagueMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueMatch, charid_),
  };
  stHeroLeagueMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroLeagueMatch_descriptor_,
      stHeroLeagueMatch::default_instance_,
      stHeroLeagueMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroLeagueMatch));
  stHeroLeagueMatch_ProtoModID_descriptor_ = stHeroLeagueMatch_descriptor_->enum_type(0);
  stHeroLeagueMatch_ProtoFunID_descriptor_ = stHeroLeagueMatch_descriptor_->enum_type(1);
  stPubRoleInfo_descriptor_ = file->message_type(189);
  static const int stPubRoleInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, pubcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, pubserverindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, winorloss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, photoid_),
  };
  stPubRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPubRoleInfo_descriptor_,
      stPubRoleInfo::default_instance_,
      stPubRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPubRoleInfo));
  stHeroLeagueResult_descriptor_ = file->message_type(190);
  static const int stHeroLeagueResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueResult, user1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueResult, user2_),
  };
  stHeroLeagueResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroLeagueResult_descriptor_,
      stHeroLeagueResult::default_instance_,
      stHeroLeagueResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroLeagueResult));
  stHeroLeagueResult_ProtoModID_descriptor_ = stHeroLeagueResult_descriptor_->enum_type(0);
  stHeroLeagueResult_ProtoFunID_descriptor_ = stHeroLeagueResult_descriptor_->enum_type(1);
  stSynRoleList_descriptor_ = file->message_type(191);
  static const int stSynRoleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleList, tag_),
  };
  stSynRoleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRoleList_descriptor_,
      stSynRoleList::default_instance_,
      stSynRoleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRoleList));
  stSynRoleList_ProtoModID_descriptor_ = stSynRoleList_descriptor_->enum_type(0);
  stSynRoleList_ProtoFunID_descriptor_ = stSynRoleList_descriptor_->enum_type(1);
  stTeam_descriptor_ = file->message_type(192);
  static const int stTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, user1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, user2_),
  };
  stTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTeam_descriptor_,
      stTeam::default_instance_,
      stTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTeam));
  stSynRoleListResult_descriptor_ = file->message_type(193);
  static const int stSynRoleListResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleListResult, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleListResult, charids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleListResult, isfinal_),
  };
  stSynRoleListResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRoleListResult_descriptor_,
      stSynRoleListResult::default_instance_,
      stSynRoleListResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleListResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleListResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRoleListResult));
  stSynRoleListResult_ProtoModID_descriptor_ = stSynRoleListResult_descriptor_->enum_type(0);
  stSynRoleListResult_ProtoFunID_descriptor_ = stSynRoleListResult_descriptor_->enum_type(1);
  stSynChampionInfo_descriptor_ = file->message_type(194);
  static const int stSynChampionInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, photoid_),
  };
  stSynChampionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynChampionInfo_descriptor_,
      stSynChampionInfo::default_instance_,
      stSynChampionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynChampionInfo));
  stReqSynChampionInfo_descriptor_ = file->message_type(195);
  static const int stReqSynChampionInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSynChampionInfo, info_),
  };
  stReqSynChampionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSynChampionInfo_descriptor_,
      stReqSynChampionInfo::default_instance_,
      stReqSynChampionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSynChampionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSynChampionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSynChampionInfo));
  stReqSynChampionInfo_ProtoModID_descriptor_ = stReqSynChampionInfo_descriptor_->enum_type(0);
  stReqSynChampionInfo_ProtoFunID_descriptor_ = stReqSynChampionInfo_descriptor_->enum_type(1);
  stReqWorskip_descriptor_ = file->message_type(196);
  static const int stReqWorskip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWorskip, charid_),
  };
  stReqWorskip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqWorskip_descriptor_,
      stReqWorskip::default_instance_,
      stReqWorskip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWorskip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqWorskip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqWorskip));
  stReqWorskip_ProtoModID_descriptor_ = stReqWorskip_descriptor_->enum_type(0);
  stReqWorskip_ProtoFunID_descriptor_ = stReqWorskip_descriptor_->enum_type(1);
  stWorskipResult_descriptor_ = file->message_type(197);
  static const int stWorskipResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorskipResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorskipResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorskipResult, issameareacode_),
  };
  stWorskipResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWorskipResult_descriptor_,
      stWorskipResult::default_instance_,
      stWorskipResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorskipResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWorskipResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWorskipResult));
  stWorskipResult_eResult_descriptor_ = stWorskipResult_descriptor_->enum_type(0);
  stWorskipResult_ProtoModID_descriptor_ = stWorskipResult_descriptor_->enum_type(1);
  stWorskipResult_ProtoFunID_descriptor_ = stWorskipResult_descriptor_->enum_type(2);
  stReqRedPoint_descriptor_ = file->message_type(198);
  static const int stReqRedPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRedPoint, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRedPoint, pubcharid_),
  };
  stReqRedPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRedPoint_descriptor_,
      stReqRedPoint::default_instance_,
      stReqRedPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRedPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRedPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRedPoint));
  stReqRedPoint_ProtoModID_descriptor_ = stReqRedPoint_descriptor_->enum_type(0);
  stReqRedPoint_ProtoFunID_descriptor_ = stReqRedPoint_descriptor_->enum_type(1);
  stRedPointResult_descriptor_ = file->message_type(199);
  static const int stRedPointResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointResult, isqualified_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointResult, canworship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointResult, charid_),
  };
  stRedPointResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRedPointResult_descriptor_,
      stRedPointResult::default_instance_,
      stRedPointResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRedPointResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRedPointResult));
  stRedPointResult_ProtoModID_descriptor_ = stRedPointResult_descriptor_->enum_type(0);
  stRedPointResult_ProtoFunID_descriptor_ = stRedPointResult_descriptor_->enum_type(1);
  stInterceptResultToGlobal_descriptor_ = file->message_type(200);
  static const int stInterceptResultToGlobal_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptResultToGlobal, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptResultToGlobal, win_),
  };
  stInterceptResultToGlobal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInterceptResultToGlobal_descriptor_,
      stInterceptResultToGlobal::default_instance_,
      stInterceptResultToGlobal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptResultToGlobal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInterceptResultToGlobal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInterceptResultToGlobal));
  stInterceptResultToGlobal_ProtoModID_descriptor_ = stInterceptResultToGlobal_descriptor_->enum_type(0);
  stInterceptResultToGlobal_ProtoFunID_descriptor_ = stInterceptResultToGlobal_descriptor_->enum_type(1);
  stSynMemberInfo_descriptor_ = file->message_type(201);
  static const int stSynMemberInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionwingid_),
  };
  stSynMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMemberInfo_descriptor_,
      stSynMemberInfo::default_instance_,
      stSynMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMemberInfo));
  stRetRoomInfo_descriptor_ = file->message_type(202);
  static const int stRetRoomInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoomInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoomInfo, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoomInfo, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoomInfo, teamid_),
  };
  stRetRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRoomInfo_descriptor_,
      stRetRoomInfo::default_instance_,
      stRetRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRoomInfo));
  stRetRoomInfo_ProtoModID_descriptor_ = stRetRoomInfo_descriptor_->enum_type(0);
  stRetRoomInfo_ProtoFunID_descriptor_ = stRetRoomInfo_descriptor_->enum_type(1);
  stRetAddTeamMember_descriptor_ = file->message_type(203);
  static const int stRetAddTeamMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddTeamMember, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddTeamMember, exceptid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddTeamMember, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddTeamMember, memberinfo_),
  };
  stRetAddTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetAddTeamMember_descriptor_,
      stRetAddTeamMember::default_instance_,
      stRetAddTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetAddTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetAddTeamMember));
  stRetAddTeamMember_ProtoModID_descriptor_ = stRetAddTeamMember_descriptor_->enum_type(0);
  stRetAddTeamMember_ProtoFunID_descriptor_ = stRetAddTeamMember_descriptor_->enum_type(1);
  MarryObjInfo_descriptor_ = file->message_type(204);
  static const int MarryObjInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionwingid_),
  };
  MarryObjInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryObjInfo_descriptor_,
      MarryObjInfo::default_instance_,
      MarryObjInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryObjInfo));
  stReqPropose_descriptor_ = file->message_type(205);
  static const int stReqPropose_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPropose, id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPropose, id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPropose, info_),
  };
  stReqPropose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPropose_descriptor_,
      stReqPropose::default_instance_,
      stReqPropose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPropose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPropose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPropose));
  stReqPropose_ProtoModID_descriptor_ = stReqPropose_descriptor_->enum_type(0);
  stReqPropose_ProtoFunID_descriptor_ = stReqPropose_descriptor_->enum_type(1);
  stReqAgreeMarry_descriptor_ = file->message_type(206);
  static const int stReqAgreeMarry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeMarry, id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeMarry, id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeMarry, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeMarry, info_),
  };
  stReqAgreeMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAgreeMarry_descriptor_,
      stReqAgreeMarry::default_instance_,
      stReqAgreeMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAgreeMarry));
  stReqAgreeMarry_ProtoModID_descriptor_ = stReqAgreeMarry_descriptor_->enum_type(0);
  stReqAgreeMarry_ProtoFunID_descriptor_ = stReqAgreeMarry_descriptor_->enum_type(1);
  stReqQuitWedding_descriptor_ = file->message_type(207);
  static const int stReqQuitWedding_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQuitWedding, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQuitWedding, levelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQuitWedding, id_),
  };
  stReqQuitWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqQuitWedding_descriptor_,
      stReqQuitWedding::default_instance_,
      stReqQuitWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQuitWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqQuitWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqQuitWedding));
  stReqQuitWedding_ProtoModID_descriptor_ = stReqQuitWedding_descriptor_->enum_type(0);
  stReqQuitWedding_ProtoFunID_descriptor_ = stReqQuitWedding_descriptor_->enum_type(1);
  stReqReEnterWedding_descriptor_ = file->message_type(208);
  static const int stReqReEnterWedding_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReEnterWedding, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReEnterWedding, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReEnterWedding, roomid_),
  };
  stReqReEnterWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqReEnterWedding_descriptor_,
      stReqReEnterWedding::default_instance_,
      stReqReEnterWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReEnterWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReEnterWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqReEnterWedding));
  stReqReEnterWedding_ProtoModID_descriptor_ = stReqReEnterWedding_descriptor_->enum_type(0);
  stReqReEnterWedding_ProtoFunID_descriptor_ = stReqReEnterWedding_descriptor_->enum_type(1);
  stReqBuyFireWork_descriptor_ = file->message_type(209);
  static const int stReqBuyFireWork_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyFireWork, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyFireWork, id_),
  };
  stReqBuyFireWork_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBuyFireWork_descriptor_,
      stReqBuyFireWork::default_instance_,
      stReqBuyFireWork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyFireWork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBuyFireWork, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBuyFireWork));
  stReqBuyFireWork_ProtoModID_descriptor_ = stReqBuyFireWork_descriptor_->enum_type(0);
  stReqBuyFireWork_ProtoFunID_descriptor_ = stReqBuyFireWork_descriptor_->enum_type(1);
  stReqAgreeInvite_descriptor_ = file->message_type(210);
  static const int stReqAgreeInvite_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeInvite, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeInvite, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeInvite, id_),
  };
  stReqAgreeInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAgreeInvite_descriptor_,
      stReqAgreeInvite::default_instance_,
      stReqAgreeInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAgreeInvite));
  stReqAgreeInvite_ProtoModID_descriptor_ = stReqAgreeInvite_descriptor_->enum_type(0);
  stReqAgreeInvite_ProtoFunID_descriptor_ = stReqAgreeInvite_descriptor_->enum_type(1);
  stReqTakeCandy_descriptor_ = file->message_type(211);
  static const int stReqTakeCandy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqTakeCandy, charid_),
  };
  stReqTakeCandy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqTakeCandy_descriptor_,
      stReqTakeCandy::default_instance_,
      stReqTakeCandy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqTakeCandy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqTakeCandy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqTakeCandy));
  stReqTakeCandy_ProtoModID_descriptor_ = stReqTakeCandy_descriptor_->enum_type(0);
  stReqTakeCandy_ProtoFunID_descriptor_ = stReqTakeCandy_descriptor_->enum_type(1);
  stNotifyCoupleMarry_descriptor_ = file->message_type(212);
  static const int stNotifyCoupleMarry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarry, husband_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarry, wife_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarry, husname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarry, wifename_),
  };
  stNotifyCoupleMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyCoupleMarry_descriptor_,
      stNotifyCoupleMarry::default_instance_,
      stNotifyCoupleMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyCoupleMarry));
  stNotifyCoupleMarry_ProtoModID_descriptor_ = stNotifyCoupleMarry_descriptor_->enum_type(0);
  stNotifyCoupleMarry_ProtoFunID_descriptor_ = stNotifyCoupleMarry_descriptor_->enum_type(1);
  stSendWeedingRing_descriptor_ = file->message_type(213);
  static const int stSendWeedingRing_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendWeedingRing, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendWeedingRing, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendWeedingRing, id_),
  };
  stSendWeedingRing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendWeedingRing_descriptor_,
      stSendWeedingRing::default_instance_,
      stSendWeedingRing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendWeedingRing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendWeedingRing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendWeedingRing));
  stSendWeedingRing_ProtoModID_descriptor_ = stSendWeedingRing_descriptor_->enum_type(0);
  stSendWeedingRing_ProtoFunID_descriptor_ = stSendWeedingRing_descriptor_->enum_type(1);
  stMarryInfoCb_descriptor_ = file->message_type(214);
  static const int stMarryInfoCb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMarryInfoCb, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMarryInfoCb, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMarryInfoCb, id_),
  };
  stMarryInfoCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMarryInfoCb_descriptor_,
      stMarryInfoCb::default_instance_,
      stMarryInfoCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMarryInfoCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMarryInfoCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMarryInfoCb));
  stMarryInfoCb_ProtoModID_descriptor_ = stMarryInfoCb_descriptor_->enum_type(0);
  stMarryInfoCb_ProtoFunID_descriptor_ = stMarryInfoCb_descriptor_->enum_type(1);
  stUseFireWork_descriptor_ = file->message_type(215);
  static const int stUseFireWork_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseFireWork, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseFireWork, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseFireWork, id_),
  };
  stUseFireWork_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUseFireWork_descriptor_,
      stUseFireWork::default_instance_,
      stUseFireWork_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseFireWork, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseFireWork, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUseFireWork));
  stUseFireWork_ProtoModID_descriptor_ = stUseFireWork_descriptor_->enum_type(0);
  stUseFireWork_ProtoFunID_descriptor_ = stUseFireWork_descriptor_->enum_type(1);
  stRetMarryInfoToCouple_descriptor_ = file->message_type(216);
  static const int stRetMarryInfoToCouple_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMarryInfoToCouple, husband_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMarryInfoToCouple, wife_),
  };
  stRetMarryInfoToCouple_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetMarryInfoToCouple_descriptor_,
      stRetMarryInfoToCouple::default_instance_,
      stRetMarryInfoToCouple_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMarryInfoToCouple, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetMarryInfoToCouple, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetMarryInfoToCouple));
  stRetMarryInfoToCouple_ProtoModID_descriptor_ = stRetMarryInfoToCouple_descriptor_->enum_type(0);
  stRetMarryInfoToCouple_ProtoFunID_descriptor_ = stRetMarryInfoToCouple_descriptor_->enum_type(1);
  stNotifyCoupleMarryCb_descriptor_ = file->message_type(217);
  static const int stNotifyCoupleMarryCb_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarryCb, husband_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarryCb, wife_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarryCb, roomid_),
  };
  stNotifyCoupleMarryCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyCoupleMarryCb_descriptor_,
      stNotifyCoupleMarryCb::default_instance_,
      stNotifyCoupleMarryCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarryCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCoupleMarryCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyCoupleMarryCb));
  stNotifyCoupleMarryCb_ProtoModID_descriptor_ = stNotifyCoupleMarryCb_descriptor_->enum_type(0);
  stNotifyCoupleMarryCb_ProtoFunID_descriptor_ = stNotifyCoupleMarryCb_descriptor_->enum_type(1);
  stRetForceDivorce_descriptor_ = file->message_type(218);
  static const int stRetForceDivorce_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetForceDivorce, couplea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetForceDivorce, coupleb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetForceDivorce, coupleonline_),
  };
  stRetForceDivorce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetForceDivorce_descriptor_,
      stRetForceDivorce::default_instance_,
      stRetForceDivorce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetForceDivorce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetForceDivorce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetForceDivorce));
  stRetForceDivorce_ProtoModID_descriptor_ = stRetForceDivorce_descriptor_->enum_type(0);
  stRetForceDivorce_ProtoFunID_descriptor_ = stRetForceDivorce_descriptor_->enum_type(1);
  stRetForceDivorceCb_descriptor_ = file->message_type(219);
  static const int stRetForceDivorceCb_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetForceDivorceCb, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetForceDivorceCb, coupleid_),
  };
  stRetForceDivorceCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetForceDivorceCb_descriptor_,
      stRetForceDivorceCb::default_instance_,
      stRetForceDivorceCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetForceDivorceCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetForceDivorceCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetForceDivorceCb));
  stRetForceDivorceCb_ProtoModID_descriptor_ = stRetForceDivorceCb_descriptor_->enum_type(0);
  stRetForceDivorceCb_ProtoFunID_descriptor_ = stRetForceDivorceCb_descriptor_->enum_type(1);
  stRetRejectDivorce_descriptor_ = file->message_type(220);
  static const int stRetRejectDivorce_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRejectDivorce, coupleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRejectDivorce, time_),
  };
  stRetRejectDivorce_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetRejectDivorce_descriptor_,
      stRetRejectDivorce::default_instance_,
      stRetRejectDivorce_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRejectDivorce, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetRejectDivorce, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetRejectDivorce));
  stRetRejectDivorce_ProtoModID_descriptor_ = stRetRejectDivorce_descriptor_->enum_type(0);
  stRetRejectDivorce_ProtoFunID_descriptor_ = stRetRejectDivorce_descriptor_->enum_type(1);
  stRetDelUserOnlineMarryInfo_descriptor_ = file->message_type(221);
  static const int stRetDelUserOnlineMarryInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDelUserOnlineMarryInfo, id_),
  };
  stRetDelUserOnlineMarryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDelUserOnlineMarryInfo_descriptor_,
      stRetDelUserOnlineMarryInfo::default_instance_,
      stRetDelUserOnlineMarryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDelUserOnlineMarryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDelUserOnlineMarryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDelUserOnlineMarryInfo));
  stRetDelUserOnlineMarryInfo_ProtoModID_descriptor_ = stRetDelUserOnlineMarryInfo_descriptor_->enum_type(0);
  stRetDelUserOnlineMarryInfo_ProtoFunID_descriptor_ = stRetDelUserOnlineMarryInfo_descriptor_->enum_type(1);
  stReqSynGuildBlackMarketLv_descriptor_ = file->message_type(222);
  static const int stReqSynGuildBlackMarketLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSynGuildBlackMarketLv, charid_),
  };
  stReqSynGuildBlackMarketLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSynGuildBlackMarketLv_descriptor_,
      stReqSynGuildBlackMarketLv::default_instance_,
      stReqSynGuildBlackMarketLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSynGuildBlackMarketLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSynGuildBlackMarketLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSynGuildBlackMarketLv));
  stReqSynGuildBlackMarketLv_ProtoModID_descriptor_ = stReqSynGuildBlackMarketLv_descriptor_->enum_type(0);
  stReqSynGuildBlackMarketLv_ProtoFunID_descriptor_ = stReqSynGuildBlackMarketLv_descriptor_->enum_type(1);
  stSynGuildBlackMarketLvResult_descriptor_ = file->message_type(223);
  static const int stSynGuildBlackMarketLvResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildBlackMarketLvResult, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildBlackMarketLvResult, charid_),
  };
  stSynGuildBlackMarketLvResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynGuildBlackMarketLvResult_descriptor_,
      stSynGuildBlackMarketLvResult::default_instance_,
      stSynGuildBlackMarketLvResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildBlackMarketLvResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildBlackMarketLvResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynGuildBlackMarketLvResult));
  stSynGuildBlackMarketLvResult_ProtoModID_descriptor_ = stSynGuildBlackMarketLvResult_descriptor_->enum_type(0);
  stSynGuildBlackMarketLvResult_ProtoFunID_descriptor_ = stSynGuildBlackMarketLvResult_descriptor_->enum_type(1);
  stGloryUserPart_descriptor_ = file->message_type(224);
  static const int stGloryUserPart_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, wingbreaklv_),
  };
  stGloryUserPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGloryUserPart_descriptor_,
      stGloryUserPart::default_instance_,
      stGloryUserPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGloryUserPart));
  stGloryUserDetail_descriptor_ = file->message_type(225);
  static const int stGloryUserDetail_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, evenkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, totalkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, gloryval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, gloryactiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, prostatednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, prostatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, normalid_),
  };
  stGloryUserDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGloryUserDetail_descriptor_,
      stGloryUserDetail::default_instance_,
      stGloryUserDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGloryUserDetail));
  stGloryUser_descriptor_ = file->message_type(226);
  static const int stGloryUser_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, evenkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, totalkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, gloryval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, gloryactiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, prostatednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, prostatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, normalid_),
  };
  stGloryUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGloryUser_descriptor_,
      stGloryUser::default_instance_,
      stGloryUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGloryUser));
  stEnterResBattle_descriptor_ = file->message_type(227);
  static const int stEnterResBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, copymaplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, self_),
  };
  stEnterResBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterResBattle_descriptor_,
      stEnterResBattle::default_instance_,
      stEnterResBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterResBattle));
  stEnterResBattle_ProtoModID_descriptor_ = stEnterResBattle_descriptor_->enum_type(0);
  stEnterResBattle_ProtoFunID_descriptor_ = stEnterResBattle_descriptor_->enum_type(1);
  stBroadResBattleInvite_descriptor_ = file->message_type(228);
  static const int stBroadResBattleInvite_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, instancelvl_),
  };
  stBroadResBattleInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadResBattleInvite_descriptor_,
      stBroadResBattleInvite::default_instance_,
      stBroadResBattleInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadResBattleInvite));
  stBroadResBattleInvite_ProtoModID_descriptor_ = stBroadResBattleInvite_descriptor_->enum_type(0);
  stBroadResBattleInvite_ProtoFunID_descriptor_ = stBroadResBattleInvite_descriptor_->enum_type(1);
  stPubOffline_descriptor_ = file->message_type(229);
  static const int stPubOffline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubOffline, msg_),
  };
  stPubOffline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPubOffline_descriptor_,
      stPubOffline::default_instance_,
      stPubOffline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubOffline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubOffline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPubOffline));
  stPubOffline_ProtoModID_descriptor_ = stPubOffline_descriptor_->enum_type(0);
  stPubOffline_ProtoFunID_descriptor_ = stPubOffline_descriptor_->enum_type(1);
  stDiscoverConsume_descriptor_ = file->message_type(230);
  static const int stDiscoverConsume_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDiscoverConsume, charid_),
  };
  stDiscoverConsume_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDiscoverConsume_descriptor_,
      stDiscoverConsume::default_instance_,
      stDiscoverConsume_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDiscoverConsume, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDiscoverConsume, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDiscoverConsume));
  stDiscoverConsume_ProtoModID_descriptor_ = stDiscoverConsume_descriptor_->enum_type(0);
  stDiscoverConsume_ProtoFunID_descriptor_ = stDiscoverConsume_descriptor_->enum_type(1);
  stSynCoupleInfo_descriptor_ = file->message_type(231);
  static const int stSynCoupleInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCoupleInfo, coupleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCoupleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCoupleInfo, mynewname_),
  };
  stSynCoupleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynCoupleInfo_descriptor_,
      stSynCoupleInfo::default_instance_,
      stSynCoupleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCoupleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynCoupleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynCoupleInfo));
  stSynCoupleInfo_ProtoModID_descriptor_ = stSynCoupleInfo_descriptor_->enum_type(0);
  stSynCoupleInfo_ProtoFunID_descriptor_ = stSynCoupleInfo_descriptor_->enum_type(1);
  stSynResBattleUserData_descriptor_ = file->message_type(232);
  static const int stSynResBattleUserData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleUserData, user_),
  };
  stSynResBattleUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynResBattleUserData_descriptor_,
      stSynResBattleUserData::default_instance_,
      stSynResBattleUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynResBattleUserData));
  stSynResBattleUserData_ProtoModID_descriptor_ = stSynResBattleUserData_descriptor_->enum_type(0);
  stSynResBattleUserData_ProtoFunID_descriptor_ = stSynResBattleUserData_descriptor_->enum_type(1);
  stSynResBattleTop50_descriptor_ = file->message_type(233);
  static const int stSynResBattleTop50_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleTop50, detail_),
  };
  stSynResBattleTop50_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynResBattleTop50_descriptor_,
      stSynResBattleTop50::default_instance_,
      stSynResBattleTop50_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleTop50, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleTop50, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynResBattleTop50));
  stSynResBattleTop50_ProtoModID_descriptor_ = stSynResBattleTop50_descriptor_->enum_type(0);
  stSynResBattleTop50_ProtoFunID_descriptor_ = stSynResBattleTop50_descriptor_->enum_type(1);
  stSynResBattleKing_descriptor_ = file->message_type(234);
  static const int stSynResBattleKing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleKing, clear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleKing, king_),
  };
  stSynResBattleKing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynResBattleKing_descriptor_,
      stSynResBattleKing::default_instance_,
      stSynResBattleKing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleKing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleKing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynResBattleKing));
  stSynResBattleKing_ProtoModID_descriptor_ = stSynResBattleKing_descriptor_->enum_type(0);
  stSynResBattleKing_ProtoFunID_descriptor_ = stSynResBattleKing_descriptor_->enum_type(1);
  stReplyInviteResBattle_descriptor_ = file->message_type(235);
  static const int stReplyInviteResBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, inviteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, self_),
  };
  stReplyInviteResBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplyInviteResBattle_descriptor_,
      stReplyInviteResBattle::default_instance_,
      stReplyInviteResBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplyInviteResBattle));
  stReplyInviteResBattle_ProtoModID_descriptor_ = stReplyInviteResBattle_descriptor_->enum_type(0);
  stReplyInviteResBattle_ProtoFunID_descriptor_ = stReplyInviteResBattle_descriptor_->enum_type(1);
  stSynGloryKingTitle_descriptor_ = file->message_type(236);
  static const int stSynGloryKingTitle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGloryKingTitle, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGloryKingTitle, expiretime_),
  };
  stSynGloryKingTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynGloryKingTitle_descriptor_,
      stSynGloryKingTitle::default_instance_,
      stSynGloryKingTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGloryKingTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGloryKingTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynGloryKingTitle));
  stSynGloryKingTitle_ProtoModID_descriptor_ = stSynGloryKingTitle_descriptor_->enum_type(0);
  stSynGloryKingTitle_ProtoFunID_descriptor_ = stSynGloryKingTitle_descriptor_->enum_type(1);
  stPubOnline_descriptor_ = file->message_type(237);
  static const int stPubOnline_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubOnline, msg_),
  };
  stPubOnline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPubOnline_descriptor_,
      stPubOnline::default_instance_,
      stPubOnline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubOnline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubOnline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPubOnline));
  stPubOnline_ProtoModID_descriptor_ = stPubOnline_descriptor_->enum_type(0);
  stPubOnline_ProtoFunID_descriptor_ = stPubOnline_descriptor_->enum_type(1);
  stResBattleSend2Pub_descriptor_ = file->message_type(238);
  static const int stResBattleSend2Pub_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleSend2Pub, king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleSend2Pub, detail_),
  };
  stResBattleSend2Pub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResBattleSend2Pub_descriptor_,
      stResBattleSend2Pub::default_instance_,
      stResBattleSend2Pub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleSend2Pub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleSend2Pub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResBattleSend2Pub));
  stResBattleSend2Pub_ProtoModID_descriptor_ = stResBattleSend2Pub_descriptor_->enum_type(0);
  stResBattleSend2Pub_ProtoFunID_descriptor_ = stResBattleSend2Pub_descriptor_->enum_type(1);
  stServerParamItem_descriptor_ = file->message_type(239);
  static const int stServerParamItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerParamItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerParamItem, value_),
  };
  stServerParamItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stServerParamItem_descriptor_,
      stServerParamItem::default_instance_,
      stServerParamItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerParamItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerParamItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stServerParamItem));
  stServerParamSend2Game_descriptor_ = file->message_type(240);
  static const int stServerParamSend2Game_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerParamSend2Game, params_),
  };
  stServerParamSend2Game_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stServerParamSend2Game_descriptor_,
      stServerParamSend2Game::default_instance_,
      stServerParamSend2Game_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerParamSend2Game, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stServerParamSend2Game, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stServerParamSend2Game));
  stServerParamSend2Game_ProtoModID_descriptor_ = stServerParamSend2Game_descriptor_->enum_type(0);
  stServerParamSend2Game_ProtoFunID_descriptor_ = stServerParamSend2Game_descriptor_->enum_type(1);
  stSynUserPhotoID_descriptor_ = file->message_type(241);
  static const int stSynUserPhotoID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserPhotoID, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserPhotoID, photoid_),
  };
  stSynUserPhotoID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynUserPhotoID_descriptor_,
      stSynUserPhotoID::default_instance_,
      stSynUserPhotoID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserPhotoID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynUserPhotoID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynUserPhotoID));
  stSynUserPhotoID_ProtoModID_descriptor_ = stSynUserPhotoID_descriptor_->enum_type(0);
  stSynUserPhotoID_ProtoFunID_descriptor_ = stSynUserPhotoID_descriptor_->enum_type(1);
  stUseLvlBox_descriptor_ = file->message_type(242);
  static const int stUseLvlBox_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBox, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBox, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBox, instanceid_),
  };
  stUseLvlBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUseLvlBox_descriptor_,
      stUseLvlBox::default_instance_,
      stUseLvlBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUseLvlBox));
  stUseLvlBox_ProtoModID_descriptor_ = stUseLvlBox_descriptor_->enum_type(0);
  stUseLvlBox_ProtoFunID_descriptor_ = stUseLvlBox_descriptor_->enum_type(1);
  stUseLvlBoxRes_descriptor_ = file->message_type(243);
  static const int stUseLvlBoxRes_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBoxRes, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBoxRes, bagtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBoxRes, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBoxRes, maxlvl_),
  };
  stUseLvlBoxRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUseLvlBoxRes_descriptor_,
      stUseLvlBoxRes::default_instance_,
      stUseLvlBoxRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBoxRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseLvlBoxRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUseLvlBoxRes));
  stUseLvlBoxRes_ProtoModID_descriptor_ = stUseLvlBoxRes_descriptor_->enum_type(0);
  stUseLvlBoxRes_ProtoFunID_descriptor_ = stUseLvlBoxRes_descriptor_->enum_type(1);
  stRechangeStatistics_descriptor_ = file->message_type(244);
  static const int stRechangeStatistics_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechangeStatistics, obtaindiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechangeStatistics, givediamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechangeStatistics, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechangeStatistics, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechangeStatistics, money_),
  };
  stRechangeStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRechangeStatistics_descriptor_,
      stRechangeStatistics::default_instance_,
      stRechangeStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechangeStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechangeStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRechangeStatistics));
  stRechangeStatistics_ProtoModID_descriptor_ = stRechangeStatistics_descriptor_->enum_type(0);
  stRechangeStatistics_ProtoFunID_descriptor_ = stRechangeStatistics_descriptor_->enum_type(1);
  stNftItem_descriptor_ = file->message_type(245);
  static const int stNftItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNftItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNftItem, itemcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNftItem, itemname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNftItem, url_),
  };
  stNftItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNftItem_descriptor_,
      stNftItem::default_instance_,
      stNftItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNftItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNftItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNftItem));
  stGlobal2GameQueryUserNft_descriptor_ = file->message_type(246);
  static const int stGlobal2GameQueryUserNft_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2GameQueryUserNft, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2GameQueryUserNft, charid_),
  };
  stGlobal2GameQueryUserNft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGlobal2GameQueryUserNft_descriptor_,
      stGlobal2GameQueryUserNft::default_instance_,
      stGlobal2GameQueryUserNft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2GameQueryUserNft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2GameQueryUserNft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGlobal2GameQueryUserNft));
  stGlobal2GameQueryUserNft_ProtoModID_descriptor_ = stGlobal2GameQueryUserNft_descriptor_->enum_type(0);
  stGlobal2GameQueryUserNft_ProtoFunID_descriptor_ = stGlobal2GameQueryUserNft_descriptor_->enum_type(1);
  stGame2GlobalQueryUserNftResult_descriptor_ = file->message_type(247);
  static const int stGame2GlobalQueryUserNftResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalQueryUserNftResult, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalQueryUserNftResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalQueryUserNftResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalQueryUserNftResult, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalQueryUserNftResult, vip_),
  };
  stGame2GlobalQueryUserNftResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGame2GlobalQueryUserNftResult_descriptor_,
      stGame2GlobalQueryUserNftResult::default_instance_,
      stGame2GlobalQueryUserNftResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalQueryUserNftResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalQueryUserNftResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGame2GlobalQueryUserNftResult));
  stGame2GlobalQueryUserNftResult_ProtoModID_descriptor_ = stGame2GlobalQueryUserNftResult_descriptor_->enum_type(0);
  stGame2GlobalQueryUserNftResult_ProtoFunID_descriptor_ = stGame2GlobalQueryUserNftResult_descriptor_->enum_type(1);
  stGlobal2GameChangeNftItem_descriptor_ = file->message_type(248);
  static const int stGlobal2GameChangeNftItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2GameChangeNftItem, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2GameChangeNftItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2GameChangeNftItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2GameChangeNftItem, count_),
  };
  stGlobal2GameChangeNftItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGlobal2GameChangeNftItem_descriptor_,
      stGlobal2GameChangeNftItem::default_instance_,
      stGlobal2GameChangeNftItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2GameChangeNftItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2GameChangeNftItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGlobal2GameChangeNftItem));
  stGlobal2GameChangeNftItem_ProtoModID_descriptor_ = stGlobal2GameChangeNftItem_descriptor_->enum_type(0);
  stGlobal2GameChangeNftItem_ProtoFunID_descriptor_ = stGlobal2GameChangeNftItem_descriptor_->enum_type(1);
  stGame2GlobalChangeNftItemResult_descriptor_ = file->message_type(249);
  static const int stGame2GlobalChangeNftItemResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalChangeNftItemResult, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalChangeNftItemResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalChangeNftItemResult, result_),
  };
  stGame2GlobalChangeNftItemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGame2GlobalChangeNftItemResult_descriptor_,
      stGame2GlobalChangeNftItemResult::default_instance_,
      stGame2GlobalChangeNftItemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalChangeNftItemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalChangeNftItemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGame2GlobalChangeNftItemResult));
  stGame2GlobalChangeNftItemResult_ProtoModID_descriptor_ = stGame2GlobalChangeNftItemResult_descriptor_->enum_type(0);
  stGame2GlobalChangeNftItemResult_ProtoFunID_descriptor_ = stGame2GlobalChangeNftItemResult_descriptor_->enum_type(1);
  stGame2GlobalNftVipGift_descriptor_ = file->message_type(250);
  static const int stGame2GlobalNftVipGift_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalNftVipGift, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalNftVipGift, attaches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalNftVipGift, viplv_),
  };
  stGame2GlobalNftVipGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGame2GlobalNftVipGift_descriptor_,
      stGame2GlobalNftVipGift::default_instance_,
      stGame2GlobalNftVipGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalNftVipGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGame2GlobalNftVipGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGame2GlobalNftVipGift));
  stGame2GlobalNftVipGift_ProtoModID_descriptor_ = stGame2GlobalNftVipGift_descriptor_->enum_type(0);
  stGame2GlobalNftVipGift_ProtoFunID_descriptor_ = stGame2GlobalNftVipGift_descriptor_->enum_type(1);
  stRetNftOfflineUserData_descriptor_ = file->message_type(251);
  static const int stRetNftOfflineUserData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetNftOfflineUserData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetNftOfflineUserData, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetNftOfflineUserData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetNftOfflineUserData, webconnid_),
  };
  stRetNftOfflineUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetNftOfflineUserData_descriptor_,
      stRetNftOfflineUserData::default_instance_,
      stRetNftOfflineUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetNftOfflineUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetNftOfflineUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetNftOfflineUserData));
  stRetNftOfflineUserData_ProtoModID_descriptor_ = stRetNftOfflineUserData_descriptor_->enum_type(0);
  stRetNftOfflineUserData_ProtoFunID_descriptor_ = stRetNftOfflineUserData_descriptor_->enum_type(1);
  stRetChangeNftOfflineUserData_descriptor_ = file->message_type(252);
  static const int stRetChangeNftOfflineUserData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChangeNftOfflineUserData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChangeNftOfflineUserData, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChangeNftOfflineUserData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChangeNftOfflineUserData, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChangeNftOfflineUserData, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChangeNftOfflineUserData, count_),
  };
  stRetChangeNftOfflineUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetChangeNftOfflineUserData_descriptor_,
      stRetChangeNftOfflineUserData::default_instance_,
      stRetChangeNftOfflineUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChangeNftOfflineUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetChangeNftOfflineUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetChangeNftOfflineUserData));
  stRetChangeNftOfflineUserData_ProtoModID_descriptor_ = stRetChangeNftOfflineUserData_descriptor_->enum_type(0);
  stRetChangeNftOfflineUserData_ProtoFunID_descriptor_ = stRetChangeNftOfflineUserData_descriptor_->enum_type(1);
  stSendUserLog_descriptor_ = file->message_type(253);
  static const int stSendUserLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendUserLog, logparam_),
  };
  stSendUserLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendUserLog_descriptor_,
      stSendUserLog::default_instance_,
      stSendUserLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendUserLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendUserLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendUserLog));
  stSendUserLog_ProtoModID_descriptor_ = stSendUserLog_descriptor_->enum_type(0);
  stSendUserLog_ProtoFunID_descriptor_ = stSendUserLog_descriptor_->enum_type(1);
  stReqKillUserOut_descriptor_ = file->message_type(254);
  static const int stReqKillUserOut_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqKillUserOut, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqKillUserOut, webconnid_),
  };
  stReqKillUserOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqKillUserOut_descriptor_,
      stReqKillUserOut::default_instance_,
      stReqKillUserOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqKillUserOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqKillUserOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqKillUserOut));
  stReqKillUserOut_ProtoModID_descriptor_ = stReqKillUserOut_descriptor_->enum_type(0);
  stReqKillUserOut_ProtoFunID_descriptor_ = stReqKillUserOut_descriptor_->enum_type(1);
  stKillUserOutResult_descriptor_ = file->message_type(255);
  static const int stKillUserOutResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillUserOutResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillUserOutResult, webconnid_),
  };
  stKillUserOutResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stKillUserOutResult_descriptor_,
      stKillUserOutResult::default_instance_,
      stKillUserOutResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillUserOutResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillUserOutResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stKillUserOutResult));
  stKillUserOutResult_ProtoModID_descriptor_ = stKillUserOutResult_descriptor_->enum_type(0);
  stKillUserOutResult_ProtoFunID_descriptor_ = stKillUserOutResult_descriptor_->enum_type(1);
  stReqSetUserGMType_descriptor_ = file->message_type(256);
  static const int stReqSetUserGMType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSetUserGMType, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSetUserGMType, gmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSetUserGMType, webconnid_),
  };
  stReqSetUserGMType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSetUserGMType_descriptor_,
      stReqSetUserGMType::default_instance_,
      stReqSetUserGMType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSetUserGMType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSetUserGMType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSetUserGMType));
  stReqSetUserGMType_ProtoModID_descriptor_ = stReqSetUserGMType_descriptor_->enum_type(0);
  stReqSetUserGMType_ProtoFunID_descriptor_ = stReqSetUserGMType_descriptor_->enum_type(1);
  stSetUserGMTypeResult_descriptor_ = file->message_type(257);
  static const int stSetUserGMTypeResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetUserGMTypeResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetUserGMTypeResult, webconnid_),
  };
  stSetUserGMTypeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSetUserGMTypeResult_descriptor_,
      stSetUserGMTypeResult::default_instance_,
      stSetUserGMTypeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetUserGMTypeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetUserGMTypeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSetUserGMTypeResult));
  stSetUserGMTypeResult_ProtoModID_descriptor_ = stSetUserGMTypeResult_descriptor_->enum_type(0);
  stSetUserGMTypeResult_ProtoFunID_descriptor_ = stSetUserGMTypeResult_descriptor_->enum_type(1);
  stReqBanUser_descriptor_ = file->message_type(258);
  static const int stReqBanUser_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBanUser, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBanUser, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBanUser, ban_),
  };
  stReqBanUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBanUser_descriptor_,
      stReqBanUser::default_instance_,
      stReqBanUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBanUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBanUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBanUser));
  stReqBanUser_ProtoModID_descriptor_ = stReqBanUser_descriptor_->enum_type(0);
  stReqBanUser_ProtoFunID_descriptor_ = stReqBanUser_descriptor_->enum_type(1);
  stBanUserResult_descriptor_ = file->message_type(259);
  static const int stBanUserResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBanUserResult, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBanUserResult, result_),
  };
  stBanUserResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBanUserResult_descriptor_,
      stBanUserResult::default_instance_,
      stBanUserResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBanUserResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBanUserResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBanUserResult));
  stBanUserResult_ProtoModID_descriptor_ = stBanUserResult_descriptor_->enum_type(0);
  stBanUserResult_ProtoFunID_descriptor_ = stBanUserResult_descriptor_->enum_type(1);
  stSendMailAttach_descriptor_ = file->message_type(260);
  static const int stSendMailAttach_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMailAttach, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMailAttach, num_),
  };
  stSendMailAttach_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendMailAttach_descriptor_,
      stSendMailAttach::default_instance_,
      stSendMailAttach_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMailAttach, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMailAttach, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendMailAttach));
  stSendMail2User_descriptor_ = file->message_type(261);
  static const int stSendMail2User_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2User, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2User, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2User, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2User, attaches_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2User, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2User, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2User, ball_),
  };
  stSendMail2User_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendMail2User_descriptor_,
      stSendMail2User::default_instance_,
      stSendMail2User_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2User, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2User, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendMail2User));
  stSendMail2User_ProtoModID_descriptor_ = stSendMail2User_descriptor_->enum_type(0);
  stSendMail2User_ProtoFunID_descriptor_ = stSendMail2User_descriptor_->enum_type(1);
  stSendMail2UserResult_descriptor_ = file->message_type(262);
  static const int stSendMail2UserResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2UserResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2UserResult, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2UserResult, tag_),
  };
  stSendMail2UserResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendMail2UserResult_descriptor_,
      stSendMail2UserResult::default_instance_,
      stSendMail2UserResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2UserResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMail2UserResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendMail2UserResult));
  stSendMail2UserResult_ProtoModID_descriptor_ = stSendMail2UserResult_descriptor_->enum_type(0);
  stSendMail2UserResult_ProtoFunID_descriptor_ = stSendMail2UserResult_descriptor_->enum_type(1);
  stWebMotifyUserInfo_descriptor_ = file->message_type(263);
  static const int stWebMotifyUserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfo, newbieguideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfo, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfo, goldcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfo, vippoint_),
  };
  stWebMotifyUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWebMotifyUserInfo_descriptor_,
      stWebMotifyUserInfo::default_instance_,
      stWebMotifyUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWebMotifyUserInfo));
  stWebMotifyUserInfo_ProtoModID_descriptor_ = stWebMotifyUserInfo_descriptor_->enum_type(0);
  stWebMotifyUserInfo_ProtoFunID_descriptor_ = stWebMotifyUserInfo_descriptor_->enum_type(1);
  stWebMotifyUserInfoRet_descriptor_ = file->message_type(264);
  static const int stWebMotifyUserInfoRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfoRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfoRet, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfoRet, result_),
  };
  stWebMotifyUserInfoRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWebMotifyUserInfoRet_descriptor_,
      stWebMotifyUserInfoRet::default_instance_,
      stWebMotifyUserInfoRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfoRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebMotifyUserInfoRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWebMotifyUserInfoRet));
  stWebMotifyUserInfoRet_ProtoModID_descriptor_ = stWebMotifyUserInfoRet_descriptor_->enum_type(0);
  stWebMotifyUserInfoRet_ProtoFunID_descriptor_ = stWebMotifyUserInfoRet_descriptor_->enum_type(1);
  stAddOrUpdateNotice_descriptor_ = file->message_type(265);
  static const int stAddOrUpdateNotice_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddOrUpdateNotice, noticeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddOrUpdateNotice, interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddOrUpdateNotice, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddOrUpdateNotice, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddOrUpdateNotice, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddOrUpdateNotice, noticeposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddOrUpdateNotice, begintime_),
  };
  stAddOrUpdateNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddOrUpdateNotice_descriptor_,
      stAddOrUpdateNotice::default_instance_,
      stAddOrUpdateNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddOrUpdateNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddOrUpdateNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddOrUpdateNotice));
  stAddOrUpdateNotice_ProtoModID_descriptor_ = stAddOrUpdateNotice_descriptor_->enum_type(0);
  stAddOrUpdateNotice_ProtoFunID_descriptor_ = stAddOrUpdateNotice_descriptor_->enum_type(1);
  stDelNotice_descriptor_ = file->message_type(266);
  static const int stDelNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelNotice, noticeid_),
  };
  stDelNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDelNotice_descriptor_,
      stDelNotice::default_instance_,
      stDelNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDelNotice));
  stDelNotice_ProtoModID_descriptor_ = stDelNotice_descriptor_->enum_type(0);
  stDelNotice_ProtoFunID_descriptor_ = stDelNotice_descriptor_->enum_type(1);
  stWebNotifyRechargeInfo_descriptor_ = file->message_type(267);
  static const int stWebNotifyRechargeInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, isextend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, paychannel_),
  };
  stWebNotifyRechargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWebNotifyRechargeInfo_descriptor_,
      stWebNotifyRechargeInfo::default_instance_,
      stWebNotifyRechargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWebNotifyRechargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWebNotifyRechargeInfo));
  stWebNotifyRechargeInfo_ProtoModID_descriptor_ = stWebNotifyRechargeInfo_descriptor_->enum_type(0);
  stWebNotifyRechargeInfo_ProtoFunID_descriptor_ = stWebNotifyRechargeInfo_descriptor_->enum_type(1);
  stAddGiftBagCfg_descriptor_ = file->message_type(268);
  static const int stAddGiftBagCfg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddGiftBagCfg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddGiftBagCfg, content_),
  };
  stAddGiftBagCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddGiftBagCfg_descriptor_,
      stAddGiftBagCfg::default_instance_,
      stAddGiftBagCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddGiftBagCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddGiftBagCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddGiftBagCfg));
  stAddGiftBagCfg_ProtoModID_descriptor_ = stAddGiftBagCfg_descriptor_->enum_type(0);
  stAddGiftBagCfg_ProtoFunID_descriptor_ = stAddGiftBagCfg_descriptor_->enum_type(1);
  stDelGiftBagCfg_descriptor_ = file->message_type(269);
  static const int stDelGiftBagCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelGiftBagCfg, id_),
  };
  stDelGiftBagCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDelGiftBagCfg_descriptor_,
      stDelGiftBagCfg::default_instance_,
      stDelGiftBagCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelGiftBagCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelGiftBagCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDelGiftBagCfg));
  stDelGiftBagCfg_ProtoModID_descriptor_ = stDelGiftBagCfg_descriptor_->enum_type(0);
  stDelGiftBagCfg_ProtoFunID_descriptor_ = stDelGiftBagCfg_descriptor_->enum_type(1);
  stAddBlackAndWhite_descriptor_ = file->message_type(270);
  static const int stAddBlackAndWhite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBlackAndWhite, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBlackAndWhite, whitelist_),
  };
  stAddBlackAndWhite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddBlackAndWhite_descriptor_,
      stAddBlackAndWhite::default_instance_,
      stAddBlackAndWhite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBlackAndWhite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddBlackAndWhite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddBlackAndWhite));
  stAddBlackAndWhite_ProtoModID_descriptor_ = stAddBlackAndWhite_descriptor_->enum_type(0);
  stAddBlackAndWhite_ProtoFunID_descriptor_ = stAddBlackAndWhite_descriptor_->enum_type(1);
  stSetServerMaintenanceTime_descriptor_ = file->message_type(271);
  static const int stSetServerMaintenanceTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetServerMaintenanceTime, optime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetServerMaintenanceTime, opduring_),
  };
  stSetServerMaintenanceTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSetServerMaintenanceTime_descriptor_,
      stSetServerMaintenanceTime::default_instance_,
      stSetServerMaintenanceTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetServerMaintenanceTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSetServerMaintenanceTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSetServerMaintenanceTime));
  stSetServerMaintenanceTime_ProtoModID_descriptor_ = stSetServerMaintenanceTime_descriptor_->enum_type(0);
  stSetServerMaintenanceTime_ProtoFunID_descriptor_ = stSetServerMaintenanceTime_descriptor_->enum_type(1);
  stGetSvrConfig_descriptor_ = file->message_type(272);
  static const int stGetSvrConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetSvrConfig, webconnid_),
  };
  stGetSvrConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGetSvrConfig_descriptor_,
      stGetSvrConfig::default_instance_,
      stGetSvrConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetSvrConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGetSvrConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGetSvrConfig));
  stGetSvrConfig_ProtoModID_descriptor_ = stGetSvrConfig_descriptor_->enum_type(0);
  stGetSvrConfig_ProtoFunID_descriptor_ = stGetSvrConfig_descriptor_->enum_type(1);
  stRetSvrConfig_descriptor_ = file->message_type(273);
  static const int stRetSvrConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSvrConfig, cfgpair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSvrConfig, webconnid_),
  };
  stRetSvrConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetSvrConfig_descriptor_,
      stRetSvrConfig::default_instance_,
      stRetSvrConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSvrConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSvrConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetSvrConfig));
  stRetSvrConfig_ProtoModID_descriptor_ = stRetSvrConfig_descriptor_->enum_type(0);
  stRetSvrConfig_ProtoFunID_descriptor_ = stRetSvrConfig_descriptor_->enum_type(1);
  stUpdateSvrCfg_descriptor_ = file->message_type(274);
  static const int stUpdateSvrCfg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateSvrCfg, cfgpair_),
  };
  stUpdateSvrCfg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUpdateSvrCfg_descriptor_,
      stUpdateSvrCfg::default_instance_,
      stUpdateSvrCfg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateSvrCfg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateSvrCfg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUpdateSvrCfg));
  stUpdateSvrCfg_ProtoModID_descriptor_ = stUpdateSvrCfg_descriptor_->enum_type(0);
  stUpdateSvrCfg_ProtoFunID_descriptor_ = stUpdateSvrCfg_descriptor_->enum_type(1);
  stNotifyWebOnlineNum_descriptor_ = file->message_type(275);
  static const int stNotifyWebOnlineNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWebOnlineNum, num_),
  };
  stNotifyWebOnlineNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyWebOnlineNum_descriptor_,
      stNotifyWebOnlineNum::default_instance_,
      stNotifyWebOnlineNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWebOnlineNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWebOnlineNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyWebOnlineNum));
  stNotifyWebOnlineNum_ProtoModID_descriptor_ = stNotifyWebOnlineNum_descriptor_->enum_type(0);
  stNotifyWebOnlineNum_ProtoFunID_descriptor_ = stNotifyWebOnlineNum_descriptor_->enum_type(1);
  stEnterSelectPage_descriptor_ = file->message_type(276);
  static const int stEnterSelectPage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterSelectPage, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterSelectPage, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterSelectPage, opid_),
  };
  stEnterSelectPage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterSelectPage_descriptor_,
      stEnterSelectPage::default_instance_,
      stEnterSelectPage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterSelectPage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterSelectPage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterSelectPage));
  stEnterSelectPage_ProtoModID_descriptor_ = stEnterSelectPage_descriptor_->enum_type(0);
  stEnterSelectPage_ProtoFunID_descriptor_ = stEnterSelectPage_descriptor_->enum_type(1);
  stNotifyWebCreateRole_descriptor_ = file->message_type(277);
  static const int stNotifyWebCreateRole_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWebCreateRole, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWebCreateRole, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWebCreateRole, deviceid_),
  };
  stNotifyWebCreateRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyWebCreateRole_descriptor_,
      stNotifyWebCreateRole::default_instance_,
      stNotifyWebCreateRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWebCreateRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWebCreateRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyWebCreateRole));
  stNotifyWebCreateRole_ProtoModID_descriptor_ = stNotifyWebCreateRole_descriptor_->enum_type(0);
  stNotifyWebCreateRole_ProtoFunID_descriptor_ = stNotifyWebCreateRole_descriptor_->enum_type(1);
  stSendGuildLog_descriptor_ = file->message_type(278);
  static const int stSendGuildLog_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, opobjid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, name_),
  };
  stSendGuildLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendGuildLog_descriptor_,
      stSendGuildLog::default_instance_,
      stSendGuildLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendGuildLog));
  stSendGuildLog_ProtoModID_descriptor_ = stSendGuildLog_descriptor_->enum_type(0);
  stSendGuildLog_ProtoFunID_descriptor_ = stSendGuildLog_descriptor_->enum_type(1);
  sstSendGuildResLog_descriptor_ = file->message_type(279);
  static const int sstSendGuildResLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, oldval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, newval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, reason_),
  };
  sstSendGuildResLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sstSendGuildResLog_descriptor_,
      sstSendGuildResLog::default_instance_,
      sstSendGuildResLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sstSendGuildResLog));
  sstSendGuildResLog_ProtoModID_descriptor_ = sstSendGuildResLog_descriptor_->enum_type(0);
  sstSendGuildResLog_ProtoFunID_descriptor_ = sstSendGuildResLog_descriptor_->enum_type(1);
  stSendModuleLog_descriptor_ = file->message_type(280);
  static const int stSendModuleLog_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, othercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, oldrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, newrank_),
  };
  stSendModuleLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendModuleLog_descriptor_,
      stSendModuleLog::default_instance_,
      stSendModuleLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendModuleLog));
  stSendModuleLog_ProtoModID_descriptor_ = stSendModuleLog_descriptor_->enum_type(0);
  stSendModuleLog_ProtoFunID_descriptor_ = stSendModuleLog_descriptor_->enum_type(1);
  stReqGetTxGiftBag_descriptor_ = file->message_type(281);
  static const int stReqGetTxGiftBag_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetTxGiftBag, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetTxGiftBag, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetTxGiftBag, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetTxGiftBag, arewardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetTxGiftBag, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetTxGiftBag, billno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetTxGiftBag, charid_),
  };
  stReqGetTxGiftBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGetTxGiftBag_descriptor_,
      stReqGetTxGiftBag::default_instance_,
      stReqGetTxGiftBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetTxGiftBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGetTxGiftBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGetTxGiftBag));
  stReqGetTxGiftBag_ProtoModID_descriptor_ = stReqGetTxGiftBag_descriptor_->enum_type(0);
  stReqGetTxGiftBag_ProtoFunID_descriptor_ = stReqGetTxGiftBag_descriptor_->enum_type(1);
  stRetGetTxGiftBag_descriptor_ = file->message_type(282);
  static const int stRetGetTxGiftBag_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGetTxGiftBag, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGetTxGiftBag, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGetTxGiftBag, msg_),
  };
  stRetGetTxGiftBag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetGetTxGiftBag_descriptor_,
      stRetGetTxGiftBag::default_instance_,
      stRetGetTxGiftBag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGetTxGiftBag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGetTxGiftBag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetGetTxGiftBag));
  stRetGetTxGiftBag_ProtoModID_descriptor_ = stRetGetTxGiftBag_descriptor_->enum_type(0);
  stRetGetTxGiftBag_ProtoFunID_descriptor_ = stRetGetTxGiftBag_descriptor_->enum_type(1);
  stUpdateSvrOpenTime_descriptor_ = file->message_type(283);
  static const int stUpdateSvrOpenTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateSvrOpenTime, time_),
  };
  stUpdateSvrOpenTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUpdateSvrOpenTime_descriptor_,
      stUpdateSvrOpenTime::default_instance_,
      stUpdateSvrOpenTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateSvrOpenTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateSvrOpenTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUpdateSvrOpenTime));
  stUpdateSvrOpenTime_ProtoModID_descriptor_ = stUpdateSvrOpenTime_descriptor_->enum_type(0);
  stUpdateSvrOpenTime_ProtoFunID_descriptor_ = stUpdateSvrOpenTime_descriptor_->enum_type(1);
  stResourceChgLog_descriptor_ = file->message_type(284);
  static const int stResourceChgLog_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, addnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, oldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, newvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, reason_),
  };
  stResourceChgLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResourceChgLog_descriptor_,
      stResourceChgLog::default_instance_,
      stResourceChgLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResourceChgLog));
  stResourceChgLog_ProtoModID_descriptor_ = stResourceChgLog_descriptor_->enum_type(0);
  stResourceChgLog_ProtoFunID_descriptor_ = stResourceChgLog_descriptor_->enum_type(1);
  stUseInviteCode_descriptor_ = file->message_type(285);
  static const int stUseInviteCode_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCode, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCode, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCode, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCode, userid_),
  };
  stUseInviteCode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUseInviteCode_descriptor_,
      stUseInviteCode::default_instance_,
      stUseInviteCode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUseInviteCode));
  stUseInviteCode_ProtoModID_descriptor_ = stUseInviteCode_descriptor_->enum_type(0);
  stUseInviteCode_ProtoFunID_descriptor_ = stUseInviteCode_descriptor_->enum_type(1);
  stUseInviteCodeCb_descriptor_ = file->message_type(286);
  static const int stUseInviteCodeCb_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCodeCb, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCodeCb, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCodeCb, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCodeCb, userid_),
  };
  stUseInviteCodeCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUseInviteCodeCb_descriptor_,
      stUseInviteCodeCb::default_instance_,
      stUseInviteCodeCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCodeCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUseInviteCodeCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUseInviteCodeCb));
  stUseInviteCodeCb_ProtoModID_descriptor_ = stUseInviteCodeCb_descriptor_->enum_type(0);
  stUseInviteCodeCb_ProtoFunID_descriptor_ = stUseInviteCodeCb_descriptor_->enum_type(1);
  stReqLimitPetActivityData_descriptor_ = file->message_type(287);
  static const int stReqLimitPetActivityData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLimitPetActivityData, msg_),
  };
  stReqLimitPetActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLimitPetActivityData_descriptor_,
      stReqLimitPetActivityData::default_instance_,
      stReqLimitPetActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLimitPetActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLimitPetActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLimitPetActivityData));
  stReqLimitPetActivityData_ProtoModID_descriptor_ = stReqLimitPetActivityData_descriptor_->enum_type(0);
  stReqLimitPetActivityData_ProtoFunID_descriptor_ = stReqLimitPetActivityData_descriptor_->enum_type(1);
  stAcitivityLimitPetItem_descriptor_ = file->message_type(288);
  static const int stAcitivityLimitPetItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, activiyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, endtime_),
  };
  stAcitivityLimitPetItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAcitivityLimitPetItem_descriptor_,
      stAcitivityLimitPetItem::default_instance_,
      stAcitivityLimitPetItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAcitivityLimitPetItem));
  stSendLimitPetActivityData_descriptor_ = file->message_type(289);
  static const int stSendLimitPetActivityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLimitPetActivityData, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLimitPetActivityData, item_),
  };
  stSendLimitPetActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendLimitPetActivityData_descriptor_,
      stSendLimitPetActivityData::default_instance_,
      stSendLimitPetActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLimitPetActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLimitPetActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendLimitPetActivityData));
  stSendLimitPetActivityData_ProtoModID_descriptor_ = stSendLimitPetActivityData_descriptor_->enum_type(0);
  stSendLimitPetActivityData_ProtoFunID_descriptor_ = stSendLimitPetActivityData_descriptor_->enum_type(1);
  stSendShutDown_descriptor_ = file->message_type(290);
  static const int stSendShutDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendShutDown, msg_),
  };
  stSendShutDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendShutDown_descriptor_,
      stSendShutDown::default_instance_,
      stSendShutDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendShutDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendShutDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendShutDown));
  stSendShutDown_ProtoModID_descriptor_ = stSendShutDown_descriptor_->enum_type(0);
  stSendShutDown_ProtoFunID_descriptor_ = stSendShutDown_descriptor_->enum_type(1);
  stWeb2GlobalQueryUserNft_descriptor_ = file->message_type(291);
  static const int stWeb2GlobalQueryUserNft_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWeb2GlobalQueryUserNft, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWeb2GlobalQueryUserNft, charid_),
  };
  stWeb2GlobalQueryUserNft_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWeb2GlobalQueryUserNft_descriptor_,
      stWeb2GlobalQueryUserNft::default_instance_,
      stWeb2GlobalQueryUserNft_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWeb2GlobalQueryUserNft, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWeb2GlobalQueryUserNft, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWeb2GlobalQueryUserNft));
  stWeb2GlobalQueryUserNft_ProtoModID_descriptor_ = stWeb2GlobalQueryUserNft_descriptor_->enum_type(0);
  stWeb2GlobalQueryUserNft_ProtoFunID_descriptor_ = stWeb2GlobalQueryUserNft_descriptor_->enum_type(1);
  stGlobal2WebQueryUserNftResult_descriptor_ = file->message_type(292);
  static const int stGlobal2WebQueryUserNftResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebQueryUserNftResult, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebQueryUserNftResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebQueryUserNftResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebQueryUserNftResult, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebQueryUserNftResult, vip_),
  };
  stGlobal2WebQueryUserNftResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGlobal2WebQueryUserNftResult_descriptor_,
      stGlobal2WebQueryUserNftResult::default_instance_,
      stGlobal2WebQueryUserNftResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebQueryUserNftResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebQueryUserNftResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGlobal2WebQueryUserNftResult));
  stGlobal2WebQueryUserNftResult_ProtoModID_descriptor_ = stGlobal2WebQueryUserNftResult_descriptor_->enum_type(0);
  stGlobal2WebQueryUserNftResult_ProtoFunID_descriptor_ = stGlobal2WebQueryUserNftResult_descriptor_->enum_type(1);
  stWeb2GlobalChangeNftItem_descriptor_ = file->message_type(293);
  static const int stWeb2GlobalChangeNftItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWeb2GlobalChangeNftItem, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWeb2GlobalChangeNftItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWeb2GlobalChangeNftItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWeb2GlobalChangeNftItem, count_),
  };
  stWeb2GlobalChangeNftItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWeb2GlobalChangeNftItem_descriptor_,
      stWeb2GlobalChangeNftItem::default_instance_,
      stWeb2GlobalChangeNftItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWeb2GlobalChangeNftItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWeb2GlobalChangeNftItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWeb2GlobalChangeNftItem));
  stWeb2GlobalChangeNftItem_ProtoModID_descriptor_ = stWeb2GlobalChangeNftItem_descriptor_->enum_type(0);
  stWeb2GlobalChangeNftItem_ProtoFunID_descriptor_ = stWeb2GlobalChangeNftItem_descriptor_->enum_type(1);
  stGlobal2WebChangeNftItemResult_descriptor_ = file->message_type(294);
  static const int stGlobal2WebChangeNftItemResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebChangeNftItemResult, webconnid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebChangeNftItemResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebChangeNftItemResult, result_),
  };
  stGlobal2WebChangeNftItemResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGlobal2WebChangeNftItemResult_descriptor_,
      stGlobal2WebChangeNftItemResult::default_instance_,
      stGlobal2WebChangeNftItemResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebChangeNftItemResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGlobal2WebChangeNftItemResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGlobal2WebChangeNftItemResult));
  stGlobal2WebChangeNftItemResult_ProtoModID_descriptor_ = stGlobal2WebChangeNftItemResult_descriptor_->enum_type(0);
  stGlobal2WebChangeNftItemResult_ProtoFunID_descriptor_ = stGlobal2WebChangeNftItemResult_descriptor_->enum_type(1);
  GlobalModID_descriptor_ = file->enum_type(0);
  SaveType_descriptor_ = file->enum_type(1);
  eLoadRoleDataType_descriptor_ = file->enum_type(2);
  eGMType_descriptor_ = file->enum_type(3);
  eRealTimePKType_descriptor_ = file->enum_type(4);
  eRankModule_ID_descriptor_ = file->enum_type(5);
  eNoticeOp_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Global_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLoginGlobal_descriptor_, &stLoginGlobal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCreateRole_descriptor_, &stCreateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCreateRoleResult_descriptor_, &stCreateRoleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSnapData_descriptor_, &stReqSnapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSnapData_descriptor_, &stSnapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetSnapData_descriptor_, &stRetSnapData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLoadData_descriptor_, &stReqLoadData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGateForwardProto_descriptor_, &stGateForwardProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForwardProto2Me_descriptor_, &stForwardProto2Me::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadcastProto2AllUser_descriptor_, &stBroadcastProto2AllUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLoginGlobalFail_descriptor_, &stLoginGlobalFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyLoginOut_descriptor_, &stNotifyLoginOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGameSvrStartUp_descriptor_, &stGameSvrStartUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stKillUserOut_descriptor_, &stKillUserOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stServerCfgPair_descriptor_, &stServerCfgPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyGateSvrCfg_descriptor_, &stNotifyGateSvrCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReloginGlobal_descriptor_, &stReloginGlobal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPlayerAutoConnect_descriptor_, &stPlayerAutoConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stClientLostConnect_descriptor_, &stClientLostConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAskIsNewAccount_descriptor_, &stAskIsNewAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stIsNewAccount_descriptor_, &stIsNewAccount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSaveRoleInfo_descriptor_, &stSaveRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRoleInfo_descriptor_, &stRetRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserEnterMapSuccess_descriptor_, &stUserEnterMapSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRechargeInfo_descriptor_, &stRechargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserRecharge_descriptor_, &stUserRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stProcessGM_descriptor_, &stProcessGM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynFetchLilianNum_descriptor_, &stSynFetchLilianNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynGuildID_descriptor_, &stSynGuildID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCreateGuild_descriptor_, &stCreateGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCreateGuildDecMoney_descriptor_, &stCreateGuildDecMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForwardJoininGuild_descriptor_, &stForwardJoininGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddGuildContribute_descriptor_, &stAddGuildContribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadcastGuildChatInfo_descriptor_, &stBroadcastGuildChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuildPray_descriptor_, &stGuildPray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynUserLevel_descriptor_, &stSynUserLevel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynCopymapStarNum_descriptor_, &stSynCopymapStarNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynUserBattlePower_descriptor_, &stSynUserBattlePower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendTeamChatInfo_descriptor_, &stSendTeamChatInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTeamLeaveCopyMap_descriptor_, &stTeamLeaveCopyMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTreasureCombine_descriptor_, &stTreasureCombine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTreasureCombineSuccess_descriptor_, &stTreasureCombineSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBuyPeaceModubleTime_descriptor_, &stBuyPeaceModubleTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqChangeGameSvr_descriptor_, &stReqChangeGameSvr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stConfirmChangeGameSvr_descriptor_, &stConfirmChangeGameSvr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetOtherUserData2Me_descriptor_, &stRetOtherUserData2Me::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMailAttach_descriptor_, &stMailAttach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stObtainItemFromMail_descriptor_, &stObtainItemFromMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynAddTreasure_descriptor_, &stSynAddTreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBeginPKWithOther_descriptor_, &stBeginPKWithOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserLeitaiChallenge_descriptor_, &stUserLeitaiChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stArenaPKResult_descriptor_, &stArenaPKResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynDrawHeroScore_descriptor_, &stSynDrawHeroScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUpLeitaiUseTime_descriptor_, &stUpLeitaiUseTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserLeaveGuild_descriptor_, &stUserLeaveGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterCopymapMemInfo_descriptor_, &stEnterCopymapMemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTeamEnterCopyMap_descriptor_, &stTeamEnterCopyMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOne2OnePVPEnterCopyMap_descriptor_, &stOne2OnePVPEnterCopyMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForwardCapture_descriptor_, &stForwardCapture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCaptureRewardItem_descriptor_, &stCaptureRewardItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCaptureReward_descriptor_, &stCaptureReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRealTimeBattleEnterCopymap_descriptor_, &stRealTimeBattleEnterCopymap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyAddLilian_descriptor_, &stNotifyAddLilian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterGuildCopymap_descriptor_, &stEnterGuildCopymap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMyContribyte_descriptor_, &stSynMyContribyte::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOnlineUserGMType_descriptor_, &stOnlineUserGMType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForbidOnlineUser_descriptor_, &stForbidOnlineUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOne2OnePVPFinish_descriptor_, &stOne2OnePVPFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stActivityConfig_descriptor_, &stActivityConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynActivityConfig_descriptor_, &stSynActivityConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCaptureTreasureFail_descriptor_, &stCaptureTreasureFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCharID2Rank_descriptor_, &stCharID2Rank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRankModuleInfo_descriptor_, &stRankModuleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRankModuleInfo_descriptor_, &stSynRankModuleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiftBagReward_descriptor_, &stGiftBagReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiveGiftBagReward_descriptor_, &stGiveGiftBagReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyGameSvrCfg_descriptor_, &stNotifyGameSvrCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyCurEquipInfo_descriptor_, &stNotifyCurEquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReloginGame_descriptor_, &stReloginGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFirstKillBaseInfo_descriptor_, &stFirstKillBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTeamCopyMapFinish_descriptor_, &stTeamCopyMapFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserOnlineSendFirstKillInfo_descriptor_, &stUserOnlineSendFirstKillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTeamFinishFirstKill_descriptor_, &stTeamFinishFirstKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSetClearWorldBossTime_descriptor_, &stSetClearWorldBossTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSetWorldBossBuyNum_descriptor_, &stSetWorldBossBuyNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserDecSP_descriptor_, &stUserDecSP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUsreDecLilian_descriptor_, &stUsreDecLilian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserDamagePair_descriptor_, &stUserDamagePair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuildCopymapFail_descriptor_, &stGuildCopymapFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuildCopymapKillBoss_descriptor_, &stGuildCopymapKillBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWorldBossCopymapFail_descriptor_, &stWorldBossCopymapFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stKillWorldBoss_descriptor_, &stKillWorldBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDrawHeroScoreReward_descriptor_, &stDrawHeroScoreReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDrawHeroRankReward_descriptor_, &stDrawHeroRankReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCompensantionItem_descriptor_, &stCompensantionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSetCompensationID_descriptor_, &stSetCompensationID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSetOpenServerDay_descriptor_, &stSetOpenServerDay::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynGuildLv2AllMember_descriptor_, &stSynGuildLv2AllMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForwardChgBadge_descriptor_, &stForwardChgBadge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWorldBossBuyDecDiamond_descriptor_, &stWorldBossBuyDecDiamond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuildDonateSuccess_descriptor_, &stGuildDonateSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserLeaveWorldBoss_descriptor_, &stUserLeaveWorldBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyGameAutoConnect_descriptor_, &stNotifyGameAutoConnect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForwardDrawHeroScoreReward_descriptor_, &stForwardDrawHeroScoreReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyArenaReward_descriptor_, &stNotifyArenaReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stForwardInvestgateAnswer_descriptor_, &stForwardInvestgateAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardInvestgateResult_descriptor_, &ForwardInvestgateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGMModifyUserInfo_descriptor_, &stGMModifyUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMyArenaRank_descriptor_, &stSynMyArenaRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynVipLv_descriptor_, &stSynVipLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyClearArenaCD_descriptor_, &stNotifyClearArenaCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResetArenaChallengeNum_descriptor_, &stReqResetArenaChallengeNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotfiyResetChallengeNum_descriptor_, &stNotfiyResetChallengeNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqResetInterceptNum_descriptor_, &stReqResetInterceptNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyClearInterceptCD_descriptor_, &stNotifyClearInterceptCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyResetInterceptNum_descriptor_, &stNotifyResetInterceptNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyGuardQuality_descriptor_, &stNotifyGuardQuality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyGuardInspiredSuccess_descriptor_, &stNotifyGuardInspiredSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRefreshGuardQuality_descriptor_, &stReqRefreshGuardQuality::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyClearOne2OneScore_descriptor_, &stNotifyClearOne2OneScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stClearOne2OneScoreSuccess_descriptor_, &stClearOne2OneScoreSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInterceptReward_descriptor_, &stInterceptReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQuickFinishDecDiamond_descriptor_, &stQuickFinishDecDiamond::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQuickFinishDiamondSuccess_descriptor_, &stQuickFinishDiamondSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOne2OnePkWithRobot_descriptor_, &stOne2OnePkWithRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyUserBeginGuard_descriptor_, &stNotifyUserBeginGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyUserInterceptResult_descriptor_, &stNotifyUserInterceptResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyCloseBetaReward_descriptor_, &stNotifyCloseBetaReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterManorFightMapUserInfo_descriptor_, &stEnterManorFightMapUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterManorFightMap_descriptor_, &stEnterManorFightMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stManorFightBattleProp_descriptor_, &stManorFightBattleProp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFinishManorFight_descriptor_, &stFinishManorFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExistName_descriptor_, &stExistName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynName_descriptor_, &stSynName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynGloryfashionCharID_descriptor_, &stSynGloryfashionCharID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDevilCallItem_descriptor_, &stDevilCallItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAllDevilCall_descriptor_, &stAllDevilCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDevilCallReward_descriptor_, &stDevilCallReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDevilCallRewardRet_descriptor_, &stDevilCallRewardRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDevilCall_descriptor_, &stDevilCall::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDevilCallRet_descriptor_, &stDevilCallRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDevilCallSummary_descriptor_, &stDevilCallSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExpeditionItem_descriptor_, &stExpeditionItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExpeditionInfo_descriptor_, &stExpeditionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExpedition_descriptor_, &stExpedition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExpeditionHero_descriptor_, &stExpeditionHero::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExpeditionRet_descriptor_, &stExpeditionRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExpeditionReward_descriptor_, &stExpeditionReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExpeditionRewardRet_descriptor_, &stExpeditionRewardRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFastExpedition_descriptor_, &stFastExpedition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFastExpeditionRet_descriptor_, &stFastExpeditionRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelExpedition_descriptor_, &stCancelExpedition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelExpeditionRet_descriptor_, &stCancelExpeditionRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stExpeditionSummary_descriptor_, &stExpeditionSummary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiveLilianDayTaskCb_descriptor_, &stGiveLilianDayTaskCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUpdateDamageRank_descriptor_, &stUpdateDamageRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNoticeSendRankInfo_descriptor_, &stNoticeSendRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOperateActivityCb_descriptor_, &stOperateActivityCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOperateActivityReward_descriptor_, &stOperateActivityReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOperateActivityRewardCb_descriptor_, &stOperateActivityRewardCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOperateActivityLotteryReward_descriptor_, &stOperateActivityLotteryReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOperateActivityLotteryRewardCb_descriptor_, &stOperateActivityLotteryRewardCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPayTypeCb_descriptor_, &stReqPayTypeCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqUserRankInfo_descriptor_, &stReqUserRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    userSortInfo_descriptor_, &userSortInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserRankInfoResult_descriptor_, &stUserRankInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEmeraldDreamCopymapFail_descriptor_, &stEmeraldDreamCopymapFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stKillEmeraldDreamBoss_descriptor_, &stKillEmeraldDreamBoss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    strRemoveNum_descriptor_, &strRemoveNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCopyMapInfo_descriptor_, &stCopyMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCopyMapInfoResult_descriptor_, &stCopyMapInfoResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRealTimeTeamMatch_descriptor_, &stRealTimeTeamMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stOnPubLeaveTeam_descriptor_, &stOnPubLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDeductMoney_descriptor_, &stDeductMoney::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDeductMoneyResult_descriptor_, &stDeductMoneyResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiveReward_descriptor_, &stGiveReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiveRewardResult_descriptor_, &stGiveRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCheckMission_descriptor_, &stReqCheckMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCheckTask_descriptor_, &stReqCheckTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEnterTaskLv_descriptor_, &stReqEnterTaskLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDisbandTeam_descriptor_, &stReqDisbandTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawInviteReward_descriptor_, &stReqDrawInviteReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawInviteRewardCb_descriptor_, &stReqDrawInviteRewardCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDrawUseInviteReward_descriptor_, &stReqDrawUseInviteReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRoleInfo_descriptor_, &stRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroLeagueEnterCopyMap_descriptor_, &stHeroLeagueEnterCopyMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroLeaguePkWithRobot_descriptor_, &stHeroLeaguePkWithRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqHeroLeagueCheck_descriptor_, &stReqHeroLeagueCheck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroLeagueMatch_descriptor_, &stHeroLeagueMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPubRoleInfo_descriptor_, &stPubRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroLeagueResult_descriptor_, &stHeroLeagueResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRoleList_descriptor_, &stSynRoleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTeam_descriptor_, &stTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRoleListResult_descriptor_, &stSynRoleListResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynChampionInfo_descriptor_, &stSynChampionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSynChampionInfo_descriptor_, &stReqSynChampionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqWorskip_descriptor_, &stReqWorskip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWorskipResult_descriptor_, &stWorskipResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRedPoint_descriptor_, &stReqRedPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRedPointResult_descriptor_, &stRedPointResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInterceptResultToGlobal_descriptor_, &stInterceptResultToGlobal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMemberInfo_descriptor_, &stSynMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRoomInfo_descriptor_, &stRetRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetAddTeamMember_descriptor_, &stRetAddTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryObjInfo_descriptor_, &MarryObjInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPropose_descriptor_, &stReqPropose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAgreeMarry_descriptor_, &stReqAgreeMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqQuitWedding_descriptor_, &stReqQuitWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqReEnterWedding_descriptor_, &stReqReEnterWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBuyFireWork_descriptor_, &stReqBuyFireWork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAgreeInvite_descriptor_, &stReqAgreeInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqTakeCandy_descriptor_, &stReqTakeCandy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyCoupleMarry_descriptor_, &stNotifyCoupleMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendWeedingRing_descriptor_, &stSendWeedingRing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMarryInfoCb_descriptor_, &stMarryInfoCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUseFireWork_descriptor_, &stUseFireWork::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetMarryInfoToCouple_descriptor_, &stRetMarryInfoToCouple::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyCoupleMarryCb_descriptor_, &stNotifyCoupleMarryCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetForceDivorce_descriptor_, &stRetForceDivorce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetForceDivorceCb_descriptor_, &stRetForceDivorceCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetRejectDivorce_descriptor_, &stRetRejectDivorce::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDelUserOnlineMarryInfo_descriptor_, &stRetDelUserOnlineMarryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSynGuildBlackMarketLv_descriptor_, &stReqSynGuildBlackMarketLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynGuildBlackMarketLvResult_descriptor_, &stSynGuildBlackMarketLvResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGloryUserPart_descriptor_, &stGloryUserPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGloryUserDetail_descriptor_, &stGloryUserDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGloryUser_descriptor_, &stGloryUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterResBattle_descriptor_, &stEnterResBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadResBattleInvite_descriptor_, &stBroadResBattleInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPubOffline_descriptor_, &stPubOffline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDiscoverConsume_descriptor_, &stDiscoverConsume::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynCoupleInfo_descriptor_, &stSynCoupleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynResBattleUserData_descriptor_, &stSynResBattleUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynResBattleTop50_descriptor_, &stSynResBattleTop50::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynResBattleKing_descriptor_, &stSynResBattleKing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplyInviteResBattle_descriptor_, &stReplyInviteResBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynGloryKingTitle_descriptor_, &stSynGloryKingTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPubOnline_descriptor_, &stPubOnline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResBattleSend2Pub_descriptor_, &stResBattleSend2Pub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stServerParamItem_descriptor_, &stServerParamItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stServerParamSend2Game_descriptor_, &stServerParamSend2Game::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynUserPhotoID_descriptor_, &stSynUserPhotoID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUseLvlBox_descriptor_, &stUseLvlBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUseLvlBoxRes_descriptor_, &stUseLvlBoxRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRechangeStatistics_descriptor_, &stRechangeStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNftItem_descriptor_, &stNftItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGlobal2GameQueryUserNft_descriptor_, &stGlobal2GameQueryUserNft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGame2GlobalQueryUserNftResult_descriptor_, &stGame2GlobalQueryUserNftResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGlobal2GameChangeNftItem_descriptor_, &stGlobal2GameChangeNftItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGame2GlobalChangeNftItemResult_descriptor_, &stGame2GlobalChangeNftItemResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGame2GlobalNftVipGift_descriptor_, &stGame2GlobalNftVipGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetNftOfflineUserData_descriptor_, &stRetNftOfflineUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetChangeNftOfflineUserData_descriptor_, &stRetChangeNftOfflineUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendUserLog_descriptor_, &stSendUserLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqKillUserOut_descriptor_, &stReqKillUserOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stKillUserOutResult_descriptor_, &stKillUserOutResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSetUserGMType_descriptor_, &stReqSetUserGMType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSetUserGMTypeResult_descriptor_, &stSetUserGMTypeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBanUser_descriptor_, &stReqBanUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBanUserResult_descriptor_, &stBanUserResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendMailAttach_descriptor_, &stSendMailAttach::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendMail2User_descriptor_, &stSendMail2User::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendMail2UserResult_descriptor_, &stSendMail2UserResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWebMotifyUserInfo_descriptor_, &stWebMotifyUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWebMotifyUserInfoRet_descriptor_, &stWebMotifyUserInfoRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddOrUpdateNotice_descriptor_, &stAddOrUpdateNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDelNotice_descriptor_, &stDelNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWebNotifyRechargeInfo_descriptor_, &stWebNotifyRechargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddGiftBagCfg_descriptor_, &stAddGiftBagCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDelGiftBagCfg_descriptor_, &stDelGiftBagCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddBlackAndWhite_descriptor_, &stAddBlackAndWhite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSetServerMaintenanceTime_descriptor_, &stSetServerMaintenanceTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGetSvrConfig_descriptor_, &stGetSvrConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetSvrConfig_descriptor_, &stRetSvrConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUpdateSvrCfg_descriptor_, &stUpdateSvrCfg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyWebOnlineNum_descriptor_, &stNotifyWebOnlineNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterSelectPage_descriptor_, &stEnterSelectPage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyWebCreateRole_descriptor_, &stNotifyWebCreateRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendGuildLog_descriptor_, &stSendGuildLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sstSendGuildResLog_descriptor_, &sstSendGuildResLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendModuleLog_descriptor_, &stSendModuleLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGetTxGiftBag_descriptor_, &stReqGetTxGiftBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetGetTxGiftBag_descriptor_, &stRetGetTxGiftBag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUpdateSvrOpenTime_descriptor_, &stUpdateSvrOpenTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResourceChgLog_descriptor_, &stResourceChgLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUseInviteCode_descriptor_, &stUseInviteCode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUseInviteCodeCb_descriptor_, &stUseInviteCodeCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLimitPetActivityData_descriptor_, &stReqLimitPetActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAcitivityLimitPetItem_descriptor_, &stAcitivityLimitPetItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendLimitPetActivityData_descriptor_, &stSendLimitPetActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendShutDown_descriptor_, &stSendShutDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWeb2GlobalQueryUserNft_descriptor_, &stWeb2GlobalQueryUserNft::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGlobal2WebQueryUserNftResult_descriptor_, &stGlobal2WebQueryUserNftResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWeb2GlobalChangeNftItem_descriptor_, &stWeb2GlobalChangeNftItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGlobal2WebChangeNftItemResult_descriptor_, &stGlobal2WebChangeNftItemResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Global_2eproto() {
  delete stLoginGlobal::default_instance_;
  delete stLoginGlobal_reflection_;
  delete stCreateRole::default_instance_;
  delete stCreateRole_reflection_;
  delete stCreateRoleResult::default_instance_;
  delete stCreateRoleResult_reflection_;
  delete stReqSnapData::default_instance_;
  delete stReqSnapData_reflection_;
  delete stSnapData::default_instance_;
  delete stSnapData_reflection_;
  delete stRetSnapData::default_instance_;
  delete stRetSnapData_reflection_;
  delete stReqLoadData::default_instance_;
  delete stReqLoadData_reflection_;
  delete stGateForwardProto::default_instance_;
  delete stGateForwardProto_reflection_;
  delete stForwardProto2Me::default_instance_;
  delete stForwardProto2Me_reflection_;
  delete stBroadcastProto2AllUser::default_instance_;
  delete stBroadcastProto2AllUser_reflection_;
  delete stLoginGlobalFail::default_instance_;
  delete stLoginGlobalFail_reflection_;
  delete stNotifyLoginOut::default_instance_;
  delete stNotifyLoginOut_reflection_;
  delete stGameSvrStartUp::default_instance_;
  delete stGameSvrStartUp_reflection_;
  delete stKillUserOut::default_instance_;
  delete stKillUserOut_reflection_;
  delete stServerCfgPair::default_instance_;
  delete stServerCfgPair_reflection_;
  delete stNotifyGateSvrCfg::default_instance_;
  delete stNotifyGateSvrCfg_reflection_;
  delete stReloginGlobal::default_instance_;
  delete stReloginGlobal_reflection_;
  delete stPlayerAutoConnect::default_instance_;
  delete stPlayerAutoConnect_reflection_;
  delete stClientLostConnect::default_instance_;
  delete stClientLostConnect_reflection_;
  delete stAskIsNewAccount::default_instance_;
  delete stAskIsNewAccount_reflection_;
  delete stIsNewAccount::default_instance_;
  delete stIsNewAccount_reflection_;
  delete stSaveRoleInfo::default_instance_;
  delete stSaveRoleInfo_reflection_;
  delete stRetRoleInfo::default_instance_;
  delete stRetRoleInfo_reflection_;
  delete stUserEnterMapSuccess::default_instance_;
  delete stUserEnterMapSuccess_reflection_;
  delete stRechargeInfo::default_instance_;
  delete stRechargeInfo_reflection_;
  delete stUserRecharge::default_instance_;
  delete stUserRecharge_reflection_;
  delete stProcessGM::default_instance_;
  delete stProcessGM_reflection_;
  delete stSynFetchLilianNum::default_instance_;
  delete stSynFetchLilianNum_reflection_;
  delete stSynGuildID::default_instance_;
  delete stSynGuildID_reflection_;
  delete stCreateGuild::default_instance_;
  delete stCreateGuild_reflection_;
  delete stCreateGuildDecMoney::default_instance_;
  delete stCreateGuildDecMoney_reflection_;
  delete stForwardJoininGuild::default_instance_;
  delete stForwardJoininGuild_reflection_;
  delete stAddGuildContribute::default_instance_;
  delete stAddGuildContribute_reflection_;
  delete stBroadcastGuildChatInfo::default_instance_;
  delete stBroadcastGuildChatInfo_reflection_;
  delete stGuildPray::default_instance_;
  delete stGuildPray_reflection_;
  delete stSynUserLevel::default_instance_;
  delete stSynUserLevel_reflection_;
  delete stSynCopymapStarNum::default_instance_;
  delete stSynCopymapStarNum_reflection_;
  delete stSynUserBattlePower::default_instance_;
  delete stSynUserBattlePower_reflection_;
  delete stSendTeamChatInfo::default_instance_;
  delete stSendTeamChatInfo_reflection_;
  delete stTeamLeaveCopyMap::default_instance_;
  delete stTeamLeaveCopyMap_reflection_;
  delete stTreasureCombine::default_instance_;
  delete stTreasureCombine_reflection_;
  delete stTreasureCombineSuccess::default_instance_;
  delete stTreasureCombineSuccess_reflection_;
  delete stBuyPeaceModubleTime::default_instance_;
  delete stBuyPeaceModubleTime_reflection_;
  delete stReqChangeGameSvr::default_instance_;
  delete stReqChangeGameSvr_reflection_;
  delete stConfirmChangeGameSvr::default_instance_;
  delete stConfirmChangeGameSvr_reflection_;
  delete stRetOtherUserData2Me::default_instance_;
  delete stRetOtherUserData2Me_reflection_;
  delete stMailAttach::default_instance_;
  delete stMailAttach_reflection_;
  delete stObtainItemFromMail::default_instance_;
  delete stObtainItemFromMail_reflection_;
  delete stSynAddTreasure::default_instance_;
  delete stSynAddTreasure_reflection_;
  delete stBeginPKWithOther::default_instance_;
  delete stBeginPKWithOther_reflection_;
  delete stUserLeitaiChallenge::default_instance_;
  delete stUserLeitaiChallenge_reflection_;
  delete stArenaPKResult::default_instance_;
  delete stArenaPKResult_reflection_;
  delete stSynDrawHeroScore::default_instance_;
  delete stSynDrawHeroScore_reflection_;
  delete stUpLeitaiUseTime::default_instance_;
  delete stUpLeitaiUseTime_reflection_;
  delete stUserLeaveGuild::default_instance_;
  delete stUserLeaveGuild_reflection_;
  delete stEnterCopymapMemInfo::default_instance_;
  delete stEnterCopymapMemInfo_reflection_;
  delete stTeamEnterCopyMap::default_instance_;
  delete stTeamEnterCopyMap_reflection_;
  delete stOne2OnePVPEnterCopyMap::default_instance_;
  delete stOne2OnePVPEnterCopyMap_reflection_;
  delete stForwardCapture::default_instance_;
  delete stForwardCapture_reflection_;
  delete stCaptureRewardItem::default_instance_;
  delete stCaptureRewardItem_reflection_;
  delete stCaptureReward::default_instance_;
  delete stCaptureReward_reflection_;
  delete stRealTimeBattleEnterCopymap::default_instance_;
  delete stRealTimeBattleEnterCopymap_reflection_;
  delete stNotifyAddLilian::default_instance_;
  delete stNotifyAddLilian_reflection_;
  delete stEnterGuildCopymap::default_instance_;
  delete stEnterGuildCopymap_reflection_;
  delete stSynMyContribyte::default_instance_;
  delete stSynMyContribyte_reflection_;
  delete stOnlineUserGMType::default_instance_;
  delete stOnlineUserGMType_reflection_;
  delete stForbidOnlineUser::default_instance_;
  delete stForbidOnlineUser_reflection_;
  delete stOne2OnePVPFinish::default_instance_;
  delete stOne2OnePVPFinish_reflection_;
  delete stActivityConfig::default_instance_;
  delete stActivityConfig_reflection_;
  delete stSynActivityConfig::default_instance_;
  delete stSynActivityConfig_reflection_;
  delete stCaptureTreasureFail::default_instance_;
  delete stCaptureTreasureFail_reflection_;
  delete stCharID2Rank::default_instance_;
  delete stCharID2Rank_reflection_;
  delete stRankModuleInfo::default_instance_;
  delete stRankModuleInfo_reflection_;
  delete stSynRankModuleInfo::default_instance_;
  delete stSynRankModuleInfo_reflection_;
  delete stGiftBagReward::default_instance_;
  delete stGiftBagReward_reflection_;
  delete stGiveGiftBagReward::default_instance_;
  delete stGiveGiftBagReward_reflection_;
  delete stNotifyGameSvrCfg::default_instance_;
  delete stNotifyGameSvrCfg_reflection_;
  delete stNotifyCurEquipInfo::default_instance_;
  delete stNotifyCurEquipInfo_reflection_;
  delete stReloginGame::default_instance_;
  delete stReloginGame_reflection_;
  delete stFirstKillBaseInfo::default_instance_;
  delete stFirstKillBaseInfo_reflection_;
  delete stTeamCopyMapFinish::default_instance_;
  delete stTeamCopyMapFinish_reflection_;
  delete stUserOnlineSendFirstKillInfo::default_instance_;
  delete stUserOnlineSendFirstKillInfo_reflection_;
  delete stTeamFinishFirstKill::default_instance_;
  delete stTeamFinishFirstKill_reflection_;
  delete stSetClearWorldBossTime::default_instance_;
  delete stSetClearWorldBossTime_reflection_;
  delete stSetWorldBossBuyNum::default_instance_;
  delete stSetWorldBossBuyNum_reflection_;
  delete stUserDecSP::default_instance_;
  delete stUserDecSP_reflection_;
  delete stUsreDecLilian::default_instance_;
  delete stUsreDecLilian_reflection_;
  delete stUserDamagePair::default_instance_;
  delete stUserDamagePair_reflection_;
  delete stGuildCopymapFail::default_instance_;
  delete stGuildCopymapFail_reflection_;
  delete stGuildCopymapKillBoss::default_instance_;
  delete stGuildCopymapKillBoss_reflection_;
  delete stWorldBossCopymapFail::default_instance_;
  delete stWorldBossCopymapFail_reflection_;
  delete stKillWorldBoss::default_instance_;
  delete stKillWorldBoss_reflection_;
  delete stDrawHeroScoreReward::default_instance_;
  delete stDrawHeroScoreReward_reflection_;
  delete stDrawHeroRankReward::default_instance_;
  delete stDrawHeroRankReward_reflection_;
  delete stCompensantionItem::default_instance_;
  delete stCompensantionItem_reflection_;
  delete stSetCompensationID::default_instance_;
  delete stSetCompensationID_reflection_;
  delete stSetOpenServerDay::default_instance_;
  delete stSetOpenServerDay_reflection_;
  delete stSynGuildLv2AllMember::default_instance_;
  delete stSynGuildLv2AllMember_reflection_;
  delete stForwardChgBadge::default_instance_;
  delete stForwardChgBadge_reflection_;
  delete stWorldBossBuyDecDiamond::default_instance_;
  delete stWorldBossBuyDecDiamond_reflection_;
  delete stGuildDonateSuccess::default_instance_;
  delete stGuildDonateSuccess_reflection_;
  delete stUserLeaveWorldBoss::default_instance_;
  delete stUserLeaveWorldBoss_reflection_;
  delete stNotifyGameAutoConnect::default_instance_;
  delete stNotifyGameAutoConnect_reflection_;
  delete stForwardDrawHeroScoreReward::default_instance_;
  delete stForwardDrawHeroScoreReward_reflection_;
  delete stNotifyArenaReward::default_instance_;
  delete stNotifyArenaReward_reflection_;
  delete stForwardInvestgateAnswer::default_instance_;
  delete stForwardInvestgateAnswer_reflection_;
  delete ForwardInvestgateResult::default_instance_;
  delete ForwardInvestgateResult_reflection_;
  delete stGMModifyUserInfo::default_instance_;
  delete stGMModifyUserInfo_reflection_;
  delete stSynMyArenaRank::default_instance_;
  delete stSynMyArenaRank_reflection_;
  delete stSynVipLv::default_instance_;
  delete stSynVipLv_reflection_;
  delete stNotifyClearArenaCD::default_instance_;
  delete stNotifyClearArenaCD_reflection_;
  delete stReqResetArenaChallengeNum::default_instance_;
  delete stReqResetArenaChallengeNum_reflection_;
  delete stNotfiyResetChallengeNum::default_instance_;
  delete stNotfiyResetChallengeNum_reflection_;
  delete stReqResetInterceptNum::default_instance_;
  delete stReqResetInterceptNum_reflection_;
  delete stNotifyClearInterceptCD::default_instance_;
  delete stNotifyClearInterceptCD_reflection_;
  delete stNotifyResetInterceptNum::default_instance_;
  delete stNotifyResetInterceptNum_reflection_;
  delete stNotifyGuardQuality::default_instance_;
  delete stNotifyGuardQuality_reflection_;
  delete stNotifyGuardInspiredSuccess::default_instance_;
  delete stNotifyGuardInspiredSuccess_reflection_;
  delete stReqRefreshGuardQuality::default_instance_;
  delete stReqRefreshGuardQuality_reflection_;
  delete stNotifyClearOne2OneScore::default_instance_;
  delete stNotifyClearOne2OneScore_reflection_;
  delete stClearOne2OneScoreSuccess::default_instance_;
  delete stClearOne2OneScoreSuccess_reflection_;
  delete stInterceptReward::default_instance_;
  delete stInterceptReward_reflection_;
  delete stQuickFinishDecDiamond::default_instance_;
  delete stQuickFinishDecDiamond_reflection_;
  delete stQuickFinishDiamondSuccess::default_instance_;
  delete stQuickFinishDiamondSuccess_reflection_;
  delete stOne2OnePkWithRobot::default_instance_;
  delete stOne2OnePkWithRobot_reflection_;
  delete stNotifyUserBeginGuard::default_instance_;
  delete stNotifyUserBeginGuard_reflection_;
  delete stNotifyUserInterceptResult::default_instance_;
  delete stNotifyUserInterceptResult_reflection_;
  delete stNotifyCloseBetaReward::default_instance_;
  delete stNotifyCloseBetaReward_reflection_;
  delete stEnterManorFightMapUserInfo::default_instance_;
  delete stEnterManorFightMapUserInfo_reflection_;
  delete stEnterManorFightMap::default_instance_;
  delete stEnterManorFightMap_reflection_;
  delete stManorFightBattleProp::default_instance_;
  delete stManorFightBattleProp_reflection_;
  delete stFinishManorFight::default_instance_;
  delete stFinishManorFight_reflection_;
  delete stExistName::default_instance_;
  delete stExistName_reflection_;
  delete stSynName::default_instance_;
  delete stSynName_reflection_;
  delete stSynGloryfashionCharID::default_instance_;
  delete stSynGloryfashionCharID_reflection_;
  delete stDevilCallItem::default_instance_;
  delete stDevilCallItem_reflection_;
  delete stAllDevilCall::default_instance_;
  delete stAllDevilCall_reflection_;
  delete stDevilCallReward::default_instance_;
  delete stDevilCallReward_reflection_;
  delete stDevilCallRewardRet::default_instance_;
  delete stDevilCallRewardRet_reflection_;
  delete stDevilCall::default_instance_;
  delete stDevilCall_reflection_;
  delete stDevilCallRet::default_instance_;
  delete stDevilCallRet_reflection_;
  delete stDevilCallSummary::default_instance_;
  delete stDevilCallSummary_reflection_;
  delete stExpeditionItem::default_instance_;
  delete stExpeditionItem_reflection_;
  delete stExpeditionInfo::default_instance_;
  delete stExpeditionInfo_reflection_;
  delete stExpedition::default_instance_;
  delete stExpedition_reflection_;
  delete stExpeditionHero::default_instance_;
  delete stExpeditionHero_reflection_;
  delete stExpeditionRet::default_instance_;
  delete stExpeditionRet_reflection_;
  delete stExpeditionReward::default_instance_;
  delete stExpeditionReward_reflection_;
  delete stExpeditionRewardRet::default_instance_;
  delete stExpeditionRewardRet_reflection_;
  delete stFastExpedition::default_instance_;
  delete stFastExpedition_reflection_;
  delete stFastExpeditionRet::default_instance_;
  delete stFastExpeditionRet_reflection_;
  delete stCancelExpedition::default_instance_;
  delete stCancelExpedition_reflection_;
  delete stCancelExpeditionRet::default_instance_;
  delete stCancelExpeditionRet_reflection_;
  delete stExpeditionSummary::default_instance_;
  delete stExpeditionSummary_reflection_;
  delete stGiveLilianDayTaskCb::default_instance_;
  delete stGiveLilianDayTaskCb_reflection_;
  delete stUpdateDamageRank::default_instance_;
  delete stUpdateDamageRank_reflection_;
  delete stNoticeSendRankInfo::default_instance_;
  delete stNoticeSendRankInfo_reflection_;
  delete stOperateActivityCb::default_instance_;
  delete stOperateActivityCb_reflection_;
  delete stOperateActivityReward::default_instance_;
  delete stOperateActivityReward_reflection_;
  delete stOperateActivityRewardCb::default_instance_;
  delete stOperateActivityRewardCb_reflection_;
  delete stOperateActivityLotteryReward::default_instance_;
  delete stOperateActivityLotteryReward_reflection_;
  delete stOperateActivityLotteryRewardCb::default_instance_;
  delete stOperateActivityLotteryRewardCb_reflection_;
  delete stReqPayTypeCb::default_instance_;
  delete stReqPayTypeCb_reflection_;
  delete stReqUserRankInfo::default_instance_;
  delete stReqUserRankInfo_reflection_;
  delete userSortInfo::default_instance_;
  delete userSortInfo_reflection_;
  delete stUserRankInfoResult::default_instance_;
  delete stUserRankInfoResult_reflection_;
  delete stEmeraldDreamCopymapFail::default_instance_;
  delete stEmeraldDreamCopymapFail_reflection_;
  delete stKillEmeraldDreamBoss::default_instance_;
  delete stKillEmeraldDreamBoss_reflection_;
  delete strRemoveNum::default_instance_;
  delete strRemoveNum_reflection_;
  delete stCopyMapInfo::default_instance_;
  delete stCopyMapInfo_reflection_;
  delete stCopyMapInfoResult::default_instance_;
  delete stCopyMapInfoResult_reflection_;
  delete stRealTimeTeamMatch::default_instance_;
  delete stRealTimeTeamMatch_reflection_;
  delete stOnPubLeaveTeam::default_instance_;
  delete stOnPubLeaveTeam_reflection_;
  delete stDeductMoney::default_instance_;
  delete stDeductMoney_reflection_;
  delete stDeductMoneyResult::default_instance_;
  delete stDeductMoneyResult_reflection_;
  delete stGiveReward::default_instance_;
  delete stGiveReward_reflection_;
  delete stGiveRewardResult::default_instance_;
  delete stGiveRewardResult_reflection_;
  delete stReqCheckMission::default_instance_;
  delete stReqCheckMission_reflection_;
  delete stReqCheckTask::default_instance_;
  delete stReqCheckTask_reflection_;
  delete stReqEnterTaskLv::default_instance_;
  delete stReqEnterTaskLv_reflection_;
  delete stReqDisbandTeam::default_instance_;
  delete stReqDisbandTeam_reflection_;
  delete stReqDrawInviteReward::default_instance_;
  delete stReqDrawInviteReward_reflection_;
  delete stReqDrawInviteRewardCb::default_instance_;
  delete stReqDrawInviteRewardCb_reflection_;
  delete stReqDrawUseInviteReward::default_instance_;
  delete stReqDrawUseInviteReward_reflection_;
  delete stRoleInfo::default_instance_;
  delete stRoleInfo_reflection_;
  delete stHeroLeagueEnterCopyMap::default_instance_;
  delete stHeroLeagueEnterCopyMap_reflection_;
  delete stHeroLeaguePkWithRobot::default_instance_;
  delete stHeroLeaguePkWithRobot_reflection_;
  delete stReqHeroLeagueCheck::default_instance_;
  delete stReqHeroLeagueCheck_reflection_;
  delete stHeroLeagueMatch::default_instance_;
  delete stHeroLeagueMatch_reflection_;
  delete stPubRoleInfo::default_instance_;
  delete stPubRoleInfo_reflection_;
  delete stHeroLeagueResult::default_instance_;
  delete stHeroLeagueResult_reflection_;
  delete stSynRoleList::default_instance_;
  delete stSynRoleList_reflection_;
  delete stTeam::default_instance_;
  delete stTeam_reflection_;
  delete stSynRoleListResult::default_instance_;
  delete stSynRoleListResult_reflection_;
  delete stSynChampionInfo::default_instance_;
  delete stSynChampionInfo_reflection_;
  delete stReqSynChampionInfo::default_instance_;
  delete stReqSynChampionInfo_reflection_;
  delete stReqWorskip::default_instance_;
  delete stReqWorskip_reflection_;
  delete stWorskipResult::default_instance_;
  delete stWorskipResult_reflection_;
  delete stReqRedPoint::default_instance_;
  delete stReqRedPoint_reflection_;
  delete stRedPointResult::default_instance_;
  delete stRedPointResult_reflection_;
  delete stInterceptResultToGlobal::default_instance_;
  delete stInterceptResultToGlobal_reflection_;
  delete stSynMemberInfo::default_instance_;
  delete stSynMemberInfo_reflection_;
  delete stRetRoomInfo::default_instance_;
  delete stRetRoomInfo_reflection_;
  delete stRetAddTeamMember::default_instance_;
  delete stRetAddTeamMember_reflection_;
  delete MarryObjInfo::default_instance_;
  delete MarryObjInfo_reflection_;
  delete stReqPropose::default_instance_;
  delete stReqPropose_reflection_;
  delete stReqAgreeMarry::default_instance_;
  delete stReqAgreeMarry_reflection_;
  delete stReqQuitWedding::default_instance_;
  delete stReqQuitWedding_reflection_;
  delete stReqReEnterWedding::default_instance_;
  delete stReqReEnterWedding_reflection_;
  delete stReqBuyFireWork::default_instance_;
  delete stReqBuyFireWork_reflection_;
  delete stReqAgreeInvite::default_instance_;
  delete stReqAgreeInvite_reflection_;
  delete stReqTakeCandy::default_instance_;
  delete stReqTakeCandy_reflection_;
  delete stNotifyCoupleMarry::default_instance_;
  delete stNotifyCoupleMarry_reflection_;
  delete stSendWeedingRing::default_instance_;
  delete stSendWeedingRing_reflection_;
  delete stMarryInfoCb::default_instance_;
  delete stMarryInfoCb_reflection_;
  delete stUseFireWork::default_instance_;
  delete stUseFireWork_reflection_;
  delete stRetMarryInfoToCouple::default_instance_;
  delete stRetMarryInfoToCouple_reflection_;
  delete stNotifyCoupleMarryCb::default_instance_;
  delete stNotifyCoupleMarryCb_reflection_;
  delete stRetForceDivorce::default_instance_;
  delete stRetForceDivorce_reflection_;
  delete stRetForceDivorceCb::default_instance_;
  delete stRetForceDivorceCb_reflection_;
  delete stRetRejectDivorce::default_instance_;
  delete stRetRejectDivorce_reflection_;
  delete stRetDelUserOnlineMarryInfo::default_instance_;
  delete stRetDelUserOnlineMarryInfo_reflection_;
  delete stReqSynGuildBlackMarketLv::default_instance_;
  delete stReqSynGuildBlackMarketLv_reflection_;
  delete stSynGuildBlackMarketLvResult::default_instance_;
  delete stSynGuildBlackMarketLvResult_reflection_;
  delete stGloryUserPart::default_instance_;
  delete stGloryUserPart_reflection_;
  delete stGloryUserDetail::default_instance_;
  delete stGloryUserDetail_reflection_;
  delete stGloryUser::default_instance_;
  delete stGloryUser_reflection_;
  delete stEnterResBattle::default_instance_;
  delete stEnterResBattle_reflection_;
  delete stBroadResBattleInvite::default_instance_;
  delete stBroadResBattleInvite_reflection_;
  delete stPubOffline::default_instance_;
  delete stPubOffline_reflection_;
  delete stDiscoverConsume::default_instance_;
  delete stDiscoverConsume_reflection_;
  delete stSynCoupleInfo::default_instance_;
  delete stSynCoupleInfo_reflection_;
  delete stSynResBattleUserData::default_instance_;
  delete stSynResBattleUserData_reflection_;
  delete stSynResBattleTop50::default_instance_;
  delete stSynResBattleTop50_reflection_;
  delete stSynResBattleKing::default_instance_;
  delete stSynResBattleKing_reflection_;
  delete stReplyInviteResBattle::default_instance_;
  delete stReplyInviteResBattle_reflection_;
  delete stSynGloryKingTitle::default_instance_;
  delete stSynGloryKingTitle_reflection_;
  delete stPubOnline::default_instance_;
  delete stPubOnline_reflection_;
  delete stResBattleSend2Pub::default_instance_;
  delete stResBattleSend2Pub_reflection_;
  delete stServerParamItem::default_instance_;
  delete stServerParamItem_reflection_;
  delete stServerParamSend2Game::default_instance_;
  delete stServerParamSend2Game_reflection_;
  delete stSynUserPhotoID::default_instance_;
  delete stSynUserPhotoID_reflection_;
  delete stUseLvlBox::default_instance_;
  delete stUseLvlBox_reflection_;
  delete stUseLvlBoxRes::default_instance_;
  delete stUseLvlBoxRes_reflection_;
  delete stRechangeStatistics::default_instance_;
  delete stRechangeStatistics_reflection_;
  delete stNftItem::default_instance_;
  delete stNftItem_reflection_;
  delete stGlobal2GameQueryUserNft::default_instance_;
  delete stGlobal2GameQueryUserNft_reflection_;
  delete stGame2GlobalQueryUserNftResult::default_instance_;
  delete stGame2GlobalQueryUserNftResult_reflection_;
  delete stGlobal2GameChangeNftItem::default_instance_;
  delete stGlobal2GameChangeNftItem_reflection_;
  delete stGame2GlobalChangeNftItemResult::default_instance_;
  delete stGame2GlobalChangeNftItemResult_reflection_;
  delete stGame2GlobalNftVipGift::default_instance_;
  delete stGame2GlobalNftVipGift_reflection_;
  delete stRetNftOfflineUserData::default_instance_;
  delete stRetNftOfflineUserData_reflection_;
  delete stRetChangeNftOfflineUserData::default_instance_;
  delete stRetChangeNftOfflineUserData_reflection_;
  delete stSendUserLog::default_instance_;
  delete stSendUserLog_reflection_;
  delete stReqKillUserOut::default_instance_;
  delete stReqKillUserOut_reflection_;
  delete stKillUserOutResult::default_instance_;
  delete stKillUserOutResult_reflection_;
  delete stReqSetUserGMType::default_instance_;
  delete stReqSetUserGMType_reflection_;
  delete stSetUserGMTypeResult::default_instance_;
  delete stSetUserGMTypeResult_reflection_;
  delete stReqBanUser::default_instance_;
  delete stReqBanUser_reflection_;
  delete stBanUserResult::default_instance_;
  delete stBanUserResult_reflection_;
  delete stSendMailAttach::default_instance_;
  delete stSendMailAttach_reflection_;
  delete stSendMail2User::default_instance_;
  delete stSendMail2User_reflection_;
  delete stSendMail2UserResult::default_instance_;
  delete stSendMail2UserResult_reflection_;
  delete stWebMotifyUserInfo::default_instance_;
  delete stWebMotifyUserInfo_reflection_;
  delete stWebMotifyUserInfoRet::default_instance_;
  delete stWebMotifyUserInfoRet_reflection_;
  delete stAddOrUpdateNotice::default_instance_;
  delete stAddOrUpdateNotice_reflection_;
  delete stDelNotice::default_instance_;
  delete stDelNotice_reflection_;
  delete stWebNotifyRechargeInfo::default_instance_;
  delete stWebNotifyRechargeInfo_reflection_;
  delete stAddGiftBagCfg::default_instance_;
  delete stAddGiftBagCfg_reflection_;
  delete stDelGiftBagCfg::default_instance_;
  delete stDelGiftBagCfg_reflection_;
  delete stAddBlackAndWhite::default_instance_;
  delete stAddBlackAndWhite_reflection_;
  delete stSetServerMaintenanceTime::default_instance_;
  delete stSetServerMaintenanceTime_reflection_;
  delete stGetSvrConfig::default_instance_;
  delete stGetSvrConfig_reflection_;
  delete stRetSvrConfig::default_instance_;
  delete stRetSvrConfig_reflection_;
  delete stUpdateSvrCfg::default_instance_;
  delete stUpdateSvrCfg_reflection_;
  delete stNotifyWebOnlineNum::default_instance_;
  delete stNotifyWebOnlineNum_reflection_;
  delete stEnterSelectPage::default_instance_;
  delete stEnterSelectPage_reflection_;
  delete stNotifyWebCreateRole::default_instance_;
  delete stNotifyWebCreateRole_reflection_;
  delete stSendGuildLog::default_instance_;
  delete stSendGuildLog_reflection_;
  delete sstSendGuildResLog::default_instance_;
  delete sstSendGuildResLog_reflection_;
  delete stSendModuleLog::default_instance_;
  delete stSendModuleLog_reflection_;
  delete stReqGetTxGiftBag::default_instance_;
  delete stReqGetTxGiftBag_reflection_;
  delete stRetGetTxGiftBag::default_instance_;
  delete stRetGetTxGiftBag_reflection_;
  delete stUpdateSvrOpenTime::default_instance_;
  delete stUpdateSvrOpenTime_reflection_;
  delete stResourceChgLog::default_instance_;
  delete stResourceChgLog_reflection_;
  delete stUseInviteCode::default_instance_;
  delete stUseInviteCode_reflection_;
  delete stUseInviteCodeCb::default_instance_;
  delete stUseInviteCodeCb_reflection_;
  delete stReqLimitPetActivityData::default_instance_;
  delete stReqLimitPetActivityData_reflection_;
  delete stAcitivityLimitPetItem::default_instance_;
  delete stAcitivityLimitPetItem_reflection_;
  delete stSendLimitPetActivityData::default_instance_;
  delete stSendLimitPetActivityData_reflection_;
  delete stSendShutDown::default_instance_;
  delete stSendShutDown_reflection_;
  delete stWeb2GlobalQueryUserNft::default_instance_;
  delete stWeb2GlobalQueryUserNft_reflection_;
  delete stGlobal2WebQueryUserNftResult::default_instance_;
  delete stGlobal2WebQueryUserNftResult_reflection_;
  delete stWeb2GlobalChangeNftItem::default_instance_;
  delete stWeb2GlobalChangeNftItem_reflection_;
  delete stGlobal2WebChangeNftItemResult::default_instance_;
  delete stGlobal2WebChangeNftItemResult_reflection_;
}

void protobuf_AddDesc_Global_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Global.proto\022\006Global\"{\n\rstLoginGlobal\022"
    "\017\n\007svrType\030\001 \001(\r\022\r\n\005svrID\030\002 \001(\r\022\n\n\002ip\030\003 "
    "\001(\t\022\014\n\004port\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\001\"\027\n\nProtoFunID\022\t\n\005FunID\020\001\"\200\002\n\014stCreate"
    "Role\022\017\n\007account\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\016\n\006g"
    "ateID\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\016\n"
    "\006headID\030\006 \001(\r\022\016\n\006faceID\030\007 \001(\r\022\020\n\010clientI"
    "P\030\010 \001(\t\022\020\n\010deviceID\030\t \001(\t\022\014\n\004opID\030\n \001(\r\022"
    "\021\n\tchannelID\030\013 \001(\t\022\020\n\010serverID\030\014 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\001\"\325\001\n\022stCreateRoleResult\022\017\n\007retCode"
    "\030\001 \001(\r\022\017\n\007account\030\002 \001(\t\022\016\n\006charID\030\003 \001(\r\022"
    "\014\n\004name\030\004 \001(\t\022\r\n\005level\030\005 \001(\r\022\013\n\003job\030\006 \001("
    "\r\022\013\n\003sex\030\007 \001(\r\022\020\n\010serverID\030\010 \001(\r\022\022\n\ncrea"
    "teTime\030\t \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\002\"\240\001\n\rstReqSnapData"
    "\022\017\n\007account\030\001 \001(\t\022\016\n\006gateID\030\002 \001(\r\022\n\n\002ip\030"
    "\003 \001(\t\022\020\n\010deviceID\030\004 \001(\t\022\014\n\004opID\030\005 \001(\r\022\020\n"
    "\010serverID\030\006 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020\003\"v\n\nstSnapData\022"
    "\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003"
    " \001(\r\022\017\n\007account\030\004 \001(\t\022\013\n\003job\030\005 \001(\r\022\013\n\003se"
    "x\030\006 \001(\r\022\020\n\010serverID\030\007 \001(\r\"t\n\rstRetSnapDa"
    "ta\022 \n\004data\030\001 \003(\0132\022.Global.stSnapData\022\017\n\007"
    "account\030\002 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020\004\"\310\001\n\rstReqLoadDat"
    "a\022\021\n\tgameSvrID\030\001 \001(\r\022\021\n\tgateSvrID\030\002 \001(\r\022"
    "\017\n\007account\030\003 \001(\t\022\016\n\006charID\030\004 \001(\r\022\n\n\002ip\030\005"
    " \001(\t\022\020\n\010deviceID\030\006 \001(\t\022\021\n\tchannelID\030\007 \001("
    "\t\022\r\n\005netIP\030\010 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\005\"\222\001\n\022stGateFor"
    "wardProto\022\016\n\006charID\030\001 \001(\r\022\r\n\005modID\030\002 \001(\r"
    "\022\r\n\005funID\030\003 \001(\r\022\016\n\006cmdLen\030\004 \001(\r\022\014\n\004data\030"
    "\005 \001(\014\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\006\"\221\001\n\021stForwardProto2Me\022\016\n"
    "\006charID\030\001 \001(\r\022\r\n\005modID\030\002 \001(\r\022\r\n\005funID\030\003 "
    "\001(\r\022\016\n\006cmdLen\030\004 \001(\r\022\014\n\004data\030\005 \001(\014\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\007\"\210\001\n\030stBroadcastProto2AllUser\022\r\n\005modI"
    "D\030\001 \001(\r\022\r\n\005funID\030\002 \001(\r\022\016\n\006cmdLen\030\003 \001(\r\022\014"
    "\n\004data\030\004 \001(\014\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\010\"\360\001\n\021stLoginGlobal"
    "Fail\022\017\n\007account\030\001 \001(\t\0226\n\010erroCode\030\002 \001(\0162"
    "$.Global.stLoginGlobalFail.FailReason\"`\n"
    "\nFailReason\022\020\n\014HAS_LOGIN_IN\020\001\022\017\n\013CREATE_"
    "FAIL\020\002\022\022\n\016LOAD_DATA_FAIL\020\003\022\020\n\014FORBID_LOG"
    "IN\020\004\022\t\n\005OTHER\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\002"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020\t\"e\n\020stNotifyLog"
    "inOut\022\016\n\006charID\030\001 \001(\r\022\017\n\007account\030\002 \001(\t\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020\n\"S\n\020stGameSvrStartUp\022\r\n\005svrID\030\001 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\n\"Q\n\rstKillUserOut\022\016\n\006charID"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\013\"-\n\017stServerCfgPair\022\013\n\003k"
    "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"p\n\022stNotifyGateS"
    "vrCfg\022(\n\007cfgPair\030\001 \003(\0132\027.Global.stServer"
    "CfgPair\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\014\"\200\001\n\017stReloginGlobal\022\n\n"
    "\002ip\030\001 \001(\t\022\016\n\006device\030\002 \001(\t\022\016\n\006charID\030\003 \001("
    "\r\022\017\n\007account\030\004 \001(\t\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\r\"\204\001\n\023stPlaye"
    "rAutoConnect\022\n\n\002ip\030\001 \001(\t\022\016\n\006device\030\002 \001(\t"
    "\022\016\n\006charID\030\003 \001(\r\022\017\n\007account\030\004 \001(\t\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\016\"X\n\023stClientLostConnect\022\017\n\007account\030\001 "
    "\003(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\017\"V\n\021stAskIsNewAccount\022\017\n\007ac"
    "count\030\001 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\020\"b\n\016stIsNewAccount\022"
    "\r\n\005isNew\030\001 \001(\010\022\017\n\007account\030\002 \001(\t\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\021\"\263\001\n\016stSaveRoleInfo\022\036\n\004type\030\001 \001(\0162\020.Glo"
    "bal.SaveType\022\016\n\006charID\030\002 \001(\r\022\016\n\006gameID\030\003"
    " \001(\r\022\017\n\007account\030\004 \001(\t\022\020\n\010dataSize\030\005 \001(\r\022"
    "\014\n\004data\030\006 \001(\014\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020\001\"\204\002\n\rstRetRoleInf"
    "o\022\016\n\006charID\030\001 \001(\r\022\016\n\006gateID\030\002 \001(\r\022\n\n\002ip\030"
    "\003 \001(\t\022\017\n\007account\030\004 \001(\t\022\020\n\010dataSize\030\005 \001(\r"
    "\022\014\n\004data\030\006 \001(\014\0220\n\reloadDataType\030\007 \001(\0162\031."
    "Global.eLoadRoleDataType\022\020\n\010deviceID\030\010 \001"
    "(\t\022\021\n\tchannelID\030\t \001(\t\022\r\n\005netIP\030\n \001(\t\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\002\"\302\004\n\025stUserEnterMapSuccess\022\016\n\006char"
    "ID\030\001 \001(\r\022\016\n\006gmType\030\002 \001(\r\022\r\n\005level\030\003 \001(\r\022"
    "\013\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\026\n\016fetchLilian"
    "Num\030\006 \001(\r\022\020\n\010serverID\030\007 \001(\r\022\r\n\005vipLv\030\010 \001"
    "(\r\022\016\n\006headID\030\t \001(\r\022\016\n\006bodyID\030\n \001(\r\022\020\n\010we"
    "aponID\030\013 \001(\r\022\020\n\010cloackID\030\014 \001(\r\022\016\n\006wingID"
    "\030\r \001(\r\022\016\n\006shoeID\030\016 \001(\r\022\023\n\013fashionHair\030\017 "
    "\001(\r\022\023\n\013fashionFace\030\020 \001(\r\022\023\n\013fashionBody\030"
    "\021 \001(\r\022\025\n\rfashionWeapon\030\022 \001(\r\022\023\n\013fashionS"
    "hoe\030\023 \001(\r\022\031\n\021fashionDecoration\030\024 \001(\r\022\026\n\016"
    "compensationID\030\025 \001(\r\022\020\n\010effectID\030\026 \001(\r\022\023"
    "\n\013wingBreakLv\030\027 \001(\r\022\026\n\016pubServerIndex\030\030 "
    "\001(\r\022\021\n\tpubCharID\030\031 \001(\r\022\020\n\010areaCode\030\032 \001(\r"
    "\022\017\n\007photoID\030\033 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\003\"J\n\016stRecharg"
    "eInfo\022\016\n\006itemID\030\001 \001(\r\022\r\n\005money\030\002 \001(\r\022\013\n\003"
    "tid\030\003 \001(\t\022\014\n\004data\030\004 \001(\t\"\222\001\n\016stUserRechar"
    "ge\022\016\n\006charID\030\001 \001(\r\022,\n\014rechargeInfo\030\002 \003(\013"
    "2\026.Global.stRechargeInfo\022\020\n\010isExtend\030\003 \001"
    "(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\004\"\222\001\n\013stProcessGM\022\035\n\004type\030\001 \001"
    "(\0162\017.Global.eGMType\022\020\n\010intParam\030\002 \003(\r\022\020\n"
    "\010strParam\030\003 \003(\t\022\016\n\006charID\030\004 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\005\"d\n\023stSynFetchLilianNum\022\016\n\006charID\030\001 \001(\r"
    "\022\013\n\003num\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020\006\"\235\001\n\014stSynGuildID"
    "\022\016\n\006charID\030\001 \001(\r\022\017\n\007guildID\030\002 \001(\r\022\017\n\007gui"
    "ldLv\030\003 \001(\r\022\022\n\njoinInTime\030\004 \001(\r\022\025\n\rblackM"
    "arketLv\030\005 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020\007\"n\n\rstCreateGuild"
    "\022\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005badge\030"
    "\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\010\"Y\n\025stCreateGuildDecMoney"
    "\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\t\"i\n\024stForwardJ"
    "oininGuild\022\016\n\006charID\030\001 \001(\r\022\017\n\007guildID\030\002 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\n\"\210\001\n\024stAddGuildContribute\022\016"
    "\n\006charID\030\001 \001(\r\022\022\n\ncontribute\030\002 \001(\r\022\032\n\022to"
    "dayDayContribute\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\013\"\264\001\n\030stB"
    "roadcastGuildChatInfo\022\016\n\006charID\030\001 \001(\r\022\r\n"
    "\005vipLv\030\002 \001(\r\022\017\n\007content\030\003 \001(\t\022\017\n\007isVoice"
    "\030\004 \001(\010\022\020\n\010voiceUrl\030\005 \001(\t\022\023\n\013voiceLenght\030"
    "\006 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\014\"w\n\013stGuildPray\022\016\n\006charID"
    "\030\001 \001(\r\022\022\n\nbuildingLv\030\002 \001(\r\022\022\n\nextraBoxID"
    "\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\r\"o\n\016stSynUserLevel\022\016\n\006ch"
    "arID\030\001 \001(\r\022\n\n\002lv\030\002 \001(\r\022\017\n\007levelup\030\003 \001(\010\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\016\"h\n\023stSynCopymapStarNum\022\016\n\006char"
    "ID\030\001 \001(\r\022\017\n\007starNum\030\002 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\017\"|\n\024s"
    "tSynUserBattlePower\022\016\n\006charID\030\001 \001(\r\022\023\n\013b"
    "attlePower\030\002 \001(\r\022\r\n\005maxHP\030\003 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\020\"\256\001\n\022stSendTeamChatInfo\022\016\n\006charID\030\001 \001(\r"
    "\022\017\n\007content\030\002 \001(\t\022\r\n\005vipLv\030\003 \001(\r\022\017\n\007isVo"
    "ice\030\004 \001(\010\022\020\n\010voiceUrl\030\005 \001(\t\022\023\n\013voiceLeng"
    "ht\030\006 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\021\"V\n\022stTeamLeaveCopyMap"
    "\022\016\n\006teamID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\022\"j\n\021stTreasure"
    "Combine\022\016\n\006charID\030\001 \001(\r\022\023\n\013combineType\030\002"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\023\"l\n\030stTreasureCombineSucce"
    "ss\022\016\n\006charID\030\001 \001(\r\022\016\n\006itemID\030\002 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\024\"j\n\025stBuyPeaceModubleTime\022\016\n\006charID\030"
    "\001 \001(\r\022\017\n\007addTime\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\025\"i\n\022stRe"
    "qChangeGameSvr\022\016\n\006charID\030\001 \001(\r\022\021\n\tgameSv"
    "rID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020\026\"m\n\026stConfirmChangeGa"
    "meSvr\022\016\n\006charID\030\001 \001(\r\022\021\n\tgameSvrID\030\002 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\027\"\264\001\n\025stRetOtherUserData2Me\022\020\n\010"
    "myCharID\030\001 \001(\r\022\023\n\013otherCharID\030\002 \001(\r\022\017\n\007i"
    "sRobot\030\003 \001(\010\022\020\n\010dataSize\030\004 \001(\r\022\014\n\004data\030\005"
    " \001(\014\022\021\n\tguildName\030\006 \001(\t\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\030\"+\n\014stM"
    "ailAttach\022\016\n\006itemID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\177"
    "\n\024stObtainItemFromMail\022%\n\007attachs\030\001 \003(\0132"
    "\024.Global.stMailAttach\022\016\n\006charID\030\002 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\031\"p\n\020stSynAddTreasure\022\r\n\005resID\030\001 \001"
    "(\r\022\013\n\003num\030\002 \001(\r\022\016\n\006charID\030\003 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\032\"\244\002\n\022stBeginPKWithOther\022\020\n\010myCharID\030\001 \001"
    "(\r\022\023\n\013otherCharID\030\002 \001(\r\022\020\n\010dataSize\030\003 \001("
    "\r\022\014\n\004data\030\004 \001(\014\0220\n\004type\030\005 \001(\0162\".Global.s"
    "tBeginPKWithOther.ePKType\022\025\n\rchallengeRa"
    "nk\030\006 \001(\r\022\017\n\007robotID\030\007 \001(\r\";\n\007ePKType\022\r\n\t"
    "eArena_PK\020\001\022\016\n\neLeitai_PK\020\002\022\021\n\reIntercep"
    "t_PK\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\033\"\217\001\n\025stUserLeitaiChallen"
    "ge\022\r\n\005round\030\001 \001(\r\022\016\n\006charID\030\002 \001(\r\022\014\n\004mod"
    "e\030\003 \001(\r\022\027\n\017challengeCharID\030\004 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020\034\"\203\001\n\017stArenaPKResult\022\016\n\006charID\030\001 \001(\r\022\013"
    "\n\003win\030\002 \001(\010\022\014\n\004rank\030\003 \001(\r\022\023\n\013historyRank"
    "\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\035\"e\n\022stSynDrawHeroScore\022\016"
    "\n\006charID\030\001 \001(\r\022\r\n\005score\030\002 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\036\""
    "f\n\021stUpLeitaiUseTime\022\016\n\006charID\030\001 \001(\r\022\017\n\007"
    "useTime\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020\037\"U\n\020stUserLeaveGu"
    "ild\022\017\n\007charIDs\030\001 \003(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020 \"=\n\025stEnte"
    "rCopymapMemInfo\022\016\n\006charID\030\001 \001(\r\022\024\n\014addDa"
    "magePer\030\002 \001(\r\"\273\001\n\022stTeamEnterCopyMap\022\021\n\t"
    "copymapID\030\001 \001(\r\022\016\n\006teamID\030\002 \001(\r\0220\n\tmemer"
    "Info\030\003 \003(\0132\035.Global.stEnterCopymapMemInf"
    "o\022\016\n\006bossHP\030\004 \001(\r\022\016\n\006bossLv\030\005 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020!\"u\n\030stOne2OnePVPEnterCopyMap\022\021\n\tmembe"
    "rIDs\030\001 \003(\r\022\024\n\014pkWithFriend\030\002 \001(\010\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020\"\"\254\001\n\020stForwardCapture\022\016\n\006charID\030\001 \001(\r\022"
    "\017\n\007otherID\030\002 \001(\r\022\021\n\tcombineID\030\003 \001(\r\022\017\n\007r"
    "esType\030\004 \001(\r\022\013\n\003num\030\005 \001(\r\022\024\n\014multiCaptur"
    "e\030\006 \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\"\"2\n\023stCaptureRewardItem"
    "\022\016\n\006itemID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\277\001\n\017stCapt"
    "ureReward\022\016\n\006charID\030\001 \001(\r\022\016\n\006dropID\030\002 \001("
    "\r\022\021\n\tmoneyCoef\030\003 \001(\r\022\017\n\007expCoef\030\004 \001(\r\022\023\n"
    "\013obtainPiece\030\005 \001(\010\022\013\n\003num\030\006 \001(\r\022\024\n\014multi"
    "Capture\030\007 \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020$\"\307\001\n\034stRealTimeBa"
    "ttleEnterCopymap\022\'\n\006pkType\030\001 \001(\0162\027.Globa"
    "l.eRealTimePKType\022\017\n\007teamAID\030\002 \001(\r\022\017\n\007te"
    "amBID\030\003 \001(\r\022\024\n\014teamAMembers\030\004 \003(\r\022\024\n\014tea"
    "mBMembers\030\005 \003(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020%\"b\n\021stNotifyAdd"
    "Lilian\022\016\n\006charID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020&\"j\n\023stEnterGuildCopymap\022\021\n\tguildNam"
    "e\030\001 \001(\t\022\016\n\006charID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\'\"k\n\021stS"
    "ynMyContribyte\022\016\n\006charID\030\001 \001(\r\022\024\n\014myCont"
    "ribute\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020(\"g\n\022stOnlineUserGM"
    "Type\022\016\n\006charID\030\001 \001(\r\022\017\n\007gmValue\030\002 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020)\"V\n\022stForbidOnlineUser\022\016\n\006charID\030"
    "\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020*\"\272\001\n\022stOne2OnePVPFinish\022\017"
    "\n\007charID1\030\001 \001(\r\022\016\n\006score1\030\002 \001(\r\022\014\n\004win1\030"
    "\003 \001(\010\022\017\n\007charID2\030\004 \001(\r\022\016\n\006score2\030\005 \001(\r\022\014"
    "\n\004win2\030\006 \001(\010\022\024\n\014pkWithFriend\030\007 \001(\010\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020+\"6\n\020stActivityConfig\022\022\n\nactivityID\030\001"
    " \001(\r\022\016\n\006cofing\030\002 \001(\t\"o\n\023stSynActivityCon"
    "fig\022&\n\004data\030\001 \003(\0132\030.Global.stActivityCon"
    "fig\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020,\"Y\n\025stCaptureTreasureFail\022\016"
    "\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020-\"-\n\rstCharID2Ran"
    "k\022\016\n\006charID\030\001 \001(\r\022\014\n\004rank\030\002 \001(\r\"P\n\020stRan"
    "kModuleInfo\022\020\n\010moduleID\030\001 \001(\r\022*\n\013charID2"
    "Rank\030\002 \003(\0132\025.Global.stCharID2Rank\"o\n\023stS"
    "ynRankModuleInfo\022&\n\004data\030\001 \003(\0132\030.Global."
    "stRankModuleInfo\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\003\"\027\n\nProtoFunID\022\t\n\005FunID\020.\".\n\017stGiftBagR"
    "eward\022\016\n\006itemID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\201\001\n\023s"
    "tGiveGiftBagReward\022\016\n\006charID\030\001 \001(\r\022(\n\007re"
    "wards\030\002 \003(\0132\027.Global.stGiftBagReward\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020/\"p\n\022stNotifyGameSvrCfg\022(\n\007cfgPair\030"
    "\001 \003(\0132\027.Global.stServerCfgPair\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\0200"
    "\"\211\001\n\024stNotifyCurEquipInfo\022\016\n\006charID\030\001 \001("
    "\r\022\r\n\005index\030\002 \001(\r\022\016\n\006itemID\030\003 \001(\r\022\020\n\010effe"
    "ctID\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\0201\"~\n\rstReloginGame\022\017\n"
    "\007account\030\001 \001(\t\022\016\n\006charID\030\002 \001(\r\022\n\n\002ip\030\003 \001"
    "(\t\022\016\n\006device\030\004 \001(\t\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\0202\"\202\001\n\023stFirst"
    "KillBaseInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001"
    "(\t\022\013\n\003job\030\003 \001(\r\022\013\n\003sex\030\004 \001(\r\022\r\n\005level\030\005 "
    "\001(\r\022\023\n\013battlePower\030\006 \001(\r\022\017\n\007photoID\030\007 \001("
    "\r\"\211\001\n\023stTeamCopyMapFinish\022\021\n\tcopymapID\030\001"
    " \001(\r\022-\n\010userInfo\030\002 \003(\0132\033.Global.stFirstK"
    "illBaseInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\0203\"t\n\035stUserOnlineSen"
    "dFirstKillInfo\022\016\n\006charID\030\001 \001(\r\022\021\n\tcopyma"
    "pID\030\002 \003(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\0204\"\217\001\n\025stTeamFinishFirs"
    "tKill\022\021\n\tcopymapID\030\001 \001(\r\022\017\n\007charID1\030\002 \001("
    "\r\022\017\n\007charID2\030\003 \001(\r\022\017\n\007charID3\030\004 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\0205\"[\n\027stSetClearWorldBossTime\022\016\n\006char"
    "ID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\0206\"h\n\024stSetWorldBossBuyN"
    "um\022\016\n\006charID\030\001 \001(\r\022\016\n\006buyNum\030\002 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\0207\"[\n\013stUserDecSP\022\016\n\006charID\030\001 \001(\r\022\n\n\002s"
    "p\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\0208\"c\n\017stUsreDecLilian\022\016\n\006"
    "charID\030\001 \001(\r\022\016\n\006lilian\030\002 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\0209\"2"
    "\n\020stUserDamagePair\022\016\n\006charID\030\001 \001(\r\022\016\n\006da"
    "mage\030\002 \001(\r\"\227\001\n\022stGuildCopymapFail\022,\n\ndam"
    "ageInfo\030\001 \003(\0132\030.Global.stUserDamagePair\022"
    "\016\n\006bossHP\030\002 \001(\r\022\021\n\tcopymapID\030\003 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020:\"\237\001\n\026stGuildCopymapKillBoss\022,\n\ndamag"
    "eInfo\030\001 \003(\0132\030.Global.stUserDamagePair\022\021\n"
    "\tcopymapID\030\002 \001(\r\022\022\n\nkillCharID\030\003 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020;\"\210\001\n\026stWorldBossCopymapFail\022,\n\ndam"
    "ageInfo\030\001 \003(\0132\030.Global.stUserDamagePair\022"
    "\016\n\006bossHP\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020<\"\225\001\n\017stKillWorl"
    "dBoss\022,\n\ndamageInfo\030\001 \003(\0132\030.Global.stUse"
    "rDamagePair\022\022\n\nkillCharID\030\002 \001(\r\022\016\n\006bossI"
    "D\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020=\"h\n\025stDrawHeroScoreRewa"
    "rd\022\016\n\006charID\030\001 \001(\r\022\r\n\005boxID\030\002 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020>\"g\n\024stDrawHeroRankReward\022\016\n\006charID\030\001 "
    "\001(\r\022\r\n\005boxID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\?\"2\n\023stCompen"
    "santionItem\022\016\n\006itemID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r"
    "\"\233\001\n\023stSetCompensationID\022\016\n\006charID\030\001 \001(\r"
    "\022\026\n\016compensationID\030\002 \001(\r\022*\n\005items\030\003 \003(\0132"
    "\033.Global.stCompensantionItem\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020@\"S"
    "\n\022stSetOpenServerDay\022\013\n\003day\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020A\"l\n\026stSynGuildLv2AllMember\022\017\n\007members"
    "\030\001 \003(\r\022\017\n\007guildLv\030\002 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020B\"f\n\021stF"
    "orwardChgBadge\022\016\n\006charID\030\001 \001(\r\022\017\n\007badgeI"
    "D\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020C\"o\n\030stWorldBossBuyDecDi"
    "amond\022\016\n\006charID\030\001 \001(\r\022\021\n\thasBuyNum\030\002 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020D\"\234\001\n\024stGuildDonateSuccess\022\016\n\006c"
    "harID\030\001 \001(\r\022\027\n\017todayContribute\030\002 \001(\r\022\025\n\r"
    "addContribute\030\003 \001(\r\022\022\n\ndonateType\030\004 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020E\"X\n\024stUserLeaveWorldBoss\022\016\n\006cha"
    "rID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020F\"\210\001\n\027stNotifyGameAuto"
    "Connect\022\017\n\007account\030\001 \001(\t\022\016\n\006charID\030\002 \001(\r"
    "\022\n\n\002ip\030\003 \001(\t\022\016\n\006device\030\004 \001(\t\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020G\"q"
    "\n\034stForwardDrawHeroScoreReward\022\016\n\006charID"
    "\030\001 \001(\r\022\017\n\007scoreID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020H\"x\n\023stN"
    "otifyArenaReward\022\016\n\006charID\030\001 \001(\r\022\017\n\007resT"
    "ype\030\002 \001(\r\022\016\n\006resNum\030\003 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020I\"\330\001\n\031"
    "stForwardInvestgateAnswer\022\021\n\tproblemID\030\001"
    " \001(\r\022\017\n\007answerA\030\002 \001(\010\022\017\n\007answerB\030\003 \001(\010\022\017"
    "\n\007answerC\030\004 \001(\010\022\017\n\007answerD\030\005 \001(\010\022\017\n\007answ"
    "erE\030\006 \001(\010\022\017\n\007answerF\030\007 \001(\010\022\017\n\007answerG\030\010 "
    "\001(\010\022\017\n\007answerH\030\t \001(\010\022\017\n\007answerI\030\n \001(\010\022\017\n"
    "\007answerJ\030\013 \001(\010\"\257\001\n\027ForwardInvestgateResu"
    "lt\022\017\n\007questID\030\001 \001(\r\0220\n\005infos\030\002 \003(\0132!.Glo"
    "bal.stForwardInvestgateAnswer\022\016\n\006charID\030"
    "\003 \001(\r\022\017\n\007useTime\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020J\"\242\001\n\022stG"
    "MModifyUserInfo\022\016\n\006charID\030\001 \001(\r\022\025\n\rnewbi"
    "eGuideID\030\002 \001(\r\022\020\n\010goldCoin\030\003 \001(\r\022\017\n\007diam"
    "ond\030\004 \001(\r\022\020\n\010vipPoint\030\005 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020K\"b\n"
    "\020stSynMyArenaRank\022\016\n\006charID\030\001 \001(\r\022\014\n\004ran"
    "k\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020L\"]\n\nstSynVipLv\022\016\n\006charI"
    "D\030\001 \001(\r\022\r\n\005vipLv\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020M\"X\n\024stNo"
    "tifyClearArenaCD\022\016\n\006charID\030\001 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020N\"t\n\033stReqResetArenaChallengeNum\022\016\n\006cha"
    "rID\030\001 \001(\r\022\023\n\013curResetNum\030\002 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020O"
    "\"]\n\031stNotfiyResetChallengeNum\022\016\n\006charID\030"
    "\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020P\"l\n\026stReqResetInterceptNu"
    "m\022\016\n\006charID\030\001 \001(\r\022\020\n\010resetNum\030\002 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020Q\"\\\n\030stNotifyClearInterceptCD\022\016\n\006cha"
    "rID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020R\"]\n\031stNotifyResetInte"
    "rceptNum\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020S\"i\n\024st"
    "NotifyGuardQuality\022\016\n\006charID\030\001 \001(\r\022\017\n\007qu"
    "ality\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020T\"`\n\034stNotifyGuardIn"
    "spiredSuccess\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020U\""
    "m\n\030stReqRefreshGuardQuality\022\016\n\006charID\030\001 "
    "\001(\r\022\017\n\007quality\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020V\"[\n\031stNoti"
    "fyClearOne2OneScore\022\014\n\004flag\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020W\"\\\n\032stClearOne2OneScoreSuccess\022\014\n\004fla"
    "g\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020X\"\227\001\n\021stInterceptReward\022"
    "\016\n\006charID\030\001 \001(\r\022\016\n\006resID1\030\002 \001(\r\022\017\n\007resNu"
    "m1\030\003 \001(\r\022\016\n\006resID2\030\004 \001(\r\022\017\n\007resNum2\030\005 \001("
    "\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020Y\"[\n\027stQuickFinishDecDiamond\022\016"
    "\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020Z\"_\n\033stQuickFinis"
    "hDiamondSuccess\022\016\n\006charID\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "[\"l\n\024stOne2OnePkWithRobot\022\016\n\006charID\030\001 \001("
    "\r\022\022\n\nrobotGroup\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\\\"Z\n\026stNot"
    "ifyUserBeginGuard\022\016\n\006charID\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020]\"_\n\033stNotifyUserInterceptResult\022\016\n\006ch"
    "arID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020^\"\225\001\n\027stNotifyCloseBe"
    "taReward\022\016\n\006charID\030\001 \001(\r\022\r\n\005boxID\030\002 \001(\r\022"
    "\023\n\013giveDiamond\030\003 \001(\r\022\024\n\014giveRecharge\030\004 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020_\":\n\034stEnterManorFightMapUser"
    "Info\022\016\n\006charID\030\001 \001(\r\022\n\n\002hp\030\002 \001(\r\"\377\001\n\024stE"
    "nterManorFightMap\0227\n\tguildAMem\030\001 \003(\0132$.G"
    "lobal.stEnterManorFightMapUserInfo\0227\n\tgu"
    "ildBMem\030\002 \003(\0132$.Global.stEnterManorFight"
    "MapUserInfo\022\017\n\007manorID\030\003 \001(\r\022\020\n\010fomation"
    "\030\004 \001(\r\022\017\n\007teamAID\030\005 \001(\r\022\017\n\007teamBID\030\006 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020`\"7\n\026stManorFightBattleProp\022\r\n\005"
    "curHP\030\001 \001(\r\022\016\n\006charID\030\002 \001(\r\"\335\001\n\022stFinish"
    "ManorFight\022\017\n\007manorID\030\001 \001(\r\022\020\n\010fomation\030"
    "\002 \001(\r\022\017\n\007teamAID\030\003 \001(\r\022\017\n\007teamBID\030\004 \001(\r\022"
    "\r\n\005bFail\030\005 \001(\010\022\017\n\007bFinish\030\006 \001(\010\0220\n\010userI"
    "nfo\030\007 \003(\0132\036.Global.stManorFightBattlePro"
    "p\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020a\"\271\001\n\013stExistName\022+\n\006result\030\001 "
    "\001(\0162\033.Global.stExistName.eResult\022\016\n\006char"
    "ID\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\"-\n\007eResult\022\014\n\010eSu"
    "ccess\020\001\022\024\n\020eName_Repetition\020\002\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020b\""
    "[\n\tstSynName\022\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001"
    "(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020c\"l\n\027stSynGloryfashionCharID\022"
    "\016\n\006charID\030\001 \001(\r\022\017\n\007buyTime\030\002 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020d\"\304\001\n\017stDevilCallItem\022\016\n\006itemId\030\001 \001(\r\022\r"
    "\n\005name1\030\002 \001(\t\022\017\n\007charID1\030\003 \001(\r\022\r\n\005name2\030"
    "\004 \001(\t\022\017\n\007charID2\030\005 \001(\r\022\r\n\005name3\030\006 \001(\t\022\017\n"
    "\007charID3\030\007 \001(\r\022\017\n\007hasPass\030\010 \001(\010\022\026\n\016bossd"
    "rawstatus\030\t \001(\r\022\030\n\020commondrawstatus\030\n \001("
    "\r\"y\n\016stAllDevilCall\022\016\n\006charID\030\001 \001(\r\022%\n\004i"
    "tem\030\002 \003(\0132\027.Global.stDevilCallItem\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020e\"\232\001\n\021stDevilCallReward\022\016\n\006charID\030\001 \001"
    "(\r\022\016\n\006bossId\030\002 \001(\r\022\022\n\nrewardType\030\003 \001(\r\022\017"
    "\n\007gotPass\030\004 \001(\r\022\016\n\006status\030\005 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "f\"\214\001\n\024stDevilCallRewardRet\022\016\n\006charID\030\001 \001"
    "(\r\022\016\n\006bossId\030\002 \001(\r\022\022\n\nrewardType\030\003 \001(\r\022\016"
    "\n\006status\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020g\"\201\001\n\013stDevilCall"
    "\022\016\n\006charID\030\001 \001(\r\022\016\n\006bossId\030\002 \001(\r\022\017\n\007gotP"
    "ass\030\003 \001(\r\022\017\n\007drawNum\030\004 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020h\"s\n\016"
    "stDevilCallRet\022\016\n\006charID\030\001 \001(\r\022\016\n\006bossId"
    "\030\002 \001(\r\022\017\n\007drawNum\030\003 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020i\"}\n\022stD"
    "evilCallSummary\022\016\n\006charID\030\001 \001(\r\022%\n\004item\030"
    "\002 \003(\0132\027.Global.stDevilCallItem\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020j"
    "\"M\n\020stExpeditionItem\022\024\n\014expeditionId\030\001 \001"
    "(\r\022\022\n\nfinishTime\030\002 \001(\r\022\017\n\007heroIds\030\003 \003(\r\""
    "}\n\020stExpeditionInfo\022\016\n\006charID\030\001 \001(\r\022\'\n\005i"
    "tems\030\002 \003(\0132\030.Global.stExpeditionItem\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020k\"\232\001\n\014stExpedition\022\016\n\006charID\030\001 \001(\r\022"
    "\017\n\007expeIds\030\002 \003(\r\022\017\n\007heroIds\030\003 \003(\r\022\020\n\010use"
    "dHero\030\004 \003(\r\022\024\n\014expeditionid\030\005 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020l\":\n\020stExpeditionHero\022\n\n\002id\030\001 \001(\r\022\013\n\003l"
    "vl\030\002 \001(\r\022\r\n\005power\030\003 \001(\r\"\251\001\n\017stExpedition"
    "Ret\022\016\n\006charID\030\001 \001(\r\022\024\n\014expeditionid\030\002 \001("
    "\r\022\022\n\nfinishTime\030\003 \001(\r\022*\n\010usedHero\030\004 \003(\0132"
    "\030.Global.stExpeditionHero\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020m\"\254\001\n\022"
    "stExpeditionReward\022\016\n\006charID\030\001 \001(\r\022\024\n\014ex"
    "peditionid\030\002 \001(\r\022\022\n\nfinishTime\030\003 \001(\r\022*\n\010"
    "usedHero\030\004 \003(\0132\030.Global.stExpeditionHero"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020n\"o\n\025stExpeditionRewardRet\022\016\n\006c"
    "harID\030\001 \001(\r\022\024\n\014expeditionid\030\002 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020o\"~\n\020stFastExpedition\022\016\n\006charID\030\001 \001(\r\022"
    "\024\n\014expeditionid\030\002 \001(\r\022\022\n\nfinishTime\030\003 \001("
    "\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020p\"\201\001\n\023stFastExpeditionRet\022\016\n\006c"
    "harID\030\001 \001(\r\022\024\n\014expeditionid\030\002 \001(\r\022\022\n\nfin"
    "ishTime\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020q\"\200\001\n\022stCancelExpe"
    "dition\022\016\n\006charID\030\001 \001(\r\022\024\n\014expeditionid\030\002"
    " \001(\r\022\022\n\nfinishTime\030\003 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020r\"o\n\025st"
    "CancelExpeditionRet\022\016\n\006charID\030\001 \001(\r\022\024\n\014e"
    "xpeditionid\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020s\"\200\001\n\023stExpedi"
    "tionSummary\022\016\n\006charID\030\001 \001(\r\022\'\n\005items\030\002 \003"
    "(\0132\030.Global.stExpeditionItem\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020t\"Y"
    "\n\025stGiveLilianDayTaskCb\022\016\n\006charID\030\001 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020u\"f\n\022stUpdateDamageRank\022\016\n\006charI"
    "D\030\001 \001(\r\022\016\n\006damage\030\002 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020v\"X\n\024stN"
    "oticeSendRankInfo\022\016\n\006charID\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020w\"x\n\023stOperateActivityCb\022\016\n\006charID\030\001 \001"
    "(\r\022\022\n\nactivityId\030\002 \001(\r\022\013\n\003num\030\003 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020x\"\236\001\n\027stOperateActivityReward\022\016\n\006cha"
    "rID\030\001 \001(\r\022\022\n\nactivityId\030\002 \001(\r\022\016\n\006itemId\030"
    "\003 \001(\r\022\016\n\006status\030\004 \001(\r\022\r\n\005boxId\030\005 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020y\"\240\001\n\031stOperateActivityRewardCb\022\016\n\006"
    "charID\030\001 \001(\r\022\022\n\nactivityId\030\002 \001(\r\022\016\n\006item"
    "Id\030\003 \001(\r\022\016\n\006status\030\004 \001(\r\022\r\n\005boxId\030\005 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020z\"\217\001\n\036stOperateActivityLotteryRe"
    "ward\022\016\n\006charID\030\001 \001(\r\022\016\n\006itemId\030\002 \001(\r\022\014\n\004"
    "cost\030\003 \001(\r\022\r\n\005boxId\030\004 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020{\"t\n s"
    "tOperateActivityLotteryRewardCb\022\016\n\006charI"
    "D\030\001 \001(\r\022\016\n\006itemId\030\002 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020|\"s\n\016stR"
    "eqPayTypeCb\022\016\n\006charID\030\001 \001(\r\022\016\n\006itemId\030\002 "
    "\001(\r\022\017\n\007orderId\030\003 \001(\t\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020}\"U\n\021stReqU"
    "serRankInfo\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020~\"\034\n"
    "\014userSortInfo\022\014\n\004name\030\001 \001(\t\"\274\001\n\024stUserRa"
    "nkInfoResult\022\016\n\006charID\030\001 \001(\r\022\016\n\006damage\030\002"
    " \001(\r\022\014\n\004rank\030\003 \001(\r\022\017\n\007endTime\030\004 \001(\r\022\"\n\004i"
    "nfo\030\005 \003(\0132\024.Global.userSortInfo\022\017\n\007level"
    "ID\030\006 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\177\"\214\001\n\031stEmeraldDreamCop"
    "ymapFail\022,\n\ndamageInfo\030\001 \003(\0132\030.Global.st"
    "UserDamagePair\022\016\n\006bossHP\030\002 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\200"
    "\001\"\211\001\n\026stKillEmeraldDreamBoss\022,\n\ndamageIn"
    "fo\030\001 \003(\0132\030.Global.stUserDamagePair\022\016\n\006bo"
    "ssID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nP"
    "rotoFunID\022\n\n\005FunID\020\201\001\"Q\n\014strRemoveNum\022\016\n"
    "\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030"
    "\n\nProtoFunID\022\n\n\005FunID\020\202\001\"R\n\rstCopyMapInf"
    "o\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\203\001\"i\n\023stCopyMa"
    "pInfoResult\022\016\n\006charID\030\001 \001(\r\022\017\n\007levelId\030\002"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFu"
    "nID\022\n\n\005FunID\020\204\001\"\222\001\n\023stRealTimeTeamMatch\022"
    "&\n\005eType\030\001 \001(\0162\027.Global.eRealTimePKType\022"
    "\016\n\006teamID\030\002 \001(\r\022\020\n\010memberId\030\003 \003(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunI"
    "D\020\205\001\"U\n\020stOnPubLeaveTeam\022\016\n\006charID\030\002 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\206\001\"_\n\rstDeductMoney\022\013\n\003num\030\001 \001("
    "\r\022\016\n\006charID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\207\001\"\276\001\n\023stDeduc"
    "tMoneyResult\0223\n\006result\030\001 \001(\0162#.Global.st"
    "DeductMoneyResult.eResult\022\016\n\006charID\030\002 \001("
    "\r\"/\n\007eResult\022\014\n\010eSuccess\020\001\022\026\n\022DIAMOND_NO"
    "T_ENOUGH\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nP"
    "rotoFunID\022\n\n\005FunID\020\210\001\"\214\001\n\014stGiveReward\022\016"
    "\n\006charID\030\001 \001(\r\022\r\n\005boxID\030\002 \001(\r\022\020\n\010rewardI"
    "D\030\003 \001(\r\022\030\n\020isIntegralReward\030\004 \001(\010\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunI"
    "D\020\211\001\"\352\001\n\022stGiveRewardResult\0222\n\006result\030\001 "
    "\001(\0162\".Global.stGiveRewardResult.eResult\022"
    "\016\n\006charID\030\002 \001(\r\022\020\n\010rewardID\030\003 \001(\r\022\030\n\020isI"
    "ntegralReward\030\004 \001(\010\"1\n\007eResult\022\014\n\010eSucce"
    "ss\020\001\022\030\n\024eBAG_SLOT_NOT_ENOUGH\020\002\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\212"
    "\001\"g\n\021stReqCheckMission\022\016\n\006charID\030\001 \001(\r\022\017"
    "\n\007levelID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\213\001\"{\n\016stReqCheck"
    "Task\022\016\n\006charID\030\001 \001(\r\022\022\n\nsquareType\030\002 \001(\r"
    "\022\022\n\nbattleType\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\214\001\"f\n\020stReq"
    "EnterTaskLv\022\016\n\006charID\030\001 \001(\r\022\017\n\007levelID\030\002"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFu"
    "nID\022\n\n\005FunID\020\215\001\"U\n\020stReqDisbandTeam\022\016\n\006c"
    "harID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\216\001\"\206\001\n\025stReqDrawInvi"
    "teReward\022\016\n\006charID\030\001 \001(\r\022\r\n\005boxId\030\002 \001(\r\022"
    "\n\n\002id\030\003 \001(\r\022\017\n\007account\030\004 \001(\t\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\217\001\""
    "\206\001\n\027stReqDrawInviteRewardCb\022\016\n\006charID\030\001 "
    "\001(\r\022\n\n\002id\030\002 \001(\r\022\013\n\003res\030\003 \001(\010\022\017\n\007account\030"
    "\004 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\220\001\"l\n\030stReqDrawUseInviteRe"
    "ward\022\016\n\006charID\030\001 \001(\r\022\r\n\005boxId\030\002 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005Fu"
    "nID\020\221\001\"\207\001\n\nstRoleInfo\022\016\n\006charID\030\001 \001(\r\022\020\n"
    "\010dataSize\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\022\026\n\016normalS"
    "erverID\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030"
    "\n\nProtoFunID\022\n\n\005FunID\020\222\001\"`\n\030stHeroLeague"
    "EnterCopyMap\022\021\n\tmemberIDs\030\001 \003(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020"
    "\223\001\"p\n\027stHeroLeaguePkWithRobot\022\016\n\006charID\030"
    "\001 \001(\r\022\022\n\nrobotGroup\030\002 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\224\001\"\300\001\n"
    "\024stReqHeroLeagueCheck\0224\n\006result\030\001 \001(\0162$."
    "Global.stReqHeroLeagueCheck.eResult\022\016\n\006c"
    "harID\030\002 \001(\r\"/\n\007eResult\022\014\n\010eSuccess\020\001\022\026\n\022"
    "eRegister_Num_Lack\020\002\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\226\001\"V\n\021stHer"
    "oLeagueMatch\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\227\001\""
    "\352\001\n\rstPubRoleInfo\022\016\n\006charID\030\001 \001(\r\022\021\n\tpub"
    "CharID\030\002 \001(\r\022\020\n\010areaCode\030\003 \001(\r\022\014\n\004name\030\004"
    " \001(\t\022\r\n\005level\030\005 \001(\r\022\r\n\005vipLv\030\006 \001(\r\022\013\n\003jo"
    "b\030\007 \001(\r\022\013\n\003sex\030\010 \001(\r\022\023\n\013battlePower\030\t \001("
    "\r\022\026\n\016pubServerIndex\030\n \001(\r\022\r\n\005score\030\013 \001(\r"
    "\022\021\n\twinOrLoss\030\014 \001(\010\022\017\n\007photoID\030\r \001(\r\"\223\001\n"
    "\022stHeroLeagueResult\022$\n\005user1\030\001 \001(\0132\025.Glo"
    "bal.stPubRoleInfo\022$\n\005user2\030\002 \001(\0132\025.Globa"
    "l.stPubRoleInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\003"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\230\001\"O\n\rstSynRoleL"
    "ist\022\013\n\003tag\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\231\001\"T\n\006stTeam\022$\n"
    "\005user1\030\001 \001(\0132\025.Global.stPubRoleInfo\022$\n\005u"
    "ser2\030\002 \001(\0132\025.Global.stPubRoleInfo\"\237\001\n\023st"
    "SynRoleListResult\022\034\n\004team\030\001 \003(\0132\016.Global"
    ".stTeam\022&\n\007charIDS\030\002 \003(\0132\025.Global.stPubR"
    "oleInfo\022\017\n\007isFinal\030\003 \001(\010\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\232\001\"\300\003\n\021"
    "stSynChampionInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004nam"
    "e\030\002 \001(\t\022\020\n\010areaCode\030\003 \001(\r\022\r\n\005level\030\004 \001(\r"
    "\022\013\n\003job\030\005 \001(\r\022\013\n\003sex\030\006 \001(\r\022\016\n\006leader\030\007 \001"
    "(\010\022\023\n\013battlePower\030\010 \001(\r\022\013\n\003pos\030\t \001(\r\022\016\n\006"
    "headID\030\n \001(\r\022\016\n\006bodyID\030\013 \001(\r\022\020\n\010weaponID"
    "\030\014 \001(\r\022\020\n\010cloackID\030\r \001(\r\022\016\n\006wingID\030\016 \001(\r"
    "\022\016\n\006shoeID\030\017 \001(\r\022\023\n\013fashionHair\030\020 \001(\r\022\023\n"
    "\013fashionFace\030\021 \001(\r\022\023\n\013fashionBody\030\022 \001(\r\022"
    "\025\n\rfashionWeapon\030\023 \001(\r\022\023\n\013fashionShoe\030\024 "
    "\001(\r\022\031\n\021fashionDecoration\030\025 \001(\r\022\020\n\010effect"
    "ID\030\026 \001(\r\022\023\n\013wingBreakLv\030\027 \001(\r\022\017\n\007photoID"
    "\030\030 \001(\r\"r\n\024stReqSynChampionInfo\022\'\n\004info\030\001"
    " \001(\0132\031.Global.stSynChampionInfo\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020"
    "\233\001\"Q\n\014stReqWorskip\022\016\n\006charID\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005Fun"
    "ID\020\234\001\"\307\001\n\017stWorskipResult\022/\n\006result\030\001 \001("
    "\0162\037.Global.stWorskipResult.eResult\022\016\n\006ch"
    "arID\030\002 \001(\r\022\026\n\016isSameAreaCode\030\003 \001(\010\"(\n\007eR"
    "esult\022\020\n\014eInner_Error\020\001\022\013\n\007eNoBody\020\002\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005F"
    "unID\020\235\001\"e\n\rstReqRedPoint\022\016\n\006charID\030\001 \001(\r"
    "\022\021\n\tpubCharID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\236\001\"~\n\020stRedP"
    "ointResult\022\023\n\013isQualified\030\001 \001(\010\022\022\n\ncanWo"
    "rship\030\002 \001(\010\022\016\n\006charID\030\003 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\237\001\"k"
    "\n\031stInterceptResultToGlobal\022\016\n\006charID\030\001 "
    "\001(\r\022\013\n\003win\030\002 \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\240\001\"\262\003\n\017stSynMem"
    "berInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n"
    "\005level\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\016"
    "\n\006leader\030\006 \001(\010\022\023\n\013battlePower\030\007 \001(\r\022\013\n\003p"
    "os\030\010 \001(\r\022\016\n\006headID\030\t \001(\r\022\016\n\006bodyID\030\n \001(\r"
    "\022\020\n\010weaponID\030\013 \001(\r\022\020\n\010cloackID\030\014 \001(\r\022\016\n\006"
    "wingID\030\r \001(\r\022\016\n\006shoeID\030\016 \001(\r\022\023\n\013fashionH"
    "air\030\017 \001(\r\022\023\n\013fashionFace\030\020 \001(\r\022\023\n\013fashio"
    "nBody\030\021 \001(\r\022\025\n\rfashionWeapon\030\022 \001(\r\022\023\n\013fa"
    "shionShoe\030\023 \001(\r\022\031\n\021fashionDecoration\030\024 \001"
    "(\r\022\020\n\010effectID\030\025 \001(\r\022\023\n\013wingBreakLv\030\026 \001("
    "\r\022\025\n\rfashionWingID\030\027 \001(\r\"\237\001\n\rstRetRoomIn"
    "fo\022\016\n\006charID\030\001 \001(\r\022\021\n\tcopyMapID\030\002 \001(\r\022(\n"
    "\007members\030\003 \003(\0132\027.Global.stSynMemberInfo\022"
    "\016\n\006teamID\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\241\001\"\243\001\n\022stRetAddT"
    "eamMember\022\016\n\006charID\030\001 \003(\r\022\020\n\010exceptID\030\002 "
    "\001(\r\022\013\n\003pos\030\003 \001(\r\022+\n\nmemberInfo\030\004 \001(\0132\027.G"
    "lobal.stSynMemberInfo\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\242\001\"\222\003\n\014Mar"
    "ryObjInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022"
    "\r\n\005level\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r"
    "\022\023\n\013battlePower\030\006 \001(\r\022\016\n\006headID\030\007 \001(\r\022\016\n"
    "\006bodyID\030\010 \001(\r\022\020\n\010weaponID\030\t \001(\r\022\020\n\010cloac"
    "kID\030\n \001(\r\022\016\n\006wingID\030\013 \001(\r\022\016\n\006shoeID\030\014 \001("
    "\r\022\023\n\013fashionHair\030\r \001(\r\022\023\n\013fashionFace\030\016 "
    "\001(\r\022\023\n\013fashionBody\030\017 \001(\r\022\025\n\rfashionWeapo"
    "n\030\020 \001(\r\022\023\n\013fashionShoe\030\021 \001(\r\022\031\n\021fashionD"
    "ecoration\030\022 \001(\r\022\020\n\010effectID\030\023 \001(\r\022\023\n\013win"
    "gBreakLv\030\024 \001(\r\022\025\n\rfashionWingID\030\025 \001(\r\"\177\n"
    "\014stReqPropose\022\013\n\003id1\030\001 \001(\r\022\013\n\003id2\030\002 \001(\r\022"
    "\"\n\004info\030\003 \001(\0132\024.Global.MarryObjInfo\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005Fu"
    "nID\020\243\001\"\222\001\n\017stReqAgreeMarry\022\013\n\003id1\030\001 \001(\r\022"
    "\013\n\003id2\030\002 \001(\r\022\016\n\006roomId\030\003 \001(\r\022\"\n\004info\030\004 \001"
    "(\0132\024.Global.MarryObjInfo\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\244\001\"r\n\020s"
    "tReqQuitWedding\022\016\n\006charId\030\001 \001(\r\022\017\n\007level"
    "Id\030\002 \001(\r\022\n\n\002id\030\003 \003(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\245\001\"t\n\023stReq"
    "ReEnterWedding\022\016\n\006charId\030\001 \001(\r\022\n\n\002id\030\002 \003"
    "(\r\022\016\n\006roomId\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\246\001\"a\n\020stReqBu"
    "yFireWork\022\016\n\006charId\030\001 \001(\r\022\n\n\002id\030\002 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005"
    "FunID\020\247\001\"q\n\020stReqAgreeInvite\022\016\n\006charId\030\001"
    " \001(\r\022\016\n\006roomId\030\002 \001(\r\022\n\n\002id\030\003 \003(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\250\001\"S\n\016stReqTakeCandy\022\016\n\006charId\030\001 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005"
    "FunID\020\251\001\"\226\001\n\023stNotifyCoupleMarry\022\017\n\007husb"
    "and\030\001 \001(\r\022\014\n\004wife\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\022\017\n\007h"
    "usName\030\004 \001(\t\022\020\n\010wifeName\030\005 \001(\t\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\252"
    "\001\"r\n\021stSendWeedingRing\022\016\n\006charId\030\001 \001(\r\022\016"
    "\n\006roomId\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\253\001\"n\n"
    "\rstMarryInfoCb\022\016\n\006charId\030\001 \001(\r\022\016\n\006roomId"
    "\030\002 \001(\r\022\n\n\002id\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\253\001\"m\n\rstUseFi"
    "reWork\022\016\n\006charId\030\001 \001(\r\022\r\n\005index\030\002 \001(\r\022\n\n"
    "\002id\030\003 \003(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nPr"
    "otoFunID\022\n\n\005FunID\020\254\001\"j\n\026stRetMarryInfoTo"
    "Couple\022\017\n\007husband\030\001 \001(\r\022\014\n\004wife\030\002 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005"
    "FunID\020\255\001\"y\n\025stNotifyCoupleMarryCb\022\017\n\007hus"
    "band\030\001 \001(\r\022\014\n\004wife\030\002 \001(\r\022\016\n\006roomId\030\003 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\256\001\"~\n\021stRetForceDivorce\022\017\n\007coup"
    "leA\030\001 \001(\r\022\017\n\007coupleB\030\002 \001(\r\022\024\n\014coupleOnli"
    "ne\030\003 \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nPro"
    "toFunID\022\n\n\005FunID\020\257\001\"f\n\023stRetForceDivorce"
    "Cb\022\n\n\002id\030\001 \003(\r\022\020\n\010coupleId\030\002 \003(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\260\001\"g\n\022stRetRejectDivorce\022\020\n\010coupleId\030\001 "
    "\001(\r\022\014\n\004time\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\261\001\"\\\n\033stRetDel"
    "UserOnlineMarryInfo\022\n\n\002id\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020"
    "\262\001\"_\n\032stReqSynGuildBlackMarketLv\022\016\n\006char"
    "id\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nPro"
    "toFunID\022\n\n\005FunID\020\263\001\"n\n\035stSynGuildBlackMa"
    "rketLvResult\022\n\n\002lv\030\001 \001(\r\022\016\n\006charid\030\002 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022"
    "\n\n\005FunID\020\264\001\"\220\003\n\017stGloryUserPart\022\016\n\006charI"
    "D\030\001 \001(\r\022\020\n\010areaCode\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022"
    "\013\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\r\n\005level\030\006 \001(\r"
    "\022\023\n\013battlePower\030\007 \001(\r\022\016\n\006headID\030\010 \001(\r\022\016\n"
    "\006bodyID\030\t \001(\r\022\020\n\010weaponID\030\n \001(\r\022\020\n\010cloac"
    "kID\030\013 \001(\r\022\016\n\006wingID\030\014 \001(\r\022\016\n\006shoeID\030\r \001("
    "\r\022\023\n\013fashionHair\030\016 \001(\r\022\023\n\013fashionFace\030\017 "
    "\001(\r\022\023\n\013fashionBody\030\020 \001(\r\022\025\n\rfashionWeapo"
    "n\030\021 \001(\r\022\023\n\013fashionShoe\030\022 \001(\r\022\031\n\021fashionD"
    "ecoration\030\023 \001(\r\022\020\n\010effectID\030\024 \001(\r\022\023\n\013win"
    "gBreakLv\030\025 \001(\r\"\267\004\n\021stGloryUserDetail\022\016\n\006"
    "charID\030\001 \001(\r\022\020\n\010areaCode\030\002 \001(\r\022\014\n\004name\030\003"
    " \001(\t\022\013\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\r\n\005level\030"
    "\006 \001(\r\022\023\n\013battlePower\030\007 \001(\r\022\016\n\006headID\030\010 \001"
    "(\r\022\016\n\006bodyID\030\t \001(\r\022\020\n\010weaponID\030\n \001(\r\022\020\n\010"
    "cloackID\030\013 \001(\r\022\016\n\006wingID\030\014 \001(\r\022\016\n\006shoeID"
    "\030\r \001(\r\022\023\n\013fashionHair\030\016 \001(\r\022\023\n\013fashionFa"
    "ce\030\017 \001(\r\022\023\n\013fashionBody\030\020 \001(\r\022\025\n\rfashion"
    "Weapon\030\021 \001(\r\022\023\n\013fashionShoe\030\022 \001(\r\022\031\n\021fas"
    "hionDecoration\030\023 \001(\r\022\020\n\010effectID\030\024 \001(\r\022\023"
    "\n\013wingBreakLv\030\025 \001(\r\022\017\n\007killNum\030\026 \001(\r\022\023\n\013"
    "evenKillNum\030\027 \001(\r\022\024\n\014totalKillNum\030\030 \001(\r\022"
    "\020\n\010gloryVal\030\031 \001(\r\022\027\n\017gloryActionTime\030\032 \001"
    "(\r\022\024\n\014prostatedNum\030\033 \001(\r\022\024\n\014prostateTime"
    "\030\034 \001(\r\022\020\n\010normalId\030\035 \001(\r\"\342\001\n\013stGloryUser"
    "\022\016\n\006charID\030\001 \001(\r\022\020\n\010areaCode\030\002 \001(\r\022\014\n\004na"
    "me\030\003 \001(\t\022\017\n\007killNum\030\004 \001(\r\022\023\n\013evenKillNum"
    "\030\005 \001(\r\022\024\n\014totalKillNum\030\006 \001(\r\022\020\n\010gloryVal"
    "\030\007 \001(\r\022\027\n\017gloryActionTime\030\010 \001(\r\022\024\n\014prost"
    "atedNum\030\t \001(\r\022\024\n\014prostateTime\030\n \001(\r\022\020\n\010n"
    "ormalId\030\013 \001(\r\"\237\001\n\020stEnterResBattle\022\016\n\006ch"
    "arId\030\001 \001(\r\022\024\n\014copyMapLevel\030\002 \001(\r\022\017\n\007guil"
    "dId\030\003 \001(\r\022!\n\004self\030\004 \001(\0132\023.Global.stGlory"
    "User\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFu"
    "nID\022\n\n\005FunID\020\265\001\"\315\001\n\026stBroadResBattleInvi"
    "te\022\016\n\006charId\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007guil"
    "dId\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\023\n\013b"
    "attlePower\030\006 \001(\r\022\r\n\005vipLv\030\007 \001(\r\022\023\n\013insta"
    "nceLvl\030\010 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n"
    "\nProtoFunID\022\n\n\005FunID\020\266\001\"N\n\014stPubOffline\022"
    "\013\n\003msg\030\001 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n"
    "\nProtoFunID\022\n\n\005FunID\020\267\001\"V\n\021stDiscoverCon"
    "sume\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\270\001\"y\n\017stSyn"
    "CoupleInfo\022\020\n\010coupleId\030\001 \001(\r\022\016\n\006charID\030\002"
    " \001(\r\022\021\n\tmyNewName\030\003 \001(\t\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\271\001\"n\n\026st"
    "SynResBattleUserData\022!\n\004user\030\001 \001(\0132\023.Glo"
    "bal.stGloryUser\"\027\n\nProtoModID\022\t\n\005ModID\020\003"
    "\"\030\n\nProtoFunID\022\n\n\005FunID\020\272\001\"q\n\023stSynResBa"
    "ttleTop50\022\'\n\006detail\030\001 \003(\0132\027.Global.stGlo"
    "ryUserPart\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nP"
    "rotoFunID\022\n\n\005FunID\020\273\001\"\177\n\022stSynResBattleK"
    "ing\022\r\n\005clear\030\001 \001(\010\022\'\n\004king\030\002 \001(\0132\031.Globa"
    "l.stGloryUserDetail\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\274\001\"\241\001\n\026stRep"
    "lyInviteResBattle\022\016\n\006charId\030\001 \001(\r\022\017\n\007gui"
    "ldId\030\002 \001(\r\022\020\n\010inviteId\030\003 \001(\r\022!\n\004self\030\004 \001"
    "(\0132\023.Global.stGloryUser\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\275\001\"l\n\023st"
    "SynGloryKingTitle\022\016\n\006charId\030\001 \001(\r\022\022\n\nexp"
    "ireTime\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030"
    "\n\nProtoFunID\022\n\n\005FunID\020\276\001\"M\n\013stPubOnline\022"
    "\013\n\003msg\030\001 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n"
    "\nProtoFunID\022\n\n\005FunID\020\277\001\"\234\001\n\023stResBattleS"
    "end2Pub\022\'\n\004king\030\001 \001(\0132\031.Global.stGloryUs"
    "erDetail\022)\n\006detail\030\002 \003(\0132\031.Global.stGlor"
    "yUserDetail\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\300\001\"0\n\021stServerParamI"
    "tem\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"v\n\026stSe"
    "rverParamSend2Game\022)\n\006params\030\001 \003(\0132\031.Glo"
    "bal.stServerParamItem\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\301\001\"f\n\020stSy"
    "nUserPhotoID\022\016\n\006charID\030\001 \001(\r\022\017\n\007photoID\030"
    "\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\302\001\"u\n\013stUseLvlBox\022\016\n\006charI"
    "D\030\001 \001(\r\022\017\n\007bagtype\030\002 \001(\r\022\022\n\ninstanceid\030\003"
    " \001(\004\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFu"
    "nID\022\n\n\005FunID\020\303\001\"\210\001\n\016stUseLvlBoxRes\022\016\n\006ch"
    "arID\030\001 \001(\r\022\017\n\007bagtype\030\002 \001(\r\022\022\n\ninstancei"
    "d\030\003 \001(\004\022\016\n\006maxLvl\030\004 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\304\001\"\242\001\n\024s"
    "tRechangeStatistics\022\025\n\robtainDiamond\030\001 \001"
    "(\r\022\023\n\013giveDiamond\030\002 \001(\r\022\014\n\004data\030\003 \001(\t\022\016\n"
    "\006charid\030\004 \001(\r\022\r\n\005money\030\005 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\305\001\""
    "K\n\tstNftItem\022\016\n\006itemid\030\001 \001(\r\022\017\n\007itemcnt\030"
    "\002 \001(\r\022\020\n\010itemname\030\003 \001(\t\022\013\n\003url\030\004 \001(\014\"q\n\031"
    "stGlobal2GameQueryUserNft\022\021\n\twebConnID\030\001"
    " \001(\r\022\016\n\006charid\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020\306\001\"\265\001\n\037stGa"
    "me2GlobalQueryUserNftResult\022\021\n\twebConnID"
    "\030\001 \001(\r\022\016\n\006charid\030\002 \001(\r\022\016\n\006result\030\003 \001(\r\022\037"
    "\n\004data\030\004 \003(\0132\021.Global.stNftItem\022\013\n\003vip\030\005"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoFu"
    "nID\022\n\n\005FunID\020\307\001\"\221\001\n\032stGlobal2GameChangeN"
    "ftItem\022\021\n\twebConnID\030\001 \001(\r\022\016\n\006charid\030\002 \001("
    "\r\022\016\n\006itemid\030\003 \001(\r\022\r\n\005count\030\004 \001(\005\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID"
    "\020\310\001\"\210\001\n stGame2GlobalChangeNftItemResult"
    "\022\021\n\twebConnID\030\001 \001(\r\022\016\n\006charid\030\002 \001(\r\022\016\n\006r"
    "esult\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\n"
    "ProtoFunID\022\n\n\005FunID\020\311\001\"\227\001\n\027stGame2Global"
    "NftVipGift\022\016\n\006charid\030\001 \001(\r\022*\n\010attaches\030\002"
    " \003(\0132\030.Global.stSendMailAttach\022\r\n\005vipLv\030"
    "\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\030\n\nProtoF"
    "unID\022\n\n\005FunID\020\312\001\"\217\001\n\027stRetNftOfflineUser"
    "Data\022\016\n\006charid\030\001 \001(\r\022\020\n\010dataSize\030\002 \001(\r\022\014"
    "\n\004data\030\003 \001(\014\022\021\n\twebConnID\030\004 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\003\"\030\n\nProtoFunID\022\n\n\005FunID\020"
    "\313\001\"\264\001\n\035stRetChangeNftOfflineUserData\022\016\n\006"
    "charid\030\001 \001(\r\022\020\n\010dataSize\030\002 \001(\r\022\014\n\004data\030\003"
    " \001(\014\022\021\n\twebConnID\030\004 \001(\r\022\016\n\006itemID\030\005 \001(\r\022"
    "\r\n\005count\030\006 \001(\005\"\027\n\nProtoModID\022\t\n\005ModID\020\003\""
    "\030\n\nProtoFunID\022\n\n\005FunID\020\314\001\"S\n\rstSendUserL"
    "og\022\020\n\010logParam\030\001 \003(\t\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\001\"g\n\020stReqK"
    "illUserOut\022\016\n\006charID\030\001 \001(\r\022\021\n\twebConnID\030"
    "\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\002\"j\n\023stKillUserOutResult\022\016"
    "\n\006result\030\001 \001(\010\022\021\n\twebConnID\030\002 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\003\"z\n\022stReqSetUserGMType\022\016\n\006charID\030\001 \001("
    "\r\022\017\n\007gmValue\030\002 \001(\r\022\021\n\twebConnID\030\003 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\004\"l\n\025stSetUserGMTypeResult\022\016\n\006resu"
    "lt\030\001 \001(\010\022\021\n\twebConnID\030\002 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\005\"p\n"
    "\014stReqBanUser\022\016\n\006charID\030\001 \001(\r\022\021\n\twebConn"
    "ID\030\002 \001(\r\022\013\n\003ban\030\003 \001(\010\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\006\"f\n\017stBan"
    "UserResult\022\021\n\twebConnID\030\001 \001(\r\022\016\n\006result\030"
    "\002 \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\007\"/\n\020stSendMailAttach\022\016\n\006i"
    "temID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\317\001\n\017stSendMail2"
    "User\022\r\n\005title\030\001 \001(\t\022\017\n\007content\030\002 \001(\t\022\020\n\010"
    "userList\030\003 \003(\r\022*\n\010attaches\030\004 \003(\0132\030.Globa"
    "l.stSendMailAttach\022\021\n\twebConnID\030\005 \001(\r\022\013\n"
    "\003tag\030\006 \001(\t\022\014\n\004bAll\030\007 \001(\010\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\010\"y\n\025st"
    "SendMail2UserResult\022\016\n\006result\030\001 \001(\010\022\021\n\tw"
    "ebConnID\030\002 \001(\r\022\013\n\003tag\030\003 \001(\t\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\t\"\266\001"
    "\n\023stWebMotifyUserInfo\022\016\n\006charID\030\001 \001(\r\022\025\n"
    "\rnewbieGuideID\030\002 \001(\r\022\021\n\twebConnID\030\003 \001(\r\022"
    "\020\n\010goldCoin\030\004 \001(\r\022\017\n\007diamond\030\005 \001(\r\022\020\n\010vi"
    "pPoint\030\006 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\n\"}\n\026stWebMotifyUse"
    "rInfoRet\022\016\n\006charID\030\001 \001(\r\022\021\n\twebConnID\030\002 "
    "\001(\r\022\016\n\006result\030\003 \001(\010\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\n\"\323\001\n\023stAddO"
    "rUpdateNotice\022\020\n\010noticeID\030\001 \001(\r\022\020\n\010inter"
    "val\030\002 \001(\005\022\013\n\003num\030\003 \001(\r\022\017\n\007content\030\004 \001(\t\022"
    "\035\n\002op\030\005 \001(\0162\021.Global.eNoticeOp\022\026\n\016notice"
    "Position\030\006 \001(\r\022\021\n\tbeginTime\030\007 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\013\"Q\n\013stDelNotice\022\020\n\010noticeID\030\001 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\014\"\332\001\n\027stWebNotifyRechargeInfo\022\016\n\006ch"
    "arID\030\001 \001(\r\022\r\n\005money\030\002 \001(\r\022\016\n\006itemID\030\003 \001("
    "\r\022\013\n\003tid\030\004 \001(\t\022\017\n\007account\030\005 \001(\t\022\014\n\004opID\030"
    "\006 \001(\r\022\020\n\010isExtend\030\007 \001(\010\022\014\n\004data\030\010 \001(\t\022\022\n"
    "\npayChannel\030\t \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\r\"`\n\017stAddGift"
    "BagCfg\022\n\n\002id\030\001 \001(\r\022\017\n\007content\030\002 \001(\t\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020\016\"O\n\017stDelGiftBagCfg\022\n\n\002id\030\001 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\017\"l\n\022stAddBlackAndWhite\022\021\n\tblackLis"
    "t\030\001 \003(\t\022\021\n\twhiteList\030\002 \003(\t\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\020\"p\n\032"
    "stSetServerMaintenanceTime\022\016\n\006opTime\030\001 \001"
    "(\t\022\020\n\010opDuring\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\021\"U\n\016stGetS"
    "vrConfig\022\021\n\twebConnID\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\022\"\177\n"
    "\016stRetSvrConfig\022(\n\007cfgPair\030\001 \003(\0132\027.Globa"
    "l.stServerCfgPair\022\021\n\twebConnID\030\002 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\023\"l\n\016stUpdateSvrCfg\022(\n\007cfgPair\030\001 \003("
    "\0132\027.Global.stServerCfgPair\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\024\"U\n\024"
    "stNotifyWebOnlineNum\022\013\n\003num\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\025\"v\n\021stEnterSelectPage\022\017\n\007account\030\001 \001("
    "\t\022\020\n\010deviceID\030\002 \001(\t\022\014\n\004opID\030\003 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\026\"z\n\025stNotifyWebCreateRole\022\017\n\007account\030"
    "\001 \001(\t\022\014\n\004opID\030\002 \001(\r\022\020\n\010deviceID\030\003 \001(\t\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\027\"\317\001\n\016stSendGuildLog\022\017\n\007account\030\001 "
    "\001(\t\022\014\n\004opID\030\002 \001(\r\022\016\n\006charID\030\003 \001(\r\022\r\n\005lev"
    "el\030\004 \001(\r\022\r\n\005vipLv\030\005 \001(\r\022\017\n\007guildID\030\006 \001(\r"
    "\022\016\n\006action\030\007 \001(\t\022\017\n\007opObjID\030\010 \001(\t\022\014\n\004nam"
    "e\030\t \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\030\"\224\001\n\022sstSendGuildResLog"
    "\022\017\n\007guildID\030\001 \001(\r\022\013\n\003res\030\002 \001(\t\022\016\n\006oldVal"
    "\030\003 \001(\r\022\016\n\006newVal\030\004 \001(\r\022\016\n\006reason\030\005 \001(\t\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020\031\"\372\001\n\017stSendModuleLog\022\017\n\007account\030"
    "\001 \001(\t\022\014\n\004opID\030\002 \001(\r\022\016\n\006charID\030\003 \001(\r\022\r\n\005l"
    "evel\030\004 \001(\r\022\r\n\005vipLv\030\005 \001(\r\022\016\n\006module\030\006 \001("
    "\t\022\021\n\tcopymapID\030\007 \001(\r\022\023\n\013otherCharID\030\010 \001("
    "\t\022\016\n\006result\030\t \001(\010\022\017\n\007oldRank\030\n \001(\r\022\017\n\007ne"
    "wRank\030\013 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\032\"\273\001\n\021stReqGetTxGift"
    "Bag\022\021\n\twebConnID\030\001 \001(\r\022\016\n\006openid\030\002 \001(\t\022\016"
    "\n\006taskID\030\003 \001(\r\022\021\n\tarewardID\030\004 \001(\r\022\016\n\006act"
    "ion\030\005 \001(\t\022\016\n\006billno\030\006 \001(\t\022\016\n\006charID\030\007 \001("
    "\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020\033\"u\n\021stRetGetTxGiftBag\022\021\n\twebC"
    "onnID\030\001 \001(\r\022\016\n\006result\030\002 \001(\r\022\013\n\003msg\030\003 \001(\t"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\034\"U\n\023stUpdateSvrOpenTime\022\014\n\004tim"
    "e\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\035\"\306\001\n\020stResourceChgLog\022\016"
    "\n\006charID\030\001 \001(\r\022\017\n\007account\030\002 \001(\t\022\014\n\004name\030"
    "\003 \001(\t\022\r\n\005resID\030\004 \001(\r\022\016\n\006addNum\030\005 \001(\r\022\020\n\010"
    "oldValue\030\006 \001(\r\022\020\n\010newValue\030\007 \001(\r\022\016\n\006reas"
    "on\030\010 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\036\"\205\001\n\017stUseInviteCode\022\014"
    "\n\004code\030\001 \001(\t\022\021\n\twebConnID\030\002 \001(\r\022\017\n\007accou"
    "nt\030\003 \001(\t\022\016\n\006userId\030\004 \001(\t\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\037\"\206\001\n\021s"
    "tUseInviteCodeCb\022\013\n\003msg\030\001 \001(\t\022\021\n\twebConn"
    "ID\030\002 \001(\r\022\017\n\007account\030\003 \001(\t\022\016\n\006userId\030\004 \001("
    "\t\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020 \"Z\n\031stReqLimitPetActivityData"
    "\022\013\n\003msg\030\001 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020!\"\\\n\027stAcitivityLi"
    "mitPetItem\022\n\n\002id\030\001 \001(\r\022\021\n\tactiviyId\030\002 \001("
    "\r\022\021\n\tstartTime\030\003 \001(\r\022\017\n\007endTime\030\004 \001(\r\"\212\001"
    "\n\032stSendLimitPetActivityData\022\013\n\003msg\030\001 \001("
    "\t\022-\n\004item\030\002 \003(\0132\037.Global.stAcitivityLimi"
    "tPetItem\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\"\"O\n\016stSendShutDown\022\013\n\003"
    "msg\030\001 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020#\"o\n\030stWeb2GlobalQuery"
    "UserNft\022\021\n\twebConnID\030\001 \001(\r\022\016\n\006charid\030\002 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020$\"\263\001\n\036stGlobal2WebQueryUserNf"
    "tResult\022\021\n\twebConnID\030\001 \001(\r\022\016\n\006charid\030\002 \001"
    "(\r\022\016\n\006result\030\003 \001(\r\022\037\n\004data\030\004 \003(\0132\021.Globa"
    "l.stNftItem\022\013\n\003vip\030\005 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020%\"\217\001\n\031s"
    "tWeb2GlobalChangeNftItem\022\021\n\twebConnID\030\001 "
    "\001(\r\022\016\n\006charid\030\002 \001(\r\022\016\n\006itemid\030\003 \001(\r\022\r\n\005c"
    "ount\030\004 \001(\005\"\027\n\nProtoModID\022\t\n\005ModID\020\006\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020&\"\206\001\n\037stGlobal2WebCha"
    "ngeNftItemResult\022\021\n\twebConnID\030\001 \001(\r\022\016\n\006c"
    "harid\030\002 \001(\r\022\016\n\006result\030\003 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\006\"\027\n\nProtoFunID\022\t\n\005FunID\020\'*e\n"
    "\013GlobalModID\022\r\n\tLOGIN_MOD\020\001\022\014\n\010GATE_MOD\020"
    "\002\022\014\n\010GAME_MOD\020\003\022\020\n\014PLATFORM_MOD\020\004\022\014\n\010HTT"
    "P_MOD\020\005\022\013\n\007WEB_MOD\020\006*O\n\010SaveType\022\021\n\rSAVE"
    "_TIMETICK\020\001\022\017\n\013SAVE_LOGOUT\020\002\022\016\n\nSAVE_FOR"
    "CE\020\003\022\017\n\013SAVE_CHGSVR\020\004*>\n\021eLoadRoleDataTy"
    "pe\022\023\n\017eLoadData_Login\020\001\022\024\n\020eLoadData_Chg"
    "Svr\020\002*\211\001\n\007eGMType\022\023\n\017GMType_SendMail\020\001\022\022"
    "\n\016GMType_OpRedis\020\002\022\025\n\021GMType_SendNotice\020"
    "\003\022\030\n\024GMType_BatchSendMail\020\004\022$\n GMType_AD"
    "D_GUILD_ACTIVITY_DEGREE\020\005*J\n\017eRealTimePK"
    "Type\022\033\n\027eRealTimePKType_KillAll\020\001\022\032\n\026eRe"
    "alTimePKType_Finish\020\002*\303\001\n\016eRankModule_ID"
    "\022\032\n\026eRankModule_Level_Rank\020\001\022 \n\034eRankMod"
    "ule_BattlePower_Rank\020\002\022\034\n\030eRankModule_Co"
    "pymap_Rank\020\003\022\034\n\030eRankModule_One2One_Rank"
    "\020\004\022\033\n\027eRankModule_Leitai_Rank\020\005\022\032\n\026eRank"
    "Module_Arena_Rank\020\006*3\n\teNoticeOp\022\022\n\016eIns"
    "ert_Notice\020\001\022\022\n\016eUpdate_Notice\020\002", 40112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Global.proto", &protobuf_RegisterTypes);
  stLoginGlobal::default_instance_ = new stLoginGlobal();
  stCreateRole::default_instance_ = new stCreateRole();
  stCreateRoleResult::default_instance_ = new stCreateRoleResult();
  stReqSnapData::default_instance_ = new stReqSnapData();
  stSnapData::default_instance_ = new stSnapData();
  stRetSnapData::default_instance_ = new stRetSnapData();
  stReqLoadData::default_instance_ = new stReqLoadData();
  stGateForwardProto::default_instance_ = new stGateForwardProto();
  stForwardProto2Me::default_instance_ = new stForwardProto2Me();
  stBroadcastProto2AllUser::default_instance_ = new stBroadcastProto2AllUser();
  stLoginGlobalFail::default_instance_ = new stLoginGlobalFail();
  stNotifyLoginOut::default_instance_ = new stNotifyLoginOut();
  stGameSvrStartUp::default_instance_ = new stGameSvrStartUp();
  stKillUserOut::default_instance_ = new stKillUserOut();
  stServerCfgPair::default_instance_ = new stServerCfgPair();
  stNotifyGateSvrCfg::default_instance_ = new stNotifyGateSvrCfg();
  stReloginGlobal::default_instance_ = new stReloginGlobal();
  stPlayerAutoConnect::default_instance_ = new stPlayerAutoConnect();
  stClientLostConnect::default_instance_ = new stClientLostConnect();
  stAskIsNewAccount::default_instance_ = new stAskIsNewAccount();
  stIsNewAccount::default_instance_ = new stIsNewAccount();
  stSaveRoleInfo::default_instance_ = new stSaveRoleInfo();
  stRetRoleInfo::default_instance_ = new stRetRoleInfo();
  stUserEnterMapSuccess::default_instance_ = new stUserEnterMapSuccess();
  stRechargeInfo::default_instance_ = new stRechargeInfo();
  stUserRecharge::default_instance_ = new stUserRecharge();
  stProcessGM::default_instance_ = new stProcessGM();
  stSynFetchLilianNum::default_instance_ = new stSynFetchLilianNum();
  stSynGuildID::default_instance_ = new stSynGuildID();
  stCreateGuild::default_instance_ = new stCreateGuild();
  stCreateGuildDecMoney::default_instance_ = new stCreateGuildDecMoney();
  stForwardJoininGuild::default_instance_ = new stForwardJoininGuild();
  stAddGuildContribute::default_instance_ = new stAddGuildContribute();
  stBroadcastGuildChatInfo::default_instance_ = new stBroadcastGuildChatInfo();
  stGuildPray::default_instance_ = new stGuildPray();
  stSynUserLevel::default_instance_ = new stSynUserLevel();
  stSynCopymapStarNum::default_instance_ = new stSynCopymapStarNum();
  stSynUserBattlePower::default_instance_ = new stSynUserBattlePower();
  stSendTeamChatInfo::default_instance_ = new stSendTeamChatInfo();
  stTeamLeaveCopyMap::default_instance_ = new stTeamLeaveCopyMap();
  stTreasureCombine::default_instance_ = new stTreasureCombine();
  stTreasureCombineSuccess::default_instance_ = new stTreasureCombineSuccess();
  stBuyPeaceModubleTime::default_instance_ = new stBuyPeaceModubleTime();
  stReqChangeGameSvr::default_instance_ = new stReqChangeGameSvr();
  stConfirmChangeGameSvr::default_instance_ = new stConfirmChangeGameSvr();
  stRetOtherUserData2Me::default_instance_ = new stRetOtherUserData2Me();
  stMailAttach::default_instance_ = new stMailAttach();
  stObtainItemFromMail::default_instance_ = new stObtainItemFromMail();
  stSynAddTreasure::default_instance_ = new stSynAddTreasure();
  stBeginPKWithOther::default_instance_ = new stBeginPKWithOther();
  stUserLeitaiChallenge::default_instance_ = new stUserLeitaiChallenge();
  stArenaPKResult::default_instance_ = new stArenaPKResult();
  stSynDrawHeroScore::default_instance_ = new stSynDrawHeroScore();
  stUpLeitaiUseTime::default_instance_ = new stUpLeitaiUseTime();
  stUserLeaveGuild::default_instance_ = new stUserLeaveGuild();
  stEnterCopymapMemInfo::default_instance_ = new stEnterCopymapMemInfo();
  stTeamEnterCopyMap::default_instance_ = new stTeamEnterCopyMap();
  stOne2OnePVPEnterCopyMap::default_instance_ = new stOne2OnePVPEnterCopyMap();
  stForwardCapture::default_instance_ = new stForwardCapture();
  stCaptureRewardItem::default_instance_ = new stCaptureRewardItem();
  stCaptureReward::default_instance_ = new stCaptureReward();
  stRealTimeBattleEnterCopymap::default_instance_ = new stRealTimeBattleEnterCopymap();
  stNotifyAddLilian::default_instance_ = new stNotifyAddLilian();
  stEnterGuildCopymap::default_instance_ = new stEnterGuildCopymap();
  stSynMyContribyte::default_instance_ = new stSynMyContribyte();
  stOnlineUserGMType::default_instance_ = new stOnlineUserGMType();
  stForbidOnlineUser::default_instance_ = new stForbidOnlineUser();
  stOne2OnePVPFinish::default_instance_ = new stOne2OnePVPFinish();
  stActivityConfig::default_instance_ = new stActivityConfig();
  stSynActivityConfig::default_instance_ = new stSynActivityConfig();
  stCaptureTreasureFail::default_instance_ = new stCaptureTreasureFail();
  stCharID2Rank::default_instance_ = new stCharID2Rank();
  stRankModuleInfo::default_instance_ = new stRankModuleInfo();
  stSynRankModuleInfo::default_instance_ = new stSynRankModuleInfo();
  stGiftBagReward::default_instance_ = new stGiftBagReward();
  stGiveGiftBagReward::default_instance_ = new stGiveGiftBagReward();
  stNotifyGameSvrCfg::default_instance_ = new stNotifyGameSvrCfg();
  stNotifyCurEquipInfo::default_instance_ = new stNotifyCurEquipInfo();
  stReloginGame::default_instance_ = new stReloginGame();
  stFirstKillBaseInfo::default_instance_ = new stFirstKillBaseInfo();
  stTeamCopyMapFinish::default_instance_ = new stTeamCopyMapFinish();
  stUserOnlineSendFirstKillInfo::default_instance_ = new stUserOnlineSendFirstKillInfo();
  stTeamFinishFirstKill::default_instance_ = new stTeamFinishFirstKill();
  stSetClearWorldBossTime::default_instance_ = new stSetClearWorldBossTime();
  stSetWorldBossBuyNum::default_instance_ = new stSetWorldBossBuyNum();
  stUserDecSP::default_instance_ = new stUserDecSP();
  stUsreDecLilian::default_instance_ = new stUsreDecLilian();
  stUserDamagePair::default_instance_ = new stUserDamagePair();
  stGuildCopymapFail::default_instance_ = new stGuildCopymapFail();
  stGuildCopymapKillBoss::default_instance_ = new stGuildCopymapKillBoss();
  stWorldBossCopymapFail::default_instance_ = new stWorldBossCopymapFail();
  stKillWorldBoss::default_instance_ = new stKillWorldBoss();
  stDrawHeroScoreReward::default_instance_ = new stDrawHeroScoreReward();
  stDrawHeroRankReward::default_instance_ = new stDrawHeroRankReward();
  stCompensantionItem::default_instance_ = new stCompensantionItem();
  stSetCompensationID::default_instance_ = new stSetCompensationID();
  stSetOpenServerDay::default_instance_ = new stSetOpenServerDay();
  stSynGuildLv2AllMember::default_instance_ = new stSynGuildLv2AllMember();
  stForwardChgBadge::default_instance_ = new stForwardChgBadge();
  stWorldBossBuyDecDiamond::default_instance_ = new stWorldBossBuyDecDiamond();
  stGuildDonateSuccess::default_instance_ = new stGuildDonateSuccess();
  stUserLeaveWorldBoss::default_instance_ = new stUserLeaveWorldBoss();
  stNotifyGameAutoConnect::default_instance_ = new stNotifyGameAutoConnect();
  stForwardDrawHeroScoreReward::default_instance_ = new stForwardDrawHeroScoreReward();
  stNotifyArenaReward::default_instance_ = new stNotifyArenaReward();
  stForwardInvestgateAnswer::default_instance_ = new stForwardInvestgateAnswer();
  ForwardInvestgateResult::default_instance_ = new ForwardInvestgateResult();
  stGMModifyUserInfo::default_instance_ = new stGMModifyUserInfo();
  stSynMyArenaRank::default_instance_ = new stSynMyArenaRank();
  stSynVipLv::default_instance_ = new stSynVipLv();
  stNotifyClearArenaCD::default_instance_ = new stNotifyClearArenaCD();
  stReqResetArenaChallengeNum::default_instance_ = new stReqResetArenaChallengeNum();
  stNotfiyResetChallengeNum::default_instance_ = new stNotfiyResetChallengeNum();
  stReqResetInterceptNum::default_instance_ = new stReqResetInterceptNum();
  stNotifyClearInterceptCD::default_instance_ = new stNotifyClearInterceptCD();
  stNotifyResetInterceptNum::default_instance_ = new stNotifyResetInterceptNum();
  stNotifyGuardQuality::default_instance_ = new stNotifyGuardQuality();
  stNotifyGuardInspiredSuccess::default_instance_ = new stNotifyGuardInspiredSuccess();
  stReqRefreshGuardQuality::default_instance_ = new stReqRefreshGuardQuality();
  stNotifyClearOne2OneScore::default_instance_ = new stNotifyClearOne2OneScore();
  stClearOne2OneScoreSuccess::default_instance_ = new stClearOne2OneScoreSuccess();
  stInterceptReward::default_instance_ = new stInterceptReward();
  stQuickFinishDecDiamond::default_instance_ = new stQuickFinishDecDiamond();
  stQuickFinishDiamondSuccess::default_instance_ = new stQuickFinishDiamondSuccess();
  stOne2OnePkWithRobot::default_instance_ = new stOne2OnePkWithRobot();
  stNotifyUserBeginGuard::default_instance_ = new stNotifyUserBeginGuard();
  stNotifyUserInterceptResult::default_instance_ = new stNotifyUserInterceptResult();
  stNotifyCloseBetaReward::default_instance_ = new stNotifyCloseBetaReward();
  stEnterManorFightMapUserInfo::default_instance_ = new stEnterManorFightMapUserInfo();
  stEnterManorFightMap::default_instance_ = new stEnterManorFightMap();
  stManorFightBattleProp::default_instance_ = new stManorFightBattleProp();
  stFinishManorFight::default_instance_ = new stFinishManorFight();
  stExistName::default_instance_ = new stExistName();
  stSynName::default_instance_ = new stSynName();
  stSynGloryfashionCharID::default_instance_ = new stSynGloryfashionCharID();
  stDevilCallItem::default_instance_ = new stDevilCallItem();
  stAllDevilCall::default_instance_ = new stAllDevilCall();
  stDevilCallReward::default_instance_ = new stDevilCallReward();
  stDevilCallRewardRet::default_instance_ = new stDevilCallRewardRet();
  stDevilCall::default_instance_ = new stDevilCall();
  stDevilCallRet::default_instance_ = new stDevilCallRet();
  stDevilCallSummary::default_instance_ = new stDevilCallSummary();
  stExpeditionItem::default_instance_ = new stExpeditionItem();
  stExpeditionInfo::default_instance_ = new stExpeditionInfo();
  stExpedition::default_instance_ = new stExpedition();
  stExpeditionHero::default_instance_ = new stExpeditionHero();
  stExpeditionRet::default_instance_ = new stExpeditionRet();
  stExpeditionReward::default_instance_ = new stExpeditionReward();
  stExpeditionRewardRet::default_instance_ = new stExpeditionRewardRet();
  stFastExpedition::default_instance_ = new stFastExpedition();
  stFastExpeditionRet::default_instance_ = new stFastExpeditionRet();
  stCancelExpedition::default_instance_ = new stCancelExpedition();
  stCancelExpeditionRet::default_instance_ = new stCancelExpeditionRet();
  stExpeditionSummary::default_instance_ = new stExpeditionSummary();
  stGiveLilianDayTaskCb::default_instance_ = new stGiveLilianDayTaskCb();
  stUpdateDamageRank::default_instance_ = new stUpdateDamageRank();
  stNoticeSendRankInfo::default_instance_ = new stNoticeSendRankInfo();
  stOperateActivityCb::default_instance_ = new stOperateActivityCb();
  stOperateActivityReward::default_instance_ = new stOperateActivityReward();
  stOperateActivityRewardCb::default_instance_ = new stOperateActivityRewardCb();
  stOperateActivityLotteryReward::default_instance_ = new stOperateActivityLotteryReward();
  stOperateActivityLotteryRewardCb::default_instance_ = new stOperateActivityLotteryRewardCb();
  stReqPayTypeCb::default_instance_ = new stReqPayTypeCb();
  stReqUserRankInfo::default_instance_ = new stReqUserRankInfo();
  userSortInfo::default_instance_ = new userSortInfo();
  stUserRankInfoResult::default_instance_ = new stUserRankInfoResult();
  stEmeraldDreamCopymapFail::default_instance_ = new stEmeraldDreamCopymapFail();
  stKillEmeraldDreamBoss::default_instance_ = new stKillEmeraldDreamBoss();
  strRemoveNum::default_instance_ = new strRemoveNum();
  stCopyMapInfo::default_instance_ = new stCopyMapInfo();
  stCopyMapInfoResult::default_instance_ = new stCopyMapInfoResult();
  stRealTimeTeamMatch::default_instance_ = new stRealTimeTeamMatch();
  stOnPubLeaveTeam::default_instance_ = new stOnPubLeaveTeam();
  stDeductMoney::default_instance_ = new stDeductMoney();
  stDeductMoneyResult::default_instance_ = new stDeductMoneyResult();
  stGiveReward::default_instance_ = new stGiveReward();
  stGiveRewardResult::default_instance_ = new stGiveRewardResult();
  stReqCheckMission::default_instance_ = new stReqCheckMission();
  stReqCheckTask::default_instance_ = new stReqCheckTask();
  stReqEnterTaskLv::default_instance_ = new stReqEnterTaskLv();
  stReqDisbandTeam::default_instance_ = new stReqDisbandTeam();
  stReqDrawInviteReward::default_instance_ = new stReqDrawInviteReward();
  stReqDrawInviteRewardCb::default_instance_ = new stReqDrawInviteRewardCb();
  stReqDrawUseInviteReward::default_instance_ = new stReqDrawUseInviteReward();
  stRoleInfo::default_instance_ = new stRoleInfo();
  stHeroLeagueEnterCopyMap::default_instance_ = new stHeroLeagueEnterCopyMap();
  stHeroLeaguePkWithRobot::default_instance_ = new stHeroLeaguePkWithRobot();
  stReqHeroLeagueCheck::default_instance_ = new stReqHeroLeagueCheck();
  stHeroLeagueMatch::default_instance_ = new stHeroLeagueMatch();
  stPubRoleInfo::default_instance_ = new stPubRoleInfo();
  stHeroLeagueResult::default_instance_ = new stHeroLeagueResult();
  stSynRoleList::default_instance_ = new stSynRoleList();
  stTeam::default_instance_ = new stTeam();
  stSynRoleListResult::default_instance_ = new stSynRoleListResult();
  stSynChampionInfo::default_instance_ = new stSynChampionInfo();
  stReqSynChampionInfo::default_instance_ = new stReqSynChampionInfo();
  stReqWorskip::default_instance_ = new stReqWorskip();
  stWorskipResult::default_instance_ = new stWorskipResult();
  stReqRedPoint::default_instance_ = new stReqRedPoint();
  stRedPointResult::default_instance_ = new stRedPointResult();
  stInterceptResultToGlobal::default_instance_ = new stInterceptResultToGlobal();
  stSynMemberInfo::default_instance_ = new stSynMemberInfo();
  stRetRoomInfo::default_instance_ = new stRetRoomInfo();
  stRetAddTeamMember::default_instance_ = new stRetAddTeamMember();
  MarryObjInfo::default_instance_ = new MarryObjInfo();
  stReqPropose::default_instance_ = new stReqPropose();
  stReqAgreeMarry::default_instance_ = new stReqAgreeMarry();
  stReqQuitWedding::default_instance_ = new stReqQuitWedding();
  stReqReEnterWedding::default_instance_ = new stReqReEnterWedding();
  stReqBuyFireWork::default_instance_ = new stReqBuyFireWork();
  stReqAgreeInvite::default_instance_ = new stReqAgreeInvite();
  stReqTakeCandy::default_instance_ = new stReqTakeCandy();
  stNotifyCoupleMarry::default_instance_ = new stNotifyCoupleMarry();
  stSendWeedingRing::default_instance_ = new stSendWeedingRing();
  stMarryInfoCb::default_instance_ = new stMarryInfoCb();
  stUseFireWork::default_instance_ = new stUseFireWork();
  stRetMarryInfoToCouple::default_instance_ = new stRetMarryInfoToCouple();
  stNotifyCoupleMarryCb::default_instance_ = new stNotifyCoupleMarryCb();
  stRetForceDivorce::default_instance_ = new stRetForceDivorce();
  stRetForceDivorceCb::default_instance_ = new stRetForceDivorceCb();
  stRetRejectDivorce::default_instance_ = new stRetRejectDivorce();
  stRetDelUserOnlineMarryInfo::default_instance_ = new stRetDelUserOnlineMarryInfo();
  stReqSynGuildBlackMarketLv::default_instance_ = new stReqSynGuildBlackMarketLv();
  stSynGuildBlackMarketLvResult::default_instance_ = new stSynGuildBlackMarketLvResult();
  stGloryUserPart::default_instance_ = new stGloryUserPart();
  stGloryUserDetail::default_instance_ = new stGloryUserDetail();
  stGloryUser::default_instance_ = new stGloryUser();
  stEnterResBattle::default_instance_ = new stEnterResBattle();
  stBroadResBattleInvite::default_instance_ = new stBroadResBattleInvite();
  stPubOffline::default_instance_ = new stPubOffline();
  stDiscoverConsume::default_instance_ = new stDiscoverConsume();
  stSynCoupleInfo::default_instance_ = new stSynCoupleInfo();
  stSynResBattleUserData::default_instance_ = new stSynResBattleUserData();
  stSynResBattleTop50::default_instance_ = new stSynResBattleTop50();
  stSynResBattleKing::default_instance_ = new stSynResBattleKing();
  stReplyInviteResBattle::default_instance_ = new stReplyInviteResBattle();
  stSynGloryKingTitle::default_instance_ = new stSynGloryKingTitle();
  stPubOnline::default_instance_ = new stPubOnline();
  stResBattleSend2Pub::default_instance_ = new stResBattleSend2Pub();
  stServerParamItem::default_instance_ = new stServerParamItem();
  stServerParamSend2Game::default_instance_ = new stServerParamSend2Game();
  stSynUserPhotoID::default_instance_ = new stSynUserPhotoID();
  stUseLvlBox::default_instance_ = new stUseLvlBox();
  stUseLvlBoxRes::default_instance_ = new stUseLvlBoxRes();
  stRechangeStatistics::default_instance_ = new stRechangeStatistics();
  stNftItem::default_instance_ = new stNftItem();
  stGlobal2GameQueryUserNft::default_instance_ = new stGlobal2GameQueryUserNft();
  stGame2GlobalQueryUserNftResult::default_instance_ = new stGame2GlobalQueryUserNftResult();
  stGlobal2GameChangeNftItem::default_instance_ = new stGlobal2GameChangeNftItem();
  stGame2GlobalChangeNftItemResult::default_instance_ = new stGame2GlobalChangeNftItemResult();
  stGame2GlobalNftVipGift::default_instance_ = new stGame2GlobalNftVipGift();
  stRetNftOfflineUserData::default_instance_ = new stRetNftOfflineUserData();
  stRetChangeNftOfflineUserData::default_instance_ = new stRetChangeNftOfflineUserData();
  stSendUserLog::default_instance_ = new stSendUserLog();
  stReqKillUserOut::default_instance_ = new stReqKillUserOut();
  stKillUserOutResult::default_instance_ = new stKillUserOutResult();
  stReqSetUserGMType::default_instance_ = new stReqSetUserGMType();
  stSetUserGMTypeResult::default_instance_ = new stSetUserGMTypeResult();
  stReqBanUser::default_instance_ = new stReqBanUser();
  stBanUserResult::default_instance_ = new stBanUserResult();
  stSendMailAttach::default_instance_ = new stSendMailAttach();
  stSendMail2User::default_instance_ = new stSendMail2User();
  stSendMail2UserResult::default_instance_ = new stSendMail2UserResult();
  stWebMotifyUserInfo::default_instance_ = new stWebMotifyUserInfo();
  stWebMotifyUserInfoRet::default_instance_ = new stWebMotifyUserInfoRet();
  stAddOrUpdateNotice::default_instance_ = new stAddOrUpdateNotice();
  stDelNotice::default_instance_ = new stDelNotice();
  stWebNotifyRechargeInfo::default_instance_ = new stWebNotifyRechargeInfo();
  stAddGiftBagCfg::default_instance_ = new stAddGiftBagCfg();
  stDelGiftBagCfg::default_instance_ = new stDelGiftBagCfg();
  stAddBlackAndWhite::default_instance_ = new stAddBlackAndWhite();
  stSetServerMaintenanceTime::default_instance_ = new stSetServerMaintenanceTime();
  stGetSvrConfig::default_instance_ = new stGetSvrConfig();
  stRetSvrConfig::default_instance_ = new stRetSvrConfig();
  stUpdateSvrCfg::default_instance_ = new stUpdateSvrCfg();
  stNotifyWebOnlineNum::default_instance_ = new stNotifyWebOnlineNum();
  stEnterSelectPage::default_instance_ = new stEnterSelectPage();
  stNotifyWebCreateRole::default_instance_ = new stNotifyWebCreateRole();
  stSendGuildLog::default_instance_ = new stSendGuildLog();
  sstSendGuildResLog::default_instance_ = new sstSendGuildResLog();
  stSendModuleLog::default_instance_ = new stSendModuleLog();
  stReqGetTxGiftBag::default_instance_ = new stReqGetTxGiftBag();
  stRetGetTxGiftBag::default_instance_ = new stRetGetTxGiftBag();
  stUpdateSvrOpenTime::default_instance_ = new stUpdateSvrOpenTime();
  stResourceChgLog::default_instance_ = new stResourceChgLog();
  stUseInviteCode::default_instance_ = new stUseInviteCode();
  stUseInviteCodeCb::default_instance_ = new stUseInviteCodeCb();
  stReqLimitPetActivityData::default_instance_ = new stReqLimitPetActivityData();
  stAcitivityLimitPetItem::default_instance_ = new stAcitivityLimitPetItem();
  stSendLimitPetActivityData::default_instance_ = new stSendLimitPetActivityData();
  stSendShutDown::default_instance_ = new stSendShutDown();
  stWeb2GlobalQueryUserNft::default_instance_ = new stWeb2GlobalQueryUserNft();
  stGlobal2WebQueryUserNftResult::default_instance_ = new stGlobal2WebQueryUserNftResult();
  stWeb2GlobalChangeNftItem::default_instance_ = new stWeb2GlobalChangeNftItem();
  stGlobal2WebChangeNftItemResult::default_instance_ = new stGlobal2WebChangeNftItemResult();
  stLoginGlobal::default_instance_->InitAsDefaultInstance();
  stCreateRole::default_instance_->InitAsDefaultInstance();
  stCreateRoleResult::default_instance_->InitAsDefaultInstance();
  stReqSnapData::default_instance_->InitAsDefaultInstance();
  stSnapData::default_instance_->InitAsDefaultInstance();
  stRetSnapData::default_instance_->InitAsDefaultInstance();
  stReqLoadData::default_instance_->InitAsDefaultInstance();
  stGateForwardProto::default_instance_->InitAsDefaultInstance();
  stForwardProto2Me::default_instance_->InitAsDefaultInstance();
  stBroadcastProto2AllUser::default_instance_->InitAsDefaultInstance();
  stLoginGlobalFail::default_instance_->InitAsDefaultInstance();
  stNotifyLoginOut::default_instance_->InitAsDefaultInstance();
  stGameSvrStartUp::default_instance_->InitAsDefaultInstance();
  stKillUserOut::default_instance_->InitAsDefaultInstance();
  stServerCfgPair::default_instance_->InitAsDefaultInstance();
  stNotifyGateSvrCfg::default_instance_->InitAsDefaultInstance();
  stReloginGlobal::default_instance_->InitAsDefaultInstance();
  stPlayerAutoConnect::default_instance_->InitAsDefaultInstance();
  stClientLostConnect::default_instance_->InitAsDefaultInstance();
  stAskIsNewAccount::default_instance_->InitAsDefaultInstance();
  stIsNewAccount::default_instance_->InitAsDefaultInstance();
  stSaveRoleInfo::default_instance_->InitAsDefaultInstance();
  stRetRoleInfo::default_instance_->InitAsDefaultInstance();
  stUserEnterMapSuccess::default_instance_->InitAsDefaultInstance();
  stRechargeInfo::default_instance_->InitAsDefaultInstance();
  stUserRecharge::default_instance_->InitAsDefaultInstance();
  stProcessGM::default_instance_->InitAsDefaultInstance();
  stSynFetchLilianNum::default_instance_->InitAsDefaultInstance();
  stSynGuildID::default_instance_->InitAsDefaultInstance();
  stCreateGuild::default_instance_->InitAsDefaultInstance();
  stCreateGuildDecMoney::default_instance_->InitAsDefaultInstance();
  stForwardJoininGuild::default_instance_->InitAsDefaultInstance();
  stAddGuildContribute::default_instance_->InitAsDefaultInstance();
  stBroadcastGuildChatInfo::default_instance_->InitAsDefaultInstance();
  stGuildPray::default_instance_->InitAsDefaultInstance();
  stSynUserLevel::default_instance_->InitAsDefaultInstance();
  stSynCopymapStarNum::default_instance_->InitAsDefaultInstance();
  stSynUserBattlePower::default_instance_->InitAsDefaultInstance();
  stSendTeamChatInfo::default_instance_->InitAsDefaultInstance();
  stTeamLeaveCopyMap::default_instance_->InitAsDefaultInstance();
  stTreasureCombine::default_instance_->InitAsDefaultInstance();
  stTreasureCombineSuccess::default_instance_->InitAsDefaultInstance();
  stBuyPeaceModubleTime::default_instance_->InitAsDefaultInstance();
  stReqChangeGameSvr::default_instance_->InitAsDefaultInstance();
  stConfirmChangeGameSvr::default_instance_->InitAsDefaultInstance();
  stRetOtherUserData2Me::default_instance_->InitAsDefaultInstance();
  stMailAttach::default_instance_->InitAsDefaultInstance();
  stObtainItemFromMail::default_instance_->InitAsDefaultInstance();
  stSynAddTreasure::default_instance_->InitAsDefaultInstance();
  stBeginPKWithOther::default_instance_->InitAsDefaultInstance();
  stUserLeitaiChallenge::default_instance_->InitAsDefaultInstance();
  stArenaPKResult::default_instance_->InitAsDefaultInstance();
  stSynDrawHeroScore::default_instance_->InitAsDefaultInstance();
  stUpLeitaiUseTime::default_instance_->InitAsDefaultInstance();
  stUserLeaveGuild::default_instance_->InitAsDefaultInstance();
  stEnterCopymapMemInfo::default_instance_->InitAsDefaultInstance();
  stTeamEnterCopyMap::default_instance_->InitAsDefaultInstance();
  stOne2OnePVPEnterCopyMap::default_instance_->InitAsDefaultInstance();
  stForwardCapture::default_instance_->InitAsDefaultInstance();
  stCaptureRewardItem::default_instance_->InitAsDefaultInstance();
  stCaptureReward::default_instance_->InitAsDefaultInstance();
  stRealTimeBattleEnterCopymap::default_instance_->InitAsDefaultInstance();
  stNotifyAddLilian::default_instance_->InitAsDefaultInstance();
  stEnterGuildCopymap::default_instance_->InitAsDefaultInstance();
  stSynMyContribyte::default_instance_->InitAsDefaultInstance();
  stOnlineUserGMType::default_instance_->InitAsDefaultInstance();
  stForbidOnlineUser::default_instance_->InitAsDefaultInstance();
  stOne2OnePVPFinish::default_instance_->InitAsDefaultInstance();
  stActivityConfig::default_instance_->InitAsDefaultInstance();
  stSynActivityConfig::default_instance_->InitAsDefaultInstance();
  stCaptureTreasureFail::default_instance_->InitAsDefaultInstance();
  stCharID2Rank::default_instance_->InitAsDefaultInstance();
  stRankModuleInfo::default_instance_->InitAsDefaultInstance();
  stSynRankModuleInfo::default_instance_->InitAsDefaultInstance();
  stGiftBagReward::default_instance_->InitAsDefaultInstance();
  stGiveGiftBagReward::default_instance_->InitAsDefaultInstance();
  stNotifyGameSvrCfg::default_instance_->InitAsDefaultInstance();
  stNotifyCurEquipInfo::default_instance_->InitAsDefaultInstance();
  stReloginGame::default_instance_->InitAsDefaultInstance();
  stFirstKillBaseInfo::default_instance_->InitAsDefaultInstance();
  stTeamCopyMapFinish::default_instance_->InitAsDefaultInstance();
  stUserOnlineSendFirstKillInfo::default_instance_->InitAsDefaultInstance();
  stTeamFinishFirstKill::default_instance_->InitAsDefaultInstance();
  stSetClearWorldBossTime::default_instance_->InitAsDefaultInstance();
  stSetWorldBossBuyNum::default_instance_->InitAsDefaultInstance();
  stUserDecSP::default_instance_->InitAsDefaultInstance();
  stUsreDecLilian::default_instance_->InitAsDefaultInstance();
  stUserDamagePair::default_instance_->InitAsDefaultInstance();
  stGuildCopymapFail::default_instance_->InitAsDefaultInstance();
  stGuildCopymapKillBoss::default_instance_->InitAsDefaultInstance();
  stWorldBossCopymapFail::default_instance_->InitAsDefaultInstance();
  stKillWorldBoss::default_instance_->InitAsDefaultInstance();
  stDrawHeroScoreReward::default_instance_->InitAsDefaultInstance();
  stDrawHeroRankReward::default_instance_->InitAsDefaultInstance();
  stCompensantionItem::default_instance_->InitAsDefaultInstance();
  stSetCompensationID::default_instance_->InitAsDefaultInstance();
  stSetOpenServerDay::default_instance_->InitAsDefaultInstance();
  stSynGuildLv2AllMember::default_instance_->InitAsDefaultInstance();
  stForwardChgBadge::default_instance_->InitAsDefaultInstance();
  stWorldBossBuyDecDiamond::default_instance_->InitAsDefaultInstance();
  stGuildDonateSuccess::default_instance_->InitAsDefaultInstance();
  stUserLeaveWorldBoss::default_instance_->InitAsDefaultInstance();
  stNotifyGameAutoConnect::default_instance_->InitAsDefaultInstance();
  stForwardDrawHeroScoreReward::default_instance_->InitAsDefaultInstance();
  stNotifyArenaReward::default_instance_->InitAsDefaultInstance();
  stForwardInvestgateAnswer::default_instance_->InitAsDefaultInstance();
  ForwardInvestgateResult::default_instance_->InitAsDefaultInstance();
  stGMModifyUserInfo::default_instance_->InitAsDefaultInstance();
  stSynMyArenaRank::default_instance_->InitAsDefaultInstance();
  stSynVipLv::default_instance_->InitAsDefaultInstance();
  stNotifyClearArenaCD::default_instance_->InitAsDefaultInstance();
  stReqResetArenaChallengeNum::default_instance_->InitAsDefaultInstance();
  stNotfiyResetChallengeNum::default_instance_->InitAsDefaultInstance();
  stReqResetInterceptNum::default_instance_->InitAsDefaultInstance();
  stNotifyClearInterceptCD::default_instance_->InitAsDefaultInstance();
  stNotifyResetInterceptNum::default_instance_->InitAsDefaultInstance();
  stNotifyGuardQuality::default_instance_->InitAsDefaultInstance();
  stNotifyGuardInspiredSuccess::default_instance_->InitAsDefaultInstance();
  stReqRefreshGuardQuality::default_instance_->InitAsDefaultInstance();
  stNotifyClearOne2OneScore::default_instance_->InitAsDefaultInstance();
  stClearOne2OneScoreSuccess::default_instance_->InitAsDefaultInstance();
  stInterceptReward::default_instance_->InitAsDefaultInstance();
  stQuickFinishDecDiamond::default_instance_->InitAsDefaultInstance();
  stQuickFinishDiamondSuccess::default_instance_->InitAsDefaultInstance();
  stOne2OnePkWithRobot::default_instance_->InitAsDefaultInstance();
  stNotifyUserBeginGuard::default_instance_->InitAsDefaultInstance();
  stNotifyUserInterceptResult::default_instance_->InitAsDefaultInstance();
  stNotifyCloseBetaReward::default_instance_->InitAsDefaultInstance();
  stEnterManorFightMapUserInfo::default_instance_->InitAsDefaultInstance();
  stEnterManorFightMap::default_instance_->InitAsDefaultInstance();
  stManorFightBattleProp::default_instance_->InitAsDefaultInstance();
  stFinishManorFight::default_instance_->InitAsDefaultInstance();
  stExistName::default_instance_->InitAsDefaultInstance();
  stSynName::default_instance_->InitAsDefaultInstance();
  stSynGloryfashionCharID::default_instance_->InitAsDefaultInstance();
  stDevilCallItem::default_instance_->InitAsDefaultInstance();
  stAllDevilCall::default_instance_->InitAsDefaultInstance();
  stDevilCallReward::default_instance_->InitAsDefaultInstance();
  stDevilCallRewardRet::default_instance_->InitAsDefaultInstance();
  stDevilCall::default_instance_->InitAsDefaultInstance();
  stDevilCallRet::default_instance_->InitAsDefaultInstance();
  stDevilCallSummary::default_instance_->InitAsDefaultInstance();
  stExpeditionItem::default_instance_->InitAsDefaultInstance();
  stExpeditionInfo::default_instance_->InitAsDefaultInstance();
  stExpedition::default_instance_->InitAsDefaultInstance();
  stExpeditionHero::default_instance_->InitAsDefaultInstance();
  stExpeditionRet::default_instance_->InitAsDefaultInstance();
  stExpeditionReward::default_instance_->InitAsDefaultInstance();
  stExpeditionRewardRet::default_instance_->InitAsDefaultInstance();
  stFastExpedition::default_instance_->InitAsDefaultInstance();
  stFastExpeditionRet::default_instance_->InitAsDefaultInstance();
  stCancelExpedition::default_instance_->InitAsDefaultInstance();
  stCancelExpeditionRet::default_instance_->InitAsDefaultInstance();
  stExpeditionSummary::default_instance_->InitAsDefaultInstance();
  stGiveLilianDayTaskCb::default_instance_->InitAsDefaultInstance();
  stUpdateDamageRank::default_instance_->InitAsDefaultInstance();
  stNoticeSendRankInfo::default_instance_->InitAsDefaultInstance();
  stOperateActivityCb::default_instance_->InitAsDefaultInstance();
  stOperateActivityReward::default_instance_->InitAsDefaultInstance();
  stOperateActivityRewardCb::default_instance_->InitAsDefaultInstance();
  stOperateActivityLotteryReward::default_instance_->InitAsDefaultInstance();
  stOperateActivityLotteryRewardCb::default_instance_->InitAsDefaultInstance();
  stReqPayTypeCb::default_instance_->InitAsDefaultInstance();
  stReqUserRankInfo::default_instance_->InitAsDefaultInstance();
  userSortInfo::default_instance_->InitAsDefaultInstance();
  stUserRankInfoResult::default_instance_->InitAsDefaultInstance();
  stEmeraldDreamCopymapFail::default_instance_->InitAsDefaultInstance();
  stKillEmeraldDreamBoss::default_instance_->InitAsDefaultInstance();
  strRemoveNum::default_instance_->InitAsDefaultInstance();
  stCopyMapInfo::default_instance_->InitAsDefaultInstance();
  stCopyMapInfoResult::default_instance_->InitAsDefaultInstance();
  stRealTimeTeamMatch::default_instance_->InitAsDefaultInstance();
  stOnPubLeaveTeam::default_instance_->InitAsDefaultInstance();
  stDeductMoney::default_instance_->InitAsDefaultInstance();
  stDeductMoneyResult::default_instance_->InitAsDefaultInstance();
  stGiveReward::default_instance_->InitAsDefaultInstance();
  stGiveRewardResult::default_instance_->InitAsDefaultInstance();
  stReqCheckMission::default_instance_->InitAsDefaultInstance();
  stReqCheckTask::default_instance_->InitAsDefaultInstance();
  stReqEnterTaskLv::default_instance_->InitAsDefaultInstance();
  stReqDisbandTeam::default_instance_->InitAsDefaultInstance();
  stReqDrawInviteReward::default_instance_->InitAsDefaultInstance();
  stReqDrawInviteRewardCb::default_instance_->InitAsDefaultInstance();
  stReqDrawUseInviteReward::default_instance_->InitAsDefaultInstance();
  stRoleInfo::default_instance_->InitAsDefaultInstance();
  stHeroLeagueEnterCopyMap::default_instance_->InitAsDefaultInstance();
  stHeroLeaguePkWithRobot::default_instance_->InitAsDefaultInstance();
  stReqHeroLeagueCheck::default_instance_->InitAsDefaultInstance();
  stHeroLeagueMatch::default_instance_->InitAsDefaultInstance();
  stPubRoleInfo::default_instance_->InitAsDefaultInstance();
  stHeroLeagueResult::default_instance_->InitAsDefaultInstance();
  stSynRoleList::default_instance_->InitAsDefaultInstance();
  stTeam::default_instance_->InitAsDefaultInstance();
  stSynRoleListResult::default_instance_->InitAsDefaultInstance();
  stSynChampionInfo::default_instance_->InitAsDefaultInstance();
  stReqSynChampionInfo::default_instance_->InitAsDefaultInstance();
  stReqWorskip::default_instance_->InitAsDefaultInstance();
  stWorskipResult::default_instance_->InitAsDefaultInstance();
  stReqRedPoint::default_instance_->InitAsDefaultInstance();
  stRedPointResult::default_instance_->InitAsDefaultInstance();
  stInterceptResultToGlobal::default_instance_->InitAsDefaultInstance();
  stSynMemberInfo::default_instance_->InitAsDefaultInstance();
  stRetRoomInfo::default_instance_->InitAsDefaultInstance();
  stRetAddTeamMember::default_instance_->InitAsDefaultInstance();
  MarryObjInfo::default_instance_->InitAsDefaultInstance();
  stReqPropose::default_instance_->InitAsDefaultInstance();
  stReqAgreeMarry::default_instance_->InitAsDefaultInstance();
  stReqQuitWedding::default_instance_->InitAsDefaultInstance();
  stReqReEnterWedding::default_instance_->InitAsDefaultInstance();
  stReqBuyFireWork::default_instance_->InitAsDefaultInstance();
  stReqAgreeInvite::default_instance_->InitAsDefaultInstance();
  stReqTakeCandy::default_instance_->InitAsDefaultInstance();
  stNotifyCoupleMarry::default_instance_->InitAsDefaultInstance();
  stSendWeedingRing::default_instance_->InitAsDefaultInstance();
  stMarryInfoCb::default_instance_->InitAsDefaultInstance();
  stUseFireWork::default_instance_->InitAsDefaultInstance();
  stRetMarryInfoToCouple::default_instance_->InitAsDefaultInstance();
  stNotifyCoupleMarryCb::default_instance_->InitAsDefaultInstance();
  stRetForceDivorce::default_instance_->InitAsDefaultInstance();
  stRetForceDivorceCb::default_instance_->InitAsDefaultInstance();
  stRetRejectDivorce::default_instance_->InitAsDefaultInstance();
  stRetDelUserOnlineMarryInfo::default_instance_->InitAsDefaultInstance();
  stReqSynGuildBlackMarketLv::default_instance_->InitAsDefaultInstance();
  stSynGuildBlackMarketLvResult::default_instance_->InitAsDefaultInstance();
  stGloryUserPart::default_instance_->InitAsDefaultInstance();
  stGloryUserDetail::default_instance_->InitAsDefaultInstance();
  stGloryUser::default_instance_->InitAsDefaultInstance();
  stEnterResBattle::default_instance_->InitAsDefaultInstance();
  stBroadResBattleInvite::default_instance_->InitAsDefaultInstance();
  stPubOffline::default_instance_->InitAsDefaultInstance();
  stDiscoverConsume::default_instance_->InitAsDefaultInstance();
  stSynCoupleInfo::default_instance_->InitAsDefaultInstance();
  stSynResBattleUserData::default_instance_->InitAsDefaultInstance();
  stSynResBattleTop50::default_instance_->InitAsDefaultInstance();
  stSynResBattleKing::default_instance_->InitAsDefaultInstance();
  stReplyInviteResBattle::default_instance_->InitAsDefaultInstance();
  stSynGloryKingTitle::default_instance_->InitAsDefaultInstance();
  stPubOnline::default_instance_->InitAsDefaultInstance();
  stResBattleSend2Pub::default_instance_->InitAsDefaultInstance();
  stServerParamItem::default_instance_->InitAsDefaultInstance();
  stServerParamSend2Game::default_instance_->InitAsDefaultInstance();
  stSynUserPhotoID::default_instance_->InitAsDefaultInstance();
  stUseLvlBox::default_instance_->InitAsDefaultInstance();
  stUseLvlBoxRes::default_instance_->InitAsDefaultInstance();
  stRechangeStatistics::default_instance_->InitAsDefaultInstance();
  stNftItem::default_instance_->InitAsDefaultInstance();
  stGlobal2GameQueryUserNft::default_instance_->InitAsDefaultInstance();
  stGame2GlobalQueryUserNftResult::default_instance_->InitAsDefaultInstance();
  stGlobal2GameChangeNftItem::default_instance_->InitAsDefaultInstance();
  stGame2GlobalChangeNftItemResult::default_instance_->InitAsDefaultInstance();
  stGame2GlobalNftVipGift::default_instance_->InitAsDefaultInstance();
  stRetNftOfflineUserData::default_instance_->InitAsDefaultInstance();
  stRetChangeNftOfflineUserData::default_instance_->InitAsDefaultInstance();
  stSendUserLog::default_instance_->InitAsDefaultInstance();
  stReqKillUserOut::default_instance_->InitAsDefaultInstance();
  stKillUserOutResult::default_instance_->InitAsDefaultInstance();
  stReqSetUserGMType::default_instance_->InitAsDefaultInstance();
  stSetUserGMTypeResult::default_instance_->InitAsDefaultInstance();
  stReqBanUser::default_instance_->InitAsDefaultInstance();
  stBanUserResult::default_instance_->InitAsDefaultInstance();
  stSendMailAttach::default_instance_->InitAsDefaultInstance();
  stSendMail2User::default_instance_->InitAsDefaultInstance();
  stSendMail2UserResult::default_instance_->InitAsDefaultInstance();
  stWebMotifyUserInfo::default_instance_->InitAsDefaultInstance();
  stWebMotifyUserInfoRet::default_instance_->InitAsDefaultInstance();
  stAddOrUpdateNotice::default_instance_->InitAsDefaultInstance();
  stDelNotice::default_instance_->InitAsDefaultInstance();
  stWebNotifyRechargeInfo::default_instance_->InitAsDefaultInstance();
  stAddGiftBagCfg::default_instance_->InitAsDefaultInstance();
  stDelGiftBagCfg::default_instance_->InitAsDefaultInstance();
  stAddBlackAndWhite::default_instance_->InitAsDefaultInstance();
  stSetServerMaintenanceTime::default_instance_->InitAsDefaultInstance();
  stGetSvrConfig::default_instance_->InitAsDefaultInstance();
  stRetSvrConfig::default_instance_->InitAsDefaultInstance();
  stUpdateSvrCfg::default_instance_->InitAsDefaultInstance();
  stNotifyWebOnlineNum::default_instance_->InitAsDefaultInstance();
  stEnterSelectPage::default_instance_->InitAsDefaultInstance();
  stNotifyWebCreateRole::default_instance_->InitAsDefaultInstance();
  stSendGuildLog::default_instance_->InitAsDefaultInstance();
  sstSendGuildResLog::default_instance_->InitAsDefaultInstance();
  stSendModuleLog::default_instance_->InitAsDefaultInstance();
  stReqGetTxGiftBag::default_instance_->InitAsDefaultInstance();
  stRetGetTxGiftBag::default_instance_->InitAsDefaultInstance();
  stUpdateSvrOpenTime::default_instance_->InitAsDefaultInstance();
  stResourceChgLog::default_instance_->InitAsDefaultInstance();
  stUseInviteCode::default_instance_->InitAsDefaultInstance();
  stUseInviteCodeCb::default_instance_->InitAsDefaultInstance();
  stReqLimitPetActivityData::default_instance_->InitAsDefaultInstance();
  stAcitivityLimitPetItem::default_instance_->InitAsDefaultInstance();
  stSendLimitPetActivityData::default_instance_->InitAsDefaultInstance();
  stSendShutDown::default_instance_->InitAsDefaultInstance();
  stWeb2GlobalQueryUserNft::default_instance_->InitAsDefaultInstance();
  stGlobal2WebQueryUserNftResult::default_instance_->InitAsDefaultInstance();
  stWeb2GlobalChangeNftItem::default_instance_->InitAsDefaultInstance();
  stGlobal2WebChangeNftItemResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Global_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Global_2eproto {
  StaticDescriptorInitializer_Global_2eproto() {
    protobuf_AddDesc_Global_2eproto();
  }
} static_descriptor_initializer_Global_2eproto_;
const ::google::protobuf::EnumDescriptor* GlobalModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalModID_descriptor_;
}
bool GlobalModID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SaveType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveType_descriptor_;
}
bool SaveType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eLoadRoleDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eLoadRoleDataType_descriptor_;
}
bool eLoadRoleDataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eGMType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGMType_descriptor_;
}
bool eGMType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRealTimePKType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRealTimePKType_descriptor_;
}
bool eRealTimePKType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRankModule_ID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRankModule_ID_descriptor_;
}
bool eRankModule_ID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eNoticeOp_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eNoticeOp_descriptor_;
}
bool eNoticeOp_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLoginGlobal_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginGlobal_ProtoModID_descriptor_;
}
bool stLoginGlobal_ProtoModID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginGlobal_ProtoModID stLoginGlobal::ModID;
const stLoginGlobal_ProtoModID stLoginGlobal::ProtoModID_MIN;
const stLoginGlobal_ProtoModID stLoginGlobal::ProtoModID_MAX;
const int stLoginGlobal::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLoginGlobal_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginGlobal_ProtoFunID_descriptor_;
}
bool stLoginGlobal_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginGlobal_ProtoFunID stLoginGlobal::FunID;
const stLoginGlobal_ProtoFunID stLoginGlobal::ProtoFunID_MIN;
const stLoginGlobal_ProtoFunID stLoginGlobal::ProtoFunID_MAX;
const int stLoginGlobal::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLoginGlobal::kSvrTypeFieldNumber;
const int stLoginGlobal::kSvrIDFieldNumber;
const int stLoginGlobal::kIpFieldNumber;
const int stLoginGlobal::kPortFieldNumber;
#endif  // !_MSC_VER

stLoginGlobal::stLoginGlobal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLoginGlobal::InitAsDefaultInstance() {
}

stLoginGlobal::stLoginGlobal(const stLoginGlobal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLoginGlobal::SharedCtor() {
  _cached_size_ = 0;
  svrtype_ = 0u;
  svrid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLoginGlobal::~stLoginGlobal() {
  SharedDtor();
}

void stLoginGlobal::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void stLoginGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLoginGlobal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginGlobal_descriptor_;
}

const stLoginGlobal& stLoginGlobal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stLoginGlobal* stLoginGlobal::default_instance_ = NULL;

stLoginGlobal* stLoginGlobal::New() const {
  return new stLoginGlobal;
}

void stLoginGlobal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrtype_ = 0u;
    svrid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLoginGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtype_)));
          set_has_svrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrID;
        break;
      }

      // optional uint32 svrID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLoginGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrType = 1;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrtype(), output);
  }

  // optional uint32 svrID = 2;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLoginGlobal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrType = 1;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrtype(), target);
  }

  // optional uint32 svrID = 2;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLoginGlobal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrType = 1;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtype());
    }

    // optional uint32 svrID = 2;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLoginGlobal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLoginGlobal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLoginGlobal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLoginGlobal::MergeFrom(const stLoginGlobal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLoginGlobal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLoginGlobal::CopyFrom(const stLoginGlobal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLoginGlobal::IsInitialized() const {

  return true;
}

void stLoginGlobal::Swap(stLoginGlobal* other) {
  if (other != this) {
    std::swap(svrtype_, other->svrtype_);
    std::swap(svrid_, other->svrid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLoginGlobal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLoginGlobal_descriptor_;
  metadata.reflection = stLoginGlobal_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCreateRole_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateRole_ProtoModID_descriptor_;
}
bool stCreateRole_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateRole_ProtoModID stCreateRole::ModID;
const stCreateRole_ProtoModID stCreateRole::ProtoModID_MIN;
const stCreateRole_ProtoModID stCreateRole::ProtoModID_MAX;
const int stCreateRole::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCreateRole_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateRole_ProtoFunID_descriptor_;
}
bool stCreateRole_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateRole_ProtoFunID stCreateRole::FunID;
const stCreateRole_ProtoFunID stCreateRole::ProtoFunID_MIN;
const stCreateRole_ProtoFunID stCreateRole::ProtoFunID_MAX;
const int stCreateRole::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCreateRole::kAccountFieldNumber;
const int stCreateRole::kNameFieldNumber;
const int stCreateRole::kGateIDFieldNumber;
const int stCreateRole::kJobFieldNumber;
const int stCreateRole::kSexFieldNumber;
const int stCreateRole::kHeadIDFieldNumber;
const int stCreateRole::kFaceIDFieldNumber;
const int stCreateRole::kClientIPFieldNumber;
const int stCreateRole::kDeviceIDFieldNumber;
const int stCreateRole::kOpIDFieldNumber;
const int stCreateRole::kChannelIDFieldNumber;
const int stCreateRole::kServerIDFieldNumber;
#endif  // !_MSC_VER

stCreateRole::stCreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCreateRole::InitAsDefaultInstance() {
}

stCreateRole::stCreateRole(const stCreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCreateRole::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateid_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  headid_ = 0u;
  faceid_ = 0u;
  clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCreateRole::~stCreateRole() {
  SharedDtor();
}

void stCreateRole::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (clientip_ != &::google::protobuf::internal::kEmptyString) {
    delete clientip_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (this != default_instance_) {
  }
}

void stCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateRole_descriptor_;
}

const stCreateRole& stCreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCreateRole* stCreateRole::default_instance_ = NULL;

stCreateRole* stCreateRole::New() const {
  return new stCreateRole;
}

void stCreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    gateid_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    headid_ = 0u;
    faceid_ = 0u;
    if (has_clientip()) {
      if (clientip_ != &::google::protobuf::internal::kEmptyString) {
        clientip_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    opid_ = 0u;
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateID;
        break;
      }

      // optional uint32 gateID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_faceID;
        break;
      }

      // optional uint32 faceID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faceid_)));
          set_has_faceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_clientIP;
        break;
      }

      // optional string clientIP = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clientIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clientip().data(), this->clientip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_deviceID;
        break;
      }

      // optional string deviceID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_channelID;
        break;
      }

      // optional string channelID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_serverID;
        break;
      }

      // optional uint32 serverID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 gateID = 3;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gateid(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 headID = 6;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->headid(), output);
  }

  // optional uint32 faceID = 7;
  if (has_faceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->faceid(), output);
  }

  // optional string clientIP = 8;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->clientip(), output);
  }

  // optional string deviceID = 9;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->deviceid(), output);
  }

  // optional uint32 opID = 10;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->opid(), output);
  }

  // optional string channelID = 11;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->channelid(), output);
  }

  // optional uint32 serverID = 12;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 gateID = 3;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gateid(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 headID = 6;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->headid(), target);
  }

  // optional uint32 faceID = 7;
  if (has_faceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->faceid(), target);
  }

  // optional string clientIP = 8;
  if (has_clientip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clientip().data(), this->clientip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->clientip(), target);
  }

  // optional string deviceID = 9;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->deviceid(), target);
  }

  // optional uint32 opID = 10;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->opid(), target);
  }

  // optional string channelID = 11;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->channelid(), target);
  }

  // optional uint32 serverID = 12;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCreateRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 gateID = 3;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 headID = 6;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 faceID = 7;
    if (has_faceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faceid());
    }

    // optional string clientIP = 8;
    if (has_clientip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clientip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string deviceID = 9;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional uint32 opID = 10;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional string channelID = 11;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional uint32 serverID = 12;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCreateRole::MergeFrom(const stCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_faceid()) {
      set_faceid(from.faceid());
    }
    if (from.has_clientip()) {
      set_clientip(from.clientip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCreateRole::CopyFrom(const stCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCreateRole::IsInitialized() const {

  return true;
}

void stCreateRole::Swap(stCreateRole* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(gateid_, other->gateid_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(headid_, other->headid_);
    std::swap(faceid_, other->faceid_);
    std::swap(clientip_, other->clientip_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(opid_, other->opid_);
    std::swap(channelid_, other->channelid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCreateRole_descriptor_;
  metadata.reflection = stCreateRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCreateRoleResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateRoleResult_ProtoModID_descriptor_;
}
bool stCreateRoleResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateRoleResult_ProtoModID stCreateRoleResult::ModID;
const stCreateRoleResult_ProtoModID stCreateRoleResult::ProtoModID_MIN;
const stCreateRoleResult_ProtoModID stCreateRoleResult::ProtoModID_MAX;
const int stCreateRoleResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCreateRoleResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateRoleResult_ProtoFunID_descriptor_;
}
bool stCreateRoleResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateRoleResult_ProtoFunID stCreateRoleResult::FunID;
const stCreateRoleResult_ProtoFunID stCreateRoleResult::ProtoFunID_MIN;
const stCreateRoleResult_ProtoFunID stCreateRoleResult::ProtoFunID_MAX;
const int stCreateRoleResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCreateRoleResult::kRetCodeFieldNumber;
const int stCreateRoleResult::kAccountFieldNumber;
const int stCreateRoleResult::kCharIDFieldNumber;
const int stCreateRoleResult::kNameFieldNumber;
const int stCreateRoleResult::kLevelFieldNumber;
const int stCreateRoleResult::kJobFieldNumber;
const int stCreateRoleResult::kSexFieldNumber;
const int stCreateRoleResult::kServerIDFieldNumber;
const int stCreateRoleResult::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

stCreateRoleResult::stCreateRoleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCreateRoleResult::InitAsDefaultInstance() {
}

stCreateRoleResult::stCreateRoleResult(const stCreateRoleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCreateRoleResult::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  serverid_ = 0u;
  createtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCreateRoleResult::~stCreateRoleResult() {
  SharedDtor();
}

void stCreateRoleResult::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stCreateRoleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCreateRoleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateRoleResult_descriptor_;
}

const stCreateRoleResult& stCreateRoleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCreateRoleResult* stCreateRoleResult::default_instance_ = NULL;

stCreateRoleResult* stCreateRoleResult::New() const {
  return new stCreateRoleResult;
}

void stCreateRoleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    serverid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    createtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCreateRoleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 retCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_job;
        break;
      }

      // optional uint32 job = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_serverID;
        break;
      }

      // optional uint32 serverID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_createTime;
        break;
      }

      // optional uint32 createTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCreateRoleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 job = 6;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->job(), output);
  }

  // optional uint32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sex(), output);
  }

  // optional uint32 serverID = 8;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->serverid(), output);
  }

  // optional uint32 createTime = 9;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCreateRoleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 job = 6;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->job(), target);
  }

  // optional uint32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sex(), target);
  }

  // optional uint32 serverID = 8;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->serverid(), target);
  }

  // optional uint32 createTime = 9;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCreateRoleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 6;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 serverID = 8;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 createTime = 9;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCreateRoleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCreateRoleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCreateRoleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCreateRoleResult::MergeFrom(const stCreateRoleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCreateRoleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCreateRoleResult::CopyFrom(const stCreateRoleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCreateRoleResult::IsInitialized() const {

  return true;
}

void stCreateRoleResult::Swap(stCreateRoleResult* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(account_, other->account_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(serverid_, other->serverid_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCreateRoleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCreateRoleResult_descriptor_;
  metadata.reflection = stCreateRoleResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSnapData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSnapData_ProtoModID_descriptor_;
}
bool stReqSnapData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSnapData_ProtoModID stReqSnapData::ModID;
const stReqSnapData_ProtoModID stReqSnapData::ProtoModID_MIN;
const stReqSnapData_ProtoModID stReqSnapData::ProtoModID_MAX;
const int stReqSnapData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSnapData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSnapData_ProtoFunID_descriptor_;
}
bool stReqSnapData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSnapData_ProtoFunID stReqSnapData::FunID;
const stReqSnapData_ProtoFunID stReqSnapData::ProtoFunID_MIN;
const stReqSnapData_ProtoFunID stReqSnapData::ProtoFunID_MAX;
const int stReqSnapData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSnapData::kAccountFieldNumber;
const int stReqSnapData::kGateIDFieldNumber;
const int stReqSnapData::kIpFieldNumber;
const int stReqSnapData::kDeviceIDFieldNumber;
const int stReqSnapData::kOpIDFieldNumber;
const int stReqSnapData::kServerIDFieldNumber;
#endif  // !_MSC_VER

stReqSnapData::stReqSnapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSnapData::InitAsDefaultInstance() {
}

stReqSnapData::stReqSnapData(const stReqSnapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSnapData::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gateid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSnapData::~stReqSnapData() {
  SharedDtor();
}

void stReqSnapData::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void stReqSnapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSnapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSnapData_descriptor_;
}

const stReqSnapData& stReqSnapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqSnapData* stReqSnapData::default_instance_ = NULL;

stReqSnapData* stReqSnapData::New() const {
  return new stReqSnapData;
}

void stReqSnapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    gateid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    opid_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSnapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateID;
        break;
      }

      // optional uint32 gateID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_deviceID;
        break;
      }

      // optional string deviceID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_serverID;
        break;
      }

      // optional uint32 serverID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSnapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 gateID = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional string deviceID = 4;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->deviceid(), output);
  }

  // optional uint32 opID = 5;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->opid(), output);
  }

  // optional uint32 serverID = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSnapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 gateID = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional string deviceID = 4;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->deviceid(), target);
  }

  // optional uint32 opID = 5;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->opid(), target);
  }

  // optional uint32 serverID = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSnapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 gateID = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string deviceID = 4;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional uint32 opID = 5;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional uint32 serverID = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSnapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSnapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSnapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSnapData::MergeFrom(const stReqSnapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSnapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSnapData::CopyFrom(const stReqSnapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSnapData::IsInitialized() const {

  return true;
}

void stReqSnapData::Swap(stReqSnapData* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(gateid_, other->gateid_);
    std::swap(ip_, other->ip_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(opid_, other->opid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSnapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSnapData_descriptor_;
  metadata.reflection = stReqSnapData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSnapData::kCharIDFieldNumber;
const int stSnapData::kNameFieldNumber;
const int stSnapData::kLevelFieldNumber;
const int stSnapData::kAccountFieldNumber;
const int stSnapData::kJobFieldNumber;
const int stSnapData::kSexFieldNumber;
const int stSnapData::kServerIDFieldNumber;
#endif  // !_MSC_VER

stSnapData::stSnapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSnapData::InitAsDefaultInstance() {
}

stSnapData::stSnapData(const stSnapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSnapData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  serverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSnapData::~stSnapData() {
  SharedDtor();
}

void stSnapData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stSnapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSnapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSnapData_descriptor_;
}

const stSnapData& stSnapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSnapData* stSnapData::default_instance_ = NULL;

stSnapData* stSnapData::New() const {
  return new stSnapData;
}

void stSnapData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    serverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSnapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serverID;
        break;
      }

      // optional uint32 serverID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSnapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional uint32 serverID = 7;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSnapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional uint32 serverID = 7;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSnapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 serverID = 7;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSnapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSnapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSnapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSnapData::MergeFrom(const stSnapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSnapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSnapData::CopyFrom(const stSnapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSnapData::IsInitialized() const {

  return true;
}

void stSnapData::Swap(stSnapData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(account_, other->account_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSnapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSnapData_descriptor_;
  metadata.reflection = stSnapData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetSnapData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSnapData_ProtoModID_descriptor_;
}
bool stRetSnapData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetSnapData_ProtoModID stRetSnapData::ModID;
const stRetSnapData_ProtoModID stRetSnapData::ProtoModID_MIN;
const stRetSnapData_ProtoModID stRetSnapData::ProtoModID_MAX;
const int stRetSnapData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetSnapData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSnapData_ProtoFunID_descriptor_;
}
bool stRetSnapData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetSnapData_ProtoFunID stRetSnapData::FunID;
const stRetSnapData_ProtoFunID stRetSnapData::ProtoFunID_MIN;
const stRetSnapData_ProtoFunID stRetSnapData::ProtoFunID_MAX;
const int stRetSnapData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetSnapData::kDataFieldNumber;
const int stRetSnapData::kAccountFieldNumber;
#endif  // !_MSC_VER

stRetSnapData::stRetSnapData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetSnapData::InitAsDefaultInstance() {
}

stRetSnapData::stRetSnapData(const stRetSnapData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetSnapData::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetSnapData::~stRetSnapData() {
  SharedDtor();
}

void stRetSnapData::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stRetSnapData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetSnapData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSnapData_descriptor_;
}

const stRetSnapData& stRetSnapData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetSnapData* stRetSnapData::default_instance_ = NULL;

stRetSnapData* stRetSnapData::New() const {
  return new stRetSnapData;
}

void stRetSnapData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetSnapData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stSnapData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetSnapData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stSnapData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetSnapData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stSnapData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetSnapData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  // repeated .Global.stSnapData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetSnapData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetSnapData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetSnapData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetSnapData::MergeFrom(const stRetSnapData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetSnapData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetSnapData::CopyFrom(const stRetSnapData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetSnapData::IsInitialized() const {

  return true;
}

void stRetSnapData::Swap(stRetSnapData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetSnapData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetSnapData_descriptor_;
  metadata.reflection = stRetSnapData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLoadData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLoadData_ProtoModID_descriptor_;
}
bool stReqLoadData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLoadData_ProtoModID stReqLoadData::ModID;
const stReqLoadData_ProtoModID stReqLoadData::ProtoModID_MIN;
const stReqLoadData_ProtoModID stReqLoadData::ProtoModID_MAX;
const int stReqLoadData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLoadData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLoadData_ProtoFunID_descriptor_;
}
bool stReqLoadData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLoadData_ProtoFunID stReqLoadData::FunID;
const stReqLoadData_ProtoFunID stReqLoadData::ProtoFunID_MIN;
const stReqLoadData_ProtoFunID stReqLoadData::ProtoFunID_MAX;
const int stReqLoadData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLoadData::kGameSvrIDFieldNumber;
const int stReqLoadData::kGateSvrIDFieldNumber;
const int stReqLoadData::kAccountFieldNumber;
const int stReqLoadData::kCharIDFieldNumber;
const int stReqLoadData::kIpFieldNumber;
const int stReqLoadData::kDeviceIDFieldNumber;
const int stReqLoadData::kChannelIDFieldNumber;
const int stReqLoadData::kNetIPFieldNumber;
#endif  // !_MSC_VER

stReqLoadData::stReqLoadData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLoadData::InitAsDefaultInstance() {
}

stReqLoadData::stReqLoadData(const stReqLoadData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLoadData::SharedCtor() {
  _cached_size_ = 0;
  gamesvrid_ = 0u;
  gatesvrid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLoadData::~stReqLoadData() {
  SharedDtor();
}

void stReqLoadData::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (netip_ != &::google::protobuf::internal::kEmptyString) {
    delete netip_;
  }
  if (this != default_instance_) {
  }
}

void stReqLoadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLoadData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLoadData_descriptor_;
}

const stReqLoadData& stReqLoadData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqLoadData* stReqLoadData::default_instance_ = NULL;

stReqLoadData* stReqLoadData::New() const {
  return new stReqLoadData;
}

void stReqLoadData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gamesvrid_ = 0u;
    gatesvrid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    charid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_netip()) {
      if (netip_ != &::google::protobuf::internal::kEmptyString) {
        netip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLoadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 gameSvrID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamesvrid_)));
          set_has_gamesvrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateSvrID;
        break;
      }

      // optional uint32 gateSvrID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateSvrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gatesvrid_)));
          set_has_gatesvrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_deviceID;
        break;
      }

      // optional string deviceID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_channelID;
        break;
      }

      // optional string channelID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_netIP;
        break;
      }

      // optional string netIP = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->netip().data(), this->netip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLoadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 gameSvrID = 1;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->gamesvrid(), output);
  }

  // optional uint32 gateSvrID = 2;
  if (has_gatesvrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gatesvrid(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional uint32 charID = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charid(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }

  // optional string deviceID = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->deviceid(), output);
  }

  // optional string channelID = 7;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->channelid(), output);
  }

  // optional string netIP = 8;
  if (has_netip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netip().data(), this->netip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->netip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLoadData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 gameSvrID = 1;
  if (has_gamesvrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->gamesvrid(), target);
  }

  // optional uint32 gateSvrID = 2;
  if (has_gatesvrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gatesvrid(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional uint32 charID = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charid(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional string deviceID = 6;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->deviceid(), target);
  }

  // optional string channelID = 7;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->channelid(), target);
  }

  // optional string netIP = 8;
  if (has_netip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netip().data(), this->netip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->netip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLoadData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 gameSvrID = 1;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamesvrid());
    }

    // optional uint32 gateSvrID = 2;
    if (has_gatesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gatesvrid());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 charID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string deviceID = 6;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional string channelID = 7;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string netIP = 8;
    if (has_netip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLoadData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLoadData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLoadData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLoadData::MergeFrom(const stReqLoadData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
    if (from.has_gatesvrid()) {
      set_gatesvrid(from.gatesvrid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_netip()) {
      set_netip(from.netip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLoadData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLoadData::CopyFrom(const stReqLoadData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLoadData::IsInitialized() const {

  return true;
}

void stReqLoadData::Swap(stReqLoadData* other) {
  if (other != this) {
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(gatesvrid_, other->gatesvrid_);
    std::swap(account_, other->account_);
    std::swap(charid_, other->charid_);
    std::swap(ip_, other->ip_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(channelid_, other->channelid_);
    std::swap(netip_, other->netip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLoadData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLoadData_descriptor_;
  metadata.reflection = stReqLoadData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGateForwardProto_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGateForwardProto_ProtoModID_descriptor_;
}
bool stGateForwardProto_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGateForwardProto_ProtoModID stGateForwardProto::ModID;
const stGateForwardProto_ProtoModID stGateForwardProto::ProtoModID_MIN;
const stGateForwardProto_ProtoModID stGateForwardProto::ProtoModID_MAX;
const int stGateForwardProto::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGateForwardProto_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGateForwardProto_ProtoFunID_descriptor_;
}
bool stGateForwardProto_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGateForwardProto_ProtoFunID stGateForwardProto::FunID;
const stGateForwardProto_ProtoFunID stGateForwardProto::ProtoFunID_MIN;
const stGateForwardProto_ProtoFunID stGateForwardProto::ProtoFunID_MAX;
const int stGateForwardProto::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGateForwardProto::kCharIDFieldNumber;
const int stGateForwardProto::kModIDFieldNumber;
const int stGateForwardProto::kFunIDFieldNumber;
const int stGateForwardProto::kCmdLenFieldNumber;
const int stGateForwardProto::kDataFieldNumber;
#endif  // !_MSC_VER

stGateForwardProto::stGateForwardProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGateForwardProto::InitAsDefaultInstance() {
}

stGateForwardProto::stGateForwardProto(const stGateForwardProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGateForwardProto::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGateForwardProto::~stGateForwardProto() {
  SharedDtor();
}

void stGateForwardProto::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stGateForwardProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGateForwardProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGateForwardProto_descriptor_;
}

const stGateForwardProto& stGateForwardProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGateForwardProto* stGateForwardProto::default_instance_ = NULL;

stGateForwardProto* stGateForwardProto::New() const {
  return new stGateForwardProto;
}

void stGateForwardProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGateForwardProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGateForwardProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->funid(), output);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdlen(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGateForwardProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->funid(), target);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdlen(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGateForwardProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 3;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 4;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGateForwardProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGateForwardProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGateForwardProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGateForwardProto::MergeFrom(const stGateForwardProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGateForwardProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGateForwardProto::CopyFrom(const stGateForwardProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGateForwardProto::IsInitialized() const {

  return true;
}

void stGateForwardProto::Swap(stGateForwardProto* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGateForwardProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGateForwardProto_descriptor_;
  metadata.reflection = stGateForwardProto_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stForwardProto2Me_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardProto2Me_ProtoModID_descriptor_;
}
bool stForwardProto2Me_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForwardProto2Me_ProtoModID stForwardProto2Me::ModID;
const stForwardProto2Me_ProtoModID stForwardProto2Me::ProtoModID_MIN;
const stForwardProto2Me_ProtoModID stForwardProto2Me::ProtoModID_MAX;
const int stForwardProto2Me::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stForwardProto2Me_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardProto2Me_ProtoFunID_descriptor_;
}
bool stForwardProto2Me_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForwardProto2Me_ProtoFunID stForwardProto2Me::FunID;
const stForwardProto2Me_ProtoFunID stForwardProto2Me::ProtoFunID_MIN;
const stForwardProto2Me_ProtoFunID stForwardProto2Me::ProtoFunID_MAX;
const int stForwardProto2Me::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stForwardProto2Me::kCharIDFieldNumber;
const int stForwardProto2Me::kModIDFieldNumber;
const int stForwardProto2Me::kFunIDFieldNumber;
const int stForwardProto2Me::kCmdLenFieldNumber;
const int stForwardProto2Me::kDataFieldNumber;
#endif  // !_MSC_VER

stForwardProto2Me::stForwardProto2Me()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stForwardProto2Me::InitAsDefaultInstance() {
}

stForwardProto2Me::stForwardProto2Me(const stForwardProto2Me& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stForwardProto2Me::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForwardProto2Me::~stForwardProto2Me() {
  SharedDtor();
}

void stForwardProto2Me::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stForwardProto2Me::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForwardProto2Me::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardProto2Me_descriptor_;
}

const stForwardProto2Me& stForwardProto2Me::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stForwardProto2Me* stForwardProto2Me::default_instance_ = NULL;

stForwardProto2Me* stForwardProto2Me::New() const {
  return new stForwardProto2Me;
}

void stForwardProto2Me::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForwardProto2Me::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stForwardProto2Me::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->funid(), output);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdlen(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stForwardProto2Me::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->funid(), target);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdlen(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stForwardProto2Me::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 3;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 4;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForwardProto2Me::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForwardProto2Me* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForwardProto2Me*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForwardProto2Me::MergeFrom(const stForwardProto2Me& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForwardProto2Me::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForwardProto2Me::CopyFrom(const stForwardProto2Me& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForwardProto2Me::IsInitialized() const {

  return true;
}

void stForwardProto2Me::Swap(stForwardProto2Me* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForwardProto2Me::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForwardProto2Me_descriptor_;
  metadata.reflection = stForwardProto2Me_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBroadcastProto2AllUser_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastProto2AllUser_ProtoModID_descriptor_;
}
bool stBroadcastProto2AllUser_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadcastProto2AllUser_ProtoModID stBroadcastProto2AllUser::ModID;
const stBroadcastProto2AllUser_ProtoModID stBroadcastProto2AllUser::ProtoModID_MIN;
const stBroadcastProto2AllUser_ProtoModID stBroadcastProto2AllUser::ProtoModID_MAX;
const int stBroadcastProto2AllUser::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBroadcastProto2AllUser_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastProto2AllUser_ProtoFunID_descriptor_;
}
bool stBroadcastProto2AllUser_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadcastProto2AllUser_ProtoFunID stBroadcastProto2AllUser::FunID;
const stBroadcastProto2AllUser_ProtoFunID stBroadcastProto2AllUser::ProtoFunID_MIN;
const stBroadcastProto2AllUser_ProtoFunID stBroadcastProto2AllUser::ProtoFunID_MAX;
const int stBroadcastProto2AllUser::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBroadcastProto2AllUser::kModIDFieldNumber;
const int stBroadcastProto2AllUser::kFunIDFieldNumber;
const int stBroadcastProto2AllUser::kCmdLenFieldNumber;
const int stBroadcastProto2AllUser::kDataFieldNumber;
#endif  // !_MSC_VER

stBroadcastProto2AllUser::stBroadcastProto2AllUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBroadcastProto2AllUser::InitAsDefaultInstance() {
}

stBroadcastProto2AllUser::stBroadcastProto2AllUser(const stBroadcastProto2AllUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBroadcastProto2AllUser::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadcastProto2AllUser::~stBroadcastProto2AllUser() {
  SharedDtor();
}

void stBroadcastProto2AllUser::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stBroadcastProto2AllUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadcastProto2AllUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastProto2AllUser_descriptor_;
}

const stBroadcastProto2AllUser& stBroadcastProto2AllUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stBroadcastProto2AllUser* stBroadcastProto2AllUser::default_instance_ = NULL;

stBroadcastProto2AllUser* stBroadcastProto2AllUser::New() const {
  return new stBroadcastProto2AllUser;
}

void stBroadcastProto2AllUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadcastProto2AllUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 modID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBroadcastProto2AllUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 modID = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modid(), output);
  }

  // optional uint32 funID = 2;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->funid(), output);
  }

  // optional uint32 cmdLen = 3;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cmdlen(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBroadcastProto2AllUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 modID = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modid(), target);
  }

  // optional uint32 funID = 2;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->funid(), target);
  }

  // optional uint32 cmdLen = 3;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cmdlen(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBroadcastProto2AllUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 modID = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 2;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 3;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadcastProto2AllUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadcastProto2AllUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadcastProto2AllUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadcastProto2AllUser::MergeFrom(const stBroadcastProto2AllUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadcastProto2AllUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadcastProto2AllUser::CopyFrom(const stBroadcastProto2AllUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadcastProto2AllUser::IsInitialized() const {

  return true;
}

void stBroadcastProto2AllUser::Swap(stBroadcastProto2AllUser* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadcastProto2AllUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadcastProto2AllUser_descriptor_;
  metadata.reflection = stBroadcastProto2AllUser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLoginGlobalFail_FailReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginGlobalFail_FailReason_descriptor_;
}
bool stLoginGlobalFail_FailReason_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginGlobalFail_FailReason stLoginGlobalFail::HAS_LOGIN_IN;
const stLoginGlobalFail_FailReason stLoginGlobalFail::CREATE_FAIL;
const stLoginGlobalFail_FailReason stLoginGlobalFail::LOAD_DATA_FAIL;
const stLoginGlobalFail_FailReason stLoginGlobalFail::FORBID_LOGIN;
const stLoginGlobalFail_FailReason stLoginGlobalFail::OTHER;
const stLoginGlobalFail_FailReason stLoginGlobalFail::FailReason_MIN;
const stLoginGlobalFail_FailReason stLoginGlobalFail::FailReason_MAX;
const int stLoginGlobalFail::FailReason_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLoginGlobalFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginGlobalFail_ProtoModID_descriptor_;
}
bool stLoginGlobalFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginGlobalFail_ProtoModID stLoginGlobalFail::ModID;
const stLoginGlobalFail_ProtoModID stLoginGlobalFail::ProtoModID_MIN;
const stLoginGlobalFail_ProtoModID stLoginGlobalFail::ProtoModID_MAX;
const int stLoginGlobalFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLoginGlobalFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginGlobalFail_ProtoFunID_descriptor_;
}
bool stLoginGlobalFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginGlobalFail_ProtoFunID stLoginGlobalFail::FunID;
const stLoginGlobalFail_ProtoFunID stLoginGlobalFail::ProtoFunID_MIN;
const stLoginGlobalFail_ProtoFunID stLoginGlobalFail::ProtoFunID_MAX;
const int stLoginGlobalFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLoginGlobalFail::kAccountFieldNumber;
const int stLoginGlobalFail::kErroCodeFieldNumber;
#endif  // !_MSC_VER

stLoginGlobalFail::stLoginGlobalFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLoginGlobalFail::InitAsDefaultInstance() {
}

stLoginGlobalFail::stLoginGlobalFail(const stLoginGlobalFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLoginGlobalFail::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  errocode_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLoginGlobalFail::~stLoginGlobalFail() {
  SharedDtor();
}

void stLoginGlobalFail::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stLoginGlobalFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLoginGlobalFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginGlobalFail_descriptor_;
}

const stLoginGlobalFail& stLoginGlobalFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stLoginGlobalFail* stLoginGlobalFail::default_instance_ = NULL;

stLoginGlobalFail* stLoginGlobalFail::New() const {
  return new stLoginGlobalFail;
}

void stLoginGlobalFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    errocode_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLoginGlobalFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_erroCode;
        break;
      }

      // optional .Global.stLoginGlobalFail.FailReason erroCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_erroCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::stLoginGlobalFail_FailReason_IsValid(value)) {
            set_errocode(static_cast< ::Global::stLoginGlobalFail_FailReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLoginGlobalFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional .Global.stLoginGlobalFail.FailReason erroCode = 2;
  if (has_errocode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->errocode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLoginGlobalFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional .Global.stLoginGlobalFail.FailReason erroCode = 2;
  if (has_errocode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->errocode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLoginGlobalFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional .Global.stLoginGlobalFail.FailReason erroCode = 2;
    if (has_errocode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->errocode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLoginGlobalFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLoginGlobalFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLoginGlobalFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLoginGlobalFail::MergeFrom(const stLoginGlobalFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_errocode()) {
      set_errocode(from.errocode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLoginGlobalFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLoginGlobalFail::CopyFrom(const stLoginGlobalFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLoginGlobalFail::IsInitialized() const {

  return true;
}

void stLoginGlobalFail::Swap(stLoginGlobalFail* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(errocode_, other->errocode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLoginGlobalFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLoginGlobalFail_descriptor_;
  metadata.reflection = stLoginGlobalFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyLoginOut_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLoginOut_ProtoModID_descriptor_;
}
bool stNotifyLoginOut_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyLoginOut_ProtoModID stNotifyLoginOut::ModID;
const stNotifyLoginOut_ProtoModID stNotifyLoginOut::ProtoModID_MIN;
const stNotifyLoginOut_ProtoModID stNotifyLoginOut::ProtoModID_MAX;
const int stNotifyLoginOut::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyLoginOut_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLoginOut_ProtoFunID_descriptor_;
}
bool stNotifyLoginOut_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyLoginOut_ProtoFunID stNotifyLoginOut::FunID;
const stNotifyLoginOut_ProtoFunID stNotifyLoginOut::ProtoFunID_MIN;
const stNotifyLoginOut_ProtoFunID stNotifyLoginOut::ProtoFunID_MAX;
const int stNotifyLoginOut::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyLoginOut::kCharIDFieldNumber;
const int stNotifyLoginOut::kAccountFieldNumber;
#endif  // !_MSC_VER

stNotifyLoginOut::stNotifyLoginOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyLoginOut::InitAsDefaultInstance() {
}

stNotifyLoginOut::stNotifyLoginOut(const stNotifyLoginOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyLoginOut::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyLoginOut::~stNotifyLoginOut() {
  SharedDtor();
}

void stNotifyLoginOut::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stNotifyLoginOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyLoginOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLoginOut_descriptor_;
}

const stNotifyLoginOut& stNotifyLoginOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyLoginOut* stNotifyLoginOut::default_instance_ = NULL;

stNotifyLoginOut* stNotifyLoginOut::New() const {
  return new stNotifyLoginOut;
}

void stNotifyLoginOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyLoginOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyLoginOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyLoginOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyLoginOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyLoginOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyLoginOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyLoginOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyLoginOut::MergeFrom(const stNotifyLoginOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyLoginOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyLoginOut::CopyFrom(const stNotifyLoginOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyLoginOut::IsInitialized() const {

  return true;
}

void stNotifyLoginOut::Swap(stNotifyLoginOut* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyLoginOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyLoginOut_descriptor_;
  metadata.reflection = stNotifyLoginOut_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGameSvrStartUp_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGameSvrStartUp_ProtoModID_descriptor_;
}
bool stGameSvrStartUp_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGameSvrStartUp_ProtoModID stGameSvrStartUp::ModID;
const stGameSvrStartUp_ProtoModID stGameSvrStartUp::ProtoModID_MIN;
const stGameSvrStartUp_ProtoModID stGameSvrStartUp::ProtoModID_MAX;
const int stGameSvrStartUp::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGameSvrStartUp_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGameSvrStartUp_ProtoFunID_descriptor_;
}
bool stGameSvrStartUp_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGameSvrStartUp_ProtoFunID stGameSvrStartUp::FunID;
const stGameSvrStartUp_ProtoFunID stGameSvrStartUp::ProtoFunID_MIN;
const stGameSvrStartUp_ProtoFunID stGameSvrStartUp::ProtoFunID_MAX;
const int stGameSvrStartUp::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGameSvrStartUp::kSvrIDFieldNumber;
#endif  // !_MSC_VER

stGameSvrStartUp::stGameSvrStartUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGameSvrStartUp::InitAsDefaultInstance() {
}

stGameSvrStartUp::stGameSvrStartUp(const stGameSvrStartUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGameSvrStartUp::SharedCtor() {
  _cached_size_ = 0;
  svrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGameSvrStartUp::~stGameSvrStartUp() {
  SharedDtor();
}

void stGameSvrStartUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGameSvrStartUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGameSvrStartUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGameSvrStartUp_descriptor_;
}

const stGameSvrStartUp& stGameSvrStartUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGameSvrStartUp* stGameSvrStartUp::default_instance_ = NULL;

stGameSvrStartUp* stGameSvrStartUp::New() const {
  return new stGameSvrStartUp;
}

void stGameSvrStartUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGameSvrStartUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGameSvrStartUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrID = 1;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGameSvrStartUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrID = 1;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGameSvrStartUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrID = 1;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGameSvrStartUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGameSvrStartUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGameSvrStartUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGameSvrStartUp::MergeFrom(const stGameSvrStartUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGameSvrStartUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGameSvrStartUp::CopyFrom(const stGameSvrStartUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGameSvrStartUp::IsInitialized() const {

  return true;
}

void stGameSvrStartUp::Swap(stGameSvrStartUp* other) {
  if (other != this) {
    std::swap(svrid_, other->svrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGameSvrStartUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGameSvrStartUp_descriptor_;
  metadata.reflection = stGameSvrStartUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stKillUserOut_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillUserOut_ProtoModID_descriptor_;
}
bool stKillUserOut_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillUserOut_ProtoModID stKillUserOut::ModID;
const stKillUserOut_ProtoModID stKillUserOut::ProtoModID_MIN;
const stKillUserOut_ProtoModID stKillUserOut::ProtoModID_MAX;
const int stKillUserOut::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stKillUserOut_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillUserOut_ProtoFunID_descriptor_;
}
bool stKillUserOut_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillUserOut_ProtoFunID stKillUserOut::FunID;
const stKillUserOut_ProtoFunID stKillUserOut::ProtoFunID_MIN;
const stKillUserOut_ProtoFunID stKillUserOut::ProtoFunID_MAX;
const int stKillUserOut::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stKillUserOut::kCharIDFieldNumber;
#endif  // !_MSC_VER

stKillUserOut::stKillUserOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stKillUserOut::InitAsDefaultInstance() {
}

stKillUserOut::stKillUserOut(const stKillUserOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stKillUserOut::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stKillUserOut::~stKillUserOut() {
  SharedDtor();
}

void stKillUserOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stKillUserOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stKillUserOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillUserOut_descriptor_;
}

const stKillUserOut& stKillUserOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stKillUserOut* stKillUserOut::default_instance_ = NULL;

stKillUserOut* stKillUserOut::New() const {
  return new stKillUserOut;
}

void stKillUserOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stKillUserOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stKillUserOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stKillUserOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stKillUserOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stKillUserOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stKillUserOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stKillUserOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stKillUserOut::MergeFrom(const stKillUserOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stKillUserOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stKillUserOut::CopyFrom(const stKillUserOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stKillUserOut::IsInitialized() const {

  return true;
}

void stKillUserOut::Swap(stKillUserOut* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stKillUserOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stKillUserOut_descriptor_;
  metadata.reflection = stKillUserOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stServerCfgPair::kKeyFieldNumber;
const int stServerCfgPair::kValueFieldNumber;
#endif  // !_MSC_VER

stServerCfgPair::stServerCfgPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stServerCfgPair::InitAsDefaultInstance() {
}

stServerCfgPair::stServerCfgPair(const stServerCfgPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stServerCfgPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stServerCfgPair::~stServerCfgPair() {
  SharedDtor();
}

void stServerCfgPair::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void stServerCfgPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stServerCfgPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stServerCfgPair_descriptor_;
}

const stServerCfgPair& stServerCfgPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stServerCfgPair* stServerCfgPair::default_instance_ = NULL;

stServerCfgPair* stServerCfgPair::New() const {
  return new stServerCfgPair;
}

void stServerCfgPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stServerCfgPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stServerCfgPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stServerCfgPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stServerCfgPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stServerCfgPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stServerCfgPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stServerCfgPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stServerCfgPair::MergeFrom(const stServerCfgPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stServerCfgPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stServerCfgPair::CopyFrom(const stServerCfgPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stServerCfgPair::IsInitialized() const {

  return true;
}

void stServerCfgPair::Swap(stServerCfgPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stServerCfgPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stServerCfgPair_descriptor_;
  metadata.reflection = stServerCfgPair_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyGateSvrCfg_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGateSvrCfg_ProtoModID_descriptor_;
}
bool stNotifyGateSvrCfg_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGateSvrCfg_ProtoModID stNotifyGateSvrCfg::ModID;
const stNotifyGateSvrCfg_ProtoModID stNotifyGateSvrCfg::ProtoModID_MIN;
const stNotifyGateSvrCfg_ProtoModID stNotifyGateSvrCfg::ProtoModID_MAX;
const int stNotifyGateSvrCfg::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyGateSvrCfg_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGateSvrCfg_ProtoFunID_descriptor_;
}
bool stNotifyGateSvrCfg_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGateSvrCfg_ProtoFunID stNotifyGateSvrCfg::FunID;
const stNotifyGateSvrCfg_ProtoFunID stNotifyGateSvrCfg::ProtoFunID_MIN;
const stNotifyGateSvrCfg_ProtoFunID stNotifyGateSvrCfg::ProtoFunID_MAX;
const int stNotifyGateSvrCfg::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyGateSvrCfg::kCfgPairFieldNumber;
#endif  // !_MSC_VER

stNotifyGateSvrCfg::stNotifyGateSvrCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyGateSvrCfg::InitAsDefaultInstance() {
}

stNotifyGateSvrCfg::stNotifyGateSvrCfg(const stNotifyGateSvrCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyGateSvrCfg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyGateSvrCfg::~stNotifyGateSvrCfg() {
  SharedDtor();
}

void stNotifyGateSvrCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyGateSvrCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyGateSvrCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGateSvrCfg_descriptor_;
}

const stNotifyGateSvrCfg& stNotifyGateSvrCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyGateSvrCfg* stNotifyGateSvrCfg::default_instance_ = NULL;

stNotifyGateSvrCfg* stNotifyGateSvrCfg::New() const {
  return new stNotifyGateSvrCfg;
}

void stNotifyGateSvrCfg::Clear() {
  cfgpair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyGateSvrCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stServerCfgPair cfgPair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfgPair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cfgpair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cfgPair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyGateSvrCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stServerCfgPair cfgPair = 1;
  for (int i = 0; i < this->cfgpair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cfgpair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyGateSvrCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stServerCfgPair cfgPair = 1;
  for (int i = 0; i < this->cfgpair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cfgpair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyGateSvrCfg::ByteSize() const {
  int total_size = 0;

  // repeated .Global.stServerCfgPair cfgPair = 1;
  total_size += 1 * this->cfgpair_size();
  for (int i = 0; i < this->cfgpair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cfgpair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyGateSvrCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyGateSvrCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyGateSvrCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyGateSvrCfg::MergeFrom(const stNotifyGateSvrCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfgpair_.MergeFrom(from.cfgpair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyGateSvrCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyGateSvrCfg::CopyFrom(const stNotifyGateSvrCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyGateSvrCfg::IsInitialized() const {

  return true;
}

void stNotifyGateSvrCfg::Swap(stNotifyGateSvrCfg* other) {
  if (other != this) {
    cfgpair_.Swap(&other->cfgpair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyGateSvrCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyGateSvrCfg_descriptor_;
  metadata.reflection = stNotifyGateSvrCfg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReloginGlobal_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReloginGlobal_ProtoModID_descriptor_;
}
bool stReloginGlobal_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReloginGlobal_ProtoModID stReloginGlobal::ModID;
const stReloginGlobal_ProtoModID stReloginGlobal::ProtoModID_MIN;
const stReloginGlobal_ProtoModID stReloginGlobal::ProtoModID_MAX;
const int stReloginGlobal::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReloginGlobal_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReloginGlobal_ProtoFunID_descriptor_;
}
bool stReloginGlobal_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReloginGlobal_ProtoFunID stReloginGlobal::FunID;
const stReloginGlobal_ProtoFunID stReloginGlobal::ProtoFunID_MIN;
const stReloginGlobal_ProtoFunID stReloginGlobal::ProtoFunID_MAX;
const int stReloginGlobal::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReloginGlobal::kIpFieldNumber;
const int stReloginGlobal::kDeviceFieldNumber;
const int stReloginGlobal::kCharIDFieldNumber;
const int stReloginGlobal::kAccountFieldNumber;
#endif  // !_MSC_VER

stReloginGlobal::stReloginGlobal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReloginGlobal::InitAsDefaultInstance() {
}

stReloginGlobal::stReloginGlobal(const stReloginGlobal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReloginGlobal::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReloginGlobal::~stReloginGlobal() {
  SharedDtor();
}

void stReloginGlobal::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stReloginGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReloginGlobal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReloginGlobal_descriptor_;
}

const stReloginGlobal& stReloginGlobal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReloginGlobal* stReloginGlobal::default_instance_ = NULL;

stReloginGlobal* stReloginGlobal::New() const {
  return new stReloginGlobal;
}

void stReloginGlobal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReloginGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }

      // optional string device = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReloginGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // optional string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReloginGlobal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReloginGlobal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string device = 2;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReloginGlobal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReloginGlobal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReloginGlobal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReloginGlobal::MergeFrom(const stReloginGlobal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReloginGlobal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReloginGlobal::CopyFrom(const stReloginGlobal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReloginGlobal::IsInitialized() const {

  return true;
}

void stReloginGlobal::Swap(stReloginGlobal* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(device_, other->device_);
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReloginGlobal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReloginGlobal_descriptor_;
  metadata.reflection = stReloginGlobal_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPlayerAutoConnect_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerAutoConnect_ProtoModID_descriptor_;
}
bool stPlayerAutoConnect_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPlayerAutoConnect_ProtoModID stPlayerAutoConnect::ModID;
const stPlayerAutoConnect_ProtoModID stPlayerAutoConnect::ProtoModID_MIN;
const stPlayerAutoConnect_ProtoModID stPlayerAutoConnect::ProtoModID_MAX;
const int stPlayerAutoConnect::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPlayerAutoConnect_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerAutoConnect_ProtoFunID_descriptor_;
}
bool stPlayerAutoConnect_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPlayerAutoConnect_ProtoFunID stPlayerAutoConnect::FunID;
const stPlayerAutoConnect_ProtoFunID stPlayerAutoConnect::ProtoFunID_MIN;
const stPlayerAutoConnect_ProtoFunID stPlayerAutoConnect::ProtoFunID_MAX;
const int stPlayerAutoConnect::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPlayerAutoConnect::kIpFieldNumber;
const int stPlayerAutoConnect::kDeviceFieldNumber;
const int stPlayerAutoConnect::kCharIDFieldNumber;
const int stPlayerAutoConnect::kAccountFieldNumber;
#endif  // !_MSC_VER

stPlayerAutoConnect::stPlayerAutoConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPlayerAutoConnect::InitAsDefaultInstance() {
}

stPlayerAutoConnect::stPlayerAutoConnect(const stPlayerAutoConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPlayerAutoConnect::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPlayerAutoConnect::~stPlayerAutoConnect() {
  SharedDtor();
}

void stPlayerAutoConnect::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stPlayerAutoConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPlayerAutoConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPlayerAutoConnect_descriptor_;
}

const stPlayerAutoConnect& stPlayerAutoConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stPlayerAutoConnect* stPlayerAutoConnect::default_instance_ = NULL;

stPlayerAutoConnect* stPlayerAutoConnect::New() const {
  return new stPlayerAutoConnect;
}

void stPlayerAutoConnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPlayerAutoConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_device;
        break;
      }

      // optional string device = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPlayerAutoConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // optional string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->device(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPlayerAutoConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional string device = 2;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->device(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPlayerAutoConnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string device = 2;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPlayerAutoConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPlayerAutoConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPlayerAutoConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPlayerAutoConnect::MergeFrom(const stPlayerAutoConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPlayerAutoConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPlayerAutoConnect::CopyFrom(const stPlayerAutoConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPlayerAutoConnect::IsInitialized() const {

  return true;
}

void stPlayerAutoConnect::Swap(stPlayerAutoConnect* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(device_, other->device_);
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPlayerAutoConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPlayerAutoConnect_descriptor_;
  metadata.reflection = stPlayerAutoConnect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stClientLostConnect_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClientLostConnect_ProtoModID_descriptor_;
}
bool stClientLostConnect_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClientLostConnect_ProtoModID stClientLostConnect::ModID;
const stClientLostConnect_ProtoModID stClientLostConnect::ProtoModID_MIN;
const stClientLostConnect_ProtoModID stClientLostConnect::ProtoModID_MAX;
const int stClientLostConnect::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stClientLostConnect_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClientLostConnect_ProtoFunID_descriptor_;
}
bool stClientLostConnect_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClientLostConnect_ProtoFunID stClientLostConnect::FunID;
const stClientLostConnect_ProtoFunID stClientLostConnect::ProtoFunID_MIN;
const stClientLostConnect_ProtoFunID stClientLostConnect::ProtoFunID_MAX;
const int stClientLostConnect::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stClientLostConnect::kAccountFieldNumber;
#endif  // !_MSC_VER

stClientLostConnect::stClientLostConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stClientLostConnect::InitAsDefaultInstance() {
}

stClientLostConnect::stClientLostConnect(const stClientLostConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stClientLostConnect::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stClientLostConnect::~stClientLostConnect() {
  SharedDtor();
}

void stClientLostConnect::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stClientLostConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stClientLostConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClientLostConnect_descriptor_;
}

const stClientLostConnect& stClientLostConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stClientLostConnect* stClientLostConnect::default_instance_ = NULL;

stClientLostConnect* stClientLostConnect::New() const {
  return new stClientLostConnect;
}

void stClientLostConnect::Clear() {
  account_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stClientLostConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account(this->account_size() - 1).data(),
            this->account(this->account_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_account;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stClientLostConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string account = 1;
  for (int i = 0; i < this->account_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->account(i).data(), this->account(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stClientLostConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string account = 1;
  for (int i = 0; i < this->account_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account(i).data(), this->account(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->account(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stClientLostConnect::ByteSize() const {
  int total_size = 0;

  // repeated string account = 1;
  total_size += 1 * this->account_size();
  for (int i = 0; i < this->account_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->account(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stClientLostConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stClientLostConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stClientLostConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stClientLostConnect::MergeFrom(const stClientLostConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  account_.MergeFrom(from.account_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stClientLostConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stClientLostConnect::CopyFrom(const stClientLostConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stClientLostConnect::IsInitialized() const {

  return true;
}

void stClientLostConnect::Swap(stClientLostConnect* other) {
  if (other != this) {
    account_.Swap(&other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stClientLostConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stClientLostConnect_descriptor_;
  metadata.reflection = stClientLostConnect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAskIsNewAccount_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskIsNewAccount_ProtoModID_descriptor_;
}
bool stAskIsNewAccount_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAskIsNewAccount_ProtoModID stAskIsNewAccount::ModID;
const stAskIsNewAccount_ProtoModID stAskIsNewAccount::ProtoModID_MIN;
const stAskIsNewAccount_ProtoModID stAskIsNewAccount::ProtoModID_MAX;
const int stAskIsNewAccount::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAskIsNewAccount_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskIsNewAccount_ProtoFunID_descriptor_;
}
bool stAskIsNewAccount_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAskIsNewAccount_ProtoFunID stAskIsNewAccount::FunID;
const stAskIsNewAccount_ProtoFunID stAskIsNewAccount::ProtoFunID_MIN;
const stAskIsNewAccount_ProtoFunID stAskIsNewAccount::ProtoFunID_MAX;
const int stAskIsNewAccount::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAskIsNewAccount::kAccountFieldNumber;
#endif  // !_MSC_VER

stAskIsNewAccount::stAskIsNewAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAskIsNewAccount::InitAsDefaultInstance() {
}

stAskIsNewAccount::stAskIsNewAccount(const stAskIsNewAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAskIsNewAccount::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAskIsNewAccount::~stAskIsNewAccount() {
  SharedDtor();
}

void stAskIsNewAccount::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stAskIsNewAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAskIsNewAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskIsNewAccount_descriptor_;
}

const stAskIsNewAccount& stAskIsNewAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stAskIsNewAccount* stAskIsNewAccount::default_instance_ = NULL;

stAskIsNewAccount* stAskIsNewAccount::New() const {
  return new stAskIsNewAccount;
}

void stAskIsNewAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAskIsNewAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAskIsNewAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAskIsNewAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAskIsNewAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAskIsNewAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAskIsNewAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAskIsNewAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAskIsNewAccount::MergeFrom(const stAskIsNewAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAskIsNewAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAskIsNewAccount::CopyFrom(const stAskIsNewAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAskIsNewAccount::IsInitialized() const {

  return true;
}

void stAskIsNewAccount::Swap(stAskIsNewAccount* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAskIsNewAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAskIsNewAccount_descriptor_;
  metadata.reflection = stAskIsNewAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stIsNewAccount_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIsNewAccount_ProtoModID_descriptor_;
}
bool stIsNewAccount_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stIsNewAccount_ProtoModID stIsNewAccount::ModID;
const stIsNewAccount_ProtoModID stIsNewAccount::ProtoModID_MIN;
const stIsNewAccount_ProtoModID stIsNewAccount::ProtoModID_MAX;
const int stIsNewAccount::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stIsNewAccount_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIsNewAccount_ProtoFunID_descriptor_;
}
bool stIsNewAccount_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stIsNewAccount_ProtoFunID stIsNewAccount::FunID;
const stIsNewAccount_ProtoFunID stIsNewAccount::ProtoFunID_MIN;
const stIsNewAccount_ProtoFunID stIsNewAccount::ProtoFunID_MAX;
const int stIsNewAccount::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stIsNewAccount::kIsNewFieldNumber;
const int stIsNewAccount::kAccountFieldNumber;
#endif  // !_MSC_VER

stIsNewAccount::stIsNewAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stIsNewAccount::InitAsDefaultInstance() {
}

stIsNewAccount::stIsNewAccount(const stIsNewAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stIsNewAccount::SharedCtor() {
  _cached_size_ = 0;
  isnew_ = false;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stIsNewAccount::~stIsNewAccount() {
  SharedDtor();
}

void stIsNewAccount::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stIsNewAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stIsNewAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIsNewAccount_descriptor_;
}

const stIsNewAccount& stIsNewAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stIsNewAccount* stIsNewAccount::default_instance_ = NULL;

stIsNewAccount* stIsNewAccount::New() const {
  return new stIsNewAccount;
}

void stIsNewAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isnew_ = false;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stIsNewAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isNew = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnew_)));
          set_has_isnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stIsNewAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isNew = 1;
  if (has_isnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isnew(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stIsNewAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isNew = 1;
  if (has_isnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isnew(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stIsNewAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isNew = 1;
    if (has_isnew()) {
      total_size += 1 + 1;
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stIsNewAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stIsNewAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stIsNewAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stIsNewAccount::MergeFrom(const stIsNewAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isnew()) {
      set_isnew(from.isnew());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stIsNewAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stIsNewAccount::CopyFrom(const stIsNewAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stIsNewAccount::IsInitialized() const {

  return true;
}

void stIsNewAccount::Swap(stIsNewAccount* other) {
  if (other != this) {
    std::swap(isnew_, other->isnew_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stIsNewAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stIsNewAccount_descriptor_;
  metadata.reflection = stIsNewAccount_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveRoleInfo_ProtoModID_descriptor_;
}
bool stSaveRoleInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSaveRoleInfo_ProtoModID stSaveRoleInfo::ModID;
const stSaveRoleInfo_ProtoModID stSaveRoleInfo::ProtoModID_MIN;
const stSaveRoleInfo_ProtoModID stSaveRoleInfo::ProtoModID_MAX;
const int stSaveRoleInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveRoleInfo_ProtoFunID_descriptor_;
}
bool stSaveRoleInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSaveRoleInfo_ProtoFunID stSaveRoleInfo::FunID;
const stSaveRoleInfo_ProtoFunID stSaveRoleInfo::ProtoFunID_MIN;
const stSaveRoleInfo_ProtoFunID stSaveRoleInfo::ProtoFunID_MAX;
const int stSaveRoleInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSaveRoleInfo::kTypeFieldNumber;
const int stSaveRoleInfo::kCharIDFieldNumber;
const int stSaveRoleInfo::kGameIDFieldNumber;
const int stSaveRoleInfo::kAccountFieldNumber;
const int stSaveRoleInfo::kDataSizeFieldNumber;
const int stSaveRoleInfo::kDataFieldNumber;
#endif  // !_MSC_VER

stSaveRoleInfo::stSaveRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSaveRoleInfo::InitAsDefaultInstance() {
}

stSaveRoleInfo::stSaveRoleInfo(const stSaveRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSaveRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  charid_ = 0u;
  gameid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datasize_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSaveRoleInfo::~stSaveRoleInfo() {
  SharedDtor();
}

void stSaveRoleInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stSaveRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSaveRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveRoleInfo_descriptor_;
}

const stSaveRoleInfo& stSaveRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSaveRoleInfo* stSaveRoleInfo::default_instance_ = NULL;

stSaveRoleInfo* stSaveRoleInfo::New() const {
  return new stSaveRoleInfo;
}

void stSaveRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    charid_ = 0u;
    gameid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    datasize_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSaveRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.SaveType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::SaveType_IsValid(value)) {
            set_type(static_cast< ::Global::SaveType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameID;
        break;
      }

      // optional uint32 gameID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dataSize;
        break;
      }

      // optional uint32 dataSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSaveRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.SaveType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 gameID = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gameid(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  // optional uint32 dataSize = 5;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->datasize(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSaveRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.SaveType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 gameID = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gameid(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // optional uint32 dataSize = 5;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->datasize(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSaveRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.SaveType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 gameID = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 dataSize = 5;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datasize());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSaveRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSaveRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSaveRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSaveRoleInfo::MergeFrom(const stSaveRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSaveRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSaveRoleInfo::CopyFrom(const stSaveRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSaveRoleInfo::IsInitialized() const {

  return true;
}

void stSaveRoleInfo::Swap(stSaveRoleInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(gameid_, other->gameid_);
    std::swap(account_, other->account_);
    std::swap(datasize_, other->datasize_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSaveRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSaveRoleInfo_descriptor_;
  metadata.reflection = stSaveRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRoleInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRoleInfo_ProtoModID_descriptor_;
}
bool stRetRoleInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRoleInfo_ProtoModID stRetRoleInfo::ModID;
const stRetRoleInfo_ProtoModID stRetRoleInfo::ProtoModID_MIN;
const stRetRoleInfo_ProtoModID stRetRoleInfo::ProtoModID_MAX;
const int stRetRoleInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRoleInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRoleInfo_ProtoFunID_descriptor_;
}
bool stRetRoleInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRoleInfo_ProtoFunID stRetRoleInfo::FunID;
const stRetRoleInfo_ProtoFunID stRetRoleInfo::ProtoFunID_MIN;
const stRetRoleInfo_ProtoFunID stRetRoleInfo::ProtoFunID_MAX;
const int stRetRoleInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRoleInfo::kCharIDFieldNumber;
const int stRetRoleInfo::kGateIDFieldNumber;
const int stRetRoleInfo::kIpFieldNumber;
const int stRetRoleInfo::kAccountFieldNumber;
const int stRetRoleInfo::kDataSizeFieldNumber;
const int stRetRoleInfo::kDataFieldNumber;
const int stRetRoleInfo::kEloadDataTypeFieldNumber;
const int stRetRoleInfo::kDeviceIDFieldNumber;
const int stRetRoleInfo::kChannelIDFieldNumber;
const int stRetRoleInfo::kNetIPFieldNumber;
#endif  // !_MSC_VER

stRetRoleInfo::stRetRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRoleInfo::InitAsDefaultInstance() {
}

stRetRoleInfo::stRetRoleInfo(const stRetRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  gateid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datasize_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  eloaddatatype_ = 1;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  channelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  netip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRoleInfo::~stRetRoleInfo() {
  SharedDtor();
}

void stRetRoleInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (channelid_ != &::google::protobuf::internal::kEmptyString) {
    delete channelid_;
  }
  if (netip_ != &::google::protobuf::internal::kEmptyString) {
    delete netip_;
  }
  if (this != default_instance_) {
  }
}

void stRetRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRoleInfo_descriptor_;
}

const stRetRoleInfo& stRetRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetRoleInfo* stRetRoleInfo::default_instance_ = NULL;

stRetRoleInfo* stRetRoleInfo::New() const {
  return new stRetRoleInfo;
}

void stRetRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    gateid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    datasize_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    eloaddatatype_ = 1;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_channelid()) {
      if (channelid_ != &::google::protobuf::internal::kEmptyString) {
        channelid_->clear();
      }
    }
    if (has_netip()) {
      if (netip_ != &::google::protobuf::internal::kEmptyString) {
        netip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateID;
        break;
      }

      // optional uint32 gateID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dataSize;
        break;
      }

      // optional uint32 dataSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_eloadDataType;
        break;
      }

      // optional .Global.eLoadRoleDataType eloadDataType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eloadDataType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::eLoadRoleDataType_IsValid(value)) {
            set_eloaddatatype(static_cast< ::Global::eLoadRoleDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_deviceID;
        break;
      }

      // optional string deviceID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_channelID;
        break;
      }

      // optional string channelID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channelID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->channelid().data(), this->channelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_netIP;
        break;
      }

      // optional string netIP = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_netIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_netip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->netip().data(), this->netip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 gateID = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gateid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  // optional uint32 dataSize = 5;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->datasize(), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(), output);
  }

  // optional .Global.eLoadRoleDataType eloadDataType = 7;
  if (has_eloaddatatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->eloaddatatype(), output);
  }

  // optional string deviceID = 8;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->deviceid(), output);
  }

  // optional string channelID = 9;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->channelid(), output);
  }

  // optional string netIP = 10;
  if (has_netip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netip().data(), this->netip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->netip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 gateID = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gateid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  // optional uint32 dataSize = 5;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->datasize(), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional .Global.eLoadRoleDataType eloadDataType = 7;
  if (has_eloaddatatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->eloaddatatype(), target);
  }

  // optional string deviceID = 8;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->deviceid(), target);
  }

  // optional string channelID = 9;
  if (has_channelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->channelid().data(), this->channelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->channelid(), target);
  }

  // optional string netIP = 10;
  if (has_netip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->netip().data(), this->netip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->netip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 gateID = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 dataSize = 5;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datasize());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .Global.eLoadRoleDataType eloadDataType = 7;
    if (has_eloaddatatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eloaddatatype());
    }

    // optional string deviceID = 8;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string channelID = 9;
    if (has_channelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channelid());
    }

    // optional string netIP = 10;
    if (has_netip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->netip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRoleInfo::MergeFrom(const stRetRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_eloaddatatype()) {
      set_eloaddatatype(from.eloaddatatype());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_netip()) {
      set_netip(from.netip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRoleInfo::CopyFrom(const stRetRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRoleInfo::IsInitialized() const {

  return true;
}

void stRetRoleInfo::Swap(stRetRoleInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(gateid_, other->gateid_);
    std::swap(ip_, other->ip_);
    std::swap(account_, other->account_);
    std::swap(datasize_, other->datasize_);
    std::swap(data_, other->data_);
    std::swap(eloaddatatype_, other->eloaddatatype_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(channelid_, other->channelid_);
    std::swap(netip_, other->netip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRoleInfo_descriptor_;
  metadata.reflection = stRetRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserEnterMapSuccess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserEnterMapSuccess_ProtoModID_descriptor_;
}
bool stUserEnterMapSuccess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserEnterMapSuccess_ProtoModID stUserEnterMapSuccess::ModID;
const stUserEnterMapSuccess_ProtoModID stUserEnterMapSuccess::ProtoModID_MIN;
const stUserEnterMapSuccess_ProtoModID stUserEnterMapSuccess::ProtoModID_MAX;
const int stUserEnterMapSuccess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserEnterMapSuccess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserEnterMapSuccess_ProtoFunID_descriptor_;
}
bool stUserEnterMapSuccess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserEnterMapSuccess_ProtoFunID stUserEnterMapSuccess::FunID;
const stUserEnterMapSuccess_ProtoFunID stUserEnterMapSuccess::ProtoFunID_MIN;
const stUserEnterMapSuccess_ProtoFunID stUserEnterMapSuccess::ProtoFunID_MAX;
const int stUserEnterMapSuccess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserEnterMapSuccess::kCharIDFieldNumber;
const int stUserEnterMapSuccess::kGmTypeFieldNumber;
const int stUserEnterMapSuccess::kLevelFieldNumber;
const int stUserEnterMapSuccess::kJobFieldNumber;
const int stUserEnterMapSuccess::kSexFieldNumber;
const int stUserEnterMapSuccess::kFetchLilianNumFieldNumber;
const int stUserEnterMapSuccess::kServerIDFieldNumber;
const int stUserEnterMapSuccess::kVipLvFieldNumber;
const int stUserEnterMapSuccess::kHeadIDFieldNumber;
const int stUserEnterMapSuccess::kBodyIDFieldNumber;
const int stUserEnterMapSuccess::kWeaponIDFieldNumber;
const int stUserEnterMapSuccess::kCloackIDFieldNumber;
const int stUserEnterMapSuccess::kWingIDFieldNumber;
const int stUserEnterMapSuccess::kShoeIDFieldNumber;
const int stUserEnterMapSuccess::kFashionHairFieldNumber;
const int stUserEnterMapSuccess::kFashionFaceFieldNumber;
const int stUserEnterMapSuccess::kFashionBodyFieldNumber;
const int stUserEnterMapSuccess::kFashionWeaponFieldNumber;
const int stUserEnterMapSuccess::kFashionShoeFieldNumber;
const int stUserEnterMapSuccess::kFashionDecorationFieldNumber;
const int stUserEnterMapSuccess::kCompensationIDFieldNumber;
const int stUserEnterMapSuccess::kEffectIDFieldNumber;
const int stUserEnterMapSuccess::kWingBreakLvFieldNumber;
const int stUserEnterMapSuccess::kPubServerIndexFieldNumber;
const int stUserEnterMapSuccess::kPubCharIDFieldNumber;
const int stUserEnterMapSuccess::kAreaCodeFieldNumber;
const int stUserEnterMapSuccess::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stUserEnterMapSuccess::stUserEnterMapSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserEnterMapSuccess::InitAsDefaultInstance() {
}

stUserEnterMapSuccess::stUserEnterMapSuccess(const stUserEnterMapSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserEnterMapSuccess::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  gmtype_ = 0u;
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  fetchliliannum_ = 0u;
  serverid_ = 0u;
  viplv_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  compensationid_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  pubserverindex_ = 0u;
  pubcharid_ = 0u;
  areacode_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserEnterMapSuccess::~stUserEnterMapSuccess() {
  SharedDtor();
}

void stUserEnterMapSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserEnterMapSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserEnterMapSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserEnterMapSuccess_descriptor_;
}

const stUserEnterMapSuccess& stUserEnterMapSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUserEnterMapSuccess* stUserEnterMapSuccess::default_instance_ = NULL;

stUserEnterMapSuccess* stUserEnterMapSuccess::New() const {
  return new stUserEnterMapSuccess;
}

void stUserEnterMapSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    gmtype_ = 0u;
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    fetchliliannum_ = 0u;
    serverid_ = 0u;
    viplv_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    headid_ = 0u;
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionbody_ = 0u;
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    compensationid_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    pubserverindex_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    pubcharid_ = 0u;
    areacode_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserEnterMapSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmType;
        break;
      }

      // optional uint32 gmType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmtype_)));
          set_has_gmtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fetchLilianNum;
        break;
      }

      // optional uint32 fetchLilianNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetchLilianNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fetchliliannum_)));
          set_has_fetchliliannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serverID;
        break;
      }

      // optional uint32 serverID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_compensationID;
        break;
      }

      // optional uint32 compensationID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compensationID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compensationid_)));
          set_has_compensationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_pubServerIndex;
        break;
      }

      // optional uint32 pubServerIndex = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubServerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pubserverindex_)));
          set_has_pubserverindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_pubCharID;
        break;
      }

      // optional uint32 pubCharID = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pubcharid_)));
          set_has_pubcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserEnterMapSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 gmType = 2;
  if (has_gmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmtype(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 fetchLilianNum = 6;
  if (has_fetchliliannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fetchliliannum(), output);
  }

  // optional uint32 serverID = 7;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->serverid(), output);
  }

  // optional uint32 vipLv = 8;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->viplv(), output);
  }

  // optional uint32 headID = 9;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->headid(), output);
  }

  // optional uint32 bodyID = 10;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bodyid(), output);
  }

  // optional uint32 weaponID = 11;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->weaponid(), output);
  }

  // optional uint32 cloackID = 12;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cloackid(), output);
  }

  // optional uint32 wingID = 13;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->wingid(), output);
  }

  // optional uint32 shoeID = 14;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 15;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 16;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 17;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 18;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 19;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 20;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->fashiondecoration(), output);
  }

  // optional uint32 compensationID = 21;
  if (has_compensationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->compensationid(), output);
  }

  // optional uint32 effectID = 22;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 23;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->wingbreaklv(), output);
  }

  // optional uint32 pubServerIndex = 24;
  if (has_pubserverindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->pubserverindex(), output);
  }

  // optional uint32 pubCharID = 25;
  if (has_pubcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->pubcharid(), output);
  }

  // optional uint32 areaCode = 26;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->areacode(), output);
  }

  // optional uint32 photoID = 27;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserEnterMapSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 gmType = 2;
  if (has_gmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmtype(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 fetchLilianNum = 6;
  if (has_fetchliliannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fetchliliannum(), target);
  }

  // optional uint32 serverID = 7;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->serverid(), target);
  }

  // optional uint32 vipLv = 8;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->viplv(), target);
  }

  // optional uint32 headID = 9;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->headid(), target);
  }

  // optional uint32 bodyID = 10;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bodyid(), target);
  }

  // optional uint32 weaponID = 11;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->weaponid(), target);
  }

  // optional uint32 cloackID = 12;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cloackid(), target);
  }

  // optional uint32 wingID = 13;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->wingid(), target);
  }

  // optional uint32 shoeID = 14;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 15;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 16;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 17;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 18;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 19;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 20;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->fashiondecoration(), target);
  }

  // optional uint32 compensationID = 21;
  if (has_compensationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->compensationid(), target);
  }

  // optional uint32 effectID = 22;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 23;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->wingbreaklv(), target);
  }

  // optional uint32 pubServerIndex = 24;
  if (has_pubserverindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->pubserverindex(), target);
  }

  // optional uint32 pubCharID = 25;
  if (has_pubcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->pubcharid(), target);
  }

  // optional uint32 areaCode = 26;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->areacode(), target);
  }

  // optional uint32 photoID = 27;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserEnterMapSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 gmType = 2;
    if (has_gmtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmtype());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 fetchLilianNum = 6;
    if (has_fetchliliannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fetchliliannum());
    }

    // optional uint32 serverID = 7;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional uint32 vipLv = 8;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 headID = 9;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 bodyID = 10;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 11;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 12;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 13;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 14;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 15;
    if (has_fashionhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 16;
    if (has_fashionface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionBody = 17;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

    // optional uint32 fashionWeapon = 18;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 19;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 20;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 compensationID = 21;
    if (has_compensationid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compensationid());
    }

    // optional uint32 effectID = 22;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 23;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 pubServerIndex = 24;
    if (has_pubserverindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pubserverindex());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 pubCharID = 25;
    if (has_pubcharid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pubcharid());
    }

    // optional uint32 areaCode = 26;
    if (has_areacode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional uint32 photoID = 27;
    if (has_photoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserEnterMapSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserEnterMapSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserEnterMapSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserEnterMapSuccess::MergeFrom(const stUserEnterMapSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gmtype()) {
      set_gmtype(from.gmtype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_fetchliliannum()) {
      set_fetchliliannum(from.fetchliliannum());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_compensationid()) {
      set_compensationid(from.compensationid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_pubserverindex()) {
      set_pubserverindex(from.pubserverindex());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_pubcharid()) {
      set_pubcharid(from.pubcharid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserEnterMapSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserEnterMapSuccess::CopyFrom(const stUserEnterMapSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserEnterMapSuccess::IsInitialized() const {

  return true;
}

void stUserEnterMapSuccess::Swap(stUserEnterMapSuccess* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(gmtype_, other->gmtype_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(fetchliliannum_, other->fetchliliannum_);
    std::swap(serverid_, other->serverid_);
    std::swap(viplv_, other->viplv_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(compensationid_, other->compensationid_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(pubserverindex_, other->pubserverindex_);
    std::swap(pubcharid_, other->pubcharid_);
    std::swap(areacode_, other->areacode_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserEnterMapSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserEnterMapSuccess_descriptor_;
  metadata.reflection = stUserEnterMapSuccess_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRechargeInfo::kItemIDFieldNumber;
const int stRechargeInfo::kMoneyFieldNumber;
const int stRechargeInfo::kTidFieldNumber;
const int stRechargeInfo::kDataFieldNumber;
#endif  // !_MSC_VER

stRechargeInfo::stRechargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRechargeInfo::InitAsDefaultInstance() {
}

stRechargeInfo::stRechargeInfo(const stRechargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRechargeInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  money_ = 0u;
  tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRechargeInfo::~stRechargeInfo() {
  SharedDtor();
}

void stRechargeInfo::SharedDtor() {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stRechargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRechargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechargeInfo_descriptor_;
}

const stRechargeInfo& stRechargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRechargeInfo* stRechargeInfo::default_instance_ = NULL;

stRechargeInfo* stRechargeInfo::New() const {
  return new stRechargeInfo;
}

void stRechargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    money_ = 0u;
    if (has_tid()) {
      if (tid_ != &::google::protobuf::internal::kEmptyString) {
        tid_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRechargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional uint32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tid;
        break;
      }

      // optional string tid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tid().data(), this->tid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional string data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRechargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money(), output);
  }

  // optional string tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tid(), output);
  }

  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRechargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money(), target);
  }

  // optional string tid = 3;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tid(), target);
  }

  // optional string data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRechargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional string tid = 3;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tid());
    }

    // optional string data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRechargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRechargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRechargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRechargeInfo::MergeFrom(const stRechargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRechargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRechargeInfo::CopyFrom(const stRechargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRechargeInfo::IsInitialized() const {

  return true;
}

void stRechargeInfo::Swap(stRechargeInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(money_, other->money_);
    std::swap(tid_, other->tid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRechargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRechargeInfo_descriptor_;
  metadata.reflection = stRechargeInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserRecharge_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserRecharge_ProtoModID_descriptor_;
}
bool stUserRecharge_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserRecharge_ProtoModID stUserRecharge::ModID;
const stUserRecharge_ProtoModID stUserRecharge::ProtoModID_MIN;
const stUserRecharge_ProtoModID stUserRecharge::ProtoModID_MAX;
const int stUserRecharge::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserRecharge_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserRecharge_ProtoFunID_descriptor_;
}
bool stUserRecharge_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserRecharge_ProtoFunID stUserRecharge::FunID;
const stUserRecharge_ProtoFunID stUserRecharge::ProtoFunID_MIN;
const stUserRecharge_ProtoFunID stUserRecharge::ProtoFunID_MAX;
const int stUserRecharge::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserRecharge::kCharIDFieldNumber;
const int stUserRecharge::kRechargeInfoFieldNumber;
const int stUserRecharge::kIsExtendFieldNumber;
#endif  // !_MSC_VER

stUserRecharge::stUserRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserRecharge::InitAsDefaultInstance() {
}

stUserRecharge::stUserRecharge(const stUserRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserRecharge::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  isextend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserRecharge::~stUserRecharge() {
  SharedDtor();
}

void stUserRecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserRecharge_descriptor_;
}

const stUserRecharge& stUserRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUserRecharge* stUserRecharge::default_instance_ = NULL;

stUserRecharge* stUserRecharge::New() const {
  return new stUserRecharge;
}

void stUserRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    isextend_ = false;
  }
  rechargeinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rechargeInfo;
        break;
      }

      // repeated .Global.stRechargeInfo rechargeInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rechargeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rechargeInfo;
        if (input->ExpectTag(24)) goto parse_isExtend;
        break;
      }

      // optional bool isExtend = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isExtend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isextend_)));
          set_has_isextend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .Global.stRechargeInfo rechargeInfo = 2;
  for (int i = 0; i < this->rechargeinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rechargeinfo(i), output);
  }

  // optional bool isExtend = 3;
  if (has_isextend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isextend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .Global.stRechargeInfo rechargeInfo = 2;
  for (int i = 0; i < this->rechargeinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rechargeinfo(i), target);
  }

  // optional bool isExtend = 3;
  if (has_isextend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isextend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool isExtend = 3;
    if (has_isextend()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Global.stRechargeInfo rechargeInfo = 2;
  total_size += 1 * this->rechargeinfo_size();
  for (int i = 0; i < this->rechargeinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rechargeinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserRecharge::MergeFrom(const stUserRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  rechargeinfo_.MergeFrom(from.rechargeinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_isextend()) {
      set_isextend(from.isextend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserRecharge::CopyFrom(const stUserRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserRecharge::IsInitialized() const {

  return true;
}

void stUserRecharge::Swap(stUserRecharge* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    rechargeinfo_.Swap(&other->rechargeinfo_);
    std::swap(isextend_, other->isextend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserRecharge_descriptor_;
  metadata.reflection = stUserRecharge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stProcessGM_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stProcessGM_ProtoModID_descriptor_;
}
bool stProcessGM_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stProcessGM_ProtoModID stProcessGM::ModID;
const stProcessGM_ProtoModID stProcessGM::ProtoModID_MIN;
const stProcessGM_ProtoModID stProcessGM::ProtoModID_MAX;
const int stProcessGM::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stProcessGM_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stProcessGM_ProtoFunID_descriptor_;
}
bool stProcessGM_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stProcessGM_ProtoFunID stProcessGM::FunID;
const stProcessGM_ProtoFunID stProcessGM::ProtoFunID_MIN;
const stProcessGM_ProtoFunID stProcessGM::ProtoFunID_MAX;
const int stProcessGM::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stProcessGM::kTypeFieldNumber;
const int stProcessGM::kIntParamFieldNumber;
const int stProcessGM::kStrParamFieldNumber;
const int stProcessGM::kCharIDFieldNumber;
#endif  // !_MSC_VER

stProcessGM::stProcessGM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stProcessGM::InitAsDefaultInstance() {
}

stProcessGM::stProcessGM(const stProcessGM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stProcessGM::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stProcessGM::~stProcessGM() {
  SharedDtor();
}

void stProcessGM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stProcessGM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stProcessGM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stProcessGM_descriptor_;
}

const stProcessGM& stProcessGM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stProcessGM* stProcessGM::default_instance_ = NULL;

stProcessGM* stProcessGM::New() const {
  return new stProcessGM;
}

void stProcessGM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    charid_ = 0u;
  }
  intparam_.Clear();
  strparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stProcessGM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.eGMType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::eGMType_IsValid(value)) {
            set_type(static_cast< ::Global::eGMType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intParam;
        break;
      }

      // repeated uint32 intParam = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_intParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_intparam())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_intparam())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_intParam;
        if (input->ExpectTag(26)) goto parse_strParam;
        break;
      }

      // repeated string strParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strparam(this->strparam_size() - 1).data(),
            this->strparam(this->strparam_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strParam;
        if (input->ExpectTag(32)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stProcessGM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.eGMType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated uint32 intParam = 2;
  for (int i = 0; i < this->intparam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->intparam(i), output);
  }

  // repeated string strParam = 3;
  for (int i = 0; i < this->strparam_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->strparam(i).data(), this->strparam(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strparam(i), output);
  }

  // optional uint32 charID = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stProcessGM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.eGMType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated uint32 intParam = 2;
  for (int i = 0; i < this->intparam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->intparam(i), target);
  }

  // repeated string strParam = 3;
  for (int i = 0; i < this->strparam_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strparam(i).data(), this->strparam(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->strparam(i), target);
  }

  // optional uint32 charID = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stProcessGM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.eGMType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 charID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated uint32 intParam = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->intparam_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->intparam(i));
    }
    total_size += 1 * this->intparam_size() + data_size;
  }

  // repeated string strParam = 3;
  total_size += 1 * this->strparam_size();
  for (int i = 0; i < this->strparam_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strparam(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stProcessGM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stProcessGM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stProcessGM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stProcessGM::MergeFrom(const stProcessGM& from) {
  GOOGLE_CHECK_NE(&from, this);
  intparam_.MergeFrom(from.intparam_);
  strparam_.MergeFrom(from.strparam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stProcessGM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stProcessGM::CopyFrom(const stProcessGM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stProcessGM::IsInitialized() const {

  return true;
}

void stProcessGM::Swap(stProcessGM* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    intparam_.Swap(&other->intparam_);
    strparam_.Swap(&other->strparam_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stProcessGM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stProcessGM_descriptor_;
  metadata.reflection = stProcessGM_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynFetchLilianNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynFetchLilianNum_ProtoModID_descriptor_;
}
bool stSynFetchLilianNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynFetchLilianNum_ProtoModID stSynFetchLilianNum::ModID;
const stSynFetchLilianNum_ProtoModID stSynFetchLilianNum::ProtoModID_MIN;
const stSynFetchLilianNum_ProtoModID stSynFetchLilianNum::ProtoModID_MAX;
const int stSynFetchLilianNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynFetchLilianNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynFetchLilianNum_ProtoFunID_descriptor_;
}
bool stSynFetchLilianNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynFetchLilianNum_ProtoFunID stSynFetchLilianNum::FunID;
const stSynFetchLilianNum_ProtoFunID stSynFetchLilianNum::ProtoFunID_MIN;
const stSynFetchLilianNum_ProtoFunID stSynFetchLilianNum::ProtoFunID_MAX;
const int stSynFetchLilianNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynFetchLilianNum::kCharIDFieldNumber;
const int stSynFetchLilianNum::kNumFieldNumber;
#endif  // !_MSC_VER

stSynFetchLilianNum::stSynFetchLilianNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynFetchLilianNum::InitAsDefaultInstance() {
}

stSynFetchLilianNum::stSynFetchLilianNum(const stSynFetchLilianNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynFetchLilianNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynFetchLilianNum::~stSynFetchLilianNum() {
  SharedDtor();
}

void stSynFetchLilianNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynFetchLilianNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynFetchLilianNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynFetchLilianNum_descriptor_;
}

const stSynFetchLilianNum& stSynFetchLilianNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynFetchLilianNum* stSynFetchLilianNum::default_instance_ = NULL;

stSynFetchLilianNum* stSynFetchLilianNum::New() const {
  return new stSynFetchLilianNum;
}

void stSynFetchLilianNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynFetchLilianNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynFetchLilianNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynFetchLilianNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynFetchLilianNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynFetchLilianNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynFetchLilianNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynFetchLilianNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynFetchLilianNum::MergeFrom(const stSynFetchLilianNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynFetchLilianNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynFetchLilianNum::CopyFrom(const stSynFetchLilianNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynFetchLilianNum::IsInitialized() const {

  return true;
}

void stSynFetchLilianNum::Swap(stSynFetchLilianNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynFetchLilianNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynFetchLilianNum_descriptor_;
  metadata.reflection = stSynFetchLilianNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynGuildID_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildID_ProtoModID_descriptor_;
}
bool stSynGuildID_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGuildID_ProtoModID stSynGuildID::ModID;
const stSynGuildID_ProtoModID stSynGuildID::ProtoModID_MIN;
const stSynGuildID_ProtoModID stSynGuildID::ProtoModID_MAX;
const int stSynGuildID::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynGuildID_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildID_ProtoFunID_descriptor_;
}
bool stSynGuildID_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGuildID_ProtoFunID stSynGuildID::FunID;
const stSynGuildID_ProtoFunID stSynGuildID::ProtoFunID_MIN;
const stSynGuildID_ProtoFunID stSynGuildID::ProtoFunID_MAX;
const int stSynGuildID::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynGuildID::kCharIDFieldNumber;
const int stSynGuildID::kGuildIDFieldNumber;
const int stSynGuildID::kGuildLvFieldNumber;
const int stSynGuildID::kJoinInTimeFieldNumber;
const int stSynGuildID::kBlackMarketLvFieldNumber;
#endif  // !_MSC_VER

stSynGuildID::stSynGuildID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynGuildID::InitAsDefaultInstance() {
}

stSynGuildID::stSynGuildID(const stSynGuildID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynGuildID::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  guildid_ = 0u;
  guildlv_ = 0u;
  joinintime_ = 0u;
  blackmarketlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynGuildID::~stSynGuildID() {
  SharedDtor();
}

void stSynGuildID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynGuildID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynGuildID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildID_descriptor_;
}

const stSynGuildID& stSynGuildID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynGuildID* stSynGuildID::default_instance_ = NULL;

stSynGuildID* stSynGuildID::New() const {
  return new stSynGuildID;
}

void stSynGuildID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    guildid_ = 0u;
    guildlv_ = 0u;
    joinintime_ = 0u;
    blackmarketlv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynGuildID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildID;
        break;
      }

      // optional uint32 guildID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildLv;
        break;
      }

      // optional uint32 guildLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlv_)));
          set_has_guildlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_joinInTime;
        break;
      }

      // optional uint32 joinInTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinInTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joinintime_)));
          set_has_joinintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_blackMarketLv;
        break;
      }

      // optional uint32 blackMarketLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blackMarketLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blackmarketlv_)));
          set_has_blackmarketlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynGuildID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 guildID = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guildid(), output);
  }

  // optional uint32 guildLv = 3;
  if (has_guildlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guildlv(), output);
  }

  // optional uint32 joinInTime = 4;
  if (has_joinintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->joinintime(), output);
  }

  // optional uint32 blackMarketLv = 5;
  if (has_blackmarketlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->blackmarketlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynGuildID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 guildID = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guildid(), target);
  }

  // optional uint32 guildLv = 3;
  if (has_guildlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guildlv(), target);
  }

  // optional uint32 joinInTime = 4;
  if (has_joinintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->joinintime(), target);
  }

  // optional uint32 blackMarketLv = 5;
  if (has_blackmarketlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->blackmarketlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynGuildID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 guildID = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional uint32 guildLv = 3;
    if (has_guildlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlv());
    }

    // optional uint32 joinInTime = 4;
    if (has_joinintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joinintime());
    }

    // optional uint32 blackMarketLv = 5;
    if (has_blackmarketlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blackmarketlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynGuildID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynGuildID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynGuildID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynGuildID::MergeFrom(const stSynGuildID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildlv()) {
      set_guildlv(from.guildlv());
    }
    if (from.has_joinintime()) {
      set_joinintime(from.joinintime());
    }
    if (from.has_blackmarketlv()) {
      set_blackmarketlv(from.blackmarketlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynGuildID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynGuildID::CopyFrom(const stSynGuildID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynGuildID::IsInitialized() const {

  return true;
}

void stSynGuildID::Swap(stSynGuildID* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildlv_, other->guildlv_);
    std::swap(joinintime_, other->joinintime_);
    std::swap(blackmarketlv_, other->blackmarketlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynGuildID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynGuildID_descriptor_;
  metadata.reflection = stSynGuildID_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCreateGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateGuild_ProtoModID_descriptor_;
}
bool stCreateGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateGuild_ProtoModID stCreateGuild::ModID;
const stCreateGuild_ProtoModID stCreateGuild::ProtoModID_MIN;
const stCreateGuild_ProtoModID stCreateGuild::ProtoModID_MAX;
const int stCreateGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCreateGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateGuild_ProtoFunID_descriptor_;
}
bool stCreateGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateGuild_ProtoFunID stCreateGuild::FunID;
const stCreateGuild_ProtoFunID stCreateGuild::ProtoFunID_MIN;
const stCreateGuild_ProtoFunID stCreateGuild::ProtoFunID_MAX;
const int stCreateGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCreateGuild::kCharIDFieldNumber;
const int stCreateGuild::kNameFieldNumber;
const int stCreateGuild::kBadgeFieldNumber;
#endif  // !_MSC_VER

stCreateGuild::stCreateGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCreateGuild::InitAsDefaultInstance() {
}

stCreateGuild::stCreateGuild(const stCreateGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCreateGuild::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  badge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCreateGuild::~stCreateGuild() {
  SharedDtor();
}

void stCreateGuild::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stCreateGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCreateGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateGuild_descriptor_;
}

const stCreateGuild& stCreateGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCreateGuild* stCreateGuild::default_instance_ = NULL;

stCreateGuild* stCreateGuild::New() const {
  return new stCreateGuild;
}

void stCreateGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    badge_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCreateGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_badge;
        break;
      }

      // optional uint32 badge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCreateGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 badge = 3;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->badge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCreateGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 badge = 3;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->badge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCreateGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 badge = 3;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCreateGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCreateGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCreateGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCreateGuild::MergeFrom(const stCreateGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_badge()) {
      set_badge(from.badge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCreateGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCreateGuild::CopyFrom(const stCreateGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCreateGuild::IsInitialized() const {

  return true;
}

void stCreateGuild::Swap(stCreateGuild* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(badge_, other->badge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCreateGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCreateGuild_descriptor_;
  metadata.reflection = stCreateGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCreateGuildDecMoney_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateGuildDecMoney_ProtoModID_descriptor_;
}
bool stCreateGuildDecMoney_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateGuildDecMoney_ProtoModID stCreateGuildDecMoney::ModID;
const stCreateGuildDecMoney_ProtoModID stCreateGuildDecMoney::ProtoModID_MIN;
const stCreateGuildDecMoney_ProtoModID stCreateGuildDecMoney::ProtoModID_MAX;
const int stCreateGuildDecMoney::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCreateGuildDecMoney_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateGuildDecMoney_ProtoFunID_descriptor_;
}
bool stCreateGuildDecMoney_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateGuildDecMoney_ProtoFunID stCreateGuildDecMoney::FunID;
const stCreateGuildDecMoney_ProtoFunID stCreateGuildDecMoney::ProtoFunID_MIN;
const stCreateGuildDecMoney_ProtoFunID stCreateGuildDecMoney::ProtoFunID_MAX;
const int stCreateGuildDecMoney::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCreateGuildDecMoney::kCharIDFieldNumber;
#endif  // !_MSC_VER

stCreateGuildDecMoney::stCreateGuildDecMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCreateGuildDecMoney::InitAsDefaultInstance() {
}

stCreateGuildDecMoney::stCreateGuildDecMoney(const stCreateGuildDecMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCreateGuildDecMoney::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCreateGuildDecMoney::~stCreateGuildDecMoney() {
  SharedDtor();
}

void stCreateGuildDecMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCreateGuildDecMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCreateGuildDecMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateGuildDecMoney_descriptor_;
}

const stCreateGuildDecMoney& stCreateGuildDecMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCreateGuildDecMoney* stCreateGuildDecMoney::default_instance_ = NULL;

stCreateGuildDecMoney* stCreateGuildDecMoney::New() const {
  return new stCreateGuildDecMoney;
}

void stCreateGuildDecMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCreateGuildDecMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCreateGuildDecMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCreateGuildDecMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCreateGuildDecMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCreateGuildDecMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCreateGuildDecMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCreateGuildDecMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCreateGuildDecMoney::MergeFrom(const stCreateGuildDecMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCreateGuildDecMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCreateGuildDecMoney::CopyFrom(const stCreateGuildDecMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCreateGuildDecMoney::IsInitialized() const {

  return true;
}

void stCreateGuildDecMoney::Swap(stCreateGuildDecMoney* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCreateGuildDecMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCreateGuildDecMoney_descriptor_;
  metadata.reflection = stCreateGuildDecMoney_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stForwardJoininGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardJoininGuild_ProtoModID_descriptor_;
}
bool stForwardJoininGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForwardJoininGuild_ProtoModID stForwardJoininGuild::ModID;
const stForwardJoininGuild_ProtoModID stForwardJoininGuild::ProtoModID_MIN;
const stForwardJoininGuild_ProtoModID stForwardJoininGuild::ProtoModID_MAX;
const int stForwardJoininGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stForwardJoininGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardJoininGuild_ProtoFunID_descriptor_;
}
bool stForwardJoininGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForwardJoininGuild_ProtoFunID stForwardJoininGuild::FunID;
const stForwardJoininGuild_ProtoFunID stForwardJoininGuild::ProtoFunID_MIN;
const stForwardJoininGuild_ProtoFunID stForwardJoininGuild::ProtoFunID_MAX;
const int stForwardJoininGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stForwardJoininGuild::kCharIDFieldNumber;
const int stForwardJoininGuild::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stForwardJoininGuild::stForwardJoininGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stForwardJoininGuild::InitAsDefaultInstance() {
}

stForwardJoininGuild::stForwardJoininGuild(const stForwardJoininGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stForwardJoininGuild::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForwardJoininGuild::~stForwardJoininGuild() {
  SharedDtor();
}

void stForwardJoininGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stForwardJoininGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForwardJoininGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardJoininGuild_descriptor_;
}

const stForwardJoininGuild& stForwardJoininGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stForwardJoininGuild* stForwardJoininGuild::default_instance_ = NULL;

stForwardJoininGuild* stForwardJoininGuild::New() const {
  return new stForwardJoininGuild;
}

void stForwardJoininGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForwardJoininGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildID;
        break;
      }

      // optional uint32 guildID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stForwardJoininGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 guildID = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stForwardJoininGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 guildID = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stForwardJoininGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 guildID = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForwardJoininGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForwardJoininGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForwardJoininGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForwardJoininGuild::MergeFrom(const stForwardJoininGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForwardJoininGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForwardJoininGuild::CopyFrom(const stForwardJoininGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForwardJoininGuild::IsInitialized() const {

  return true;
}

void stForwardJoininGuild::Swap(stForwardJoininGuild* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForwardJoininGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForwardJoininGuild_descriptor_;
  metadata.reflection = stForwardJoininGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddGuildContribute_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddGuildContribute_ProtoModID_descriptor_;
}
bool stAddGuildContribute_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddGuildContribute_ProtoModID stAddGuildContribute::ModID;
const stAddGuildContribute_ProtoModID stAddGuildContribute::ProtoModID_MIN;
const stAddGuildContribute_ProtoModID stAddGuildContribute::ProtoModID_MAX;
const int stAddGuildContribute::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddGuildContribute_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddGuildContribute_ProtoFunID_descriptor_;
}
bool stAddGuildContribute_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddGuildContribute_ProtoFunID stAddGuildContribute::FunID;
const stAddGuildContribute_ProtoFunID stAddGuildContribute::ProtoFunID_MIN;
const stAddGuildContribute_ProtoFunID stAddGuildContribute::ProtoFunID_MAX;
const int stAddGuildContribute::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddGuildContribute::kCharIDFieldNumber;
const int stAddGuildContribute::kContributeFieldNumber;
const int stAddGuildContribute::kTodayDayContributeFieldNumber;
#endif  // !_MSC_VER

stAddGuildContribute::stAddGuildContribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddGuildContribute::InitAsDefaultInstance() {
}

stAddGuildContribute::stAddGuildContribute(const stAddGuildContribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddGuildContribute::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  contribute_ = 0u;
  todaydaycontribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddGuildContribute::~stAddGuildContribute() {
  SharedDtor();
}

void stAddGuildContribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAddGuildContribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddGuildContribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddGuildContribute_descriptor_;
}

const stAddGuildContribute& stAddGuildContribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stAddGuildContribute* stAddGuildContribute::default_instance_ = NULL;

stAddGuildContribute* stAddGuildContribute::New() const {
  return new stAddGuildContribute;
}

void stAddGuildContribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    contribute_ = 0u;
    todaydaycontribute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddGuildContribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contribute;
        break;
      }

      // optional uint32 contribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_todayDayContribute;
        break;
      }

      // optional uint32 todayDayContribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayDayContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaydaycontribute_)));
          set_has_todaydaycontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddGuildContribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 contribute = 2;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contribute(), output);
  }

  // optional uint32 todayDayContribute = 3;
  if (has_todaydaycontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->todaydaycontribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddGuildContribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 contribute = 2;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contribute(), target);
  }

  // optional uint32 todayDayContribute = 3;
  if (has_todaydaycontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->todaydaycontribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddGuildContribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 contribute = 2;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }

    // optional uint32 todayDayContribute = 3;
    if (has_todaydaycontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaydaycontribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddGuildContribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddGuildContribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddGuildContribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddGuildContribute::MergeFrom(const stAddGuildContribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_todaydaycontribute()) {
      set_todaydaycontribute(from.todaydaycontribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddGuildContribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddGuildContribute::CopyFrom(const stAddGuildContribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddGuildContribute::IsInitialized() const {

  return true;
}

void stAddGuildContribute::Swap(stAddGuildContribute* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(contribute_, other->contribute_);
    std::swap(todaydaycontribute_, other->todaydaycontribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddGuildContribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddGuildContribute_descriptor_;
  metadata.reflection = stAddGuildContribute_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBroadcastGuildChatInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastGuildChatInfo_ProtoModID_descriptor_;
}
bool stBroadcastGuildChatInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadcastGuildChatInfo_ProtoModID stBroadcastGuildChatInfo::ModID;
const stBroadcastGuildChatInfo_ProtoModID stBroadcastGuildChatInfo::ProtoModID_MIN;
const stBroadcastGuildChatInfo_ProtoModID stBroadcastGuildChatInfo::ProtoModID_MAX;
const int stBroadcastGuildChatInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBroadcastGuildChatInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastGuildChatInfo_ProtoFunID_descriptor_;
}
bool stBroadcastGuildChatInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadcastGuildChatInfo_ProtoFunID stBroadcastGuildChatInfo::FunID;
const stBroadcastGuildChatInfo_ProtoFunID stBroadcastGuildChatInfo::ProtoFunID_MIN;
const stBroadcastGuildChatInfo_ProtoFunID stBroadcastGuildChatInfo::ProtoFunID_MAX;
const int stBroadcastGuildChatInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBroadcastGuildChatInfo::kCharIDFieldNumber;
const int stBroadcastGuildChatInfo::kVipLvFieldNumber;
const int stBroadcastGuildChatInfo::kContentFieldNumber;
const int stBroadcastGuildChatInfo::kIsVoiceFieldNumber;
const int stBroadcastGuildChatInfo::kVoiceUrlFieldNumber;
const int stBroadcastGuildChatInfo::kVoiceLenghtFieldNumber;
#endif  // !_MSC_VER

stBroadcastGuildChatInfo::stBroadcastGuildChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBroadcastGuildChatInfo::InitAsDefaultInstance() {
}

stBroadcastGuildChatInfo::stBroadcastGuildChatInfo(const stBroadcastGuildChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBroadcastGuildChatInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  viplv_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvoice_ = false;
  voiceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voicelenght_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadcastGuildChatInfo::~stBroadcastGuildChatInfo() {
  SharedDtor();
}

void stBroadcastGuildChatInfo::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
    delete voiceurl_;
  }
  if (this != default_instance_) {
  }
}

void stBroadcastGuildChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadcastGuildChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastGuildChatInfo_descriptor_;
}

const stBroadcastGuildChatInfo& stBroadcastGuildChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stBroadcastGuildChatInfo* stBroadcastGuildChatInfo::default_instance_ = NULL;

stBroadcastGuildChatInfo* stBroadcastGuildChatInfo::New() const {
  return new stBroadcastGuildChatInfo;
}

void stBroadcastGuildChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    viplv_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    isvoice_ = false;
    if (has_voiceurl()) {
      if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
        voiceurl_->clear();
      }
    }
    voicelenght_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadcastGuildChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional string content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isVoice;
        break;
      }

      // optional bool isVoice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvoice_)));
          set_has_isvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_voiceUrl;
        break;
      }

      // optional string voiceUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiceUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiceurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voiceurl().data(), this->voiceurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_voiceLenght;
        break;
      }

      // optional uint32 voiceLenght = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voiceLenght:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicelenght_)));
          set_has_voicelenght();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBroadcastGuildChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 vipLv = 2;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->viplv(), output);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->content(), output);
  }

  // optional bool isVoice = 4;
  if (has_isvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isvoice(), output);
  }

  // optional string voiceUrl = 5;
  if (has_voiceurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiceurl().data(), this->voiceurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->voiceurl(), output);
  }

  // optional uint32 voiceLenght = 6;
  if (has_voicelenght()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->voicelenght(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBroadcastGuildChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 vipLv = 2;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->viplv(), target);
  }

  // optional string content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional bool isVoice = 4;
  if (has_isvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isvoice(), target);
  }

  // optional string voiceUrl = 5;
  if (has_voiceurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiceurl().data(), this->voiceurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->voiceurl(), target);
  }

  // optional uint32 voiceLenght = 6;
  if (has_voicelenght()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->voicelenght(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBroadcastGuildChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 vipLv = 2;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional bool isVoice = 4;
    if (has_isvoice()) {
      total_size += 1 + 1;
    }

    // optional string voiceUrl = 5;
    if (has_voiceurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiceurl());
    }

    // optional uint32 voiceLenght = 6;
    if (has_voicelenght()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voicelenght());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadcastGuildChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadcastGuildChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadcastGuildChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadcastGuildChatInfo::MergeFrom(const stBroadcastGuildChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_isvoice()) {
      set_isvoice(from.isvoice());
    }
    if (from.has_voiceurl()) {
      set_voiceurl(from.voiceurl());
    }
    if (from.has_voicelenght()) {
      set_voicelenght(from.voicelenght());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadcastGuildChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadcastGuildChatInfo::CopyFrom(const stBroadcastGuildChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadcastGuildChatInfo::IsInitialized() const {

  return true;
}

void stBroadcastGuildChatInfo::Swap(stBroadcastGuildChatInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(viplv_, other->viplv_);
    std::swap(content_, other->content_);
    std::swap(isvoice_, other->isvoice_);
    std::swap(voiceurl_, other->voiceurl_);
    std::swap(voicelenght_, other->voicelenght_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadcastGuildChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadcastGuildChatInfo_descriptor_;
  metadata.reflection = stBroadcastGuildChatInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuildPray_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildPray_ProtoModID_descriptor_;
}
bool stGuildPray_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildPray_ProtoModID stGuildPray::ModID;
const stGuildPray_ProtoModID stGuildPray::ProtoModID_MIN;
const stGuildPray_ProtoModID stGuildPray::ProtoModID_MAX;
const int stGuildPray::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuildPray_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildPray_ProtoFunID_descriptor_;
}
bool stGuildPray_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildPray_ProtoFunID stGuildPray::FunID;
const stGuildPray_ProtoFunID stGuildPray::ProtoFunID_MIN;
const stGuildPray_ProtoFunID stGuildPray::ProtoFunID_MAX;
const int stGuildPray::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuildPray::kCharIDFieldNumber;
const int stGuildPray::kBuildingLvFieldNumber;
const int stGuildPray::kExtraBoxIDFieldNumber;
#endif  // !_MSC_VER

stGuildPray::stGuildPray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuildPray::InitAsDefaultInstance() {
}

stGuildPray::stGuildPray(const stGuildPray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuildPray::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  buildinglv_ = 0u;
  extraboxid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuildPray::~stGuildPray() {
  SharedDtor();
}

void stGuildPray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuildPray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuildPray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildPray_descriptor_;
}

const stGuildPray& stGuildPray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGuildPray* stGuildPray::default_instance_ = NULL;

stGuildPray* stGuildPray::New() const {
  return new stGuildPray;
}

void stGuildPray::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    buildinglv_ = 0u;
    extraboxid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuildPray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buildingLv;
        break;
      }

      // optional uint32 buildingLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildingLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buildinglv_)));
          set_has_buildinglv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_extraBoxID;
        break;
      }

      // optional uint32 extraBoxID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraBoxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &extraboxid_)));
          set_has_extraboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuildPray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 buildingLv = 2;
  if (has_buildinglv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buildinglv(), output);
  }

  // optional uint32 extraBoxID = 3;
  if (has_extraboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->extraboxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuildPray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 buildingLv = 2;
  if (has_buildinglv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buildinglv(), target);
  }

  // optional uint32 extraBoxID = 3;
  if (has_extraboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->extraboxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuildPray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 buildingLv = 2;
    if (has_buildinglv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buildinglv());
    }

    // optional uint32 extraBoxID = 3;
    if (has_extraboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->extraboxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuildPray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuildPray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuildPray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuildPray::MergeFrom(const stGuildPray& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_buildinglv()) {
      set_buildinglv(from.buildinglv());
    }
    if (from.has_extraboxid()) {
      set_extraboxid(from.extraboxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuildPray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuildPray::CopyFrom(const stGuildPray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuildPray::IsInitialized() const {

  return true;
}

void stGuildPray::Swap(stGuildPray* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(buildinglv_, other->buildinglv_);
    std::swap(extraboxid_, other->extraboxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuildPray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuildPray_descriptor_;
  metadata.reflection = stGuildPray_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynUserLevel_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserLevel_ProtoModID_descriptor_;
}
bool stSynUserLevel_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynUserLevel_ProtoModID stSynUserLevel::ModID;
const stSynUserLevel_ProtoModID stSynUserLevel::ProtoModID_MIN;
const stSynUserLevel_ProtoModID stSynUserLevel::ProtoModID_MAX;
const int stSynUserLevel::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynUserLevel_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserLevel_ProtoFunID_descriptor_;
}
bool stSynUserLevel_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynUserLevel_ProtoFunID stSynUserLevel::FunID;
const stSynUserLevel_ProtoFunID stSynUserLevel::ProtoFunID_MIN;
const stSynUserLevel_ProtoFunID stSynUserLevel::ProtoFunID_MAX;
const int stSynUserLevel::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynUserLevel::kCharIDFieldNumber;
const int stSynUserLevel::kLvFieldNumber;
const int stSynUserLevel::kLevelupFieldNumber;
#endif  // !_MSC_VER

stSynUserLevel::stSynUserLevel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynUserLevel::InitAsDefaultInstance() {
}

stSynUserLevel::stSynUserLevel(const stSynUserLevel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynUserLevel::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  lv_ = 0u;
  levelup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynUserLevel::~stSynUserLevel() {
  SharedDtor();
}

void stSynUserLevel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynUserLevel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynUserLevel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserLevel_descriptor_;
}

const stSynUserLevel& stSynUserLevel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynUserLevel* stSynUserLevel::default_instance_ = NULL;

stSynUserLevel* stSynUserLevel::New() const {
  return new stSynUserLevel;
}

void stSynUserLevel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    lv_ = 0u;
    levelup_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynUserLevel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional uint32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_levelup;
        break;
      }

      // optional bool levelup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &levelup_)));
          set_has_levelup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynUserLevel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lv(), output);
  }

  // optional bool levelup = 3;
  if (has_levelup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->levelup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynUserLevel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lv(), target);
  }

  // optional bool levelup = 3;
  if (has_levelup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->levelup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynUserLevel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional bool levelup = 3;
    if (has_levelup()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynUserLevel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynUserLevel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynUserLevel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynUserLevel::MergeFrom(const stSynUserLevel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_levelup()) {
      set_levelup(from.levelup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynUserLevel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynUserLevel::CopyFrom(const stSynUserLevel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynUserLevel::IsInitialized() const {

  return true;
}

void stSynUserLevel::Swap(stSynUserLevel* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(lv_, other->lv_);
    std::swap(levelup_, other->levelup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynUserLevel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynUserLevel_descriptor_;
  metadata.reflection = stSynUserLevel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynCopymapStarNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCopymapStarNum_ProtoModID_descriptor_;
}
bool stSynCopymapStarNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynCopymapStarNum_ProtoModID stSynCopymapStarNum::ModID;
const stSynCopymapStarNum_ProtoModID stSynCopymapStarNum::ProtoModID_MIN;
const stSynCopymapStarNum_ProtoModID stSynCopymapStarNum::ProtoModID_MAX;
const int stSynCopymapStarNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynCopymapStarNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCopymapStarNum_ProtoFunID_descriptor_;
}
bool stSynCopymapStarNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynCopymapStarNum_ProtoFunID stSynCopymapStarNum::FunID;
const stSynCopymapStarNum_ProtoFunID stSynCopymapStarNum::ProtoFunID_MIN;
const stSynCopymapStarNum_ProtoFunID stSynCopymapStarNum::ProtoFunID_MAX;
const int stSynCopymapStarNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynCopymapStarNum::kCharIDFieldNumber;
const int stSynCopymapStarNum::kStarNumFieldNumber;
#endif  // !_MSC_VER

stSynCopymapStarNum::stSynCopymapStarNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynCopymapStarNum::InitAsDefaultInstance() {
}

stSynCopymapStarNum::stSynCopymapStarNum(const stSynCopymapStarNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynCopymapStarNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  starnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynCopymapStarNum::~stSynCopymapStarNum() {
  SharedDtor();
}

void stSynCopymapStarNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynCopymapStarNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynCopymapStarNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCopymapStarNum_descriptor_;
}

const stSynCopymapStarNum& stSynCopymapStarNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynCopymapStarNum* stSynCopymapStarNum::default_instance_ = NULL;

stSynCopymapStarNum* stSynCopymapStarNum::New() const {
  return new stSynCopymapStarNum;
}

void stSynCopymapStarNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    starnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynCopymapStarNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_starNum;
        break;
      }

      // optional uint32 starNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starnum_)));
          set_has_starnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynCopymapStarNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 starNum = 2;
  if (has_starnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynCopymapStarNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 starNum = 2;
  if (has_starnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynCopymapStarNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 starNum = 2;
    if (has_starnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynCopymapStarNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynCopymapStarNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynCopymapStarNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynCopymapStarNum::MergeFrom(const stSynCopymapStarNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_starnum()) {
      set_starnum(from.starnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynCopymapStarNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynCopymapStarNum::CopyFrom(const stSynCopymapStarNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynCopymapStarNum::IsInitialized() const {

  return true;
}

void stSynCopymapStarNum::Swap(stSynCopymapStarNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(starnum_, other->starnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynCopymapStarNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynCopymapStarNum_descriptor_;
  metadata.reflection = stSynCopymapStarNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynUserBattlePower_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserBattlePower_ProtoModID_descriptor_;
}
bool stSynUserBattlePower_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynUserBattlePower_ProtoModID stSynUserBattlePower::ModID;
const stSynUserBattlePower_ProtoModID stSynUserBattlePower::ProtoModID_MIN;
const stSynUserBattlePower_ProtoModID stSynUserBattlePower::ProtoModID_MAX;
const int stSynUserBattlePower::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynUserBattlePower_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserBattlePower_ProtoFunID_descriptor_;
}
bool stSynUserBattlePower_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynUserBattlePower_ProtoFunID stSynUserBattlePower::FunID;
const stSynUserBattlePower_ProtoFunID stSynUserBattlePower::ProtoFunID_MIN;
const stSynUserBattlePower_ProtoFunID stSynUserBattlePower::ProtoFunID_MAX;
const int stSynUserBattlePower::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynUserBattlePower::kCharIDFieldNumber;
const int stSynUserBattlePower::kBattlePowerFieldNumber;
const int stSynUserBattlePower::kMaxHPFieldNumber;
#endif  // !_MSC_VER

stSynUserBattlePower::stSynUserBattlePower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynUserBattlePower::InitAsDefaultInstance() {
}

stSynUserBattlePower::stSynUserBattlePower(const stSynUserBattlePower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynUserBattlePower::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  battlepower_ = 0u;
  maxhp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynUserBattlePower::~stSynUserBattlePower() {
  SharedDtor();
}

void stSynUserBattlePower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynUserBattlePower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynUserBattlePower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserBattlePower_descriptor_;
}

const stSynUserBattlePower& stSynUserBattlePower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynUserBattlePower* stSynUserBattlePower::default_instance_ = NULL;

stSynUserBattlePower* stSynUserBattlePower::New() const {
  return new stSynUserBattlePower;
}

void stSynUserBattlePower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    battlepower_ = 0u;
    maxhp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynUserBattlePower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxHP;
        break;
      }

      // optional uint32 maxHP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynUserBattlePower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 battlePower = 2;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->battlepower(), output);
  }

  // optional uint32 maxHP = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynUserBattlePower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 battlePower = 2;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->battlepower(), target);
  }

  // optional uint32 maxHP = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynUserBattlePower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 battlePower = 2;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 maxHP = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynUserBattlePower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynUserBattlePower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynUserBattlePower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynUserBattlePower::MergeFrom(const stSynUserBattlePower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynUserBattlePower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynUserBattlePower::CopyFrom(const stSynUserBattlePower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynUserBattlePower::IsInitialized() const {

  return true;
}

void stSynUserBattlePower::Swap(stSynUserBattlePower* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynUserBattlePower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynUserBattlePower_descriptor_;
  metadata.reflection = stSynUserBattlePower_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendTeamChatInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendTeamChatInfo_ProtoModID_descriptor_;
}
bool stSendTeamChatInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendTeamChatInfo_ProtoModID stSendTeamChatInfo::ModID;
const stSendTeamChatInfo_ProtoModID stSendTeamChatInfo::ProtoModID_MIN;
const stSendTeamChatInfo_ProtoModID stSendTeamChatInfo::ProtoModID_MAX;
const int stSendTeamChatInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendTeamChatInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendTeamChatInfo_ProtoFunID_descriptor_;
}
bool stSendTeamChatInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendTeamChatInfo_ProtoFunID stSendTeamChatInfo::FunID;
const stSendTeamChatInfo_ProtoFunID stSendTeamChatInfo::ProtoFunID_MIN;
const stSendTeamChatInfo_ProtoFunID stSendTeamChatInfo::ProtoFunID_MAX;
const int stSendTeamChatInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendTeamChatInfo::kCharIDFieldNumber;
const int stSendTeamChatInfo::kContentFieldNumber;
const int stSendTeamChatInfo::kVipLvFieldNumber;
const int stSendTeamChatInfo::kIsVoiceFieldNumber;
const int stSendTeamChatInfo::kVoiceUrlFieldNumber;
const int stSendTeamChatInfo::kVoiceLenghtFieldNumber;
#endif  // !_MSC_VER

stSendTeamChatInfo::stSendTeamChatInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendTeamChatInfo::InitAsDefaultInstance() {
}

stSendTeamChatInfo::stSendTeamChatInfo(const stSendTeamChatInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendTeamChatInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplv_ = 0u;
  isvoice_ = false;
  voiceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voicelenght_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendTeamChatInfo::~stSendTeamChatInfo() {
  SharedDtor();
}

void stSendTeamChatInfo::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
    delete voiceurl_;
  }
  if (this != default_instance_) {
  }
}

void stSendTeamChatInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendTeamChatInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendTeamChatInfo_descriptor_;
}

const stSendTeamChatInfo& stSendTeamChatInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSendTeamChatInfo* stSendTeamChatInfo::default_instance_ = NULL;

stSendTeamChatInfo* stSendTeamChatInfo::New() const {
  return new stSendTeamChatInfo;
}

void stSendTeamChatInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    viplv_ = 0u;
    isvoice_ = false;
    if (has_voiceurl()) {
      if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
        voiceurl_->clear();
      }
    }
    voicelenght_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendTeamChatInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isVoice;
        break;
      }

      // optional bool isVoice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVoice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvoice_)));
          set_has_isvoice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_voiceUrl;
        break;
      }

      // optional string voiceUrl = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiceUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiceurl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voiceurl().data(), this->voiceurl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_voiceLenght;
        break;
      }

      // optional uint32 voiceLenght = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voiceLenght:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &voicelenght_)));
          set_has_voicelenght();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendTeamChatInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // optional uint32 vipLv = 3;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->viplv(), output);
  }

  // optional bool isVoice = 4;
  if (has_isvoice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isvoice(), output);
  }

  // optional string voiceUrl = 5;
  if (has_voiceurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiceurl().data(), this->voiceurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->voiceurl(), output);
  }

  // optional uint32 voiceLenght = 6;
  if (has_voicelenght()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->voicelenght(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendTeamChatInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // optional uint32 vipLv = 3;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->viplv(), target);
  }

  // optional bool isVoice = 4;
  if (has_isvoice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isvoice(), target);
  }

  // optional string voiceUrl = 5;
  if (has_voiceurl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiceurl().data(), this->voiceurl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->voiceurl(), target);
  }

  // optional uint32 voiceLenght = 6;
  if (has_voicelenght()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->voicelenght(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendTeamChatInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 vipLv = 3;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional bool isVoice = 4;
    if (has_isvoice()) {
      total_size += 1 + 1;
    }

    // optional string voiceUrl = 5;
    if (has_voiceurl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiceurl());
    }

    // optional uint32 voiceLenght = 6;
    if (has_voicelenght()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->voicelenght());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendTeamChatInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendTeamChatInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendTeamChatInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendTeamChatInfo::MergeFrom(const stSendTeamChatInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_isvoice()) {
      set_isvoice(from.isvoice());
    }
    if (from.has_voiceurl()) {
      set_voiceurl(from.voiceurl());
    }
    if (from.has_voicelenght()) {
      set_voicelenght(from.voicelenght());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendTeamChatInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendTeamChatInfo::CopyFrom(const stSendTeamChatInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendTeamChatInfo::IsInitialized() const {

  return true;
}

void stSendTeamChatInfo::Swap(stSendTeamChatInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(content_, other->content_);
    std::swap(viplv_, other->viplv_);
    std::swap(isvoice_, other->isvoice_);
    std::swap(voiceurl_, other->voiceurl_);
    std::swap(voicelenght_, other->voicelenght_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendTeamChatInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendTeamChatInfo_descriptor_;
  metadata.reflection = stSendTeamChatInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stTeamLeaveCopyMap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamLeaveCopyMap_ProtoModID_descriptor_;
}
bool stTeamLeaveCopyMap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTeamLeaveCopyMap_ProtoModID stTeamLeaveCopyMap::ModID;
const stTeamLeaveCopyMap_ProtoModID stTeamLeaveCopyMap::ProtoModID_MIN;
const stTeamLeaveCopyMap_ProtoModID stTeamLeaveCopyMap::ProtoModID_MAX;
const int stTeamLeaveCopyMap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stTeamLeaveCopyMap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamLeaveCopyMap_ProtoFunID_descriptor_;
}
bool stTeamLeaveCopyMap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTeamLeaveCopyMap_ProtoFunID stTeamLeaveCopyMap::FunID;
const stTeamLeaveCopyMap_ProtoFunID stTeamLeaveCopyMap::ProtoFunID_MIN;
const stTeamLeaveCopyMap_ProtoFunID stTeamLeaveCopyMap::ProtoFunID_MAX;
const int stTeamLeaveCopyMap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stTeamLeaveCopyMap::kTeamIDFieldNumber;
#endif  // !_MSC_VER

stTeamLeaveCopyMap::stTeamLeaveCopyMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTeamLeaveCopyMap::InitAsDefaultInstance() {
}

stTeamLeaveCopyMap::stTeamLeaveCopyMap(const stTeamLeaveCopyMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTeamLeaveCopyMap::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTeamLeaveCopyMap::~stTeamLeaveCopyMap() {
  SharedDtor();
}

void stTeamLeaveCopyMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stTeamLeaveCopyMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTeamLeaveCopyMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamLeaveCopyMap_descriptor_;
}

const stTeamLeaveCopyMap& stTeamLeaveCopyMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stTeamLeaveCopyMap* stTeamLeaveCopyMap::default_instance_ = NULL;

stTeamLeaveCopyMap* stTeamLeaveCopyMap::New() const {
  return new stTeamLeaveCopyMap;
}

void stTeamLeaveCopyMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTeamLeaveCopyMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTeamLeaveCopyMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTeamLeaveCopyMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTeamLeaveCopyMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamID = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTeamLeaveCopyMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTeamLeaveCopyMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTeamLeaveCopyMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTeamLeaveCopyMap::MergeFrom(const stTeamLeaveCopyMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTeamLeaveCopyMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTeamLeaveCopyMap::CopyFrom(const stTeamLeaveCopyMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTeamLeaveCopyMap::IsInitialized() const {

  return true;
}

void stTeamLeaveCopyMap::Swap(stTeamLeaveCopyMap* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTeamLeaveCopyMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTeamLeaveCopyMap_descriptor_;
  metadata.reflection = stTeamLeaveCopyMap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stTreasureCombine_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTreasureCombine_ProtoModID_descriptor_;
}
bool stTreasureCombine_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTreasureCombine_ProtoModID stTreasureCombine::ModID;
const stTreasureCombine_ProtoModID stTreasureCombine::ProtoModID_MIN;
const stTreasureCombine_ProtoModID stTreasureCombine::ProtoModID_MAX;
const int stTreasureCombine::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stTreasureCombine_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTreasureCombine_ProtoFunID_descriptor_;
}
bool stTreasureCombine_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTreasureCombine_ProtoFunID stTreasureCombine::FunID;
const stTreasureCombine_ProtoFunID stTreasureCombine::ProtoFunID_MIN;
const stTreasureCombine_ProtoFunID stTreasureCombine::ProtoFunID_MAX;
const int stTreasureCombine::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stTreasureCombine::kCharIDFieldNumber;
const int stTreasureCombine::kCombineTypeFieldNumber;
#endif  // !_MSC_VER

stTreasureCombine::stTreasureCombine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTreasureCombine::InitAsDefaultInstance() {
}

stTreasureCombine::stTreasureCombine(const stTreasureCombine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTreasureCombine::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  combinetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTreasureCombine::~stTreasureCombine() {
  SharedDtor();
}

void stTreasureCombine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stTreasureCombine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTreasureCombine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTreasureCombine_descriptor_;
}

const stTreasureCombine& stTreasureCombine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stTreasureCombine* stTreasureCombine::default_instance_ = NULL;

stTreasureCombine* stTreasureCombine::New() const {
  return new stTreasureCombine;
}

void stTreasureCombine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    combinetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTreasureCombine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_combineType;
        break;
      }

      // optional uint32 combineType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combineType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combinetype_)));
          set_has_combinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTreasureCombine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 combineType = 2;
  if (has_combinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->combinetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTreasureCombine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 combineType = 2;
  if (has_combinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->combinetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTreasureCombine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 combineType = 2;
    if (has_combinetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combinetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTreasureCombine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTreasureCombine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTreasureCombine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTreasureCombine::MergeFrom(const stTreasureCombine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_combinetype()) {
      set_combinetype(from.combinetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTreasureCombine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTreasureCombine::CopyFrom(const stTreasureCombine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTreasureCombine::IsInitialized() const {

  return true;
}

void stTreasureCombine::Swap(stTreasureCombine* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(combinetype_, other->combinetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTreasureCombine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTreasureCombine_descriptor_;
  metadata.reflection = stTreasureCombine_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stTreasureCombineSuccess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTreasureCombineSuccess_ProtoModID_descriptor_;
}
bool stTreasureCombineSuccess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTreasureCombineSuccess_ProtoModID stTreasureCombineSuccess::ModID;
const stTreasureCombineSuccess_ProtoModID stTreasureCombineSuccess::ProtoModID_MIN;
const stTreasureCombineSuccess_ProtoModID stTreasureCombineSuccess::ProtoModID_MAX;
const int stTreasureCombineSuccess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stTreasureCombineSuccess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTreasureCombineSuccess_ProtoFunID_descriptor_;
}
bool stTreasureCombineSuccess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTreasureCombineSuccess_ProtoFunID stTreasureCombineSuccess::FunID;
const stTreasureCombineSuccess_ProtoFunID stTreasureCombineSuccess::ProtoFunID_MIN;
const stTreasureCombineSuccess_ProtoFunID stTreasureCombineSuccess::ProtoFunID_MAX;
const int stTreasureCombineSuccess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stTreasureCombineSuccess::kCharIDFieldNumber;
const int stTreasureCombineSuccess::kItemIDFieldNumber;
#endif  // !_MSC_VER

stTreasureCombineSuccess::stTreasureCombineSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTreasureCombineSuccess::InitAsDefaultInstance() {
}

stTreasureCombineSuccess::stTreasureCombineSuccess(const stTreasureCombineSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTreasureCombineSuccess::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTreasureCombineSuccess::~stTreasureCombineSuccess() {
  SharedDtor();
}

void stTreasureCombineSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stTreasureCombineSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTreasureCombineSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTreasureCombineSuccess_descriptor_;
}

const stTreasureCombineSuccess& stTreasureCombineSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stTreasureCombineSuccess* stTreasureCombineSuccess::default_instance_ = NULL;

stTreasureCombineSuccess* stTreasureCombineSuccess::New() const {
  return new stTreasureCombineSuccess;
}

void stTreasureCombineSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTreasureCombineSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTreasureCombineSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTreasureCombineSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTreasureCombineSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 itemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTreasureCombineSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTreasureCombineSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTreasureCombineSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTreasureCombineSuccess::MergeFrom(const stTreasureCombineSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTreasureCombineSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTreasureCombineSuccess::CopyFrom(const stTreasureCombineSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTreasureCombineSuccess::IsInitialized() const {

  return true;
}

void stTreasureCombineSuccess::Swap(stTreasureCombineSuccess* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTreasureCombineSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTreasureCombineSuccess_descriptor_;
  metadata.reflection = stTreasureCombineSuccess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBuyPeaceModubleTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModubleTime_ProtoModID_descriptor_;
}
bool stBuyPeaceModubleTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyPeaceModubleTime_ProtoModID stBuyPeaceModubleTime::ModID;
const stBuyPeaceModubleTime_ProtoModID stBuyPeaceModubleTime::ProtoModID_MIN;
const stBuyPeaceModubleTime_ProtoModID stBuyPeaceModubleTime::ProtoModID_MAX;
const int stBuyPeaceModubleTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBuyPeaceModubleTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModubleTime_ProtoFunID_descriptor_;
}
bool stBuyPeaceModubleTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBuyPeaceModubleTime_ProtoFunID stBuyPeaceModubleTime::FunID;
const stBuyPeaceModubleTime_ProtoFunID stBuyPeaceModubleTime::ProtoFunID_MIN;
const stBuyPeaceModubleTime_ProtoFunID stBuyPeaceModubleTime::ProtoFunID_MAX;
const int stBuyPeaceModubleTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBuyPeaceModubleTime::kCharIDFieldNumber;
const int stBuyPeaceModubleTime::kAddTimeFieldNumber;
#endif  // !_MSC_VER

stBuyPeaceModubleTime::stBuyPeaceModubleTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBuyPeaceModubleTime::InitAsDefaultInstance() {
}

stBuyPeaceModubleTime::stBuyPeaceModubleTime(const stBuyPeaceModubleTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBuyPeaceModubleTime::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  addtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBuyPeaceModubleTime::~stBuyPeaceModubleTime() {
  SharedDtor();
}

void stBuyPeaceModubleTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBuyPeaceModubleTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBuyPeaceModubleTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBuyPeaceModubleTime_descriptor_;
}

const stBuyPeaceModubleTime& stBuyPeaceModubleTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stBuyPeaceModubleTime* stBuyPeaceModubleTime::default_instance_ = NULL;

stBuyPeaceModubleTime* stBuyPeaceModubleTime::New() const {
  return new stBuyPeaceModubleTime;
}

void stBuyPeaceModubleTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    addtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBuyPeaceModubleTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addTime;
        break;
      }

      // optional uint32 addTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addtime_)));
          set_has_addtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBuyPeaceModubleTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 addTime = 2;
  if (has_addtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->addtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBuyPeaceModubleTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 addTime = 2;
  if (has_addtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->addtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBuyPeaceModubleTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 addTime = 2;
    if (has_addtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBuyPeaceModubleTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBuyPeaceModubleTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBuyPeaceModubleTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBuyPeaceModubleTime::MergeFrom(const stBuyPeaceModubleTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_addtime()) {
      set_addtime(from.addtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBuyPeaceModubleTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBuyPeaceModubleTime::CopyFrom(const stBuyPeaceModubleTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBuyPeaceModubleTime::IsInitialized() const {

  return true;
}

void stBuyPeaceModubleTime::Swap(stBuyPeaceModubleTime* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(addtime_, other->addtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBuyPeaceModubleTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBuyPeaceModubleTime_descriptor_;
  metadata.reflection = stBuyPeaceModubleTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqChangeGameSvr_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeGameSvr_ProtoModID_descriptor_;
}
bool stReqChangeGameSvr_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChangeGameSvr_ProtoModID stReqChangeGameSvr::ModID;
const stReqChangeGameSvr_ProtoModID stReqChangeGameSvr::ProtoModID_MIN;
const stReqChangeGameSvr_ProtoModID stReqChangeGameSvr::ProtoModID_MAX;
const int stReqChangeGameSvr::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChangeGameSvr_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeGameSvr_ProtoFunID_descriptor_;
}
bool stReqChangeGameSvr_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChangeGameSvr_ProtoFunID stReqChangeGameSvr::FunID;
const stReqChangeGameSvr_ProtoFunID stReqChangeGameSvr::ProtoFunID_MIN;
const stReqChangeGameSvr_ProtoFunID stReqChangeGameSvr::ProtoFunID_MAX;
const int stReqChangeGameSvr::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqChangeGameSvr::kCharIDFieldNumber;
const int stReqChangeGameSvr::kGameSvrIDFieldNumber;
#endif  // !_MSC_VER

stReqChangeGameSvr::stReqChangeGameSvr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqChangeGameSvr::InitAsDefaultInstance() {
}

stReqChangeGameSvr::stReqChangeGameSvr(const stReqChangeGameSvr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqChangeGameSvr::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  gamesvrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqChangeGameSvr::~stReqChangeGameSvr() {
  SharedDtor();
}

void stReqChangeGameSvr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqChangeGameSvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqChangeGameSvr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeGameSvr_descriptor_;
}

const stReqChangeGameSvr& stReqChangeGameSvr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqChangeGameSvr* stReqChangeGameSvr::default_instance_ = NULL;

stReqChangeGameSvr* stReqChangeGameSvr::New() const {
  return new stReqChangeGameSvr;
}

void stReqChangeGameSvr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    gamesvrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqChangeGameSvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameSvrID;
        break;
      }

      // optional uint32 gameSvrID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameSvrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamesvrid_)));
          set_has_gamesvrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqChangeGameSvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 gameSvrID = 2;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gamesvrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqChangeGameSvr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 gameSvrID = 2;
  if (has_gamesvrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gamesvrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqChangeGameSvr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 gameSvrID = 2;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamesvrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqChangeGameSvr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqChangeGameSvr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqChangeGameSvr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqChangeGameSvr::MergeFrom(const stReqChangeGameSvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqChangeGameSvr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqChangeGameSvr::CopyFrom(const stReqChangeGameSvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqChangeGameSvr::IsInitialized() const {

  return true;
}

void stReqChangeGameSvr::Swap(stReqChangeGameSvr* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqChangeGameSvr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqChangeGameSvr_descriptor_;
  metadata.reflection = stReqChangeGameSvr_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stConfirmChangeGameSvr_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stConfirmChangeGameSvr_ProtoModID_descriptor_;
}
bool stConfirmChangeGameSvr_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stConfirmChangeGameSvr_ProtoModID stConfirmChangeGameSvr::ModID;
const stConfirmChangeGameSvr_ProtoModID stConfirmChangeGameSvr::ProtoModID_MIN;
const stConfirmChangeGameSvr_ProtoModID stConfirmChangeGameSvr::ProtoModID_MAX;
const int stConfirmChangeGameSvr::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stConfirmChangeGameSvr_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stConfirmChangeGameSvr_ProtoFunID_descriptor_;
}
bool stConfirmChangeGameSvr_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stConfirmChangeGameSvr_ProtoFunID stConfirmChangeGameSvr::FunID;
const stConfirmChangeGameSvr_ProtoFunID stConfirmChangeGameSvr::ProtoFunID_MIN;
const stConfirmChangeGameSvr_ProtoFunID stConfirmChangeGameSvr::ProtoFunID_MAX;
const int stConfirmChangeGameSvr::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stConfirmChangeGameSvr::kCharIDFieldNumber;
const int stConfirmChangeGameSvr::kGameSvrIDFieldNumber;
#endif  // !_MSC_VER

stConfirmChangeGameSvr::stConfirmChangeGameSvr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stConfirmChangeGameSvr::InitAsDefaultInstance() {
}

stConfirmChangeGameSvr::stConfirmChangeGameSvr(const stConfirmChangeGameSvr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stConfirmChangeGameSvr::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  gamesvrid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stConfirmChangeGameSvr::~stConfirmChangeGameSvr() {
  SharedDtor();
}

void stConfirmChangeGameSvr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stConfirmChangeGameSvr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stConfirmChangeGameSvr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stConfirmChangeGameSvr_descriptor_;
}

const stConfirmChangeGameSvr& stConfirmChangeGameSvr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stConfirmChangeGameSvr* stConfirmChangeGameSvr::default_instance_ = NULL;

stConfirmChangeGameSvr* stConfirmChangeGameSvr::New() const {
  return new stConfirmChangeGameSvr;
}

void stConfirmChangeGameSvr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    gamesvrid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stConfirmChangeGameSvr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gameSvrID;
        break;
      }

      // optional uint32 gameSvrID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameSvrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gamesvrid_)));
          set_has_gamesvrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stConfirmChangeGameSvr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 gameSvrID = 2;
  if (has_gamesvrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gamesvrid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stConfirmChangeGameSvr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 gameSvrID = 2;
  if (has_gamesvrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gamesvrid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stConfirmChangeGameSvr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 gameSvrID = 2;
    if (has_gamesvrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gamesvrid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stConfirmChangeGameSvr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stConfirmChangeGameSvr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stConfirmChangeGameSvr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stConfirmChangeGameSvr::MergeFrom(const stConfirmChangeGameSvr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gamesvrid()) {
      set_gamesvrid(from.gamesvrid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stConfirmChangeGameSvr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stConfirmChangeGameSvr::CopyFrom(const stConfirmChangeGameSvr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stConfirmChangeGameSvr::IsInitialized() const {

  return true;
}

void stConfirmChangeGameSvr::Swap(stConfirmChangeGameSvr* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(gamesvrid_, other->gamesvrid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stConfirmChangeGameSvr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stConfirmChangeGameSvr_descriptor_;
  metadata.reflection = stConfirmChangeGameSvr_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetOtherUserData2Me_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOtherUserData2Me_ProtoModID_descriptor_;
}
bool stRetOtherUserData2Me_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOtherUserData2Me_ProtoModID stRetOtherUserData2Me::ModID;
const stRetOtherUserData2Me_ProtoModID stRetOtherUserData2Me::ProtoModID_MIN;
const stRetOtherUserData2Me_ProtoModID stRetOtherUserData2Me::ProtoModID_MAX;
const int stRetOtherUserData2Me::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetOtherUserData2Me_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOtherUserData2Me_ProtoFunID_descriptor_;
}
bool stRetOtherUserData2Me_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetOtherUserData2Me_ProtoFunID stRetOtherUserData2Me::FunID;
const stRetOtherUserData2Me_ProtoFunID stRetOtherUserData2Me::ProtoFunID_MIN;
const stRetOtherUserData2Me_ProtoFunID stRetOtherUserData2Me::ProtoFunID_MAX;
const int stRetOtherUserData2Me::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetOtherUserData2Me::kMyCharIDFieldNumber;
const int stRetOtherUserData2Me::kOtherCharIDFieldNumber;
const int stRetOtherUserData2Me::kIsRobotFieldNumber;
const int stRetOtherUserData2Me::kDataSizeFieldNumber;
const int stRetOtherUserData2Me::kDataFieldNumber;
const int stRetOtherUserData2Me::kGuildNameFieldNumber;
#endif  // !_MSC_VER

stRetOtherUserData2Me::stRetOtherUserData2Me()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetOtherUserData2Me::InitAsDefaultInstance() {
}

stRetOtherUserData2Me::stRetOtherUserData2Me(const stRetOtherUserData2Me& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetOtherUserData2Me::SharedCtor() {
  _cached_size_ = 0;
  mycharid_ = 0u;
  othercharid_ = 0u;
  isrobot_ = false;
  datasize_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetOtherUserData2Me::~stRetOtherUserData2Me() {
  SharedDtor();
}

void stRetOtherUserData2Me::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void stRetOtherUserData2Me::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetOtherUserData2Me::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetOtherUserData2Me_descriptor_;
}

const stRetOtherUserData2Me& stRetOtherUserData2Me::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetOtherUserData2Me* stRetOtherUserData2Me::default_instance_ = NULL;

stRetOtherUserData2Me* stRetOtherUserData2Me::New() const {
  return new stRetOtherUserData2Me;
}

void stRetOtherUserData2Me::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mycharid_ = 0u;
    othercharid_ = 0u;
    isrobot_ = false;
    datasize_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetOtherUserData2Me::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 myCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_otherCharID;
        break;
      }

      // optional uint32 otherCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otherCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othercharid_)));
          set_has_othercharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isRobot;
        break;
      }

      // optional bool isRobot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isRobot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrobot_)));
          set_has_isrobot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dataSize;
        break;
      }

      // optional uint32 dataSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guildName;
        break;
      }

      // optional string guildName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetOtherUserData2Me::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 myCharID = 1;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mycharid(), output);
  }

  // optional uint32 otherCharID = 2;
  if (has_othercharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othercharid(), output);
  }

  // optional bool isRobot = 3;
  if (has_isrobot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isrobot(), output);
  }

  // optional uint32 dataSize = 4;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->datasize(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  // optional string guildName = 6;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetOtherUserData2Me::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 myCharID = 1;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mycharid(), target);
  }

  // optional uint32 otherCharID = 2;
  if (has_othercharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othercharid(), target);
  }

  // optional bool isRobot = 3;
  if (has_isrobot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isrobot(), target);
  }

  // optional uint32 dataSize = 4;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->datasize(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional string guildName = 6;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetOtherUserData2Me::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 myCharID = 1;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mycharid());
    }

    // optional uint32 otherCharID = 2;
    if (has_othercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othercharid());
    }

    // optional bool isRobot = 3;
    if (has_isrobot()) {
      total_size += 1 + 1;
    }

    // optional uint32 dataSize = 4;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datasize());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string guildName = 6;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetOtherUserData2Me::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetOtherUserData2Me* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetOtherUserData2Me*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetOtherUserData2Me::MergeFrom(const stRetOtherUserData2Me& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_othercharid()) {
      set_othercharid(from.othercharid());
    }
    if (from.has_isrobot()) {
      set_isrobot(from.isrobot());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetOtherUserData2Me::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetOtherUserData2Me::CopyFrom(const stRetOtherUserData2Me& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetOtherUserData2Me::IsInitialized() const {

  return true;
}

void stRetOtherUserData2Me::Swap(stRetOtherUserData2Me* other) {
  if (other != this) {
    std::swap(mycharid_, other->mycharid_);
    std::swap(othercharid_, other->othercharid_);
    std::swap(isrobot_, other->isrobot_);
    std::swap(datasize_, other->datasize_);
    std::swap(data_, other->data_);
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetOtherUserData2Me::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetOtherUserData2Me_descriptor_;
  metadata.reflection = stRetOtherUserData2Me_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stMailAttach::kItemIDFieldNumber;
const int stMailAttach::kNumFieldNumber;
#endif  // !_MSC_VER

stMailAttach::stMailAttach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMailAttach::InitAsDefaultInstance() {
}

stMailAttach::stMailAttach(const stMailAttach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMailAttach::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMailAttach::~stMailAttach() {
  SharedDtor();
}

void stMailAttach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMailAttach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMailAttach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMailAttach_descriptor_;
}

const stMailAttach& stMailAttach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stMailAttach* stMailAttach::default_instance_ = NULL;

stMailAttach* stMailAttach::New() const {
  return new stMailAttach;
}

void stMailAttach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMailAttach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMailAttach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMailAttach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMailAttach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMailAttach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMailAttach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMailAttach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMailAttach::MergeFrom(const stMailAttach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMailAttach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMailAttach::CopyFrom(const stMailAttach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMailAttach::IsInitialized() const {

  return true;
}

void stMailAttach::Swap(stMailAttach* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMailAttach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMailAttach_descriptor_;
  metadata.reflection = stMailAttach_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stObtainItemFromMail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainItemFromMail_ProtoModID_descriptor_;
}
bool stObtainItemFromMail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stObtainItemFromMail_ProtoModID stObtainItemFromMail::ModID;
const stObtainItemFromMail_ProtoModID stObtainItemFromMail::ProtoModID_MIN;
const stObtainItemFromMail_ProtoModID stObtainItemFromMail::ProtoModID_MAX;
const int stObtainItemFromMail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stObtainItemFromMail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainItemFromMail_ProtoFunID_descriptor_;
}
bool stObtainItemFromMail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stObtainItemFromMail_ProtoFunID stObtainItemFromMail::FunID;
const stObtainItemFromMail_ProtoFunID stObtainItemFromMail::ProtoFunID_MIN;
const stObtainItemFromMail_ProtoFunID stObtainItemFromMail::ProtoFunID_MAX;
const int stObtainItemFromMail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stObtainItemFromMail::kAttachsFieldNumber;
const int stObtainItemFromMail::kCharIDFieldNumber;
#endif  // !_MSC_VER

stObtainItemFromMail::stObtainItemFromMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stObtainItemFromMail::InitAsDefaultInstance() {
}

stObtainItemFromMail::stObtainItemFromMail(const stObtainItemFromMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stObtainItemFromMail::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stObtainItemFromMail::~stObtainItemFromMail() {
  SharedDtor();
}

void stObtainItemFromMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stObtainItemFromMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stObtainItemFromMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stObtainItemFromMail_descriptor_;
}

const stObtainItemFromMail& stObtainItemFromMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stObtainItemFromMail* stObtainItemFromMail::default_instance_ = NULL;

stObtainItemFromMail* stObtainItemFromMail::New() const {
  return new stObtainItemFromMail;
}

void stObtainItemFromMail::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    charid_ = 0u;
  }
  attachs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stObtainItemFromMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stMailAttach attachs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attachs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attachs;
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stObtainItemFromMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stMailAttach attachs = 1;
  for (int i = 0; i < this->attachs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attachs(i), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stObtainItemFromMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stMailAttach attachs = 1;
  for (int i = 0; i < this->attachs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attachs(i), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stObtainItemFromMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .Global.stMailAttach attachs = 1;
  total_size += 1 * this->attachs_size();
  for (int i = 0; i < this->attachs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attachs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stObtainItemFromMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stObtainItemFromMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stObtainItemFromMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stObtainItemFromMail::MergeFrom(const stObtainItemFromMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  attachs_.MergeFrom(from.attachs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stObtainItemFromMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stObtainItemFromMail::CopyFrom(const stObtainItemFromMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stObtainItemFromMail::IsInitialized() const {

  return true;
}

void stObtainItemFromMail::Swap(stObtainItemFromMail* other) {
  if (other != this) {
    attachs_.Swap(&other->attachs_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stObtainItemFromMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stObtainItemFromMail_descriptor_;
  metadata.reflection = stObtainItemFromMail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynAddTreasure_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAddTreasure_ProtoModID_descriptor_;
}
bool stSynAddTreasure_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAddTreasure_ProtoModID stSynAddTreasure::ModID;
const stSynAddTreasure_ProtoModID stSynAddTreasure::ProtoModID_MIN;
const stSynAddTreasure_ProtoModID stSynAddTreasure::ProtoModID_MAX;
const int stSynAddTreasure::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynAddTreasure_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAddTreasure_ProtoFunID_descriptor_;
}
bool stSynAddTreasure_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAddTreasure_ProtoFunID stSynAddTreasure::FunID;
const stSynAddTreasure_ProtoFunID stSynAddTreasure::ProtoFunID_MIN;
const stSynAddTreasure_ProtoFunID stSynAddTreasure::ProtoFunID_MAX;
const int stSynAddTreasure::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynAddTreasure::kResIDFieldNumber;
const int stSynAddTreasure::kNumFieldNumber;
const int stSynAddTreasure::kCharIDFieldNumber;
#endif  // !_MSC_VER

stSynAddTreasure::stSynAddTreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynAddTreasure::InitAsDefaultInstance() {
}

stSynAddTreasure::stSynAddTreasure(const stSynAddTreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynAddTreasure::SharedCtor() {
  _cached_size_ = 0;
  resid_ = 0u;
  num_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynAddTreasure::~stSynAddTreasure() {
  SharedDtor();
}

void stSynAddTreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynAddTreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynAddTreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAddTreasure_descriptor_;
}

const stSynAddTreasure& stSynAddTreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynAddTreasure* stSynAddTreasure::default_instance_ = NULL;

stSynAddTreasure* stSynAddTreasure::New() const {
  return new stSynAddTreasure;
}

void stSynAddTreasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resid_ = 0u;
    num_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynAddTreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 resID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
          set_has_resid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynAddTreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 resID = 1;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->resid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynAddTreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 resID = 1;
  if (has_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->resid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynAddTreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 resID = 1;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynAddTreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynAddTreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynAddTreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynAddTreasure::MergeFrom(const stSynAddTreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynAddTreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynAddTreasure::CopyFrom(const stSynAddTreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynAddTreasure::IsInitialized() const {

  return true;
}

void stSynAddTreasure::Swap(stSynAddTreasure* other) {
  if (other != this) {
    std::swap(resid_, other->resid_);
    std::swap(num_, other->num_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynAddTreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynAddTreasure_descriptor_;
  metadata.reflection = stSynAddTreasure_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBeginPKWithOther_ePKType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginPKWithOther_ePKType_descriptor_;
}
bool stBeginPKWithOther_ePKType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginPKWithOther_ePKType stBeginPKWithOther::eArena_PK;
const stBeginPKWithOther_ePKType stBeginPKWithOther::eLeitai_PK;
const stBeginPKWithOther_ePKType stBeginPKWithOther::eIntercept_PK;
const stBeginPKWithOther_ePKType stBeginPKWithOther::ePKType_MIN;
const stBeginPKWithOther_ePKType stBeginPKWithOther::ePKType_MAX;
const int stBeginPKWithOther::ePKType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBeginPKWithOther_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginPKWithOther_ProtoModID_descriptor_;
}
bool stBeginPKWithOther_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginPKWithOther_ProtoModID stBeginPKWithOther::ModID;
const stBeginPKWithOther_ProtoModID stBeginPKWithOther::ProtoModID_MIN;
const stBeginPKWithOther_ProtoModID stBeginPKWithOther::ProtoModID_MAX;
const int stBeginPKWithOther::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBeginPKWithOther_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginPKWithOther_ProtoFunID_descriptor_;
}
bool stBeginPKWithOther_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBeginPKWithOther_ProtoFunID stBeginPKWithOther::FunID;
const stBeginPKWithOther_ProtoFunID stBeginPKWithOther::ProtoFunID_MIN;
const stBeginPKWithOther_ProtoFunID stBeginPKWithOther::ProtoFunID_MAX;
const int stBeginPKWithOther::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBeginPKWithOther::kMyCharIDFieldNumber;
const int stBeginPKWithOther::kOtherCharIDFieldNumber;
const int stBeginPKWithOther::kDataSizeFieldNumber;
const int stBeginPKWithOther::kDataFieldNumber;
const int stBeginPKWithOther::kTypeFieldNumber;
const int stBeginPKWithOther::kChallengeRankFieldNumber;
const int stBeginPKWithOther::kRobotIDFieldNumber;
#endif  // !_MSC_VER

stBeginPKWithOther::stBeginPKWithOther()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBeginPKWithOther::InitAsDefaultInstance() {
}

stBeginPKWithOther::stBeginPKWithOther(const stBeginPKWithOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBeginPKWithOther::SharedCtor() {
  _cached_size_ = 0;
  mycharid_ = 0u;
  othercharid_ = 0u;
  datasize_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 1;
  challengerank_ = 0u;
  robotid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBeginPKWithOther::~stBeginPKWithOther() {
  SharedDtor();
}

void stBeginPKWithOther::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stBeginPKWithOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBeginPKWithOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBeginPKWithOther_descriptor_;
}

const stBeginPKWithOther& stBeginPKWithOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stBeginPKWithOther* stBeginPKWithOther::default_instance_ = NULL;

stBeginPKWithOther* stBeginPKWithOther::New() const {
  return new stBeginPKWithOther;
}

void stBeginPKWithOther::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mycharid_ = 0u;
    othercharid_ = 0u;
    datasize_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    type_ = 1;
    challengerank_ = 0u;
    robotid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBeginPKWithOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 myCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_otherCharID;
        break;
      }

      // optional uint32 otherCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otherCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &othercharid_)));
          set_has_othercharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dataSize;
        break;
      }

      // optional uint32 dataSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .Global.stBeginPKWithOther.ePKType type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::stBeginPKWithOther_ePKType_IsValid(value)) {
            set_type(static_cast< ::Global::stBeginPKWithOther_ePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_challengeRank;
        break;
      }

      // optional uint32 challengeRank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengerank_)));
          set_has_challengerank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_robotID;
        break;
      }

      // optional uint32 robotID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robotid_)));
          set_has_robotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBeginPKWithOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 myCharID = 1;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mycharid(), output);
  }

  // optional uint32 otherCharID = 2;
  if (has_othercharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->othercharid(), output);
  }

  // optional uint32 dataSize = 3;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->datasize(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  // optional .Global.stBeginPKWithOther.ePKType type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional uint32 challengeRank = 6;
  if (has_challengerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->challengerank(), output);
  }

  // optional uint32 robotID = 7;
  if (has_robotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->robotid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBeginPKWithOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 myCharID = 1;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mycharid(), target);
  }

  // optional uint32 otherCharID = 2;
  if (has_othercharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->othercharid(), target);
  }

  // optional uint32 dataSize = 3;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->datasize(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional .Global.stBeginPKWithOther.ePKType type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional uint32 challengeRank = 6;
  if (has_challengerank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->challengerank(), target);
  }

  // optional uint32 robotID = 7;
  if (has_robotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->robotid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBeginPKWithOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 myCharID = 1;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mycharid());
    }

    // optional uint32 otherCharID = 2;
    if (has_othercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->othercharid());
    }

    // optional uint32 dataSize = 3;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datasize());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional .Global.stBeginPKWithOther.ePKType type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 challengeRank = 6;
    if (has_challengerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengerank());
    }

    // optional uint32 robotID = 7;
    if (has_robotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robotid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBeginPKWithOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBeginPKWithOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBeginPKWithOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBeginPKWithOther::MergeFrom(const stBeginPKWithOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_othercharid()) {
      set_othercharid(from.othercharid());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_challengerank()) {
      set_challengerank(from.challengerank());
    }
    if (from.has_robotid()) {
      set_robotid(from.robotid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBeginPKWithOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBeginPKWithOther::CopyFrom(const stBeginPKWithOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBeginPKWithOther::IsInitialized() const {

  return true;
}

void stBeginPKWithOther::Swap(stBeginPKWithOther* other) {
  if (other != this) {
    std::swap(mycharid_, other->mycharid_);
    std::swap(othercharid_, other->othercharid_);
    std::swap(datasize_, other->datasize_);
    std::swap(data_, other->data_);
    std::swap(type_, other->type_);
    std::swap(challengerank_, other->challengerank_);
    std::swap(robotid_, other->robotid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBeginPKWithOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBeginPKWithOther_descriptor_;
  metadata.reflection = stBeginPKWithOther_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserLeitaiChallenge_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLeitaiChallenge_ProtoModID_descriptor_;
}
bool stUserLeitaiChallenge_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLeitaiChallenge_ProtoModID stUserLeitaiChallenge::ModID;
const stUserLeitaiChallenge_ProtoModID stUserLeitaiChallenge::ProtoModID_MIN;
const stUserLeitaiChallenge_ProtoModID stUserLeitaiChallenge::ProtoModID_MAX;
const int stUserLeitaiChallenge::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserLeitaiChallenge_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLeitaiChallenge_ProtoFunID_descriptor_;
}
bool stUserLeitaiChallenge_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLeitaiChallenge_ProtoFunID stUserLeitaiChallenge::FunID;
const stUserLeitaiChallenge_ProtoFunID stUserLeitaiChallenge::ProtoFunID_MIN;
const stUserLeitaiChallenge_ProtoFunID stUserLeitaiChallenge::ProtoFunID_MAX;
const int stUserLeitaiChallenge::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserLeitaiChallenge::kRoundFieldNumber;
const int stUserLeitaiChallenge::kCharIDFieldNumber;
const int stUserLeitaiChallenge::kModeFieldNumber;
const int stUserLeitaiChallenge::kChallengeCharIDFieldNumber;
#endif  // !_MSC_VER

stUserLeitaiChallenge::stUserLeitaiChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserLeitaiChallenge::InitAsDefaultInstance() {
}

stUserLeitaiChallenge::stUserLeitaiChallenge(const stUserLeitaiChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserLeitaiChallenge::SharedCtor() {
  _cached_size_ = 0;
  round_ = 0u;
  charid_ = 0u;
  mode_ = 0u;
  challengecharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserLeitaiChallenge::~stUserLeitaiChallenge() {
  SharedDtor();
}

void stUserLeitaiChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserLeitaiChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserLeitaiChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLeitaiChallenge_descriptor_;
}

const stUserLeitaiChallenge& stUserLeitaiChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUserLeitaiChallenge* stUserLeitaiChallenge::default_instance_ = NULL;

stUserLeitaiChallenge* stUserLeitaiChallenge::New() const {
  return new stUserLeitaiChallenge;
}

void stUserLeitaiChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    round_ = 0u;
    charid_ = 0u;
    mode_ = 0u;
    challengecharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserLeitaiChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 round = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
          set_has_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mode;
        break;
      }

      // optional uint32 mode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_challengeCharID;
        break;
      }

      // optional uint32 challengeCharID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengecharid_)));
          set_has_challengecharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserLeitaiChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 round = 1;
  if (has_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->round(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 mode = 3;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->mode(), output);
  }

  // optional uint32 challengeCharID = 4;
  if (has_challengecharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->challengecharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserLeitaiChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 round = 1;
  if (has_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->round(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 mode = 3;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->mode(), target);
  }

  // optional uint32 challengeCharID = 4;
  if (has_challengecharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->challengecharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserLeitaiChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 round = 1;
    if (has_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 mode = 3;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mode());
    }

    // optional uint32 challengeCharID = 4;
    if (has_challengecharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengecharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserLeitaiChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserLeitaiChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserLeitaiChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserLeitaiChallenge::MergeFrom(const stUserLeitaiChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_round()) {
      set_round(from.round());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_challengecharid()) {
      set_challengecharid(from.challengecharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserLeitaiChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserLeitaiChallenge::CopyFrom(const stUserLeitaiChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserLeitaiChallenge::IsInitialized() const {

  return true;
}

void stUserLeitaiChallenge::Swap(stUserLeitaiChallenge* other) {
  if (other != this) {
    std::swap(round_, other->round_);
    std::swap(charid_, other->charid_);
    std::swap(mode_, other->mode_);
    std::swap(challengecharid_, other->challengecharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserLeitaiChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserLeitaiChallenge_descriptor_;
  metadata.reflection = stUserLeitaiChallenge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stArenaPKResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stArenaPKResult_ProtoModID_descriptor_;
}
bool stArenaPKResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stArenaPKResult_ProtoModID stArenaPKResult::ModID;
const stArenaPKResult_ProtoModID stArenaPKResult::ProtoModID_MIN;
const stArenaPKResult_ProtoModID stArenaPKResult::ProtoModID_MAX;
const int stArenaPKResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stArenaPKResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stArenaPKResult_ProtoFunID_descriptor_;
}
bool stArenaPKResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stArenaPKResult_ProtoFunID stArenaPKResult::FunID;
const stArenaPKResult_ProtoFunID stArenaPKResult::ProtoFunID_MIN;
const stArenaPKResult_ProtoFunID stArenaPKResult::ProtoFunID_MAX;
const int stArenaPKResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stArenaPKResult::kCharIDFieldNumber;
const int stArenaPKResult::kWinFieldNumber;
const int stArenaPKResult::kRankFieldNumber;
const int stArenaPKResult::kHistoryRankFieldNumber;
#endif  // !_MSC_VER

stArenaPKResult::stArenaPKResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stArenaPKResult::InitAsDefaultInstance() {
}

stArenaPKResult::stArenaPKResult(const stArenaPKResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stArenaPKResult::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  win_ = false;
  rank_ = 0u;
  historyrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stArenaPKResult::~stArenaPKResult() {
  SharedDtor();
}

void stArenaPKResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stArenaPKResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stArenaPKResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stArenaPKResult_descriptor_;
}

const stArenaPKResult& stArenaPKResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stArenaPKResult* stArenaPKResult::default_instance_ = NULL;

stArenaPKResult* stArenaPKResult::New() const {
  return new stArenaPKResult;
}

void stArenaPKResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    win_ = false;
    rank_ = 0u;
    historyrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stArenaPKResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // optional bool win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_historyRank;
        break;
      }

      // optional uint32 historyRank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &historyrank_)));
          set_has_historyrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stArenaPKResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional bool win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->win(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 historyRank = 4;
  if (has_historyrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->historyrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stArenaPKResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional bool win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->win(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 historyRank = 4;
  if (has_historyrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->historyrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stArenaPKResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool win = 2;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 historyRank = 4;
    if (has_historyrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->historyrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stArenaPKResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stArenaPKResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stArenaPKResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stArenaPKResult::MergeFrom(const stArenaPKResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_historyrank()) {
      set_historyrank(from.historyrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stArenaPKResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stArenaPKResult::CopyFrom(const stArenaPKResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stArenaPKResult::IsInitialized() const {

  return true;
}

void stArenaPKResult::Swap(stArenaPKResult* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(win_, other->win_);
    std::swap(rank_, other->rank_);
    std::swap(historyrank_, other->historyrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stArenaPKResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stArenaPKResult_descriptor_;
  metadata.reflection = stArenaPKResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynDrawHeroScore_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynDrawHeroScore_ProtoModID_descriptor_;
}
bool stSynDrawHeroScore_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynDrawHeroScore_ProtoModID stSynDrawHeroScore::ModID;
const stSynDrawHeroScore_ProtoModID stSynDrawHeroScore::ProtoModID_MIN;
const stSynDrawHeroScore_ProtoModID stSynDrawHeroScore::ProtoModID_MAX;
const int stSynDrawHeroScore::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynDrawHeroScore_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynDrawHeroScore_ProtoFunID_descriptor_;
}
bool stSynDrawHeroScore_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynDrawHeroScore_ProtoFunID stSynDrawHeroScore::FunID;
const stSynDrawHeroScore_ProtoFunID stSynDrawHeroScore::ProtoFunID_MIN;
const stSynDrawHeroScore_ProtoFunID stSynDrawHeroScore::ProtoFunID_MAX;
const int stSynDrawHeroScore::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynDrawHeroScore::kCharIDFieldNumber;
const int stSynDrawHeroScore::kScoreFieldNumber;
#endif  // !_MSC_VER

stSynDrawHeroScore::stSynDrawHeroScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynDrawHeroScore::InitAsDefaultInstance() {
}

stSynDrawHeroScore::stSynDrawHeroScore(const stSynDrawHeroScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynDrawHeroScore::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynDrawHeroScore::~stSynDrawHeroScore() {
  SharedDtor();
}

void stSynDrawHeroScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynDrawHeroScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynDrawHeroScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynDrawHeroScore_descriptor_;
}

const stSynDrawHeroScore& stSynDrawHeroScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynDrawHeroScore* stSynDrawHeroScore::default_instance_ = NULL;

stSynDrawHeroScore* stSynDrawHeroScore::New() const {
  return new stSynDrawHeroScore;
}

void stSynDrawHeroScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynDrawHeroScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional uint32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynDrawHeroScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynDrawHeroScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynDrawHeroScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynDrawHeroScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynDrawHeroScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynDrawHeroScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynDrawHeroScore::MergeFrom(const stSynDrawHeroScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynDrawHeroScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynDrawHeroScore::CopyFrom(const stSynDrawHeroScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynDrawHeroScore::IsInitialized() const {

  return true;
}

void stSynDrawHeroScore::Swap(stSynDrawHeroScore* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynDrawHeroScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynDrawHeroScore_descriptor_;
  metadata.reflection = stSynDrawHeroScore_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUpLeitaiUseTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpLeitaiUseTime_ProtoModID_descriptor_;
}
bool stUpLeitaiUseTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpLeitaiUseTime_ProtoModID stUpLeitaiUseTime::ModID;
const stUpLeitaiUseTime_ProtoModID stUpLeitaiUseTime::ProtoModID_MIN;
const stUpLeitaiUseTime_ProtoModID stUpLeitaiUseTime::ProtoModID_MAX;
const int stUpLeitaiUseTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpLeitaiUseTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpLeitaiUseTime_ProtoFunID_descriptor_;
}
bool stUpLeitaiUseTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpLeitaiUseTime_ProtoFunID stUpLeitaiUseTime::FunID;
const stUpLeitaiUseTime_ProtoFunID stUpLeitaiUseTime::ProtoFunID_MIN;
const stUpLeitaiUseTime_ProtoFunID stUpLeitaiUseTime::ProtoFunID_MAX;
const int stUpLeitaiUseTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUpLeitaiUseTime::kCharIDFieldNumber;
const int stUpLeitaiUseTime::kUseTimeFieldNumber;
#endif  // !_MSC_VER

stUpLeitaiUseTime::stUpLeitaiUseTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUpLeitaiUseTime::InitAsDefaultInstance() {
}

stUpLeitaiUseTime::stUpLeitaiUseTime(const stUpLeitaiUseTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUpLeitaiUseTime::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  usetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUpLeitaiUseTime::~stUpLeitaiUseTime() {
  SharedDtor();
}

void stUpLeitaiUseTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUpLeitaiUseTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUpLeitaiUseTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpLeitaiUseTime_descriptor_;
}

const stUpLeitaiUseTime& stUpLeitaiUseTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUpLeitaiUseTime* stUpLeitaiUseTime::default_instance_ = NULL;

stUpLeitaiUseTime* stUpLeitaiUseTime::New() const {
  return new stUpLeitaiUseTime;
}

void stUpLeitaiUseTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    usetime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUpLeitaiUseTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useTime;
        break;
      }

      // optional uint32 useTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetime_)));
          set_has_usetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUpLeitaiUseTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 useTime = 2;
  if (has_usetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->usetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUpLeitaiUseTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 useTime = 2;
  if (has_usetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->usetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUpLeitaiUseTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 useTime = 2;
    if (has_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUpLeitaiUseTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUpLeitaiUseTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUpLeitaiUseTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUpLeitaiUseTime::MergeFrom(const stUpLeitaiUseTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_usetime()) {
      set_usetime(from.usetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUpLeitaiUseTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUpLeitaiUseTime::CopyFrom(const stUpLeitaiUseTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUpLeitaiUseTime::IsInitialized() const {

  return true;
}

void stUpLeitaiUseTime::Swap(stUpLeitaiUseTime* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(usetime_, other->usetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUpLeitaiUseTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUpLeitaiUseTime_descriptor_;
  metadata.reflection = stUpLeitaiUseTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserLeaveGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLeaveGuild_ProtoModID_descriptor_;
}
bool stUserLeaveGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLeaveGuild_ProtoModID stUserLeaveGuild::ModID;
const stUserLeaveGuild_ProtoModID stUserLeaveGuild::ProtoModID_MIN;
const stUserLeaveGuild_ProtoModID stUserLeaveGuild::ProtoModID_MAX;
const int stUserLeaveGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserLeaveGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLeaveGuild_ProtoFunID_descriptor_;
}
bool stUserLeaveGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLeaveGuild_ProtoFunID stUserLeaveGuild::FunID;
const stUserLeaveGuild_ProtoFunID stUserLeaveGuild::ProtoFunID_MIN;
const stUserLeaveGuild_ProtoFunID stUserLeaveGuild::ProtoFunID_MAX;
const int stUserLeaveGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserLeaveGuild::kCharIDsFieldNumber;
#endif  // !_MSC_VER

stUserLeaveGuild::stUserLeaveGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserLeaveGuild::InitAsDefaultInstance() {
}

stUserLeaveGuild::stUserLeaveGuild(const stUserLeaveGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserLeaveGuild::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserLeaveGuild::~stUserLeaveGuild() {
  SharedDtor();
}

void stUserLeaveGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserLeaveGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserLeaveGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLeaveGuild_descriptor_;
}

const stUserLeaveGuild& stUserLeaveGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUserLeaveGuild* stUserLeaveGuild::default_instance_ = NULL;

stUserLeaveGuild* stUserLeaveGuild::New() const {
  return new stUserLeaveGuild;
}

void stUserLeaveGuild::Clear() {
  charids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserLeaveGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 charIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_charids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_charids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_charIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserLeaveGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 charIDs = 1;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->charids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserLeaveGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 charIDs = 1;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->charids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserLeaveGuild::ByteSize() const {
  int total_size = 0;

  // repeated uint32 charIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->charids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->charids(i));
    }
    total_size += 1 * this->charids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserLeaveGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserLeaveGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserLeaveGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserLeaveGuild::MergeFrom(const stUserLeaveGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  charids_.MergeFrom(from.charids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserLeaveGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserLeaveGuild::CopyFrom(const stUserLeaveGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserLeaveGuild::IsInitialized() const {

  return true;
}

void stUserLeaveGuild::Swap(stUserLeaveGuild* other) {
  if (other != this) {
    charids_.Swap(&other->charids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserLeaveGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserLeaveGuild_descriptor_;
  metadata.reflection = stUserLeaveGuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stEnterCopymapMemInfo::kCharIDFieldNumber;
const int stEnterCopymapMemInfo::kAddDamagePerFieldNumber;
#endif  // !_MSC_VER

stEnterCopymapMemInfo::stEnterCopymapMemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterCopymapMemInfo::InitAsDefaultInstance() {
}

stEnterCopymapMemInfo::stEnterCopymapMemInfo(const stEnterCopymapMemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterCopymapMemInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  adddamageper_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterCopymapMemInfo::~stEnterCopymapMemInfo() {
  SharedDtor();
}

void stEnterCopymapMemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEnterCopymapMemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterCopymapMemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterCopymapMemInfo_descriptor_;
}

const stEnterCopymapMemInfo& stEnterCopymapMemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stEnterCopymapMemInfo* stEnterCopymapMemInfo::default_instance_ = NULL;

stEnterCopymapMemInfo* stEnterCopymapMemInfo::New() const {
  return new stEnterCopymapMemInfo;
}

void stEnterCopymapMemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    adddamageper_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterCopymapMemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addDamagePer;
        break;
      }

      // optional uint32 addDamagePer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDamagePer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adddamageper_)));
          set_has_adddamageper();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterCopymapMemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 addDamagePer = 2;
  if (has_adddamageper()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->adddamageper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterCopymapMemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 addDamagePer = 2;
  if (has_adddamageper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->adddamageper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterCopymapMemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 addDamagePer = 2;
    if (has_adddamageper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adddamageper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterCopymapMemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterCopymapMemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterCopymapMemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterCopymapMemInfo::MergeFrom(const stEnterCopymapMemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_adddamageper()) {
      set_adddamageper(from.adddamageper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterCopymapMemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterCopymapMemInfo::CopyFrom(const stEnterCopymapMemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterCopymapMemInfo::IsInitialized() const {

  return true;
}

void stEnterCopymapMemInfo::Swap(stEnterCopymapMemInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(adddamageper_, other->adddamageper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterCopymapMemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterCopymapMemInfo_descriptor_;
  metadata.reflection = stEnterCopymapMemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stTeamEnterCopyMap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamEnterCopyMap_ProtoModID_descriptor_;
}
bool stTeamEnterCopyMap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTeamEnterCopyMap_ProtoModID stTeamEnterCopyMap::ModID;
const stTeamEnterCopyMap_ProtoModID stTeamEnterCopyMap::ProtoModID_MIN;
const stTeamEnterCopyMap_ProtoModID stTeamEnterCopyMap::ProtoModID_MAX;
const int stTeamEnterCopyMap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stTeamEnterCopyMap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamEnterCopyMap_ProtoFunID_descriptor_;
}
bool stTeamEnterCopyMap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTeamEnterCopyMap_ProtoFunID stTeamEnterCopyMap::FunID;
const stTeamEnterCopyMap_ProtoFunID stTeamEnterCopyMap::ProtoFunID_MIN;
const stTeamEnterCopyMap_ProtoFunID stTeamEnterCopyMap::ProtoFunID_MAX;
const int stTeamEnterCopyMap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stTeamEnterCopyMap::kCopymapIDFieldNumber;
const int stTeamEnterCopyMap::kTeamIDFieldNumber;
const int stTeamEnterCopyMap::kMemerInfoFieldNumber;
const int stTeamEnterCopyMap::kBossHPFieldNumber;
const int stTeamEnterCopyMap::kBossLvFieldNumber;
#endif  // !_MSC_VER

stTeamEnterCopyMap::stTeamEnterCopyMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTeamEnterCopyMap::InitAsDefaultInstance() {
}

stTeamEnterCopyMap::stTeamEnterCopyMap(const stTeamEnterCopyMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTeamEnterCopyMap::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  teamid_ = 0u;
  bosshp_ = 0u;
  bosslv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTeamEnterCopyMap::~stTeamEnterCopyMap() {
  SharedDtor();
}

void stTeamEnterCopyMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stTeamEnterCopyMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTeamEnterCopyMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamEnterCopyMap_descriptor_;
}

const stTeamEnterCopyMap& stTeamEnterCopyMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stTeamEnterCopyMap* stTeamEnterCopyMap::default_instance_ = NULL;

stTeamEnterCopyMap* stTeamEnterCopyMap::New() const {
  return new stTeamEnterCopyMap;
}

void stTeamEnterCopyMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    teamid_ = 0u;
    bosshp_ = 0u;
    bosslv_ = 0u;
  }
  memerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTeamEnterCopyMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_memerInfo;
        break;
      }

      // repeated .Global.stEnterCopymapMemInfo memerInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_memerInfo;
        if (input->ExpectTag(32)) goto parse_bossHP;
        break;
      }

      // optional uint32 bossHP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosshp_)));
          set_has_bosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bossLv;
        break;
      }

      // optional uint32 bossLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosslv_)));
          set_has_bosslv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTeamEnterCopyMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  // repeated .Global.stEnterCopymapMemInfo memerInfo = 3;
  for (int i = 0; i < this->memerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->memerinfo(i), output);
  }

  // optional uint32 bossHP = 4;
  if (has_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bosshp(), output);
  }

  // optional uint32 bossLv = 5;
  if (has_bosslv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->bosslv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTeamEnterCopyMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  // repeated .Global.stEnterCopymapMemInfo memerInfo = 3;
  for (int i = 0; i < this->memerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->memerinfo(i), target);
  }

  // optional uint32 bossHP = 4;
  if (has_bosshp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bosshp(), target);
  }

  // optional uint32 bossLv = 5;
  if (has_bosslv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->bosslv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTeamEnterCopyMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional uint32 teamID = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 bossHP = 4;
    if (has_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosshp());
    }

    // optional uint32 bossLv = 5;
    if (has_bosslv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosslv());
    }

  }
  // repeated .Global.stEnterCopymapMemInfo memerInfo = 3;
  total_size += 1 * this->memerinfo_size();
  for (int i = 0; i < this->memerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTeamEnterCopyMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTeamEnterCopyMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTeamEnterCopyMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTeamEnterCopyMap::MergeFrom(const stTeamEnterCopyMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  memerinfo_.MergeFrom(from.memerinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_bosshp()) {
      set_bosshp(from.bosshp());
    }
    if (from.has_bosslv()) {
      set_bosslv(from.bosslv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTeamEnterCopyMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTeamEnterCopyMap::CopyFrom(const stTeamEnterCopyMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTeamEnterCopyMap::IsInitialized() const {

  return true;
}

void stTeamEnterCopyMap::Swap(stTeamEnterCopyMap* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(teamid_, other->teamid_);
    memerinfo_.Swap(&other->memerinfo_);
    std::swap(bosshp_, other->bosshp_);
    std::swap(bosslv_, other->bosslv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTeamEnterCopyMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTeamEnterCopyMap_descriptor_;
  metadata.reflection = stTeamEnterCopyMap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOne2OnePVPEnterCopyMap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPEnterCopyMap_ProtoModID_descriptor_;
}
bool stOne2OnePVPEnterCopyMap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPEnterCopyMap_ProtoModID stOne2OnePVPEnterCopyMap::ModID;
const stOne2OnePVPEnterCopyMap_ProtoModID stOne2OnePVPEnterCopyMap::ProtoModID_MIN;
const stOne2OnePVPEnterCopyMap_ProtoModID stOne2OnePVPEnterCopyMap::ProtoModID_MAX;
const int stOne2OnePVPEnterCopyMap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOne2OnePVPEnterCopyMap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPEnterCopyMap_ProtoFunID_descriptor_;
}
bool stOne2OnePVPEnterCopyMap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPEnterCopyMap_ProtoFunID stOne2OnePVPEnterCopyMap::FunID;
const stOne2OnePVPEnterCopyMap_ProtoFunID stOne2OnePVPEnterCopyMap::ProtoFunID_MIN;
const stOne2OnePVPEnterCopyMap_ProtoFunID stOne2OnePVPEnterCopyMap::ProtoFunID_MAX;
const int stOne2OnePVPEnterCopyMap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOne2OnePVPEnterCopyMap::kMemberIDsFieldNumber;
const int stOne2OnePVPEnterCopyMap::kPkWithFriendFieldNumber;
#endif  // !_MSC_VER

stOne2OnePVPEnterCopyMap::stOne2OnePVPEnterCopyMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOne2OnePVPEnterCopyMap::InitAsDefaultInstance() {
}

stOne2OnePVPEnterCopyMap::stOne2OnePVPEnterCopyMap(const stOne2OnePVPEnterCopyMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOne2OnePVPEnterCopyMap::SharedCtor() {
  _cached_size_ = 0;
  pkwithfriend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOne2OnePVPEnterCopyMap::~stOne2OnePVPEnterCopyMap() {
  SharedDtor();
}

void stOne2OnePVPEnterCopyMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOne2OnePVPEnterCopyMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOne2OnePVPEnterCopyMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPEnterCopyMap_descriptor_;
}

const stOne2OnePVPEnterCopyMap& stOne2OnePVPEnterCopyMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stOne2OnePVPEnterCopyMap* stOne2OnePVPEnterCopyMap::default_instance_ = NULL;

stOne2OnePVPEnterCopyMap* stOne2OnePVPEnterCopyMap::New() const {
  return new stOne2OnePVPEnterCopyMap;
}

void stOne2OnePVPEnterCopyMap::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    pkwithfriend_ = false;
  }
  memberids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOne2OnePVPEnterCopyMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 memberIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_memberids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_memberids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_memberIDs;
        if (input->ExpectTag(16)) goto parse_pkWithFriend;
        break;
      }

      // optional bool pkWithFriend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkWithFriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pkwithfriend_)));
          set_has_pkwithfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOne2OnePVPEnterCopyMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 memberIDs = 1;
  for (int i = 0; i < this->memberids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->memberids(i), output);
  }

  // optional bool pkWithFriend = 2;
  if (has_pkwithfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->pkwithfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOne2OnePVPEnterCopyMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 memberIDs = 1;
  for (int i = 0; i < this->memberids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->memberids(i), target);
  }

  // optional bool pkWithFriend = 2;
  if (has_pkwithfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->pkwithfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOne2OnePVPEnterCopyMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool pkWithFriend = 2;
    if (has_pkwithfriend()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 memberIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->memberids(i));
    }
    total_size += 1 * this->memberids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOne2OnePVPEnterCopyMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOne2OnePVPEnterCopyMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOne2OnePVPEnterCopyMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOne2OnePVPEnterCopyMap::MergeFrom(const stOne2OnePVPEnterCopyMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberids_.MergeFrom(from.memberids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_pkwithfriend()) {
      set_pkwithfriend(from.pkwithfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOne2OnePVPEnterCopyMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOne2OnePVPEnterCopyMap::CopyFrom(const stOne2OnePVPEnterCopyMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOne2OnePVPEnterCopyMap::IsInitialized() const {

  return true;
}

void stOne2OnePVPEnterCopyMap::Swap(stOne2OnePVPEnterCopyMap* other) {
  if (other != this) {
    memberids_.Swap(&other->memberids_);
    std::swap(pkwithfriend_, other->pkwithfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOne2OnePVPEnterCopyMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOne2OnePVPEnterCopyMap_descriptor_;
  metadata.reflection = stOne2OnePVPEnterCopyMap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stForwardCapture_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardCapture_ProtoModID_descriptor_;
}
bool stForwardCapture_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForwardCapture_ProtoModID stForwardCapture::ModID;
const stForwardCapture_ProtoModID stForwardCapture::ProtoModID_MIN;
const stForwardCapture_ProtoModID stForwardCapture::ProtoModID_MAX;
const int stForwardCapture::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stForwardCapture_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardCapture_ProtoFunID_descriptor_;
}
bool stForwardCapture_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForwardCapture_ProtoFunID stForwardCapture::FunID;
const stForwardCapture_ProtoFunID stForwardCapture::ProtoFunID_MIN;
const stForwardCapture_ProtoFunID stForwardCapture::ProtoFunID_MAX;
const int stForwardCapture::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stForwardCapture::kCharIDFieldNumber;
const int stForwardCapture::kOtherIDFieldNumber;
const int stForwardCapture::kCombineIDFieldNumber;
const int stForwardCapture::kResTypeFieldNumber;
const int stForwardCapture::kNumFieldNumber;
const int stForwardCapture::kMultiCaptureFieldNumber;
#endif  // !_MSC_VER

stForwardCapture::stForwardCapture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stForwardCapture::InitAsDefaultInstance() {
}

stForwardCapture::stForwardCapture(const stForwardCapture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stForwardCapture::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  otherid_ = 0u;
  combineid_ = 0u;
  restype_ = 0u;
  num_ = 0u;
  multicapture_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForwardCapture::~stForwardCapture() {
  SharedDtor();
}

void stForwardCapture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stForwardCapture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForwardCapture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardCapture_descriptor_;
}

const stForwardCapture& stForwardCapture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stForwardCapture* stForwardCapture::default_instance_ = NULL;

stForwardCapture* stForwardCapture::New() const {
  return new stForwardCapture;
}

void stForwardCapture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    otherid_ = 0u;
    combineid_ = 0u;
    restype_ = 0u;
    num_ = 0u;
    multicapture_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForwardCapture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_otherID;
        break;
      }

      // optional uint32 otherID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otherID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_combineID;
        break;
      }

      // optional uint32 combineID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combineID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &combineid_)));
          set_has_combineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resType;
        break;
      }

      // optional uint32 resType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restype_)));
          set_has_restype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional uint32 num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_multiCapture;
        break;
      }

      // optional bool multiCapture = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiCapture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multicapture_)));
          set_has_multicapture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stForwardCapture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 otherID = 2;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->otherid(), output);
  }

  // optional uint32 combineID = 3;
  if (has_combineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->combineid(), output);
  }

  // optional uint32 resType = 4;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->restype(), output);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  // optional bool multiCapture = 6;
  if (has_multicapture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->multicapture(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stForwardCapture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 otherID = 2;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->otherid(), target);
  }

  // optional uint32 combineID = 3;
  if (has_combineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->combineid(), target);
  }

  // optional uint32 resType = 4;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->restype(), target);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  // optional bool multiCapture = 6;
  if (has_multicapture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->multicapture(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stForwardCapture::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 otherID = 2;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otherid());
    }

    // optional uint32 combineID = 3;
    if (has_combineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->combineid());
    }

    // optional uint32 resType = 4;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restype());
    }

    // optional uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bool multiCapture = 6;
    if (has_multicapture()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForwardCapture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForwardCapture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForwardCapture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForwardCapture::MergeFrom(const stForwardCapture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_combineid()) {
      set_combineid(from.combineid());
    }
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_multicapture()) {
      set_multicapture(from.multicapture());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForwardCapture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForwardCapture::CopyFrom(const stForwardCapture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForwardCapture::IsInitialized() const {

  return true;
}

void stForwardCapture::Swap(stForwardCapture* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(otherid_, other->otherid_);
    std::swap(combineid_, other->combineid_);
    std::swap(restype_, other->restype_);
    std::swap(num_, other->num_);
    std::swap(multicapture_, other->multicapture_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForwardCapture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForwardCapture_descriptor_;
  metadata.reflection = stForwardCapture_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCaptureRewardItem::kItemIDFieldNumber;
const int stCaptureRewardItem::kNumFieldNumber;
#endif  // !_MSC_VER

stCaptureRewardItem::stCaptureRewardItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCaptureRewardItem::InitAsDefaultInstance() {
}

stCaptureRewardItem::stCaptureRewardItem(const stCaptureRewardItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCaptureRewardItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCaptureRewardItem::~stCaptureRewardItem() {
  SharedDtor();
}

void stCaptureRewardItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCaptureRewardItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCaptureRewardItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureRewardItem_descriptor_;
}

const stCaptureRewardItem& stCaptureRewardItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCaptureRewardItem* stCaptureRewardItem::default_instance_ = NULL;

stCaptureRewardItem* stCaptureRewardItem::New() const {
  return new stCaptureRewardItem;
}

void stCaptureRewardItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCaptureRewardItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCaptureRewardItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCaptureRewardItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCaptureRewardItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCaptureRewardItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCaptureRewardItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCaptureRewardItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCaptureRewardItem::MergeFrom(const stCaptureRewardItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCaptureRewardItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCaptureRewardItem::CopyFrom(const stCaptureRewardItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCaptureRewardItem::IsInitialized() const {

  return true;
}

void stCaptureRewardItem::Swap(stCaptureRewardItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCaptureRewardItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCaptureRewardItem_descriptor_;
  metadata.reflection = stCaptureRewardItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCaptureReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureReward_ProtoModID_descriptor_;
}
bool stCaptureReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCaptureReward_ProtoModID stCaptureReward::ModID;
const stCaptureReward_ProtoModID stCaptureReward::ProtoModID_MIN;
const stCaptureReward_ProtoModID stCaptureReward::ProtoModID_MAX;
const int stCaptureReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCaptureReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureReward_ProtoFunID_descriptor_;
}
bool stCaptureReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCaptureReward_ProtoFunID stCaptureReward::FunID;
const stCaptureReward_ProtoFunID stCaptureReward::ProtoFunID_MIN;
const stCaptureReward_ProtoFunID stCaptureReward::ProtoFunID_MAX;
const int stCaptureReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCaptureReward::kCharIDFieldNumber;
const int stCaptureReward::kDropIDFieldNumber;
const int stCaptureReward::kMoneyCoefFieldNumber;
const int stCaptureReward::kExpCoefFieldNumber;
const int stCaptureReward::kObtainPieceFieldNumber;
const int stCaptureReward::kNumFieldNumber;
const int stCaptureReward::kMultiCaptureFieldNumber;
#endif  // !_MSC_VER

stCaptureReward::stCaptureReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCaptureReward::InitAsDefaultInstance() {
}

stCaptureReward::stCaptureReward(const stCaptureReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCaptureReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  dropid_ = 0u;
  moneycoef_ = 0u;
  expcoef_ = 0u;
  obtainpiece_ = false;
  num_ = 0u;
  multicapture_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCaptureReward::~stCaptureReward() {
  SharedDtor();
}

void stCaptureReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCaptureReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCaptureReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureReward_descriptor_;
}

const stCaptureReward& stCaptureReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCaptureReward* stCaptureReward::default_instance_ = NULL;

stCaptureReward* stCaptureReward::New() const {
  return new stCaptureReward;
}

void stCaptureReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    dropid_ = 0u;
    moneycoef_ = 0u;
    expcoef_ = 0u;
    obtainpiece_ = false;
    num_ = 0u;
    multicapture_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCaptureReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dropID;
        break;
      }

      // optional uint32 dropID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropid_)));
          set_has_dropid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_moneyCoef;
        break;
      }

      // optional uint32 moneyCoef = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyCoef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moneycoef_)));
          set_has_moneycoef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_expCoef;
        break;
      }

      // optional uint32 expCoef = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expCoef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expcoef_)));
          set_has_expcoef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_obtainPiece;
        break;
      }

      // optional bool obtainPiece = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_obtainPiece:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obtainpiece_)));
          set_has_obtainpiece();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional uint32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_multiCapture;
        break;
      }

      // optional bool multiCapture = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multiCapture:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multicapture_)));
          set_has_multicapture();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCaptureReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 dropID = 2;
  if (has_dropid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dropid(), output);
  }

  // optional uint32 moneyCoef = 3;
  if (has_moneycoef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->moneycoef(), output);
  }

  // optional uint32 expCoef = 4;
  if (has_expcoef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->expcoef(), output);
  }

  // optional bool obtainPiece = 5;
  if (has_obtainpiece()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->obtainpiece(), output);
  }

  // optional uint32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num(), output);
  }

  // optional bool multiCapture = 7;
  if (has_multicapture()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->multicapture(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCaptureReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 dropID = 2;
  if (has_dropid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dropid(), target);
  }

  // optional uint32 moneyCoef = 3;
  if (has_moneycoef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->moneycoef(), target);
  }

  // optional uint32 expCoef = 4;
  if (has_expcoef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->expcoef(), target);
  }

  // optional bool obtainPiece = 5;
  if (has_obtainpiece()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->obtainpiece(), target);
  }

  // optional uint32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num(), target);
  }

  // optional bool multiCapture = 7;
  if (has_multicapture()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->multicapture(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCaptureReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 dropID = 2;
    if (has_dropid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dropid());
    }

    // optional uint32 moneyCoef = 3;
    if (has_moneycoef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moneycoef());
    }

    // optional uint32 expCoef = 4;
    if (has_expcoef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expcoef());
    }

    // optional bool obtainPiece = 5;
    if (has_obtainpiece()) {
      total_size += 1 + 1;
    }

    // optional uint32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional bool multiCapture = 7;
    if (has_multicapture()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCaptureReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCaptureReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCaptureReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCaptureReward::MergeFrom(const stCaptureReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dropid()) {
      set_dropid(from.dropid());
    }
    if (from.has_moneycoef()) {
      set_moneycoef(from.moneycoef());
    }
    if (from.has_expcoef()) {
      set_expcoef(from.expcoef());
    }
    if (from.has_obtainpiece()) {
      set_obtainpiece(from.obtainpiece());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_multicapture()) {
      set_multicapture(from.multicapture());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCaptureReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCaptureReward::CopyFrom(const stCaptureReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCaptureReward::IsInitialized() const {

  return true;
}

void stCaptureReward::Swap(stCaptureReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dropid_, other->dropid_);
    std::swap(moneycoef_, other->moneycoef_);
    std::swap(expcoef_, other->expcoef_);
    std::swap(obtainpiece_, other->obtainpiece_);
    std::swap(num_, other->num_);
    std::swap(multicapture_, other->multicapture_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCaptureReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCaptureReward_descriptor_;
  metadata.reflection = stCaptureReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRealTimeBattleEnterCopymap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeBattleEnterCopymap_ProtoModID_descriptor_;
}
bool stRealTimeBattleEnterCopymap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeBattleEnterCopymap_ProtoModID stRealTimeBattleEnterCopymap::ModID;
const stRealTimeBattleEnterCopymap_ProtoModID stRealTimeBattleEnterCopymap::ProtoModID_MIN;
const stRealTimeBattleEnterCopymap_ProtoModID stRealTimeBattleEnterCopymap::ProtoModID_MAX;
const int stRealTimeBattleEnterCopymap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRealTimeBattleEnterCopymap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeBattleEnterCopymap_ProtoFunID_descriptor_;
}
bool stRealTimeBattleEnterCopymap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 37:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeBattleEnterCopymap_ProtoFunID stRealTimeBattleEnterCopymap::FunID;
const stRealTimeBattleEnterCopymap_ProtoFunID stRealTimeBattleEnterCopymap::ProtoFunID_MIN;
const stRealTimeBattleEnterCopymap_ProtoFunID stRealTimeBattleEnterCopymap::ProtoFunID_MAX;
const int stRealTimeBattleEnterCopymap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRealTimeBattleEnterCopymap::kPkTypeFieldNumber;
const int stRealTimeBattleEnterCopymap::kTeamAIDFieldNumber;
const int stRealTimeBattleEnterCopymap::kTeamBIDFieldNumber;
const int stRealTimeBattleEnterCopymap::kTeamAMembersFieldNumber;
const int stRealTimeBattleEnterCopymap::kTeamBMembersFieldNumber;
#endif  // !_MSC_VER

stRealTimeBattleEnterCopymap::stRealTimeBattleEnterCopymap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRealTimeBattleEnterCopymap::InitAsDefaultInstance() {
}

stRealTimeBattleEnterCopymap::stRealTimeBattleEnterCopymap(const stRealTimeBattleEnterCopymap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRealTimeBattleEnterCopymap::SharedCtor() {
  _cached_size_ = 0;
  pktype_ = 1;
  teamaid_ = 0u;
  teambid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRealTimeBattleEnterCopymap::~stRealTimeBattleEnterCopymap() {
  SharedDtor();
}

void stRealTimeBattleEnterCopymap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRealTimeBattleEnterCopymap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRealTimeBattleEnterCopymap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeBattleEnterCopymap_descriptor_;
}

const stRealTimeBattleEnterCopymap& stRealTimeBattleEnterCopymap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRealTimeBattleEnterCopymap* stRealTimeBattleEnterCopymap::default_instance_ = NULL;

stRealTimeBattleEnterCopymap* stRealTimeBattleEnterCopymap::New() const {
  return new stRealTimeBattleEnterCopymap;
}

void stRealTimeBattleEnterCopymap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pktype_ = 1;
    teamaid_ = 0u;
    teambid_ = 0u;
  }
  teamamembers_.Clear();
  teambmembers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRealTimeBattleEnterCopymap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.eRealTimePKType pkType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::eRealTimePKType_IsValid(value)) {
            set_pktype(static_cast< ::Global::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamAID;
        break;
      }

      // optional uint32 teamAID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamAID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamaid_)));
          set_has_teamaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamBID;
        break;
      }

      // optional uint32 teamBID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamBID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teambid_)));
          set_has_teambid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamAMembers;
        break;
      }

      // repeated uint32 teamAMembers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamAMembers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_teamamembers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teamamembers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamAMembers;
        if (input->ExpectTag(40)) goto parse_teamBMembers;
        break;
      }

      // repeated uint32 teamBMembers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamBMembers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_teambmembers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_teambmembers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_teamBMembers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRealTimeBattleEnterCopymap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.eRealTimePKType pkType = 1;
  if (has_pktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->pktype(), output);
  }

  // optional uint32 teamAID = 2;
  if (has_teamaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamaid(), output);
  }

  // optional uint32 teamBID = 3;
  if (has_teambid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teambid(), output);
  }

  // repeated uint32 teamAMembers = 4;
  for (int i = 0; i < this->teamamembers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->teamamembers(i), output);
  }

  // repeated uint32 teamBMembers = 5;
  for (int i = 0; i < this->teambmembers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->teambmembers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRealTimeBattleEnterCopymap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.eRealTimePKType pkType = 1;
  if (has_pktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->pktype(), target);
  }

  // optional uint32 teamAID = 2;
  if (has_teamaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamaid(), target);
  }

  // optional uint32 teamBID = 3;
  if (has_teambid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teambid(), target);
  }

  // repeated uint32 teamAMembers = 4;
  for (int i = 0; i < this->teamamembers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->teamamembers(i), target);
  }

  // repeated uint32 teamBMembers = 5;
  for (int i = 0; i < this->teambmembers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->teambmembers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRealTimeBattleEnterCopymap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.eRealTimePKType pkType = 1;
    if (has_pktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pktype());
    }

    // optional uint32 teamAID = 2;
    if (has_teamaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamaid());
    }

    // optional uint32 teamBID = 3;
    if (has_teambid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teambid());
    }

  }
  // repeated uint32 teamAMembers = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->teamamembers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teamamembers(i));
    }
    total_size += 1 * this->teamamembers_size() + data_size;
  }

  // repeated uint32 teamBMembers = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->teambmembers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->teambmembers(i));
    }
    total_size += 1 * this->teambmembers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRealTimeBattleEnterCopymap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRealTimeBattleEnterCopymap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRealTimeBattleEnterCopymap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRealTimeBattleEnterCopymap::MergeFrom(const stRealTimeBattleEnterCopymap& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamamembers_.MergeFrom(from.teamamembers_);
  teambmembers_.MergeFrom(from.teambmembers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pktype()) {
      set_pktype(from.pktype());
    }
    if (from.has_teamaid()) {
      set_teamaid(from.teamaid());
    }
    if (from.has_teambid()) {
      set_teambid(from.teambid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRealTimeBattleEnterCopymap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRealTimeBattleEnterCopymap::CopyFrom(const stRealTimeBattleEnterCopymap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRealTimeBattleEnterCopymap::IsInitialized() const {

  return true;
}

void stRealTimeBattleEnterCopymap::Swap(stRealTimeBattleEnterCopymap* other) {
  if (other != this) {
    std::swap(pktype_, other->pktype_);
    std::swap(teamaid_, other->teamaid_);
    std::swap(teambid_, other->teambid_);
    teamamembers_.Swap(&other->teamamembers_);
    teambmembers_.Swap(&other->teambmembers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRealTimeBattleEnterCopymap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRealTimeBattleEnterCopymap_descriptor_;
  metadata.reflection = stRealTimeBattleEnterCopymap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyAddLilian_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddLilian_ProtoModID_descriptor_;
}
bool stNotifyAddLilian_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddLilian_ProtoModID stNotifyAddLilian::ModID;
const stNotifyAddLilian_ProtoModID stNotifyAddLilian::ProtoModID_MIN;
const stNotifyAddLilian_ProtoModID stNotifyAddLilian::ProtoModID_MAX;
const int stNotifyAddLilian::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyAddLilian_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddLilian_ProtoFunID_descriptor_;
}
bool stNotifyAddLilian_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddLilian_ProtoFunID stNotifyAddLilian::FunID;
const stNotifyAddLilian_ProtoFunID stNotifyAddLilian::ProtoFunID_MIN;
const stNotifyAddLilian_ProtoFunID stNotifyAddLilian::ProtoFunID_MAX;
const int stNotifyAddLilian::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyAddLilian::kCharIDFieldNumber;
const int stNotifyAddLilian::kNumFieldNumber;
#endif  // !_MSC_VER

stNotifyAddLilian::stNotifyAddLilian()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyAddLilian::InitAsDefaultInstance() {
}

stNotifyAddLilian::stNotifyAddLilian(const stNotifyAddLilian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyAddLilian::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyAddLilian::~stNotifyAddLilian() {
  SharedDtor();
}

void stNotifyAddLilian::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyAddLilian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyAddLilian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddLilian_descriptor_;
}

const stNotifyAddLilian& stNotifyAddLilian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyAddLilian* stNotifyAddLilian::default_instance_ = NULL;

stNotifyAddLilian* stNotifyAddLilian::New() const {
  return new stNotifyAddLilian;
}

void stNotifyAddLilian::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyAddLilian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyAddLilian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyAddLilian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyAddLilian::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyAddLilian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyAddLilian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyAddLilian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyAddLilian::MergeFrom(const stNotifyAddLilian& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyAddLilian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyAddLilian::CopyFrom(const stNotifyAddLilian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyAddLilian::IsInitialized() const {

  return true;
}

void stNotifyAddLilian::Swap(stNotifyAddLilian* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyAddLilian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyAddLilian_descriptor_;
  metadata.reflection = stNotifyAddLilian_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEnterGuildCopymap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterGuildCopymap_ProtoModID_descriptor_;
}
bool stEnterGuildCopymap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterGuildCopymap_ProtoModID stEnterGuildCopymap::ModID;
const stEnterGuildCopymap_ProtoModID stEnterGuildCopymap::ProtoModID_MIN;
const stEnterGuildCopymap_ProtoModID stEnterGuildCopymap::ProtoModID_MAX;
const int stEnterGuildCopymap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterGuildCopymap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterGuildCopymap_ProtoFunID_descriptor_;
}
bool stEnterGuildCopymap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 39:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterGuildCopymap_ProtoFunID stEnterGuildCopymap::FunID;
const stEnterGuildCopymap_ProtoFunID stEnterGuildCopymap::ProtoFunID_MIN;
const stEnterGuildCopymap_ProtoFunID stEnterGuildCopymap::ProtoFunID_MAX;
const int stEnterGuildCopymap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEnterGuildCopymap::kGuildNameFieldNumber;
const int stEnterGuildCopymap::kCharIDFieldNumber;
#endif  // !_MSC_VER

stEnterGuildCopymap::stEnterGuildCopymap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterGuildCopymap::InitAsDefaultInstance() {
}

stEnterGuildCopymap::stEnterGuildCopymap(const stEnterGuildCopymap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterGuildCopymap::SharedCtor() {
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterGuildCopymap::~stEnterGuildCopymap() {
  SharedDtor();
}

void stEnterGuildCopymap::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void stEnterGuildCopymap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterGuildCopymap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterGuildCopymap_descriptor_;
}

const stEnterGuildCopymap& stEnterGuildCopymap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stEnterGuildCopymap* stEnterGuildCopymap::default_instance_ = NULL;

stEnterGuildCopymap* stEnterGuildCopymap::New() const {
  return new stEnterGuildCopymap;
}

void stEnterGuildCopymap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterGuildCopymap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guildName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterGuildCopymap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildname(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterGuildCopymap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildname(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterGuildCopymap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guildName = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterGuildCopymap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterGuildCopymap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterGuildCopymap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterGuildCopymap::MergeFrom(const stEnterGuildCopymap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterGuildCopymap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterGuildCopymap::CopyFrom(const stEnterGuildCopymap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterGuildCopymap::IsInitialized() const {

  return true;
}

void stEnterGuildCopymap::Swap(stEnterGuildCopymap* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterGuildCopymap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterGuildCopymap_descriptor_;
  metadata.reflection = stEnterGuildCopymap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynMyContribyte_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMyContribyte_ProtoModID_descriptor_;
}
bool stSynMyContribyte_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMyContribyte_ProtoModID stSynMyContribyte::ModID;
const stSynMyContribyte_ProtoModID stSynMyContribyte::ProtoModID_MIN;
const stSynMyContribyte_ProtoModID stSynMyContribyte::ProtoModID_MAX;
const int stSynMyContribyte::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynMyContribyte_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMyContribyte_ProtoFunID_descriptor_;
}
bool stSynMyContribyte_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMyContribyte_ProtoFunID stSynMyContribyte::FunID;
const stSynMyContribyte_ProtoFunID stSynMyContribyte::ProtoFunID_MIN;
const stSynMyContribyte_ProtoFunID stSynMyContribyte::ProtoFunID_MAX;
const int stSynMyContribyte::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynMyContribyte::kCharIDFieldNumber;
const int stSynMyContribyte::kMyContributeFieldNumber;
#endif  // !_MSC_VER

stSynMyContribyte::stSynMyContribyte()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMyContribyte::InitAsDefaultInstance() {
}

stSynMyContribyte::stSynMyContribyte(const stSynMyContribyte& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMyContribyte::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  mycontribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMyContribyte::~stSynMyContribyte() {
  SharedDtor();
}

void stSynMyContribyte::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynMyContribyte::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMyContribyte::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMyContribyte_descriptor_;
}

const stSynMyContribyte& stSynMyContribyte::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynMyContribyte* stSynMyContribyte::default_instance_ = NULL;

stSynMyContribyte* stSynMyContribyte::New() const {
  return new stSynMyContribyte;
}

void stSynMyContribyte::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    mycontribute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMyContribyte::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_myContribute;
        break;
      }

      // optional uint32 myContribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mycontribute_)));
          set_has_mycontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMyContribyte::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 myContribute = 2;
  if (has_mycontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mycontribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMyContribyte::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 myContribute = 2;
  if (has_mycontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mycontribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMyContribyte::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 myContribute = 2;
    if (has_mycontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mycontribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMyContribyte::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMyContribyte* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMyContribyte*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMyContribyte::MergeFrom(const stSynMyContribyte& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mycontribute()) {
      set_mycontribute(from.mycontribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMyContribyte::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMyContribyte::CopyFrom(const stSynMyContribyte& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMyContribyte::IsInitialized() const {

  return true;
}

void stSynMyContribyte::Swap(stSynMyContribyte* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mycontribute_, other->mycontribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMyContribyte::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMyContribyte_descriptor_;
  metadata.reflection = stSynMyContribyte_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOnlineUserGMType_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnlineUserGMType_ProtoModID_descriptor_;
}
bool stOnlineUserGMType_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOnlineUserGMType_ProtoModID stOnlineUserGMType::ModID;
const stOnlineUserGMType_ProtoModID stOnlineUserGMType::ProtoModID_MIN;
const stOnlineUserGMType_ProtoModID stOnlineUserGMType::ProtoModID_MAX;
const int stOnlineUserGMType::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOnlineUserGMType_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnlineUserGMType_ProtoFunID_descriptor_;
}
bool stOnlineUserGMType_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 41:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOnlineUserGMType_ProtoFunID stOnlineUserGMType::FunID;
const stOnlineUserGMType_ProtoFunID stOnlineUserGMType::ProtoFunID_MIN;
const stOnlineUserGMType_ProtoFunID stOnlineUserGMType::ProtoFunID_MAX;
const int stOnlineUserGMType::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOnlineUserGMType::kCharIDFieldNumber;
const int stOnlineUserGMType::kGmValueFieldNumber;
#endif  // !_MSC_VER

stOnlineUserGMType::stOnlineUserGMType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOnlineUserGMType::InitAsDefaultInstance() {
}

stOnlineUserGMType::stOnlineUserGMType(const stOnlineUserGMType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOnlineUserGMType::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  gmvalue_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOnlineUserGMType::~stOnlineUserGMType() {
  SharedDtor();
}

void stOnlineUserGMType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOnlineUserGMType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOnlineUserGMType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnlineUserGMType_descriptor_;
}

const stOnlineUserGMType& stOnlineUserGMType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stOnlineUserGMType* stOnlineUserGMType::default_instance_ = NULL;

stOnlineUserGMType* stOnlineUserGMType::New() const {
  return new stOnlineUserGMType;
}

void stOnlineUserGMType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    gmvalue_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOnlineUserGMType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmValue;
        break;
      }

      // optional uint32 gmValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmvalue_)));
          set_has_gmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOnlineUserGMType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 gmValue = 2;
  if (has_gmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOnlineUserGMType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 gmValue = 2;
  if (has_gmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOnlineUserGMType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 gmValue = 2;
    if (has_gmvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOnlineUserGMType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOnlineUserGMType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOnlineUserGMType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOnlineUserGMType::MergeFrom(const stOnlineUserGMType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gmvalue()) {
      set_gmvalue(from.gmvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOnlineUserGMType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOnlineUserGMType::CopyFrom(const stOnlineUserGMType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOnlineUserGMType::IsInitialized() const {

  return true;
}

void stOnlineUserGMType::Swap(stOnlineUserGMType* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(gmvalue_, other->gmvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOnlineUserGMType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOnlineUserGMType_descriptor_;
  metadata.reflection = stOnlineUserGMType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stForbidOnlineUser_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForbidOnlineUser_ProtoModID_descriptor_;
}
bool stForbidOnlineUser_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForbidOnlineUser_ProtoModID stForbidOnlineUser::ModID;
const stForbidOnlineUser_ProtoModID stForbidOnlineUser::ProtoModID_MIN;
const stForbidOnlineUser_ProtoModID stForbidOnlineUser::ProtoModID_MAX;
const int stForbidOnlineUser::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stForbidOnlineUser_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForbidOnlineUser_ProtoFunID_descriptor_;
}
bool stForbidOnlineUser_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 42:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForbidOnlineUser_ProtoFunID stForbidOnlineUser::FunID;
const stForbidOnlineUser_ProtoFunID stForbidOnlineUser::ProtoFunID_MIN;
const stForbidOnlineUser_ProtoFunID stForbidOnlineUser::ProtoFunID_MAX;
const int stForbidOnlineUser::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stForbidOnlineUser::kCharIDFieldNumber;
#endif  // !_MSC_VER

stForbidOnlineUser::stForbidOnlineUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stForbidOnlineUser::InitAsDefaultInstance() {
}

stForbidOnlineUser::stForbidOnlineUser(const stForbidOnlineUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stForbidOnlineUser::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForbidOnlineUser::~stForbidOnlineUser() {
  SharedDtor();
}

void stForbidOnlineUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stForbidOnlineUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForbidOnlineUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForbidOnlineUser_descriptor_;
}

const stForbidOnlineUser& stForbidOnlineUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stForbidOnlineUser* stForbidOnlineUser::default_instance_ = NULL;

stForbidOnlineUser* stForbidOnlineUser::New() const {
  return new stForbidOnlineUser;
}

void stForbidOnlineUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForbidOnlineUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stForbidOnlineUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stForbidOnlineUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stForbidOnlineUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForbidOnlineUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForbidOnlineUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForbidOnlineUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForbidOnlineUser::MergeFrom(const stForbidOnlineUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForbidOnlineUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForbidOnlineUser::CopyFrom(const stForbidOnlineUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForbidOnlineUser::IsInitialized() const {

  return true;
}

void stForbidOnlineUser::Swap(stForbidOnlineUser* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForbidOnlineUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForbidOnlineUser_descriptor_;
  metadata.reflection = stForbidOnlineUser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOne2OnePVPFinish_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPFinish_ProtoModID_descriptor_;
}
bool stOne2OnePVPFinish_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPFinish_ProtoModID stOne2OnePVPFinish::ModID;
const stOne2OnePVPFinish_ProtoModID stOne2OnePVPFinish::ProtoModID_MIN;
const stOne2OnePVPFinish_ProtoModID stOne2OnePVPFinish::ProtoModID_MAX;
const int stOne2OnePVPFinish::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOne2OnePVPFinish_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPFinish_ProtoFunID_descriptor_;
}
bool stOne2OnePVPFinish_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 43:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePVPFinish_ProtoFunID stOne2OnePVPFinish::FunID;
const stOne2OnePVPFinish_ProtoFunID stOne2OnePVPFinish::ProtoFunID_MIN;
const stOne2OnePVPFinish_ProtoFunID stOne2OnePVPFinish::ProtoFunID_MAX;
const int stOne2OnePVPFinish::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOne2OnePVPFinish::kCharID1FieldNumber;
const int stOne2OnePVPFinish::kScore1FieldNumber;
const int stOne2OnePVPFinish::kWin1FieldNumber;
const int stOne2OnePVPFinish::kCharID2FieldNumber;
const int stOne2OnePVPFinish::kScore2FieldNumber;
const int stOne2OnePVPFinish::kWin2FieldNumber;
const int stOne2OnePVPFinish::kPkWithFriendFieldNumber;
#endif  // !_MSC_VER

stOne2OnePVPFinish::stOne2OnePVPFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOne2OnePVPFinish::InitAsDefaultInstance() {
}

stOne2OnePVPFinish::stOne2OnePVPFinish(const stOne2OnePVPFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOne2OnePVPFinish::SharedCtor() {
  _cached_size_ = 0;
  charid1_ = 0u;
  score1_ = 0u;
  win1_ = false;
  charid2_ = 0u;
  score2_ = 0u;
  win2_ = false;
  pkwithfriend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOne2OnePVPFinish::~stOne2OnePVPFinish() {
  SharedDtor();
}

void stOne2OnePVPFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOne2OnePVPFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOne2OnePVPFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePVPFinish_descriptor_;
}

const stOne2OnePVPFinish& stOne2OnePVPFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stOne2OnePVPFinish* stOne2OnePVPFinish::default_instance_ = NULL;

stOne2OnePVPFinish* stOne2OnePVPFinish::New() const {
  return new stOne2OnePVPFinish;
}

void stOne2OnePVPFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid1_ = 0u;
    score1_ = 0u;
    win1_ = false;
    charid2_ = 0u;
    score2_ = 0u;
    win2_ = false;
    pkwithfriend_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOne2OnePVPFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score1;
        break;
      }

      // optional uint32 score1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score1_)));
          set_has_score1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win1;
        break;
      }

      // optional bool win1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win1_)));
          set_has_win1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charID2;
        break;
      }

      // optional uint32 charID2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_score2;
        break;
      }

      // optional uint32 score2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score2_)));
          set_has_score2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win2;
        break;
      }

      // optional bool win2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win2_)));
          set_has_win2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_pkWithFriend;
        break;
      }

      // optional bool pkWithFriend = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkWithFriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pkwithfriend_)));
          set_has_pkwithfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOne2OnePVPFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID1 = 1;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid1(), output);
  }

  // optional uint32 score1 = 2;
  if (has_score1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->score1(), output);
  }

  // optional bool win1 = 3;
  if (has_win1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->win1(), output);
  }

  // optional uint32 charID2 = 4;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charid2(), output);
  }

  // optional uint32 score2 = 5;
  if (has_score2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->score2(), output);
  }

  // optional bool win2 = 6;
  if (has_win2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->win2(), output);
  }

  // optional bool pkWithFriend = 7;
  if (has_pkwithfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->pkwithfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOne2OnePVPFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID1 = 1;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid1(), target);
  }

  // optional uint32 score1 = 2;
  if (has_score1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->score1(), target);
  }

  // optional bool win1 = 3;
  if (has_win1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->win1(), target);
  }

  // optional uint32 charID2 = 4;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charid2(), target);
  }

  // optional uint32 score2 = 5;
  if (has_score2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->score2(), target);
  }

  // optional bool win2 = 6;
  if (has_win2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->win2(), target);
  }

  // optional bool pkWithFriend = 7;
  if (has_pkwithfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->pkwithfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOne2OnePVPFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID1 = 1;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid1());
    }

    // optional uint32 score1 = 2;
    if (has_score1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score1());
    }

    // optional bool win1 = 3;
    if (has_win1()) {
      total_size += 1 + 1;
    }

    // optional uint32 charID2 = 4;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid2());
    }

    // optional uint32 score2 = 5;
    if (has_score2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score2());
    }

    // optional bool win2 = 6;
    if (has_win2()) {
      total_size += 1 + 1;
    }

    // optional bool pkWithFriend = 7;
    if (has_pkwithfriend()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOne2OnePVPFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOne2OnePVPFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOne2OnePVPFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOne2OnePVPFinish::MergeFrom(const stOne2OnePVPFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_score1()) {
      set_score1(from.score1());
    }
    if (from.has_win1()) {
      set_win1(from.win1());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_score2()) {
      set_score2(from.score2());
    }
    if (from.has_win2()) {
      set_win2(from.win2());
    }
    if (from.has_pkwithfriend()) {
      set_pkwithfriend(from.pkwithfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOne2OnePVPFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOne2OnePVPFinish::CopyFrom(const stOne2OnePVPFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOne2OnePVPFinish::IsInitialized() const {

  return true;
}

void stOne2OnePVPFinish::Swap(stOne2OnePVPFinish* other) {
  if (other != this) {
    std::swap(charid1_, other->charid1_);
    std::swap(score1_, other->score1_);
    std::swap(win1_, other->win1_);
    std::swap(charid2_, other->charid2_);
    std::swap(score2_, other->score2_);
    std::swap(win2_, other->win2_);
    std::swap(pkwithfriend_, other->pkwithfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOne2OnePVPFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOne2OnePVPFinish_descriptor_;
  metadata.reflection = stOne2OnePVPFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stActivityConfig::kActivityIDFieldNumber;
const int stActivityConfig::kCofingFieldNumber;
#endif  // !_MSC_VER

stActivityConfig::stActivityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stActivityConfig::InitAsDefaultInstance() {
}

stActivityConfig::stActivityConfig(const stActivityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stActivityConfig::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0u;
  cofing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stActivityConfig::~stActivityConfig() {
  SharedDtor();
}

void stActivityConfig::SharedDtor() {
  if (cofing_ != &::google::protobuf::internal::kEmptyString) {
    delete cofing_;
  }
  if (this != default_instance_) {
  }
}

void stActivityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stActivityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityConfig_descriptor_;
}

const stActivityConfig& stActivityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stActivityConfig* stActivityConfig::default_instance_ = NULL;

stActivityConfig* stActivityConfig::New() const {
  return new stActivityConfig;
}

void stActivityConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0u;
    if (has_cofing()) {
      if (cofing_ != &::google::protobuf::internal::kEmptyString) {
        cofing_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stActivityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activityID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cofing;
        break;
      }

      // optional string cofing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cofing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cofing()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cofing().data(), this->cofing().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stActivityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activityid(), output);
  }

  // optional string cofing = 2;
  if (has_cofing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cofing().data(), this->cofing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->cofing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stActivityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activityID = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activityid(), target);
  }

  // optional string cofing = 2;
  if (has_cofing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cofing().data(), this->cofing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->cofing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stActivityConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activityID = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional string cofing = 2;
    if (has_cofing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cofing());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stActivityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stActivityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stActivityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stActivityConfig::MergeFrom(const stActivityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_cofing()) {
      set_cofing(from.cofing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stActivityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stActivityConfig::CopyFrom(const stActivityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stActivityConfig::IsInitialized() const {

  return true;
}

void stActivityConfig::Swap(stActivityConfig* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    std::swap(cofing_, other->cofing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stActivityConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stActivityConfig_descriptor_;
  metadata.reflection = stActivityConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynActivityConfig_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynActivityConfig_ProtoModID_descriptor_;
}
bool stSynActivityConfig_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynActivityConfig_ProtoModID stSynActivityConfig::ModID;
const stSynActivityConfig_ProtoModID stSynActivityConfig::ProtoModID_MIN;
const stSynActivityConfig_ProtoModID stSynActivityConfig::ProtoModID_MAX;
const int stSynActivityConfig::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynActivityConfig_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynActivityConfig_ProtoFunID_descriptor_;
}
bool stSynActivityConfig_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 44:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynActivityConfig_ProtoFunID stSynActivityConfig::FunID;
const stSynActivityConfig_ProtoFunID stSynActivityConfig::ProtoFunID_MIN;
const stSynActivityConfig_ProtoFunID stSynActivityConfig::ProtoFunID_MAX;
const int stSynActivityConfig::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynActivityConfig::kDataFieldNumber;
#endif  // !_MSC_VER

stSynActivityConfig::stSynActivityConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynActivityConfig::InitAsDefaultInstance() {
}

stSynActivityConfig::stSynActivityConfig(const stSynActivityConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynActivityConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynActivityConfig::~stSynActivityConfig() {
  SharedDtor();
}

void stSynActivityConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynActivityConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynActivityConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynActivityConfig_descriptor_;
}

const stSynActivityConfig& stSynActivityConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynActivityConfig* stSynActivityConfig::default_instance_ = NULL;

stSynActivityConfig* stSynActivityConfig::New() const {
  return new stSynActivityConfig;
}

void stSynActivityConfig::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynActivityConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stActivityConfig data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynActivityConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stActivityConfig data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynActivityConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stActivityConfig data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynActivityConfig::ByteSize() const {
  int total_size = 0;

  // repeated .Global.stActivityConfig data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynActivityConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynActivityConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynActivityConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynActivityConfig::MergeFrom(const stSynActivityConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynActivityConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynActivityConfig::CopyFrom(const stSynActivityConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynActivityConfig::IsInitialized() const {

  return true;
}

void stSynActivityConfig::Swap(stSynActivityConfig* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynActivityConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynActivityConfig_descriptor_;
  metadata.reflection = stSynActivityConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCaptureTreasureFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureTreasureFail_ProtoModID_descriptor_;
}
bool stCaptureTreasureFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCaptureTreasureFail_ProtoModID stCaptureTreasureFail::ModID;
const stCaptureTreasureFail_ProtoModID stCaptureTreasureFail::ProtoModID_MIN;
const stCaptureTreasureFail_ProtoModID stCaptureTreasureFail::ProtoModID_MAX;
const int stCaptureTreasureFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCaptureTreasureFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureTreasureFail_ProtoFunID_descriptor_;
}
bool stCaptureTreasureFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 45:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCaptureTreasureFail_ProtoFunID stCaptureTreasureFail::FunID;
const stCaptureTreasureFail_ProtoFunID stCaptureTreasureFail::ProtoFunID_MIN;
const stCaptureTreasureFail_ProtoFunID stCaptureTreasureFail::ProtoFunID_MAX;
const int stCaptureTreasureFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCaptureTreasureFail::kCharIDFieldNumber;
#endif  // !_MSC_VER

stCaptureTreasureFail::stCaptureTreasureFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCaptureTreasureFail::InitAsDefaultInstance() {
}

stCaptureTreasureFail::stCaptureTreasureFail(const stCaptureTreasureFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCaptureTreasureFail::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCaptureTreasureFail::~stCaptureTreasureFail() {
  SharedDtor();
}

void stCaptureTreasureFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCaptureTreasureFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCaptureTreasureFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCaptureTreasureFail_descriptor_;
}

const stCaptureTreasureFail& stCaptureTreasureFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCaptureTreasureFail* stCaptureTreasureFail::default_instance_ = NULL;

stCaptureTreasureFail* stCaptureTreasureFail::New() const {
  return new stCaptureTreasureFail;
}

void stCaptureTreasureFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCaptureTreasureFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCaptureTreasureFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCaptureTreasureFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCaptureTreasureFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCaptureTreasureFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCaptureTreasureFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCaptureTreasureFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCaptureTreasureFail::MergeFrom(const stCaptureTreasureFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCaptureTreasureFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCaptureTreasureFail::CopyFrom(const stCaptureTreasureFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCaptureTreasureFail::IsInitialized() const {

  return true;
}

void stCaptureTreasureFail::Swap(stCaptureTreasureFail* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCaptureTreasureFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCaptureTreasureFail_descriptor_;
  metadata.reflection = stCaptureTreasureFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCharID2Rank::kCharIDFieldNumber;
const int stCharID2Rank::kRankFieldNumber;
#endif  // !_MSC_VER

stCharID2Rank::stCharID2Rank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCharID2Rank::InitAsDefaultInstance() {
}

stCharID2Rank::stCharID2Rank(const stCharID2Rank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCharID2Rank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCharID2Rank::~stCharID2Rank() {
  SharedDtor();
}

void stCharID2Rank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCharID2Rank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCharID2Rank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCharID2Rank_descriptor_;
}

const stCharID2Rank& stCharID2Rank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCharID2Rank* stCharID2Rank::default_instance_ = NULL;

stCharID2Rank* stCharID2Rank::New() const {
  return new stCharID2Rank;
}

void stCharID2Rank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCharID2Rank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCharID2Rank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCharID2Rank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCharID2Rank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCharID2Rank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCharID2Rank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCharID2Rank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCharID2Rank::MergeFrom(const stCharID2Rank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCharID2Rank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCharID2Rank::CopyFrom(const stCharID2Rank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCharID2Rank::IsInitialized() const {

  return true;
}

void stCharID2Rank::Swap(stCharID2Rank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCharID2Rank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCharID2Rank_descriptor_;
  metadata.reflection = stCharID2Rank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stRankModuleInfo::kModuleIDFieldNumber;
const int stRankModuleInfo::kCharID2RankFieldNumber;
#endif  // !_MSC_VER

stRankModuleInfo::stRankModuleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRankModuleInfo::InitAsDefaultInstance() {
}

stRankModuleInfo::stRankModuleInfo(const stRankModuleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRankModuleInfo::SharedCtor() {
  _cached_size_ = 0;
  moduleid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRankModuleInfo::~stRankModuleInfo() {
  SharedDtor();
}

void stRankModuleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRankModuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRankModuleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRankModuleInfo_descriptor_;
}

const stRankModuleInfo& stRankModuleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRankModuleInfo* stRankModuleInfo::default_instance_ = NULL;

stRankModuleInfo* stRankModuleInfo::New() const {
  return new stRankModuleInfo;
}

void stRankModuleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    moduleid_ = 0u;
  }
  charid2rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRankModuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 moduleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &moduleid_)));
          set_has_moduleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charID2Rank;
        break;
      }

      // repeated .Global.stCharID2Rank charID2Rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charID2Rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charid2rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charID2Rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRankModuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 moduleID = 1;
  if (has_moduleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->moduleid(), output);
  }

  // repeated .Global.stCharID2Rank charID2Rank = 2;
  for (int i = 0; i < this->charid2rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->charid2rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRankModuleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 moduleID = 1;
  if (has_moduleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->moduleid(), target);
  }

  // repeated .Global.stCharID2Rank charID2Rank = 2;
  for (int i = 0; i < this->charid2rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->charid2rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRankModuleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 moduleID = 1;
    if (has_moduleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->moduleid());
    }

  }
  // repeated .Global.stCharID2Rank charID2Rank = 2;
  total_size += 1 * this->charid2rank_size();
  for (int i = 0; i < this->charid2rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charid2rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRankModuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRankModuleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRankModuleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRankModuleInfo::MergeFrom(const stRankModuleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid2rank_.MergeFrom(from.charid2rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_moduleid()) {
      set_moduleid(from.moduleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRankModuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRankModuleInfo::CopyFrom(const stRankModuleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRankModuleInfo::IsInitialized() const {

  return true;
}

void stRankModuleInfo::Swap(stRankModuleInfo* other) {
  if (other != this) {
    std::swap(moduleid_, other->moduleid_);
    charid2rank_.Swap(&other->charid2rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRankModuleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRankModuleInfo_descriptor_;
  metadata.reflection = stRankModuleInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynRankModuleInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRankModuleInfo_ProtoModID_descriptor_;
}
bool stSynRankModuleInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRankModuleInfo_ProtoModID stSynRankModuleInfo::ModID;
const stSynRankModuleInfo_ProtoModID stSynRankModuleInfo::ProtoModID_MIN;
const stSynRankModuleInfo_ProtoModID stSynRankModuleInfo::ProtoModID_MAX;
const int stSynRankModuleInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynRankModuleInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRankModuleInfo_ProtoFunID_descriptor_;
}
bool stSynRankModuleInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 46:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRankModuleInfo_ProtoFunID stSynRankModuleInfo::FunID;
const stSynRankModuleInfo_ProtoFunID stSynRankModuleInfo::ProtoFunID_MIN;
const stSynRankModuleInfo_ProtoFunID stSynRankModuleInfo::ProtoFunID_MAX;
const int stSynRankModuleInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynRankModuleInfo::kDataFieldNumber;
#endif  // !_MSC_VER

stSynRankModuleInfo::stSynRankModuleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRankModuleInfo::InitAsDefaultInstance() {
}

stSynRankModuleInfo::stSynRankModuleInfo(const stSynRankModuleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRankModuleInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRankModuleInfo::~stSynRankModuleInfo() {
  SharedDtor();
}

void stSynRankModuleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRankModuleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRankModuleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRankModuleInfo_descriptor_;
}

const stSynRankModuleInfo& stSynRankModuleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynRankModuleInfo* stSynRankModuleInfo::default_instance_ = NULL;

stSynRankModuleInfo* stSynRankModuleInfo::New() const {
  return new stSynRankModuleInfo;
}

void stSynRankModuleInfo::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRankModuleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stRankModuleInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRankModuleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stRankModuleInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRankModuleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stRankModuleInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRankModuleInfo::ByteSize() const {
  int total_size = 0;

  // repeated .Global.stRankModuleInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRankModuleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRankModuleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRankModuleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRankModuleInfo::MergeFrom(const stSynRankModuleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRankModuleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRankModuleInfo::CopyFrom(const stSynRankModuleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRankModuleInfo::IsInitialized() const {

  return true;
}

void stSynRankModuleInfo::Swap(stSynRankModuleInfo* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRankModuleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRankModuleInfo_descriptor_;
  metadata.reflection = stSynRankModuleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGiftBagReward::kItemIDFieldNumber;
const int stGiftBagReward::kNumFieldNumber;
#endif  // !_MSC_VER

stGiftBagReward::stGiftBagReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiftBagReward::InitAsDefaultInstance() {
}

stGiftBagReward::stGiftBagReward(const stGiftBagReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiftBagReward::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiftBagReward::~stGiftBagReward() {
  SharedDtor();
}

void stGiftBagReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiftBagReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiftBagReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiftBagReward_descriptor_;
}

const stGiftBagReward& stGiftBagReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGiftBagReward* stGiftBagReward::default_instance_ = NULL;

stGiftBagReward* stGiftBagReward::New() const {
  return new stGiftBagReward;
}

void stGiftBagReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiftBagReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiftBagReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiftBagReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiftBagReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiftBagReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiftBagReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiftBagReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiftBagReward::MergeFrom(const stGiftBagReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiftBagReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiftBagReward::CopyFrom(const stGiftBagReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiftBagReward::IsInitialized() const {

  return true;
}

void stGiftBagReward::Swap(stGiftBagReward* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiftBagReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiftBagReward_descriptor_;
  metadata.reflection = stGiftBagReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGiveGiftBagReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveGiftBagReward_ProtoModID_descriptor_;
}
bool stGiveGiftBagReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveGiftBagReward_ProtoModID stGiveGiftBagReward::ModID;
const stGiveGiftBagReward_ProtoModID stGiveGiftBagReward::ProtoModID_MIN;
const stGiveGiftBagReward_ProtoModID stGiveGiftBagReward::ProtoModID_MAX;
const int stGiveGiftBagReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveGiftBagReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveGiftBagReward_ProtoFunID_descriptor_;
}
bool stGiveGiftBagReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 47:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveGiftBagReward_ProtoFunID stGiveGiftBagReward::FunID;
const stGiveGiftBagReward_ProtoFunID stGiveGiftBagReward::ProtoFunID_MIN;
const stGiveGiftBagReward_ProtoFunID stGiveGiftBagReward::ProtoFunID_MAX;
const int stGiveGiftBagReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGiveGiftBagReward::kCharIDFieldNumber;
const int stGiveGiftBagReward::kRewardsFieldNumber;
#endif  // !_MSC_VER

stGiveGiftBagReward::stGiveGiftBagReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiveGiftBagReward::InitAsDefaultInstance() {
}

stGiveGiftBagReward::stGiveGiftBagReward(const stGiveGiftBagReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiveGiftBagReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiveGiftBagReward::~stGiveGiftBagReward() {
  SharedDtor();
}

void stGiveGiftBagReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiveGiftBagReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiveGiftBagReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveGiftBagReward_descriptor_;
}

const stGiveGiftBagReward& stGiveGiftBagReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGiveGiftBagReward* stGiveGiftBagReward::default_instance_ = NULL;

stGiveGiftBagReward* stGiveGiftBagReward::New() const {
  return new stGiveGiftBagReward;
}

void stGiveGiftBagReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  rewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiveGiftBagReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        break;
      }

      // repeated .Global.stGiftBagReward rewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiveGiftBagReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .Global.stGiftBagReward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiveGiftBagReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .Global.stGiftBagReward rewards = 2;
  for (int i = 0; i < this->rewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiveGiftBagReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .Global.stGiftBagReward rewards = 2;
  total_size += 1 * this->rewards_size();
  for (int i = 0; i < this->rewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiveGiftBagReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiveGiftBagReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiveGiftBagReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiveGiftBagReward::MergeFrom(const stGiveGiftBagReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_.MergeFrom(from.rewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiveGiftBagReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiveGiftBagReward::CopyFrom(const stGiveGiftBagReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiveGiftBagReward::IsInitialized() const {

  return true;
}

void stGiveGiftBagReward::Swap(stGiveGiftBagReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    rewards_.Swap(&other->rewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiveGiftBagReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiveGiftBagReward_descriptor_;
  metadata.reflection = stGiveGiftBagReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyGameSvrCfg_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGameSvrCfg_ProtoModID_descriptor_;
}
bool stNotifyGameSvrCfg_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGameSvrCfg_ProtoModID stNotifyGameSvrCfg::ModID;
const stNotifyGameSvrCfg_ProtoModID stNotifyGameSvrCfg::ProtoModID_MIN;
const stNotifyGameSvrCfg_ProtoModID stNotifyGameSvrCfg::ProtoModID_MAX;
const int stNotifyGameSvrCfg::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyGameSvrCfg_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGameSvrCfg_ProtoFunID_descriptor_;
}
bool stNotifyGameSvrCfg_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 48:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGameSvrCfg_ProtoFunID stNotifyGameSvrCfg::FunID;
const stNotifyGameSvrCfg_ProtoFunID stNotifyGameSvrCfg::ProtoFunID_MIN;
const stNotifyGameSvrCfg_ProtoFunID stNotifyGameSvrCfg::ProtoFunID_MAX;
const int stNotifyGameSvrCfg::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyGameSvrCfg::kCfgPairFieldNumber;
#endif  // !_MSC_VER

stNotifyGameSvrCfg::stNotifyGameSvrCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyGameSvrCfg::InitAsDefaultInstance() {
}

stNotifyGameSvrCfg::stNotifyGameSvrCfg(const stNotifyGameSvrCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyGameSvrCfg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyGameSvrCfg::~stNotifyGameSvrCfg() {
  SharedDtor();
}

void stNotifyGameSvrCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyGameSvrCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyGameSvrCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGameSvrCfg_descriptor_;
}

const stNotifyGameSvrCfg& stNotifyGameSvrCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyGameSvrCfg* stNotifyGameSvrCfg::default_instance_ = NULL;

stNotifyGameSvrCfg* stNotifyGameSvrCfg::New() const {
  return new stNotifyGameSvrCfg;
}

void stNotifyGameSvrCfg::Clear() {
  cfgpair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyGameSvrCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stServerCfgPair cfgPair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfgPair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cfgpair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cfgPair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyGameSvrCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stServerCfgPair cfgPair = 1;
  for (int i = 0; i < this->cfgpair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cfgpair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyGameSvrCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stServerCfgPair cfgPair = 1;
  for (int i = 0; i < this->cfgpair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cfgpair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyGameSvrCfg::ByteSize() const {
  int total_size = 0;

  // repeated .Global.stServerCfgPair cfgPair = 1;
  total_size += 1 * this->cfgpair_size();
  for (int i = 0; i < this->cfgpair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cfgpair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyGameSvrCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyGameSvrCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyGameSvrCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyGameSvrCfg::MergeFrom(const stNotifyGameSvrCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfgpair_.MergeFrom(from.cfgpair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyGameSvrCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyGameSvrCfg::CopyFrom(const stNotifyGameSvrCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyGameSvrCfg::IsInitialized() const {

  return true;
}

void stNotifyGameSvrCfg::Swap(stNotifyGameSvrCfg* other) {
  if (other != this) {
    cfgpair_.Swap(&other->cfgpair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyGameSvrCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyGameSvrCfg_descriptor_;
  metadata.reflection = stNotifyGameSvrCfg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyCurEquipInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCurEquipInfo_ProtoModID_descriptor_;
}
bool stNotifyCurEquipInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyCurEquipInfo_ProtoModID stNotifyCurEquipInfo::ModID;
const stNotifyCurEquipInfo_ProtoModID stNotifyCurEquipInfo::ProtoModID_MIN;
const stNotifyCurEquipInfo_ProtoModID stNotifyCurEquipInfo::ProtoModID_MAX;
const int stNotifyCurEquipInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyCurEquipInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCurEquipInfo_ProtoFunID_descriptor_;
}
bool stNotifyCurEquipInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 49:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyCurEquipInfo_ProtoFunID stNotifyCurEquipInfo::FunID;
const stNotifyCurEquipInfo_ProtoFunID stNotifyCurEquipInfo::ProtoFunID_MIN;
const stNotifyCurEquipInfo_ProtoFunID stNotifyCurEquipInfo::ProtoFunID_MAX;
const int stNotifyCurEquipInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyCurEquipInfo::kCharIDFieldNumber;
const int stNotifyCurEquipInfo::kIndexFieldNumber;
const int stNotifyCurEquipInfo::kItemIDFieldNumber;
const int stNotifyCurEquipInfo::kEffectIDFieldNumber;
#endif  // !_MSC_VER

stNotifyCurEquipInfo::stNotifyCurEquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyCurEquipInfo::InitAsDefaultInstance() {
}

stNotifyCurEquipInfo::stNotifyCurEquipInfo(const stNotifyCurEquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyCurEquipInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  index_ = 0u;
  itemid_ = 0u;
  effectid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyCurEquipInfo::~stNotifyCurEquipInfo() {
  SharedDtor();
}

void stNotifyCurEquipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyCurEquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyCurEquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCurEquipInfo_descriptor_;
}

const stNotifyCurEquipInfo& stNotifyCurEquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyCurEquipInfo* stNotifyCurEquipInfo::default_instance_ = NULL;

stNotifyCurEquipInfo* stNotifyCurEquipInfo::New() const {
  return new stNotifyCurEquipInfo;
}

void stNotifyCurEquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    index_ = 0u;
    itemid_ = 0u;
    effectid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyCurEquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyCurEquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional uint32 itemID = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional uint32 effectID = 4;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->effectid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyCurEquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional uint32 itemID = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 effectID = 4;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->effectid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyCurEquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

    // optional uint32 itemID = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 effectID = 4;
    if (has_effectid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyCurEquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyCurEquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyCurEquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyCurEquipInfo::MergeFrom(const stNotifyCurEquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyCurEquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyCurEquipInfo::CopyFrom(const stNotifyCurEquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyCurEquipInfo::IsInitialized() const {

  return true;
}

void stNotifyCurEquipInfo::Swap(stNotifyCurEquipInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(index_, other->index_);
    std::swap(itemid_, other->itemid_);
    std::swap(effectid_, other->effectid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyCurEquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyCurEquipInfo_descriptor_;
  metadata.reflection = stNotifyCurEquipInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReloginGame_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReloginGame_ProtoModID_descriptor_;
}
bool stReloginGame_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReloginGame_ProtoModID stReloginGame::ModID;
const stReloginGame_ProtoModID stReloginGame::ProtoModID_MIN;
const stReloginGame_ProtoModID stReloginGame::ProtoModID_MAX;
const int stReloginGame::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReloginGame_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReloginGame_ProtoFunID_descriptor_;
}
bool stReloginGame_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 50:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReloginGame_ProtoFunID stReloginGame::FunID;
const stReloginGame_ProtoFunID stReloginGame::ProtoFunID_MIN;
const stReloginGame_ProtoFunID stReloginGame::ProtoFunID_MAX;
const int stReloginGame::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReloginGame::kAccountFieldNumber;
const int stReloginGame::kCharIDFieldNumber;
const int stReloginGame::kIpFieldNumber;
const int stReloginGame::kDeviceFieldNumber;
#endif  // !_MSC_VER

stReloginGame::stReloginGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReloginGame::InitAsDefaultInstance() {
}

stReloginGame::stReloginGame(const stReloginGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReloginGame::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReloginGame::~stReloginGame() {
  SharedDtor();
}

void stReloginGame::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void stReloginGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReloginGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReloginGame_descriptor_;
}

const stReloginGame& stReloginGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReloginGame* stReloginGame::default_instance_ = NULL;

stReloginGame* stReloginGame::New() const {
  return new stReloginGame;
}

void stReloginGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    charid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReloginGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional string device = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReloginGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional string device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReloginGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional string device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReloginGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string device = 4;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReloginGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReloginGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReloginGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReloginGame::MergeFrom(const stReloginGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReloginGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReloginGame::CopyFrom(const stReloginGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReloginGame::IsInitialized() const {

  return true;
}

void stReloginGame::Swap(stReloginGame* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(charid_, other->charid_);
    std::swap(ip_, other->ip_);
    std::swap(device_, other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReloginGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReloginGame_descriptor_;
  metadata.reflection = stReloginGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stFirstKillBaseInfo::kCharIDFieldNumber;
const int stFirstKillBaseInfo::kNameFieldNumber;
const int stFirstKillBaseInfo::kJobFieldNumber;
const int stFirstKillBaseInfo::kSexFieldNumber;
const int stFirstKillBaseInfo::kLevelFieldNumber;
const int stFirstKillBaseInfo::kBattlePowerFieldNumber;
const int stFirstKillBaseInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stFirstKillBaseInfo::stFirstKillBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFirstKillBaseInfo::InitAsDefaultInstance() {
}

stFirstKillBaseInfo::stFirstKillBaseInfo(const stFirstKillBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFirstKillBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  battlepower_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFirstKillBaseInfo::~stFirstKillBaseInfo() {
  SharedDtor();
}

void stFirstKillBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stFirstKillBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFirstKillBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFirstKillBaseInfo_descriptor_;
}

const stFirstKillBaseInfo& stFirstKillBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stFirstKillBaseInfo* stFirstKillBaseInfo::default_instance_ = NULL;

stFirstKillBaseInfo* stFirstKillBaseInfo::New() const {
  return new stFirstKillBaseInfo;
}

void stFirstKillBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    battlepower_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFirstKillBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFirstKillBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battlepower(), output);
  }

  // optional uint32 photoID = 7;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFirstKillBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battlepower(), target);
  }

  // optional uint32 photoID = 7;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFirstKillBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 6;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 photoID = 7;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFirstKillBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFirstKillBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFirstKillBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFirstKillBaseInfo::MergeFrom(const stFirstKillBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFirstKillBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFirstKillBaseInfo::CopyFrom(const stFirstKillBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFirstKillBaseInfo::IsInitialized() const {

  return true;
}

void stFirstKillBaseInfo::Swap(stFirstKillBaseInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFirstKillBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFirstKillBaseInfo_descriptor_;
  metadata.reflection = stFirstKillBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stTeamCopyMapFinish_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamCopyMapFinish_ProtoModID_descriptor_;
}
bool stTeamCopyMapFinish_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTeamCopyMapFinish_ProtoModID stTeamCopyMapFinish::ModID;
const stTeamCopyMapFinish_ProtoModID stTeamCopyMapFinish::ProtoModID_MIN;
const stTeamCopyMapFinish_ProtoModID stTeamCopyMapFinish::ProtoModID_MAX;
const int stTeamCopyMapFinish::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stTeamCopyMapFinish_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamCopyMapFinish_ProtoFunID_descriptor_;
}
bool stTeamCopyMapFinish_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 51:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTeamCopyMapFinish_ProtoFunID stTeamCopyMapFinish::FunID;
const stTeamCopyMapFinish_ProtoFunID stTeamCopyMapFinish::ProtoFunID_MIN;
const stTeamCopyMapFinish_ProtoFunID stTeamCopyMapFinish::ProtoFunID_MAX;
const int stTeamCopyMapFinish::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stTeamCopyMapFinish::kCopymapIDFieldNumber;
const int stTeamCopyMapFinish::kUserInfoFieldNumber;
#endif  // !_MSC_VER

stTeamCopyMapFinish::stTeamCopyMapFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTeamCopyMapFinish::InitAsDefaultInstance() {
}

stTeamCopyMapFinish::stTeamCopyMapFinish(const stTeamCopyMapFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTeamCopyMapFinish::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTeamCopyMapFinish::~stTeamCopyMapFinish() {
  SharedDtor();
}

void stTeamCopyMapFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stTeamCopyMapFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTeamCopyMapFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamCopyMapFinish_descriptor_;
}

const stTeamCopyMapFinish& stTeamCopyMapFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stTeamCopyMapFinish* stTeamCopyMapFinish::default_instance_ = NULL;

stTeamCopyMapFinish* stTeamCopyMapFinish::New() const {
  return new stTeamCopyMapFinish;
}

void stTeamCopyMapFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
  }
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTeamCopyMapFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userInfo;
        break;
      }

      // repeated .Global.stFirstKillBaseInfo userInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTeamCopyMapFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  // repeated .Global.stFirstKillBaseInfo userInfo = 2;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTeamCopyMapFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  // repeated .Global.stFirstKillBaseInfo userInfo = 2;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTeamCopyMapFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  // repeated .Global.stFirstKillBaseInfo userInfo = 2;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTeamCopyMapFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTeamCopyMapFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTeamCopyMapFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTeamCopyMapFinish::MergeFrom(const stTeamCopyMapFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTeamCopyMapFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTeamCopyMapFinish::CopyFrom(const stTeamCopyMapFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTeamCopyMapFinish::IsInitialized() const {

  return true;
}

void stTeamCopyMapFinish::Swap(stTeamCopyMapFinish* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTeamCopyMapFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTeamCopyMapFinish_descriptor_;
  metadata.reflection = stTeamCopyMapFinish_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserOnlineSendFirstKillInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserOnlineSendFirstKillInfo_ProtoModID_descriptor_;
}
bool stUserOnlineSendFirstKillInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserOnlineSendFirstKillInfo_ProtoModID stUserOnlineSendFirstKillInfo::ModID;
const stUserOnlineSendFirstKillInfo_ProtoModID stUserOnlineSendFirstKillInfo::ProtoModID_MIN;
const stUserOnlineSendFirstKillInfo_ProtoModID stUserOnlineSendFirstKillInfo::ProtoModID_MAX;
const int stUserOnlineSendFirstKillInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserOnlineSendFirstKillInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserOnlineSendFirstKillInfo_ProtoFunID_descriptor_;
}
bool stUserOnlineSendFirstKillInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 52:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserOnlineSendFirstKillInfo_ProtoFunID stUserOnlineSendFirstKillInfo::FunID;
const stUserOnlineSendFirstKillInfo_ProtoFunID stUserOnlineSendFirstKillInfo::ProtoFunID_MIN;
const stUserOnlineSendFirstKillInfo_ProtoFunID stUserOnlineSendFirstKillInfo::ProtoFunID_MAX;
const int stUserOnlineSendFirstKillInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserOnlineSendFirstKillInfo::kCharIDFieldNumber;
const int stUserOnlineSendFirstKillInfo::kCopymapIDFieldNumber;
#endif  // !_MSC_VER

stUserOnlineSendFirstKillInfo::stUserOnlineSendFirstKillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserOnlineSendFirstKillInfo::InitAsDefaultInstance() {
}

stUserOnlineSendFirstKillInfo::stUserOnlineSendFirstKillInfo(const stUserOnlineSendFirstKillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserOnlineSendFirstKillInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserOnlineSendFirstKillInfo::~stUserOnlineSendFirstKillInfo() {
  SharedDtor();
}

void stUserOnlineSendFirstKillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserOnlineSendFirstKillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserOnlineSendFirstKillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserOnlineSendFirstKillInfo_descriptor_;
}

const stUserOnlineSendFirstKillInfo& stUserOnlineSendFirstKillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUserOnlineSendFirstKillInfo* stUserOnlineSendFirstKillInfo::default_instance_ = NULL;

stUserOnlineSendFirstKillInfo* stUserOnlineSendFirstKillInfo::New() const {
  return new stUserOnlineSendFirstKillInfo;
}

void stUserOnlineSendFirstKillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  copymapid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserOnlineSendFirstKillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapID;
        break;
      }

      // repeated uint32 copymapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_copymapid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_copymapid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserOnlineSendFirstKillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated uint32 copymapID = 2;
  for (int i = 0; i < this->copymapid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->copymapid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserOnlineSendFirstKillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated uint32 copymapID = 2;
  for (int i = 0; i < this->copymapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->copymapid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserOnlineSendFirstKillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated uint32 copymapID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->copymapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->copymapid(i));
    }
    total_size += 1 * this->copymapid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserOnlineSendFirstKillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserOnlineSendFirstKillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserOnlineSendFirstKillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserOnlineSendFirstKillInfo::MergeFrom(const stUserOnlineSendFirstKillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  copymapid_.MergeFrom(from.copymapid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserOnlineSendFirstKillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserOnlineSendFirstKillInfo::CopyFrom(const stUserOnlineSendFirstKillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserOnlineSendFirstKillInfo::IsInitialized() const {

  return true;
}

void stUserOnlineSendFirstKillInfo::Swap(stUserOnlineSendFirstKillInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    copymapid_.Swap(&other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserOnlineSendFirstKillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserOnlineSendFirstKillInfo_descriptor_;
  metadata.reflection = stUserOnlineSendFirstKillInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stTeamFinishFirstKill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamFinishFirstKill_ProtoModID_descriptor_;
}
bool stTeamFinishFirstKill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTeamFinishFirstKill_ProtoModID stTeamFinishFirstKill::ModID;
const stTeamFinishFirstKill_ProtoModID stTeamFinishFirstKill::ProtoModID_MIN;
const stTeamFinishFirstKill_ProtoModID stTeamFinishFirstKill::ProtoModID_MAX;
const int stTeamFinishFirstKill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stTeamFinishFirstKill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamFinishFirstKill_ProtoFunID_descriptor_;
}
bool stTeamFinishFirstKill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 53:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stTeamFinishFirstKill_ProtoFunID stTeamFinishFirstKill::FunID;
const stTeamFinishFirstKill_ProtoFunID stTeamFinishFirstKill::ProtoFunID_MIN;
const stTeamFinishFirstKill_ProtoFunID stTeamFinishFirstKill::ProtoFunID_MAX;
const int stTeamFinishFirstKill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stTeamFinishFirstKill::kCopymapIDFieldNumber;
const int stTeamFinishFirstKill::kCharID1FieldNumber;
const int stTeamFinishFirstKill::kCharID2FieldNumber;
const int stTeamFinishFirstKill::kCharID3FieldNumber;
#endif  // !_MSC_VER

stTeamFinishFirstKill::stTeamFinishFirstKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTeamFinishFirstKill::InitAsDefaultInstance() {
}

stTeamFinishFirstKill::stTeamFinishFirstKill(const stTeamFinishFirstKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTeamFinishFirstKill::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  charid1_ = 0u;
  charid2_ = 0u;
  charid3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTeamFinishFirstKill::~stTeamFinishFirstKill() {
  SharedDtor();
}

void stTeamFinishFirstKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stTeamFinishFirstKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTeamFinishFirstKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeamFinishFirstKill_descriptor_;
}

const stTeamFinishFirstKill& stTeamFinishFirstKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stTeamFinishFirstKill* stTeamFinishFirstKill::default_instance_ = NULL;

stTeamFinishFirstKill* stTeamFinishFirstKill::New() const {
  return new stTeamFinishFirstKill;
}

void stTeamFinishFirstKill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    charid1_ = 0u;
    charid2_ = 0u;
    charid3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTeamFinishFirstKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID1;
        break;
      }

      // optional uint32 charID1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID2;
        break;
      }

      // optional uint32 charID2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charID3;
        break;
      }

      // optional uint32 charID3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid3_)));
          set_has_charid3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTeamFinishFirstKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  // optional uint32 charID1 = 2;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid1(), output);
  }

  // optional uint32 charID2 = 3;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid2(), output);
  }

  // optional uint32 charID3 = 4;
  if (has_charid3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charid3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTeamFinishFirstKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  // optional uint32 charID1 = 2;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid1(), target);
  }

  // optional uint32 charID2 = 3;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid2(), target);
  }

  // optional uint32 charID3 = 4;
  if (has_charid3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charid3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTeamFinishFirstKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional uint32 charID1 = 2;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid1());
    }

    // optional uint32 charID2 = 3;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid2());
    }

    // optional uint32 charID3 = 4;
    if (has_charid3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTeamFinishFirstKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTeamFinishFirstKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTeamFinishFirstKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTeamFinishFirstKill::MergeFrom(const stTeamFinishFirstKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_charid3()) {
      set_charid3(from.charid3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTeamFinishFirstKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTeamFinishFirstKill::CopyFrom(const stTeamFinishFirstKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTeamFinishFirstKill::IsInitialized() const {

  return true;
}

void stTeamFinishFirstKill::Swap(stTeamFinishFirstKill* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(charid1_, other->charid1_);
    std::swap(charid2_, other->charid2_);
    std::swap(charid3_, other->charid3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTeamFinishFirstKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTeamFinishFirstKill_descriptor_;
  metadata.reflection = stTeamFinishFirstKill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSetClearWorldBossTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetClearWorldBossTime_ProtoModID_descriptor_;
}
bool stSetClearWorldBossTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetClearWorldBossTime_ProtoModID stSetClearWorldBossTime::ModID;
const stSetClearWorldBossTime_ProtoModID stSetClearWorldBossTime::ProtoModID_MIN;
const stSetClearWorldBossTime_ProtoModID stSetClearWorldBossTime::ProtoModID_MAX;
const int stSetClearWorldBossTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSetClearWorldBossTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetClearWorldBossTime_ProtoFunID_descriptor_;
}
bool stSetClearWorldBossTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetClearWorldBossTime_ProtoFunID stSetClearWorldBossTime::FunID;
const stSetClearWorldBossTime_ProtoFunID stSetClearWorldBossTime::ProtoFunID_MIN;
const stSetClearWorldBossTime_ProtoFunID stSetClearWorldBossTime::ProtoFunID_MAX;
const int stSetClearWorldBossTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSetClearWorldBossTime::kCharIDFieldNumber;
#endif  // !_MSC_VER

stSetClearWorldBossTime::stSetClearWorldBossTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSetClearWorldBossTime::InitAsDefaultInstance() {
}

stSetClearWorldBossTime::stSetClearWorldBossTime(const stSetClearWorldBossTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSetClearWorldBossTime::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSetClearWorldBossTime::~stSetClearWorldBossTime() {
  SharedDtor();
}

void stSetClearWorldBossTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSetClearWorldBossTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSetClearWorldBossTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetClearWorldBossTime_descriptor_;
}

const stSetClearWorldBossTime& stSetClearWorldBossTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSetClearWorldBossTime* stSetClearWorldBossTime::default_instance_ = NULL;

stSetClearWorldBossTime* stSetClearWorldBossTime::New() const {
  return new stSetClearWorldBossTime;
}

void stSetClearWorldBossTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSetClearWorldBossTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSetClearWorldBossTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSetClearWorldBossTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSetClearWorldBossTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSetClearWorldBossTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSetClearWorldBossTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSetClearWorldBossTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSetClearWorldBossTime::MergeFrom(const stSetClearWorldBossTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSetClearWorldBossTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSetClearWorldBossTime::CopyFrom(const stSetClearWorldBossTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSetClearWorldBossTime::IsInitialized() const {

  return true;
}

void stSetClearWorldBossTime::Swap(stSetClearWorldBossTime* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSetClearWorldBossTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSetClearWorldBossTime_descriptor_;
  metadata.reflection = stSetClearWorldBossTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSetWorldBossBuyNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetWorldBossBuyNum_ProtoModID_descriptor_;
}
bool stSetWorldBossBuyNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetWorldBossBuyNum_ProtoModID stSetWorldBossBuyNum::ModID;
const stSetWorldBossBuyNum_ProtoModID stSetWorldBossBuyNum::ProtoModID_MIN;
const stSetWorldBossBuyNum_ProtoModID stSetWorldBossBuyNum::ProtoModID_MAX;
const int stSetWorldBossBuyNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSetWorldBossBuyNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetWorldBossBuyNum_ProtoFunID_descriptor_;
}
bool stSetWorldBossBuyNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 55:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetWorldBossBuyNum_ProtoFunID stSetWorldBossBuyNum::FunID;
const stSetWorldBossBuyNum_ProtoFunID stSetWorldBossBuyNum::ProtoFunID_MIN;
const stSetWorldBossBuyNum_ProtoFunID stSetWorldBossBuyNum::ProtoFunID_MAX;
const int stSetWorldBossBuyNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSetWorldBossBuyNum::kCharIDFieldNumber;
const int stSetWorldBossBuyNum::kBuyNumFieldNumber;
#endif  // !_MSC_VER

stSetWorldBossBuyNum::stSetWorldBossBuyNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSetWorldBossBuyNum::InitAsDefaultInstance() {
}

stSetWorldBossBuyNum::stSetWorldBossBuyNum(const stSetWorldBossBuyNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSetWorldBossBuyNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  buynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSetWorldBossBuyNum::~stSetWorldBossBuyNum() {
  SharedDtor();
}

void stSetWorldBossBuyNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSetWorldBossBuyNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSetWorldBossBuyNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetWorldBossBuyNum_descriptor_;
}

const stSetWorldBossBuyNum& stSetWorldBossBuyNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSetWorldBossBuyNum* stSetWorldBossBuyNum::default_instance_ = NULL;

stSetWorldBossBuyNum* stSetWorldBossBuyNum::New() const {
  return new stSetWorldBossBuyNum;
}

void stSetWorldBossBuyNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    buynum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSetWorldBossBuyNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buyNum;
        break;
      }

      // optional uint32 buyNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSetWorldBossBuyNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 buyNum = 2;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSetWorldBossBuyNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 buyNum = 2;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSetWorldBossBuyNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 buyNum = 2;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSetWorldBossBuyNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSetWorldBossBuyNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSetWorldBossBuyNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSetWorldBossBuyNum::MergeFrom(const stSetWorldBossBuyNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSetWorldBossBuyNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSetWorldBossBuyNum::CopyFrom(const stSetWorldBossBuyNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSetWorldBossBuyNum::IsInitialized() const {

  return true;
}

void stSetWorldBossBuyNum::Swap(stSetWorldBossBuyNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSetWorldBossBuyNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSetWorldBossBuyNum_descriptor_;
  metadata.reflection = stSetWorldBossBuyNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserDecSP_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserDecSP_ProtoModID_descriptor_;
}
bool stUserDecSP_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserDecSP_ProtoModID stUserDecSP::ModID;
const stUserDecSP_ProtoModID stUserDecSP::ProtoModID_MIN;
const stUserDecSP_ProtoModID stUserDecSP::ProtoModID_MAX;
const int stUserDecSP::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserDecSP_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserDecSP_ProtoFunID_descriptor_;
}
bool stUserDecSP_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 56:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserDecSP_ProtoFunID stUserDecSP::FunID;
const stUserDecSP_ProtoFunID stUserDecSP::ProtoFunID_MIN;
const stUserDecSP_ProtoFunID stUserDecSP::ProtoFunID_MAX;
const int stUserDecSP::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserDecSP::kCharIDFieldNumber;
const int stUserDecSP::kSpFieldNumber;
#endif  // !_MSC_VER

stUserDecSP::stUserDecSP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserDecSP::InitAsDefaultInstance() {
}

stUserDecSP::stUserDecSP(const stUserDecSP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserDecSP::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  sp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserDecSP::~stUserDecSP() {
  SharedDtor();
}

void stUserDecSP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserDecSP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserDecSP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserDecSP_descriptor_;
}

const stUserDecSP& stUserDecSP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUserDecSP* stUserDecSP::default_instance_ = NULL;

stUserDecSP* stUserDecSP::New() const {
  return new stUserDecSP;
}

void stUserDecSP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    sp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserDecSP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sp;
        break;
      }

      // optional uint32 sp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sp_)));
          set_has_sp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserDecSP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 sp = 2;
  if (has_sp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserDecSP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 sp = 2;
  if (has_sp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserDecSP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 sp = 2;
    if (has_sp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserDecSP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserDecSP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserDecSP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserDecSP::MergeFrom(const stUserDecSP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_sp()) {
      set_sp(from.sp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserDecSP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserDecSP::CopyFrom(const stUserDecSP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserDecSP::IsInitialized() const {

  return true;
}

void stUserDecSP::Swap(stUserDecSP* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(sp_, other->sp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserDecSP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserDecSP_descriptor_;
  metadata.reflection = stUserDecSP_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUsreDecLilian_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUsreDecLilian_ProtoModID_descriptor_;
}
bool stUsreDecLilian_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUsreDecLilian_ProtoModID stUsreDecLilian::ModID;
const stUsreDecLilian_ProtoModID stUsreDecLilian::ProtoModID_MIN;
const stUsreDecLilian_ProtoModID stUsreDecLilian::ProtoModID_MAX;
const int stUsreDecLilian::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUsreDecLilian_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUsreDecLilian_ProtoFunID_descriptor_;
}
bool stUsreDecLilian_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 57:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUsreDecLilian_ProtoFunID stUsreDecLilian::FunID;
const stUsreDecLilian_ProtoFunID stUsreDecLilian::ProtoFunID_MIN;
const stUsreDecLilian_ProtoFunID stUsreDecLilian::ProtoFunID_MAX;
const int stUsreDecLilian::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUsreDecLilian::kCharIDFieldNumber;
const int stUsreDecLilian::kLilianFieldNumber;
#endif  // !_MSC_VER

stUsreDecLilian::stUsreDecLilian()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUsreDecLilian::InitAsDefaultInstance() {
}

stUsreDecLilian::stUsreDecLilian(const stUsreDecLilian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUsreDecLilian::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  lilian_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUsreDecLilian::~stUsreDecLilian() {
  SharedDtor();
}

void stUsreDecLilian::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUsreDecLilian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUsreDecLilian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUsreDecLilian_descriptor_;
}

const stUsreDecLilian& stUsreDecLilian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUsreDecLilian* stUsreDecLilian::default_instance_ = NULL;

stUsreDecLilian* stUsreDecLilian::New() const {
  return new stUsreDecLilian;
}

void stUsreDecLilian::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    lilian_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUsreDecLilian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lilian;
        break;
      }

      // optional uint32 lilian = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lilian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lilian_)));
          set_has_lilian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUsreDecLilian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 lilian = 2;
  if (has_lilian()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lilian(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUsreDecLilian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 lilian = 2;
  if (has_lilian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lilian(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUsreDecLilian::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 lilian = 2;
    if (has_lilian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lilian());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUsreDecLilian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUsreDecLilian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUsreDecLilian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUsreDecLilian::MergeFrom(const stUsreDecLilian& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_lilian()) {
      set_lilian(from.lilian());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUsreDecLilian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUsreDecLilian::CopyFrom(const stUsreDecLilian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUsreDecLilian::IsInitialized() const {

  return true;
}

void stUsreDecLilian::Swap(stUsreDecLilian* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(lilian_, other->lilian_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUsreDecLilian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUsreDecLilian_descriptor_;
  metadata.reflection = stUsreDecLilian_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stUserDamagePair::kCharIDFieldNumber;
const int stUserDamagePair::kDamageFieldNumber;
#endif  // !_MSC_VER

stUserDamagePair::stUserDamagePair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserDamagePair::InitAsDefaultInstance() {
}

stUserDamagePair::stUserDamagePair(const stUserDamagePair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserDamagePair::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  damage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserDamagePair::~stUserDamagePair() {
  SharedDtor();
}

void stUserDamagePair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserDamagePair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserDamagePair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserDamagePair_descriptor_;
}

const stUserDamagePair& stUserDamagePair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUserDamagePair* stUserDamagePair::default_instance_ = NULL;

stUserDamagePair* stUserDamagePair::New() const {
  return new stUserDamagePair;
}

void stUserDamagePair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    damage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserDamagePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserDamagePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserDamagePair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserDamagePair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserDamagePair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserDamagePair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserDamagePair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserDamagePair::MergeFrom(const stUserDamagePair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserDamagePair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserDamagePair::CopyFrom(const stUserDamagePair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserDamagePair::IsInitialized() const {

  return true;
}

void stUserDamagePair::Swap(stUserDamagePair* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserDamagePair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserDamagePair_descriptor_;
  metadata.reflection = stUserDamagePair_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuildCopymapFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildCopymapFail_ProtoModID_descriptor_;
}
bool stGuildCopymapFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildCopymapFail_ProtoModID stGuildCopymapFail::ModID;
const stGuildCopymapFail_ProtoModID stGuildCopymapFail::ProtoModID_MIN;
const stGuildCopymapFail_ProtoModID stGuildCopymapFail::ProtoModID_MAX;
const int stGuildCopymapFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuildCopymapFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildCopymapFail_ProtoFunID_descriptor_;
}
bool stGuildCopymapFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 58:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildCopymapFail_ProtoFunID stGuildCopymapFail::FunID;
const stGuildCopymapFail_ProtoFunID stGuildCopymapFail::ProtoFunID_MIN;
const stGuildCopymapFail_ProtoFunID stGuildCopymapFail::ProtoFunID_MAX;
const int stGuildCopymapFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuildCopymapFail::kDamageInfoFieldNumber;
const int stGuildCopymapFail::kBossHPFieldNumber;
const int stGuildCopymapFail::kCopymapIDFieldNumber;
#endif  // !_MSC_VER

stGuildCopymapFail::stGuildCopymapFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuildCopymapFail::InitAsDefaultInstance() {
}

stGuildCopymapFail::stGuildCopymapFail(const stGuildCopymapFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuildCopymapFail::SharedCtor() {
  _cached_size_ = 0;
  bosshp_ = 0u;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuildCopymapFail::~stGuildCopymapFail() {
  SharedDtor();
}

void stGuildCopymapFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuildCopymapFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuildCopymapFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildCopymapFail_descriptor_;
}

const stGuildCopymapFail& stGuildCopymapFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGuildCopymapFail* stGuildCopymapFail::default_instance_ = NULL;

stGuildCopymapFail* stGuildCopymapFail::New() const {
  return new stGuildCopymapFail;
}

void stGuildCopymapFail::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    bosshp_ = 0u;
    copymapid_ = 0u;
  }
  damageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuildCopymapFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stUserDamagePair damageInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damageinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_damageInfo;
        if (input->ExpectTag(16)) goto parse_bossHP;
        break;
      }

      // optional uint32 bossHP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosshp_)));
          set_has_bosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copymapID;
        break;
      }

      // optional uint32 copymapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuildCopymapFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damageinfo(i), output);
  }

  // optional uint32 bossHP = 2;
  if (has_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bosshp(), output);
  }

  // optional uint32 copymapID = 3;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuildCopymapFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damageinfo(i), target);
  }

  // optional uint32 bossHP = 2;
  if (has_bosshp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bosshp(), target);
  }

  // optional uint32 copymapID = 3;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuildCopymapFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 bossHP = 2;
    if (has_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosshp());
    }

    // optional uint32 copymapID = 3;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  // repeated .Global.stUserDamagePair damageInfo = 1;
  total_size += 1 * this->damageinfo_size();
  for (int i = 0; i < this->damageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damageinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuildCopymapFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuildCopymapFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuildCopymapFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuildCopymapFail::MergeFrom(const stGuildCopymapFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  damageinfo_.MergeFrom(from.damageinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bosshp()) {
      set_bosshp(from.bosshp());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuildCopymapFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuildCopymapFail::CopyFrom(const stGuildCopymapFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuildCopymapFail::IsInitialized() const {

  return true;
}

void stGuildCopymapFail::Swap(stGuildCopymapFail* other) {
  if (other != this) {
    damageinfo_.Swap(&other->damageinfo_);
    std::swap(bosshp_, other->bosshp_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuildCopymapFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuildCopymapFail_descriptor_;
  metadata.reflection = stGuildCopymapFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuildCopymapKillBoss_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildCopymapKillBoss_ProtoModID_descriptor_;
}
bool stGuildCopymapKillBoss_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildCopymapKillBoss_ProtoModID stGuildCopymapKillBoss::ModID;
const stGuildCopymapKillBoss_ProtoModID stGuildCopymapKillBoss::ProtoModID_MIN;
const stGuildCopymapKillBoss_ProtoModID stGuildCopymapKillBoss::ProtoModID_MAX;
const int stGuildCopymapKillBoss::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuildCopymapKillBoss_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildCopymapKillBoss_ProtoFunID_descriptor_;
}
bool stGuildCopymapKillBoss_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 59:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildCopymapKillBoss_ProtoFunID stGuildCopymapKillBoss::FunID;
const stGuildCopymapKillBoss_ProtoFunID stGuildCopymapKillBoss::ProtoFunID_MIN;
const stGuildCopymapKillBoss_ProtoFunID stGuildCopymapKillBoss::ProtoFunID_MAX;
const int stGuildCopymapKillBoss::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuildCopymapKillBoss::kDamageInfoFieldNumber;
const int stGuildCopymapKillBoss::kCopymapIDFieldNumber;
const int stGuildCopymapKillBoss::kKillCharIDFieldNumber;
#endif  // !_MSC_VER

stGuildCopymapKillBoss::stGuildCopymapKillBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuildCopymapKillBoss::InitAsDefaultInstance() {
}

stGuildCopymapKillBoss::stGuildCopymapKillBoss(const stGuildCopymapKillBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuildCopymapKillBoss::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  killcharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuildCopymapKillBoss::~stGuildCopymapKillBoss() {
  SharedDtor();
}

void stGuildCopymapKillBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuildCopymapKillBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuildCopymapKillBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildCopymapKillBoss_descriptor_;
}

const stGuildCopymapKillBoss& stGuildCopymapKillBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGuildCopymapKillBoss* stGuildCopymapKillBoss::default_instance_ = NULL;

stGuildCopymapKillBoss* stGuildCopymapKillBoss::New() const {
  return new stGuildCopymapKillBoss;
}

void stGuildCopymapKillBoss::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    copymapid_ = 0u;
    killcharid_ = 0u;
  }
  damageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuildCopymapKillBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stUserDamagePair damageInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damageinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_damageInfo;
        if (input->ExpectTag(16)) goto parse_copymapID;
        break;
      }

      // optional uint32 copymapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_killCharID;
        break;
      }

      // optional uint32 killCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcharid_)));
          set_has_killcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuildCopymapKillBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damageinfo(i), output);
  }

  // optional uint32 copymapID = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }

  // optional uint32 killCharID = 3;
  if (has_killcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->killcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuildCopymapKillBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damageinfo(i), target);
  }

  // optional uint32 copymapID = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }

  // optional uint32 killCharID = 3;
  if (has_killcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->killcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuildCopymapKillBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 copymapID = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional uint32 killCharID = 3;
    if (has_killcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcharid());
    }

  }
  // repeated .Global.stUserDamagePair damageInfo = 1;
  total_size += 1 * this->damageinfo_size();
  for (int i = 0; i < this->damageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damageinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuildCopymapKillBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuildCopymapKillBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuildCopymapKillBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuildCopymapKillBoss::MergeFrom(const stGuildCopymapKillBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  damageinfo_.MergeFrom(from.damageinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_killcharid()) {
      set_killcharid(from.killcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuildCopymapKillBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuildCopymapKillBoss::CopyFrom(const stGuildCopymapKillBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuildCopymapKillBoss::IsInitialized() const {

  return true;
}

void stGuildCopymapKillBoss::Swap(stGuildCopymapKillBoss* other) {
  if (other != this) {
    damageinfo_.Swap(&other->damageinfo_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(killcharid_, other->killcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuildCopymapKillBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuildCopymapKillBoss_descriptor_;
  metadata.reflection = stGuildCopymapKillBoss_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stWorldBossCopymapFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorldBossCopymapFail_ProtoModID_descriptor_;
}
bool stWorldBossCopymapFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWorldBossCopymapFail_ProtoModID stWorldBossCopymapFail::ModID;
const stWorldBossCopymapFail_ProtoModID stWorldBossCopymapFail::ProtoModID_MIN;
const stWorldBossCopymapFail_ProtoModID stWorldBossCopymapFail::ProtoModID_MAX;
const int stWorldBossCopymapFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWorldBossCopymapFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorldBossCopymapFail_ProtoFunID_descriptor_;
}
bool stWorldBossCopymapFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 60:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWorldBossCopymapFail_ProtoFunID stWorldBossCopymapFail::FunID;
const stWorldBossCopymapFail_ProtoFunID stWorldBossCopymapFail::ProtoFunID_MIN;
const stWorldBossCopymapFail_ProtoFunID stWorldBossCopymapFail::ProtoFunID_MAX;
const int stWorldBossCopymapFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stWorldBossCopymapFail::kDamageInfoFieldNumber;
const int stWorldBossCopymapFail::kBossHPFieldNumber;
#endif  // !_MSC_VER

stWorldBossCopymapFail::stWorldBossCopymapFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWorldBossCopymapFail::InitAsDefaultInstance() {
}

stWorldBossCopymapFail::stWorldBossCopymapFail(const stWorldBossCopymapFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWorldBossCopymapFail::SharedCtor() {
  _cached_size_ = 0;
  bosshp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWorldBossCopymapFail::~stWorldBossCopymapFail() {
  SharedDtor();
}

void stWorldBossCopymapFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stWorldBossCopymapFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWorldBossCopymapFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorldBossCopymapFail_descriptor_;
}

const stWorldBossCopymapFail& stWorldBossCopymapFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stWorldBossCopymapFail* stWorldBossCopymapFail::default_instance_ = NULL;

stWorldBossCopymapFail* stWorldBossCopymapFail::New() const {
  return new stWorldBossCopymapFail;
}

void stWorldBossCopymapFail::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    bosshp_ = 0u;
  }
  damageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWorldBossCopymapFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stUserDamagePair damageInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damageinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_damageInfo;
        if (input->ExpectTag(16)) goto parse_bossHP;
        break;
      }

      // optional uint32 bossHP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosshp_)));
          set_has_bosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stWorldBossCopymapFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damageinfo(i), output);
  }

  // optional uint32 bossHP = 2;
  if (has_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bosshp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWorldBossCopymapFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damageinfo(i), target);
  }

  // optional uint32 bossHP = 2;
  if (has_bosshp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bosshp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWorldBossCopymapFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 bossHP = 2;
    if (has_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosshp());
    }

  }
  // repeated .Global.stUserDamagePair damageInfo = 1;
  total_size += 1 * this->damageinfo_size();
  for (int i = 0; i < this->damageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damageinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWorldBossCopymapFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWorldBossCopymapFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWorldBossCopymapFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWorldBossCopymapFail::MergeFrom(const stWorldBossCopymapFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  damageinfo_.MergeFrom(from.damageinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bosshp()) {
      set_bosshp(from.bosshp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWorldBossCopymapFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWorldBossCopymapFail::CopyFrom(const stWorldBossCopymapFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWorldBossCopymapFail::IsInitialized() const {

  return true;
}

void stWorldBossCopymapFail::Swap(stWorldBossCopymapFail* other) {
  if (other != this) {
    damageinfo_.Swap(&other->damageinfo_);
    std::swap(bosshp_, other->bosshp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWorldBossCopymapFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWorldBossCopymapFail_descriptor_;
  metadata.reflection = stWorldBossCopymapFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stKillWorldBoss_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillWorldBoss_ProtoModID_descriptor_;
}
bool stKillWorldBoss_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillWorldBoss_ProtoModID stKillWorldBoss::ModID;
const stKillWorldBoss_ProtoModID stKillWorldBoss::ProtoModID_MIN;
const stKillWorldBoss_ProtoModID stKillWorldBoss::ProtoModID_MAX;
const int stKillWorldBoss::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stKillWorldBoss_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillWorldBoss_ProtoFunID_descriptor_;
}
bool stKillWorldBoss_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 61:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillWorldBoss_ProtoFunID stKillWorldBoss::FunID;
const stKillWorldBoss_ProtoFunID stKillWorldBoss::ProtoFunID_MIN;
const stKillWorldBoss_ProtoFunID stKillWorldBoss::ProtoFunID_MAX;
const int stKillWorldBoss::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stKillWorldBoss::kDamageInfoFieldNumber;
const int stKillWorldBoss::kKillCharIDFieldNumber;
const int stKillWorldBoss::kBossIDFieldNumber;
#endif  // !_MSC_VER

stKillWorldBoss::stKillWorldBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stKillWorldBoss::InitAsDefaultInstance() {
}

stKillWorldBoss::stKillWorldBoss(const stKillWorldBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stKillWorldBoss::SharedCtor() {
  _cached_size_ = 0;
  killcharid_ = 0u;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stKillWorldBoss::~stKillWorldBoss() {
  SharedDtor();
}

void stKillWorldBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stKillWorldBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stKillWorldBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillWorldBoss_descriptor_;
}

const stKillWorldBoss& stKillWorldBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stKillWorldBoss* stKillWorldBoss::default_instance_ = NULL;

stKillWorldBoss* stKillWorldBoss::New() const {
  return new stKillWorldBoss;
}

void stKillWorldBoss::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    killcharid_ = 0u;
    bossid_ = 0u;
  }
  damageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stKillWorldBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stUserDamagePair damageInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damageinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_damageInfo;
        if (input->ExpectTag(16)) goto parse_killCharID;
        break;
      }

      // optional uint32 killCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killcharid_)));
          set_has_killcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bossID;
        break;
      }

      // optional uint32 bossID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stKillWorldBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damageinfo(i), output);
  }

  // optional uint32 killCharID = 2;
  if (has_killcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killcharid(), output);
  }

  // optional uint32 bossID = 3;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stKillWorldBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damageinfo(i), target);
  }

  // optional uint32 killCharID = 2;
  if (has_killcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killcharid(), target);
  }

  // optional uint32 bossID = 3;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stKillWorldBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 killCharID = 2;
    if (has_killcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killcharid());
    }

    // optional uint32 bossID = 3;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  // repeated .Global.stUserDamagePair damageInfo = 1;
  total_size += 1 * this->damageinfo_size();
  for (int i = 0; i < this->damageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damageinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stKillWorldBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stKillWorldBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stKillWorldBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stKillWorldBoss::MergeFrom(const stKillWorldBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  damageinfo_.MergeFrom(from.damageinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_killcharid()) {
      set_killcharid(from.killcharid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stKillWorldBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stKillWorldBoss::CopyFrom(const stKillWorldBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stKillWorldBoss::IsInitialized() const {

  return true;
}

void stKillWorldBoss::Swap(stKillWorldBoss* other) {
  if (other != this) {
    damageinfo_.Swap(&other->damageinfo_);
    std::swap(killcharid_, other->killcharid_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stKillWorldBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stKillWorldBoss_descriptor_;
  metadata.reflection = stKillWorldBoss_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDrawHeroScoreReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroScoreReward_ProtoModID_descriptor_;
}
bool stDrawHeroScoreReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroScoreReward_ProtoModID stDrawHeroScoreReward::ModID;
const stDrawHeroScoreReward_ProtoModID stDrawHeroScoreReward::ProtoModID_MIN;
const stDrawHeroScoreReward_ProtoModID stDrawHeroScoreReward::ProtoModID_MAX;
const int stDrawHeroScoreReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawHeroScoreReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroScoreReward_ProtoFunID_descriptor_;
}
bool stDrawHeroScoreReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 62:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroScoreReward_ProtoFunID stDrawHeroScoreReward::FunID;
const stDrawHeroScoreReward_ProtoFunID stDrawHeroScoreReward::ProtoFunID_MIN;
const stDrawHeroScoreReward_ProtoFunID stDrawHeroScoreReward::ProtoFunID_MAX;
const int stDrawHeroScoreReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDrawHeroScoreReward::kCharIDFieldNumber;
const int stDrawHeroScoreReward::kBoxIDFieldNumber;
#endif  // !_MSC_VER

stDrawHeroScoreReward::stDrawHeroScoreReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDrawHeroScoreReward::InitAsDefaultInstance() {
}

stDrawHeroScoreReward::stDrawHeroScoreReward(const stDrawHeroScoreReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDrawHeroScoreReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  boxid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDrawHeroScoreReward::~stDrawHeroScoreReward() {
  SharedDtor();
}

void stDrawHeroScoreReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDrawHeroScoreReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDrawHeroScoreReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroScoreReward_descriptor_;
}

const stDrawHeroScoreReward& stDrawHeroScoreReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDrawHeroScoreReward* stDrawHeroScoreReward::default_instance_ = NULL;

stDrawHeroScoreReward* stDrawHeroScoreReward::New() const {
  return new stDrawHeroScoreReward;
}

void stDrawHeroScoreReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    boxid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDrawHeroScoreReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxID;
        break;
      }

      // optional uint32 boxID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDrawHeroScoreReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 boxID = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDrawHeroScoreReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 boxID = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDrawHeroScoreReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 boxID = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDrawHeroScoreReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDrawHeroScoreReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDrawHeroScoreReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDrawHeroScoreReward::MergeFrom(const stDrawHeroScoreReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDrawHeroScoreReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDrawHeroScoreReward::CopyFrom(const stDrawHeroScoreReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDrawHeroScoreReward::IsInitialized() const {

  return true;
}

void stDrawHeroScoreReward::Swap(stDrawHeroScoreReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDrawHeroScoreReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDrawHeroScoreReward_descriptor_;
  metadata.reflection = stDrawHeroScoreReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroRankReward_ProtoModID_descriptor_;
}
bool stDrawHeroRankReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroRankReward_ProtoModID stDrawHeroRankReward::ModID;
const stDrawHeroRankReward_ProtoModID stDrawHeroRankReward::ProtoModID_MIN;
const stDrawHeroRankReward_ProtoModID stDrawHeroRankReward::ProtoModID_MAX;
const int stDrawHeroRankReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDrawHeroRankReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroRankReward_ProtoFunID_descriptor_;
}
bool stDrawHeroRankReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 63:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDrawHeroRankReward_ProtoFunID stDrawHeroRankReward::FunID;
const stDrawHeroRankReward_ProtoFunID stDrawHeroRankReward::ProtoFunID_MIN;
const stDrawHeroRankReward_ProtoFunID stDrawHeroRankReward::ProtoFunID_MAX;
const int stDrawHeroRankReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDrawHeroRankReward::kCharIDFieldNumber;
const int stDrawHeroRankReward::kBoxIDFieldNumber;
#endif  // !_MSC_VER

stDrawHeroRankReward::stDrawHeroRankReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDrawHeroRankReward::InitAsDefaultInstance() {
}

stDrawHeroRankReward::stDrawHeroRankReward(const stDrawHeroRankReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDrawHeroRankReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  boxid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDrawHeroRankReward::~stDrawHeroRankReward() {
  SharedDtor();
}

void stDrawHeroRankReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDrawHeroRankReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDrawHeroRankReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDrawHeroRankReward_descriptor_;
}

const stDrawHeroRankReward& stDrawHeroRankReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDrawHeroRankReward* stDrawHeroRankReward::default_instance_ = NULL;

stDrawHeroRankReward* stDrawHeroRankReward::New() const {
  return new stDrawHeroRankReward;
}

void stDrawHeroRankReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    boxid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDrawHeroRankReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxID;
        break;
      }

      // optional uint32 boxID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDrawHeroRankReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 boxID = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDrawHeroRankReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 boxID = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDrawHeroRankReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 boxID = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDrawHeroRankReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDrawHeroRankReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDrawHeroRankReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDrawHeroRankReward::MergeFrom(const stDrawHeroRankReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDrawHeroRankReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDrawHeroRankReward::CopyFrom(const stDrawHeroRankReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDrawHeroRankReward::IsInitialized() const {

  return true;
}

void stDrawHeroRankReward::Swap(stDrawHeroRankReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDrawHeroRankReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDrawHeroRankReward_descriptor_;
  metadata.reflection = stDrawHeroRankReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCompensantionItem::kItemIDFieldNumber;
const int stCompensantionItem::kNumFieldNumber;
#endif  // !_MSC_VER

stCompensantionItem::stCompensantionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCompensantionItem::InitAsDefaultInstance() {
}

stCompensantionItem::stCompensantionItem(const stCompensantionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCompensantionItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCompensantionItem::~stCompensantionItem() {
  SharedDtor();
}

void stCompensantionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCompensantionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCompensantionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCompensantionItem_descriptor_;
}

const stCompensantionItem& stCompensantionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCompensantionItem* stCompensantionItem::default_instance_ = NULL;

stCompensantionItem* stCompensantionItem::New() const {
  return new stCompensantionItem;
}

void stCompensantionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCompensantionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCompensantionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCompensantionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCompensantionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCompensantionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCompensantionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCompensantionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCompensantionItem::MergeFrom(const stCompensantionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCompensantionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCompensantionItem::CopyFrom(const stCompensantionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCompensantionItem::IsInitialized() const {

  return true;
}

void stCompensantionItem::Swap(stCompensantionItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCompensantionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCompensantionItem_descriptor_;
  metadata.reflection = stCompensantionItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSetCompensationID_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetCompensationID_ProtoModID_descriptor_;
}
bool stSetCompensationID_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetCompensationID_ProtoModID stSetCompensationID::ModID;
const stSetCompensationID_ProtoModID stSetCompensationID::ProtoModID_MIN;
const stSetCompensationID_ProtoModID stSetCompensationID::ProtoModID_MAX;
const int stSetCompensationID::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSetCompensationID_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetCompensationID_ProtoFunID_descriptor_;
}
bool stSetCompensationID_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 64:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetCompensationID_ProtoFunID stSetCompensationID::FunID;
const stSetCompensationID_ProtoFunID stSetCompensationID::ProtoFunID_MIN;
const stSetCompensationID_ProtoFunID stSetCompensationID::ProtoFunID_MAX;
const int stSetCompensationID::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSetCompensationID::kCharIDFieldNumber;
const int stSetCompensationID::kCompensationIDFieldNumber;
const int stSetCompensationID::kItemsFieldNumber;
#endif  // !_MSC_VER

stSetCompensationID::stSetCompensationID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSetCompensationID::InitAsDefaultInstance() {
}

stSetCompensationID::stSetCompensationID(const stSetCompensationID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSetCompensationID::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  compensationid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSetCompensationID::~stSetCompensationID() {
  SharedDtor();
}

void stSetCompensationID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSetCompensationID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSetCompensationID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetCompensationID_descriptor_;
}

const stSetCompensationID& stSetCompensationID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSetCompensationID* stSetCompensationID::default_instance_ = NULL;

stSetCompensationID* stSetCompensationID::New() const {
  return new stSetCompensationID;
}

void stSetCompensationID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    compensationid_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSetCompensationID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_compensationID;
        break;
      }

      // optional uint32 compensationID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_compensationID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &compensationid_)));
          set_has_compensationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .Global.stCompensantionItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSetCompensationID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 compensationID = 2;
  if (has_compensationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->compensationid(), output);
  }

  // repeated .Global.stCompensantionItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSetCompensationID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 compensationID = 2;
  if (has_compensationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->compensationid(), target);
  }

  // repeated .Global.stCompensantionItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSetCompensationID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 compensationID = 2;
    if (has_compensationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->compensationid());
    }

  }
  // repeated .Global.stCompensantionItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSetCompensationID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSetCompensationID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSetCompensationID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSetCompensationID::MergeFrom(const stSetCompensationID& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_compensationid()) {
      set_compensationid(from.compensationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSetCompensationID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSetCompensationID::CopyFrom(const stSetCompensationID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSetCompensationID::IsInitialized() const {

  return true;
}

void stSetCompensationID::Swap(stSetCompensationID* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(compensationid_, other->compensationid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSetCompensationID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSetCompensationID_descriptor_;
  metadata.reflection = stSetCompensationID_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSetOpenServerDay_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetOpenServerDay_ProtoModID_descriptor_;
}
bool stSetOpenServerDay_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetOpenServerDay_ProtoModID stSetOpenServerDay::ModID;
const stSetOpenServerDay_ProtoModID stSetOpenServerDay::ProtoModID_MIN;
const stSetOpenServerDay_ProtoModID stSetOpenServerDay::ProtoModID_MAX;
const int stSetOpenServerDay::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSetOpenServerDay_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetOpenServerDay_ProtoFunID_descriptor_;
}
bool stSetOpenServerDay_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 65:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetOpenServerDay_ProtoFunID stSetOpenServerDay::FunID;
const stSetOpenServerDay_ProtoFunID stSetOpenServerDay::ProtoFunID_MIN;
const stSetOpenServerDay_ProtoFunID stSetOpenServerDay::ProtoFunID_MAX;
const int stSetOpenServerDay::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSetOpenServerDay::kDayFieldNumber;
#endif  // !_MSC_VER

stSetOpenServerDay::stSetOpenServerDay()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSetOpenServerDay::InitAsDefaultInstance() {
}

stSetOpenServerDay::stSetOpenServerDay(const stSetOpenServerDay& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSetOpenServerDay::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSetOpenServerDay::~stSetOpenServerDay() {
  SharedDtor();
}

void stSetOpenServerDay::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSetOpenServerDay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSetOpenServerDay::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetOpenServerDay_descriptor_;
}

const stSetOpenServerDay& stSetOpenServerDay::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSetOpenServerDay* stSetOpenServerDay::default_instance_ = NULL;

stSetOpenServerDay* stSetOpenServerDay::New() const {
  return new stSetOpenServerDay;
}

void stSetOpenServerDay::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSetOpenServerDay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSetOpenServerDay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->day(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSetOpenServerDay::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->day(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSetOpenServerDay::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSetOpenServerDay::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSetOpenServerDay* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSetOpenServerDay*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSetOpenServerDay::MergeFrom(const stSetOpenServerDay& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSetOpenServerDay::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSetOpenServerDay::CopyFrom(const stSetOpenServerDay& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSetOpenServerDay::IsInitialized() const {

  return true;
}

void stSetOpenServerDay::Swap(stSetOpenServerDay* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSetOpenServerDay::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSetOpenServerDay_descriptor_;
  metadata.reflection = stSetOpenServerDay_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynGuildLv2AllMember_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildLv2AllMember_ProtoModID_descriptor_;
}
bool stSynGuildLv2AllMember_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGuildLv2AllMember_ProtoModID stSynGuildLv2AllMember::ModID;
const stSynGuildLv2AllMember_ProtoModID stSynGuildLv2AllMember::ProtoModID_MIN;
const stSynGuildLv2AllMember_ProtoModID stSynGuildLv2AllMember::ProtoModID_MAX;
const int stSynGuildLv2AllMember::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynGuildLv2AllMember_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildLv2AllMember_ProtoFunID_descriptor_;
}
bool stSynGuildLv2AllMember_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 66:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGuildLv2AllMember_ProtoFunID stSynGuildLv2AllMember::FunID;
const stSynGuildLv2AllMember_ProtoFunID stSynGuildLv2AllMember::ProtoFunID_MIN;
const stSynGuildLv2AllMember_ProtoFunID stSynGuildLv2AllMember::ProtoFunID_MAX;
const int stSynGuildLv2AllMember::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynGuildLv2AllMember::kMembersFieldNumber;
const int stSynGuildLv2AllMember::kGuildLvFieldNumber;
#endif  // !_MSC_VER

stSynGuildLv2AllMember::stSynGuildLv2AllMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynGuildLv2AllMember::InitAsDefaultInstance() {
}

stSynGuildLv2AllMember::stSynGuildLv2AllMember(const stSynGuildLv2AllMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynGuildLv2AllMember::SharedCtor() {
  _cached_size_ = 0;
  guildlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynGuildLv2AllMember::~stSynGuildLv2AllMember() {
  SharedDtor();
}

void stSynGuildLv2AllMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynGuildLv2AllMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynGuildLv2AllMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildLv2AllMember_descriptor_;
}

const stSynGuildLv2AllMember& stSynGuildLv2AllMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynGuildLv2AllMember* stSynGuildLv2AllMember::default_instance_ = NULL;

stSynGuildLv2AllMember* stSynGuildLv2AllMember::New() const {
  return new stSynGuildLv2AllMember;
}

void stSynGuildLv2AllMember::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    guildlv_ = 0u;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynGuildLv2AllMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 members = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_members:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_members())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_members())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_members;
        if (input->ExpectTag(16)) goto parse_guildLv;
        break;
      }

      // optional uint32 guildLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildlv_)));
          set_has_guildlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynGuildLv2AllMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->members(i), output);
  }

  // optional uint32 guildLv = 2;
  if (has_guildlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guildlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynGuildLv2AllMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 members = 1;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->members(i), target);
  }

  // optional uint32 guildLv = 2;
  if (has_guildlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guildlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynGuildLv2AllMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 guildLv = 2;
    if (has_guildlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildlv());
    }

  }
  // repeated uint32 members = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->members_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->members(i));
    }
    total_size += 1 * this->members_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynGuildLv2AllMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynGuildLv2AllMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynGuildLv2AllMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynGuildLv2AllMember::MergeFrom(const stSynGuildLv2AllMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_guildlv()) {
      set_guildlv(from.guildlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynGuildLv2AllMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynGuildLv2AllMember::CopyFrom(const stSynGuildLv2AllMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynGuildLv2AllMember::IsInitialized() const {

  return true;
}

void stSynGuildLv2AllMember::Swap(stSynGuildLv2AllMember* other) {
  if (other != this) {
    members_.Swap(&other->members_);
    std::swap(guildlv_, other->guildlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynGuildLv2AllMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynGuildLv2AllMember_descriptor_;
  metadata.reflection = stSynGuildLv2AllMember_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stForwardChgBadge_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardChgBadge_ProtoModID_descriptor_;
}
bool stForwardChgBadge_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForwardChgBadge_ProtoModID stForwardChgBadge::ModID;
const stForwardChgBadge_ProtoModID stForwardChgBadge::ProtoModID_MIN;
const stForwardChgBadge_ProtoModID stForwardChgBadge::ProtoModID_MAX;
const int stForwardChgBadge::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stForwardChgBadge_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardChgBadge_ProtoFunID_descriptor_;
}
bool stForwardChgBadge_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 67:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForwardChgBadge_ProtoFunID stForwardChgBadge::FunID;
const stForwardChgBadge_ProtoFunID stForwardChgBadge::ProtoFunID_MIN;
const stForwardChgBadge_ProtoFunID stForwardChgBadge::ProtoFunID_MAX;
const int stForwardChgBadge::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stForwardChgBadge::kCharIDFieldNumber;
const int stForwardChgBadge::kBadgeIDFieldNumber;
#endif  // !_MSC_VER

stForwardChgBadge::stForwardChgBadge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stForwardChgBadge::InitAsDefaultInstance() {
}

stForwardChgBadge::stForwardChgBadge(const stForwardChgBadge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stForwardChgBadge::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  badgeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForwardChgBadge::~stForwardChgBadge() {
  SharedDtor();
}

void stForwardChgBadge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stForwardChgBadge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForwardChgBadge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardChgBadge_descriptor_;
}

const stForwardChgBadge& stForwardChgBadge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stForwardChgBadge* stForwardChgBadge::default_instance_ = NULL;

stForwardChgBadge* stForwardChgBadge::New() const {
  return new stForwardChgBadge;
}

void stForwardChgBadge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    badgeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForwardChgBadge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_badgeID;
        break;
      }

      // optional uint32 badgeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badgeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badgeid_)));
          set_has_badgeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stForwardChgBadge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 badgeID = 2;
  if (has_badgeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->badgeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stForwardChgBadge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 badgeID = 2;
  if (has_badgeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->badgeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stForwardChgBadge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 badgeID = 2;
    if (has_badgeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badgeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForwardChgBadge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForwardChgBadge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForwardChgBadge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForwardChgBadge::MergeFrom(const stForwardChgBadge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_badgeid()) {
      set_badgeid(from.badgeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForwardChgBadge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForwardChgBadge::CopyFrom(const stForwardChgBadge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForwardChgBadge::IsInitialized() const {

  return true;
}

void stForwardChgBadge::Swap(stForwardChgBadge* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(badgeid_, other->badgeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForwardChgBadge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForwardChgBadge_descriptor_;
  metadata.reflection = stForwardChgBadge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stWorldBossBuyDecDiamond_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorldBossBuyDecDiamond_ProtoModID_descriptor_;
}
bool stWorldBossBuyDecDiamond_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWorldBossBuyDecDiamond_ProtoModID stWorldBossBuyDecDiamond::ModID;
const stWorldBossBuyDecDiamond_ProtoModID stWorldBossBuyDecDiamond::ProtoModID_MIN;
const stWorldBossBuyDecDiamond_ProtoModID stWorldBossBuyDecDiamond::ProtoModID_MAX;
const int stWorldBossBuyDecDiamond::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWorldBossBuyDecDiamond_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorldBossBuyDecDiamond_ProtoFunID_descriptor_;
}
bool stWorldBossBuyDecDiamond_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 68:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWorldBossBuyDecDiamond_ProtoFunID stWorldBossBuyDecDiamond::FunID;
const stWorldBossBuyDecDiamond_ProtoFunID stWorldBossBuyDecDiamond::ProtoFunID_MIN;
const stWorldBossBuyDecDiamond_ProtoFunID stWorldBossBuyDecDiamond::ProtoFunID_MAX;
const int stWorldBossBuyDecDiamond::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stWorldBossBuyDecDiamond::kCharIDFieldNumber;
const int stWorldBossBuyDecDiamond::kHasBuyNumFieldNumber;
#endif  // !_MSC_VER

stWorldBossBuyDecDiamond::stWorldBossBuyDecDiamond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWorldBossBuyDecDiamond::InitAsDefaultInstance() {
}

stWorldBossBuyDecDiamond::stWorldBossBuyDecDiamond(const stWorldBossBuyDecDiamond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWorldBossBuyDecDiamond::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  hasbuynum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWorldBossBuyDecDiamond::~stWorldBossBuyDecDiamond() {
  SharedDtor();
}

void stWorldBossBuyDecDiamond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stWorldBossBuyDecDiamond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWorldBossBuyDecDiamond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorldBossBuyDecDiamond_descriptor_;
}

const stWorldBossBuyDecDiamond& stWorldBossBuyDecDiamond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stWorldBossBuyDecDiamond* stWorldBossBuyDecDiamond::default_instance_ = NULL;

stWorldBossBuyDecDiamond* stWorldBossBuyDecDiamond::New() const {
  return new stWorldBossBuyDecDiamond;
}

void stWorldBossBuyDecDiamond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    hasbuynum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWorldBossBuyDecDiamond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hasBuyNum;
        break;
      }

      // optional uint32 hasBuyNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasBuyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hasbuynum_)));
          set_has_hasbuynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stWorldBossBuyDecDiamond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 hasBuyNum = 2;
  if (has_hasbuynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hasbuynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWorldBossBuyDecDiamond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 hasBuyNum = 2;
  if (has_hasbuynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hasbuynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWorldBossBuyDecDiamond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 hasBuyNum = 2;
    if (has_hasbuynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hasbuynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWorldBossBuyDecDiamond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWorldBossBuyDecDiamond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWorldBossBuyDecDiamond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWorldBossBuyDecDiamond::MergeFrom(const stWorldBossBuyDecDiamond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_hasbuynum()) {
      set_hasbuynum(from.hasbuynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWorldBossBuyDecDiamond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWorldBossBuyDecDiamond::CopyFrom(const stWorldBossBuyDecDiamond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWorldBossBuyDecDiamond::IsInitialized() const {

  return true;
}

void stWorldBossBuyDecDiamond::Swap(stWorldBossBuyDecDiamond* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(hasbuynum_, other->hasbuynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWorldBossBuyDecDiamond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWorldBossBuyDecDiamond_descriptor_;
  metadata.reflection = stWorldBossBuyDecDiamond_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuildDonateSuccess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildDonateSuccess_ProtoModID_descriptor_;
}
bool stGuildDonateSuccess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildDonateSuccess_ProtoModID stGuildDonateSuccess::ModID;
const stGuildDonateSuccess_ProtoModID stGuildDonateSuccess::ProtoModID_MIN;
const stGuildDonateSuccess_ProtoModID stGuildDonateSuccess::ProtoModID_MAX;
const int stGuildDonateSuccess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuildDonateSuccess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildDonateSuccess_ProtoFunID_descriptor_;
}
bool stGuildDonateSuccess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 69:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildDonateSuccess_ProtoFunID stGuildDonateSuccess::FunID;
const stGuildDonateSuccess_ProtoFunID stGuildDonateSuccess::ProtoFunID_MIN;
const stGuildDonateSuccess_ProtoFunID stGuildDonateSuccess::ProtoFunID_MAX;
const int stGuildDonateSuccess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuildDonateSuccess::kCharIDFieldNumber;
const int stGuildDonateSuccess::kTodayContributeFieldNumber;
const int stGuildDonateSuccess::kAddContributeFieldNumber;
const int stGuildDonateSuccess::kDonateTypeFieldNumber;
#endif  // !_MSC_VER

stGuildDonateSuccess::stGuildDonateSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuildDonateSuccess::InitAsDefaultInstance() {
}

stGuildDonateSuccess::stGuildDonateSuccess(const stGuildDonateSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuildDonateSuccess::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  todaycontribute_ = 0u;
  addcontribute_ = 0u;
  donatetype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuildDonateSuccess::~stGuildDonateSuccess() {
  SharedDtor();
}

void stGuildDonateSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuildDonateSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuildDonateSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildDonateSuccess_descriptor_;
}

const stGuildDonateSuccess& stGuildDonateSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGuildDonateSuccess* stGuildDonateSuccess::default_instance_ = NULL;

stGuildDonateSuccess* stGuildDonateSuccess::New() const {
  return new stGuildDonateSuccess;
}

void stGuildDonateSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    todaycontribute_ = 0u;
    addcontribute_ = 0u;
    donatetype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuildDonateSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_todayContribute;
        break;
      }

      // optional uint32 todayContribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaycontribute_)));
          set_has_todaycontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_addContribute;
        break;
      }

      // optional uint32 addContribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addcontribute_)));
          set_has_addcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_donateType;
        break;
      }

      // optional uint32 donateType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_donateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &donatetype_)));
          set_has_donatetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuildDonateSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 todayContribute = 2;
  if (has_todaycontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->todaycontribute(), output);
  }

  // optional uint32 addContribute = 3;
  if (has_addcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->addcontribute(), output);
  }

  // optional uint32 donateType = 4;
  if (has_donatetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->donatetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuildDonateSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 todayContribute = 2;
  if (has_todaycontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->todaycontribute(), target);
  }

  // optional uint32 addContribute = 3;
  if (has_addcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->addcontribute(), target);
  }

  // optional uint32 donateType = 4;
  if (has_donatetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->donatetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuildDonateSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 todayContribute = 2;
    if (has_todaycontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaycontribute());
    }

    // optional uint32 addContribute = 3;
    if (has_addcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addcontribute());
    }

    // optional uint32 donateType = 4;
    if (has_donatetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->donatetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuildDonateSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuildDonateSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuildDonateSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuildDonateSuccess::MergeFrom(const stGuildDonateSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_todaycontribute()) {
      set_todaycontribute(from.todaycontribute());
    }
    if (from.has_addcontribute()) {
      set_addcontribute(from.addcontribute());
    }
    if (from.has_donatetype()) {
      set_donatetype(from.donatetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuildDonateSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuildDonateSuccess::CopyFrom(const stGuildDonateSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuildDonateSuccess::IsInitialized() const {

  return true;
}

void stGuildDonateSuccess::Swap(stGuildDonateSuccess* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(todaycontribute_, other->todaycontribute_);
    std::swap(addcontribute_, other->addcontribute_);
    std::swap(donatetype_, other->donatetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuildDonateSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuildDonateSuccess_descriptor_;
  metadata.reflection = stGuildDonateSuccess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserLeaveWorldBoss_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLeaveWorldBoss_ProtoModID_descriptor_;
}
bool stUserLeaveWorldBoss_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLeaveWorldBoss_ProtoModID stUserLeaveWorldBoss::ModID;
const stUserLeaveWorldBoss_ProtoModID stUserLeaveWorldBoss::ProtoModID_MIN;
const stUserLeaveWorldBoss_ProtoModID stUserLeaveWorldBoss::ProtoModID_MAX;
const int stUserLeaveWorldBoss::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserLeaveWorldBoss_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLeaveWorldBoss_ProtoFunID_descriptor_;
}
bool stUserLeaveWorldBoss_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 70:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLeaveWorldBoss_ProtoFunID stUserLeaveWorldBoss::FunID;
const stUserLeaveWorldBoss_ProtoFunID stUserLeaveWorldBoss::ProtoFunID_MIN;
const stUserLeaveWorldBoss_ProtoFunID stUserLeaveWorldBoss::ProtoFunID_MAX;
const int stUserLeaveWorldBoss::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserLeaveWorldBoss::kCharIDFieldNumber;
#endif  // !_MSC_VER

stUserLeaveWorldBoss::stUserLeaveWorldBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserLeaveWorldBoss::InitAsDefaultInstance() {
}

stUserLeaveWorldBoss::stUserLeaveWorldBoss(const stUserLeaveWorldBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserLeaveWorldBoss::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserLeaveWorldBoss::~stUserLeaveWorldBoss() {
  SharedDtor();
}

void stUserLeaveWorldBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserLeaveWorldBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserLeaveWorldBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLeaveWorldBoss_descriptor_;
}

const stUserLeaveWorldBoss& stUserLeaveWorldBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUserLeaveWorldBoss* stUserLeaveWorldBoss::default_instance_ = NULL;

stUserLeaveWorldBoss* stUserLeaveWorldBoss::New() const {
  return new stUserLeaveWorldBoss;
}

void stUserLeaveWorldBoss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserLeaveWorldBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserLeaveWorldBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserLeaveWorldBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserLeaveWorldBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserLeaveWorldBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserLeaveWorldBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserLeaveWorldBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserLeaveWorldBoss::MergeFrom(const stUserLeaveWorldBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserLeaveWorldBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserLeaveWorldBoss::CopyFrom(const stUserLeaveWorldBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserLeaveWorldBoss::IsInitialized() const {

  return true;
}

void stUserLeaveWorldBoss::Swap(stUserLeaveWorldBoss* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserLeaveWorldBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserLeaveWorldBoss_descriptor_;
  metadata.reflection = stUserLeaveWorldBoss_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyGameAutoConnect_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGameAutoConnect_ProtoModID_descriptor_;
}
bool stNotifyGameAutoConnect_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGameAutoConnect_ProtoModID stNotifyGameAutoConnect::ModID;
const stNotifyGameAutoConnect_ProtoModID stNotifyGameAutoConnect::ProtoModID_MIN;
const stNotifyGameAutoConnect_ProtoModID stNotifyGameAutoConnect::ProtoModID_MAX;
const int stNotifyGameAutoConnect::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyGameAutoConnect_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGameAutoConnect_ProtoFunID_descriptor_;
}
bool stNotifyGameAutoConnect_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 71:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGameAutoConnect_ProtoFunID stNotifyGameAutoConnect::FunID;
const stNotifyGameAutoConnect_ProtoFunID stNotifyGameAutoConnect::ProtoFunID_MIN;
const stNotifyGameAutoConnect_ProtoFunID stNotifyGameAutoConnect::ProtoFunID_MAX;
const int stNotifyGameAutoConnect::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyGameAutoConnect::kAccountFieldNumber;
const int stNotifyGameAutoConnect::kCharIDFieldNumber;
const int stNotifyGameAutoConnect::kIpFieldNumber;
const int stNotifyGameAutoConnect::kDeviceFieldNumber;
#endif  // !_MSC_VER

stNotifyGameAutoConnect::stNotifyGameAutoConnect()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyGameAutoConnect::InitAsDefaultInstance() {
}

stNotifyGameAutoConnect::stNotifyGameAutoConnect(const stNotifyGameAutoConnect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyGameAutoConnect::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyGameAutoConnect::~stNotifyGameAutoConnect() {
  SharedDtor();
}

void stNotifyGameAutoConnect::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void stNotifyGameAutoConnect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyGameAutoConnect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGameAutoConnect_descriptor_;
}

const stNotifyGameAutoConnect& stNotifyGameAutoConnect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyGameAutoConnect* stNotifyGameAutoConnect::default_instance_ = NULL;

stNotifyGameAutoConnect* stNotifyGameAutoConnect::New() const {
  return new stNotifyGameAutoConnect;
}

void stNotifyGameAutoConnect::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    charid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyGameAutoConnect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional string device = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyGameAutoConnect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional string device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->device(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyGameAutoConnect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional string device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->device(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyGameAutoConnect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string device = 4;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyGameAutoConnect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyGameAutoConnect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyGameAutoConnect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyGameAutoConnect::MergeFrom(const stNotifyGameAutoConnect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyGameAutoConnect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyGameAutoConnect::CopyFrom(const stNotifyGameAutoConnect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyGameAutoConnect::IsInitialized() const {

  return true;
}

void stNotifyGameAutoConnect::Swap(stNotifyGameAutoConnect* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(charid_, other->charid_);
    std::swap(ip_, other->ip_);
    std::swap(device_, other->device_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyGameAutoConnect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyGameAutoConnect_descriptor_;
  metadata.reflection = stNotifyGameAutoConnect_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stForwardDrawHeroScoreReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardDrawHeroScoreReward_ProtoModID_descriptor_;
}
bool stForwardDrawHeroScoreReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForwardDrawHeroScoreReward_ProtoModID stForwardDrawHeroScoreReward::ModID;
const stForwardDrawHeroScoreReward_ProtoModID stForwardDrawHeroScoreReward::ProtoModID_MIN;
const stForwardDrawHeroScoreReward_ProtoModID stForwardDrawHeroScoreReward::ProtoModID_MAX;
const int stForwardDrawHeroScoreReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stForwardDrawHeroScoreReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardDrawHeroScoreReward_ProtoFunID_descriptor_;
}
bool stForwardDrawHeroScoreReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 72:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stForwardDrawHeroScoreReward_ProtoFunID stForwardDrawHeroScoreReward::FunID;
const stForwardDrawHeroScoreReward_ProtoFunID stForwardDrawHeroScoreReward::ProtoFunID_MIN;
const stForwardDrawHeroScoreReward_ProtoFunID stForwardDrawHeroScoreReward::ProtoFunID_MAX;
const int stForwardDrawHeroScoreReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stForwardDrawHeroScoreReward::kCharIDFieldNumber;
const int stForwardDrawHeroScoreReward::kScoreIDFieldNumber;
#endif  // !_MSC_VER

stForwardDrawHeroScoreReward::stForwardDrawHeroScoreReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stForwardDrawHeroScoreReward::InitAsDefaultInstance() {
}

stForwardDrawHeroScoreReward::stForwardDrawHeroScoreReward(const stForwardDrawHeroScoreReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stForwardDrawHeroScoreReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  scoreid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForwardDrawHeroScoreReward::~stForwardDrawHeroScoreReward() {
  SharedDtor();
}

void stForwardDrawHeroScoreReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stForwardDrawHeroScoreReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForwardDrawHeroScoreReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardDrawHeroScoreReward_descriptor_;
}

const stForwardDrawHeroScoreReward& stForwardDrawHeroScoreReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stForwardDrawHeroScoreReward* stForwardDrawHeroScoreReward::default_instance_ = NULL;

stForwardDrawHeroScoreReward* stForwardDrawHeroScoreReward::New() const {
  return new stForwardDrawHeroScoreReward;
}

void stForwardDrawHeroScoreReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    scoreid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForwardDrawHeroScoreReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_scoreID;
        break;
      }

      // optional uint32 scoreID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scoreID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scoreid_)));
          set_has_scoreid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stForwardDrawHeroScoreReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 scoreID = 2;
  if (has_scoreid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->scoreid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stForwardDrawHeroScoreReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 scoreID = 2;
  if (has_scoreid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->scoreid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stForwardDrawHeroScoreReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 scoreID = 2;
    if (has_scoreid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scoreid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForwardDrawHeroScoreReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForwardDrawHeroScoreReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForwardDrawHeroScoreReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForwardDrawHeroScoreReward::MergeFrom(const stForwardDrawHeroScoreReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_scoreid()) {
      set_scoreid(from.scoreid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForwardDrawHeroScoreReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForwardDrawHeroScoreReward::CopyFrom(const stForwardDrawHeroScoreReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForwardDrawHeroScoreReward::IsInitialized() const {

  return true;
}

void stForwardDrawHeroScoreReward::Swap(stForwardDrawHeroScoreReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(scoreid_, other->scoreid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForwardDrawHeroScoreReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForwardDrawHeroScoreReward_descriptor_;
  metadata.reflection = stForwardDrawHeroScoreReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyArenaReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyArenaReward_ProtoModID_descriptor_;
}
bool stNotifyArenaReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyArenaReward_ProtoModID stNotifyArenaReward::ModID;
const stNotifyArenaReward_ProtoModID stNotifyArenaReward::ProtoModID_MIN;
const stNotifyArenaReward_ProtoModID stNotifyArenaReward::ProtoModID_MAX;
const int stNotifyArenaReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyArenaReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyArenaReward_ProtoFunID_descriptor_;
}
bool stNotifyArenaReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 73:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyArenaReward_ProtoFunID stNotifyArenaReward::FunID;
const stNotifyArenaReward_ProtoFunID stNotifyArenaReward::ProtoFunID_MIN;
const stNotifyArenaReward_ProtoFunID stNotifyArenaReward::ProtoFunID_MAX;
const int stNotifyArenaReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyArenaReward::kCharIDFieldNumber;
const int stNotifyArenaReward::kResTypeFieldNumber;
const int stNotifyArenaReward::kResNumFieldNumber;
#endif  // !_MSC_VER

stNotifyArenaReward::stNotifyArenaReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyArenaReward::InitAsDefaultInstance() {
}

stNotifyArenaReward::stNotifyArenaReward(const stNotifyArenaReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyArenaReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  restype_ = 0u;
  resnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyArenaReward::~stNotifyArenaReward() {
  SharedDtor();
}

void stNotifyArenaReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyArenaReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyArenaReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyArenaReward_descriptor_;
}

const stNotifyArenaReward& stNotifyArenaReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyArenaReward* stNotifyArenaReward::default_instance_ = NULL;

stNotifyArenaReward* stNotifyArenaReward::New() const {
  return new stNotifyArenaReward;
}

void stNotifyArenaReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    restype_ = 0u;
    resnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyArenaReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resType;
        break;
      }

      // optional uint32 resType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &restype_)));
          set_has_restype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resNum;
        break;
      }

      // optional uint32 resNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum_)));
          set_has_resnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyArenaReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 resType = 2;
  if (has_restype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->restype(), output);
  }

  // optional uint32 resNum = 3;
  if (has_resnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyArenaReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 resType = 2;
  if (has_restype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->restype(), target);
  }

  // optional uint32 resNum = 3;
  if (has_resnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyArenaReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 resType = 2;
    if (has_restype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->restype());
    }

    // optional uint32 resNum = 3;
    if (has_resnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyArenaReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyArenaReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyArenaReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyArenaReward::MergeFrom(const stNotifyArenaReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_restype()) {
      set_restype(from.restype());
    }
    if (from.has_resnum()) {
      set_resnum(from.resnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyArenaReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyArenaReward::CopyFrom(const stNotifyArenaReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyArenaReward::IsInitialized() const {

  return true;
}

void stNotifyArenaReward::Swap(stNotifyArenaReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(restype_, other->restype_);
    std::swap(resnum_, other->resnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyArenaReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyArenaReward_descriptor_;
  metadata.reflection = stNotifyArenaReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stForwardInvestgateAnswer::kProblemIDFieldNumber;
const int stForwardInvestgateAnswer::kAnswerAFieldNumber;
const int stForwardInvestgateAnswer::kAnswerBFieldNumber;
const int stForwardInvestgateAnswer::kAnswerCFieldNumber;
const int stForwardInvestgateAnswer::kAnswerDFieldNumber;
const int stForwardInvestgateAnswer::kAnswerEFieldNumber;
const int stForwardInvestgateAnswer::kAnswerFFieldNumber;
const int stForwardInvestgateAnswer::kAnswerGFieldNumber;
const int stForwardInvestgateAnswer::kAnswerHFieldNumber;
const int stForwardInvestgateAnswer::kAnswerIFieldNumber;
const int stForwardInvestgateAnswer::kAnswerJFieldNumber;
#endif  // !_MSC_VER

stForwardInvestgateAnswer::stForwardInvestgateAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stForwardInvestgateAnswer::InitAsDefaultInstance() {
}

stForwardInvestgateAnswer::stForwardInvestgateAnswer(const stForwardInvestgateAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stForwardInvestgateAnswer::SharedCtor() {
  _cached_size_ = 0;
  problemid_ = 0u;
  answera_ = false;
  answerb_ = false;
  answerc_ = false;
  answerd_ = false;
  answere_ = false;
  answerf_ = false;
  answerg_ = false;
  answerh_ = false;
  answeri_ = false;
  answerj_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stForwardInvestgateAnswer::~stForwardInvestgateAnswer() {
  SharedDtor();
}

void stForwardInvestgateAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stForwardInvestgateAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stForwardInvestgateAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stForwardInvestgateAnswer_descriptor_;
}

const stForwardInvestgateAnswer& stForwardInvestgateAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stForwardInvestgateAnswer* stForwardInvestgateAnswer::default_instance_ = NULL;

stForwardInvestgateAnswer* stForwardInvestgateAnswer::New() const {
  return new stForwardInvestgateAnswer;
}

void stForwardInvestgateAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    problemid_ = 0u;
    answera_ = false;
    answerb_ = false;
    answerc_ = false;
    answerd_ = false;
    answere_ = false;
    answerf_ = false;
    answerg_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    answerh_ = false;
    answeri_ = false;
    answerj_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stForwardInvestgateAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 problemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &problemid_)));
          set_has_problemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_answerA;
        break;
      }

      // optional bool answerA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answera_)));
          set_has_answera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_answerB;
        break;
      }

      // optional bool answerB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerb_)));
          set_has_answerb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_answerC;
        break;
      }

      // optional bool answerC = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerc_)));
          set_has_answerc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_answerD;
        break;
      }

      // optional bool answerD = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerd_)));
          set_has_answerd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_answerE;
        break;
      }

      // optional bool answerE = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answere_)));
          set_has_answere();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_answerF;
        break;
      }

      // optional bool answerF = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerf_)));
          set_has_answerf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_answerG;
        break;
      }

      // optional bool answerG = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerG:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerg_)));
          set_has_answerg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_answerH;
        break;
      }

      // optional bool answerH = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerH:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerh_)));
          set_has_answerh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_answerI;
        break;
      }

      // optional bool answerI = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answeri_)));
          set_has_answeri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_answerJ;
        break;
      }

      // optional bool answerJ = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_answerJ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &answerj_)));
          set_has_answerj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stForwardInvestgateAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 problemID = 1;
  if (has_problemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->problemid(), output);
  }

  // optional bool answerA = 2;
  if (has_answera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->answera(), output);
  }

  // optional bool answerB = 3;
  if (has_answerb()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->answerb(), output);
  }

  // optional bool answerC = 4;
  if (has_answerc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->answerc(), output);
  }

  // optional bool answerD = 5;
  if (has_answerd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->answerd(), output);
  }

  // optional bool answerE = 6;
  if (has_answere()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->answere(), output);
  }

  // optional bool answerF = 7;
  if (has_answerf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->answerf(), output);
  }

  // optional bool answerG = 8;
  if (has_answerg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->answerg(), output);
  }

  // optional bool answerH = 9;
  if (has_answerh()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->answerh(), output);
  }

  // optional bool answerI = 10;
  if (has_answeri()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->answeri(), output);
  }

  // optional bool answerJ = 11;
  if (has_answerj()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->answerj(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stForwardInvestgateAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 problemID = 1;
  if (has_problemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->problemid(), target);
  }

  // optional bool answerA = 2;
  if (has_answera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->answera(), target);
  }

  // optional bool answerB = 3;
  if (has_answerb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->answerb(), target);
  }

  // optional bool answerC = 4;
  if (has_answerc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->answerc(), target);
  }

  // optional bool answerD = 5;
  if (has_answerd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->answerd(), target);
  }

  // optional bool answerE = 6;
  if (has_answere()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->answere(), target);
  }

  // optional bool answerF = 7;
  if (has_answerf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->answerf(), target);
  }

  // optional bool answerG = 8;
  if (has_answerg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->answerg(), target);
  }

  // optional bool answerH = 9;
  if (has_answerh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->answerh(), target);
  }

  // optional bool answerI = 10;
  if (has_answeri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->answeri(), target);
  }

  // optional bool answerJ = 11;
  if (has_answerj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->answerj(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stForwardInvestgateAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 problemID = 1;
    if (has_problemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->problemid());
    }

    // optional bool answerA = 2;
    if (has_answera()) {
      total_size += 1 + 1;
    }

    // optional bool answerB = 3;
    if (has_answerb()) {
      total_size += 1 + 1;
    }

    // optional bool answerC = 4;
    if (has_answerc()) {
      total_size += 1 + 1;
    }

    // optional bool answerD = 5;
    if (has_answerd()) {
      total_size += 1 + 1;
    }

    // optional bool answerE = 6;
    if (has_answere()) {
      total_size += 1 + 1;
    }

    // optional bool answerF = 7;
    if (has_answerf()) {
      total_size += 1 + 1;
    }

    // optional bool answerG = 8;
    if (has_answerg()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool answerH = 9;
    if (has_answerh()) {
      total_size += 1 + 1;
    }

    // optional bool answerI = 10;
    if (has_answeri()) {
      total_size += 1 + 1;
    }

    // optional bool answerJ = 11;
    if (has_answerj()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stForwardInvestgateAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stForwardInvestgateAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stForwardInvestgateAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stForwardInvestgateAnswer::MergeFrom(const stForwardInvestgateAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_problemid()) {
      set_problemid(from.problemid());
    }
    if (from.has_answera()) {
      set_answera(from.answera());
    }
    if (from.has_answerb()) {
      set_answerb(from.answerb());
    }
    if (from.has_answerc()) {
      set_answerc(from.answerc());
    }
    if (from.has_answerd()) {
      set_answerd(from.answerd());
    }
    if (from.has_answere()) {
      set_answere(from.answere());
    }
    if (from.has_answerf()) {
      set_answerf(from.answerf());
    }
    if (from.has_answerg()) {
      set_answerg(from.answerg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_answerh()) {
      set_answerh(from.answerh());
    }
    if (from.has_answeri()) {
      set_answeri(from.answeri());
    }
    if (from.has_answerj()) {
      set_answerj(from.answerj());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stForwardInvestgateAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stForwardInvestgateAnswer::CopyFrom(const stForwardInvestgateAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stForwardInvestgateAnswer::IsInitialized() const {

  return true;
}

void stForwardInvestgateAnswer::Swap(stForwardInvestgateAnswer* other) {
  if (other != this) {
    std::swap(problemid_, other->problemid_);
    std::swap(answera_, other->answera_);
    std::swap(answerb_, other->answerb_);
    std::swap(answerc_, other->answerc_);
    std::swap(answerd_, other->answerd_);
    std::swap(answere_, other->answere_);
    std::swap(answerf_, other->answerf_);
    std::swap(answerg_, other->answerg_);
    std::swap(answerh_, other->answerh_);
    std::swap(answeri_, other->answeri_);
    std::swap(answerj_, other->answerj_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stForwardInvestgateAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stForwardInvestgateAnswer_descriptor_;
  metadata.reflection = stForwardInvestgateAnswer_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ForwardInvestgateResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardInvestgateResult_ProtoModID_descriptor_;
}
bool ForwardInvestgateResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ForwardInvestgateResult_ProtoModID ForwardInvestgateResult::ModID;
const ForwardInvestgateResult_ProtoModID ForwardInvestgateResult::ProtoModID_MIN;
const ForwardInvestgateResult_ProtoModID ForwardInvestgateResult::ProtoModID_MAX;
const int ForwardInvestgateResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ForwardInvestgateResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardInvestgateResult_ProtoFunID_descriptor_;
}
bool ForwardInvestgateResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 74:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ForwardInvestgateResult_ProtoFunID ForwardInvestgateResult::FunID;
const ForwardInvestgateResult_ProtoFunID ForwardInvestgateResult::ProtoFunID_MIN;
const ForwardInvestgateResult_ProtoFunID ForwardInvestgateResult::ProtoFunID_MAX;
const int ForwardInvestgateResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ForwardInvestgateResult::kQuestIDFieldNumber;
const int ForwardInvestgateResult::kInfosFieldNumber;
const int ForwardInvestgateResult::kCharIDFieldNumber;
const int ForwardInvestgateResult::kUseTimeFieldNumber;
#endif  // !_MSC_VER

ForwardInvestgateResult::ForwardInvestgateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ForwardInvestgateResult::InitAsDefaultInstance() {
}

ForwardInvestgateResult::ForwardInvestgateResult(const ForwardInvestgateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ForwardInvestgateResult::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  charid_ = 0u;
  usetime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardInvestgateResult::~ForwardInvestgateResult() {
  SharedDtor();
}

void ForwardInvestgateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForwardInvestgateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardInvestgateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardInvestgateResult_descriptor_;
}

const ForwardInvestgateResult& ForwardInvestgateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

ForwardInvestgateResult* ForwardInvestgateResult::default_instance_ = NULL;

ForwardInvestgateResult* ForwardInvestgateResult::New() const {
  return new ForwardInvestgateResult;
}

void ForwardInvestgateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
    charid_ = 0u;
    usetime_ = 0u;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardInvestgateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 questID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .Global.stForwardInvestgateAnswer infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_useTime;
        break;
      }

      // optional uint32 useTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usetime_)));
          set_has_usetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ForwardInvestgateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 questID = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }

  // repeated .Global.stForwardInvestgateAnswer infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional uint32 useTime = 4;
  if (has_usetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->usetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ForwardInvestgateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 questID = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }

  // repeated .Global.stForwardInvestgateAnswer infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional uint32 useTime = 4;
  if (has_usetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->usetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ForwardInvestgateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 questID = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 useTime = 4;
    if (has_usetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usetime());
    }

  }
  // repeated .Global.stForwardInvestgateAnswer infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardInvestgateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardInvestgateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardInvestgateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardInvestgateResult::MergeFrom(const ForwardInvestgateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_usetime()) {
      set_usetime(from.usetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardInvestgateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardInvestgateResult::CopyFrom(const ForwardInvestgateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardInvestgateResult::IsInitialized() const {

  return true;
}

void ForwardInvestgateResult::Swap(ForwardInvestgateResult* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    infos_.Swap(&other->infos_);
    std::swap(charid_, other->charid_);
    std::swap(usetime_, other->usetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardInvestgateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardInvestgateResult_descriptor_;
  metadata.reflection = ForwardInvestgateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGMModifyUserInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGMModifyUserInfo_ProtoModID_descriptor_;
}
bool stGMModifyUserInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGMModifyUserInfo_ProtoModID stGMModifyUserInfo::ModID;
const stGMModifyUserInfo_ProtoModID stGMModifyUserInfo::ProtoModID_MIN;
const stGMModifyUserInfo_ProtoModID stGMModifyUserInfo::ProtoModID_MAX;
const int stGMModifyUserInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGMModifyUserInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGMModifyUserInfo_ProtoFunID_descriptor_;
}
bool stGMModifyUserInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 75:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGMModifyUserInfo_ProtoFunID stGMModifyUserInfo::FunID;
const stGMModifyUserInfo_ProtoFunID stGMModifyUserInfo::ProtoFunID_MIN;
const stGMModifyUserInfo_ProtoFunID stGMModifyUserInfo::ProtoFunID_MAX;
const int stGMModifyUserInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGMModifyUserInfo::kCharIDFieldNumber;
const int stGMModifyUserInfo::kNewbieGuideIDFieldNumber;
const int stGMModifyUserInfo::kGoldCoinFieldNumber;
const int stGMModifyUserInfo::kDiamondFieldNumber;
const int stGMModifyUserInfo::kVipPointFieldNumber;
#endif  // !_MSC_VER

stGMModifyUserInfo::stGMModifyUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGMModifyUserInfo::InitAsDefaultInstance() {
}

stGMModifyUserInfo::stGMModifyUserInfo(const stGMModifyUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGMModifyUserInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  newbieguideid_ = 0u;
  goldcoin_ = 0u;
  diamond_ = 0u;
  vippoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGMModifyUserInfo::~stGMModifyUserInfo() {
  SharedDtor();
}

void stGMModifyUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGMModifyUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGMModifyUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGMModifyUserInfo_descriptor_;
}

const stGMModifyUserInfo& stGMModifyUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGMModifyUserInfo* stGMModifyUserInfo::default_instance_ = NULL;

stGMModifyUserInfo* stGMModifyUserInfo::New() const {
  return new stGMModifyUserInfo;
}

void stGMModifyUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    newbieguideid_ = 0u;
    goldcoin_ = 0u;
    diamond_ = 0u;
    vippoint_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGMModifyUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newbieGuideID;
        break;
      }

      // optional uint32 newbieGuideID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newbieGuideID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newbieguideid_)));
          set_has_newbieguideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goldCoin;
        break;
      }

      // optional uint32 goldCoin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldcoin_)));
          set_has_goldcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vipPoint;
        break;
      }

      // optional uint32 vipPoint = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vippoint_)));
          set_has_vippoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGMModifyUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 newbieGuideID = 2;
  if (has_newbieguideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newbieguideid(), output);
  }

  // optional uint32 goldCoin = 3;
  if (has_goldcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->goldcoin(), output);
  }

  // optional uint32 diamond = 4;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->diamond(), output);
  }

  // optional uint32 vipPoint = 5;
  if (has_vippoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vippoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGMModifyUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 newbieGuideID = 2;
  if (has_newbieguideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newbieguideid(), target);
  }

  // optional uint32 goldCoin = 3;
  if (has_goldcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->goldcoin(), target);
  }

  // optional uint32 diamond = 4;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->diamond(), target);
  }

  // optional uint32 vipPoint = 5;
  if (has_vippoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vippoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGMModifyUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 newbieGuideID = 2;
    if (has_newbieguideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newbieguideid());
    }

    // optional uint32 goldCoin = 3;
    if (has_goldcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldcoin());
    }

    // optional uint32 diamond = 4;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 vipPoint = 5;
    if (has_vippoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vippoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGMModifyUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGMModifyUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGMModifyUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGMModifyUserInfo::MergeFrom(const stGMModifyUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_newbieguideid()) {
      set_newbieguideid(from.newbieguideid());
    }
    if (from.has_goldcoin()) {
      set_goldcoin(from.goldcoin());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_vippoint()) {
      set_vippoint(from.vippoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGMModifyUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGMModifyUserInfo::CopyFrom(const stGMModifyUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGMModifyUserInfo::IsInitialized() const {

  return true;
}

void stGMModifyUserInfo::Swap(stGMModifyUserInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(newbieguideid_, other->newbieguideid_);
    std::swap(goldcoin_, other->goldcoin_);
    std::swap(diamond_, other->diamond_);
    std::swap(vippoint_, other->vippoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGMModifyUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGMModifyUserInfo_descriptor_;
  metadata.reflection = stGMModifyUserInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynMyArenaRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMyArenaRank_ProtoModID_descriptor_;
}
bool stSynMyArenaRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMyArenaRank_ProtoModID stSynMyArenaRank::ModID;
const stSynMyArenaRank_ProtoModID stSynMyArenaRank::ProtoModID_MIN;
const stSynMyArenaRank_ProtoModID stSynMyArenaRank::ProtoModID_MAX;
const int stSynMyArenaRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynMyArenaRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMyArenaRank_ProtoFunID_descriptor_;
}
bool stSynMyArenaRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 76:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMyArenaRank_ProtoFunID stSynMyArenaRank::FunID;
const stSynMyArenaRank_ProtoFunID stSynMyArenaRank::ProtoFunID_MIN;
const stSynMyArenaRank_ProtoFunID stSynMyArenaRank::ProtoFunID_MAX;
const int stSynMyArenaRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynMyArenaRank::kCharIDFieldNumber;
const int stSynMyArenaRank::kRankFieldNumber;
#endif  // !_MSC_VER

stSynMyArenaRank::stSynMyArenaRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMyArenaRank::InitAsDefaultInstance() {
}

stSynMyArenaRank::stSynMyArenaRank(const stSynMyArenaRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMyArenaRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMyArenaRank::~stSynMyArenaRank() {
  SharedDtor();
}

void stSynMyArenaRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynMyArenaRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMyArenaRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMyArenaRank_descriptor_;
}

const stSynMyArenaRank& stSynMyArenaRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynMyArenaRank* stSynMyArenaRank::default_instance_ = NULL;

stSynMyArenaRank* stSynMyArenaRank::New() const {
  return new stSynMyArenaRank;
}

void stSynMyArenaRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMyArenaRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMyArenaRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMyArenaRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 rank = 2;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMyArenaRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 rank = 2;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMyArenaRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMyArenaRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMyArenaRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMyArenaRank::MergeFrom(const stSynMyArenaRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMyArenaRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMyArenaRank::CopyFrom(const stSynMyArenaRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMyArenaRank::IsInitialized() const {

  return true;
}

void stSynMyArenaRank::Swap(stSynMyArenaRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMyArenaRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMyArenaRank_descriptor_;
  metadata.reflection = stSynMyArenaRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynVipLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynVipLv_ProtoModID_descriptor_;
}
bool stSynVipLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynVipLv_ProtoModID stSynVipLv::ModID;
const stSynVipLv_ProtoModID stSynVipLv::ProtoModID_MIN;
const stSynVipLv_ProtoModID stSynVipLv::ProtoModID_MAX;
const int stSynVipLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynVipLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynVipLv_ProtoFunID_descriptor_;
}
bool stSynVipLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 77:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynVipLv_ProtoFunID stSynVipLv::FunID;
const stSynVipLv_ProtoFunID stSynVipLv::ProtoFunID_MIN;
const stSynVipLv_ProtoFunID stSynVipLv::ProtoFunID_MAX;
const int stSynVipLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynVipLv::kCharIDFieldNumber;
const int stSynVipLv::kVipLvFieldNumber;
#endif  // !_MSC_VER

stSynVipLv::stSynVipLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynVipLv::InitAsDefaultInstance() {
}

stSynVipLv::stSynVipLv(const stSynVipLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynVipLv::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  viplv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynVipLv::~stSynVipLv() {
  SharedDtor();
}

void stSynVipLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynVipLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynVipLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynVipLv_descriptor_;
}

const stSynVipLv& stSynVipLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynVipLv* stSynVipLv::default_instance_ = NULL;

stSynVipLv* stSynVipLv::New() const {
  return new stSynVipLv;
}

void stSynVipLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    viplv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynVipLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynVipLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 vipLv = 2;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynVipLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 vipLv = 2;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynVipLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 vipLv = 2;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynVipLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynVipLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynVipLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynVipLv::MergeFrom(const stSynVipLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynVipLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynVipLv::CopyFrom(const stSynVipLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynVipLv::IsInitialized() const {

  return true;
}

void stSynVipLv::Swap(stSynVipLv* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynVipLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynVipLv_descriptor_;
  metadata.reflection = stSynVipLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyClearArenaCD_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyClearArenaCD_ProtoModID_descriptor_;
}
bool stNotifyClearArenaCD_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyClearArenaCD_ProtoModID stNotifyClearArenaCD::ModID;
const stNotifyClearArenaCD_ProtoModID stNotifyClearArenaCD::ProtoModID_MIN;
const stNotifyClearArenaCD_ProtoModID stNotifyClearArenaCD::ProtoModID_MAX;
const int stNotifyClearArenaCD::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyClearArenaCD_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyClearArenaCD_ProtoFunID_descriptor_;
}
bool stNotifyClearArenaCD_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 78:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyClearArenaCD_ProtoFunID stNotifyClearArenaCD::FunID;
const stNotifyClearArenaCD_ProtoFunID stNotifyClearArenaCD::ProtoFunID_MIN;
const stNotifyClearArenaCD_ProtoFunID stNotifyClearArenaCD::ProtoFunID_MAX;
const int stNotifyClearArenaCD::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyClearArenaCD::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNotifyClearArenaCD::stNotifyClearArenaCD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyClearArenaCD::InitAsDefaultInstance() {
}

stNotifyClearArenaCD::stNotifyClearArenaCD(const stNotifyClearArenaCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyClearArenaCD::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyClearArenaCD::~stNotifyClearArenaCD() {
  SharedDtor();
}

void stNotifyClearArenaCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyClearArenaCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyClearArenaCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyClearArenaCD_descriptor_;
}

const stNotifyClearArenaCD& stNotifyClearArenaCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyClearArenaCD* stNotifyClearArenaCD::default_instance_ = NULL;

stNotifyClearArenaCD* stNotifyClearArenaCD::New() const {
  return new stNotifyClearArenaCD;
}

void stNotifyClearArenaCD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyClearArenaCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyClearArenaCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyClearArenaCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyClearArenaCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyClearArenaCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyClearArenaCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyClearArenaCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyClearArenaCD::MergeFrom(const stNotifyClearArenaCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyClearArenaCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyClearArenaCD::CopyFrom(const stNotifyClearArenaCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyClearArenaCD::IsInitialized() const {

  return true;
}

void stNotifyClearArenaCD::Swap(stNotifyClearArenaCD* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyClearArenaCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyClearArenaCD_descriptor_;
  metadata.reflection = stNotifyClearArenaCD_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetArenaChallengeNum_ProtoModID_descriptor_;
}
bool stReqResetArenaChallengeNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetArenaChallengeNum_ProtoModID stReqResetArenaChallengeNum::ModID;
const stReqResetArenaChallengeNum_ProtoModID stReqResetArenaChallengeNum::ProtoModID_MIN;
const stReqResetArenaChallengeNum_ProtoModID stReqResetArenaChallengeNum::ProtoModID_MAX;
const int stReqResetArenaChallengeNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetArenaChallengeNum_ProtoFunID_descriptor_;
}
bool stReqResetArenaChallengeNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 79:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetArenaChallengeNum_ProtoFunID stReqResetArenaChallengeNum::FunID;
const stReqResetArenaChallengeNum_ProtoFunID stReqResetArenaChallengeNum::ProtoFunID_MIN;
const stReqResetArenaChallengeNum_ProtoFunID stReqResetArenaChallengeNum::ProtoFunID_MAX;
const int stReqResetArenaChallengeNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResetArenaChallengeNum::kCharIDFieldNumber;
const int stReqResetArenaChallengeNum::kCurResetNumFieldNumber;
#endif  // !_MSC_VER

stReqResetArenaChallengeNum::stReqResetArenaChallengeNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResetArenaChallengeNum::InitAsDefaultInstance() {
}

stReqResetArenaChallengeNum::stReqResetArenaChallengeNum(const stReqResetArenaChallengeNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResetArenaChallengeNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  curresetnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResetArenaChallengeNum::~stReqResetArenaChallengeNum() {
  SharedDtor();
}

void stReqResetArenaChallengeNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResetArenaChallengeNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResetArenaChallengeNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetArenaChallengeNum_descriptor_;
}

const stReqResetArenaChallengeNum& stReqResetArenaChallengeNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqResetArenaChallengeNum* stReqResetArenaChallengeNum::default_instance_ = NULL;

stReqResetArenaChallengeNum* stReqResetArenaChallengeNum::New() const {
  return new stReqResetArenaChallengeNum;
}

void stReqResetArenaChallengeNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    curresetnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResetArenaChallengeNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curResetNum;
        break;
      }

      // optional uint32 curResetNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curResetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curresetnum_)));
          set_has_curresetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResetArenaChallengeNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 curResetNum = 2;
  if (has_curresetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curresetnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResetArenaChallengeNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 curResetNum = 2;
  if (has_curresetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curresetnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResetArenaChallengeNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 curResetNum = 2;
    if (has_curresetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curresetnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResetArenaChallengeNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResetArenaChallengeNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResetArenaChallengeNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResetArenaChallengeNum::MergeFrom(const stReqResetArenaChallengeNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_curresetnum()) {
      set_curresetnum(from.curresetnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResetArenaChallengeNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResetArenaChallengeNum::CopyFrom(const stReqResetArenaChallengeNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResetArenaChallengeNum::IsInitialized() const {

  return true;
}

void stReqResetArenaChallengeNum::Swap(stReqResetArenaChallengeNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(curresetnum_, other->curresetnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResetArenaChallengeNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResetArenaChallengeNum_descriptor_;
  metadata.reflection = stReqResetArenaChallengeNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotfiyResetChallengeNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotfiyResetChallengeNum_ProtoModID_descriptor_;
}
bool stNotfiyResetChallengeNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotfiyResetChallengeNum_ProtoModID stNotfiyResetChallengeNum::ModID;
const stNotfiyResetChallengeNum_ProtoModID stNotfiyResetChallengeNum::ProtoModID_MIN;
const stNotfiyResetChallengeNum_ProtoModID stNotfiyResetChallengeNum::ProtoModID_MAX;
const int stNotfiyResetChallengeNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotfiyResetChallengeNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotfiyResetChallengeNum_ProtoFunID_descriptor_;
}
bool stNotfiyResetChallengeNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 80:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotfiyResetChallengeNum_ProtoFunID stNotfiyResetChallengeNum::FunID;
const stNotfiyResetChallengeNum_ProtoFunID stNotfiyResetChallengeNum::ProtoFunID_MIN;
const stNotfiyResetChallengeNum_ProtoFunID stNotfiyResetChallengeNum::ProtoFunID_MAX;
const int stNotfiyResetChallengeNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotfiyResetChallengeNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNotfiyResetChallengeNum::stNotfiyResetChallengeNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotfiyResetChallengeNum::InitAsDefaultInstance() {
}

stNotfiyResetChallengeNum::stNotfiyResetChallengeNum(const stNotfiyResetChallengeNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotfiyResetChallengeNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotfiyResetChallengeNum::~stNotfiyResetChallengeNum() {
  SharedDtor();
}

void stNotfiyResetChallengeNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotfiyResetChallengeNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotfiyResetChallengeNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotfiyResetChallengeNum_descriptor_;
}

const stNotfiyResetChallengeNum& stNotfiyResetChallengeNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotfiyResetChallengeNum* stNotfiyResetChallengeNum::default_instance_ = NULL;

stNotfiyResetChallengeNum* stNotfiyResetChallengeNum::New() const {
  return new stNotfiyResetChallengeNum;
}

void stNotfiyResetChallengeNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotfiyResetChallengeNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotfiyResetChallengeNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotfiyResetChallengeNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotfiyResetChallengeNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotfiyResetChallengeNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotfiyResetChallengeNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotfiyResetChallengeNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotfiyResetChallengeNum::MergeFrom(const stNotfiyResetChallengeNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotfiyResetChallengeNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotfiyResetChallengeNum::CopyFrom(const stNotfiyResetChallengeNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotfiyResetChallengeNum::IsInitialized() const {

  return true;
}

void stNotfiyResetChallengeNum::Swap(stNotfiyResetChallengeNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotfiyResetChallengeNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotfiyResetChallengeNum_descriptor_;
  metadata.reflection = stNotfiyResetChallengeNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqResetInterceptNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetInterceptNum_ProtoModID_descriptor_;
}
bool stReqResetInterceptNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetInterceptNum_ProtoModID stReqResetInterceptNum::ModID;
const stReqResetInterceptNum_ProtoModID stReqResetInterceptNum::ProtoModID_MIN;
const stReqResetInterceptNum_ProtoModID stReqResetInterceptNum::ProtoModID_MAX;
const int stReqResetInterceptNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqResetInterceptNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetInterceptNum_ProtoFunID_descriptor_;
}
bool stReqResetInterceptNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 81:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqResetInterceptNum_ProtoFunID stReqResetInterceptNum::FunID;
const stReqResetInterceptNum_ProtoFunID stReqResetInterceptNum::ProtoFunID_MIN;
const stReqResetInterceptNum_ProtoFunID stReqResetInterceptNum::ProtoFunID_MAX;
const int stReqResetInterceptNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqResetInterceptNum::kCharIDFieldNumber;
const int stReqResetInterceptNum::kResetNumFieldNumber;
#endif  // !_MSC_VER

stReqResetInterceptNum::stReqResetInterceptNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqResetInterceptNum::InitAsDefaultInstance() {
}

stReqResetInterceptNum::stReqResetInterceptNum(const stReqResetInterceptNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqResetInterceptNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  resetnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqResetInterceptNum::~stReqResetInterceptNum() {
  SharedDtor();
}

void stReqResetInterceptNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqResetInterceptNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqResetInterceptNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqResetInterceptNum_descriptor_;
}

const stReqResetInterceptNum& stReqResetInterceptNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqResetInterceptNum* stReqResetInterceptNum::default_instance_ = NULL;

stReqResetInterceptNum* stReqResetInterceptNum::New() const {
  return new stReqResetInterceptNum;
}

void stReqResetInterceptNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    resetnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqResetInterceptNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resetNum;
        break;
      }

      // optional uint32 resetNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resetnum_)));
          set_has_resetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqResetInterceptNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 resetNum = 2;
  if (has_resetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resetnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqResetInterceptNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 resetNum = 2;
  if (has_resetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resetnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqResetInterceptNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 resetNum = 2;
    if (has_resetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resetnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqResetInterceptNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqResetInterceptNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqResetInterceptNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqResetInterceptNum::MergeFrom(const stReqResetInterceptNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_resetnum()) {
      set_resetnum(from.resetnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqResetInterceptNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqResetInterceptNum::CopyFrom(const stReqResetInterceptNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqResetInterceptNum::IsInitialized() const {

  return true;
}

void stReqResetInterceptNum::Swap(stReqResetInterceptNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(resetnum_, other->resetnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqResetInterceptNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqResetInterceptNum_descriptor_;
  metadata.reflection = stReqResetInterceptNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyClearInterceptCD_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyClearInterceptCD_ProtoModID_descriptor_;
}
bool stNotifyClearInterceptCD_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyClearInterceptCD_ProtoModID stNotifyClearInterceptCD::ModID;
const stNotifyClearInterceptCD_ProtoModID stNotifyClearInterceptCD::ProtoModID_MIN;
const stNotifyClearInterceptCD_ProtoModID stNotifyClearInterceptCD::ProtoModID_MAX;
const int stNotifyClearInterceptCD::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyClearInterceptCD_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyClearInterceptCD_ProtoFunID_descriptor_;
}
bool stNotifyClearInterceptCD_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 82:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyClearInterceptCD_ProtoFunID stNotifyClearInterceptCD::FunID;
const stNotifyClearInterceptCD_ProtoFunID stNotifyClearInterceptCD::ProtoFunID_MIN;
const stNotifyClearInterceptCD_ProtoFunID stNotifyClearInterceptCD::ProtoFunID_MAX;
const int stNotifyClearInterceptCD::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyClearInterceptCD::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNotifyClearInterceptCD::stNotifyClearInterceptCD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyClearInterceptCD::InitAsDefaultInstance() {
}

stNotifyClearInterceptCD::stNotifyClearInterceptCD(const stNotifyClearInterceptCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyClearInterceptCD::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyClearInterceptCD::~stNotifyClearInterceptCD() {
  SharedDtor();
}

void stNotifyClearInterceptCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyClearInterceptCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyClearInterceptCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyClearInterceptCD_descriptor_;
}

const stNotifyClearInterceptCD& stNotifyClearInterceptCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyClearInterceptCD* stNotifyClearInterceptCD::default_instance_ = NULL;

stNotifyClearInterceptCD* stNotifyClearInterceptCD::New() const {
  return new stNotifyClearInterceptCD;
}

void stNotifyClearInterceptCD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyClearInterceptCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyClearInterceptCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyClearInterceptCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyClearInterceptCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyClearInterceptCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyClearInterceptCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyClearInterceptCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyClearInterceptCD::MergeFrom(const stNotifyClearInterceptCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyClearInterceptCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyClearInterceptCD::CopyFrom(const stNotifyClearInterceptCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyClearInterceptCD::IsInitialized() const {

  return true;
}

void stNotifyClearInterceptCD::Swap(stNotifyClearInterceptCD* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyClearInterceptCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyClearInterceptCD_descriptor_;
  metadata.reflection = stNotifyClearInterceptCD_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyResetInterceptNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyResetInterceptNum_ProtoModID_descriptor_;
}
bool stNotifyResetInterceptNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyResetInterceptNum_ProtoModID stNotifyResetInterceptNum::ModID;
const stNotifyResetInterceptNum_ProtoModID stNotifyResetInterceptNum::ProtoModID_MIN;
const stNotifyResetInterceptNum_ProtoModID stNotifyResetInterceptNum::ProtoModID_MAX;
const int stNotifyResetInterceptNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyResetInterceptNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyResetInterceptNum_ProtoFunID_descriptor_;
}
bool stNotifyResetInterceptNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 83:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyResetInterceptNum_ProtoFunID stNotifyResetInterceptNum::FunID;
const stNotifyResetInterceptNum_ProtoFunID stNotifyResetInterceptNum::ProtoFunID_MIN;
const stNotifyResetInterceptNum_ProtoFunID stNotifyResetInterceptNum::ProtoFunID_MAX;
const int stNotifyResetInterceptNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyResetInterceptNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNotifyResetInterceptNum::stNotifyResetInterceptNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyResetInterceptNum::InitAsDefaultInstance() {
}

stNotifyResetInterceptNum::stNotifyResetInterceptNum(const stNotifyResetInterceptNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyResetInterceptNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyResetInterceptNum::~stNotifyResetInterceptNum() {
  SharedDtor();
}

void stNotifyResetInterceptNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyResetInterceptNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyResetInterceptNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyResetInterceptNum_descriptor_;
}

const stNotifyResetInterceptNum& stNotifyResetInterceptNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyResetInterceptNum* stNotifyResetInterceptNum::default_instance_ = NULL;

stNotifyResetInterceptNum* stNotifyResetInterceptNum::New() const {
  return new stNotifyResetInterceptNum;
}

void stNotifyResetInterceptNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyResetInterceptNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyResetInterceptNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyResetInterceptNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyResetInterceptNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyResetInterceptNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyResetInterceptNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyResetInterceptNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyResetInterceptNum::MergeFrom(const stNotifyResetInterceptNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyResetInterceptNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyResetInterceptNum::CopyFrom(const stNotifyResetInterceptNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyResetInterceptNum::IsInitialized() const {

  return true;
}

void stNotifyResetInterceptNum::Swap(stNotifyResetInterceptNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyResetInterceptNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyResetInterceptNum_descriptor_;
  metadata.reflection = stNotifyResetInterceptNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyGuardQuality_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuardQuality_ProtoModID_descriptor_;
}
bool stNotifyGuardQuality_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGuardQuality_ProtoModID stNotifyGuardQuality::ModID;
const stNotifyGuardQuality_ProtoModID stNotifyGuardQuality::ProtoModID_MIN;
const stNotifyGuardQuality_ProtoModID stNotifyGuardQuality::ProtoModID_MAX;
const int stNotifyGuardQuality::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyGuardQuality_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuardQuality_ProtoFunID_descriptor_;
}
bool stNotifyGuardQuality_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 84:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGuardQuality_ProtoFunID stNotifyGuardQuality::FunID;
const stNotifyGuardQuality_ProtoFunID stNotifyGuardQuality::ProtoFunID_MIN;
const stNotifyGuardQuality_ProtoFunID stNotifyGuardQuality::ProtoFunID_MAX;
const int stNotifyGuardQuality::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyGuardQuality::kCharIDFieldNumber;
const int stNotifyGuardQuality::kQualityFieldNumber;
#endif  // !_MSC_VER

stNotifyGuardQuality::stNotifyGuardQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyGuardQuality::InitAsDefaultInstance() {
}

stNotifyGuardQuality::stNotifyGuardQuality(const stNotifyGuardQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyGuardQuality::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyGuardQuality::~stNotifyGuardQuality() {
  SharedDtor();
}

void stNotifyGuardQuality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyGuardQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyGuardQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuardQuality_descriptor_;
}

const stNotifyGuardQuality& stNotifyGuardQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyGuardQuality* stNotifyGuardQuality::default_instance_ = NULL;

stNotifyGuardQuality* stNotifyGuardQuality::New() const {
  return new stNotifyGuardQuality;
}

void stNotifyGuardQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    quality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyGuardQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyGuardQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyGuardQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyGuardQuality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyGuardQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyGuardQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyGuardQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyGuardQuality::MergeFrom(const stNotifyGuardQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyGuardQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyGuardQuality::CopyFrom(const stNotifyGuardQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyGuardQuality::IsInitialized() const {

  return true;
}

void stNotifyGuardQuality::Swap(stNotifyGuardQuality* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyGuardQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyGuardQuality_descriptor_;
  metadata.reflection = stNotifyGuardQuality_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyGuardInspiredSuccess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuardInspiredSuccess_ProtoModID_descriptor_;
}
bool stNotifyGuardInspiredSuccess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGuardInspiredSuccess_ProtoModID stNotifyGuardInspiredSuccess::ModID;
const stNotifyGuardInspiredSuccess_ProtoModID stNotifyGuardInspiredSuccess::ProtoModID_MIN;
const stNotifyGuardInspiredSuccess_ProtoModID stNotifyGuardInspiredSuccess::ProtoModID_MAX;
const int stNotifyGuardInspiredSuccess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyGuardInspiredSuccess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuardInspiredSuccess_ProtoFunID_descriptor_;
}
bool stNotifyGuardInspiredSuccess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 85:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGuardInspiredSuccess_ProtoFunID stNotifyGuardInspiredSuccess::FunID;
const stNotifyGuardInspiredSuccess_ProtoFunID stNotifyGuardInspiredSuccess::ProtoFunID_MIN;
const stNotifyGuardInspiredSuccess_ProtoFunID stNotifyGuardInspiredSuccess::ProtoFunID_MAX;
const int stNotifyGuardInspiredSuccess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyGuardInspiredSuccess::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNotifyGuardInspiredSuccess::stNotifyGuardInspiredSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyGuardInspiredSuccess::InitAsDefaultInstance() {
}

stNotifyGuardInspiredSuccess::stNotifyGuardInspiredSuccess(const stNotifyGuardInspiredSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyGuardInspiredSuccess::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyGuardInspiredSuccess::~stNotifyGuardInspiredSuccess() {
  SharedDtor();
}

void stNotifyGuardInspiredSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyGuardInspiredSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyGuardInspiredSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuardInspiredSuccess_descriptor_;
}

const stNotifyGuardInspiredSuccess& stNotifyGuardInspiredSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyGuardInspiredSuccess* stNotifyGuardInspiredSuccess::default_instance_ = NULL;

stNotifyGuardInspiredSuccess* stNotifyGuardInspiredSuccess::New() const {
  return new stNotifyGuardInspiredSuccess;
}

void stNotifyGuardInspiredSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyGuardInspiredSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyGuardInspiredSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyGuardInspiredSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyGuardInspiredSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyGuardInspiredSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyGuardInspiredSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyGuardInspiredSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyGuardInspiredSuccess::MergeFrom(const stNotifyGuardInspiredSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyGuardInspiredSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyGuardInspiredSuccess::CopyFrom(const stNotifyGuardInspiredSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyGuardInspiredSuccess::IsInitialized() const {

  return true;
}

void stNotifyGuardInspiredSuccess::Swap(stNotifyGuardInspiredSuccess* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyGuardInspiredSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyGuardInspiredSuccess_descriptor_;
  metadata.reflection = stNotifyGuardInspiredSuccess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshGuardQuality_ProtoModID_descriptor_;
}
bool stReqRefreshGuardQuality_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshGuardQuality_ProtoModID stReqRefreshGuardQuality::ModID;
const stReqRefreshGuardQuality_ProtoModID stReqRefreshGuardQuality::ProtoModID_MIN;
const stReqRefreshGuardQuality_ProtoModID stReqRefreshGuardQuality::ProtoModID_MAX;
const int stReqRefreshGuardQuality::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRefreshGuardQuality_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshGuardQuality_ProtoFunID_descriptor_;
}
bool stReqRefreshGuardQuality_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 86:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRefreshGuardQuality_ProtoFunID stReqRefreshGuardQuality::FunID;
const stReqRefreshGuardQuality_ProtoFunID stReqRefreshGuardQuality::ProtoFunID_MIN;
const stReqRefreshGuardQuality_ProtoFunID stReqRefreshGuardQuality::ProtoFunID_MAX;
const int stReqRefreshGuardQuality::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRefreshGuardQuality::kCharIDFieldNumber;
const int stReqRefreshGuardQuality::kQualityFieldNumber;
#endif  // !_MSC_VER

stReqRefreshGuardQuality::stReqRefreshGuardQuality()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRefreshGuardQuality::InitAsDefaultInstance() {
}

stReqRefreshGuardQuality::stReqRefreshGuardQuality(const stReqRefreshGuardQuality& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRefreshGuardQuality::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRefreshGuardQuality::~stReqRefreshGuardQuality() {
  SharedDtor();
}

void stReqRefreshGuardQuality::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRefreshGuardQuality::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRefreshGuardQuality::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRefreshGuardQuality_descriptor_;
}

const stReqRefreshGuardQuality& stReqRefreshGuardQuality::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqRefreshGuardQuality* stReqRefreshGuardQuality::default_instance_ = NULL;

stReqRefreshGuardQuality* stReqRefreshGuardQuality::New() const {
  return new stReqRefreshGuardQuality;
}

void stReqRefreshGuardQuality::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    quality_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRefreshGuardQuality::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional uint32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRefreshGuardQuality::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRefreshGuardQuality::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRefreshGuardQuality::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRefreshGuardQuality::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRefreshGuardQuality* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRefreshGuardQuality*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRefreshGuardQuality::MergeFrom(const stReqRefreshGuardQuality& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRefreshGuardQuality::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRefreshGuardQuality::CopyFrom(const stReqRefreshGuardQuality& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRefreshGuardQuality::IsInitialized() const {

  return true;
}

void stReqRefreshGuardQuality::Swap(stReqRefreshGuardQuality* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(quality_, other->quality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRefreshGuardQuality::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRefreshGuardQuality_descriptor_;
  metadata.reflection = stReqRefreshGuardQuality_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyClearOne2OneScore_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyClearOne2OneScore_ProtoModID_descriptor_;
}
bool stNotifyClearOne2OneScore_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyClearOne2OneScore_ProtoModID stNotifyClearOne2OneScore::ModID;
const stNotifyClearOne2OneScore_ProtoModID stNotifyClearOne2OneScore::ProtoModID_MIN;
const stNotifyClearOne2OneScore_ProtoModID stNotifyClearOne2OneScore::ProtoModID_MAX;
const int stNotifyClearOne2OneScore::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyClearOne2OneScore_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyClearOne2OneScore_ProtoFunID_descriptor_;
}
bool stNotifyClearOne2OneScore_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 87:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyClearOne2OneScore_ProtoFunID stNotifyClearOne2OneScore::FunID;
const stNotifyClearOne2OneScore_ProtoFunID stNotifyClearOne2OneScore::ProtoFunID_MIN;
const stNotifyClearOne2OneScore_ProtoFunID stNotifyClearOne2OneScore::ProtoFunID_MAX;
const int stNotifyClearOne2OneScore::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyClearOne2OneScore::kFlagFieldNumber;
#endif  // !_MSC_VER

stNotifyClearOne2OneScore::stNotifyClearOne2OneScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyClearOne2OneScore::InitAsDefaultInstance() {
}

stNotifyClearOne2OneScore::stNotifyClearOne2OneScore(const stNotifyClearOne2OneScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyClearOne2OneScore::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyClearOne2OneScore::~stNotifyClearOne2OneScore() {
  SharedDtor();
}

void stNotifyClearOne2OneScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyClearOne2OneScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyClearOne2OneScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyClearOne2OneScore_descriptor_;
}

const stNotifyClearOne2OneScore& stNotifyClearOne2OneScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyClearOne2OneScore* stNotifyClearOne2OneScore::default_instance_ = NULL;

stNotifyClearOne2OneScore* stNotifyClearOne2OneScore::New() const {
  return new stNotifyClearOne2OneScore;
}

void stNotifyClearOne2OneScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyClearOne2OneScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyClearOne2OneScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyClearOne2OneScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyClearOne2OneScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyClearOne2OneScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyClearOne2OneScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyClearOne2OneScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyClearOne2OneScore::MergeFrom(const stNotifyClearOne2OneScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyClearOne2OneScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyClearOne2OneScore::CopyFrom(const stNotifyClearOne2OneScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyClearOne2OneScore::IsInitialized() const {

  return true;
}

void stNotifyClearOne2OneScore::Swap(stNotifyClearOne2OneScore* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyClearOne2OneScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyClearOne2OneScore_descriptor_;
  metadata.reflection = stNotifyClearOne2OneScore_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stClearOne2OneScoreSuccess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearOne2OneScoreSuccess_ProtoModID_descriptor_;
}
bool stClearOne2OneScoreSuccess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClearOne2OneScoreSuccess_ProtoModID stClearOne2OneScoreSuccess::ModID;
const stClearOne2OneScoreSuccess_ProtoModID stClearOne2OneScoreSuccess::ProtoModID_MIN;
const stClearOne2OneScoreSuccess_ProtoModID stClearOne2OneScoreSuccess::ProtoModID_MAX;
const int stClearOne2OneScoreSuccess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stClearOne2OneScoreSuccess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearOne2OneScoreSuccess_ProtoFunID_descriptor_;
}
bool stClearOne2OneScoreSuccess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 88:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stClearOne2OneScoreSuccess_ProtoFunID stClearOne2OneScoreSuccess::FunID;
const stClearOne2OneScoreSuccess_ProtoFunID stClearOne2OneScoreSuccess::ProtoFunID_MIN;
const stClearOne2OneScoreSuccess_ProtoFunID stClearOne2OneScoreSuccess::ProtoFunID_MAX;
const int stClearOne2OneScoreSuccess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stClearOne2OneScoreSuccess::kFlagFieldNumber;
#endif  // !_MSC_VER

stClearOne2OneScoreSuccess::stClearOne2OneScoreSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stClearOne2OneScoreSuccess::InitAsDefaultInstance() {
}

stClearOne2OneScoreSuccess::stClearOne2OneScoreSuccess(const stClearOne2OneScoreSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stClearOne2OneScoreSuccess::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stClearOne2OneScoreSuccess::~stClearOne2OneScoreSuccess() {
  SharedDtor();
}

void stClearOne2OneScoreSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stClearOne2OneScoreSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stClearOne2OneScoreSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stClearOne2OneScoreSuccess_descriptor_;
}

const stClearOne2OneScoreSuccess& stClearOne2OneScoreSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stClearOne2OneScoreSuccess* stClearOne2OneScoreSuccess::default_instance_ = NULL;

stClearOne2OneScoreSuccess* stClearOne2OneScoreSuccess::New() const {
  return new stClearOne2OneScoreSuccess;
}

void stClearOne2OneScoreSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stClearOne2OneScoreSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stClearOne2OneScoreSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stClearOne2OneScoreSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stClearOne2OneScoreSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stClearOne2OneScoreSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stClearOne2OneScoreSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stClearOne2OneScoreSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stClearOne2OneScoreSuccess::MergeFrom(const stClearOne2OneScoreSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stClearOne2OneScoreSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stClearOne2OneScoreSuccess::CopyFrom(const stClearOne2OneScoreSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stClearOne2OneScoreSuccess::IsInitialized() const {

  return true;
}

void stClearOne2OneScoreSuccess::Swap(stClearOne2OneScoreSuccess* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stClearOne2OneScoreSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stClearOne2OneScoreSuccess_descriptor_;
  metadata.reflection = stClearOne2OneScoreSuccess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInterceptReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInterceptReward_ProtoModID_descriptor_;
}
bool stInterceptReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInterceptReward_ProtoModID stInterceptReward::ModID;
const stInterceptReward_ProtoModID stInterceptReward::ProtoModID_MIN;
const stInterceptReward_ProtoModID stInterceptReward::ProtoModID_MAX;
const int stInterceptReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInterceptReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInterceptReward_ProtoFunID_descriptor_;
}
bool stInterceptReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 89:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInterceptReward_ProtoFunID stInterceptReward::FunID;
const stInterceptReward_ProtoFunID stInterceptReward::ProtoFunID_MIN;
const stInterceptReward_ProtoFunID stInterceptReward::ProtoFunID_MAX;
const int stInterceptReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInterceptReward::kCharIDFieldNumber;
const int stInterceptReward::kResID1FieldNumber;
const int stInterceptReward::kResNum1FieldNumber;
const int stInterceptReward::kResID2FieldNumber;
const int stInterceptReward::kResNum2FieldNumber;
#endif  // !_MSC_VER

stInterceptReward::stInterceptReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInterceptReward::InitAsDefaultInstance() {
}

stInterceptReward::stInterceptReward(const stInterceptReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInterceptReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  resid1_ = 0u;
  resnum1_ = 0u;
  resid2_ = 0u;
  resnum2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInterceptReward::~stInterceptReward() {
  SharedDtor();
}

void stInterceptReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInterceptReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInterceptReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInterceptReward_descriptor_;
}

const stInterceptReward& stInterceptReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stInterceptReward* stInterceptReward::default_instance_ = NULL;

stInterceptReward* stInterceptReward::New() const {
  return new stInterceptReward;
}

void stInterceptReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    resid1_ = 0u;
    resnum1_ = 0u;
    resid2_ = 0u;
    resnum2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInterceptReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_resID1;
        break;
      }

      // optional uint32 resID1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid1_)));
          set_has_resid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_resNum1;
        break;
      }

      // optional uint32 resNum1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum1_)));
          set_has_resnum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resID2;
        break;
      }

      // optional uint32 resID2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid2_)));
          set_has_resid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resNum2;
        break;
      }

      // optional uint32 resNum2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum2_)));
          set_has_resnum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInterceptReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 resID1 = 2;
  if (has_resid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->resid1(), output);
  }

  // optional uint32 resNum1 = 3;
  if (has_resnum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->resnum1(), output);
  }

  // optional uint32 resID2 = 4;
  if (has_resid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resid2(), output);
  }

  // optional uint32 resNum2 = 5;
  if (has_resnum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->resnum2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInterceptReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 resID1 = 2;
  if (has_resid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->resid1(), target);
  }

  // optional uint32 resNum1 = 3;
  if (has_resnum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->resnum1(), target);
  }

  // optional uint32 resID2 = 4;
  if (has_resid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resid2(), target);
  }

  // optional uint32 resNum2 = 5;
  if (has_resnum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->resnum2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInterceptReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 resID1 = 2;
    if (has_resid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid1());
    }

    // optional uint32 resNum1 = 3;
    if (has_resnum1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum1());
    }

    // optional uint32 resID2 = 4;
    if (has_resid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid2());
    }

    // optional uint32 resNum2 = 5;
    if (has_resnum2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInterceptReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInterceptReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInterceptReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInterceptReward::MergeFrom(const stInterceptReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_resid1()) {
      set_resid1(from.resid1());
    }
    if (from.has_resnum1()) {
      set_resnum1(from.resnum1());
    }
    if (from.has_resid2()) {
      set_resid2(from.resid2());
    }
    if (from.has_resnum2()) {
      set_resnum2(from.resnum2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInterceptReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInterceptReward::CopyFrom(const stInterceptReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInterceptReward::IsInitialized() const {

  return true;
}

void stInterceptReward::Swap(stInterceptReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(resid1_, other->resid1_);
    std::swap(resnum1_, other->resnum1_);
    std::swap(resid2_, other->resid2_);
    std::swap(resnum2_, other->resnum2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInterceptReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInterceptReward_descriptor_;
  metadata.reflection = stInterceptReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stQuickFinishDecDiamond_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishDecDiamond_ProtoModID_descriptor_;
}
bool stQuickFinishDecDiamond_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQuickFinishDecDiamond_ProtoModID stQuickFinishDecDiamond::ModID;
const stQuickFinishDecDiamond_ProtoModID stQuickFinishDecDiamond::ProtoModID_MIN;
const stQuickFinishDecDiamond_ProtoModID stQuickFinishDecDiamond::ProtoModID_MAX;
const int stQuickFinishDecDiamond::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stQuickFinishDecDiamond_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishDecDiamond_ProtoFunID_descriptor_;
}
bool stQuickFinishDecDiamond_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 90:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQuickFinishDecDiamond_ProtoFunID stQuickFinishDecDiamond::FunID;
const stQuickFinishDecDiamond_ProtoFunID stQuickFinishDecDiamond::ProtoFunID_MIN;
const stQuickFinishDecDiamond_ProtoFunID stQuickFinishDecDiamond::ProtoFunID_MAX;
const int stQuickFinishDecDiamond::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stQuickFinishDecDiamond::kCharIDFieldNumber;
#endif  // !_MSC_VER

stQuickFinishDecDiamond::stQuickFinishDecDiamond()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stQuickFinishDecDiamond::InitAsDefaultInstance() {
}

stQuickFinishDecDiamond::stQuickFinishDecDiamond(const stQuickFinishDecDiamond& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stQuickFinishDecDiamond::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQuickFinishDecDiamond::~stQuickFinishDecDiamond() {
  SharedDtor();
}

void stQuickFinishDecDiamond::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQuickFinishDecDiamond::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQuickFinishDecDiamond::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishDecDiamond_descriptor_;
}

const stQuickFinishDecDiamond& stQuickFinishDecDiamond::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stQuickFinishDecDiamond* stQuickFinishDecDiamond::default_instance_ = NULL;

stQuickFinishDecDiamond* stQuickFinishDecDiamond::New() const {
  return new stQuickFinishDecDiamond;
}

void stQuickFinishDecDiamond::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQuickFinishDecDiamond::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stQuickFinishDecDiamond::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stQuickFinishDecDiamond::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stQuickFinishDecDiamond::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQuickFinishDecDiamond::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQuickFinishDecDiamond* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQuickFinishDecDiamond*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQuickFinishDecDiamond::MergeFrom(const stQuickFinishDecDiamond& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQuickFinishDecDiamond::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQuickFinishDecDiamond::CopyFrom(const stQuickFinishDecDiamond& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQuickFinishDecDiamond::IsInitialized() const {

  return true;
}

void stQuickFinishDecDiamond::Swap(stQuickFinishDecDiamond* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQuickFinishDecDiamond::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQuickFinishDecDiamond_descriptor_;
  metadata.reflection = stQuickFinishDecDiamond_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stQuickFinishDiamondSuccess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishDiamondSuccess_ProtoModID_descriptor_;
}
bool stQuickFinishDiamondSuccess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQuickFinishDiamondSuccess_ProtoModID stQuickFinishDiamondSuccess::ModID;
const stQuickFinishDiamondSuccess_ProtoModID stQuickFinishDiamondSuccess::ProtoModID_MIN;
const stQuickFinishDiamondSuccess_ProtoModID stQuickFinishDiamondSuccess::ProtoModID_MAX;
const int stQuickFinishDiamondSuccess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stQuickFinishDiamondSuccess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishDiamondSuccess_ProtoFunID_descriptor_;
}
bool stQuickFinishDiamondSuccess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 91:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQuickFinishDiamondSuccess_ProtoFunID stQuickFinishDiamondSuccess::FunID;
const stQuickFinishDiamondSuccess_ProtoFunID stQuickFinishDiamondSuccess::ProtoFunID_MIN;
const stQuickFinishDiamondSuccess_ProtoFunID stQuickFinishDiamondSuccess::ProtoFunID_MAX;
const int stQuickFinishDiamondSuccess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stQuickFinishDiamondSuccess::kCharIDFieldNumber;
#endif  // !_MSC_VER

stQuickFinishDiamondSuccess::stQuickFinishDiamondSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stQuickFinishDiamondSuccess::InitAsDefaultInstance() {
}

stQuickFinishDiamondSuccess::stQuickFinishDiamondSuccess(const stQuickFinishDiamondSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stQuickFinishDiamondSuccess::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQuickFinishDiamondSuccess::~stQuickFinishDiamondSuccess() {
  SharedDtor();
}

void stQuickFinishDiamondSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQuickFinishDiamondSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQuickFinishDiamondSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQuickFinishDiamondSuccess_descriptor_;
}

const stQuickFinishDiamondSuccess& stQuickFinishDiamondSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stQuickFinishDiamondSuccess* stQuickFinishDiamondSuccess::default_instance_ = NULL;

stQuickFinishDiamondSuccess* stQuickFinishDiamondSuccess::New() const {
  return new stQuickFinishDiamondSuccess;
}

void stQuickFinishDiamondSuccess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQuickFinishDiamondSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stQuickFinishDiamondSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stQuickFinishDiamondSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stQuickFinishDiamondSuccess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQuickFinishDiamondSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQuickFinishDiamondSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQuickFinishDiamondSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQuickFinishDiamondSuccess::MergeFrom(const stQuickFinishDiamondSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQuickFinishDiamondSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQuickFinishDiamondSuccess::CopyFrom(const stQuickFinishDiamondSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQuickFinishDiamondSuccess::IsInitialized() const {

  return true;
}

void stQuickFinishDiamondSuccess::Swap(stQuickFinishDiamondSuccess* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQuickFinishDiamondSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQuickFinishDiamondSuccess_descriptor_;
  metadata.reflection = stQuickFinishDiamondSuccess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOne2OnePkWithRobot_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePkWithRobot_ProtoModID_descriptor_;
}
bool stOne2OnePkWithRobot_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePkWithRobot_ProtoModID stOne2OnePkWithRobot::ModID;
const stOne2OnePkWithRobot_ProtoModID stOne2OnePkWithRobot::ProtoModID_MIN;
const stOne2OnePkWithRobot_ProtoModID stOne2OnePkWithRobot::ProtoModID_MAX;
const int stOne2OnePkWithRobot::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOne2OnePkWithRobot_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePkWithRobot_ProtoFunID_descriptor_;
}
bool stOne2OnePkWithRobot_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 92:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOne2OnePkWithRobot_ProtoFunID stOne2OnePkWithRobot::FunID;
const stOne2OnePkWithRobot_ProtoFunID stOne2OnePkWithRobot::ProtoFunID_MIN;
const stOne2OnePkWithRobot_ProtoFunID stOne2OnePkWithRobot::ProtoFunID_MAX;
const int stOne2OnePkWithRobot::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOne2OnePkWithRobot::kCharIDFieldNumber;
const int stOne2OnePkWithRobot::kRobotGroupFieldNumber;
#endif  // !_MSC_VER

stOne2OnePkWithRobot::stOne2OnePkWithRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOne2OnePkWithRobot::InitAsDefaultInstance() {
}

stOne2OnePkWithRobot::stOne2OnePkWithRobot(const stOne2OnePkWithRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOne2OnePkWithRobot::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  robotgroup_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOne2OnePkWithRobot::~stOne2OnePkWithRobot() {
  SharedDtor();
}

void stOne2OnePkWithRobot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOne2OnePkWithRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOne2OnePkWithRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOne2OnePkWithRobot_descriptor_;
}

const stOne2OnePkWithRobot& stOne2OnePkWithRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stOne2OnePkWithRobot* stOne2OnePkWithRobot::default_instance_ = NULL;

stOne2OnePkWithRobot* stOne2OnePkWithRobot::New() const {
  return new stOne2OnePkWithRobot;
}

void stOne2OnePkWithRobot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    robotgroup_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOne2OnePkWithRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_robotGroup;
        break;
      }

      // optional uint32 robotGroup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robotgroup_)));
          set_has_robotgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOne2OnePkWithRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 robotGroup = 2;
  if (has_robotgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robotgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOne2OnePkWithRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 robotGroup = 2;
  if (has_robotgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robotgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOne2OnePkWithRobot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 robotGroup = 2;
    if (has_robotgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robotgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOne2OnePkWithRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOne2OnePkWithRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOne2OnePkWithRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOne2OnePkWithRobot::MergeFrom(const stOne2OnePkWithRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_robotgroup()) {
      set_robotgroup(from.robotgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOne2OnePkWithRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOne2OnePkWithRobot::CopyFrom(const stOne2OnePkWithRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOne2OnePkWithRobot::IsInitialized() const {

  return true;
}

void stOne2OnePkWithRobot::Swap(stOne2OnePkWithRobot* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(robotgroup_, other->robotgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOne2OnePkWithRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOne2OnePkWithRobot_descriptor_;
  metadata.reflection = stOne2OnePkWithRobot_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyUserBeginGuard_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserBeginGuard_ProtoModID_descriptor_;
}
bool stNotifyUserBeginGuard_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyUserBeginGuard_ProtoModID stNotifyUserBeginGuard::ModID;
const stNotifyUserBeginGuard_ProtoModID stNotifyUserBeginGuard::ProtoModID_MIN;
const stNotifyUserBeginGuard_ProtoModID stNotifyUserBeginGuard::ProtoModID_MAX;
const int stNotifyUserBeginGuard::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyUserBeginGuard_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserBeginGuard_ProtoFunID_descriptor_;
}
bool stNotifyUserBeginGuard_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 93:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyUserBeginGuard_ProtoFunID stNotifyUserBeginGuard::FunID;
const stNotifyUserBeginGuard_ProtoFunID stNotifyUserBeginGuard::ProtoFunID_MIN;
const stNotifyUserBeginGuard_ProtoFunID stNotifyUserBeginGuard::ProtoFunID_MAX;
const int stNotifyUserBeginGuard::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyUserBeginGuard::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNotifyUserBeginGuard::stNotifyUserBeginGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyUserBeginGuard::InitAsDefaultInstance() {
}

stNotifyUserBeginGuard::stNotifyUserBeginGuard(const stNotifyUserBeginGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyUserBeginGuard::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyUserBeginGuard::~stNotifyUserBeginGuard() {
  SharedDtor();
}

void stNotifyUserBeginGuard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyUserBeginGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyUserBeginGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserBeginGuard_descriptor_;
}

const stNotifyUserBeginGuard& stNotifyUserBeginGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyUserBeginGuard* stNotifyUserBeginGuard::default_instance_ = NULL;

stNotifyUserBeginGuard* stNotifyUserBeginGuard::New() const {
  return new stNotifyUserBeginGuard;
}

void stNotifyUserBeginGuard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyUserBeginGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyUserBeginGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyUserBeginGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyUserBeginGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyUserBeginGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyUserBeginGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyUserBeginGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyUserBeginGuard::MergeFrom(const stNotifyUserBeginGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyUserBeginGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyUserBeginGuard::CopyFrom(const stNotifyUserBeginGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyUserBeginGuard::IsInitialized() const {

  return true;
}

void stNotifyUserBeginGuard::Swap(stNotifyUserBeginGuard* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyUserBeginGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyUserBeginGuard_descriptor_;
  metadata.reflection = stNotifyUserBeginGuard_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyUserInterceptResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserInterceptResult_ProtoModID_descriptor_;
}
bool stNotifyUserInterceptResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyUserInterceptResult_ProtoModID stNotifyUserInterceptResult::ModID;
const stNotifyUserInterceptResult_ProtoModID stNotifyUserInterceptResult::ProtoModID_MIN;
const stNotifyUserInterceptResult_ProtoModID stNotifyUserInterceptResult::ProtoModID_MAX;
const int stNotifyUserInterceptResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyUserInterceptResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserInterceptResult_ProtoFunID_descriptor_;
}
bool stNotifyUserInterceptResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 94:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyUserInterceptResult_ProtoFunID stNotifyUserInterceptResult::FunID;
const stNotifyUserInterceptResult_ProtoFunID stNotifyUserInterceptResult::ProtoFunID_MIN;
const stNotifyUserInterceptResult_ProtoFunID stNotifyUserInterceptResult::ProtoFunID_MAX;
const int stNotifyUserInterceptResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyUserInterceptResult::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNotifyUserInterceptResult::stNotifyUserInterceptResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyUserInterceptResult::InitAsDefaultInstance() {
}

stNotifyUserInterceptResult::stNotifyUserInterceptResult(const stNotifyUserInterceptResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyUserInterceptResult::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyUserInterceptResult::~stNotifyUserInterceptResult() {
  SharedDtor();
}

void stNotifyUserInterceptResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyUserInterceptResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyUserInterceptResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserInterceptResult_descriptor_;
}

const stNotifyUserInterceptResult& stNotifyUserInterceptResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyUserInterceptResult* stNotifyUserInterceptResult::default_instance_ = NULL;

stNotifyUserInterceptResult* stNotifyUserInterceptResult::New() const {
  return new stNotifyUserInterceptResult;
}

void stNotifyUserInterceptResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyUserInterceptResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyUserInterceptResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyUserInterceptResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyUserInterceptResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyUserInterceptResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyUserInterceptResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyUserInterceptResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyUserInterceptResult::MergeFrom(const stNotifyUserInterceptResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyUserInterceptResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyUserInterceptResult::CopyFrom(const stNotifyUserInterceptResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyUserInterceptResult::IsInitialized() const {

  return true;
}

void stNotifyUserInterceptResult::Swap(stNotifyUserInterceptResult* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyUserInterceptResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyUserInterceptResult_descriptor_;
  metadata.reflection = stNotifyUserInterceptResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyCloseBetaReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCloseBetaReward_ProtoModID_descriptor_;
}
bool stNotifyCloseBetaReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyCloseBetaReward_ProtoModID stNotifyCloseBetaReward::ModID;
const stNotifyCloseBetaReward_ProtoModID stNotifyCloseBetaReward::ProtoModID_MIN;
const stNotifyCloseBetaReward_ProtoModID stNotifyCloseBetaReward::ProtoModID_MAX;
const int stNotifyCloseBetaReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyCloseBetaReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCloseBetaReward_ProtoFunID_descriptor_;
}
bool stNotifyCloseBetaReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 95:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyCloseBetaReward_ProtoFunID stNotifyCloseBetaReward::FunID;
const stNotifyCloseBetaReward_ProtoFunID stNotifyCloseBetaReward::ProtoFunID_MIN;
const stNotifyCloseBetaReward_ProtoFunID stNotifyCloseBetaReward::ProtoFunID_MAX;
const int stNotifyCloseBetaReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyCloseBetaReward::kCharIDFieldNumber;
const int stNotifyCloseBetaReward::kBoxIDFieldNumber;
const int stNotifyCloseBetaReward::kGiveDiamondFieldNumber;
const int stNotifyCloseBetaReward::kGiveRechargeFieldNumber;
#endif  // !_MSC_VER

stNotifyCloseBetaReward::stNotifyCloseBetaReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyCloseBetaReward::InitAsDefaultInstance() {
}

stNotifyCloseBetaReward::stNotifyCloseBetaReward(const stNotifyCloseBetaReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyCloseBetaReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  boxid_ = 0u;
  givediamond_ = 0u;
  giverecharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyCloseBetaReward::~stNotifyCloseBetaReward() {
  SharedDtor();
}

void stNotifyCloseBetaReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyCloseBetaReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyCloseBetaReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCloseBetaReward_descriptor_;
}

const stNotifyCloseBetaReward& stNotifyCloseBetaReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyCloseBetaReward* stNotifyCloseBetaReward::default_instance_ = NULL;

stNotifyCloseBetaReward* stNotifyCloseBetaReward::New() const {
  return new stNotifyCloseBetaReward;
}

void stNotifyCloseBetaReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    boxid_ = 0u;
    givediamond_ = 0u;
    giverecharge_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyCloseBetaReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxID;
        break;
      }

      // optional uint32 boxID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_giveDiamond;
        break;
      }

      // optional uint32 giveDiamond = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giveDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &givediamond_)));
          set_has_givediamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_giveRecharge;
        break;
      }

      // optional uint32 giveRecharge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giveRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &giverecharge_)));
          set_has_giverecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyCloseBetaReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 boxID = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boxid(), output);
  }

  // optional uint32 giveDiamond = 3;
  if (has_givediamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->givediamond(), output);
  }

  // optional uint32 giveRecharge = 4;
  if (has_giverecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->giverecharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyCloseBetaReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 boxID = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boxid(), target);
  }

  // optional uint32 giveDiamond = 3;
  if (has_givediamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->givediamond(), target);
  }

  // optional uint32 giveRecharge = 4;
  if (has_giverecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->giverecharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyCloseBetaReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 boxID = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // optional uint32 giveDiamond = 3;
    if (has_givediamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->givediamond());
    }

    // optional uint32 giveRecharge = 4;
    if (has_giverecharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->giverecharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyCloseBetaReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyCloseBetaReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyCloseBetaReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyCloseBetaReward::MergeFrom(const stNotifyCloseBetaReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_givediamond()) {
      set_givediamond(from.givediamond());
    }
    if (from.has_giverecharge()) {
      set_giverecharge(from.giverecharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyCloseBetaReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyCloseBetaReward::CopyFrom(const stNotifyCloseBetaReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyCloseBetaReward::IsInitialized() const {

  return true;
}

void stNotifyCloseBetaReward::Swap(stNotifyCloseBetaReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(boxid_, other->boxid_);
    std::swap(givediamond_, other->givediamond_);
    std::swap(giverecharge_, other->giverecharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyCloseBetaReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyCloseBetaReward_descriptor_;
  metadata.reflection = stNotifyCloseBetaReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stEnterManorFightMapUserInfo::kCharIDFieldNumber;
const int stEnterManorFightMapUserInfo::kHpFieldNumber;
#endif  // !_MSC_VER

stEnterManorFightMapUserInfo::stEnterManorFightMapUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterManorFightMapUserInfo::InitAsDefaultInstance() {
}

stEnterManorFightMapUserInfo::stEnterManorFightMapUserInfo(const stEnterManorFightMapUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterManorFightMapUserInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  hp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterManorFightMapUserInfo::~stEnterManorFightMapUserInfo() {
  SharedDtor();
}

void stEnterManorFightMapUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEnterManorFightMapUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterManorFightMapUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightMapUserInfo_descriptor_;
}

const stEnterManorFightMapUserInfo& stEnterManorFightMapUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stEnterManorFightMapUserInfo* stEnterManorFightMapUserInfo::default_instance_ = NULL;

stEnterManorFightMapUserInfo* stEnterManorFightMapUserInfo::New() const {
  return new stEnterManorFightMapUserInfo;
}

void stEnterManorFightMapUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    hp_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterManorFightMapUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // optional uint32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterManorFightMapUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterManorFightMapUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterManorFightMapUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterManorFightMapUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterManorFightMapUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterManorFightMapUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterManorFightMapUserInfo::MergeFrom(const stEnterManorFightMapUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterManorFightMapUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterManorFightMapUserInfo::CopyFrom(const stEnterManorFightMapUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterManorFightMapUserInfo::IsInitialized() const {

  return true;
}

void stEnterManorFightMapUserInfo::Swap(stEnterManorFightMapUserInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterManorFightMapUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterManorFightMapUserInfo_descriptor_;
  metadata.reflection = stEnterManorFightMapUserInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEnterManorFightMap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightMap_ProtoModID_descriptor_;
}
bool stEnterManorFightMap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterManorFightMap_ProtoModID stEnterManorFightMap::ModID;
const stEnterManorFightMap_ProtoModID stEnterManorFightMap::ProtoModID_MIN;
const stEnterManorFightMap_ProtoModID stEnterManorFightMap::ProtoModID_MAX;
const int stEnterManorFightMap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterManorFightMap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightMap_ProtoFunID_descriptor_;
}
bool stEnterManorFightMap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 96:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterManorFightMap_ProtoFunID stEnterManorFightMap::FunID;
const stEnterManorFightMap_ProtoFunID stEnterManorFightMap::ProtoFunID_MIN;
const stEnterManorFightMap_ProtoFunID stEnterManorFightMap::ProtoFunID_MAX;
const int stEnterManorFightMap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEnterManorFightMap::kGuildAMemFieldNumber;
const int stEnterManorFightMap::kGuildBMemFieldNumber;
const int stEnterManorFightMap::kManorIDFieldNumber;
const int stEnterManorFightMap::kFomationFieldNumber;
const int stEnterManorFightMap::kTeamAIDFieldNumber;
const int stEnterManorFightMap::kTeamBIDFieldNumber;
#endif  // !_MSC_VER

stEnterManorFightMap::stEnterManorFightMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterManorFightMap::InitAsDefaultInstance() {
}

stEnterManorFightMap::stEnterManorFightMap(const stEnterManorFightMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterManorFightMap::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  fomation_ = 0u;
  teamaid_ = 0u;
  teambid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterManorFightMap::~stEnterManorFightMap() {
  SharedDtor();
}

void stEnterManorFightMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEnterManorFightMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterManorFightMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightMap_descriptor_;
}

const stEnterManorFightMap& stEnterManorFightMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stEnterManorFightMap* stEnterManorFightMap::default_instance_ = NULL;

stEnterManorFightMap* stEnterManorFightMap::New() const {
  return new stEnterManorFightMap;
}

void stEnterManorFightMap::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    manorid_ = 0u;
    fomation_ = 0u;
    teamaid_ = 0u;
    teambid_ = 0u;
  }
  guildamem_.Clear();
  guildbmem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterManorFightMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stEnterManorFightMapUserInfo guildAMem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildAMem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildamem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_guildAMem;
        if (input->ExpectTag(18)) goto parse_guildBMem;
        break;
      }

      // repeated .Global.stEnterManorFightMapUserInfo guildBMem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildBMem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_guildbmem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildBMem;
        if (input->ExpectTag(24)) goto parse_manorID;
        break;
      }

      // optional uint32 manorID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fomation;
        break;
      }

      // optional uint32 fomation = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fomation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fomation_)));
          set_has_fomation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_teamAID;
        break;
      }

      // optional uint32 teamAID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamAID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamaid_)));
          set_has_teamaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_teamBID;
        break;
      }

      // optional uint32 teamBID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamBID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teambid_)));
          set_has_teambid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterManorFightMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stEnterManorFightMapUserInfo guildAMem = 1;
  for (int i = 0; i < this->guildamem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->guildamem(i), output);
  }

  // repeated .Global.stEnterManorFightMapUserInfo guildBMem = 2;
  for (int i = 0; i < this->guildbmem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guildbmem(i), output);
  }

  // optional uint32 manorID = 3;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->manorid(), output);
  }

  // optional uint32 fomation = 4;
  if (has_fomation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->fomation(), output);
  }

  // optional uint32 teamAID = 5;
  if (has_teamaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->teamaid(), output);
  }

  // optional uint32 teamBID = 6;
  if (has_teambid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->teambid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterManorFightMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stEnterManorFightMapUserInfo guildAMem = 1;
  for (int i = 0; i < this->guildamem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->guildamem(i), target);
  }

  // repeated .Global.stEnterManorFightMapUserInfo guildBMem = 2;
  for (int i = 0; i < this->guildbmem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guildbmem(i), target);
  }

  // optional uint32 manorID = 3;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->manorid(), target);
  }

  // optional uint32 fomation = 4;
  if (has_fomation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->fomation(), target);
  }

  // optional uint32 teamAID = 5;
  if (has_teamaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->teamaid(), target);
  }

  // optional uint32 teamBID = 6;
  if (has_teambid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->teambid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterManorFightMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 manorID = 3;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional uint32 fomation = 4;
    if (has_fomation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fomation());
    }

    // optional uint32 teamAID = 5;
    if (has_teamaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamaid());
    }

    // optional uint32 teamBID = 6;
    if (has_teambid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teambid());
    }

  }
  // repeated .Global.stEnterManorFightMapUserInfo guildAMem = 1;
  total_size += 1 * this->guildamem_size();
  for (int i = 0; i < this->guildamem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildamem(i));
  }

  // repeated .Global.stEnterManorFightMapUserInfo guildBMem = 2;
  total_size += 1 * this->guildbmem_size();
  for (int i = 0; i < this->guildbmem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->guildbmem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterManorFightMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterManorFightMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterManorFightMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterManorFightMap::MergeFrom(const stEnterManorFightMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  guildamem_.MergeFrom(from.guildamem_);
  guildbmem_.MergeFrom(from.guildbmem_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_fomation()) {
      set_fomation(from.fomation());
    }
    if (from.has_teamaid()) {
      set_teamaid(from.teamaid());
    }
    if (from.has_teambid()) {
      set_teambid(from.teambid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterManorFightMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterManorFightMap::CopyFrom(const stEnterManorFightMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterManorFightMap::IsInitialized() const {

  return true;
}

void stEnterManorFightMap::Swap(stEnterManorFightMap* other) {
  if (other != this) {
    guildamem_.Swap(&other->guildamem_);
    guildbmem_.Swap(&other->guildbmem_);
    std::swap(manorid_, other->manorid_);
    std::swap(fomation_, other->fomation_);
    std::swap(teamaid_, other->teamaid_);
    std::swap(teambid_, other->teambid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterManorFightMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterManorFightMap_descriptor_;
  metadata.reflection = stEnterManorFightMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stManorFightBattleProp::kCurHPFieldNumber;
const int stManorFightBattleProp::kCharIDFieldNumber;
#endif  // !_MSC_VER

stManorFightBattleProp::stManorFightBattleProp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stManorFightBattleProp::InitAsDefaultInstance() {
}

stManorFightBattleProp::stManorFightBattleProp(const stManorFightBattleProp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stManorFightBattleProp::SharedCtor() {
  _cached_size_ = 0;
  curhp_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stManorFightBattleProp::~stManorFightBattleProp() {
  SharedDtor();
}

void stManorFightBattleProp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stManorFightBattleProp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stManorFightBattleProp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightBattleProp_descriptor_;
}

const stManorFightBattleProp& stManorFightBattleProp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stManorFightBattleProp* stManorFightBattleProp::default_instance_ = NULL;

stManorFightBattleProp* stManorFightBattleProp::New() const {
  return new stManorFightBattleProp;
}

void stManorFightBattleProp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curhp_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stManorFightBattleProp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curHP = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stManorFightBattleProp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curHP = 1;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curhp(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stManorFightBattleProp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curHP = 1;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curhp(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stManorFightBattleProp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curHP = 1;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stManorFightBattleProp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stManorFightBattleProp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stManorFightBattleProp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stManorFightBattleProp::MergeFrom(const stManorFightBattleProp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stManorFightBattleProp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stManorFightBattleProp::CopyFrom(const stManorFightBattleProp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stManorFightBattleProp::IsInitialized() const {

  return true;
}

void stManorFightBattleProp::Swap(stManorFightBattleProp* other) {
  if (other != this) {
    std::swap(curhp_, other->curhp_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stManorFightBattleProp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stManorFightBattleProp_descriptor_;
  metadata.reflection = stManorFightBattleProp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFinishManorFight_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFinishManorFight_ProtoModID_descriptor_;
}
bool stFinishManorFight_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFinishManorFight_ProtoModID stFinishManorFight::ModID;
const stFinishManorFight_ProtoModID stFinishManorFight::ProtoModID_MIN;
const stFinishManorFight_ProtoModID stFinishManorFight::ProtoModID_MAX;
const int stFinishManorFight::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFinishManorFight_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFinishManorFight_ProtoFunID_descriptor_;
}
bool stFinishManorFight_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 97:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFinishManorFight_ProtoFunID stFinishManorFight::FunID;
const stFinishManorFight_ProtoFunID stFinishManorFight::ProtoFunID_MIN;
const stFinishManorFight_ProtoFunID stFinishManorFight::ProtoFunID_MAX;
const int stFinishManorFight::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFinishManorFight::kManorIDFieldNumber;
const int stFinishManorFight::kFomationFieldNumber;
const int stFinishManorFight::kTeamAIDFieldNumber;
const int stFinishManorFight::kTeamBIDFieldNumber;
const int stFinishManorFight::kBFailFieldNumber;
const int stFinishManorFight::kBFinishFieldNumber;
const int stFinishManorFight::kUserInfoFieldNumber;
#endif  // !_MSC_VER

stFinishManorFight::stFinishManorFight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFinishManorFight::InitAsDefaultInstance() {
}

stFinishManorFight::stFinishManorFight(const stFinishManorFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFinishManorFight::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  fomation_ = 0u;
  teamaid_ = 0u;
  teambid_ = 0u;
  bfail_ = false;
  bfinish_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFinishManorFight::~stFinishManorFight() {
  SharedDtor();
}

void stFinishManorFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stFinishManorFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFinishManorFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFinishManorFight_descriptor_;
}

const stFinishManorFight& stFinishManorFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stFinishManorFight* stFinishManorFight::default_instance_ = NULL;

stFinishManorFight* stFinishManorFight::New() const {
  return new stFinishManorFight;
}

void stFinishManorFight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    fomation_ = 0u;
    teamaid_ = 0u;
    teambid_ = 0u;
    bfail_ = false;
    bfinish_ = false;
  }
  userinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFinishManorFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fomation;
        break;
      }

      // optional uint32 fomation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fomation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fomation_)));
          set_has_fomation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamAID;
        break;
      }

      // optional uint32 teamAID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamAID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamaid_)));
          set_has_teamaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamBID;
        break;
      }

      // optional uint32 teamBID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamBID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teambid_)));
          set_has_teambid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bFail;
        break;
      }

      // optional bool bFail = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bFail:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bfail_)));
          set_has_bfail();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bFinish;
        break;
      }

      // optional bool bFinish = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bFinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bfinish_)));
          set_has_bfinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_userInfo;
        break;
      }

      // repeated .Global.stManorFightBattleProp userInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_userinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_userInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFinishManorFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  // optional uint32 fomation = 2;
  if (has_fomation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fomation(), output);
  }

  // optional uint32 teamAID = 3;
  if (has_teamaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teamaid(), output);
  }

  // optional uint32 teamBID = 4;
  if (has_teambid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teambid(), output);
  }

  // optional bool bFail = 5;
  if (has_bfail()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bfail(), output);
  }

  // optional bool bFinish = 6;
  if (has_bfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->bfinish(), output);
  }

  // repeated .Global.stManorFightBattleProp userInfo = 7;
  for (int i = 0; i < this->userinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->userinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFinishManorFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  // optional uint32 fomation = 2;
  if (has_fomation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fomation(), target);
  }

  // optional uint32 teamAID = 3;
  if (has_teamaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teamaid(), target);
  }

  // optional uint32 teamBID = 4;
  if (has_teambid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teambid(), target);
  }

  // optional bool bFail = 5;
  if (has_bfail()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bfail(), target);
  }

  // optional bool bFinish = 6;
  if (has_bfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->bfinish(), target);
  }

  // repeated .Global.stManorFightBattleProp userInfo = 7;
  for (int i = 0; i < this->userinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->userinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFinishManorFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional uint32 fomation = 2;
    if (has_fomation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fomation());
    }

    // optional uint32 teamAID = 3;
    if (has_teamaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamaid());
    }

    // optional uint32 teamBID = 4;
    if (has_teambid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teambid());
    }

    // optional bool bFail = 5;
    if (has_bfail()) {
      total_size += 1 + 1;
    }

    // optional bool bFinish = 6;
    if (has_bfinish()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Global.stManorFightBattleProp userInfo = 7;
  total_size += 1 * this->userinfo_size();
  for (int i = 0; i < this->userinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->userinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFinishManorFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFinishManorFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFinishManorFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFinishManorFight::MergeFrom(const stFinishManorFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  userinfo_.MergeFrom(from.userinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_fomation()) {
      set_fomation(from.fomation());
    }
    if (from.has_teamaid()) {
      set_teamaid(from.teamaid());
    }
    if (from.has_teambid()) {
      set_teambid(from.teambid());
    }
    if (from.has_bfail()) {
      set_bfail(from.bfail());
    }
    if (from.has_bfinish()) {
      set_bfinish(from.bfinish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFinishManorFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFinishManorFight::CopyFrom(const stFinishManorFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFinishManorFight::IsInitialized() const {

  return true;
}

void stFinishManorFight::Swap(stFinishManorFight* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(fomation_, other->fomation_);
    std::swap(teamaid_, other->teamaid_);
    std::swap(teambid_, other->teambid_);
    std::swap(bfail_, other->bfail_);
    std::swap(bfinish_, other->bfinish_);
    userinfo_.Swap(&other->userinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFinishManorFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFinishManorFight_descriptor_;
  metadata.reflection = stFinishManorFight_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stExistName_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExistName_eResult_descriptor_;
}
bool stExistName_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExistName_eResult stExistName::eSuccess;
const stExistName_eResult stExistName::eName_Repetition;
const stExistName_eResult stExistName::eResult_MIN;
const stExistName_eResult stExistName::eResult_MAX;
const int stExistName::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExistName_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExistName_ProtoModID_descriptor_;
}
bool stExistName_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExistName_ProtoModID stExistName::ModID;
const stExistName_ProtoModID stExistName::ProtoModID_MIN;
const stExistName_ProtoModID stExistName::ProtoModID_MAX;
const int stExistName::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExistName_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExistName_ProtoFunID_descriptor_;
}
bool stExistName_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 98:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExistName_ProtoFunID stExistName::FunID;
const stExistName_ProtoFunID stExistName::ProtoFunID_MIN;
const stExistName_ProtoFunID stExistName::ProtoFunID_MAX;
const int stExistName::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stExistName::kResultFieldNumber;
const int stExistName::kCharIDFieldNumber;
const int stExistName::kNameFieldNumber;
#endif  // !_MSC_VER

stExistName::stExistName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExistName::InitAsDefaultInstance() {
}

stExistName::stExistName(const stExistName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExistName::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExistName::~stExistName() {
  SharedDtor();
}

void stExistName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stExistName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExistName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExistName_descriptor_;
}

const stExistName& stExistName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stExistName* stExistName::default_instance_ = NULL;

stExistName* stExistName::New() const {
  return new stExistName;
}

void stExistName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExistName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.stExistName.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::stExistName_eResult_IsValid(value)) {
            set_result(static_cast< ::Global::stExistName_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExistName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.stExistName.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExistName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.stExistName.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExistName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.stExistName.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExistName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExistName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExistName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExistName::MergeFrom(const stExistName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExistName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExistName::CopyFrom(const stExistName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExistName::IsInitialized() const {

  return true;
}

void stExistName::Swap(stExistName* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExistName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExistName_descriptor_;
  metadata.reflection = stExistName_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynName_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynName_ProtoModID_descriptor_;
}
bool stSynName_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynName_ProtoModID stSynName::ModID;
const stSynName_ProtoModID stSynName::ProtoModID_MIN;
const stSynName_ProtoModID stSynName::ProtoModID_MAX;
const int stSynName::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynName_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynName_ProtoFunID_descriptor_;
}
bool stSynName_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynName_ProtoFunID stSynName::FunID;
const stSynName_ProtoFunID stSynName::ProtoFunID_MIN;
const stSynName_ProtoFunID stSynName::ProtoFunID_MAX;
const int stSynName::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynName::kCharIDFieldNumber;
const int stSynName::kNameFieldNumber;
#endif  // !_MSC_VER

stSynName::stSynName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynName::InitAsDefaultInstance() {
}

stSynName::stSynName(const stSynName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynName::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynName::~stSynName() {
  SharedDtor();
}

void stSynName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynName_descriptor_;
}

const stSynName& stSynName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynName* stSynName::default_instance_ = NULL;

stSynName* stSynName::New() const {
  return new stSynName;
}

void stSynName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynName::MergeFrom(const stSynName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynName::CopyFrom(const stSynName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynName::IsInitialized() const {

  return true;
}

void stSynName::Swap(stSynName* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynName_descriptor_;
  metadata.reflection = stSynName_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynGloryfashionCharID_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGloryfashionCharID_ProtoModID_descriptor_;
}
bool stSynGloryfashionCharID_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGloryfashionCharID_ProtoModID stSynGloryfashionCharID::ModID;
const stSynGloryfashionCharID_ProtoModID stSynGloryfashionCharID::ProtoModID_MIN;
const stSynGloryfashionCharID_ProtoModID stSynGloryfashionCharID::ProtoModID_MAX;
const int stSynGloryfashionCharID::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynGloryfashionCharID_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGloryfashionCharID_ProtoFunID_descriptor_;
}
bool stSynGloryfashionCharID_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGloryfashionCharID_ProtoFunID stSynGloryfashionCharID::FunID;
const stSynGloryfashionCharID_ProtoFunID stSynGloryfashionCharID::ProtoFunID_MIN;
const stSynGloryfashionCharID_ProtoFunID stSynGloryfashionCharID::ProtoFunID_MAX;
const int stSynGloryfashionCharID::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynGloryfashionCharID::kCharIDFieldNumber;
const int stSynGloryfashionCharID::kBuyTimeFieldNumber;
#endif  // !_MSC_VER

stSynGloryfashionCharID::stSynGloryfashionCharID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynGloryfashionCharID::InitAsDefaultInstance() {
}

stSynGloryfashionCharID::stSynGloryfashionCharID(const stSynGloryfashionCharID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynGloryfashionCharID::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  buytime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynGloryfashionCharID::~stSynGloryfashionCharID() {
  SharedDtor();
}

void stSynGloryfashionCharID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynGloryfashionCharID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynGloryfashionCharID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGloryfashionCharID_descriptor_;
}

const stSynGloryfashionCharID& stSynGloryfashionCharID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynGloryfashionCharID* stSynGloryfashionCharID::default_instance_ = NULL;

stSynGloryfashionCharID* stSynGloryfashionCharID::New() const {
  return new stSynGloryfashionCharID;
}

void stSynGloryfashionCharID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    buytime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynGloryfashionCharID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buyTime;
        break;
      }

      // optional uint32 buyTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buytime_)));
          set_has_buytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynGloryfashionCharID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 buyTime = 2;
  if (has_buytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynGloryfashionCharID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 buyTime = 2;
  if (has_buytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynGloryfashionCharID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 buyTime = 2;
    if (has_buytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buytime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynGloryfashionCharID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynGloryfashionCharID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynGloryfashionCharID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynGloryfashionCharID::MergeFrom(const stSynGloryfashionCharID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_buytime()) {
      set_buytime(from.buytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynGloryfashionCharID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynGloryfashionCharID::CopyFrom(const stSynGloryfashionCharID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynGloryfashionCharID::IsInitialized() const {

  return true;
}

void stSynGloryfashionCharID::Swap(stSynGloryfashionCharID* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(buytime_, other->buytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynGloryfashionCharID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynGloryfashionCharID_descriptor_;
  metadata.reflection = stSynGloryfashionCharID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stDevilCallItem::kItemIdFieldNumber;
const int stDevilCallItem::kName1FieldNumber;
const int stDevilCallItem::kCharID1FieldNumber;
const int stDevilCallItem::kName2FieldNumber;
const int stDevilCallItem::kCharID2FieldNumber;
const int stDevilCallItem::kName3FieldNumber;
const int stDevilCallItem::kCharID3FieldNumber;
const int stDevilCallItem::kHasPassFieldNumber;
const int stDevilCallItem::kBossdrawstatusFieldNumber;
const int stDevilCallItem::kCommondrawstatusFieldNumber;
#endif  // !_MSC_VER

stDevilCallItem::stDevilCallItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDevilCallItem::InitAsDefaultInstance() {
}

stDevilCallItem::stDevilCallItem(const stDevilCallItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDevilCallItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid1_ = 0u;
  name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid2_ = 0u;
  name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid3_ = 0u;
  haspass_ = false;
  bossdrawstatus_ = 0u;
  commondrawstatus_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDevilCallItem::~stDevilCallItem() {
  SharedDtor();
}

void stDevilCallItem::SharedDtor() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name3_ != &::google::protobuf::internal::kEmptyString) {
    delete name3_;
  }
  if (this != default_instance_) {
  }
}

void stDevilCallItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDevilCallItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallItem_descriptor_;
}

const stDevilCallItem& stDevilCallItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDevilCallItem* stDevilCallItem::default_instance_ = NULL;

stDevilCallItem* stDevilCallItem::New() const {
  return new stDevilCallItem;
}

void stDevilCallItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    if (has_name1()) {
      if (name1_ != &::google::protobuf::internal::kEmptyString) {
        name1_->clear();
      }
    }
    charid1_ = 0u;
    if (has_name2()) {
      if (name2_ != &::google::protobuf::internal::kEmptyString) {
        name2_->clear();
      }
    }
    charid2_ = 0u;
    if (has_name3()) {
      if (name3_ != &::google::protobuf::internal::kEmptyString) {
        name3_->clear();
      }
    }
    charid3_ = 0u;
    haspass_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bossdrawstatus_ = 0u;
    commondrawstatus_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDevilCallItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name1;
        break;
      }

      // optional string name1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name1().data(), this->name1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID1;
        break;
      }

      // optional uint32 charID1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name2;
        break;
      }

      // optional string name2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name2().data(), this->name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_charID2;
        break;
      }

      // optional uint32 charID2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name3;
        break;
      }

      // optional string name3 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name3().data(), this->name3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_charID3;
        break;
      }

      // optional uint32 charID3 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid3_)));
          set_has_charid3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hasPass;
        break;
      }

      // optional bool hasPass = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haspass_)));
          set_has_haspass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bossdrawstatus;
        break;
      }

      // optional uint32 bossdrawstatus = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossdrawstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossdrawstatus_)));
          set_has_bossdrawstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_commondrawstatus;
        break;
      }

      // optional uint32 commondrawstatus = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_commondrawstatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &commondrawstatus_)));
          set_has_commondrawstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDevilCallItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional string name1 = 2;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name1(), output);
  }

  // optional uint32 charID1 = 3;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid1(), output);
  }

  // optional string name2 = 4;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name2(), output);
  }

  // optional uint32 charID2 = 5;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->charid2(), output);
  }

  // optional string name3 = 6;
  if (has_name3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name3().data(), this->name3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name3(), output);
  }

  // optional uint32 charID3 = 7;
  if (has_charid3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->charid3(), output);
  }

  // optional bool hasPass = 8;
  if (has_haspass()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->haspass(), output);
  }

  // optional uint32 bossdrawstatus = 9;
  if (has_bossdrawstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bossdrawstatus(), output);
  }

  // optional uint32 commondrawstatus = 10;
  if (has_commondrawstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->commondrawstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDevilCallItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional string name1 = 2;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name1(), target);
  }

  // optional uint32 charID1 = 3;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid1(), target);
  }

  // optional string name2 = 4;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name2(), target);
  }

  // optional uint32 charID2 = 5;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->charid2(), target);
  }

  // optional string name3 = 6;
  if (has_name3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name3().data(), this->name3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name3(), target);
  }

  // optional uint32 charID3 = 7;
  if (has_charid3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->charid3(), target);
  }

  // optional bool hasPass = 8;
  if (has_haspass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->haspass(), target);
  }

  // optional uint32 bossdrawstatus = 9;
  if (has_bossdrawstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bossdrawstatus(), target);
  }

  // optional uint32 commondrawstatus = 10;
  if (has_commondrawstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->commondrawstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDevilCallItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string name1 = 2;
    if (has_name1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name1());
    }

    // optional uint32 charID1 = 3;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid1());
    }

    // optional string name2 = 4;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }

    // optional uint32 charID2 = 5;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid2());
    }

    // optional string name3 = 6;
    if (has_name3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name3());
    }

    // optional uint32 charID3 = 7;
    if (has_charid3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid3());
    }

    // optional bool hasPass = 8;
    if (has_haspass()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 bossdrawstatus = 9;
    if (has_bossdrawstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossdrawstatus());
    }

    // optional uint32 commondrawstatus = 10;
    if (has_commondrawstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->commondrawstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDevilCallItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDevilCallItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDevilCallItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDevilCallItem::MergeFrom(const stDevilCallItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_name1()) {
      set_name1(from.name1());
    }
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_name2()) {
      set_name2(from.name2());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_name3()) {
      set_name3(from.name3());
    }
    if (from.has_charid3()) {
      set_charid3(from.charid3());
    }
    if (from.has_haspass()) {
      set_haspass(from.haspass());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bossdrawstatus()) {
      set_bossdrawstatus(from.bossdrawstatus());
    }
    if (from.has_commondrawstatus()) {
      set_commondrawstatus(from.commondrawstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDevilCallItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDevilCallItem::CopyFrom(const stDevilCallItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDevilCallItem::IsInitialized() const {

  return true;
}

void stDevilCallItem::Swap(stDevilCallItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(name1_, other->name1_);
    std::swap(charid1_, other->charid1_);
    std::swap(name2_, other->name2_);
    std::swap(charid2_, other->charid2_);
    std::swap(name3_, other->name3_);
    std::swap(charid3_, other->charid3_);
    std::swap(haspass_, other->haspass_);
    std::swap(bossdrawstatus_, other->bossdrawstatus_);
    std::swap(commondrawstatus_, other->commondrawstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDevilCallItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDevilCallItem_descriptor_;
  metadata.reflection = stDevilCallItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAllDevilCall_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAllDevilCall_ProtoModID_descriptor_;
}
bool stAllDevilCall_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAllDevilCall_ProtoModID stAllDevilCall::ModID;
const stAllDevilCall_ProtoModID stAllDevilCall::ProtoModID_MIN;
const stAllDevilCall_ProtoModID stAllDevilCall::ProtoModID_MAX;
const int stAllDevilCall::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAllDevilCall_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAllDevilCall_ProtoFunID_descriptor_;
}
bool stAllDevilCall_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 101:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAllDevilCall_ProtoFunID stAllDevilCall::FunID;
const stAllDevilCall_ProtoFunID stAllDevilCall::ProtoFunID_MIN;
const stAllDevilCall_ProtoFunID stAllDevilCall::ProtoFunID_MAX;
const int stAllDevilCall::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAllDevilCall::kCharIDFieldNumber;
const int stAllDevilCall::kItemFieldNumber;
#endif  // !_MSC_VER

stAllDevilCall::stAllDevilCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAllDevilCall::InitAsDefaultInstance() {
}

stAllDevilCall::stAllDevilCall(const stAllDevilCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAllDevilCall::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAllDevilCall::~stAllDevilCall() {
  SharedDtor();
}

void stAllDevilCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAllDevilCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAllDevilCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAllDevilCall_descriptor_;
}

const stAllDevilCall& stAllDevilCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stAllDevilCall* stAllDevilCall::default_instance_ = NULL;

stAllDevilCall* stAllDevilCall::New() const {
  return new stAllDevilCall;
}

void stAllDevilCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAllDevilCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .Global.stDevilCallItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAllDevilCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .Global.stDevilCallItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAllDevilCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .Global.stDevilCallItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAllDevilCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .Global.stDevilCallItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAllDevilCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAllDevilCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAllDevilCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAllDevilCall::MergeFrom(const stAllDevilCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAllDevilCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAllDevilCall::CopyFrom(const stAllDevilCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAllDevilCall::IsInitialized() const {

  return true;
}

void stAllDevilCall::Swap(stAllDevilCall* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAllDevilCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAllDevilCall_descriptor_;
  metadata.reflection = stAllDevilCall_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDevilCallReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallReward_ProtoModID_descriptor_;
}
bool stDevilCallReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCallReward_ProtoModID stDevilCallReward::ModID;
const stDevilCallReward_ProtoModID stDevilCallReward::ProtoModID_MIN;
const stDevilCallReward_ProtoModID stDevilCallReward::ProtoModID_MAX;
const int stDevilCallReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDevilCallReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallReward_ProtoFunID_descriptor_;
}
bool stDevilCallReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCallReward_ProtoFunID stDevilCallReward::FunID;
const stDevilCallReward_ProtoFunID stDevilCallReward::ProtoFunID_MIN;
const stDevilCallReward_ProtoFunID stDevilCallReward::ProtoFunID_MAX;
const int stDevilCallReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDevilCallReward::kCharIDFieldNumber;
const int stDevilCallReward::kBossIdFieldNumber;
const int stDevilCallReward::kRewardTypeFieldNumber;
const int stDevilCallReward::kGotPassFieldNumber;
const int stDevilCallReward::kStatusFieldNumber;
#endif  // !_MSC_VER

stDevilCallReward::stDevilCallReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDevilCallReward::InitAsDefaultInstance() {
}

stDevilCallReward::stDevilCallReward(const stDevilCallReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDevilCallReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  bossid_ = 0u;
  rewardtype_ = 0u;
  gotpass_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDevilCallReward::~stDevilCallReward() {
  SharedDtor();
}

void stDevilCallReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDevilCallReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDevilCallReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallReward_descriptor_;
}

const stDevilCallReward& stDevilCallReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDevilCallReward* stDevilCallReward::default_instance_ = NULL;

stDevilCallReward* stDevilCallReward::New() const {
  return new stDevilCallReward;
}

void stDevilCallReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    bossid_ = 0u;
    rewardtype_ = 0u;
    gotpass_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDevilCallReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional uint32 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardType;
        break;
      }

      // optional uint32 rewardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtype_)));
          set_has_rewardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gotPass;
        break;
      }

      // optional uint32 gotPass = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gotPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gotpass_)));
          set_has_gotpass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional uint32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDevilCallReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossid(), output);
  }

  // optional uint32 rewardType = 3;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rewardtype(), output);
  }

  // optional uint32 gotPass = 4;
  if (has_gotpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gotpass(), output);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDevilCallReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossid(), target);
  }

  // optional uint32 rewardType = 3;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rewardtype(), target);
  }

  // optional uint32 gotPass = 4;
  if (has_gotpass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gotpass(), target);
  }

  // optional uint32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDevilCallReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint32 rewardType = 3;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtype());
    }

    // optional uint32 gotPass = 4;
    if (has_gotpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gotpass());
    }

    // optional uint32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDevilCallReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDevilCallReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDevilCallReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDevilCallReward::MergeFrom(const stDevilCallReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
    if (from.has_gotpass()) {
      set_gotpass(from.gotpass());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDevilCallReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDevilCallReward::CopyFrom(const stDevilCallReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDevilCallReward::IsInitialized() const {

  return true;
}

void stDevilCallReward::Swap(stDevilCallReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(bossid_, other->bossid_);
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(gotpass_, other->gotpass_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDevilCallReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDevilCallReward_descriptor_;
  metadata.reflection = stDevilCallReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDevilCallRewardRet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallRewardRet_ProtoModID_descriptor_;
}
bool stDevilCallRewardRet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCallRewardRet_ProtoModID stDevilCallRewardRet::ModID;
const stDevilCallRewardRet_ProtoModID stDevilCallRewardRet::ProtoModID_MIN;
const stDevilCallRewardRet_ProtoModID stDevilCallRewardRet::ProtoModID_MAX;
const int stDevilCallRewardRet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDevilCallRewardRet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallRewardRet_ProtoFunID_descriptor_;
}
bool stDevilCallRewardRet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 103:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCallRewardRet_ProtoFunID stDevilCallRewardRet::FunID;
const stDevilCallRewardRet_ProtoFunID stDevilCallRewardRet::ProtoFunID_MIN;
const stDevilCallRewardRet_ProtoFunID stDevilCallRewardRet::ProtoFunID_MAX;
const int stDevilCallRewardRet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDevilCallRewardRet::kCharIDFieldNumber;
const int stDevilCallRewardRet::kBossIdFieldNumber;
const int stDevilCallRewardRet::kRewardTypeFieldNumber;
const int stDevilCallRewardRet::kStatusFieldNumber;
#endif  // !_MSC_VER

stDevilCallRewardRet::stDevilCallRewardRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDevilCallRewardRet::InitAsDefaultInstance() {
}

stDevilCallRewardRet::stDevilCallRewardRet(const stDevilCallRewardRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDevilCallRewardRet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  bossid_ = 0u;
  rewardtype_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDevilCallRewardRet::~stDevilCallRewardRet() {
  SharedDtor();
}

void stDevilCallRewardRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDevilCallRewardRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDevilCallRewardRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallRewardRet_descriptor_;
}

const stDevilCallRewardRet& stDevilCallRewardRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDevilCallRewardRet* stDevilCallRewardRet::default_instance_ = NULL;

stDevilCallRewardRet* stDevilCallRewardRet::New() const {
  return new stDevilCallRewardRet;
}

void stDevilCallRewardRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    bossid_ = 0u;
    rewardtype_ = 0u;
    status_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDevilCallRewardRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional uint32 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardType;
        break;
      }

      // optional uint32 rewardType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardtype_)));
          set_has_rewardtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDevilCallRewardRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossid(), output);
  }

  // optional uint32 rewardType = 3;
  if (has_rewardtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rewardtype(), output);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDevilCallRewardRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossid(), target);
  }

  // optional uint32 rewardType = 3;
  if (has_rewardtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rewardtype(), target);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDevilCallRewardRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint32 rewardType = 3;
    if (has_rewardtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardtype());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDevilCallRewardRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDevilCallRewardRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDevilCallRewardRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDevilCallRewardRet::MergeFrom(const stDevilCallRewardRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_rewardtype()) {
      set_rewardtype(from.rewardtype());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDevilCallRewardRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDevilCallRewardRet::CopyFrom(const stDevilCallRewardRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDevilCallRewardRet::IsInitialized() const {

  return true;
}

void stDevilCallRewardRet::Swap(stDevilCallRewardRet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(bossid_, other->bossid_);
    std::swap(rewardtype_, other->rewardtype_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDevilCallRewardRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDevilCallRewardRet_descriptor_;
  metadata.reflection = stDevilCallRewardRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDevilCall_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCall_ProtoModID_descriptor_;
}
bool stDevilCall_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCall_ProtoModID stDevilCall::ModID;
const stDevilCall_ProtoModID stDevilCall::ProtoModID_MIN;
const stDevilCall_ProtoModID stDevilCall::ProtoModID_MAX;
const int stDevilCall::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDevilCall_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCall_ProtoFunID_descriptor_;
}
bool stDevilCall_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 104:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCall_ProtoFunID stDevilCall::FunID;
const stDevilCall_ProtoFunID stDevilCall::ProtoFunID_MIN;
const stDevilCall_ProtoFunID stDevilCall::ProtoFunID_MAX;
const int stDevilCall::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDevilCall::kCharIDFieldNumber;
const int stDevilCall::kBossIdFieldNumber;
const int stDevilCall::kGotPassFieldNumber;
const int stDevilCall::kDrawNumFieldNumber;
#endif  // !_MSC_VER

stDevilCall::stDevilCall()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDevilCall::InitAsDefaultInstance() {
}

stDevilCall::stDevilCall(const stDevilCall& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDevilCall::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  bossid_ = 0u;
  gotpass_ = 0u;
  drawnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDevilCall::~stDevilCall() {
  SharedDtor();
}

void stDevilCall::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDevilCall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDevilCall::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCall_descriptor_;
}

const stDevilCall& stDevilCall::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDevilCall* stDevilCall::default_instance_ = NULL;

stDevilCall* stDevilCall::New() const {
  return new stDevilCall;
}

void stDevilCall::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    bossid_ = 0u;
    gotpass_ = 0u;
    drawnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDevilCall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional uint32 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gotPass;
        break;
      }

      // optional uint32 gotPass = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gotPass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gotpass_)));
          set_has_gotpass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_drawNum;
        break;
      }

      // optional uint32 drawNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drawnum_)));
          set_has_drawnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDevilCall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossid(), output);
  }

  // optional uint32 gotPass = 3;
  if (has_gotpass()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gotpass(), output);
  }

  // optional uint32 drawNum = 4;
  if (has_drawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->drawnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDevilCall::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossid(), target);
  }

  // optional uint32 gotPass = 3;
  if (has_gotpass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gotpass(), target);
  }

  // optional uint32 drawNum = 4;
  if (has_drawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->drawnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDevilCall::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint32 gotPass = 3;
    if (has_gotpass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gotpass());
    }

    // optional uint32 drawNum = 4;
    if (has_drawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drawnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDevilCall::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDevilCall* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDevilCall*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDevilCall::MergeFrom(const stDevilCall& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_gotpass()) {
      set_gotpass(from.gotpass());
    }
    if (from.has_drawnum()) {
      set_drawnum(from.drawnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDevilCall::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDevilCall::CopyFrom(const stDevilCall& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDevilCall::IsInitialized() const {

  return true;
}

void stDevilCall::Swap(stDevilCall* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(bossid_, other->bossid_);
    std::swap(gotpass_, other->gotpass_);
    std::swap(drawnum_, other->drawnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDevilCall::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDevilCall_descriptor_;
  metadata.reflection = stDevilCall_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDevilCallRet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallRet_ProtoModID_descriptor_;
}
bool stDevilCallRet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCallRet_ProtoModID stDevilCallRet::ModID;
const stDevilCallRet_ProtoModID stDevilCallRet::ProtoModID_MIN;
const stDevilCallRet_ProtoModID stDevilCallRet::ProtoModID_MAX;
const int stDevilCallRet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDevilCallRet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallRet_ProtoFunID_descriptor_;
}
bool stDevilCallRet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 105:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCallRet_ProtoFunID stDevilCallRet::FunID;
const stDevilCallRet_ProtoFunID stDevilCallRet::ProtoFunID_MIN;
const stDevilCallRet_ProtoFunID stDevilCallRet::ProtoFunID_MAX;
const int stDevilCallRet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDevilCallRet::kCharIDFieldNumber;
const int stDevilCallRet::kBossIdFieldNumber;
const int stDevilCallRet::kDrawNumFieldNumber;
#endif  // !_MSC_VER

stDevilCallRet::stDevilCallRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDevilCallRet::InitAsDefaultInstance() {
}

stDevilCallRet::stDevilCallRet(const stDevilCallRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDevilCallRet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  bossid_ = 0u;
  drawnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDevilCallRet::~stDevilCallRet() {
  SharedDtor();
}

void stDevilCallRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDevilCallRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDevilCallRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallRet_descriptor_;
}

const stDevilCallRet& stDevilCallRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDevilCallRet* stDevilCallRet::default_instance_ = NULL;

stDevilCallRet* stDevilCallRet::New() const {
  return new stDevilCallRet;
}

void stDevilCallRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    bossid_ = 0u;
    drawnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDevilCallRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional uint32 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_drawNum;
        break;
      }

      // optional uint32 drawNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drawNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drawnum_)));
          set_has_drawnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDevilCallRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossid(), output);
  }

  // optional uint32 drawNum = 3;
  if (has_drawnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->drawnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDevilCallRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossid(), target);
  }

  // optional uint32 drawNum = 3;
  if (has_drawnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->drawnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDevilCallRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

    // optional uint32 drawNum = 3;
    if (has_drawnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->drawnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDevilCallRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDevilCallRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDevilCallRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDevilCallRet::MergeFrom(const stDevilCallRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_drawnum()) {
      set_drawnum(from.drawnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDevilCallRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDevilCallRet::CopyFrom(const stDevilCallRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDevilCallRet::IsInitialized() const {

  return true;
}

void stDevilCallRet::Swap(stDevilCallRet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(bossid_, other->bossid_);
    std::swap(drawnum_, other->drawnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDevilCallRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDevilCallRet_descriptor_;
  metadata.reflection = stDevilCallRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDevilCallSummary_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallSummary_ProtoModID_descriptor_;
}
bool stDevilCallSummary_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCallSummary_ProtoModID stDevilCallSummary::ModID;
const stDevilCallSummary_ProtoModID stDevilCallSummary::ProtoModID_MIN;
const stDevilCallSummary_ProtoModID stDevilCallSummary::ProtoModID_MAX;
const int stDevilCallSummary::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDevilCallSummary_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallSummary_ProtoFunID_descriptor_;
}
bool stDevilCallSummary_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 106:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDevilCallSummary_ProtoFunID stDevilCallSummary::FunID;
const stDevilCallSummary_ProtoFunID stDevilCallSummary::ProtoFunID_MIN;
const stDevilCallSummary_ProtoFunID stDevilCallSummary::ProtoFunID_MAX;
const int stDevilCallSummary::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDevilCallSummary::kCharIDFieldNumber;
const int stDevilCallSummary::kItemFieldNumber;
#endif  // !_MSC_VER

stDevilCallSummary::stDevilCallSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDevilCallSummary::InitAsDefaultInstance() {
}

stDevilCallSummary::stDevilCallSummary(const stDevilCallSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDevilCallSummary::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDevilCallSummary::~stDevilCallSummary() {
  SharedDtor();
}

void stDevilCallSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDevilCallSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDevilCallSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDevilCallSummary_descriptor_;
}

const stDevilCallSummary& stDevilCallSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDevilCallSummary* stDevilCallSummary::default_instance_ = NULL;

stDevilCallSummary* stDevilCallSummary::New() const {
  return new stDevilCallSummary;
}

void stDevilCallSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDevilCallSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .Global.stDevilCallItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDevilCallSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .Global.stDevilCallItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDevilCallSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .Global.stDevilCallItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDevilCallSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .Global.stDevilCallItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDevilCallSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDevilCallSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDevilCallSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDevilCallSummary::MergeFrom(const stDevilCallSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDevilCallSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDevilCallSummary::CopyFrom(const stDevilCallSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDevilCallSummary::IsInitialized() const {

  return true;
}

void stDevilCallSummary::Swap(stDevilCallSummary* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDevilCallSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDevilCallSummary_descriptor_;
  metadata.reflection = stDevilCallSummary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stExpeditionItem::kExpeditionIdFieldNumber;
const int stExpeditionItem::kFinishTimeFieldNumber;
const int stExpeditionItem::kHeroIdsFieldNumber;
#endif  // !_MSC_VER

stExpeditionItem::stExpeditionItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExpeditionItem::InitAsDefaultInstance() {
}

stExpeditionItem::stExpeditionItem(const stExpeditionItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExpeditionItem::SharedCtor() {
  _cached_size_ = 0;
  expeditionid_ = 0u;
  finishtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExpeditionItem::~stExpeditionItem() {
  SharedDtor();
}

void stExpeditionItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExpeditionItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExpeditionItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionItem_descriptor_;
}

const stExpeditionItem& stExpeditionItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stExpeditionItem* stExpeditionItem::default_instance_ = NULL;

stExpeditionItem* stExpeditionItem::New() const {
  return new stExpeditionItem;
}

void stExpeditionItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    expeditionid_ = 0u;
    finishtime_ = 0u;
  }
  heroids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExpeditionItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 expeditionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_finishTime;
        break;
      }

      // optional uint32 finishTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroIds;
        break;
      }

      // repeated uint32 heroIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_heroids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExpeditionItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->expeditionid(), output);
  }

  // optional uint32 finishTime = 2;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finishtime(), output);
  }

  // repeated uint32 heroIds = 3;
  for (int i = 0; i < this->heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->heroids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExpeditionItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 expeditionId = 1;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->expeditionid(), target);
  }

  // optional uint32 finishTime = 2;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finishtime(), target);
  }

  // repeated uint32 heroIds = 3;
  for (int i = 0; i < this->heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->heroids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExpeditionItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 expeditionId = 1;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional uint32 finishTime = 2;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

  }
  // repeated uint32 heroIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroids(i));
    }
    total_size += 1 * this->heroids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExpeditionItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExpeditionItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExpeditionItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExpeditionItem::MergeFrom(const stExpeditionItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroids_.MergeFrom(from.heroids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExpeditionItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExpeditionItem::CopyFrom(const stExpeditionItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExpeditionItem::IsInitialized() const {

  return true;
}

void stExpeditionItem::Swap(stExpeditionItem* other) {
  if (other != this) {
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(finishtime_, other->finishtime_);
    heroids_.Swap(&other->heroids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExpeditionItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExpeditionItem_descriptor_;
  metadata.reflection = stExpeditionItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stExpeditionInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionInfo_ProtoModID_descriptor_;
}
bool stExpeditionInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpeditionInfo_ProtoModID stExpeditionInfo::ModID;
const stExpeditionInfo_ProtoModID stExpeditionInfo::ProtoModID_MIN;
const stExpeditionInfo_ProtoModID stExpeditionInfo::ProtoModID_MAX;
const int stExpeditionInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExpeditionInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionInfo_ProtoFunID_descriptor_;
}
bool stExpeditionInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 107:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpeditionInfo_ProtoFunID stExpeditionInfo::FunID;
const stExpeditionInfo_ProtoFunID stExpeditionInfo::ProtoFunID_MIN;
const stExpeditionInfo_ProtoFunID stExpeditionInfo::ProtoFunID_MAX;
const int stExpeditionInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stExpeditionInfo::kCharIDFieldNumber;
const int stExpeditionInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

stExpeditionInfo::stExpeditionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExpeditionInfo::InitAsDefaultInstance() {
}

stExpeditionInfo::stExpeditionInfo(const stExpeditionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExpeditionInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExpeditionInfo::~stExpeditionInfo() {
  SharedDtor();
}

void stExpeditionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExpeditionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExpeditionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionInfo_descriptor_;
}

const stExpeditionInfo& stExpeditionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stExpeditionInfo* stExpeditionInfo::default_instance_ = NULL;

stExpeditionInfo* stExpeditionInfo::New() const {
  return new stExpeditionInfo;
}

void stExpeditionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExpeditionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Global.stExpeditionItem items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExpeditionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .Global.stExpeditionItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExpeditionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .Global.stExpeditionItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExpeditionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .Global.stExpeditionItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExpeditionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExpeditionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExpeditionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExpeditionInfo::MergeFrom(const stExpeditionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExpeditionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExpeditionInfo::CopyFrom(const stExpeditionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExpeditionInfo::IsInitialized() const {

  return true;
}

void stExpeditionInfo::Swap(stExpeditionInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExpeditionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExpeditionInfo_descriptor_;
  metadata.reflection = stExpeditionInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stExpedition_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpedition_ProtoModID_descriptor_;
}
bool stExpedition_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpedition_ProtoModID stExpedition::ModID;
const stExpedition_ProtoModID stExpedition::ProtoModID_MIN;
const stExpedition_ProtoModID stExpedition::ProtoModID_MAX;
const int stExpedition::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExpedition_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpedition_ProtoFunID_descriptor_;
}
bool stExpedition_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 108:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpedition_ProtoFunID stExpedition::FunID;
const stExpedition_ProtoFunID stExpedition::ProtoFunID_MIN;
const stExpedition_ProtoFunID stExpedition::ProtoFunID_MAX;
const int stExpedition::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stExpedition::kCharIDFieldNumber;
const int stExpedition::kExpeIdsFieldNumber;
const int stExpedition::kHeroIdsFieldNumber;
const int stExpedition::kUsedHeroFieldNumber;
const int stExpedition::kExpeditionidFieldNumber;
#endif  // !_MSC_VER

stExpedition::stExpedition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExpedition::InitAsDefaultInstance() {
}

stExpedition::stExpedition(const stExpedition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExpedition::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  expeditionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExpedition::~stExpedition() {
  SharedDtor();
}

void stExpedition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExpedition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExpedition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpedition_descriptor_;
}

const stExpedition& stExpedition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stExpedition* stExpedition::default_instance_ = NULL;

stExpedition* stExpedition::New() const {
  return new stExpedition;
}

void stExpedition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    expeditionid_ = 0u;
  }
  expeids_.Clear();
  heroids_.Clear();
  usedhero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExpedition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expeIds;
        break;
      }

      // repeated uint32 expeIds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expeIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_expeids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_expeids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expeIds;
        if (input->ExpectTag(24)) goto parse_heroIds;
        break;
      }

      // repeated uint32 heroIds = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_heroids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroIds;
        if (input->ExpectTag(32)) goto parse_usedHero;
        break;
      }

      // repeated uint32 usedHero = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_usedHero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32, input, this->mutable_usedhero())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_usedhero())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_usedHero;
        if (input->ExpectTag(40)) goto parse_expeditionid;
        break;
      }

      // optional uint32 expeditionid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expeditionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExpedition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated uint32 expeIds = 2;
  for (int i = 0; i < this->expeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->expeids(i), output);
  }

  // repeated uint32 heroIds = 3;
  for (int i = 0; i < this->heroids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->heroids(i), output);
  }

  // repeated uint32 usedHero = 4;
  for (int i = 0; i < this->usedhero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->usedhero(i), output);
  }

  // optional uint32 expeditionid = 5;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->expeditionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExpedition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated uint32 expeIds = 2;
  for (int i = 0; i < this->expeids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->expeids(i), target);
  }

  // repeated uint32 heroIds = 3;
  for (int i = 0; i < this->heroids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->heroids(i), target);
  }

  // repeated uint32 usedHero = 4;
  for (int i = 0; i < this->usedhero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(4, this->usedhero(i), target);
  }

  // optional uint32 expeditionid = 5;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->expeditionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExpedition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 expeditionid = 5;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

  }
  // repeated uint32 expeIds = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->expeids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->expeids(i));
    }
    total_size += 1 * this->expeids_size() + data_size;
  }

  // repeated uint32 heroIds = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroids(i));
    }
    total_size += 1 * this->heroids_size() + data_size;
  }

  // repeated uint32 usedHero = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->usedhero_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->usedhero(i));
    }
    total_size += 1 * this->usedhero_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExpedition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExpedition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExpedition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExpedition::MergeFrom(const stExpedition& from) {
  GOOGLE_CHECK_NE(&from, this);
  expeids_.MergeFrom(from.expeids_);
  heroids_.MergeFrom(from.heroids_);
  usedhero_.MergeFrom(from.usedhero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExpedition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExpedition::CopyFrom(const stExpedition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExpedition::IsInitialized() const {

  return true;
}

void stExpedition::Swap(stExpedition* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    expeids_.Swap(&other->expeids_);
    heroids_.Swap(&other->heroids_);
    usedhero_.Swap(&other->usedhero_);
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExpedition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExpedition_descriptor_;
  metadata.reflection = stExpedition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stExpeditionHero::kIdFieldNumber;
const int stExpeditionHero::kLvlFieldNumber;
const int stExpeditionHero::kPowerFieldNumber;
#endif  // !_MSC_VER

stExpeditionHero::stExpeditionHero()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExpeditionHero::InitAsDefaultInstance() {
}

stExpeditionHero::stExpeditionHero(const stExpeditionHero& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExpeditionHero::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  lvl_ = 0u;
  power_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExpeditionHero::~stExpeditionHero() {
  SharedDtor();
}

void stExpeditionHero::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExpeditionHero::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExpeditionHero::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionHero_descriptor_;
}

const stExpeditionHero& stExpeditionHero::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stExpeditionHero* stExpeditionHero::default_instance_ = NULL;

stExpeditionHero* stExpeditionHero::New() const {
  return new stExpeditionHero;
}

void stExpeditionHero::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    lvl_ = 0u;
    power_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExpeditionHero::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvl;
        break;
      }

      // optional uint32 lvl = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // optional uint32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExpeditionHero::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 lvl = 2;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->lvl(), output);
  }

  // optional uint32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->power(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExpeditionHero::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 lvl = 2;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->lvl(), target);
  }

  // optional uint32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->power(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExpeditionHero::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 lvl = 2;
    if (has_lvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lvl());
    }

    // optional uint32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExpeditionHero::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExpeditionHero* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExpeditionHero*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExpeditionHero::MergeFrom(const stExpeditionHero& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExpeditionHero::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExpeditionHero::CopyFrom(const stExpeditionHero& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExpeditionHero::IsInitialized() const {

  return true;
}

void stExpeditionHero::Swap(stExpeditionHero* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lvl_, other->lvl_);
    std::swap(power_, other->power_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExpeditionHero::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExpeditionHero_descriptor_;
  metadata.reflection = stExpeditionHero_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stExpeditionRet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionRet_ProtoModID_descriptor_;
}
bool stExpeditionRet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpeditionRet_ProtoModID stExpeditionRet::ModID;
const stExpeditionRet_ProtoModID stExpeditionRet::ProtoModID_MIN;
const stExpeditionRet_ProtoModID stExpeditionRet::ProtoModID_MAX;
const int stExpeditionRet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExpeditionRet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionRet_ProtoFunID_descriptor_;
}
bool stExpeditionRet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 109:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpeditionRet_ProtoFunID stExpeditionRet::FunID;
const stExpeditionRet_ProtoFunID stExpeditionRet::ProtoFunID_MIN;
const stExpeditionRet_ProtoFunID stExpeditionRet::ProtoFunID_MAX;
const int stExpeditionRet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stExpeditionRet::kCharIDFieldNumber;
const int stExpeditionRet::kExpeditionidFieldNumber;
const int stExpeditionRet::kFinishTimeFieldNumber;
const int stExpeditionRet::kUsedHeroFieldNumber;
#endif  // !_MSC_VER

stExpeditionRet::stExpeditionRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExpeditionRet::InitAsDefaultInstance() {
}

stExpeditionRet::stExpeditionRet(const stExpeditionRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExpeditionRet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  expeditionid_ = 0u;
  finishtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExpeditionRet::~stExpeditionRet() {
  SharedDtor();
}

void stExpeditionRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExpeditionRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExpeditionRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionRet_descriptor_;
}

const stExpeditionRet& stExpeditionRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stExpeditionRet* stExpeditionRet::default_instance_ = NULL;

stExpeditionRet* stExpeditionRet::New() const {
  return new stExpeditionRet;
}

void stExpeditionRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    expeditionid_ = 0u;
    finishtime_ = 0u;
  }
  usedhero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExpeditionRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expeditionid;
        break;
      }

      // optional uint32 expeditionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expeditionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finishTime;
        break;
      }

      // optional uint32 finishTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_usedHero;
        break;
      }

      // repeated .Global.stExpeditionHero usedHero = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usedHero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usedhero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_usedHero;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExpeditionRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expeditionid(), output);
  }

  // optional uint32 finishTime = 3;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finishtime(), output);
  }

  // repeated .Global.stExpeditionHero usedHero = 4;
  for (int i = 0; i < this->usedhero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->usedhero(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExpeditionRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expeditionid(), target);
  }

  // optional uint32 finishTime = 3;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finishtime(), target);
  }

  // repeated .Global.stExpeditionHero usedHero = 4;
  for (int i = 0; i < this->usedhero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->usedhero(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExpeditionRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 expeditionid = 2;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional uint32 finishTime = 3;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

  }
  // repeated .Global.stExpeditionHero usedHero = 4;
  total_size += 1 * this->usedhero_size();
  for (int i = 0; i < this->usedhero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usedhero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExpeditionRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExpeditionRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExpeditionRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExpeditionRet::MergeFrom(const stExpeditionRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  usedhero_.MergeFrom(from.usedhero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExpeditionRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExpeditionRet::CopyFrom(const stExpeditionRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExpeditionRet::IsInitialized() const {

  return true;
}

void stExpeditionRet::Swap(stExpeditionRet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(finishtime_, other->finishtime_);
    usedhero_.Swap(&other->usedhero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExpeditionRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExpeditionRet_descriptor_;
  metadata.reflection = stExpeditionRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stExpeditionReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionReward_ProtoModID_descriptor_;
}
bool stExpeditionReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpeditionReward_ProtoModID stExpeditionReward::ModID;
const stExpeditionReward_ProtoModID stExpeditionReward::ProtoModID_MIN;
const stExpeditionReward_ProtoModID stExpeditionReward::ProtoModID_MAX;
const int stExpeditionReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExpeditionReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionReward_ProtoFunID_descriptor_;
}
bool stExpeditionReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 110:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpeditionReward_ProtoFunID stExpeditionReward::FunID;
const stExpeditionReward_ProtoFunID stExpeditionReward::ProtoFunID_MIN;
const stExpeditionReward_ProtoFunID stExpeditionReward::ProtoFunID_MAX;
const int stExpeditionReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stExpeditionReward::kCharIDFieldNumber;
const int stExpeditionReward::kExpeditionidFieldNumber;
const int stExpeditionReward::kFinishTimeFieldNumber;
const int stExpeditionReward::kUsedHeroFieldNumber;
#endif  // !_MSC_VER

stExpeditionReward::stExpeditionReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExpeditionReward::InitAsDefaultInstance() {
}

stExpeditionReward::stExpeditionReward(const stExpeditionReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExpeditionReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  expeditionid_ = 0u;
  finishtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExpeditionReward::~stExpeditionReward() {
  SharedDtor();
}

void stExpeditionReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExpeditionReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExpeditionReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionReward_descriptor_;
}

const stExpeditionReward& stExpeditionReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stExpeditionReward* stExpeditionReward::default_instance_ = NULL;

stExpeditionReward* stExpeditionReward::New() const {
  return new stExpeditionReward;
}

void stExpeditionReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    expeditionid_ = 0u;
    finishtime_ = 0u;
  }
  usedhero_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExpeditionReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expeditionid;
        break;
      }

      // optional uint32 expeditionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expeditionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finishTime;
        break;
      }

      // optional uint32 finishTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_usedHero;
        break;
      }

      // repeated .Global.stExpeditionHero usedHero = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usedHero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_usedhero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_usedHero;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExpeditionReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expeditionid(), output);
  }

  // optional uint32 finishTime = 3;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finishtime(), output);
  }

  // repeated .Global.stExpeditionHero usedHero = 4;
  for (int i = 0; i < this->usedhero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->usedhero(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExpeditionReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expeditionid(), target);
  }

  // optional uint32 finishTime = 3;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finishtime(), target);
  }

  // repeated .Global.stExpeditionHero usedHero = 4;
  for (int i = 0; i < this->usedhero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->usedhero(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExpeditionReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 expeditionid = 2;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional uint32 finishTime = 3;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

  }
  // repeated .Global.stExpeditionHero usedHero = 4;
  total_size += 1 * this->usedhero_size();
  for (int i = 0; i < this->usedhero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->usedhero(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExpeditionReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExpeditionReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExpeditionReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExpeditionReward::MergeFrom(const stExpeditionReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  usedhero_.MergeFrom(from.usedhero_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExpeditionReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExpeditionReward::CopyFrom(const stExpeditionReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExpeditionReward::IsInitialized() const {

  return true;
}

void stExpeditionReward::Swap(stExpeditionReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(finishtime_, other->finishtime_);
    usedhero_.Swap(&other->usedhero_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExpeditionReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExpeditionReward_descriptor_;
  metadata.reflection = stExpeditionReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stExpeditionRewardRet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionRewardRet_ProtoModID_descriptor_;
}
bool stExpeditionRewardRet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpeditionRewardRet_ProtoModID stExpeditionRewardRet::ModID;
const stExpeditionRewardRet_ProtoModID stExpeditionRewardRet::ProtoModID_MIN;
const stExpeditionRewardRet_ProtoModID stExpeditionRewardRet::ProtoModID_MAX;
const int stExpeditionRewardRet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExpeditionRewardRet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionRewardRet_ProtoFunID_descriptor_;
}
bool stExpeditionRewardRet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 111:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpeditionRewardRet_ProtoFunID stExpeditionRewardRet::FunID;
const stExpeditionRewardRet_ProtoFunID stExpeditionRewardRet::ProtoFunID_MIN;
const stExpeditionRewardRet_ProtoFunID stExpeditionRewardRet::ProtoFunID_MAX;
const int stExpeditionRewardRet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stExpeditionRewardRet::kCharIDFieldNumber;
const int stExpeditionRewardRet::kExpeditionidFieldNumber;
#endif  // !_MSC_VER

stExpeditionRewardRet::stExpeditionRewardRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExpeditionRewardRet::InitAsDefaultInstance() {
}

stExpeditionRewardRet::stExpeditionRewardRet(const stExpeditionRewardRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExpeditionRewardRet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  expeditionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExpeditionRewardRet::~stExpeditionRewardRet() {
  SharedDtor();
}

void stExpeditionRewardRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExpeditionRewardRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExpeditionRewardRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionRewardRet_descriptor_;
}

const stExpeditionRewardRet& stExpeditionRewardRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stExpeditionRewardRet* stExpeditionRewardRet::default_instance_ = NULL;

stExpeditionRewardRet* stExpeditionRewardRet::New() const {
  return new stExpeditionRewardRet;
}

void stExpeditionRewardRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    expeditionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExpeditionRewardRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expeditionid;
        break;
      }

      // optional uint32 expeditionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expeditionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExpeditionRewardRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expeditionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExpeditionRewardRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expeditionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExpeditionRewardRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 expeditionid = 2;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExpeditionRewardRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExpeditionRewardRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExpeditionRewardRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExpeditionRewardRet::MergeFrom(const stExpeditionRewardRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExpeditionRewardRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExpeditionRewardRet::CopyFrom(const stExpeditionRewardRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExpeditionRewardRet::IsInitialized() const {

  return true;
}

void stExpeditionRewardRet::Swap(stExpeditionRewardRet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExpeditionRewardRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExpeditionRewardRet_descriptor_;
  metadata.reflection = stExpeditionRewardRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFastExpedition_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFastExpedition_ProtoModID_descriptor_;
}
bool stFastExpedition_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFastExpedition_ProtoModID stFastExpedition::ModID;
const stFastExpedition_ProtoModID stFastExpedition::ProtoModID_MIN;
const stFastExpedition_ProtoModID stFastExpedition::ProtoModID_MAX;
const int stFastExpedition::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFastExpedition_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFastExpedition_ProtoFunID_descriptor_;
}
bool stFastExpedition_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 112:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFastExpedition_ProtoFunID stFastExpedition::FunID;
const stFastExpedition_ProtoFunID stFastExpedition::ProtoFunID_MIN;
const stFastExpedition_ProtoFunID stFastExpedition::ProtoFunID_MAX;
const int stFastExpedition::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFastExpedition::kCharIDFieldNumber;
const int stFastExpedition::kExpeditionidFieldNumber;
const int stFastExpedition::kFinishTimeFieldNumber;
#endif  // !_MSC_VER

stFastExpedition::stFastExpedition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFastExpedition::InitAsDefaultInstance() {
}

stFastExpedition::stFastExpedition(const stFastExpedition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFastExpedition::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  expeditionid_ = 0u;
  finishtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFastExpedition::~stFastExpedition() {
  SharedDtor();
}

void stFastExpedition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stFastExpedition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFastExpedition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFastExpedition_descriptor_;
}

const stFastExpedition& stFastExpedition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stFastExpedition* stFastExpedition::default_instance_ = NULL;

stFastExpedition* stFastExpedition::New() const {
  return new stFastExpedition;
}

void stFastExpedition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    expeditionid_ = 0u;
    finishtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFastExpedition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expeditionid;
        break;
      }

      // optional uint32 expeditionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expeditionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finishTime;
        break;
      }

      // optional uint32 finishTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFastExpedition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expeditionid(), output);
  }

  // optional uint32 finishTime = 3;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finishtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFastExpedition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expeditionid(), target);
  }

  // optional uint32 finishTime = 3;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finishtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFastExpedition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 expeditionid = 2;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional uint32 finishTime = 3;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFastExpedition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFastExpedition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFastExpedition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFastExpedition::MergeFrom(const stFastExpedition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFastExpedition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFastExpedition::CopyFrom(const stFastExpedition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFastExpedition::IsInitialized() const {

  return true;
}

void stFastExpedition::Swap(stFastExpedition* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFastExpedition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFastExpedition_descriptor_;
  metadata.reflection = stFastExpedition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFastExpeditionRet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFastExpeditionRet_ProtoModID_descriptor_;
}
bool stFastExpeditionRet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFastExpeditionRet_ProtoModID stFastExpeditionRet::ModID;
const stFastExpeditionRet_ProtoModID stFastExpeditionRet::ProtoModID_MIN;
const stFastExpeditionRet_ProtoModID stFastExpeditionRet::ProtoModID_MAX;
const int stFastExpeditionRet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFastExpeditionRet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFastExpeditionRet_ProtoFunID_descriptor_;
}
bool stFastExpeditionRet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 113:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFastExpeditionRet_ProtoFunID stFastExpeditionRet::FunID;
const stFastExpeditionRet_ProtoFunID stFastExpeditionRet::ProtoFunID_MIN;
const stFastExpeditionRet_ProtoFunID stFastExpeditionRet::ProtoFunID_MAX;
const int stFastExpeditionRet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFastExpeditionRet::kCharIDFieldNumber;
const int stFastExpeditionRet::kExpeditionidFieldNumber;
const int stFastExpeditionRet::kFinishTimeFieldNumber;
#endif  // !_MSC_VER

stFastExpeditionRet::stFastExpeditionRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFastExpeditionRet::InitAsDefaultInstance() {
}

stFastExpeditionRet::stFastExpeditionRet(const stFastExpeditionRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFastExpeditionRet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  expeditionid_ = 0u;
  finishtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFastExpeditionRet::~stFastExpeditionRet() {
  SharedDtor();
}

void stFastExpeditionRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stFastExpeditionRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFastExpeditionRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFastExpeditionRet_descriptor_;
}

const stFastExpeditionRet& stFastExpeditionRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stFastExpeditionRet* stFastExpeditionRet::default_instance_ = NULL;

stFastExpeditionRet* stFastExpeditionRet::New() const {
  return new stFastExpeditionRet;
}

void stFastExpeditionRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    expeditionid_ = 0u;
    finishtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFastExpeditionRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expeditionid;
        break;
      }

      // optional uint32 expeditionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expeditionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finishTime;
        break;
      }

      // optional uint32 finishTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFastExpeditionRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expeditionid(), output);
  }

  // optional uint32 finishTime = 3;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finishtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFastExpeditionRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expeditionid(), target);
  }

  // optional uint32 finishTime = 3;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finishtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFastExpeditionRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 expeditionid = 2;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional uint32 finishTime = 3;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFastExpeditionRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFastExpeditionRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFastExpeditionRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFastExpeditionRet::MergeFrom(const stFastExpeditionRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFastExpeditionRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFastExpeditionRet::CopyFrom(const stFastExpeditionRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFastExpeditionRet::IsInitialized() const {

  return true;
}

void stFastExpeditionRet::Swap(stFastExpeditionRet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFastExpeditionRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFastExpeditionRet_descriptor_;
  metadata.reflection = stFastExpeditionRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelExpedition_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelExpedition_ProtoModID_descriptor_;
}
bool stCancelExpedition_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelExpedition_ProtoModID stCancelExpedition::ModID;
const stCancelExpedition_ProtoModID stCancelExpedition::ProtoModID_MIN;
const stCancelExpedition_ProtoModID stCancelExpedition::ProtoModID_MAX;
const int stCancelExpedition::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelExpedition_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelExpedition_ProtoFunID_descriptor_;
}
bool stCancelExpedition_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 114:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelExpedition_ProtoFunID stCancelExpedition::FunID;
const stCancelExpedition_ProtoFunID stCancelExpedition::ProtoFunID_MIN;
const stCancelExpedition_ProtoFunID stCancelExpedition::ProtoFunID_MAX;
const int stCancelExpedition::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelExpedition::kCharIDFieldNumber;
const int stCancelExpedition::kExpeditionidFieldNumber;
const int stCancelExpedition::kFinishTimeFieldNumber;
#endif  // !_MSC_VER

stCancelExpedition::stCancelExpedition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelExpedition::InitAsDefaultInstance() {
}

stCancelExpedition::stCancelExpedition(const stCancelExpedition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelExpedition::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  expeditionid_ = 0u;
  finishtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelExpedition::~stCancelExpedition() {
  SharedDtor();
}

void stCancelExpedition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelExpedition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelExpedition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelExpedition_descriptor_;
}

const stCancelExpedition& stCancelExpedition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCancelExpedition* stCancelExpedition::default_instance_ = NULL;

stCancelExpedition* stCancelExpedition::New() const {
  return new stCancelExpedition;
}

void stCancelExpedition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    expeditionid_ = 0u;
    finishtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelExpedition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expeditionid;
        break;
      }

      // optional uint32 expeditionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expeditionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finishTime;
        break;
      }

      // optional uint32 finishTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelExpedition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expeditionid(), output);
  }

  // optional uint32 finishTime = 3;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->finishtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelExpedition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expeditionid(), target);
  }

  // optional uint32 finishTime = 3;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->finishtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelExpedition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 expeditionid = 2;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

    // optional uint32 finishTime = 3;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelExpedition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelExpedition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelExpedition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelExpedition::MergeFrom(const stCancelExpedition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelExpedition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelExpedition::CopyFrom(const stCancelExpedition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelExpedition::IsInitialized() const {

  return true;
}

void stCancelExpedition::Swap(stCancelExpedition* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelExpedition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelExpedition_descriptor_;
  metadata.reflection = stCancelExpedition_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelExpeditionRet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelExpeditionRet_ProtoModID_descriptor_;
}
bool stCancelExpeditionRet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelExpeditionRet_ProtoModID stCancelExpeditionRet::ModID;
const stCancelExpeditionRet_ProtoModID stCancelExpeditionRet::ProtoModID_MIN;
const stCancelExpeditionRet_ProtoModID stCancelExpeditionRet::ProtoModID_MAX;
const int stCancelExpeditionRet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelExpeditionRet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelExpeditionRet_ProtoFunID_descriptor_;
}
bool stCancelExpeditionRet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 115:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelExpeditionRet_ProtoFunID stCancelExpeditionRet::FunID;
const stCancelExpeditionRet_ProtoFunID stCancelExpeditionRet::ProtoFunID_MIN;
const stCancelExpeditionRet_ProtoFunID stCancelExpeditionRet::ProtoFunID_MAX;
const int stCancelExpeditionRet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelExpeditionRet::kCharIDFieldNumber;
const int stCancelExpeditionRet::kExpeditionidFieldNumber;
#endif  // !_MSC_VER

stCancelExpeditionRet::stCancelExpeditionRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelExpeditionRet::InitAsDefaultInstance() {
}

stCancelExpeditionRet::stCancelExpeditionRet(const stCancelExpeditionRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelExpeditionRet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  expeditionid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelExpeditionRet::~stCancelExpeditionRet() {
  SharedDtor();
}

void stCancelExpeditionRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelExpeditionRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelExpeditionRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelExpeditionRet_descriptor_;
}

const stCancelExpeditionRet& stCancelExpeditionRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCancelExpeditionRet* stCancelExpeditionRet::default_instance_ = NULL;

stCancelExpeditionRet* stCancelExpeditionRet::New() const {
  return new stCancelExpeditionRet;
}

void stCancelExpeditionRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    expeditionid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelExpeditionRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expeditionid;
        break;
      }

      // optional uint32 expeditionid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expeditionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expeditionid_)));
          set_has_expeditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelExpeditionRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expeditionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelExpeditionRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 expeditionid = 2;
  if (has_expeditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expeditionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelExpeditionRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 expeditionid = 2;
    if (has_expeditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expeditionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelExpeditionRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelExpeditionRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelExpeditionRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelExpeditionRet::MergeFrom(const stCancelExpeditionRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_expeditionid()) {
      set_expeditionid(from.expeditionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelExpeditionRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelExpeditionRet::CopyFrom(const stCancelExpeditionRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelExpeditionRet::IsInitialized() const {

  return true;
}

void stCancelExpeditionRet::Swap(stCancelExpeditionRet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(expeditionid_, other->expeditionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelExpeditionRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelExpeditionRet_descriptor_;
  metadata.reflection = stCancelExpeditionRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stExpeditionSummary_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionSummary_ProtoModID_descriptor_;
}
bool stExpeditionSummary_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpeditionSummary_ProtoModID stExpeditionSummary::ModID;
const stExpeditionSummary_ProtoModID stExpeditionSummary::ProtoModID_MIN;
const stExpeditionSummary_ProtoModID stExpeditionSummary::ProtoModID_MAX;
const int stExpeditionSummary::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stExpeditionSummary_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionSummary_ProtoFunID_descriptor_;
}
bool stExpeditionSummary_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 116:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stExpeditionSummary_ProtoFunID stExpeditionSummary::FunID;
const stExpeditionSummary_ProtoFunID stExpeditionSummary::ProtoFunID_MIN;
const stExpeditionSummary_ProtoFunID stExpeditionSummary::ProtoFunID_MAX;
const int stExpeditionSummary::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stExpeditionSummary::kCharIDFieldNumber;
const int stExpeditionSummary::kItemsFieldNumber;
#endif  // !_MSC_VER

stExpeditionSummary::stExpeditionSummary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stExpeditionSummary::InitAsDefaultInstance() {
}

stExpeditionSummary::stExpeditionSummary(const stExpeditionSummary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stExpeditionSummary::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stExpeditionSummary::~stExpeditionSummary() {
  SharedDtor();
}

void stExpeditionSummary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stExpeditionSummary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stExpeditionSummary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stExpeditionSummary_descriptor_;
}

const stExpeditionSummary& stExpeditionSummary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stExpeditionSummary* stExpeditionSummary::default_instance_ = NULL;

stExpeditionSummary* stExpeditionSummary::New() const {
  return new stExpeditionSummary;
}

void stExpeditionSummary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stExpeditionSummary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }

      // repeated .Global.stExpeditionItem items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stExpeditionSummary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .Global.stExpeditionItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stExpeditionSummary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .Global.stExpeditionItem items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stExpeditionSummary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  // repeated .Global.stExpeditionItem items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stExpeditionSummary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stExpeditionSummary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stExpeditionSummary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stExpeditionSummary::MergeFrom(const stExpeditionSummary& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stExpeditionSummary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stExpeditionSummary::CopyFrom(const stExpeditionSummary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stExpeditionSummary::IsInitialized() const {

  return true;
}

void stExpeditionSummary::Swap(stExpeditionSummary* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stExpeditionSummary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stExpeditionSummary_descriptor_;
  metadata.reflection = stExpeditionSummary_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGiveLilianDayTaskCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLilianDayTaskCb_ProtoModID_descriptor_;
}
bool stGiveLilianDayTaskCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLilianDayTaskCb_ProtoModID stGiveLilianDayTaskCb::ModID;
const stGiveLilianDayTaskCb_ProtoModID stGiveLilianDayTaskCb::ProtoModID_MIN;
const stGiveLilianDayTaskCb_ProtoModID stGiveLilianDayTaskCb::ProtoModID_MAX;
const int stGiveLilianDayTaskCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveLilianDayTaskCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLilianDayTaskCb_ProtoFunID_descriptor_;
}
bool stGiveLilianDayTaskCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 117:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLilianDayTaskCb_ProtoFunID stGiveLilianDayTaskCb::FunID;
const stGiveLilianDayTaskCb_ProtoFunID stGiveLilianDayTaskCb::ProtoFunID_MIN;
const stGiveLilianDayTaskCb_ProtoFunID stGiveLilianDayTaskCb::ProtoFunID_MAX;
const int stGiveLilianDayTaskCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGiveLilianDayTaskCb::kCharIDFieldNumber;
#endif  // !_MSC_VER

stGiveLilianDayTaskCb::stGiveLilianDayTaskCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiveLilianDayTaskCb::InitAsDefaultInstance() {
}

stGiveLilianDayTaskCb::stGiveLilianDayTaskCb(const stGiveLilianDayTaskCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiveLilianDayTaskCb::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiveLilianDayTaskCb::~stGiveLilianDayTaskCb() {
  SharedDtor();
}

void stGiveLilianDayTaskCb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiveLilianDayTaskCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiveLilianDayTaskCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLilianDayTaskCb_descriptor_;
}

const stGiveLilianDayTaskCb& stGiveLilianDayTaskCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGiveLilianDayTaskCb* stGiveLilianDayTaskCb::default_instance_ = NULL;

stGiveLilianDayTaskCb* stGiveLilianDayTaskCb::New() const {
  return new stGiveLilianDayTaskCb;
}

void stGiveLilianDayTaskCb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiveLilianDayTaskCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiveLilianDayTaskCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiveLilianDayTaskCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiveLilianDayTaskCb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiveLilianDayTaskCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiveLilianDayTaskCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiveLilianDayTaskCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiveLilianDayTaskCb::MergeFrom(const stGiveLilianDayTaskCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiveLilianDayTaskCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiveLilianDayTaskCb::CopyFrom(const stGiveLilianDayTaskCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiveLilianDayTaskCb::IsInitialized() const {

  return true;
}

void stGiveLilianDayTaskCb::Swap(stGiveLilianDayTaskCb* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiveLilianDayTaskCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiveLilianDayTaskCb_descriptor_;
  metadata.reflection = stGiveLilianDayTaskCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUpdateDamageRank_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateDamageRank_ProtoModID_descriptor_;
}
bool stUpdateDamageRank_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpdateDamageRank_ProtoModID stUpdateDamageRank::ModID;
const stUpdateDamageRank_ProtoModID stUpdateDamageRank::ProtoModID_MIN;
const stUpdateDamageRank_ProtoModID stUpdateDamageRank::ProtoModID_MAX;
const int stUpdateDamageRank::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpdateDamageRank_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateDamageRank_ProtoFunID_descriptor_;
}
bool stUpdateDamageRank_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 118:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpdateDamageRank_ProtoFunID stUpdateDamageRank::FunID;
const stUpdateDamageRank_ProtoFunID stUpdateDamageRank::ProtoFunID_MIN;
const stUpdateDamageRank_ProtoFunID stUpdateDamageRank::ProtoFunID_MAX;
const int stUpdateDamageRank::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUpdateDamageRank::kCharIDFieldNumber;
const int stUpdateDamageRank::kDamageFieldNumber;
#endif  // !_MSC_VER

stUpdateDamageRank::stUpdateDamageRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUpdateDamageRank::InitAsDefaultInstance() {
}

stUpdateDamageRank::stUpdateDamageRank(const stUpdateDamageRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUpdateDamageRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  damage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUpdateDamageRank::~stUpdateDamageRank() {
  SharedDtor();
}

void stUpdateDamageRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUpdateDamageRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUpdateDamageRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateDamageRank_descriptor_;
}

const stUpdateDamageRank& stUpdateDamageRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUpdateDamageRank* stUpdateDamageRank::default_instance_ = NULL;

stUpdateDamageRank* stUpdateDamageRank::New() const {
  return new stUpdateDamageRank;
}

void stUpdateDamageRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    damage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUpdateDamageRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUpdateDamageRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUpdateDamageRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUpdateDamageRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUpdateDamageRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUpdateDamageRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUpdateDamageRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUpdateDamageRank::MergeFrom(const stUpdateDamageRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUpdateDamageRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUpdateDamageRank::CopyFrom(const stUpdateDamageRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUpdateDamageRank::IsInitialized() const {

  return true;
}

void stUpdateDamageRank::Swap(stUpdateDamageRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUpdateDamageRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUpdateDamageRank_descriptor_;
  metadata.reflection = stUpdateDamageRank_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNoticeSendRankInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNoticeSendRankInfo_ProtoModID_descriptor_;
}
bool stNoticeSendRankInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNoticeSendRankInfo_ProtoModID stNoticeSendRankInfo::ModID;
const stNoticeSendRankInfo_ProtoModID stNoticeSendRankInfo::ProtoModID_MIN;
const stNoticeSendRankInfo_ProtoModID stNoticeSendRankInfo::ProtoModID_MAX;
const int stNoticeSendRankInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNoticeSendRankInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNoticeSendRankInfo_ProtoFunID_descriptor_;
}
bool stNoticeSendRankInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 119:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNoticeSendRankInfo_ProtoFunID stNoticeSendRankInfo::FunID;
const stNoticeSendRankInfo_ProtoFunID stNoticeSendRankInfo::ProtoFunID_MIN;
const stNoticeSendRankInfo_ProtoFunID stNoticeSendRankInfo::ProtoFunID_MAX;
const int stNoticeSendRankInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNoticeSendRankInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNoticeSendRankInfo::stNoticeSendRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNoticeSendRankInfo::InitAsDefaultInstance() {
}

stNoticeSendRankInfo::stNoticeSendRankInfo(const stNoticeSendRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNoticeSendRankInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNoticeSendRankInfo::~stNoticeSendRankInfo() {
  SharedDtor();
}

void stNoticeSendRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNoticeSendRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNoticeSendRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNoticeSendRankInfo_descriptor_;
}

const stNoticeSendRankInfo& stNoticeSendRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNoticeSendRankInfo* stNoticeSendRankInfo::default_instance_ = NULL;

stNoticeSendRankInfo* stNoticeSendRankInfo::New() const {
  return new stNoticeSendRankInfo;
}

void stNoticeSendRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNoticeSendRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNoticeSendRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNoticeSendRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNoticeSendRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNoticeSendRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNoticeSendRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNoticeSendRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNoticeSendRankInfo::MergeFrom(const stNoticeSendRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNoticeSendRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNoticeSendRankInfo::CopyFrom(const stNoticeSendRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNoticeSendRankInfo::IsInitialized() const {

  return true;
}

void stNoticeSendRankInfo::Swap(stNoticeSendRankInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNoticeSendRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNoticeSendRankInfo_descriptor_;
  metadata.reflection = stNoticeSendRankInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOperateActivityCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityCb_ProtoModID_descriptor_;
}
bool stOperateActivityCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOperateActivityCb_ProtoModID stOperateActivityCb::ModID;
const stOperateActivityCb_ProtoModID stOperateActivityCb::ProtoModID_MIN;
const stOperateActivityCb_ProtoModID stOperateActivityCb::ProtoModID_MAX;
const int stOperateActivityCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOperateActivityCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityCb_ProtoFunID_descriptor_;
}
bool stOperateActivityCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 120:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOperateActivityCb_ProtoFunID stOperateActivityCb::FunID;
const stOperateActivityCb_ProtoFunID stOperateActivityCb::ProtoFunID_MIN;
const stOperateActivityCb_ProtoFunID stOperateActivityCb::ProtoFunID_MAX;
const int stOperateActivityCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOperateActivityCb::kCharIDFieldNumber;
const int stOperateActivityCb::kActivityIdFieldNumber;
const int stOperateActivityCb::kNumFieldNumber;
#endif  // !_MSC_VER

stOperateActivityCb::stOperateActivityCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOperateActivityCb::InitAsDefaultInstance() {
}

stOperateActivityCb::stOperateActivityCb(const stOperateActivityCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOperateActivityCb::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  activityid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOperateActivityCb::~stOperateActivityCb() {
  SharedDtor();
}

void stOperateActivityCb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOperateActivityCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOperateActivityCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityCb_descriptor_;
}

const stOperateActivityCb& stOperateActivityCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stOperateActivityCb* stOperateActivityCb::default_instance_ = NULL;

stOperateActivityCb* stOperateActivityCb::New() const {
  return new stOperateActivityCb;
}

void stOperateActivityCb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    activityid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOperateActivityCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activityId;
        break;
      }

      // optional uint32 activityId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOperateActivityCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 activityId = 2;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activityid(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOperateActivityCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 activityId = 2;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activityid(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOperateActivityCb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 activityId = 2;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOperateActivityCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOperateActivityCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOperateActivityCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOperateActivityCb::MergeFrom(const stOperateActivityCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOperateActivityCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOperateActivityCb::CopyFrom(const stOperateActivityCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOperateActivityCb::IsInitialized() const {

  return true;
}

void stOperateActivityCb::Swap(stOperateActivityCb* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(activityid_, other->activityid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOperateActivityCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOperateActivityCb_descriptor_;
  metadata.reflection = stOperateActivityCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOperateActivityReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityReward_ProtoModID_descriptor_;
}
bool stOperateActivityReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOperateActivityReward_ProtoModID stOperateActivityReward::ModID;
const stOperateActivityReward_ProtoModID stOperateActivityReward::ProtoModID_MIN;
const stOperateActivityReward_ProtoModID stOperateActivityReward::ProtoModID_MAX;
const int stOperateActivityReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOperateActivityReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityReward_ProtoFunID_descriptor_;
}
bool stOperateActivityReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 121:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOperateActivityReward_ProtoFunID stOperateActivityReward::FunID;
const stOperateActivityReward_ProtoFunID stOperateActivityReward::ProtoFunID_MIN;
const stOperateActivityReward_ProtoFunID stOperateActivityReward::ProtoFunID_MAX;
const int stOperateActivityReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOperateActivityReward::kCharIDFieldNumber;
const int stOperateActivityReward::kActivityIdFieldNumber;
const int stOperateActivityReward::kItemIdFieldNumber;
const int stOperateActivityReward::kStatusFieldNumber;
const int stOperateActivityReward::kBoxIdFieldNumber;
#endif  // !_MSC_VER

stOperateActivityReward::stOperateActivityReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOperateActivityReward::InitAsDefaultInstance() {
}

stOperateActivityReward::stOperateActivityReward(const stOperateActivityReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOperateActivityReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  activityid_ = 0u;
  itemid_ = 0u;
  status_ = 0u;
  boxid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOperateActivityReward::~stOperateActivityReward() {
  SharedDtor();
}

void stOperateActivityReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOperateActivityReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOperateActivityReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityReward_descriptor_;
}

const stOperateActivityReward& stOperateActivityReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stOperateActivityReward* stOperateActivityReward::default_instance_ = NULL;

stOperateActivityReward* stOperateActivityReward::New() const {
  return new stOperateActivityReward;
}

void stOperateActivityReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    activityid_ = 0u;
    itemid_ = 0u;
    status_ = 0u;
    boxid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOperateActivityReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activityId;
        break;
      }

      // optional uint32 activityId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_boxId;
        break;
      }

      // optional uint32 boxId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOperateActivityReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 activityId = 2;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activityid(), output);
  }

  // optional uint32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // optional uint32 boxId = 5;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOperateActivityReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 activityId = 2;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activityid(), target);
  }

  // optional uint32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // optional uint32 boxId = 5;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOperateActivityReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 activityId = 2;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 boxId = 5;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOperateActivityReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOperateActivityReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOperateActivityReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOperateActivityReward::MergeFrom(const stOperateActivityReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOperateActivityReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOperateActivityReward::CopyFrom(const stOperateActivityReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOperateActivityReward::IsInitialized() const {

  return true;
}

void stOperateActivityReward::Swap(stOperateActivityReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(activityid_, other->activityid_);
    std::swap(itemid_, other->itemid_);
    std::swap(status_, other->status_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOperateActivityReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOperateActivityReward_descriptor_;
  metadata.reflection = stOperateActivityReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOperateActivityRewardCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityRewardCb_ProtoModID_descriptor_;
}
bool stOperateActivityRewardCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOperateActivityRewardCb_ProtoModID stOperateActivityRewardCb::ModID;
const stOperateActivityRewardCb_ProtoModID stOperateActivityRewardCb::ProtoModID_MIN;
const stOperateActivityRewardCb_ProtoModID stOperateActivityRewardCb::ProtoModID_MAX;
const int stOperateActivityRewardCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOperateActivityRewardCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityRewardCb_ProtoFunID_descriptor_;
}
bool stOperateActivityRewardCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 122:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOperateActivityRewardCb_ProtoFunID stOperateActivityRewardCb::FunID;
const stOperateActivityRewardCb_ProtoFunID stOperateActivityRewardCb::ProtoFunID_MIN;
const stOperateActivityRewardCb_ProtoFunID stOperateActivityRewardCb::ProtoFunID_MAX;
const int stOperateActivityRewardCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOperateActivityRewardCb::kCharIDFieldNumber;
const int stOperateActivityRewardCb::kActivityIdFieldNumber;
const int stOperateActivityRewardCb::kItemIdFieldNumber;
const int stOperateActivityRewardCb::kStatusFieldNumber;
const int stOperateActivityRewardCb::kBoxIdFieldNumber;
#endif  // !_MSC_VER

stOperateActivityRewardCb::stOperateActivityRewardCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOperateActivityRewardCb::InitAsDefaultInstance() {
}

stOperateActivityRewardCb::stOperateActivityRewardCb(const stOperateActivityRewardCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOperateActivityRewardCb::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  activityid_ = 0u;
  itemid_ = 0u;
  status_ = 0u;
  boxid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOperateActivityRewardCb::~stOperateActivityRewardCb() {
  SharedDtor();
}

void stOperateActivityRewardCb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOperateActivityRewardCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOperateActivityRewardCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityRewardCb_descriptor_;
}

const stOperateActivityRewardCb& stOperateActivityRewardCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stOperateActivityRewardCb* stOperateActivityRewardCb::default_instance_ = NULL;

stOperateActivityRewardCb* stOperateActivityRewardCb::New() const {
  return new stOperateActivityRewardCb;
}

void stOperateActivityRewardCb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    activityid_ = 0u;
    itemid_ = 0u;
    status_ = 0u;
    boxid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOperateActivityRewardCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activityId;
        break;
      }

      // optional uint32 activityId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_status;
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_boxId;
        break;
      }

      // optional uint32 boxId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOperateActivityRewardCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 activityId = 2;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activityid(), output);
  }

  // optional uint32 itemId = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  // optional uint32 boxId = 5;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOperateActivityRewardCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 activityId = 2;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activityid(), target);
  }

  // optional uint32 itemId = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional uint32 status = 4;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  // optional uint32 boxId = 5;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOperateActivityRewardCb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 activityId = 2;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional uint32 itemId = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 status = 4;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 boxId = 5;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOperateActivityRewardCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOperateActivityRewardCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOperateActivityRewardCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOperateActivityRewardCb::MergeFrom(const stOperateActivityRewardCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOperateActivityRewardCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOperateActivityRewardCb::CopyFrom(const stOperateActivityRewardCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOperateActivityRewardCb::IsInitialized() const {

  return true;
}

void stOperateActivityRewardCb::Swap(stOperateActivityRewardCb* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(activityid_, other->activityid_);
    std::swap(itemid_, other->itemid_);
    std::swap(status_, other->status_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOperateActivityRewardCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOperateActivityRewardCb_descriptor_;
  metadata.reflection = stOperateActivityRewardCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityLotteryReward_ProtoModID_descriptor_;
}
bool stOperateActivityLotteryReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOperateActivityLotteryReward_ProtoModID stOperateActivityLotteryReward::ModID;
const stOperateActivityLotteryReward_ProtoModID stOperateActivityLotteryReward::ProtoModID_MIN;
const stOperateActivityLotteryReward_ProtoModID stOperateActivityLotteryReward::ProtoModID_MAX;
const int stOperateActivityLotteryReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityLotteryReward_ProtoFunID_descriptor_;
}
bool stOperateActivityLotteryReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 123:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOperateActivityLotteryReward_ProtoFunID stOperateActivityLotteryReward::FunID;
const stOperateActivityLotteryReward_ProtoFunID stOperateActivityLotteryReward::ProtoFunID_MIN;
const stOperateActivityLotteryReward_ProtoFunID stOperateActivityLotteryReward::ProtoFunID_MAX;
const int stOperateActivityLotteryReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOperateActivityLotteryReward::kCharIDFieldNumber;
const int stOperateActivityLotteryReward::kItemIdFieldNumber;
const int stOperateActivityLotteryReward::kCostFieldNumber;
const int stOperateActivityLotteryReward::kBoxIdFieldNumber;
#endif  // !_MSC_VER

stOperateActivityLotteryReward::stOperateActivityLotteryReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOperateActivityLotteryReward::InitAsDefaultInstance() {
}

stOperateActivityLotteryReward::stOperateActivityLotteryReward(const stOperateActivityLotteryReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOperateActivityLotteryReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  itemid_ = 0u;
  cost_ = 0u;
  boxid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOperateActivityLotteryReward::~stOperateActivityLotteryReward() {
  SharedDtor();
}

void stOperateActivityLotteryReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOperateActivityLotteryReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOperateActivityLotteryReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityLotteryReward_descriptor_;
}

const stOperateActivityLotteryReward& stOperateActivityLotteryReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stOperateActivityLotteryReward* stOperateActivityLotteryReward::default_instance_ = NULL;

stOperateActivityLotteryReward* stOperateActivityLotteryReward::New() const {
  return new stOperateActivityLotteryReward;
}

void stOperateActivityLotteryReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    itemid_ = 0u;
    cost_ = 0u;
    boxid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOperateActivityLotteryReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // optional uint32 cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boxId;
        break;
      }

      // optional uint32 boxId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOperateActivityLotteryReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional uint32 cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost(), output);
  }

  // optional uint32 boxId = 4;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOperateActivityLotteryReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional uint32 cost = 3;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost(), target);
  }

  // optional uint32 boxId = 4;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOperateActivityLotteryReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost());
    }

    // optional uint32 boxId = 4;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOperateActivityLotteryReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOperateActivityLotteryReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOperateActivityLotteryReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOperateActivityLotteryReward::MergeFrom(const stOperateActivityLotteryReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOperateActivityLotteryReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOperateActivityLotteryReward::CopyFrom(const stOperateActivityLotteryReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOperateActivityLotteryReward::IsInitialized() const {

  return true;
}

void stOperateActivityLotteryReward::Swap(stOperateActivityLotteryReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(cost_, other->cost_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOperateActivityLotteryReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOperateActivityLotteryReward_descriptor_;
  metadata.reflection = stOperateActivityLotteryReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryRewardCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityLotteryRewardCb_ProtoModID_descriptor_;
}
bool stOperateActivityLotteryRewardCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOperateActivityLotteryRewardCb_ProtoModID stOperateActivityLotteryRewardCb::ModID;
const stOperateActivityLotteryRewardCb_ProtoModID stOperateActivityLotteryRewardCb::ProtoModID_MIN;
const stOperateActivityLotteryRewardCb_ProtoModID stOperateActivityLotteryRewardCb::ProtoModID_MAX;
const int stOperateActivityLotteryRewardCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOperateActivityLotteryRewardCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityLotteryRewardCb_ProtoFunID_descriptor_;
}
bool stOperateActivityLotteryRewardCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 124:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOperateActivityLotteryRewardCb_ProtoFunID stOperateActivityLotteryRewardCb::FunID;
const stOperateActivityLotteryRewardCb_ProtoFunID stOperateActivityLotteryRewardCb::ProtoFunID_MIN;
const stOperateActivityLotteryRewardCb_ProtoFunID stOperateActivityLotteryRewardCb::ProtoFunID_MAX;
const int stOperateActivityLotteryRewardCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOperateActivityLotteryRewardCb::kCharIDFieldNumber;
const int stOperateActivityLotteryRewardCb::kItemIdFieldNumber;
#endif  // !_MSC_VER

stOperateActivityLotteryRewardCb::stOperateActivityLotteryRewardCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOperateActivityLotteryRewardCb::InitAsDefaultInstance() {
}

stOperateActivityLotteryRewardCb::stOperateActivityLotteryRewardCb(const stOperateActivityLotteryRewardCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOperateActivityLotteryRewardCb::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOperateActivityLotteryRewardCb::~stOperateActivityLotteryRewardCb() {
  SharedDtor();
}

void stOperateActivityLotteryRewardCb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOperateActivityLotteryRewardCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOperateActivityLotteryRewardCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOperateActivityLotteryRewardCb_descriptor_;
}

const stOperateActivityLotteryRewardCb& stOperateActivityLotteryRewardCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stOperateActivityLotteryRewardCb* stOperateActivityLotteryRewardCb::default_instance_ = NULL;

stOperateActivityLotteryRewardCb* stOperateActivityLotteryRewardCb::New() const {
  return new stOperateActivityLotteryRewardCb;
}

void stOperateActivityLotteryRewardCb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOperateActivityLotteryRewardCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOperateActivityLotteryRewardCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOperateActivityLotteryRewardCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOperateActivityLotteryRewardCb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOperateActivityLotteryRewardCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOperateActivityLotteryRewardCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOperateActivityLotteryRewardCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOperateActivityLotteryRewardCb::MergeFrom(const stOperateActivityLotteryRewardCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOperateActivityLotteryRewardCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOperateActivityLotteryRewardCb::CopyFrom(const stOperateActivityLotteryRewardCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOperateActivityLotteryRewardCb::IsInitialized() const {

  return true;
}

void stOperateActivityLotteryRewardCb::Swap(stOperateActivityLotteryRewardCb* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOperateActivityLotteryRewardCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOperateActivityLotteryRewardCb_descriptor_;
  metadata.reflection = stOperateActivityLotteryRewardCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayTypeCb_ProtoModID_descriptor_;
}
bool stReqPayTypeCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPayTypeCb_ProtoModID stReqPayTypeCb::ModID;
const stReqPayTypeCb_ProtoModID stReqPayTypeCb::ProtoModID_MIN;
const stReqPayTypeCb_ProtoModID stReqPayTypeCb::ProtoModID_MAX;
const int stReqPayTypeCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayTypeCb_ProtoFunID_descriptor_;
}
bool stReqPayTypeCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 125:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPayTypeCb_ProtoFunID stReqPayTypeCb::FunID;
const stReqPayTypeCb_ProtoFunID stReqPayTypeCb::ProtoFunID_MIN;
const stReqPayTypeCb_ProtoFunID stReqPayTypeCb::ProtoFunID_MAX;
const int stReqPayTypeCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPayTypeCb::kCharIDFieldNumber;
const int stReqPayTypeCb::kItemIdFieldNumber;
const int stReqPayTypeCb::kOrderIdFieldNumber;
#endif  // !_MSC_VER

stReqPayTypeCb::stReqPayTypeCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPayTypeCb::InitAsDefaultInstance() {
}

stReqPayTypeCb::stReqPayTypeCb(const stReqPayTypeCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPayTypeCb::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  itemid_ = 0u;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPayTypeCb::~stReqPayTypeCb() {
  SharedDtor();
}

void stReqPayTypeCb::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (this != default_instance_) {
  }
}

void stReqPayTypeCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPayTypeCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayTypeCb_descriptor_;
}

const stReqPayTypeCb& stReqPayTypeCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqPayTypeCb* stReqPayTypeCb::default_instance_ = NULL;

stReqPayTypeCb* stReqPayTypeCb::New() const {
  return new stReqPayTypeCb;
}

void stReqPayTypeCb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    itemid_ = 0u;
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPayTypeCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderId;
        break;
      }

      // optional string orderId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPayTypeCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional string orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPayTypeCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional string orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPayTypeCb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string orderId = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPayTypeCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPayTypeCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPayTypeCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPayTypeCb::MergeFrom(const stReqPayTypeCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPayTypeCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPayTypeCb::CopyFrom(const stReqPayTypeCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPayTypeCb::IsInitialized() const {

  return true;
}

void stReqPayTypeCb::Swap(stReqPayTypeCb* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(orderid_, other->orderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPayTypeCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPayTypeCb_descriptor_;
  metadata.reflection = stReqPayTypeCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqUserRankInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUserRankInfo_ProtoModID_descriptor_;
}
bool stReqUserRankInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUserRankInfo_ProtoModID stReqUserRankInfo::ModID;
const stReqUserRankInfo_ProtoModID stReqUserRankInfo::ProtoModID_MIN;
const stReqUserRankInfo_ProtoModID stReqUserRankInfo::ProtoModID_MAX;
const int stReqUserRankInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqUserRankInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUserRankInfo_ProtoFunID_descriptor_;
}
bool stReqUserRankInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 126:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqUserRankInfo_ProtoFunID stReqUserRankInfo::FunID;
const stReqUserRankInfo_ProtoFunID stReqUserRankInfo::ProtoFunID_MIN;
const stReqUserRankInfo_ProtoFunID stReqUserRankInfo::ProtoFunID_MAX;
const int stReqUserRankInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqUserRankInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqUserRankInfo::stReqUserRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqUserRankInfo::InitAsDefaultInstance() {
}

stReqUserRankInfo::stReqUserRankInfo(const stReqUserRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqUserRankInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqUserRankInfo::~stReqUserRankInfo() {
  SharedDtor();
}

void stReqUserRankInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqUserRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqUserRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqUserRankInfo_descriptor_;
}

const stReqUserRankInfo& stReqUserRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqUserRankInfo* stReqUserRankInfo::default_instance_ = NULL;

stReqUserRankInfo* stReqUserRankInfo::New() const {
  return new stReqUserRankInfo;
}

void stReqUserRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqUserRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqUserRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqUserRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqUserRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqUserRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqUserRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqUserRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqUserRankInfo::MergeFrom(const stReqUserRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqUserRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqUserRankInfo::CopyFrom(const stReqUserRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqUserRankInfo::IsInitialized() const {

  return true;
}

void stReqUserRankInfo::Swap(stReqUserRankInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqUserRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqUserRankInfo_descriptor_;
  metadata.reflection = stReqUserRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int userSortInfo::kNameFieldNumber;
#endif  // !_MSC_VER

userSortInfo::userSortInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void userSortInfo::InitAsDefaultInstance() {
}

userSortInfo::userSortInfo(const userSortInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void userSortInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

userSortInfo::~userSortInfo() {
  SharedDtor();
}

void userSortInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void userSortInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* userSortInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return userSortInfo_descriptor_;
}

const userSortInfo& userSortInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

userSortInfo* userSortInfo::default_instance_ = NULL;

userSortInfo* userSortInfo::New() const {
  return new userSortInfo;
}

void userSortInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool userSortInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void userSortInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* userSortInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int userSortInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void userSortInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const userSortInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const userSortInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void userSortInfo::MergeFrom(const userSortInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void userSortInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void userSortInfo::CopyFrom(const userSortInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool userSortInfo::IsInitialized() const {

  return true;
}

void userSortInfo::Swap(userSortInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata userSortInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = userSortInfo_descriptor_;
  metadata.reflection = userSortInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserRankInfoResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserRankInfoResult_ProtoModID_descriptor_;
}
bool stUserRankInfoResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserRankInfoResult_ProtoModID stUserRankInfoResult::ModID;
const stUserRankInfoResult_ProtoModID stUserRankInfoResult::ProtoModID_MIN;
const stUserRankInfoResult_ProtoModID stUserRankInfoResult::ProtoModID_MAX;
const int stUserRankInfoResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserRankInfoResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserRankInfoResult_ProtoFunID_descriptor_;
}
bool stUserRankInfoResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 127:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserRankInfoResult_ProtoFunID stUserRankInfoResult::FunID;
const stUserRankInfoResult_ProtoFunID stUserRankInfoResult::ProtoFunID_MIN;
const stUserRankInfoResult_ProtoFunID stUserRankInfoResult::ProtoFunID_MAX;
const int stUserRankInfoResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserRankInfoResult::kCharIDFieldNumber;
const int stUserRankInfoResult::kDamageFieldNumber;
const int stUserRankInfoResult::kRankFieldNumber;
const int stUserRankInfoResult::kEndTimeFieldNumber;
const int stUserRankInfoResult::kInfoFieldNumber;
const int stUserRankInfoResult::kLevelIDFieldNumber;
#endif  // !_MSC_VER

stUserRankInfoResult::stUserRankInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserRankInfoResult::InitAsDefaultInstance() {
}

stUserRankInfoResult::stUserRankInfoResult(const stUserRankInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserRankInfoResult::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  damage_ = 0u;
  rank_ = 0u;
  endtime_ = 0u;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserRankInfoResult::~stUserRankInfoResult() {
  SharedDtor();
}

void stUserRankInfoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserRankInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserRankInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserRankInfoResult_descriptor_;
}

const stUserRankInfoResult& stUserRankInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUserRankInfoResult* stUserRankInfoResult::default_instance_ = NULL;

stUserRankInfoResult* stUserRankInfoResult::New() const {
  return new stUserRankInfoResult;
}

void stUserRankInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    damage_ = 0u;
    rank_ = 0u;
    endtime_ = 0u;
    levelid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserRankInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endTime;
        break;
      }

      // optional uint32 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // repeated .Global.userSortInfo info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        if (input->ExpectTag(48)) goto parse_levelID;
        break;
      }

      // optional uint32 levelID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserRankInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rank(), output);
  }

  // optional uint32 endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }

  // repeated .Global.userSortInfo info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(i), output);
  }

  // optional uint32 levelID = 6;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserRankInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  // optional uint32 rank = 3;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rank(), target);
  }

  // optional uint32 endTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endtime(), target);
  }

  // repeated .Global.userSortInfo info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(i), target);
  }

  // optional uint32 levelID = 6;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserRankInfoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

    // optional uint32 rank = 3;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 endTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

    // optional uint32 levelID = 6;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  // repeated .Global.userSortInfo info = 5;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserRankInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserRankInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserRankInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserRankInfoResult::MergeFrom(const stUserRankInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserRankInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserRankInfoResult::CopyFrom(const stUserRankInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserRankInfoResult::IsInitialized() const {

  return true;
}

void stUserRankInfoResult::Swap(stUserRankInfoResult* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(damage_, other->damage_);
    std::swap(rank_, other->rank_);
    std::swap(endtime_, other->endtime_);
    info_.Swap(&other->info_);
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserRankInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserRankInfoResult_descriptor_;
  metadata.reflection = stUserRankInfoResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEmeraldDreamCopymapFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEmeraldDreamCopymapFail_ProtoModID_descriptor_;
}
bool stEmeraldDreamCopymapFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEmeraldDreamCopymapFail_ProtoModID stEmeraldDreamCopymapFail::ModID;
const stEmeraldDreamCopymapFail_ProtoModID stEmeraldDreamCopymapFail::ProtoModID_MIN;
const stEmeraldDreamCopymapFail_ProtoModID stEmeraldDreamCopymapFail::ProtoModID_MAX;
const int stEmeraldDreamCopymapFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEmeraldDreamCopymapFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEmeraldDreamCopymapFail_ProtoFunID_descriptor_;
}
bool stEmeraldDreamCopymapFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 128:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEmeraldDreamCopymapFail_ProtoFunID stEmeraldDreamCopymapFail::FunID;
const stEmeraldDreamCopymapFail_ProtoFunID stEmeraldDreamCopymapFail::ProtoFunID_MIN;
const stEmeraldDreamCopymapFail_ProtoFunID stEmeraldDreamCopymapFail::ProtoFunID_MAX;
const int stEmeraldDreamCopymapFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEmeraldDreamCopymapFail::kDamageInfoFieldNumber;
const int stEmeraldDreamCopymapFail::kBossHPFieldNumber;
#endif  // !_MSC_VER

stEmeraldDreamCopymapFail::stEmeraldDreamCopymapFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEmeraldDreamCopymapFail::InitAsDefaultInstance() {
}

stEmeraldDreamCopymapFail::stEmeraldDreamCopymapFail(const stEmeraldDreamCopymapFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEmeraldDreamCopymapFail::SharedCtor() {
  _cached_size_ = 0;
  bosshp_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEmeraldDreamCopymapFail::~stEmeraldDreamCopymapFail() {
  SharedDtor();
}

void stEmeraldDreamCopymapFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEmeraldDreamCopymapFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEmeraldDreamCopymapFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEmeraldDreamCopymapFail_descriptor_;
}

const stEmeraldDreamCopymapFail& stEmeraldDreamCopymapFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stEmeraldDreamCopymapFail* stEmeraldDreamCopymapFail::default_instance_ = NULL;

stEmeraldDreamCopymapFail* stEmeraldDreamCopymapFail::New() const {
  return new stEmeraldDreamCopymapFail;
}

void stEmeraldDreamCopymapFail::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    bosshp_ = 0u;
  }
  damageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEmeraldDreamCopymapFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stUserDamagePair damageInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damageinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_damageInfo;
        if (input->ExpectTag(16)) goto parse_bossHP;
        break;
      }

      // optional uint32 bossHP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bosshp_)));
          set_has_bosshp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEmeraldDreamCopymapFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damageinfo(i), output);
  }

  // optional uint32 bossHP = 2;
  if (has_bosshp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bosshp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEmeraldDreamCopymapFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damageinfo(i), target);
  }

  // optional uint32 bossHP = 2;
  if (has_bosshp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bosshp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEmeraldDreamCopymapFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 bossHP = 2;
    if (has_bosshp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bosshp());
    }

  }
  // repeated .Global.stUserDamagePair damageInfo = 1;
  total_size += 1 * this->damageinfo_size();
  for (int i = 0; i < this->damageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damageinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEmeraldDreamCopymapFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEmeraldDreamCopymapFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEmeraldDreamCopymapFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEmeraldDreamCopymapFail::MergeFrom(const stEmeraldDreamCopymapFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  damageinfo_.MergeFrom(from.damageinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bosshp()) {
      set_bosshp(from.bosshp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEmeraldDreamCopymapFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEmeraldDreamCopymapFail::CopyFrom(const stEmeraldDreamCopymapFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEmeraldDreamCopymapFail::IsInitialized() const {

  return true;
}

void stEmeraldDreamCopymapFail::Swap(stEmeraldDreamCopymapFail* other) {
  if (other != this) {
    damageinfo_.Swap(&other->damageinfo_);
    std::swap(bosshp_, other->bosshp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEmeraldDreamCopymapFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEmeraldDreamCopymapFail_descriptor_;
  metadata.reflection = stEmeraldDreamCopymapFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stKillEmeraldDreamBoss_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillEmeraldDreamBoss_ProtoModID_descriptor_;
}
bool stKillEmeraldDreamBoss_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillEmeraldDreamBoss_ProtoModID stKillEmeraldDreamBoss::ModID;
const stKillEmeraldDreamBoss_ProtoModID stKillEmeraldDreamBoss::ProtoModID_MIN;
const stKillEmeraldDreamBoss_ProtoModID stKillEmeraldDreamBoss::ProtoModID_MAX;
const int stKillEmeraldDreamBoss::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stKillEmeraldDreamBoss_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillEmeraldDreamBoss_ProtoFunID_descriptor_;
}
bool stKillEmeraldDreamBoss_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 129:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillEmeraldDreamBoss_ProtoFunID stKillEmeraldDreamBoss::FunID;
const stKillEmeraldDreamBoss_ProtoFunID stKillEmeraldDreamBoss::ProtoFunID_MIN;
const stKillEmeraldDreamBoss_ProtoFunID stKillEmeraldDreamBoss::ProtoFunID_MAX;
const int stKillEmeraldDreamBoss::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stKillEmeraldDreamBoss::kDamageInfoFieldNumber;
const int stKillEmeraldDreamBoss::kBossIDFieldNumber;
#endif  // !_MSC_VER

stKillEmeraldDreamBoss::stKillEmeraldDreamBoss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stKillEmeraldDreamBoss::InitAsDefaultInstance() {
}

stKillEmeraldDreamBoss::stKillEmeraldDreamBoss(const stKillEmeraldDreamBoss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stKillEmeraldDreamBoss::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stKillEmeraldDreamBoss::~stKillEmeraldDreamBoss() {
  SharedDtor();
}

void stKillEmeraldDreamBoss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stKillEmeraldDreamBoss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stKillEmeraldDreamBoss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillEmeraldDreamBoss_descriptor_;
}

const stKillEmeraldDreamBoss& stKillEmeraldDreamBoss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stKillEmeraldDreamBoss* stKillEmeraldDreamBoss::default_instance_ = NULL;

stKillEmeraldDreamBoss* stKillEmeraldDreamBoss::New() const {
  return new stKillEmeraldDreamBoss;
}

void stKillEmeraldDreamBoss::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    bossid_ = 0u;
  }
  damageinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stKillEmeraldDreamBoss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stUserDamagePair damageInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_damageInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_damageinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_damageInfo;
        if (input->ExpectTag(16)) goto parse_bossID;
        break;
      }

      // optional uint32 bossID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stKillEmeraldDreamBoss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->damageinfo(i), output);
  }

  // optional uint32 bossID = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stKillEmeraldDreamBoss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stUserDamagePair damageInfo = 1;
  for (int i = 0; i < this->damageinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->damageinfo(i), target);
  }

  // optional uint32 bossID = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stKillEmeraldDreamBoss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 bossID = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bossid());
    }

  }
  // repeated .Global.stUserDamagePair damageInfo = 1;
  total_size += 1 * this->damageinfo_size();
  for (int i = 0; i < this->damageinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->damageinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stKillEmeraldDreamBoss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stKillEmeraldDreamBoss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stKillEmeraldDreamBoss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stKillEmeraldDreamBoss::MergeFrom(const stKillEmeraldDreamBoss& from) {
  GOOGLE_CHECK_NE(&from, this);
  damageinfo_.MergeFrom(from.damageinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stKillEmeraldDreamBoss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stKillEmeraldDreamBoss::CopyFrom(const stKillEmeraldDreamBoss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stKillEmeraldDreamBoss::IsInitialized() const {

  return true;
}

void stKillEmeraldDreamBoss::Swap(stKillEmeraldDreamBoss* other) {
  if (other != this) {
    damageinfo_.Swap(&other->damageinfo_);
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stKillEmeraldDreamBoss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stKillEmeraldDreamBoss_descriptor_;
  metadata.reflection = stKillEmeraldDreamBoss_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* strRemoveNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return strRemoveNum_ProtoModID_descriptor_;
}
bool strRemoveNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const strRemoveNum_ProtoModID strRemoveNum::ModID;
const strRemoveNum_ProtoModID strRemoveNum::ProtoModID_MIN;
const strRemoveNum_ProtoModID strRemoveNum::ProtoModID_MAX;
const int strRemoveNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* strRemoveNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return strRemoveNum_ProtoFunID_descriptor_;
}
bool strRemoveNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 130:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const strRemoveNum_ProtoFunID strRemoveNum::FunID;
const strRemoveNum_ProtoFunID strRemoveNum::ProtoFunID_MIN;
const strRemoveNum_ProtoFunID strRemoveNum::ProtoFunID_MAX;
const int strRemoveNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int strRemoveNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

strRemoveNum::strRemoveNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void strRemoveNum::InitAsDefaultInstance() {
}

strRemoveNum::strRemoveNum(const strRemoveNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void strRemoveNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

strRemoveNum::~strRemoveNum() {
  SharedDtor();
}

void strRemoveNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void strRemoveNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* strRemoveNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return strRemoveNum_descriptor_;
}

const strRemoveNum& strRemoveNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

strRemoveNum* strRemoveNum::default_instance_ = NULL;

strRemoveNum* strRemoveNum::New() const {
  return new strRemoveNum;
}

void strRemoveNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool strRemoveNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void strRemoveNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* strRemoveNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int strRemoveNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void strRemoveNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const strRemoveNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const strRemoveNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void strRemoveNum::MergeFrom(const strRemoveNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void strRemoveNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void strRemoveNum::CopyFrom(const strRemoveNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool strRemoveNum::IsInitialized() const {

  return true;
}

void strRemoveNum::Swap(strRemoveNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata strRemoveNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = strRemoveNum_descriptor_;
  metadata.reflection = strRemoveNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCopyMapInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopyMapInfo_ProtoModID_descriptor_;
}
bool stCopyMapInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCopyMapInfo_ProtoModID stCopyMapInfo::ModID;
const stCopyMapInfo_ProtoModID stCopyMapInfo::ProtoModID_MIN;
const stCopyMapInfo_ProtoModID stCopyMapInfo::ProtoModID_MAX;
const int stCopyMapInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCopyMapInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopyMapInfo_ProtoFunID_descriptor_;
}
bool stCopyMapInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 131:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCopyMapInfo_ProtoFunID stCopyMapInfo::FunID;
const stCopyMapInfo_ProtoFunID stCopyMapInfo::ProtoFunID_MIN;
const stCopyMapInfo_ProtoFunID stCopyMapInfo::ProtoFunID_MAX;
const int stCopyMapInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCopyMapInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stCopyMapInfo::stCopyMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCopyMapInfo::InitAsDefaultInstance() {
}

stCopyMapInfo::stCopyMapInfo(const stCopyMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCopyMapInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCopyMapInfo::~stCopyMapInfo() {
  SharedDtor();
}

void stCopyMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCopyMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCopyMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopyMapInfo_descriptor_;
}

const stCopyMapInfo& stCopyMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCopyMapInfo* stCopyMapInfo::default_instance_ = NULL;

stCopyMapInfo* stCopyMapInfo::New() const {
  return new stCopyMapInfo;
}

void stCopyMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCopyMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCopyMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCopyMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCopyMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCopyMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCopyMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCopyMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCopyMapInfo::MergeFrom(const stCopyMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCopyMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCopyMapInfo::CopyFrom(const stCopyMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCopyMapInfo::IsInitialized() const {

  return true;
}

void stCopyMapInfo::Swap(stCopyMapInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCopyMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCopyMapInfo_descriptor_;
  metadata.reflection = stCopyMapInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCopyMapInfoResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopyMapInfoResult_ProtoModID_descriptor_;
}
bool stCopyMapInfoResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCopyMapInfoResult_ProtoModID stCopyMapInfoResult::ModID;
const stCopyMapInfoResult_ProtoModID stCopyMapInfoResult::ProtoModID_MIN;
const stCopyMapInfoResult_ProtoModID stCopyMapInfoResult::ProtoModID_MAX;
const int stCopyMapInfoResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCopyMapInfoResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopyMapInfoResult_ProtoFunID_descriptor_;
}
bool stCopyMapInfoResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 132:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCopyMapInfoResult_ProtoFunID stCopyMapInfoResult::FunID;
const stCopyMapInfoResult_ProtoFunID stCopyMapInfoResult::ProtoFunID_MIN;
const stCopyMapInfoResult_ProtoFunID stCopyMapInfoResult::ProtoFunID_MAX;
const int stCopyMapInfoResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCopyMapInfoResult::kCharIDFieldNumber;
const int stCopyMapInfoResult::kLevelIdFieldNumber;
#endif  // !_MSC_VER

stCopyMapInfoResult::stCopyMapInfoResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCopyMapInfoResult::InitAsDefaultInstance() {
}

stCopyMapInfoResult::stCopyMapInfoResult(const stCopyMapInfoResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCopyMapInfoResult::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCopyMapInfoResult::~stCopyMapInfoResult() {
  SharedDtor();
}

void stCopyMapInfoResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCopyMapInfoResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCopyMapInfoResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopyMapInfoResult_descriptor_;
}

const stCopyMapInfoResult& stCopyMapInfoResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stCopyMapInfoResult* stCopyMapInfoResult::default_instance_ = NULL;

stCopyMapInfoResult* stCopyMapInfoResult::New() const {
  return new stCopyMapInfoResult;
}

void stCopyMapInfoResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCopyMapInfoResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelId;
        break;
      }

      // optional uint32 levelId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCopyMapInfoResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 levelId = 2;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCopyMapInfoResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 levelId = 2;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCopyMapInfoResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 levelId = 2;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCopyMapInfoResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCopyMapInfoResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCopyMapInfoResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCopyMapInfoResult::MergeFrom(const stCopyMapInfoResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCopyMapInfoResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCopyMapInfoResult::CopyFrom(const stCopyMapInfoResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCopyMapInfoResult::IsInitialized() const {

  return true;
}

void stCopyMapInfoResult::Swap(stCopyMapInfoResult* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCopyMapInfoResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCopyMapInfoResult_descriptor_;
  metadata.reflection = stCopyMapInfoResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeTeamMatch_ProtoModID_descriptor_;
}
bool stRealTimeTeamMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeTeamMatch_ProtoModID stRealTimeTeamMatch::ModID;
const stRealTimeTeamMatch_ProtoModID stRealTimeTeamMatch::ProtoModID_MIN;
const stRealTimeTeamMatch_ProtoModID stRealTimeTeamMatch::ProtoModID_MAX;
const int stRealTimeTeamMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeTeamMatch_ProtoFunID_descriptor_;
}
bool stRealTimeTeamMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 133:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeTeamMatch_ProtoFunID stRealTimeTeamMatch::FunID;
const stRealTimeTeamMatch_ProtoFunID stRealTimeTeamMatch::ProtoFunID_MIN;
const stRealTimeTeamMatch_ProtoFunID stRealTimeTeamMatch::ProtoFunID_MAX;
const int stRealTimeTeamMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRealTimeTeamMatch::kETypeFieldNumber;
const int stRealTimeTeamMatch::kTeamIDFieldNumber;
const int stRealTimeTeamMatch::kMemberIdFieldNumber;
#endif  // !_MSC_VER

stRealTimeTeamMatch::stRealTimeTeamMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRealTimeTeamMatch::InitAsDefaultInstance() {
}

stRealTimeTeamMatch::stRealTimeTeamMatch(const stRealTimeTeamMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRealTimeTeamMatch::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 1;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRealTimeTeamMatch::~stRealTimeTeamMatch() {
  SharedDtor();
}

void stRealTimeTeamMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRealTimeTeamMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRealTimeTeamMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeTeamMatch_descriptor_;
}

const stRealTimeTeamMatch& stRealTimeTeamMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRealTimeTeamMatch* stRealTimeTeamMatch::default_instance_ = NULL;

stRealTimeTeamMatch* stRealTimeTeamMatch::New() const {
  return new stRealTimeTeamMatch;
}

void stRealTimeTeamMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 1;
    teamid_ = 0u;
  }
  memberid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRealTimeTeamMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.eRealTimePKType eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::eRealTimePKType_IsValid(value)) {
            set_etype(static_cast< ::Global::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberId;
        break;
      }

      // repeated uint32 memberId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_memberid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_memberid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRealTimeTeamMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.eRealTimePKType eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  // repeated uint32 memberId = 3;
  for (int i = 0; i < this->memberid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->memberid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRealTimeTeamMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.eRealTimePKType eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  // repeated uint32 memberId = 3;
  for (int i = 0; i < this->memberid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->memberid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRealTimeTeamMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.eRealTimePKType eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 teamID = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  // repeated uint32 memberId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->memberid(i));
    }
    total_size += 1 * this->memberid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRealTimeTeamMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRealTimeTeamMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRealTimeTeamMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRealTimeTeamMatch::MergeFrom(const stRealTimeTeamMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberid_.MergeFrom(from.memberid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRealTimeTeamMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRealTimeTeamMatch::CopyFrom(const stRealTimeTeamMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRealTimeTeamMatch::IsInitialized() const {

  return true;
}

void stRealTimeTeamMatch::Swap(stRealTimeTeamMatch* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(teamid_, other->teamid_);
    memberid_.Swap(&other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRealTimeTeamMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRealTimeTeamMatch_descriptor_;
  metadata.reflection = stRealTimeTeamMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stOnPubLeaveTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnPubLeaveTeam_ProtoModID_descriptor_;
}
bool stOnPubLeaveTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOnPubLeaveTeam_ProtoModID stOnPubLeaveTeam::ModID;
const stOnPubLeaveTeam_ProtoModID stOnPubLeaveTeam::ProtoModID_MIN;
const stOnPubLeaveTeam_ProtoModID stOnPubLeaveTeam::ProtoModID_MAX;
const int stOnPubLeaveTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stOnPubLeaveTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnPubLeaveTeam_ProtoFunID_descriptor_;
}
bool stOnPubLeaveTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 134:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stOnPubLeaveTeam_ProtoFunID stOnPubLeaveTeam::FunID;
const stOnPubLeaveTeam_ProtoFunID stOnPubLeaveTeam::ProtoFunID_MIN;
const stOnPubLeaveTeam_ProtoFunID stOnPubLeaveTeam::ProtoFunID_MAX;
const int stOnPubLeaveTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stOnPubLeaveTeam::kCharIDFieldNumber;
#endif  // !_MSC_VER

stOnPubLeaveTeam::stOnPubLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stOnPubLeaveTeam::InitAsDefaultInstance() {
}

stOnPubLeaveTeam::stOnPubLeaveTeam(const stOnPubLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stOnPubLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stOnPubLeaveTeam::~stOnPubLeaveTeam() {
  SharedDtor();
}

void stOnPubLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stOnPubLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stOnPubLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stOnPubLeaveTeam_descriptor_;
}

const stOnPubLeaveTeam& stOnPubLeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stOnPubLeaveTeam* stOnPubLeaveTeam::default_instance_ = NULL;

stOnPubLeaveTeam* stOnPubLeaveTeam::New() const {
  return new stOnPubLeaveTeam;
}

void stOnPubLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stOnPubLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stOnPubLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stOnPubLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stOnPubLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stOnPubLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stOnPubLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stOnPubLeaveTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stOnPubLeaveTeam::MergeFrom(const stOnPubLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stOnPubLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stOnPubLeaveTeam::CopyFrom(const stOnPubLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stOnPubLeaveTeam::IsInitialized() const {

  return true;
}

void stOnPubLeaveTeam::Swap(stOnPubLeaveTeam* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stOnPubLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stOnPubLeaveTeam_descriptor_;
  metadata.reflection = stOnPubLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDeductMoney_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeductMoney_ProtoModID_descriptor_;
}
bool stDeductMoney_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDeductMoney_ProtoModID stDeductMoney::ModID;
const stDeductMoney_ProtoModID stDeductMoney::ProtoModID_MIN;
const stDeductMoney_ProtoModID stDeductMoney::ProtoModID_MAX;
const int stDeductMoney::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDeductMoney_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeductMoney_ProtoFunID_descriptor_;
}
bool stDeductMoney_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 135:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDeductMoney_ProtoFunID stDeductMoney::FunID;
const stDeductMoney_ProtoFunID stDeductMoney::ProtoFunID_MIN;
const stDeductMoney_ProtoFunID stDeductMoney::ProtoFunID_MAX;
const int stDeductMoney::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDeductMoney::kNumFieldNumber;
const int stDeductMoney::kCharIDFieldNumber;
#endif  // !_MSC_VER

stDeductMoney::stDeductMoney()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDeductMoney::InitAsDefaultInstance() {
}

stDeductMoney::stDeductMoney(const stDeductMoney& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDeductMoney::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDeductMoney::~stDeductMoney() {
  SharedDtor();
}

void stDeductMoney::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDeductMoney::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDeductMoney::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeductMoney_descriptor_;
}

const stDeductMoney& stDeductMoney::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDeductMoney* stDeductMoney::default_instance_ = NULL;

stDeductMoney* stDeductMoney::New() const {
  return new stDeductMoney;
}

void stDeductMoney::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDeductMoney::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDeductMoney::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDeductMoney::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDeductMoney::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDeductMoney::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDeductMoney* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDeductMoney*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDeductMoney::MergeFrom(const stDeductMoney& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDeductMoney::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDeductMoney::CopyFrom(const stDeductMoney& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDeductMoney::IsInitialized() const {

  return true;
}

void stDeductMoney::Swap(stDeductMoney* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDeductMoney::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDeductMoney_descriptor_;
  metadata.reflection = stDeductMoney_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDeductMoneyResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeductMoneyResult_eResult_descriptor_;
}
bool stDeductMoneyResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDeductMoneyResult_eResult stDeductMoneyResult::eSuccess;
const stDeductMoneyResult_eResult stDeductMoneyResult::DIAMOND_NOT_ENOUGH;
const stDeductMoneyResult_eResult stDeductMoneyResult::eResult_MIN;
const stDeductMoneyResult_eResult stDeductMoneyResult::eResult_MAX;
const int stDeductMoneyResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDeductMoneyResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeductMoneyResult_ProtoModID_descriptor_;
}
bool stDeductMoneyResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDeductMoneyResult_ProtoModID stDeductMoneyResult::ModID;
const stDeductMoneyResult_ProtoModID stDeductMoneyResult::ProtoModID_MIN;
const stDeductMoneyResult_ProtoModID stDeductMoneyResult::ProtoModID_MAX;
const int stDeductMoneyResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDeductMoneyResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeductMoneyResult_ProtoFunID_descriptor_;
}
bool stDeductMoneyResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 136:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDeductMoneyResult_ProtoFunID stDeductMoneyResult::FunID;
const stDeductMoneyResult_ProtoFunID stDeductMoneyResult::ProtoFunID_MIN;
const stDeductMoneyResult_ProtoFunID stDeductMoneyResult::ProtoFunID_MAX;
const int stDeductMoneyResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDeductMoneyResult::kResultFieldNumber;
const int stDeductMoneyResult::kCharIDFieldNumber;
#endif  // !_MSC_VER

stDeductMoneyResult::stDeductMoneyResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDeductMoneyResult::InitAsDefaultInstance() {
}

stDeductMoneyResult::stDeductMoneyResult(const stDeductMoneyResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDeductMoneyResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDeductMoneyResult::~stDeductMoneyResult() {
  SharedDtor();
}

void stDeductMoneyResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDeductMoneyResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDeductMoneyResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDeductMoneyResult_descriptor_;
}

const stDeductMoneyResult& stDeductMoneyResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDeductMoneyResult* stDeductMoneyResult::default_instance_ = NULL;

stDeductMoneyResult* stDeductMoneyResult::New() const {
  return new stDeductMoneyResult;
}

void stDeductMoneyResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDeductMoneyResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.stDeductMoneyResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::stDeductMoneyResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Global::stDeductMoneyResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDeductMoneyResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.stDeductMoneyResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDeductMoneyResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.stDeductMoneyResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDeductMoneyResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.stDeductMoneyResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDeductMoneyResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDeductMoneyResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDeductMoneyResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDeductMoneyResult::MergeFrom(const stDeductMoneyResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDeductMoneyResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDeductMoneyResult::CopyFrom(const stDeductMoneyResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDeductMoneyResult::IsInitialized() const {

  return true;
}

void stDeductMoneyResult::Swap(stDeductMoneyResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDeductMoneyResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDeductMoneyResult_descriptor_;
  metadata.reflection = stDeductMoneyResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGiveReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveReward_ProtoModID_descriptor_;
}
bool stGiveReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveReward_ProtoModID stGiveReward::ModID;
const stGiveReward_ProtoModID stGiveReward::ProtoModID_MIN;
const stGiveReward_ProtoModID stGiveReward::ProtoModID_MAX;
const int stGiveReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveReward_ProtoFunID_descriptor_;
}
bool stGiveReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 137:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveReward_ProtoFunID stGiveReward::FunID;
const stGiveReward_ProtoFunID stGiveReward::ProtoFunID_MIN;
const stGiveReward_ProtoFunID stGiveReward::ProtoFunID_MAX;
const int stGiveReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGiveReward::kCharIDFieldNumber;
const int stGiveReward::kBoxIDFieldNumber;
const int stGiveReward::kRewardIDFieldNumber;
const int stGiveReward::kIsIntegralRewardFieldNumber;
#endif  // !_MSC_VER

stGiveReward::stGiveReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiveReward::InitAsDefaultInstance() {
}

stGiveReward::stGiveReward(const stGiveReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiveReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  boxid_ = 0u;
  rewardid_ = 0u;
  isintegralreward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiveReward::~stGiveReward() {
  SharedDtor();
}

void stGiveReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiveReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiveReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveReward_descriptor_;
}

const stGiveReward& stGiveReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGiveReward* stGiveReward::default_instance_ = NULL;

stGiveReward* stGiveReward::New() const {
  return new stGiveReward;
}

void stGiveReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    boxid_ = 0u;
    rewardid_ = 0u;
    isintegralreward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiveReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxID;
        break;
      }

      // optional uint32 boxID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardID;
        break;
      }

      // optional uint32 rewardID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isIntegralReward;
        break;
      }

      // optional bool isIntegralReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isIntegralReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isintegralreward_)));
          set_has_isintegralreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiveReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 boxID = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boxid(), output);
  }

  // optional uint32 rewardID = 3;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rewardid(), output);
  }

  // optional bool isIntegralReward = 4;
  if (has_isintegralreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isintegralreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiveReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 boxID = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boxid(), target);
  }

  // optional uint32 rewardID = 3;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rewardid(), target);
  }

  // optional bool isIntegralReward = 4;
  if (has_isintegralreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isintegralreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiveReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 boxID = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // optional uint32 rewardID = 3;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

    // optional bool isIntegralReward = 4;
    if (has_isintegralreward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiveReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiveReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiveReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiveReward::MergeFrom(const stGiveReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_isintegralreward()) {
      set_isintegralreward(from.isintegralreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiveReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiveReward::CopyFrom(const stGiveReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiveReward::IsInitialized() const {

  return true;
}

void stGiveReward::Swap(stGiveReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(boxid_, other->boxid_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(isintegralreward_, other->isintegralreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiveReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiveReward_descriptor_;
  metadata.reflection = stGiveReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGiveRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveRewardResult_eResult_descriptor_;
}
bool stGiveRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveRewardResult_eResult stGiveRewardResult::eSuccess;
const stGiveRewardResult_eResult stGiveRewardResult::eBAG_SLOT_NOT_ENOUGH;
const stGiveRewardResult_eResult stGiveRewardResult::eResult_MIN;
const stGiveRewardResult_eResult stGiveRewardResult::eResult_MAX;
const int stGiveRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveRewardResult_ProtoModID_descriptor_;
}
bool stGiveRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveRewardResult_ProtoModID stGiveRewardResult::ModID;
const stGiveRewardResult_ProtoModID stGiveRewardResult::ProtoModID_MIN;
const stGiveRewardResult_ProtoModID stGiveRewardResult::ProtoModID_MAX;
const int stGiveRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveRewardResult_ProtoFunID_descriptor_;
}
bool stGiveRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 138:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveRewardResult_ProtoFunID stGiveRewardResult::FunID;
const stGiveRewardResult_ProtoFunID stGiveRewardResult::ProtoFunID_MIN;
const stGiveRewardResult_ProtoFunID stGiveRewardResult::ProtoFunID_MAX;
const int stGiveRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGiveRewardResult::kResultFieldNumber;
const int stGiveRewardResult::kCharIDFieldNumber;
const int stGiveRewardResult::kRewardIDFieldNumber;
const int stGiveRewardResult::kIsIntegralRewardFieldNumber;
#endif  // !_MSC_VER

stGiveRewardResult::stGiveRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiveRewardResult::InitAsDefaultInstance() {
}

stGiveRewardResult::stGiveRewardResult(const stGiveRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiveRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  charid_ = 0u;
  rewardid_ = 0u;
  isintegralreward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiveRewardResult::~stGiveRewardResult() {
  SharedDtor();
}

void stGiveRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiveRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiveRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveRewardResult_descriptor_;
}

const stGiveRewardResult& stGiveRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGiveRewardResult* stGiveRewardResult::default_instance_ = NULL;

stGiveRewardResult* stGiveRewardResult::New() const {
  return new stGiveRewardResult;
}

void stGiveRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    charid_ = 0u;
    rewardid_ = 0u;
    isintegralreward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiveRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.stGiveRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::stGiveRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Global::stGiveRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardID;
        break;
      }

      // optional uint32 rewardID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rewardid_)));
          set_has_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isIntegralReward;
        break;
      }

      // optional bool isIntegralReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isIntegralReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isintegralreward_)));
          set_has_isintegralreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiveRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.stGiveRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 rewardID = 3;
  if (has_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->rewardid(), output);
  }

  // optional bool isIntegralReward = 4;
  if (has_isintegralreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isintegralreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiveRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.stGiveRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 rewardID = 3;
  if (has_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->rewardid(), target);
  }

  // optional bool isIntegralReward = 4;
  if (has_isintegralreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isintegralreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiveRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.stGiveRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 rewardID = 3;
    if (has_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rewardid());
    }

    // optional bool isIntegralReward = 4;
    if (has_isintegralreward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiveRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiveRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiveRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiveRewardResult::MergeFrom(const stGiveRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rewardid()) {
      set_rewardid(from.rewardid());
    }
    if (from.has_isintegralreward()) {
      set_isintegralreward(from.isintegralreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiveRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiveRewardResult::CopyFrom(const stGiveRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiveRewardResult::IsInitialized() const {

  return true;
}

void stGiveRewardResult::Swap(stGiveRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(rewardid_, other->rewardid_);
    std::swap(isintegralreward_, other->isintegralreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiveRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiveRewardResult_descriptor_;
  metadata.reflection = stGiveRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCheckMission_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCheckMission_ProtoModID_descriptor_;
}
bool stReqCheckMission_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCheckMission_ProtoModID stReqCheckMission::ModID;
const stReqCheckMission_ProtoModID stReqCheckMission::ProtoModID_MIN;
const stReqCheckMission_ProtoModID stReqCheckMission::ProtoModID_MAX;
const int stReqCheckMission::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCheckMission_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCheckMission_ProtoFunID_descriptor_;
}
bool stReqCheckMission_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 139:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCheckMission_ProtoFunID stReqCheckMission::FunID;
const stReqCheckMission_ProtoFunID stReqCheckMission::ProtoFunID_MIN;
const stReqCheckMission_ProtoFunID stReqCheckMission::ProtoFunID_MAX;
const int stReqCheckMission::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCheckMission::kCharIDFieldNumber;
const int stReqCheckMission::kLevelIDFieldNumber;
#endif  // !_MSC_VER

stReqCheckMission::stReqCheckMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCheckMission::InitAsDefaultInstance() {
}

stReqCheckMission::stReqCheckMission(const stReqCheckMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCheckMission::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCheckMission::~stReqCheckMission() {
  SharedDtor();
}

void stReqCheckMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCheckMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCheckMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCheckMission_descriptor_;
}

const stReqCheckMission& stReqCheckMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqCheckMission* stReqCheckMission::default_instance_ = NULL;

stReqCheckMission* stReqCheckMission::New() const {
  return new stReqCheckMission;
}

void stReqCheckMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCheckMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelID;
        break;
      }

      // optional uint32 levelID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCheckMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 levelID = 2;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCheckMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 levelID = 2;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCheckMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 levelID = 2;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCheckMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCheckMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCheckMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCheckMission::MergeFrom(const stReqCheckMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCheckMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCheckMission::CopyFrom(const stReqCheckMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCheckMission::IsInitialized() const {

  return true;
}

void stReqCheckMission::Swap(stReqCheckMission* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCheckMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCheckMission_descriptor_;
  metadata.reflection = stReqCheckMission_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCheckTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCheckTask_ProtoModID_descriptor_;
}
bool stReqCheckTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCheckTask_ProtoModID stReqCheckTask::ModID;
const stReqCheckTask_ProtoModID stReqCheckTask::ProtoModID_MIN;
const stReqCheckTask_ProtoModID stReqCheckTask::ProtoModID_MAX;
const int stReqCheckTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCheckTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCheckTask_ProtoFunID_descriptor_;
}
bool stReqCheckTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 140:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCheckTask_ProtoFunID stReqCheckTask::FunID;
const stReqCheckTask_ProtoFunID stReqCheckTask::ProtoFunID_MIN;
const stReqCheckTask_ProtoFunID stReqCheckTask::ProtoFunID_MAX;
const int stReqCheckTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCheckTask::kCharIDFieldNumber;
const int stReqCheckTask::kSquareTypeFieldNumber;
const int stReqCheckTask::kBattleTypeFieldNumber;
#endif  // !_MSC_VER

stReqCheckTask::stReqCheckTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCheckTask::InitAsDefaultInstance() {
}

stReqCheckTask::stReqCheckTask(const stReqCheckTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCheckTask::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  squaretype_ = 0u;
  battletype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCheckTask::~stReqCheckTask() {
  SharedDtor();
}

void stReqCheckTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCheckTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCheckTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCheckTask_descriptor_;
}

const stReqCheckTask& stReqCheckTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqCheckTask* stReqCheckTask::default_instance_ = NULL;

stReqCheckTask* stReqCheckTask::New() const {
  return new stReqCheckTask;
}

void stReqCheckTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    squaretype_ = 0u;
    battletype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCheckTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_squareType;
        break;
      }

      // optional uint32 squareType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_squareType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &squaretype_)));
          set_has_squaretype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battleType;
        break;
      }

      // optional uint32 battleType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battletype_)));
          set_has_battletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCheckTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 squareType = 2;
  if (has_squaretype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->squaretype(), output);
  }

  // optional uint32 battleType = 3;
  if (has_battletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battletype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCheckTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 squareType = 2;
  if (has_squaretype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->squaretype(), target);
  }

  // optional uint32 battleType = 3;
  if (has_battletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battletype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCheckTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 squareType = 2;
    if (has_squaretype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->squaretype());
    }

    // optional uint32 battleType = 3;
    if (has_battletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battletype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCheckTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCheckTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCheckTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCheckTask::MergeFrom(const stReqCheckTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_squaretype()) {
      set_squaretype(from.squaretype());
    }
    if (from.has_battletype()) {
      set_battletype(from.battletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCheckTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCheckTask::CopyFrom(const stReqCheckTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCheckTask::IsInitialized() const {

  return true;
}

void stReqCheckTask::Swap(stReqCheckTask* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(squaretype_, other->squaretype_);
    std::swap(battletype_, other->battletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCheckTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCheckTask_descriptor_;
  metadata.reflection = stReqCheckTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEnterTaskLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterTaskLv_ProtoModID_descriptor_;
}
bool stReqEnterTaskLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterTaskLv_ProtoModID stReqEnterTaskLv::ModID;
const stReqEnterTaskLv_ProtoModID stReqEnterTaskLv::ProtoModID_MIN;
const stReqEnterTaskLv_ProtoModID stReqEnterTaskLv::ProtoModID_MAX;
const int stReqEnterTaskLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEnterTaskLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterTaskLv_ProtoFunID_descriptor_;
}
bool stReqEnterTaskLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 141:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterTaskLv_ProtoFunID stReqEnterTaskLv::FunID;
const stReqEnterTaskLv_ProtoFunID stReqEnterTaskLv::ProtoFunID_MIN;
const stReqEnterTaskLv_ProtoFunID stReqEnterTaskLv::ProtoFunID_MAX;
const int stReqEnterTaskLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEnterTaskLv::kCharIDFieldNumber;
const int stReqEnterTaskLv::kLevelIDFieldNumber;
#endif  // !_MSC_VER

stReqEnterTaskLv::stReqEnterTaskLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEnterTaskLv::InitAsDefaultInstance() {
}

stReqEnterTaskLv::stReqEnterTaskLv(const stReqEnterTaskLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEnterTaskLv::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEnterTaskLv::~stReqEnterTaskLv() {
  SharedDtor();
}

void stReqEnterTaskLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEnterTaskLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEnterTaskLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterTaskLv_descriptor_;
}

const stReqEnterTaskLv& stReqEnterTaskLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqEnterTaskLv* stReqEnterTaskLv::default_instance_ = NULL;

stReqEnterTaskLv* stReqEnterTaskLv::New() const {
  return new stReqEnterTaskLv;
}

void stReqEnterTaskLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEnterTaskLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelID;
        break;
      }

      // optional uint32 levelID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEnterTaskLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 levelID = 2;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEnterTaskLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 levelID = 2;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEnterTaskLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 levelID = 2;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEnterTaskLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEnterTaskLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEnterTaskLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEnterTaskLv::MergeFrom(const stReqEnterTaskLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEnterTaskLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEnterTaskLv::CopyFrom(const stReqEnterTaskLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEnterTaskLv::IsInitialized() const {

  return true;
}

void stReqEnterTaskLv::Swap(stReqEnterTaskLv* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEnterTaskLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEnterTaskLv_descriptor_;
  metadata.reflection = stReqEnterTaskLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDisbandTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDisbandTeam_ProtoModID_descriptor_;
}
bool stReqDisbandTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDisbandTeam_ProtoModID stReqDisbandTeam::ModID;
const stReqDisbandTeam_ProtoModID stReqDisbandTeam::ProtoModID_MIN;
const stReqDisbandTeam_ProtoModID stReqDisbandTeam::ProtoModID_MAX;
const int stReqDisbandTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDisbandTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDisbandTeam_ProtoFunID_descriptor_;
}
bool stReqDisbandTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 142:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDisbandTeam_ProtoFunID stReqDisbandTeam::FunID;
const stReqDisbandTeam_ProtoFunID stReqDisbandTeam::ProtoFunID_MIN;
const stReqDisbandTeam_ProtoFunID stReqDisbandTeam::ProtoFunID_MAX;
const int stReqDisbandTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDisbandTeam::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqDisbandTeam::stReqDisbandTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDisbandTeam::InitAsDefaultInstance() {
}

stReqDisbandTeam::stReqDisbandTeam(const stReqDisbandTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDisbandTeam::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDisbandTeam::~stReqDisbandTeam() {
  SharedDtor();
}

void stReqDisbandTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDisbandTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDisbandTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDisbandTeam_descriptor_;
}

const stReqDisbandTeam& stReqDisbandTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqDisbandTeam* stReqDisbandTeam::default_instance_ = NULL;

stReqDisbandTeam* stReqDisbandTeam::New() const {
  return new stReqDisbandTeam;
}

void stReqDisbandTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDisbandTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDisbandTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDisbandTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDisbandTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDisbandTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDisbandTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDisbandTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDisbandTeam::MergeFrom(const stReqDisbandTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDisbandTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDisbandTeam::CopyFrom(const stReqDisbandTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDisbandTeam::IsInitialized() const {

  return true;
}

void stReqDisbandTeam::Swap(stReqDisbandTeam* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDisbandTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDisbandTeam_descriptor_;
  metadata.reflection = stReqDisbandTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawInviteReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawInviteReward_ProtoModID_descriptor_;
}
bool stReqDrawInviteReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawInviteReward_ProtoModID stReqDrawInviteReward::ModID;
const stReqDrawInviteReward_ProtoModID stReqDrawInviteReward::ProtoModID_MIN;
const stReqDrawInviteReward_ProtoModID stReqDrawInviteReward::ProtoModID_MAX;
const int stReqDrawInviteReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawInviteReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawInviteReward_ProtoFunID_descriptor_;
}
bool stReqDrawInviteReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 143:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawInviteReward_ProtoFunID stReqDrawInviteReward::FunID;
const stReqDrawInviteReward_ProtoFunID stReqDrawInviteReward::ProtoFunID_MIN;
const stReqDrawInviteReward_ProtoFunID stReqDrawInviteReward::ProtoFunID_MAX;
const int stReqDrawInviteReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawInviteReward::kCharIDFieldNumber;
const int stReqDrawInviteReward::kBoxIdFieldNumber;
const int stReqDrawInviteReward::kIdFieldNumber;
const int stReqDrawInviteReward::kAccountFieldNumber;
#endif  // !_MSC_VER

stReqDrawInviteReward::stReqDrawInviteReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawInviteReward::InitAsDefaultInstance() {
}

stReqDrawInviteReward::stReqDrawInviteReward(const stReqDrawInviteReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawInviteReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  boxid_ = 0u;
  id_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawInviteReward::~stReqDrawInviteReward() {
  SharedDtor();
}

void stReqDrawInviteReward::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stReqDrawInviteReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawInviteReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawInviteReward_descriptor_;
}

const stReqDrawInviteReward& stReqDrawInviteReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqDrawInviteReward* stReqDrawInviteReward::default_instance_ = NULL;

stReqDrawInviteReward* stReqDrawInviteReward::New() const {
  return new stReqDrawInviteReward;
}

void stReqDrawInviteReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    boxid_ = 0u;
    id_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawInviteReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxId;
        break;
      }

      // optional uint32 boxId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawInviteReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 boxId = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boxid(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawInviteReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 boxId = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boxid(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawInviteReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 boxId = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawInviteReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawInviteReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawInviteReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawInviteReward::MergeFrom(const stReqDrawInviteReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawInviteReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawInviteReward::CopyFrom(const stReqDrawInviteReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawInviteReward::IsInitialized() const {

  return true;
}

void stReqDrawInviteReward::Swap(stReqDrawInviteReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(boxid_, other->boxid_);
    std::swap(id_, other->id_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawInviteReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawInviteReward_descriptor_;
  metadata.reflection = stReqDrawInviteReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawInviteRewardCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawInviteRewardCb_ProtoModID_descriptor_;
}
bool stReqDrawInviteRewardCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawInviteRewardCb_ProtoModID stReqDrawInviteRewardCb::ModID;
const stReqDrawInviteRewardCb_ProtoModID stReqDrawInviteRewardCb::ProtoModID_MIN;
const stReqDrawInviteRewardCb_ProtoModID stReqDrawInviteRewardCb::ProtoModID_MAX;
const int stReqDrawInviteRewardCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawInviteRewardCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawInviteRewardCb_ProtoFunID_descriptor_;
}
bool stReqDrawInviteRewardCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 144:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawInviteRewardCb_ProtoFunID stReqDrawInviteRewardCb::FunID;
const stReqDrawInviteRewardCb_ProtoFunID stReqDrawInviteRewardCb::ProtoFunID_MIN;
const stReqDrawInviteRewardCb_ProtoFunID stReqDrawInviteRewardCb::ProtoFunID_MAX;
const int stReqDrawInviteRewardCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawInviteRewardCb::kCharIDFieldNumber;
const int stReqDrawInviteRewardCb::kIdFieldNumber;
const int stReqDrawInviteRewardCb::kResFieldNumber;
const int stReqDrawInviteRewardCb::kAccountFieldNumber;
#endif  // !_MSC_VER

stReqDrawInviteRewardCb::stReqDrawInviteRewardCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawInviteRewardCb::InitAsDefaultInstance() {
}

stReqDrawInviteRewardCb::stReqDrawInviteRewardCb(const stReqDrawInviteRewardCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawInviteRewardCb::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  id_ = 0u;
  res_ = false;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawInviteRewardCb::~stReqDrawInviteRewardCb() {
  SharedDtor();
}

void stReqDrawInviteRewardCb::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stReqDrawInviteRewardCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawInviteRewardCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawInviteRewardCb_descriptor_;
}

const stReqDrawInviteRewardCb& stReqDrawInviteRewardCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqDrawInviteRewardCb* stReqDrawInviteRewardCb::default_instance_ = NULL;

stReqDrawInviteRewardCb* stReqDrawInviteRewardCb::New() const {
  return new stReqDrawInviteRewardCb;
}

void stReqDrawInviteRewardCb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    id_ = 0u;
    res_ = false;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawInviteRewardCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_res;
        break;
      }

      // optional bool res = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_account;
        break;
      }

      // optional string account = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawInviteRewardCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional bool res = 3;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->res(), output);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawInviteRewardCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional bool res = 3;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->res(), target);
  }

  // optional string account = 4;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawInviteRewardCb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional bool res = 3;
    if (has_res()) {
      total_size += 1 + 1;
    }

    // optional string account = 4;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawInviteRewardCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawInviteRewardCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawInviteRewardCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawInviteRewardCb::MergeFrom(const stReqDrawInviteRewardCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawInviteRewardCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawInviteRewardCb::CopyFrom(const stReqDrawInviteRewardCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawInviteRewardCb::IsInitialized() const {

  return true;
}

void stReqDrawInviteRewardCb::Swap(stReqDrawInviteRewardCb* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(res_, other->res_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawInviteRewardCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawInviteRewardCb_descriptor_;
  metadata.reflection = stReqDrawInviteRewardCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDrawUseInviteReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawUseInviteReward_ProtoModID_descriptor_;
}
bool stReqDrawUseInviteReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawUseInviteReward_ProtoModID stReqDrawUseInviteReward::ModID;
const stReqDrawUseInviteReward_ProtoModID stReqDrawUseInviteReward::ProtoModID_MIN;
const stReqDrawUseInviteReward_ProtoModID stReqDrawUseInviteReward::ProtoModID_MAX;
const int stReqDrawUseInviteReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDrawUseInviteReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawUseInviteReward_ProtoFunID_descriptor_;
}
bool stReqDrawUseInviteReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 145:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDrawUseInviteReward_ProtoFunID stReqDrawUseInviteReward::FunID;
const stReqDrawUseInviteReward_ProtoFunID stReqDrawUseInviteReward::ProtoFunID_MIN;
const stReqDrawUseInviteReward_ProtoFunID stReqDrawUseInviteReward::ProtoFunID_MAX;
const int stReqDrawUseInviteReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDrawUseInviteReward::kCharIDFieldNumber;
const int stReqDrawUseInviteReward::kBoxIdFieldNumber;
#endif  // !_MSC_VER

stReqDrawUseInviteReward::stReqDrawUseInviteReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDrawUseInviteReward::InitAsDefaultInstance() {
}

stReqDrawUseInviteReward::stReqDrawUseInviteReward(const stReqDrawUseInviteReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDrawUseInviteReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  boxid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDrawUseInviteReward::~stReqDrawUseInviteReward() {
  SharedDtor();
}

void stReqDrawUseInviteReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDrawUseInviteReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDrawUseInviteReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDrawUseInviteReward_descriptor_;
}

const stReqDrawUseInviteReward& stReqDrawUseInviteReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqDrawUseInviteReward* stReqDrawUseInviteReward::default_instance_ = NULL;

stReqDrawUseInviteReward* stReqDrawUseInviteReward::New() const {
  return new stReqDrawUseInviteReward;
}

void stReqDrawUseInviteReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    boxid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDrawUseInviteReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxId;
        break;
      }

      // optional uint32 boxId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDrawUseInviteReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 boxId = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDrawUseInviteReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 boxId = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDrawUseInviteReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 boxId = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDrawUseInviteReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDrawUseInviteReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDrawUseInviteReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDrawUseInviteReward::MergeFrom(const stReqDrawUseInviteReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDrawUseInviteReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDrawUseInviteReward::CopyFrom(const stReqDrawUseInviteReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDrawUseInviteReward::IsInitialized() const {

  return true;
}

void stReqDrawUseInviteReward::Swap(stReqDrawUseInviteReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDrawUseInviteReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDrawUseInviteReward_descriptor_;
  metadata.reflection = stReqDrawUseInviteReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleInfo_ProtoModID_descriptor_;
}
bool stRoleInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRoleInfo_ProtoModID stRoleInfo::ModID;
const stRoleInfo_ProtoModID stRoleInfo::ProtoModID_MIN;
const stRoleInfo_ProtoModID stRoleInfo::ProtoModID_MAX;
const int stRoleInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleInfo_ProtoFunID_descriptor_;
}
bool stRoleInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 146:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRoleInfo_ProtoFunID stRoleInfo::FunID;
const stRoleInfo_ProtoFunID stRoleInfo::ProtoFunID_MIN;
const stRoleInfo_ProtoFunID stRoleInfo::ProtoFunID_MAX;
const int stRoleInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRoleInfo::kCharIDFieldNumber;
const int stRoleInfo::kDataSizeFieldNumber;
const int stRoleInfo::kDataFieldNumber;
const int stRoleInfo::kNormalServerIDFieldNumber;
#endif  // !_MSC_VER

stRoleInfo::stRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRoleInfo::InitAsDefaultInstance() {
}

stRoleInfo::stRoleInfo(const stRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  datasize_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normalserverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRoleInfo::~stRoleInfo() {
  SharedDtor();
}

void stRoleInfo::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleInfo_descriptor_;
}

const stRoleInfo& stRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRoleInfo* stRoleInfo::default_instance_ = NULL;

stRoleInfo* stRoleInfo::New() const {
  return new stRoleInfo;
}

void stRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    datasize_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    normalserverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dataSize;
        break;
      }

      // optional uint32 dataSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_normalServerID;
        break;
      }

      // optional uint32 normalServerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalserverid_)));
          set_has_normalserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 dataSize = 2;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->datasize(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional uint32 normalServerID = 4;
  if (has_normalserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->normalserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 dataSize = 2;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->datasize(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 normalServerID = 4;
  if (has_normalserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->normalserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 dataSize = 2;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datasize());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 normalServerID = 4;
    if (has_normalserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRoleInfo::MergeFrom(const stRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_normalserverid()) {
      set_normalserverid(from.normalserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRoleInfo::CopyFrom(const stRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRoleInfo::IsInitialized() const {

  return true;
}

void stRoleInfo::Swap(stRoleInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(datasize_, other->datasize_);
    std::swap(data_, other->data_);
    std::swap(normalserverid_, other->normalserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRoleInfo_descriptor_;
  metadata.reflection = stRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHeroLeagueEnterCopyMap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueEnterCopyMap_ProtoModID_descriptor_;
}
bool stHeroLeagueEnterCopyMap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueEnterCopyMap_ProtoModID stHeroLeagueEnterCopyMap::ModID;
const stHeroLeagueEnterCopyMap_ProtoModID stHeroLeagueEnterCopyMap::ProtoModID_MIN;
const stHeroLeagueEnterCopyMap_ProtoModID stHeroLeagueEnterCopyMap::ProtoModID_MAX;
const int stHeroLeagueEnterCopyMap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroLeagueEnterCopyMap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueEnterCopyMap_ProtoFunID_descriptor_;
}
bool stHeroLeagueEnterCopyMap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 147:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueEnterCopyMap_ProtoFunID stHeroLeagueEnterCopyMap::FunID;
const stHeroLeagueEnterCopyMap_ProtoFunID stHeroLeagueEnterCopyMap::ProtoFunID_MIN;
const stHeroLeagueEnterCopyMap_ProtoFunID stHeroLeagueEnterCopyMap::ProtoFunID_MAX;
const int stHeroLeagueEnterCopyMap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHeroLeagueEnterCopyMap::kMemberIDsFieldNumber;
#endif  // !_MSC_VER

stHeroLeagueEnterCopyMap::stHeroLeagueEnterCopyMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroLeagueEnterCopyMap::InitAsDefaultInstance() {
}

stHeroLeagueEnterCopyMap::stHeroLeagueEnterCopyMap(const stHeroLeagueEnterCopyMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroLeagueEnterCopyMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroLeagueEnterCopyMap::~stHeroLeagueEnterCopyMap() {
  SharedDtor();
}

void stHeroLeagueEnterCopyMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHeroLeagueEnterCopyMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroLeagueEnterCopyMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueEnterCopyMap_descriptor_;
}

const stHeroLeagueEnterCopyMap& stHeroLeagueEnterCopyMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stHeroLeagueEnterCopyMap* stHeroLeagueEnterCopyMap::default_instance_ = NULL;

stHeroLeagueEnterCopyMap* stHeroLeagueEnterCopyMap::New() const {
  return new stHeroLeagueEnterCopyMap;
}

void stHeroLeagueEnterCopyMap::Clear() {
  memberids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroLeagueEnterCopyMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 memberIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_memberids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_memberids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_memberIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroLeagueEnterCopyMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 memberIDs = 1;
  for (int i = 0; i < this->memberids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->memberids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroLeagueEnterCopyMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 memberIDs = 1;
  for (int i = 0; i < this->memberids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->memberids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroLeagueEnterCopyMap::ByteSize() const {
  int total_size = 0;

  // repeated uint32 memberIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->memberids(i));
    }
    total_size += 1 * this->memberids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroLeagueEnterCopyMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroLeagueEnterCopyMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroLeagueEnterCopyMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroLeagueEnterCopyMap::MergeFrom(const stHeroLeagueEnterCopyMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberids_.MergeFrom(from.memberids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroLeagueEnterCopyMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroLeagueEnterCopyMap::CopyFrom(const stHeroLeagueEnterCopyMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroLeagueEnterCopyMap::IsInitialized() const {

  return true;
}

void stHeroLeagueEnterCopyMap::Swap(stHeroLeagueEnterCopyMap* other) {
  if (other != this) {
    memberids_.Swap(&other->memberids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroLeagueEnterCopyMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroLeagueEnterCopyMap_descriptor_;
  metadata.reflection = stHeroLeagueEnterCopyMap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHeroLeaguePkWithRobot_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeaguePkWithRobot_ProtoModID_descriptor_;
}
bool stHeroLeaguePkWithRobot_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeaguePkWithRobot_ProtoModID stHeroLeaguePkWithRobot::ModID;
const stHeroLeaguePkWithRobot_ProtoModID stHeroLeaguePkWithRobot::ProtoModID_MIN;
const stHeroLeaguePkWithRobot_ProtoModID stHeroLeaguePkWithRobot::ProtoModID_MAX;
const int stHeroLeaguePkWithRobot::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroLeaguePkWithRobot_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeaguePkWithRobot_ProtoFunID_descriptor_;
}
bool stHeroLeaguePkWithRobot_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 148:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeaguePkWithRobot_ProtoFunID stHeroLeaguePkWithRobot::FunID;
const stHeroLeaguePkWithRobot_ProtoFunID stHeroLeaguePkWithRobot::ProtoFunID_MIN;
const stHeroLeaguePkWithRobot_ProtoFunID stHeroLeaguePkWithRobot::ProtoFunID_MAX;
const int stHeroLeaguePkWithRobot::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHeroLeaguePkWithRobot::kCharIDFieldNumber;
const int stHeroLeaguePkWithRobot::kRobotGroupFieldNumber;
#endif  // !_MSC_VER

stHeroLeaguePkWithRobot::stHeroLeaguePkWithRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroLeaguePkWithRobot::InitAsDefaultInstance() {
}

stHeroLeaguePkWithRobot::stHeroLeaguePkWithRobot(const stHeroLeaguePkWithRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroLeaguePkWithRobot::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  robotgroup_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroLeaguePkWithRobot::~stHeroLeaguePkWithRobot() {
  SharedDtor();
}

void stHeroLeaguePkWithRobot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHeroLeaguePkWithRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroLeaguePkWithRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeaguePkWithRobot_descriptor_;
}

const stHeroLeaguePkWithRobot& stHeroLeaguePkWithRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stHeroLeaguePkWithRobot* stHeroLeaguePkWithRobot::default_instance_ = NULL;

stHeroLeaguePkWithRobot* stHeroLeaguePkWithRobot::New() const {
  return new stHeroLeaguePkWithRobot;
}

void stHeroLeaguePkWithRobot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    robotgroup_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroLeaguePkWithRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_robotGroup;
        break;
      }

      // optional uint32 robotGroup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &robotgroup_)));
          set_has_robotgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroLeaguePkWithRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 robotGroup = 2;
  if (has_robotgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->robotgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroLeaguePkWithRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 robotGroup = 2;
  if (has_robotgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->robotgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroLeaguePkWithRobot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 robotGroup = 2;
    if (has_robotgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->robotgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroLeaguePkWithRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroLeaguePkWithRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroLeaguePkWithRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroLeaguePkWithRobot::MergeFrom(const stHeroLeaguePkWithRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_robotgroup()) {
      set_robotgroup(from.robotgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroLeaguePkWithRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroLeaguePkWithRobot::CopyFrom(const stHeroLeaguePkWithRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroLeaguePkWithRobot::IsInitialized() const {

  return true;
}

void stHeroLeaguePkWithRobot::Swap(stHeroLeaguePkWithRobot* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(robotgroup_, other->robotgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroLeaguePkWithRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroLeaguePkWithRobot_descriptor_;
  metadata.reflection = stHeroLeaguePkWithRobot_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqHeroLeagueCheck_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroLeagueCheck_eResult_descriptor_;
}
bool stReqHeroLeagueCheck_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroLeagueCheck_eResult stReqHeroLeagueCheck::eSuccess;
const stReqHeroLeagueCheck_eResult stReqHeroLeagueCheck::eRegister_Num_Lack;
const stReqHeroLeagueCheck_eResult stReqHeroLeagueCheck::eResult_MIN;
const stReqHeroLeagueCheck_eResult stReqHeroLeagueCheck::eResult_MAX;
const int stReqHeroLeagueCheck::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHeroLeagueCheck_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroLeagueCheck_ProtoModID_descriptor_;
}
bool stReqHeroLeagueCheck_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroLeagueCheck_ProtoModID stReqHeroLeagueCheck::ModID;
const stReqHeroLeagueCheck_ProtoModID stReqHeroLeagueCheck::ProtoModID_MIN;
const stReqHeroLeagueCheck_ProtoModID stReqHeroLeagueCheck::ProtoModID_MAX;
const int stReqHeroLeagueCheck::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqHeroLeagueCheck_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroLeagueCheck_ProtoFunID_descriptor_;
}
bool stReqHeroLeagueCheck_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 150:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqHeroLeagueCheck_ProtoFunID stReqHeroLeagueCheck::FunID;
const stReqHeroLeagueCheck_ProtoFunID stReqHeroLeagueCheck::ProtoFunID_MIN;
const stReqHeroLeagueCheck_ProtoFunID stReqHeroLeagueCheck::ProtoFunID_MAX;
const int stReqHeroLeagueCheck::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqHeroLeagueCheck::kResultFieldNumber;
const int stReqHeroLeagueCheck::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqHeroLeagueCheck::stReqHeroLeagueCheck()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqHeroLeagueCheck::InitAsDefaultInstance() {
}

stReqHeroLeagueCheck::stReqHeroLeagueCheck(const stReqHeroLeagueCheck& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqHeroLeagueCheck::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqHeroLeagueCheck::~stReqHeroLeagueCheck() {
  SharedDtor();
}

void stReqHeroLeagueCheck::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqHeroLeagueCheck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqHeroLeagueCheck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqHeroLeagueCheck_descriptor_;
}

const stReqHeroLeagueCheck& stReqHeroLeagueCheck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqHeroLeagueCheck* stReqHeroLeagueCheck::default_instance_ = NULL;

stReqHeroLeagueCheck* stReqHeroLeagueCheck::New() const {
  return new stReqHeroLeagueCheck;
}

void stReqHeroLeagueCheck::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqHeroLeagueCheck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.stReqHeroLeagueCheck.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::stReqHeroLeagueCheck_eResult_IsValid(value)) {
            set_result(static_cast< ::Global::stReqHeroLeagueCheck_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqHeroLeagueCheck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.stReqHeroLeagueCheck.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqHeroLeagueCheck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.stReqHeroLeagueCheck.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqHeroLeagueCheck::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.stReqHeroLeagueCheck.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqHeroLeagueCheck::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqHeroLeagueCheck* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqHeroLeagueCheck*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqHeroLeagueCheck::MergeFrom(const stReqHeroLeagueCheck& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqHeroLeagueCheck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqHeroLeagueCheck::CopyFrom(const stReqHeroLeagueCheck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqHeroLeagueCheck::IsInitialized() const {

  return true;
}

void stReqHeroLeagueCheck::Swap(stReqHeroLeagueCheck* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqHeroLeagueCheck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqHeroLeagueCheck_descriptor_;
  metadata.reflection = stReqHeroLeagueCheck_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueMatch_ProtoModID_descriptor_;
}
bool stHeroLeagueMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueMatch_ProtoModID stHeroLeagueMatch::ModID;
const stHeroLeagueMatch_ProtoModID stHeroLeagueMatch::ProtoModID_MIN;
const stHeroLeagueMatch_ProtoModID stHeroLeagueMatch::ProtoModID_MAX;
const int stHeroLeagueMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueMatch_ProtoFunID_descriptor_;
}
bool stHeroLeagueMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 151:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueMatch_ProtoFunID stHeroLeagueMatch::FunID;
const stHeroLeagueMatch_ProtoFunID stHeroLeagueMatch::ProtoFunID_MIN;
const stHeroLeagueMatch_ProtoFunID stHeroLeagueMatch::ProtoFunID_MAX;
const int stHeroLeagueMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHeroLeagueMatch::kCharIDFieldNumber;
#endif  // !_MSC_VER

stHeroLeagueMatch::stHeroLeagueMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroLeagueMatch::InitAsDefaultInstance() {
}

stHeroLeagueMatch::stHeroLeagueMatch(const stHeroLeagueMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroLeagueMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroLeagueMatch::~stHeroLeagueMatch() {
  SharedDtor();
}

void stHeroLeagueMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHeroLeagueMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroLeagueMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueMatch_descriptor_;
}

const stHeroLeagueMatch& stHeroLeagueMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stHeroLeagueMatch* stHeroLeagueMatch::default_instance_ = NULL;

stHeroLeagueMatch* stHeroLeagueMatch::New() const {
  return new stHeroLeagueMatch;
}

void stHeroLeagueMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroLeagueMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroLeagueMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroLeagueMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroLeagueMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroLeagueMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroLeagueMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroLeagueMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroLeagueMatch::MergeFrom(const stHeroLeagueMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroLeagueMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroLeagueMatch::CopyFrom(const stHeroLeagueMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroLeagueMatch::IsInitialized() const {

  return true;
}

void stHeroLeagueMatch::Swap(stHeroLeagueMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroLeagueMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroLeagueMatch_descriptor_;
  metadata.reflection = stHeroLeagueMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stPubRoleInfo::kCharIDFieldNumber;
const int stPubRoleInfo::kPubCharIDFieldNumber;
const int stPubRoleInfo::kAreaCodeFieldNumber;
const int stPubRoleInfo::kNameFieldNumber;
const int stPubRoleInfo::kLevelFieldNumber;
const int stPubRoleInfo::kVipLvFieldNumber;
const int stPubRoleInfo::kJobFieldNumber;
const int stPubRoleInfo::kSexFieldNumber;
const int stPubRoleInfo::kBattlePowerFieldNumber;
const int stPubRoleInfo::kPubServerIndexFieldNumber;
const int stPubRoleInfo::kScoreFieldNumber;
const int stPubRoleInfo::kWinOrLossFieldNumber;
const int stPubRoleInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stPubRoleInfo::stPubRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPubRoleInfo::InitAsDefaultInstance() {
}

stPubRoleInfo::stPubRoleInfo(const stPubRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPubRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  pubcharid_ = 0u;
  areacode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  viplv_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  pubserverindex_ = 0u;
  score_ = 0u;
  winorloss_ = false;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPubRoleInfo::~stPubRoleInfo() {
  SharedDtor();
}

void stPubRoleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stPubRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPubRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubRoleInfo_descriptor_;
}

const stPubRoleInfo& stPubRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stPubRoleInfo* stPubRoleInfo::default_instance_ = NULL;

stPubRoleInfo* stPubRoleInfo::New() const {
  return new stPubRoleInfo;
}

void stPubRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    pubcharid_ = 0u;
    areacode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    viplv_ = 0u;
    job_ = 0u;
    sex_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battlepower_ = 0u;
    pubserverindex_ = 0u;
    score_ = 0u;
    winorloss_ = false;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPubRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pubCharID;
        break;
      }

      // optional uint32 pubCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pubcharid_)));
          set_has_pubcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job;
        break;
      }

      // optional uint32 job = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pubServerIndex;
        break;
      }

      // optional uint32 pubServerIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubServerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pubserverindex_)));
          set_has_pubserverindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_score;
        break;
      }

      // optional uint32 score = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_winOrLoss;
        break;
      }

      // optional bool winOrLoss = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winOrLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &winorloss_)));
          set_has_winorloss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPubRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 pubCharID = 2;
  if (has_pubcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pubcharid(), output);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->areacode(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 vipLv = 6;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplv(), output);
  }

  // optional uint32 job = 7;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->job(), output);
  }

  // optional uint32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sex(), output);
  }

  // optional uint32 battlePower = 9;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->battlepower(), output);
  }

  // optional uint32 pubServerIndex = 10;
  if (has_pubserverindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pubserverindex(), output);
  }

  // optional uint32 score = 11;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->score(), output);
  }

  // optional bool winOrLoss = 12;
  if (has_winorloss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->winorloss(), output);
  }

  // optional uint32 photoID = 13;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPubRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 pubCharID = 2;
  if (has_pubcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pubcharid(), target);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->areacode(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 vipLv = 6;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplv(), target);
  }

  // optional uint32 job = 7;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->job(), target);
  }

  // optional uint32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sex(), target);
  }

  // optional uint32 battlePower = 9;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->battlepower(), target);
  }

  // optional uint32 pubServerIndex = 10;
  if (has_pubserverindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pubserverindex(), target);
  }

  // optional uint32 score = 11;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->score(), target);
  }

  // optional bool winOrLoss = 12;
  if (has_winorloss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->winorloss(), target);
  }

  // optional uint32 photoID = 13;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPubRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 pubCharID = 2;
    if (has_pubcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pubcharid());
    }

    // optional uint32 areaCode = 3;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vipLv = 6;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 job = 7;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 battlePower = 9;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 pubServerIndex = 10;
    if (has_pubserverindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pubserverindex());
    }

    // optional uint32 score = 11;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional bool winOrLoss = 12;
    if (has_winorloss()) {
      total_size += 1 + 1;
    }

    // optional uint32 photoID = 13;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPubRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPubRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPubRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPubRoleInfo::MergeFrom(const stPubRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_pubcharid()) {
      set_pubcharid(from.pubcharid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_pubserverindex()) {
      set_pubserverindex(from.pubserverindex());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_winorloss()) {
      set_winorloss(from.winorloss());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPubRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPubRoleInfo::CopyFrom(const stPubRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPubRoleInfo::IsInitialized() const {

  return true;
}

void stPubRoleInfo::Swap(stPubRoleInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(pubcharid_, other->pubcharid_);
    std::swap(areacode_, other->areacode_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(pubserverindex_, other->pubserverindex_);
    std::swap(score_, other->score_);
    std::swap(winorloss_, other->winorloss_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPubRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPubRoleInfo_descriptor_;
  metadata.reflection = stPubRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHeroLeagueResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueResult_ProtoModID_descriptor_;
}
bool stHeroLeagueResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueResult_ProtoModID stHeroLeagueResult::ModID;
const stHeroLeagueResult_ProtoModID stHeroLeagueResult::ProtoModID_MIN;
const stHeroLeagueResult_ProtoModID stHeroLeagueResult::ProtoModID_MAX;
const int stHeroLeagueResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroLeagueResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueResult_ProtoFunID_descriptor_;
}
bool stHeroLeagueResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 152:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueResult_ProtoFunID stHeroLeagueResult::FunID;
const stHeroLeagueResult_ProtoFunID stHeroLeagueResult::ProtoFunID_MIN;
const stHeroLeagueResult_ProtoFunID stHeroLeagueResult::ProtoFunID_MAX;
const int stHeroLeagueResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHeroLeagueResult::kUser1FieldNumber;
const int stHeroLeagueResult::kUser2FieldNumber;
#endif  // !_MSC_VER

stHeroLeagueResult::stHeroLeagueResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroLeagueResult::InitAsDefaultInstance() {
  user1_ = const_cast< ::Global::stPubRoleInfo*>(&::Global::stPubRoleInfo::default_instance());
  user2_ = const_cast< ::Global::stPubRoleInfo*>(&::Global::stPubRoleInfo::default_instance());
}

stHeroLeagueResult::stHeroLeagueResult(const stHeroLeagueResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroLeagueResult::SharedCtor() {
  _cached_size_ = 0;
  user1_ = NULL;
  user2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroLeagueResult::~stHeroLeagueResult() {
  SharedDtor();
}

void stHeroLeagueResult::SharedDtor() {
  if (this != default_instance_) {
    delete user1_;
    delete user2_;
  }
}

void stHeroLeagueResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroLeagueResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueResult_descriptor_;
}

const stHeroLeagueResult& stHeroLeagueResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stHeroLeagueResult* stHeroLeagueResult::default_instance_ = NULL;

stHeroLeagueResult* stHeroLeagueResult::New() const {
  return new stHeroLeagueResult;
}

void stHeroLeagueResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user1()) {
      if (user1_ != NULL) user1_->::Global::stPubRoleInfo::Clear();
    }
    if (has_user2()) {
      if (user2_ != NULL) user2_->::Global::stPubRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroLeagueResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.stPubRoleInfo user1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user2;
        break;
      }

      // optional .Global.stPubRoleInfo user2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroLeagueResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.stPubRoleInfo user1 = 1;
  if (has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user1(), output);
  }

  // optional .Global.stPubRoleInfo user2 = 2;
  if (has_user2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroLeagueResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.stPubRoleInfo user1 = 1;
  if (has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user1(), target);
  }

  // optional .Global.stPubRoleInfo user2 = 2;
  if (has_user2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroLeagueResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.stPubRoleInfo user1 = 1;
    if (has_user1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user1());
    }

    // optional .Global.stPubRoleInfo user2 = 2;
    if (has_user2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroLeagueResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroLeagueResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroLeagueResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroLeagueResult::MergeFrom(const stHeroLeagueResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user1()) {
      mutable_user1()->::Global::stPubRoleInfo::MergeFrom(from.user1());
    }
    if (from.has_user2()) {
      mutable_user2()->::Global::stPubRoleInfo::MergeFrom(from.user2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroLeagueResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroLeagueResult::CopyFrom(const stHeroLeagueResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroLeagueResult::IsInitialized() const {

  return true;
}

void stHeroLeagueResult::Swap(stHeroLeagueResult* other) {
  if (other != this) {
    std::swap(user1_, other->user1_);
    std::swap(user2_, other->user2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroLeagueResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroLeagueResult_descriptor_;
  metadata.reflection = stHeroLeagueResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynRoleList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleList_ProtoModID_descriptor_;
}
bool stSynRoleList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRoleList_ProtoModID stSynRoleList::ModID;
const stSynRoleList_ProtoModID stSynRoleList::ProtoModID_MIN;
const stSynRoleList_ProtoModID stSynRoleList::ProtoModID_MAX;
const int stSynRoleList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynRoleList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleList_ProtoFunID_descriptor_;
}
bool stSynRoleList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 153:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRoleList_ProtoFunID stSynRoleList::FunID;
const stSynRoleList_ProtoFunID stSynRoleList::ProtoFunID_MIN;
const stSynRoleList_ProtoFunID stSynRoleList::ProtoFunID_MAX;
const int stSynRoleList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynRoleList::kTagFieldNumber;
#endif  // !_MSC_VER

stSynRoleList::stSynRoleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRoleList::InitAsDefaultInstance() {
}

stSynRoleList::stSynRoleList(const stSynRoleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRoleList::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRoleList::~stSynRoleList() {
  SharedDtor();
}

void stSynRoleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRoleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRoleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleList_descriptor_;
}

const stSynRoleList& stSynRoleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynRoleList* stSynRoleList::default_instance_ = NULL;

stSynRoleList* stSynRoleList::New() const {
  return new stSynRoleList;
}

void stSynRoleList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRoleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRoleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRoleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRoleList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRoleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRoleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRoleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRoleList::MergeFrom(const stSynRoleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRoleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRoleList::CopyFrom(const stSynRoleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRoleList::IsInitialized() const {

  return true;
}

void stSynRoleList::Swap(stSynRoleList* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRoleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRoleList_descriptor_;
  metadata.reflection = stSynRoleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stTeam::kUser1FieldNumber;
const int stTeam::kUser2FieldNumber;
#endif  // !_MSC_VER

stTeam::stTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTeam::InitAsDefaultInstance() {
  user1_ = const_cast< ::Global::stPubRoleInfo*>(&::Global::stPubRoleInfo::default_instance());
  user2_ = const_cast< ::Global::stPubRoleInfo*>(&::Global::stPubRoleInfo::default_instance());
}

stTeam::stTeam(const stTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTeam::SharedCtor() {
  _cached_size_ = 0;
  user1_ = NULL;
  user2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTeam::~stTeam() {
  SharedDtor();
}

void stTeam::SharedDtor() {
  if (this != default_instance_) {
    delete user1_;
    delete user2_;
  }
}

void stTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeam_descriptor_;
}

const stTeam& stTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stTeam* stTeam::default_instance_ = NULL;

stTeam* stTeam::New() const {
  return new stTeam;
}

void stTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user1()) {
      if (user1_ != NULL) user1_->::Global::stPubRoleInfo::Clear();
    }
    if (has_user2()) {
      if (user2_ != NULL) user2_->::Global::stPubRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.stPubRoleInfo user1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user2;
        break;
      }

      // optional .Global.stPubRoleInfo user2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.stPubRoleInfo user1 = 1;
  if (has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user1(), output);
  }

  // optional .Global.stPubRoleInfo user2 = 2;
  if (has_user2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.stPubRoleInfo user1 = 1;
  if (has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user1(), target);
  }

  // optional .Global.stPubRoleInfo user2 = 2;
  if (has_user2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.stPubRoleInfo user1 = 1;
    if (has_user1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user1());
    }

    // optional .Global.stPubRoleInfo user2 = 2;
    if (has_user2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTeam::MergeFrom(const stTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user1()) {
      mutable_user1()->::Global::stPubRoleInfo::MergeFrom(from.user1());
    }
    if (from.has_user2()) {
      mutable_user2()->::Global::stPubRoleInfo::MergeFrom(from.user2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTeam::CopyFrom(const stTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTeam::IsInitialized() const {

  return true;
}

void stTeam::Swap(stTeam* other) {
  if (other != this) {
    std::swap(user1_, other->user1_);
    std::swap(user2_, other->user2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTeam_descriptor_;
  metadata.reflection = stTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynRoleListResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleListResult_ProtoModID_descriptor_;
}
bool stSynRoleListResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRoleListResult_ProtoModID stSynRoleListResult::ModID;
const stSynRoleListResult_ProtoModID stSynRoleListResult::ProtoModID_MIN;
const stSynRoleListResult_ProtoModID stSynRoleListResult::ProtoModID_MAX;
const int stSynRoleListResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynRoleListResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleListResult_ProtoFunID_descriptor_;
}
bool stSynRoleListResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 154:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynRoleListResult_ProtoFunID stSynRoleListResult::FunID;
const stSynRoleListResult_ProtoFunID stSynRoleListResult::ProtoFunID_MIN;
const stSynRoleListResult_ProtoFunID stSynRoleListResult::ProtoFunID_MAX;
const int stSynRoleListResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynRoleListResult::kTeamFieldNumber;
const int stSynRoleListResult::kCharIDSFieldNumber;
const int stSynRoleListResult::kIsFinalFieldNumber;
#endif  // !_MSC_VER

stSynRoleListResult::stSynRoleListResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRoleListResult::InitAsDefaultInstance() {
}

stSynRoleListResult::stSynRoleListResult(const stSynRoleListResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRoleListResult::SharedCtor() {
  _cached_size_ = 0;
  isfinal_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRoleListResult::~stSynRoleListResult() {
  SharedDtor();
}

void stSynRoleListResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRoleListResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRoleListResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleListResult_descriptor_;
}

const stSynRoleListResult& stSynRoleListResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynRoleListResult* stSynRoleListResult::default_instance_ = NULL;

stSynRoleListResult* stSynRoleListResult::New() const {
  return new stSynRoleListResult;
}

void stSynRoleListResult::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    isfinal_ = false;
  }
  team_.Clear();
  charids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRoleListResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stTeam team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_team;
        if (input->ExpectTag(18)) goto parse_charIDS;
        break;
      }

      // repeated .Global.stPubRoleInfo charIDS = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charIDS:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charIDS;
        if (input->ExpectTag(24)) goto parse_isFinal;
        break;
      }

      // optional bool isFinal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinal_)));
          set_has_isfinal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRoleListResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stTeam team = 1;
  for (int i = 0; i < this->team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(i), output);
  }

  // repeated .Global.stPubRoleInfo charIDS = 2;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->charids(i), output);
  }

  // optional bool isFinal = 3;
  if (has_isfinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfinal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRoleListResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stTeam team = 1;
  for (int i = 0; i < this->team_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(i), target);
  }

  // repeated .Global.stPubRoleInfo charIDS = 2;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->charids(i), target);
  }

  // optional bool isFinal = 3;
  if (has_isfinal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfinal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRoleListResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool isFinal = 3;
    if (has_isfinal()) {
      total_size += 1 + 1;
    }

  }
  // repeated .Global.stTeam team = 1;
  total_size += 1 * this->team_size();
  for (int i = 0; i < this->team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team(i));
  }

  // repeated .Global.stPubRoleInfo charIDS = 2;
  total_size += 1 * this->charids_size();
  for (int i = 0; i < this->charids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRoleListResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRoleListResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRoleListResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRoleListResult::MergeFrom(const stSynRoleListResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_.MergeFrom(from.team_);
  charids_.MergeFrom(from.charids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_isfinal()) {
      set_isfinal(from.isfinal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRoleListResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRoleListResult::CopyFrom(const stSynRoleListResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRoleListResult::IsInitialized() const {

  return true;
}

void stSynRoleListResult::Swap(stSynRoleListResult* other) {
  if (other != this) {
    team_.Swap(&other->team_);
    charids_.Swap(&other->charids_);
    std::swap(isfinal_, other->isfinal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRoleListResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRoleListResult_descriptor_;
  metadata.reflection = stSynRoleListResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynChampionInfo::kCharIDFieldNumber;
const int stSynChampionInfo::kNameFieldNumber;
const int stSynChampionInfo::kAreaCodeFieldNumber;
const int stSynChampionInfo::kLevelFieldNumber;
const int stSynChampionInfo::kJobFieldNumber;
const int stSynChampionInfo::kSexFieldNumber;
const int stSynChampionInfo::kLeaderFieldNumber;
const int stSynChampionInfo::kBattlePowerFieldNumber;
const int stSynChampionInfo::kPosFieldNumber;
const int stSynChampionInfo::kHeadIDFieldNumber;
const int stSynChampionInfo::kBodyIDFieldNumber;
const int stSynChampionInfo::kWeaponIDFieldNumber;
const int stSynChampionInfo::kCloackIDFieldNumber;
const int stSynChampionInfo::kWingIDFieldNumber;
const int stSynChampionInfo::kShoeIDFieldNumber;
const int stSynChampionInfo::kFashionHairFieldNumber;
const int stSynChampionInfo::kFashionFaceFieldNumber;
const int stSynChampionInfo::kFashionBodyFieldNumber;
const int stSynChampionInfo::kFashionWeaponFieldNumber;
const int stSynChampionInfo::kFashionShoeFieldNumber;
const int stSynChampionInfo::kFashionDecorationFieldNumber;
const int stSynChampionInfo::kEffectIDFieldNumber;
const int stSynChampionInfo::kWingBreakLvFieldNumber;
const int stSynChampionInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynChampionInfo::stSynChampionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynChampionInfo::InitAsDefaultInstance() {
}

stSynChampionInfo::stSynChampionInfo(const stSynChampionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynChampionInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areacode_ = 0u;
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  leader_ = false;
  battlepower_ = 0u;
  pos_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynChampionInfo::~stSynChampionInfo() {
  SharedDtor();
}

void stSynChampionInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynChampionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynChampionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynChampionInfo_descriptor_;
}

const stSynChampionInfo& stSynChampionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynChampionInfo* stSynChampionInfo::default_instance_ = NULL;

stSynChampionInfo* stSynChampionInfo::New() const {
  return new stSynChampionInfo;
}

void stSynChampionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    areacode_ = 0u;
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    leader_ = false;
    battlepower_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pos_ = 0u;
    headid_ = 0u;
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionface_ = 0u;
    fashionbody_ = 0u;
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynChampionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leader;
        break;
      }

      // optional bool leader = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynChampionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->areacode(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional bool leader = 7;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->leader(), output);
  }

  // optional uint32 battlePower = 8;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->battlepower(), output);
  }

  // optional uint32 pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pos(), output);
  }

  // optional uint32 headID = 10;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->headid(), output);
  }

  // optional uint32 bodyID = 11;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->bodyid(), output);
  }

  // optional uint32 weaponID = 12;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->weaponid(), output);
  }

  // optional uint32 cloackID = 13;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cloackid(), output);
  }

  // optional uint32 wingID = 14;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->wingid(), output);
  }

  // optional uint32 shoeID = 15;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 16;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 17;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 18;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 19;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 20;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 21;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 22;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 23;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->wingbreaklv(), output);
  }

  // optional uint32 photoID = 24;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynChampionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->areacode(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional bool leader = 7;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->leader(), target);
  }

  // optional uint32 battlePower = 8;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->battlepower(), target);
  }

  // optional uint32 pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pos(), target);
  }

  // optional uint32 headID = 10;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->headid(), target);
  }

  // optional uint32 bodyID = 11;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->bodyid(), target);
  }

  // optional uint32 weaponID = 12;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->weaponid(), target);
  }

  // optional uint32 cloackID = 13;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cloackid(), target);
  }

  // optional uint32 wingID = 14;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->wingid(), target);
  }

  // optional uint32 shoeID = 15;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 16;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 17;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 18;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 19;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 20;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 21;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 22;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 23;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->wingbreaklv(), target);
  }

  // optional uint32 photoID = 24;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynChampionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 areaCode = 3;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional bool leader = 7;
    if (has_leader()) {
      total_size += 1 + 1;
    }

    // optional uint32 battlePower = 8;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 headID = 10;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 bodyID = 11;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 12;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 13;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 14;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 15;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 16;
    if (has_fashionhair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionFace = 17;
    if (has_fashionface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

    // optional uint32 fashionBody = 18;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

    // optional uint32 fashionWeapon = 19;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 20;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 21;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 22;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 23;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 photoID = 24;
    if (has_photoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynChampionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynChampionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynChampionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynChampionInfo::MergeFrom(const stSynChampionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynChampionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynChampionInfo::CopyFrom(const stSynChampionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynChampionInfo::IsInitialized() const {

  return true;
}

void stSynChampionInfo::Swap(stSynChampionInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(areacode_, other->areacode_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(leader_, other->leader_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(pos_, other->pos_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynChampionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynChampionInfo_descriptor_;
  metadata.reflection = stSynChampionInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSynChampionInfo_ProtoModID_descriptor_;
}
bool stReqSynChampionInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSynChampionInfo_ProtoModID stReqSynChampionInfo::ModID;
const stReqSynChampionInfo_ProtoModID stReqSynChampionInfo::ProtoModID_MIN;
const stReqSynChampionInfo_ProtoModID stReqSynChampionInfo::ProtoModID_MAX;
const int stReqSynChampionInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSynChampionInfo_ProtoFunID_descriptor_;
}
bool stReqSynChampionInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 155:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSynChampionInfo_ProtoFunID stReqSynChampionInfo::FunID;
const stReqSynChampionInfo_ProtoFunID stReqSynChampionInfo::ProtoFunID_MIN;
const stReqSynChampionInfo_ProtoFunID stReqSynChampionInfo::ProtoFunID_MAX;
const int stReqSynChampionInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSynChampionInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

stReqSynChampionInfo::stReqSynChampionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSynChampionInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::Global::stSynChampionInfo*>(&::Global::stSynChampionInfo::default_instance());
}

stReqSynChampionInfo::stReqSynChampionInfo(const stReqSynChampionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSynChampionInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSynChampionInfo::~stReqSynChampionInfo() {
  SharedDtor();
}

void stReqSynChampionInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void stReqSynChampionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSynChampionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSynChampionInfo_descriptor_;
}

const stReqSynChampionInfo& stReqSynChampionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqSynChampionInfo* stReqSynChampionInfo::default_instance_ = NULL;

stReqSynChampionInfo* stReqSynChampionInfo::New() const {
  return new stReqSynChampionInfo;
}

void stReqSynChampionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::Global::stSynChampionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSynChampionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.stSynChampionInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSynChampionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.stSynChampionInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSynChampionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.stSynChampionInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSynChampionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.stSynChampionInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSynChampionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSynChampionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSynChampionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSynChampionInfo::MergeFrom(const stReqSynChampionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::Global::stSynChampionInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSynChampionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSynChampionInfo::CopyFrom(const stReqSynChampionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSynChampionInfo::IsInitialized() const {

  return true;
}

void stReqSynChampionInfo::Swap(stReqSynChampionInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSynChampionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSynChampionInfo_descriptor_;
  metadata.reflection = stReqSynChampionInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqWorskip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWorskip_ProtoModID_descriptor_;
}
bool stReqWorskip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqWorskip_ProtoModID stReqWorskip::ModID;
const stReqWorskip_ProtoModID stReqWorskip::ProtoModID_MIN;
const stReqWorskip_ProtoModID stReqWorskip::ProtoModID_MAX;
const int stReqWorskip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqWorskip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWorskip_ProtoFunID_descriptor_;
}
bool stReqWorskip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 156:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqWorskip_ProtoFunID stReqWorskip::FunID;
const stReqWorskip_ProtoFunID stReqWorskip::ProtoFunID_MIN;
const stReqWorskip_ProtoFunID stReqWorskip::ProtoFunID_MAX;
const int stReqWorskip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqWorskip::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqWorskip::stReqWorskip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqWorskip::InitAsDefaultInstance() {
}

stReqWorskip::stReqWorskip(const stReqWorskip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqWorskip::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqWorskip::~stReqWorskip() {
  SharedDtor();
}

void stReqWorskip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqWorskip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqWorskip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqWorskip_descriptor_;
}

const stReqWorskip& stReqWorskip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqWorskip* stReqWorskip::default_instance_ = NULL;

stReqWorskip* stReqWorskip::New() const {
  return new stReqWorskip;
}

void stReqWorskip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqWorskip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqWorskip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqWorskip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqWorskip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqWorskip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqWorskip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqWorskip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqWorskip::MergeFrom(const stReqWorskip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqWorskip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqWorskip::CopyFrom(const stReqWorskip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqWorskip::IsInitialized() const {

  return true;
}

void stReqWorskip::Swap(stReqWorskip* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqWorskip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqWorskip_descriptor_;
  metadata.reflection = stReqWorskip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stWorskipResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorskipResult_eResult_descriptor_;
}
bool stWorskipResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWorskipResult_eResult stWorskipResult::eInner_Error;
const stWorskipResult_eResult stWorskipResult::eNoBody;
const stWorskipResult_eResult stWorskipResult::eResult_MIN;
const stWorskipResult_eResult stWorskipResult::eResult_MAX;
const int stWorskipResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorskipResult_ProtoModID_descriptor_;
}
bool stWorskipResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWorskipResult_ProtoModID stWorskipResult::ModID;
const stWorskipResult_ProtoModID stWorskipResult::ProtoModID_MIN;
const stWorskipResult_ProtoModID stWorskipResult::ProtoModID_MAX;
const int stWorskipResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorskipResult_ProtoFunID_descriptor_;
}
bool stWorskipResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 157:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWorskipResult_ProtoFunID stWorskipResult::FunID;
const stWorskipResult_ProtoFunID stWorskipResult::ProtoFunID_MIN;
const stWorskipResult_ProtoFunID stWorskipResult::ProtoFunID_MAX;
const int stWorskipResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stWorskipResult::kResultFieldNumber;
const int stWorskipResult::kCharIDFieldNumber;
const int stWorskipResult::kIsSameAreaCodeFieldNumber;
#endif  // !_MSC_VER

stWorskipResult::stWorskipResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWorskipResult::InitAsDefaultInstance() {
}

stWorskipResult::stWorskipResult(const stWorskipResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWorskipResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  charid_ = 0u;
  issameareacode_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWorskipResult::~stWorskipResult() {
  SharedDtor();
}

void stWorskipResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stWorskipResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWorskipResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWorskipResult_descriptor_;
}

const stWorskipResult& stWorskipResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stWorskipResult* stWorskipResult::default_instance_ = NULL;

stWorskipResult* stWorskipResult::New() const {
  return new stWorskipResult;
}

void stWorskipResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    charid_ = 0u;
    issameareacode_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWorskipResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.stWorskipResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::stWorskipResult_eResult_IsValid(value)) {
            set_result(static_cast< ::Global::stWorskipResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isSameAreaCode;
        break;
      }

      // optional bool isSameAreaCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSameAreaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issameareacode_)));
          set_has_issameareacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stWorskipResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.stWorskipResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional bool isSameAreaCode = 3;
  if (has_issameareacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->issameareacode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWorskipResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.stWorskipResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional bool isSameAreaCode = 3;
  if (has_issameareacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->issameareacode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWorskipResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.stWorskipResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool isSameAreaCode = 3;
    if (has_issameareacode()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWorskipResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWorskipResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWorskipResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWorskipResult::MergeFrom(const stWorskipResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_issameareacode()) {
      set_issameareacode(from.issameareacode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWorskipResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWorskipResult::CopyFrom(const stWorskipResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWorskipResult::IsInitialized() const {

  return true;
}

void stWorskipResult::Swap(stWorskipResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(issameareacode_, other->issameareacode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWorskipResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWorskipResult_descriptor_;
  metadata.reflection = stWorskipResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRedPoint_ProtoModID_descriptor_;
}
bool stReqRedPoint_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRedPoint_ProtoModID stReqRedPoint::ModID;
const stReqRedPoint_ProtoModID stReqRedPoint::ProtoModID_MIN;
const stReqRedPoint_ProtoModID stReqRedPoint::ProtoModID_MAX;
const int stReqRedPoint::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRedPoint_ProtoFunID_descriptor_;
}
bool stReqRedPoint_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 158:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRedPoint_ProtoFunID stReqRedPoint::FunID;
const stReqRedPoint_ProtoFunID stReqRedPoint::ProtoFunID_MIN;
const stReqRedPoint_ProtoFunID stReqRedPoint::ProtoFunID_MAX;
const int stReqRedPoint::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRedPoint::kCharIDFieldNumber;
const int stReqRedPoint::kPubCharIDFieldNumber;
#endif  // !_MSC_VER

stReqRedPoint::stReqRedPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRedPoint::InitAsDefaultInstance() {
}

stReqRedPoint::stReqRedPoint(const stReqRedPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRedPoint::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  pubcharid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRedPoint::~stReqRedPoint() {
  SharedDtor();
}

void stReqRedPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRedPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRedPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRedPoint_descriptor_;
}

const stReqRedPoint& stReqRedPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqRedPoint* stReqRedPoint::default_instance_ = NULL;

stReqRedPoint* stReqRedPoint::New() const {
  return new stReqRedPoint;
}

void stReqRedPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    pubcharid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRedPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pubCharID;
        break;
      }

      // optional uint32 pubCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pubcharid_)));
          set_has_pubcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRedPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 pubCharID = 2;
  if (has_pubcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pubcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRedPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 pubCharID = 2;
  if (has_pubcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pubcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRedPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 pubCharID = 2;
    if (has_pubcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pubcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRedPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRedPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRedPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRedPoint::MergeFrom(const stReqRedPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_pubcharid()) {
      set_pubcharid(from.pubcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRedPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRedPoint::CopyFrom(const stReqRedPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRedPoint::IsInitialized() const {

  return true;
}

void stReqRedPoint::Swap(stReqRedPoint* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(pubcharid_, other->pubcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRedPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRedPoint_descriptor_;
  metadata.reflection = stReqRedPoint_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRedPointResult_ProtoModID_descriptor_;
}
bool stRedPointResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRedPointResult_ProtoModID stRedPointResult::ModID;
const stRedPointResult_ProtoModID stRedPointResult::ProtoModID_MIN;
const stRedPointResult_ProtoModID stRedPointResult::ProtoModID_MAX;
const int stRedPointResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRedPointResult_ProtoFunID_descriptor_;
}
bool stRedPointResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 159:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRedPointResult_ProtoFunID stRedPointResult::FunID;
const stRedPointResult_ProtoFunID stRedPointResult::ProtoFunID_MIN;
const stRedPointResult_ProtoFunID stRedPointResult::ProtoFunID_MAX;
const int stRedPointResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRedPointResult::kIsQualifiedFieldNumber;
const int stRedPointResult::kCanWorshipFieldNumber;
const int stRedPointResult::kCharIDFieldNumber;
#endif  // !_MSC_VER

stRedPointResult::stRedPointResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRedPointResult::InitAsDefaultInstance() {
}

stRedPointResult::stRedPointResult(const stRedPointResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRedPointResult::SharedCtor() {
  _cached_size_ = 0;
  isqualified_ = false;
  canworship_ = false;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRedPointResult::~stRedPointResult() {
  SharedDtor();
}

void stRedPointResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRedPointResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRedPointResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRedPointResult_descriptor_;
}

const stRedPointResult& stRedPointResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRedPointResult* stRedPointResult::default_instance_ = NULL;

stRedPointResult* stRedPointResult::New() const {
  return new stRedPointResult;
}

void stRedPointResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isqualified_ = false;
    canworship_ = false;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRedPointResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isQualified = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isqualified_)));
          set_has_isqualified();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_canWorship;
        break;
      }

      // optional bool canWorship = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canWorship:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canworship_)));
          set_has_canworship();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRedPointResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isQualified = 1;
  if (has_isqualified()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isqualified(), output);
  }

  // optional bool canWorship = 2;
  if (has_canworship()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->canworship(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRedPointResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isQualified = 1;
  if (has_isqualified()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isqualified(), target);
  }

  // optional bool canWorship = 2;
  if (has_canworship()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->canworship(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRedPointResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isQualified = 1;
    if (has_isqualified()) {
      total_size += 1 + 1;
    }

    // optional bool canWorship = 2;
    if (has_canworship()) {
      total_size += 1 + 1;
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRedPointResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRedPointResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRedPointResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRedPointResult::MergeFrom(const stRedPointResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isqualified()) {
      set_isqualified(from.isqualified());
    }
    if (from.has_canworship()) {
      set_canworship(from.canworship());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRedPointResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRedPointResult::CopyFrom(const stRedPointResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRedPointResult::IsInitialized() const {

  return true;
}

void stRedPointResult::Swap(stRedPointResult* other) {
  if (other != this) {
    std::swap(isqualified_, other->isqualified_);
    std::swap(canworship_, other->canworship_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRedPointResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRedPointResult_descriptor_;
  metadata.reflection = stRedPointResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInterceptResultToGlobal_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInterceptResultToGlobal_ProtoModID_descriptor_;
}
bool stInterceptResultToGlobal_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInterceptResultToGlobal_ProtoModID stInterceptResultToGlobal::ModID;
const stInterceptResultToGlobal_ProtoModID stInterceptResultToGlobal::ProtoModID_MIN;
const stInterceptResultToGlobal_ProtoModID stInterceptResultToGlobal::ProtoModID_MAX;
const int stInterceptResultToGlobal::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInterceptResultToGlobal_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInterceptResultToGlobal_ProtoFunID_descriptor_;
}
bool stInterceptResultToGlobal_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 160:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInterceptResultToGlobal_ProtoFunID stInterceptResultToGlobal::FunID;
const stInterceptResultToGlobal_ProtoFunID stInterceptResultToGlobal::ProtoFunID_MIN;
const stInterceptResultToGlobal_ProtoFunID stInterceptResultToGlobal::ProtoFunID_MAX;
const int stInterceptResultToGlobal::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInterceptResultToGlobal::kCharIDFieldNumber;
const int stInterceptResultToGlobal::kWinFieldNumber;
#endif  // !_MSC_VER

stInterceptResultToGlobal::stInterceptResultToGlobal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInterceptResultToGlobal::InitAsDefaultInstance() {
}

stInterceptResultToGlobal::stInterceptResultToGlobal(const stInterceptResultToGlobal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInterceptResultToGlobal::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  win_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInterceptResultToGlobal::~stInterceptResultToGlobal() {
  SharedDtor();
}

void stInterceptResultToGlobal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInterceptResultToGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInterceptResultToGlobal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInterceptResultToGlobal_descriptor_;
}

const stInterceptResultToGlobal& stInterceptResultToGlobal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stInterceptResultToGlobal* stInterceptResultToGlobal::default_instance_ = NULL;

stInterceptResultToGlobal* stInterceptResultToGlobal::New() const {
  return new stInterceptResultToGlobal;
}

void stInterceptResultToGlobal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    win_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInterceptResultToGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // optional bool win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInterceptResultToGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional bool win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->win(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInterceptResultToGlobal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional bool win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->win(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInterceptResultToGlobal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool win = 2;
    if (has_win()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInterceptResultToGlobal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInterceptResultToGlobal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInterceptResultToGlobal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInterceptResultToGlobal::MergeFrom(const stInterceptResultToGlobal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInterceptResultToGlobal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInterceptResultToGlobal::CopyFrom(const stInterceptResultToGlobal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInterceptResultToGlobal::IsInitialized() const {

  return true;
}

void stInterceptResultToGlobal::Swap(stInterceptResultToGlobal* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(win_, other->win_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInterceptResultToGlobal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInterceptResultToGlobal_descriptor_;
  metadata.reflection = stInterceptResultToGlobal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynMemberInfo::kCharIDFieldNumber;
const int stSynMemberInfo::kNameFieldNumber;
const int stSynMemberInfo::kLevelFieldNumber;
const int stSynMemberInfo::kJobFieldNumber;
const int stSynMemberInfo::kSexFieldNumber;
const int stSynMemberInfo::kLeaderFieldNumber;
const int stSynMemberInfo::kBattlePowerFieldNumber;
const int stSynMemberInfo::kPosFieldNumber;
const int stSynMemberInfo::kHeadIDFieldNumber;
const int stSynMemberInfo::kBodyIDFieldNumber;
const int stSynMemberInfo::kWeaponIDFieldNumber;
const int stSynMemberInfo::kCloackIDFieldNumber;
const int stSynMemberInfo::kWingIDFieldNumber;
const int stSynMemberInfo::kShoeIDFieldNumber;
const int stSynMemberInfo::kFashionHairFieldNumber;
const int stSynMemberInfo::kFashionFaceFieldNumber;
const int stSynMemberInfo::kFashionBodyFieldNumber;
const int stSynMemberInfo::kFashionWeaponFieldNumber;
const int stSynMemberInfo::kFashionShoeFieldNumber;
const int stSynMemberInfo::kFashionDecorationFieldNumber;
const int stSynMemberInfo::kEffectIDFieldNumber;
const int stSynMemberInfo::kWingBreakLvFieldNumber;
const int stSynMemberInfo::kFashionWingIDFieldNumber;
#endif  // !_MSC_VER

stSynMemberInfo::stSynMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMemberInfo::InitAsDefaultInstance() {
}

stSynMemberInfo::stSynMemberInfo(const stSynMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  leader_ = false;
  battlepower_ = 0u;
  pos_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  fashionwingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMemberInfo::~stSynMemberInfo() {
  SharedDtor();
}

void stSynMemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberInfo_descriptor_;
}

const stSynMemberInfo& stSynMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynMemberInfo* stSynMemberInfo::default_instance_ = NULL;

stSynMemberInfo* stSynMemberInfo::New() const {
  return new stSynMemberInfo;
}

void stSynMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    leader_ = false;
    battlepower_ = 0u;
    pos_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    headid_ = 0u;
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionbody_ = 0u;
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    fashionwingid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leader;
        break;
      }

      // optional bool leader = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_fashionWingID;
        break;
      }

      // optional uint32 fashionWingID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionwingid_)));
          set_has_fashionwingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional bool leader = 6;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->leader(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional uint32 pos = 8;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pos(), output);
  }

  // optional uint32 headID = 9;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->headid(), output);
  }

  // optional uint32 bodyID = 10;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bodyid(), output);
  }

  // optional uint32 weaponID = 11;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->weaponid(), output);
  }

  // optional uint32 cloackID = 12;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cloackid(), output);
  }

  // optional uint32 wingID = 13;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->wingid(), output);
  }

  // optional uint32 shoeID = 14;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 15;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 16;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 17;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 18;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 19;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 20;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 21;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 22;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->wingbreaklv(), output);
  }

  // optional uint32 fashionWingID = 23;
  if (has_fashionwingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->fashionwingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional bool leader = 6;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->leader(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional uint32 pos = 8;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pos(), target);
  }

  // optional uint32 headID = 9;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->headid(), target);
  }

  // optional uint32 bodyID = 10;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bodyid(), target);
  }

  // optional uint32 weaponID = 11;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->weaponid(), target);
  }

  // optional uint32 cloackID = 12;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cloackid(), target);
  }

  // optional uint32 wingID = 13;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->wingid(), target);
  }

  // optional uint32 shoeID = 14;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 15;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 16;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 17;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 18;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 19;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 20;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 21;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 22;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->wingbreaklv(), target);
  }

  // optional uint32 fashionWingID = 23;
  if (has_fashionwingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->fashionwingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional bool leader = 6;
    if (has_leader()) {
      total_size += 1 + 1;
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 pos = 8;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 headID = 9;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 bodyID = 10;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 11;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 12;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 13;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 14;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 15;
    if (has_fashionhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 16;
    if (has_fashionface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionBody = 17;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

    // optional uint32 fashionWeapon = 18;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 19;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 20;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 21;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 22;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 fashionWingID = 23;
    if (has_fashionwingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionwingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMemberInfo::MergeFrom(const stSynMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_fashionwingid()) {
      set_fashionwingid(from.fashionwingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMemberInfo::CopyFrom(const stSynMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMemberInfo::IsInitialized() const {

  return true;
}

void stSynMemberInfo::Swap(stSynMemberInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(leader_, other->leader_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(pos_, other->pos_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(fashionwingid_, other->fashionwingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMemberInfo_descriptor_;
  metadata.reflection = stSynMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRoomInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRoomInfo_ProtoModID_descriptor_;
}
bool stRetRoomInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRoomInfo_ProtoModID stRetRoomInfo::ModID;
const stRetRoomInfo_ProtoModID stRetRoomInfo::ProtoModID_MIN;
const stRetRoomInfo_ProtoModID stRetRoomInfo::ProtoModID_MAX;
const int stRetRoomInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRoomInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRoomInfo_ProtoFunID_descriptor_;
}
bool stRetRoomInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 161:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRoomInfo_ProtoFunID stRetRoomInfo::FunID;
const stRetRoomInfo_ProtoFunID stRetRoomInfo::ProtoFunID_MIN;
const stRetRoomInfo_ProtoFunID stRetRoomInfo::ProtoFunID_MAX;
const int stRetRoomInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRoomInfo::kCharIDFieldNumber;
const int stRetRoomInfo::kCopyMapIDFieldNumber;
const int stRetRoomInfo::kMembersFieldNumber;
const int stRetRoomInfo::kTeamIDFieldNumber;
#endif  // !_MSC_VER

stRetRoomInfo::stRetRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRoomInfo::InitAsDefaultInstance() {
}

stRetRoomInfo::stRetRoomInfo(const stRetRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  copymapid_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRoomInfo::~stRetRoomInfo() {
  SharedDtor();
}

void stRetRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRoomInfo_descriptor_;
}

const stRetRoomInfo& stRetRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetRoomInfo* stRetRoomInfo::default_instance_ = NULL;

stRetRoomInfo* stRetRoomInfo::New() const {
  return new stRetRoomInfo;
}

void stRetRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    copymapid_ = 0u;
    teamid_ = 0u;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copyMapID;
        break;
      }

      // optional uint32 copyMapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyMapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        break;
      }

      // repeated .Global.stSynMemberInfo members = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_members;
        if (input->ExpectTag(32)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 copyMapID = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }

  // repeated .Global.stSynMemberInfo members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->members(i), output);
  }

  // optional uint32 teamID = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 copyMapID = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }

  // repeated .Global.stSynMemberInfo members = 3;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->members(i), target);
  }

  // optional uint32 teamID = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 copyMapID = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional uint32 teamID = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  // repeated .Global.stSynMemberInfo members = 3;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRoomInfo::MergeFrom(const stRetRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRoomInfo::CopyFrom(const stRetRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRoomInfo::IsInitialized() const {

  return true;
}

void stRetRoomInfo::Swap(stRetRoomInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(copymapid_, other->copymapid_);
    members_.Swap(&other->members_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRoomInfo_descriptor_;
  metadata.reflection = stRetRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetAddTeamMember_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAddTeamMember_ProtoModID_descriptor_;
}
bool stRetAddTeamMember_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetAddTeamMember_ProtoModID stRetAddTeamMember::ModID;
const stRetAddTeamMember_ProtoModID stRetAddTeamMember::ProtoModID_MIN;
const stRetAddTeamMember_ProtoModID stRetAddTeamMember::ProtoModID_MAX;
const int stRetAddTeamMember::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetAddTeamMember_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAddTeamMember_ProtoFunID_descriptor_;
}
bool stRetAddTeamMember_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 162:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetAddTeamMember_ProtoFunID stRetAddTeamMember::FunID;
const stRetAddTeamMember_ProtoFunID stRetAddTeamMember::ProtoFunID_MIN;
const stRetAddTeamMember_ProtoFunID stRetAddTeamMember::ProtoFunID_MAX;
const int stRetAddTeamMember::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetAddTeamMember::kCharIDFieldNumber;
const int stRetAddTeamMember::kExceptIDFieldNumber;
const int stRetAddTeamMember::kPosFieldNumber;
const int stRetAddTeamMember::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

stRetAddTeamMember::stRetAddTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetAddTeamMember::InitAsDefaultInstance() {
  memberinfo_ = const_cast< ::Global::stSynMemberInfo*>(&::Global::stSynMemberInfo::default_instance());
}

stRetAddTeamMember::stRetAddTeamMember(const stRetAddTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetAddTeamMember::SharedCtor() {
  _cached_size_ = 0;
  exceptid_ = 0u;
  pos_ = 0u;
  memberinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetAddTeamMember::~stRetAddTeamMember() {
  SharedDtor();
}

void stRetAddTeamMember::SharedDtor() {
  if (this != default_instance_) {
    delete memberinfo_;
  }
}

void stRetAddTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetAddTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetAddTeamMember_descriptor_;
}

const stRetAddTeamMember& stRetAddTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetAddTeamMember* stRetAddTeamMember::default_instance_ = NULL;

stRetAddTeamMember* stRetAddTeamMember::New() const {
  return new stRetAddTeamMember;
}

void stRetAddTeamMember::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    exceptid_ = 0u;
    pos_ = 0u;
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::Global::stSynMemberInfo::Clear();
    }
  }
  charid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetAddTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_charid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_charid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_charID;
        if (input->ExpectTag(16)) goto parse_exceptID;
        break;
      }

      // optional uint32 exceptID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exceptID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exceptid_)));
          set_has_exceptid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_memberInfo;
        break;
      }

      // optional .Global.stSynMemberInfo memberInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetAddTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 charID = 1;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->charid(i), output);
  }

  // optional uint32 exceptID = 2;
  if (has_exceptid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->exceptid(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // optional .Global.stSynMemberInfo memberInfo = 4;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->memberinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetAddTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 charID = 1;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->charid(i), target);
  }

  // optional uint32 exceptID = 2;
  if (has_exceptid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->exceptid(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // optional .Global.stSynMemberInfo memberInfo = 4;
  if (has_memberinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->memberinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetAddTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 exceptID = 2;
    if (has_exceptid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exceptid());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional .Global.stSynMemberInfo memberInfo = 4;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }

  }
  // repeated uint32 charID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetAddTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetAddTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetAddTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetAddTeamMember::MergeFrom(const stRetAddTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid_.MergeFrom(from.charid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_exceptid()) {
      set_exceptid(from.exceptid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::Global::stSynMemberInfo::MergeFrom(from.memberinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetAddTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetAddTeamMember::CopyFrom(const stRetAddTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetAddTeamMember::IsInitialized() const {

  return true;
}

void stRetAddTeamMember::Swap(stRetAddTeamMember* other) {
  if (other != this) {
    charid_.Swap(&other->charid_);
    std::swap(exceptid_, other->exceptid_);
    std::swap(pos_, other->pos_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetAddTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetAddTeamMember_descriptor_;
  metadata.reflection = stRetAddTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryObjInfo::kCharIDFieldNumber;
const int MarryObjInfo::kNameFieldNumber;
const int MarryObjInfo::kLevelFieldNumber;
const int MarryObjInfo::kJobFieldNumber;
const int MarryObjInfo::kSexFieldNumber;
const int MarryObjInfo::kBattlePowerFieldNumber;
const int MarryObjInfo::kHeadIDFieldNumber;
const int MarryObjInfo::kBodyIDFieldNumber;
const int MarryObjInfo::kWeaponIDFieldNumber;
const int MarryObjInfo::kCloackIDFieldNumber;
const int MarryObjInfo::kWingIDFieldNumber;
const int MarryObjInfo::kShoeIDFieldNumber;
const int MarryObjInfo::kFashionHairFieldNumber;
const int MarryObjInfo::kFashionFaceFieldNumber;
const int MarryObjInfo::kFashionBodyFieldNumber;
const int MarryObjInfo::kFashionWeaponFieldNumber;
const int MarryObjInfo::kFashionShoeFieldNumber;
const int MarryObjInfo::kFashionDecorationFieldNumber;
const int MarryObjInfo::kEffectIDFieldNumber;
const int MarryObjInfo::kWingBreakLvFieldNumber;
const int MarryObjInfo::kFashionWingIDFieldNumber;
#endif  // !_MSC_VER

MarryObjInfo::MarryObjInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryObjInfo::InitAsDefaultInstance() {
}

MarryObjInfo::MarryObjInfo(const MarryObjInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryObjInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  fashionwingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryObjInfo::~MarryObjInfo() {
  SharedDtor();
}

void MarryObjInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MarryObjInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryObjInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryObjInfo_descriptor_;
}

const MarryObjInfo& MarryObjInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

MarryObjInfo* MarryObjInfo::default_instance_ = NULL;

MarryObjInfo* MarryObjInfo::New() const {
  return new MarryObjInfo;
}

void MarryObjInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    battlepower_ = 0u;
    headid_ = 0u;
    bodyid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
    fashionbody_ = 0u;
    fashionweapon_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    fashionwingid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryObjInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fashionWingID;
        break;
      }

      // optional uint32 fashionWingID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionwingid_)));
          set_has_fashionwingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryObjInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battlepower(), output);
  }

  // optional uint32 headID = 7;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->headid(), output);
  }

  // optional uint32 bodyID = 8;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bodyid(), output);
  }

  // optional uint32 weaponID = 9;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->weaponid(), output);
  }

  // optional uint32 cloackID = 10;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cloackid(), output);
  }

  // optional uint32 wingID = 11;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wingid(), output);
  }

  // optional uint32 shoeID = 12;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 13;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 14;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 15;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 16;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 17;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 18;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 19;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 20;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->wingbreaklv(), output);
  }

  // optional uint32 fashionWingID = 21;
  if (has_fashionwingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->fashionwingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryObjInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battlepower(), target);
  }

  // optional uint32 headID = 7;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->headid(), target);
  }

  // optional uint32 bodyID = 8;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bodyid(), target);
  }

  // optional uint32 weaponID = 9;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->weaponid(), target);
  }

  // optional uint32 cloackID = 10;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cloackid(), target);
  }

  // optional uint32 wingID = 11;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wingid(), target);
  }

  // optional uint32 shoeID = 12;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 13;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 14;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 15;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 16;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 17;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 18;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 19;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 20;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->wingbreaklv(), target);
  }

  // optional uint32 fashionWingID = 21;
  if (has_fashionwingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->fashionwingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryObjInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 battlePower = 6;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 headID = 7;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 bodyID = 8;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 weaponID = 9;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 10;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 11;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 12;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 13;
    if (has_fashionhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 14;
    if (has_fashionface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

    // optional uint32 fashionBody = 15;
    if (has_fashionbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

    // optional uint32 fashionWeapon = 16;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionShoe = 17;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 18;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 19;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 20;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 fashionWingID = 21;
    if (has_fashionwingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionwingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryObjInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryObjInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryObjInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryObjInfo::MergeFrom(const MarryObjInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_fashionwingid()) {
      set_fashionwingid(from.fashionwingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryObjInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryObjInfo::CopyFrom(const MarryObjInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryObjInfo::IsInitialized() const {

  return true;
}

void MarryObjInfo::Swap(MarryObjInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(fashionwingid_, other->fashionwingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryObjInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryObjInfo_descriptor_;
  metadata.reflection = MarryObjInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPropose_ProtoModID_descriptor_;
}
bool stReqPropose_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPropose_ProtoModID stReqPropose::ModID;
const stReqPropose_ProtoModID stReqPropose::ProtoModID_MIN;
const stReqPropose_ProtoModID stReqPropose::ProtoModID_MAX;
const int stReqPropose::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPropose_ProtoFunID_descriptor_;
}
bool stReqPropose_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 163:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPropose_ProtoFunID stReqPropose::FunID;
const stReqPropose_ProtoFunID stReqPropose::ProtoFunID_MIN;
const stReqPropose_ProtoFunID stReqPropose::ProtoFunID_MAX;
const int stReqPropose::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPropose::kId1FieldNumber;
const int stReqPropose::kId2FieldNumber;
const int stReqPropose::kInfoFieldNumber;
#endif  // !_MSC_VER

stReqPropose::stReqPropose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPropose::InitAsDefaultInstance() {
  info_ = const_cast< ::Global::MarryObjInfo*>(&::Global::MarryObjInfo::default_instance());
}

stReqPropose::stReqPropose(const stReqPropose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPropose::SharedCtor() {
  _cached_size_ = 0;
  id1_ = 0u;
  id2_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPropose::~stReqPropose() {
  SharedDtor();
}

void stReqPropose::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void stReqPropose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPropose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPropose_descriptor_;
}

const stReqPropose& stReqPropose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqPropose* stReqPropose::default_instance_ = NULL;

stReqPropose* stReqPropose::New() const {
  return new stReqPropose;
}

void stReqPropose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id1_ = 0u;
    id2_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::Global::MarryObjInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPropose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id1_)));
          set_has_id1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id2;
        break;
      }

      // optional uint32 id2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id2_)));
          set_has_id2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .Global.MarryObjInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPropose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id1 = 1;
  if (has_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id1(), output);
  }

  // optional uint32 id2 = 2;
  if (has_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id2(), output);
  }

  // optional .Global.MarryObjInfo info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPropose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id1 = 1;
  if (has_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id1(), target);
  }

  // optional uint32 id2 = 2;
  if (has_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id2(), target);
  }

  // optional .Global.MarryObjInfo info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPropose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id1 = 1;
    if (has_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id1());
    }

    // optional uint32 id2 = 2;
    if (has_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id2());
    }

    // optional .Global.MarryObjInfo info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPropose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPropose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPropose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPropose::MergeFrom(const stReqPropose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id1()) {
      set_id1(from.id1());
    }
    if (from.has_id2()) {
      set_id2(from.id2());
    }
    if (from.has_info()) {
      mutable_info()->::Global::MarryObjInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPropose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPropose::CopyFrom(const stReqPropose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPropose::IsInitialized() const {

  return true;
}

void stReqPropose::Swap(stReqPropose* other) {
  if (other != this) {
    std::swap(id1_, other->id1_);
    std::swap(id2_, other->id2_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPropose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPropose_descriptor_;
  metadata.reflection = stReqPropose_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeMarry_ProtoModID_descriptor_;
}
bool stReqAgreeMarry_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeMarry_ProtoModID stReqAgreeMarry::ModID;
const stReqAgreeMarry_ProtoModID stReqAgreeMarry::ProtoModID_MIN;
const stReqAgreeMarry_ProtoModID stReqAgreeMarry::ProtoModID_MAX;
const int stReqAgreeMarry::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeMarry_ProtoFunID_descriptor_;
}
bool stReqAgreeMarry_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 164:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeMarry_ProtoFunID stReqAgreeMarry::FunID;
const stReqAgreeMarry_ProtoFunID stReqAgreeMarry::ProtoFunID_MIN;
const stReqAgreeMarry_ProtoFunID stReqAgreeMarry::ProtoFunID_MAX;
const int stReqAgreeMarry::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAgreeMarry::kId1FieldNumber;
const int stReqAgreeMarry::kId2FieldNumber;
const int stReqAgreeMarry::kRoomIdFieldNumber;
const int stReqAgreeMarry::kInfoFieldNumber;
#endif  // !_MSC_VER

stReqAgreeMarry::stReqAgreeMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAgreeMarry::InitAsDefaultInstance() {
  info_ = const_cast< ::Global::MarryObjInfo*>(&::Global::MarryObjInfo::default_instance());
}

stReqAgreeMarry::stReqAgreeMarry(const stReqAgreeMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAgreeMarry::SharedCtor() {
  _cached_size_ = 0;
  id1_ = 0u;
  id2_ = 0u;
  roomid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAgreeMarry::~stReqAgreeMarry() {
  SharedDtor();
}

void stReqAgreeMarry::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void stReqAgreeMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAgreeMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeMarry_descriptor_;
}

const stReqAgreeMarry& stReqAgreeMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqAgreeMarry* stReqAgreeMarry::default_instance_ = NULL;

stReqAgreeMarry* stReqAgreeMarry::New() const {
  return new stReqAgreeMarry;
}

void stReqAgreeMarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id1_ = 0u;
    id2_ = 0u;
    roomid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::Global::MarryObjInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAgreeMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id1_)));
          set_has_id1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id2;
        break;
      }

      // optional uint32 id2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id2_)));
          set_has_id2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomId;
        break;
      }

      // optional uint32 roomId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .Global.MarryObjInfo info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAgreeMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id1 = 1;
  if (has_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id1(), output);
  }

  // optional uint32 id2 = 2;
  if (has_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id2(), output);
  }

  // optional uint32 roomId = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roomid(), output);
  }

  // optional .Global.MarryObjInfo info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAgreeMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id1 = 1;
  if (has_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id1(), target);
  }

  // optional uint32 id2 = 2;
  if (has_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id2(), target);
  }

  // optional uint32 roomId = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roomid(), target);
  }

  // optional .Global.MarryObjInfo info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAgreeMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id1 = 1;
    if (has_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id1());
    }

    // optional uint32 id2 = 2;
    if (has_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id2());
    }

    // optional uint32 roomId = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional .Global.MarryObjInfo info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAgreeMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAgreeMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAgreeMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAgreeMarry::MergeFrom(const stReqAgreeMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id1()) {
      set_id1(from.id1());
    }
    if (from.has_id2()) {
      set_id2(from.id2());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_info()) {
      mutable_info()->::Global::MarryObjInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAgreeMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAgreeMarry::CopyFrom(const stReqAgreeMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAgreeMarry::IsInitialized() const {

  return true;
}

void stReqAgreeMarry::Swap(stReqAgreeMarry* other) {
  if (other != this) {
    std::swap(id1_, other->id1_);
    std::swap(id2_, other->id2_);
    std::swap(roomid_, other->roomid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAgreeMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAgreeMarry_descriptor_;
  metadata.reflection = stReqAgreeMarry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqQuitWedding_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqQuitWedding_ProtoModID_descriptor_;
}
bool stReqQuitWedding_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqQuitWedding_ProtoModID stReqQuitWedding::ModID;
const stReqQuitWedding_ProtoModID stReqQuitWedding::ProtoModID_MIN;
const stReqQuitWedding_ProtoModID stReqQuitWedding::ProtoModID_MAX;
const int stReqQuitWedding::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqQuitWedding_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqQuitWedding_ProtoFunID_descriptor_;
}
bool stReqQuitWedding_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 165:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqQuitWedding_ProtoFunID stReqQuitWedding::FunID;
const stReqQuitWedding_ProtoFunID stReqQuitWedding::ProtoFunID_MIN;
const stReqQuitWedding_ProtoFunID stReqQuitWedding::ProtoFunID_MAX;
const int stReqQuitWedding::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqQuitWedding::kCharIdFieldNumber;
const int stReqQuitWedding::kLevelIdFieldNumber;
const int stReqQuitWedding::kIdFieldNumber;
#endif  // !_MSC_VER

stReqQuitWedding::stReqQuitWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqQuitWedding::InitAsDefaultInstance() {
}

stReqQuitWedding::stReqQuitWedding(const stReqQuitWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqQuitWedding::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqQuitWedding::~stReqQuitWedding() {
  SharedDtor();
}

void stReqQuitWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqQuitWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqQuitWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqQuitWedding_descriptor_;
}

const stReqQuitWedding& stReqQuitWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqQuitWedding* stReqQuitWedding::default_instance_ = NULL;

stReqQuitWedding* stReqQuitWedding::New() const {
  return new stReqQuitWedding;
}

void stReqQuitWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    levelid_ = 0u;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqQuitWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_levelId;
        break;
      }

      // optional uint32 levelId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // repeated uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqQuitWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 levelId = 2;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->levelid(), output);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqQuitWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 levelId = 2;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->levelid(), target);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqQuitWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 levelId = 2;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  // repeated uint32 id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqQuitWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqQuitWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqQuitWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqQuitWedding::MergeFrom(const stReqQuitWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqQuitWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqQuitWedding::CopyFrom(const stReqQuitWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqQuitWedding::IsInitialized() const {

  return true;
}

void stReqQuitWedding::Swap(stReqQuitWedding* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(levelid_, other->levelid_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqQuitWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqQuitWedding_descriptor_;
  metadata.reflection = stReqQuitWedding_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqReEnterWedding_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReEnterWedding_ProtoModID_descriptor_;
}
bool stReqReEnterWedding_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReEnterWedding_ProtoModID stReqReEnterWedding::ModID;
const stReqReEnterWedding_ProtoModID stReqReEnterWedding::ProtoModID_MIN;
const stReqReEnterWedding_ProtoModID stReqReEnterWedding::ProtoModID_MAX;
const int stReqReEnterWedding::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqReEnterWedding_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReEnterWedding_ProtoFunID_descriptor_;
}
bool stReqReEnterWedding_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 166:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReEnterWedding_ProtoFunID stReqReEnterWedding::FunID;
const stReqReEnterWedding_ProtoFunID stReqReEnterWedding::ProtoFunID_MIN;
const stReqReEnterWedding_ProtoFunID stReqReEnterWedding::ProtoFunID_MAX;
const int stReqReEnterWedding::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqReEnterWedding::kCharIdFieldNumber;
const int stReqReEnterWedding::kIdFieldNumber;
const int stReqReEnterWedding::kRoomIdFieldNumber;
#endif  // !_MSC_VER

stReqReEnterWedding::stReqReEnterWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqReEnterWedding::InitAsDefaultInstance() {
}

stReqReEnterWedding::stReqReEnterWedding(const stReqReEnterWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqReEnterWedding::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqReEnterWedding::~stReqReEnterWedding() {
  SharedDtor();
}

void stReqReEnterWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqReEnterWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqReEnterWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReEnterWedding_descriptor_;
}

const stReqReEnterWedding& stReqReEnterWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqReEnterWedding* stReqReEnterWedding::default_instance_ = NULL;

stReqReEnterWedding* stReqReEnterWedding::New() const {
  return new stReqReEnterWedding;
}

void stReqReEnterWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    roomid_ = 0u;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqReEnterWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // repeated uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        if (input->ExpectTag(24)) goto parse_roomId;
        break;
      }

      // optional uint32 roomId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqReEnterWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->id(i), output);
  }

  // optional uint32 roomId = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqReEnterWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated uint32 id = 2;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->id(i), target);
  }

  // optional uint32 roomId = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqReEnterWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 roomId = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  // repeated uint32 id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqReEnterWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqReEnterWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqReEnterWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqReEnterWedding::MergeFrom(const stReqReEnterWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqReEnterWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqReEnterWedding::CopyFrom(const stReqReEnterWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqReEnterWedding::IsInitialized() const {

  return true;
}

void stReqReEnterWedding::Swap(stReqReEnterWedding* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    id_.Swap(&other->id_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqReEnterWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqReEnterWedding_descriptor_;
  metadata.reflection = stReqReEnterWedding_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBuyFireWork_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyFireWork_ProtoModID_descriptor_;
}
bool stReqBuyFireWork_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyFireWork_ProtoModID stReqBuyFireWork::ModID;
const stReqBuyFireWork_ProtoModID stReqBuyFireWork::ProtoModID_MIN;
const stReqBuyFireWork_ProtoModID stReqBuyFireWork::ProtoModID_MAX;
const int stReqBuyFireWork::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBuyFireWork_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyFireWork_ProtoFunID_descriptor_;
}
bool stReqBuyFireWork_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 167:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBuyFireWork_ProtoFunID stReqBuyFireWork::FunID;
const stReqBuyFireWork_ProtoFunID stReqBuyFireWork::ProtoFunID_MIN;
const stReqBuyFireWork_ProtoFunID stReqBuyFireWork::ProtoFunID_MAX;
const int stReqBuyFireWork::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBuyFireWork::kCharIdFieldNumber;
const int stReqBuyFireWork::kIdFieldNumber;
#endif  // !_MSC_VER

stReqBuyFireWork::stReqBuyFireWork()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBuyFireWork::InitAsDefaultInstance() {
}

stReqBuyFireWork::stReqBuyFireWork(const stReqBuyFireWork& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBuyFireWork::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBuyFireWork::~stReqBuyFireWork() {
  SharedDtor();
}

void stReqBuyFireWork::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBuyFireWork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBuyFireWork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBuyFireWork_descriptor_;
}

const stReqBuyFireWork& stReqBuyFireWork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqBuyFireWork* stReqBuyFireWork::default_instance_ = NULL;

stReqBuyFireWork* stReqBuyFireWork::New() const {
  return new stReqBuyFireWork;
}

void stReqBuyFireWork::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBuyFireWork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBuyFireWork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBuyFireWork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBuyFireWork::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBuyFireWork::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBuyFireWork* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBuyFireWork*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBuyFireWork::MergeFrom(const stReqBuyFireWork& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBuyFireWork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBuyFireWork::CopyFrom(const stReqBuyFireWork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBuyFireWork::IsInitialized() const {

  return true;
}

void stReqBuyFireWork::Swap(stReqBuyFireWork* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBuyFireWork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBuyFireWork_descriptor_;
  metadata.reflection = stReqBuyFireWork_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAgreeInvite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeInvite_ProtoModID_descriptor_;
}
bool stReqAgreeInvite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeInvite_ProtoModID stReqAgreeInvite::ModID;
const stReqAgreeInvite_ProtoModID stReqAgreeInvite::ProtoModID_MIN;
const stReqAgreeInvite_ProtoModID stReqAgreeInvite::ProtoModID_MAX;
const int stReqAgreeInvite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAgreeInvite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeInvite_ProtoFunID_descriptor_;
}
bool stReqAgreeInvite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 168:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeInvite_ProtoFunID stReqAgreeInvite::FunID;
const stReqAgreeInvite_ProtoFunID stReqAgreeInvite::ProtoFunID_MIN;
const stReqAgreeInvite_ProtoFunID stReqAgreeInvite::ProtoFunID_MAX;
const int stReqAgreeInvite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAgreeInvite::kCharIdFieldNumber;
const int stReqAgreeInvite::kRoomIdFieldNumber;
const int stReqAgreeInvite::kIdFieldNumber;
#endif  // !_MSC_VER

stReqAgreeInvite::stReqAgreeInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAgreeInvite::InitAsDefaultInstance() {
}

stReqAgreeInvite::stReqAgreeInvite(const stReqAgreeInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAgreeInvite::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAgreeInvite::~stReqAgreeInvite() {
  SharedDtor();
}

void stReqAgreeInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAgreeInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAgreeInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeInvite_descriptor_;
}

const stReqAgreeInvite& stReqAgreeInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqAgreeInvite* stReqAgreeInvite::default_instance_ = NULL;

stReqAgreeInvite* stReqAgreeInvite::New() const {
  return new stReqAgreeInvite;
}

void stReqAgreeInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    roomid_ = 0u;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAgreeInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // optional uint32 roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // repeated uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAgreeInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAgreeInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAgreeInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  // repeated uint32 id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAgreeInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAgreeInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAgreeInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAgreeInvite::MergeFrom(const stReqAgreeInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAgreeInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAgreeInvite::CopyFrom(const stReqAgreeInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAgreeInvite::IsInitialized() const {

  return true;
}

void stReqAgreeInvite::Swap(stReqAgreeInvite* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(roomid_, other->roomid_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAgreeInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAgreeInvite_descriptor_;
  metadata.reflection = stReqAgreeInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqTakeCandy_ProtoModID_descriptor_;
}
bool stReqTakeCandy_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqTakeCandy_ProtoModID stReqTakeCandy::ModID;
const stReqTakeCandy_ProtoModID stReqTakeCandy::ProtoModID_MIN;
const stReqTakeCandy_ProtoModID stReqTakeCandy::ProtoModID_MAX;
const int stReqTakeCandy::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqTakeCandy_ProtoFunID_descriptor_;
}
bool stReqTakeCandy_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 169:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqTakeCandy_ProtoFunID stReqTakeCandy::FunID;
const stReqTakeCandy_ProtoFunID stReqTakeCandy::ProtoFunID_MIN;
const stReqTakeCandy_ProtoFunID stReqTakeCandy::ProtoFunID_MAX;
const int stReqTakeCandy::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqTakeCandy::kCharIdFieldNumber;
#endif  // !_MSC_VER

stReqTakeCandy::stReqTakeCandy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqTakeCandy::InitAsDefaultInstance() {
}

stReqTakeCandy::stReqTakeCandy(const stReqTakeCandy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqTakeCandy::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqTakeCandy::~stReqTakeCandy() {
  SharedDtor();
}

void stReqTakeCandy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqTakeCandy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqTakeCandy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqTakeCandy_descriptor_;
}

const stReqTakeCandy& stReqTakeCandy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqTakeCandy* stReqTakeCandy::default_instance_ = NULL;

stReqTakeCandy* stReqTakeCandy::New() const {
  return new stReqTakeCandy;
}

void stReqTakeCandy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqTakeCandy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqTakeCandy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqTakeCandy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqTakeCandy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqTakeCandy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqTakeCandy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqTakeCandy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqTakeCandy::MergeFrom(const stReqTakeCandy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqTakeCandy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqTakeCandy::CopyFrom(const stReqTakeCandy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqTakeCandy::IsInitialized() const {

  return true;
}

void stReqTakeCandy::Swap(stReqTakeCandy* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqTakeCandy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqTakeCandy_descriptor_;
  metadata.reflection = stReqTakeCandy_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarry_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCoupleMarry_ProtoModID_descriptor_;
}
bool stNotifyCoupleMarry_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyCoupleMarry_ProtoModID stNotifyCoupleMarry::ModID;
const stNotifyCoupleMarry_ProtoModID stNotifyCoupleMarry::ProtoModID_MIN;
const stNotifyCoupleMarry_ProtoModID stNotifyCoupleMarry::ProtoModID_MAX;
const int stNotifyCoupleMarry::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarry_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCoupleMarry_ProtoFunID_descriptor_;
}
bool stNotifyCoupleMarry_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 170:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyCoupleMarry_ProtoFunID stNotifyCoupleMarry::FunID;
const stNotifyCoupleMarry_ProtoFunID stNotifyCoupleMarry::ProtoFunID_MIN;
const stNotifyCoupleMarry_ProtoFunID stNotifyCoupleMarry::ProtoFunID_MAX;
const int stNotifyCoupleMarry::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyCoupleMarry::kHusbandFieldNumber;
const int stNotifyCoupleMarry::kWifeFieldNumber;
const int stNotifyCoupleMarry::kIdFieldNumber;
const int stNotifyCoupleMarry::kHusNameFieldNumber;
const int stNotifyCoupleMarry::kWifeNameFieldNumber;
#endif  // !_MSC_VER

stNotifyCoupleMarry::stNotifyCoupleMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyCoupleMarry::InitAsDefaultInstance() {
}

stNotifyCoupleMarry::stNotifyCoupleMarry(const stNotifyCoupleMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyCoupleMarry::SharedCtor() {
  _cached_size_ = 0;
  husband_ = 0u;
  wife_ = 0u;
  id_ = 0u;
  husname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wifename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyCoupleMarry::~stNotifyCoupleMarry() {
  SharedDtor();
}

void stNotifyCoupleMarry::SharedDtor() {
  if (husname_ != &::google::protobuf::internal::kEmptyString) {
    delete husname_;
  }
  if (wifename_ != &::google::protobuf::internal::kEmptyString) {
    delete wifename_;
  }
  if (this != default_instance_) {
  }
}

void stNotifyCoupleMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyCoupleMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCoupleMarry_descriptor_;
}

const stNotifyCoupleMarry& stNotifyCoupleMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyCoupleMarry* stNotifyCoupleMarry::default_instance_ = NULL;

stNotifyCoupleMarry* stNotifyCoupleMarry::New() const {
  return new stNotifyCoupleMarry;
}

void stNotifyCoupleMarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    husband_ = 0u;
    wife_ = 0u;
    id_ = 0u;
    if (has_husname()) {
      if (husname_ != &::google::protobuf::internal::kEmptyString) {
        husname_->clear();
      }
    }
    if (has_wifename()) {
      if (wifename_ != &::google::protobuf::internal::kEmptyString) {
        wifename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyCoupleMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 husband = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &husband_)));
          set_has_husband();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wife;
        break;
      }

      // optional uint32 wife = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wife:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wife_)));
          set_has_wife();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_husName;
        break;
      }

      // optional string husName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_husName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_husname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->husname().data(), this->husname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_wifeName;
        break;
      }

      // optional string wifeName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wifeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wifename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wifename().data(), this->wifename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyCoupleMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 husband = 1;
  if (has_husband()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->husband(), output);
  }

  // optional uint32 wife = 2;
  if (has_wife()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wife(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  // optional string husName = 4;
  if (has_husname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->husname().data(), this->husname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->husname(), output);
  }

  // optional string wifeName = 5;
  if (has_wifename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wifename().data(), this->wifename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->wifename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyCoupleMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 husband = 1;
  if (has_husband()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->husband(), target);
  }

  // optional uint32 wife = 2;
  if (has_wife()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wife(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  // optional string husName = 4;
  if (has_husname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->husname().data(), this->husname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->husname(), target);
  }

  // optional string wifeName = 5;
  if (has_wifename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wifename().data(), this->wifename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->wifename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyCoupleMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 husband = 1;
    if (has_husband()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->husband());
    }

    // optional uint32 wife = 2;
    if (has_wife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wife());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string husName = 4;
    if (has_husname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->husname());
    }

    // optional string wifeName = 5;
    if (has_wifename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wifename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyCoupleMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyCoupleMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyCoupleMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyCoupleMarry::MergeFrom(const stNotifyCoupleMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_husband()) {
      set_husband(from.husband());
    }
    if (from.has_wife()) {
      set_wife(from.wife());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_husname()) {
      set_husname(from.husname());
    }
    if (from.has_wifename()) {
      set_wifename(from.wifename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyCoupleMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyCoupleMarry::CopyFrom(const stNotifyCoupleMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyCoupleMarry::IsInitialized() const {

  return true;
}

void stNotifyCoupleMarry::Swap(stNotifyCoupleMarry* other) {
  if (other != this) {
    std::swap(husband_, other->husband_);
    std::swap(wife_, other->wife_);
    std::swap(id_, other->id_);
    std::swap(husname_, other->husname_);
    std::swap(wifename_, other->wifename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyCoupleMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyCoupleMarry_descriptor_;
  metadata.reflection = stNotifyCoupleMarry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendWeedingRing_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendWeedingRing_ProtoModID_descriptor_;
}
bool stSendWeedingRing_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendWeedingRing_ProtoModID stSendWeedingRing::ModID;
const stSendWeedingRing_ProtoModID stSendWeedingRing::ProtoModID_MIN;
const stSendWeedingRing_ProtoModID stSendWeedingRing::ProtoModID_MAX;
const int stSendWeedingRing::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendWeedingRing_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendWeedingRing_ProtoFunID_descriptor_;
}
bool stSendWeedingRing_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 171:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendWeedingRing_ProtoFunID stSendWeedingRing::FunID;
const stSendWeedingRing_ProtoFunID stSendWeedingRing::ProtoFunID_MIN;
const stSendWeedingRing_ProtoFunID stSendWeedingRing::ProtoFunID_MAX;
const int stSendWeedingRing::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendWeedingRing::kCharIdFieldNumber;
const int stSendWeedingRing::kRoomIdFieldNumber;
const int stSendWeedingRing::kIdFieldNumber;
#endif  // !_MSC_VER

stSendWeedingRing::stSendWeedingRing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendWeedingRing::InitAsDefaultInstance() {
}

stSendWeedingRing::stSendWeedingRing(const stSendWeedingRing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendWeedingRing::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  roomid_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendWeedingRing::~stSendWeedingRing() {
  SharedDtor();
}

void stSendWeedingRing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendWeedingRing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendWeedingRing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendWeedingRing_descriptor_;
}

const stSendWeedingRing& stSendWeedingRing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSendWeedingRing* stSendWeedingRing::default_instance_ = NULL;

stSendWeedingRing* stSendWeedingRing::New() const {
  return new stSendWeedingRing;
}

void stSendWeedingRing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    roomid_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendWeedingRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // optional uint32 roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendWeedingRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendWeedingRing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendWeedingRing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendWeedingRing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendWeedingRing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendWeedingRing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendWeedingRing::MergeFrom(const stSendWeedingRing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendWeedingRing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendWeedingRing::CopyFrom(const stSendWeedingRing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendWeedingRing::IsInitialized() const {

  return true;
}

void stSendWeedingRing::Swap(stSendWeedingRing* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(roomid_, other->roomid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendWeedingRing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendWeedingRing_descriptor_;
  metadata.reflection = stSendWeedingRing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMarryInfoCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMarryInfoCb_ProtoModID_descriptor_;
}
bool stMarryInfoCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMarryInfoCb_ProtoModID stMarryInfoCb::ModID;
const stMarryInfoCb_ProtoModID stMarryInfoCb::ProtoModID_MIN;
const stMarryInfoCb_ProtoModID stMarryInfoCb::ProtoModID_MAX;
const int stMarryInfoCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMarryInfoCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMarryInfoCb_ProtoFunID_descriptor_;
}
bool stMarryInfoCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 171:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMarryInfoCb_ProtoFunID stMarryInfoCb::FunID;
const stMarryInfoCb_ProtoFunID stMarryInfoCb::ProtoFunID_MIN;
const stMarryInfoCb_ProtoFunID stMarryInfoCb::ProtoFunID_MAX;
const int stMarryInfoCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMarryInfoCb::kCharIdFieldNumber;
const int stMarryInfoCb::kRoomIdFieldNumber;
const int stMarryInfoCb::kIdFieldNumber;
#endif  // !_MSC_VER

stMarryInfoCb::stMarryInfoCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMarryInfoCb::InitAsDefaultInstance() {
}

stMarryInfoCb::stMarryInfoCb(const stMarryInfoCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMarryInfoCb::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  roomid_ = 0u;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMarryInfoCb::~stMarryInfoCb() {
  SharedDtor();
}

void stMarryInfoCb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMarryInfoCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMarryInfoCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMarryInfoCb_descriptor_;
}

const stMarryInfoCb& stMarryInfoCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stMarryInfoCb* stMarryInfoCb::default_instance_ = NULL;

stMarryInfoCb* stMarryInfoCb::New() const {
  return new stMarryInfoCb;
}

void stMarryInfoCb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    roomid_ = 0u;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMarryInfoCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomId;
        break;
      }

      // optional uint32 roomId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMarryInfoCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 roomId = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->roomid(), output);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMarryInfoCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 roomId = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->roomid(), target);
  }

  // optional uint32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMarryInfoCb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 roomId = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // optional uint32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMarryInfoCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMarryInfoCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMarryInfoCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMarryInfoCb::MergeFrom(const stMarryInfoCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMarryInfoCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMarryInfoCb::CopyFrom(const stMarryInfoCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMarryInfoCb::IsInitialized() const {

  return true;
}

void stMarryInfoCb::Swap(stMarryInfoCb* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(roomid_, other->roomid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMarryInfoCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMarryInfoCb_descriptor_;
  metadata.reflection = stMarryInfoCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUseFireWork_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseFireWork_ProtoModID_descriptor_;
}
bool stUseFireWork_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseFireWork_ProtoModID stUseFireWork::ModID;
const stUseFireWork_ProtoModID stUseFireWork::ProtoModID_MIN;
const stUseFireWork_ProtoModID stUseFireWork::ProtoModID_MAX;
const int stUseFireWork::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUseFireWork_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseFireWork_ProtoFunID_descriptor_;
}
bool stUseFireWork_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 172:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseFireWork_ProtoFunID stUseFireWork::FunID;
const stUseFireWork_ProtoFunID stUseFireWork::ProtoFunID_MIN;
const stUseFireWork_ProtoFunID stUseFireWork::ProtoFunID_MAX;
const int stUseFireWork::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUseFireWork::kCharIdFieldNumber;
const int stUseFireWork::kIndexFieldNumber;
const int stUseFireWork::kIdFieldNumber;
#endif  // !_MSC_VER

stUseFireWork::stUseFireWork()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUseFireWork::InitAsDefaultInstance() {
}

stUseFireWork::stUseFireWork(const stUseFireWork& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUseFireWork::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUseFireWork::~stUseFireWork() {
  SharedDtor();
}

void stUseFireWork::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUseFireWork::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUseFireWork::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseFireWork_descriptor_;
}

const stUseFireWork& stUseFireWork::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUseFireWork* stUseFireWork::default_instance_ = NULL;

stUseFireWork* stUseFireWork::New() const {
  return new stUseFireWork;
}

void stUseFireWork::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    index_ = 0u;
  }
  id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUseFireWork::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // repeated uint32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUseFireWork::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUseFireWork::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // repeated uint32 id = 3;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUseFireWork::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  // repeated uint32 id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUseFireWork::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUseFireWork* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUseFireWork*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUseFireWork::MergeFrom(const stUseFireWork& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUseFireWork::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUseFireWork::CopyFrom(const stUseFireWork& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUseFireWork::IsInitialized() const {

  return true;
}

void stUseFireWork::Swap(stUseFireWork* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(index_, other->index_);
    id_.Swap(&other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUseFireWork::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUseFireWork_descriptor_;
  metadata.reflection = stUseFireWork_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetMarryInfoToCouple_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetMarryInfoToCouple_ProtoModID_descriptor_;
}
bool stRetMarryInfoToCouple_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetMarryInfoToCouple_ProtoModID stRetMarryInfoToCouple::ModID;
const stRetMarryInfoToCouple_ProtoModID stRetMarryInfoToCouple::ProtoModID_MIN;
const stRetMarryInfoToCouple_ProtoModID stRetMarryInfoToCouple::ProtoModID_MAX;
const int stRetMarryInfoToCouple::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetMarryInfoToCouple_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetMarryInfoToCouple_ProtoFunID_descriptor_;
}
bool stRetMarryInfoToCouple_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 173:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetMarryInfoToCouple_ProtoFunID stRetMarryInfoToCouple::FunID;
const stRetMarryInfoToCouple_ProtoFunID stRetMarryInfoToCouple::ProtoFunID_MIN;
const stRetMarryInfoToCouple_ProtoFunID stRetMarryInfoToCouple::ProtoFunID_MAX;
const int stRetMarryInfoToCouple::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetMarryInfoToCouple::kHusbandFieldNumber;
const int stRetMarryInfoToCouple::kWifeFieldNumber;
#endif  // !_MSC_VER

stRetMarryInfoToCouple::stRetMarryInfoToCouple()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetMarryInfoToCouple::InitAsDefaultInstance() {
}

stRetMarryInfoToCouple::stRetMarryInfoToCouple(const stRetMarryInfoToCouple& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetMarryInfoToCouple::SharedCtor() {
  _cached_size_ = 0;
  husband_ = 0u;
  wife_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetMarryInfoToCouple::~stRetMarryInfoToCouple() {
  SharedDtor();
}

void stRetMarryInfoToCouple::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetMarryInfoToCouple::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetMarryInfoToCouple::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetMarryInfoToCouple_descriptor_;
}

const stRetMarryInfoToCouple& stRetMarryInfoToCouple::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetMarryInfoToCouple* stRetMarryInfoToCouple::default_instance_ = NULL;

stRetMarryInfoToCouple* stRetMarryInfoToCouple::New() const {
  return new stRetMarryInfoToCouple;
}

void stRetMarryInfoToCouple::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    husband_ = 0u;
    wife_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetMarryInfoToCouple::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 husband = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &husband_)));
          set_has_husband();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wife;
        break;
      }

      // optional uint32 wife = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wife:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wife_)));
          set_has_wife();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetMarryInfoToCouple::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 husband = 1;
  if (has_husband()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->husband(), output);
  }

  // optional uint32 wife = 2;
  if (has_wife()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wife(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetMarryInfoToCouple::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 husband = 1;
  if (has_husband()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->husband(), target);
  }

  // optional uint32 wife = 2;
  if (has_wife()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wife(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetMarryInfoToCouple::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 husband = 1;
    if (has_husband()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->husband());
    }

    // optional uint32 wife = 2;
    if (has_wife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wife());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetMarryInfoToCouple::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetMarryInfoToCouple* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetMarryInfoToCouple*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetMarryInfoToCouple::MergeFrom(const stRetMarryInfoToCouple& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_husband()) {
      set_husband(from.husband());
    }
    if (from.has_wife()) {
      set_wife(from.wife());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetMarryInfoToCouple::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetMarryInfoToCouple::CopyFrom(const stRetMarryInfoToCouple& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetMarryInfoToCouple::IsInitialized() const {

  return true;
}

void stRetMarryInfoToCouple::Swap(stRetMarryInfoToCouple* other) {
  if (other != this) {
    std::swap(husband_, other->husband_);
    std::swap(wife_, other->wife_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetMarryInfoToCouple::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetMarryInfoToCouple_descriptor_;
  metadata.reflection = stRetMarryInfoToCouple_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarryCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCoupleMarryCb_ProtoModID_descriptor_;
}
bool stNotifyCoupleMarryCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyCoupleMarryCb_ProtoModID stNotifyCoupleMarryCb::ModID;
const stNotifyCoupleMarryCb_ProtoModID stNotifyCoupleMarryCb::ProtoModID_MIN;
const stNotifyCoupleMarryCb_ProtoModID stNotifyCoupleMarryCb::ProtoModID_MAX;
const int stNotifyCoupleMarryCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyCoupleMarryCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCoupleMarryCb_ProtoFunID_descriptor_;
}
bool stNotifyCoupleMarryCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 174:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyCoupleMarryCb_ProtoFunID stNotifyCoupleMarryCb::FunID;
const stNotifyCoupleMarryCb_ProtoFunID stNotifyCoupleMarryCb::ProtoFunID_MIN;
const stNotifyCoupleMarryCb_ProtoFunID stNotifyCoupleMarryCb::ProtoFunID_MAX;
const int stNotifyCoupleMarryCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyCoupleMarryCb::kHusbandFieldNumber;
const int stNotifyCoupleMarryCb::kWifeFieldNumber;
const int stNotifyCoupleMarryCb::kRoomIdFieldNumber;
#endif  // !_MSC_VER

stNotifyCoupleMarryCb::stNotifyCoupleMarryCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyCoupleMarryCb::InitAsDefaultInstance() {
}

stNotifyCoupleMarryCb::stNotifyCoupleMarryCb(const stNotifyCoupleMarryCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyCoupleMarryCb::SharedCtor() {
  _cached_size_ = 0;
  husband_ = 0u;
  wife_ = 0u;
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyCoupleMarryCb::~stNotifyCoupleMarryCb() {
  SharedDtor();
}

void stNotifyCoupleMarryCb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyCoupleMarryCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyCoupleMarryCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCoupleMarryCb_descriptor_;
}

const stNotifyCoupleMarryCb& stNotifyCoupleMarryCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyCoupleMarryCb* stNotifyCoupleMarryCb::default_instance_ = NULL;

stNotifyCoupleMarryCb* stNotifyCoupleMarryCb::New() const {
  return new stNotifyCoupleMarryCb;
}

void stNotifyCoupleMarryCb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    husband_ = 0u;
    wife_ = 0u;
    roomid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyCoupleMarryCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 husband = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &husband_)));
          set_has_husband();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_wife;
        break;
      }

      // optional uint32 wife = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wife:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wife_)));
          set_has_wife();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_roomId;
        break;
      }

      // optional uint32 roomId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyCoupleMarryCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 husband = 1;
  if (has_husband()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->husband(), output);
  }

  // optional uint32 wife = 2;
  if (has_wife()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->wife(), output);
  }

  // optional uint32 roomId = 3;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyCoupleMarryCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 husband = 1;
  if (has_husband()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->husband(), target);
  }

  // optional uint32 wife = 2;
  if (has_wife()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->wife(), target);
  }

  // optional uint32 roomId = 3;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyCoupleMarryCb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 husband = 1;
    if (has_husband()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->husband());
    }

    // optional uint32 wife = 2;
    if (has_wife()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wife());
    }

    // optional uint32 roomId = 3;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyCoupleMarryCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyCoupleMarryCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyCoupleMarryCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyCoupleMarryCb::MergeFrom(const stNotifyCoupleMarryCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_husband()) {
      set_husband(from.husband());
    }
    if (from.has_wife()) {
      set_wife(from.wife());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyCoupleMarryCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyCoupleMarryCb::CopyFrom(const stNotifyCoupleMarryCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyCoupleMarryCb::IsInitialized() const {

  return true;
}

void stNotifyCoupleMarryCb::Swap(stNotifyCoupleMarryCb* other) {
  if (other != this) {
    std::swap(husband_, other->husband_);
    std::swap(wife_, other->wife_);
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyCoupleMarryCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyCoupleMarryCb_descriptor_;
  metadata.reflection = stNotifyCoupleMarryCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetForceDivorce_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetForceDivorce_ProtoModID_descriptor_;
}
bool stRetForceDivorce_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetForceDivorce_ProtoModID stRetForceDivorce::ModID;
const stRetForceDivorce_ProtoModID stRetForceDivorce::ProtoModID_MIN;
const stRetForceDivorce_ProtoModID stRetForceDivorce::ProtoModID_MAX;
const int stRetForceDivorce::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetForceDivorce_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetForceDivorce_ProtoFunID_descriptor_;
}
bool stRetForceDivorce_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 175:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetForceDivorce_ProtoFunID stRetForceDivorce::FunID;
const stRetForceDivorce_ProtoFunID stRetForceDivorce::ProtoFunID_MIN;
const stRetForceDivorce_ProtoFunID stRetForceDivorce::ProtoFunID_MAX;
const int stRetForceDivorce::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetForceDivorce::kCoupleAFieldNumber;
const int stRetForceDivorce::kCoupleBFieldNumber;
const int stRetForceDivorce::kCoupleOnlineFieldNumber;
#endif  // !_MSC_VER

stRetForceDivorce::stRetForceDivorce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetForceDivorce::InitAsDefaultInstance() {
}

stRetForceDivorce::stRetForceDivorce(const stRetForceDivorce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetForceDivorce::SharedCtor() {
  _cached_size_ = 0;
  couplea_ = 0u;
  coupleb_ = 0u;
  coupleonline_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetForceDivorce::~stRetForceDivorce() {
  SharedDtor();
}

void stRetForceDivorce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetForceDivorce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetForceDivorce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetForceDivorce_descriptor_;
}

const stRetForceDivorce& stRetForceDivorce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetForceDivorce* stRetForceDivorce::default_instance_ = NULL;

stRetForceDivorce* stRetForceDivorce::New() const {
  return new stRetForceDivorce;
}

void stRetForceDivorce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    couplea_ = 0u;
    coupleb_ = 0u;
    coupleonline_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetForceDivorce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 coupleA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &couplea_)));
          set_has_couplea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coupleB;
        break;
      }

      // optional uint32 coupleB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupleB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coupleb_)));
          set_has_coupleb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_coupleOnline;
        break;
      }

      // optional bool coupleOnline = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupleOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coupleonline_)));
          set_has_coupleonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetForceDivorce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 coupleA = 1;
  if (has_couplea()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->couplea(), output);
  }

  // optional uint32 coupleB = 2;
  if (has_coupleb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coupleb(), output);
  }

  // optional bool coupleOnline = 3;
  if (has_coupleonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->coupleonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetForceDivorce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 coupleA = 1;
  if (has_couplea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->couplea(), target);
  }

  // optional uint32 coupleB = 2;
  if (has_coupleb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coupleb(), target);
  }

  // optional bool coupleOnline = 3;
  if (has_coupleonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->coupleonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetForceDivorce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 coupleA = 1;
    if (has_couplea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->couplea());
    }

    // optional uint32 coupleB = 2;
    if (has_coupleb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coupleb());
    }

    // optional bool coupleOnline = 3;
    if (has_coupleonline()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetForceDivorce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetForceDivorce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetForceDivorce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetForceDivorce::MergeFrom(const stRetForceDivorce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_couplea()) {
      set_couplea(from.couplea());
    }
    if (from.has_coupleb()) {
      set_coupleb(from.coupleb());
    }
    if (from.has_coupleonline()) {
      set_coupleonline(from.coupleonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetForceDivorce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetForceDivorce::CopyFrom(const stRetForceDivorce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetForceDivorce::IsInitialized() const {

  return true;
}

void stRetForceDivorce::Swap(stRetForceDivorce* other) {
  if (other != this) {
    std::swap(couplea_, other->couplea_);
    std::swap(coupleb_, other->coupleb_);
    std::swap(coupleonline_, other->coupleonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetForceDivorce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetForceDivorce_descriptor_;
  metadata.reflection = stRetForceDivorce_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetForceDivorceCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetForceDivorceCb_ProtoModID_descriptor_;
}
bool stRetForceDivorceCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetForceDivorceCb_ProtoModID stRetForceDivorceCb::ModID;
const stRetForceDivorceCb_ProtoModID stRetForceDivorceCb::ProtoModID_MIN;
const stRetForceDivorceCb_ProtoModID stRetForceDivorceCb::ProtoModID_MAX;
const int stRetForceDivorceCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetForceDivorceCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetForceDivorceCb_ProtoFunID_descriptor_;
}
bool stRetForceDivorceCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 176:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetForceDivorceCb_ProtoFunID stRetForceDivorceCb::FunID;
const stRetForceDivorceCb_ProtoFunID stRetForceDivorceCb::ProtoFunID_MIN;
const stRetForceDivorceCb_ProtoFunID stRetForceDivorceCb::ProtoFunID_MAX;
const int stRetForceDivorceCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetForceDivorceCb::kIdFieldNumber;
const int stRetForceDivorceCb::kCoupleIdFieldNumber;
#endif  // !_MSC_VER

stRetForceDivorceCb::stRetForceDivorceCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetForceDivorceCb::InitAsDefaultInstance() {
}

stRetForceDivorceCb::stRetForceDivorceCb(const stRetForceDivorceCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetForceDivorceCb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetForceDivorceCb::~stRetForceDivorceCb() {
  SharedDtor();
}

void stRetForceDivorceCb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetForceDivorceCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetForceDivorceCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetForceDivorceCb_descriptor_;
}

const stRetForceDivorceCb& stRetForceDivorceCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetForceDivorceCb* stRetForceDivorceCb::default_instance_ = NULL;

stRetForceDivorceCb* stRetForceDivorceCb::New() const {
  return new stRetForceDivorceCb;
}

void stRetForceDivorceCb::Clear() {
  id_.Clear();
  coupleid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetForceDivorceCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(16)) goto parse_coupleId;
        break;
      }

      // repeated uint32 coupleId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_coupleid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_coupleid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coupleId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetForceDivorceCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->id(i), output);
  }

  // repeated uint32 coupleId = 2;
  for (int i = 0; i < this->coupleid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->coupleid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetForceDivorceCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->id(i), target);
  }

  // repeated uint32 coupleId = 2;
  for (int i = 0; i < this->coupleid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->coupleid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetForceDivorceCb::ByteSize() const {
  int total_size = 0;

  // repeated uint32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  // repeated uint32 coupleId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->coupleid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->coupleid(i));
    }
    total_size += 1 * this->coupleid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetForceDivorceCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetForceDivorceCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetForceDivorceCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetForceDivorceCb::MergeFrom(const stRetForceDivorceCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  coupleid_.MergeFrom(from.coupleid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetForceDivorceCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetForceDivorceCb::CopyFrom(const stRetForceDivorceCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetForceDivorceCb::IsInitialized() const {

  return true;
}

void stRetForceDivorceCb::Swap(stRetForceDivorceCb* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    coupleid_.Swap(&other->coupleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetForceDivorceCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetForceDivorceCb_descriptor_;
  metadata.reflection = stRetForceDivorceCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRejectDivorce_ProtoModID_descriptor_;
}
bool stRetRejectDivorce_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRejectDivorce_ProtoModID stRetRejectDivorce::ModID;
const stRetRejectDivorce_ProtoModID stRetRejectDivorce::ProtoModID_MIN;
const stRetRejectDivorce_ProtoModID stRetRejectDivorce::ProtoModID_MAX;
const int stRetRejectDivorce::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRejectDivorce_ProtoFunID_descriptor_;
}
bool stRetRejectDivorce_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 177:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetRejectDivorce_ProtoFunID stRetRejectDivorce::FunID;
const stRetRejectDivorce_ProtoFunID stRetRejectDivorce::ProtoFunID_MIN;
const stRetRejectDivorce_ProtoFunID stRetRejectDivorce::ProtoFunID_MAX;
const int stRetRejectDivorce::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetRejectDivorce::kCoupleIdFieldNumber;
const int stRetRejectDivorce::kTimeFieldNumber;
#endif  // !_MSC_VER

stRetRejectDivorce::stRetRejectDivorce()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetRejectDivorce::InitAsDefaultInstance() {
}

stRetRejectDivorce::stRetRejectDivorce(const stRetRejectDivorce& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetRejectDivorce::SharedCtor() {
  _cached_size_ = 0;
  coupleid_ = 0u;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetRejectDivorce::~stRetRejectDivorce() {
  SharedDtor();
}

void stRetRejectDivorce::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetRejectDivorce::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetRejectDivorce::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetRejectDivorce_descriptor_;
}

const stRetRejectDivorce& stRetRejectDivorce::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetRejectDivorce* stRetRejectDivorce::default_instance_ = NULL;

stRetRejectDivorce* stRetRejectDivorce::New() const {
  return new stRetRejectDivorce;
}

void stRetRejectDivorce::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coupleid_ = 0u;
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetRejectDivorce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 coupleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coupleid_)));
          set_has_coupleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetRejectDivorce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 coupleId = 1;
  if (has_coupleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coupleid(), output);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetRejectDivorce::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 coupleId = 1;
  if (has_coupleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coupleid(), target);
  }

  // optional uint32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetRejectDivorce::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 coupleId = 1;
    if (has_coupleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coupleid());
    }

    // optional uint32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetRejectDivorce::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetRejectDivorce* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetRejectDivorce*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetRejectDivorce::MergeFrom(const stRetRejectDivorce& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coupleid()) {
      set_coupleid(from.coupleid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetRejectDivorce::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetRejectDivorce::CopyFrom(const stRetRejectDivorce& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetRejectDivorce::IsInitialized() const {

  return true;
}

void stRetRejectDivorce::Swap(stRetRejectDivorce* other) {
  if (other != this) {
    std::swap(coupleid_, other->coupleid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetRejectDivorce::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetRejectDivorce_descriptor_;
  metadata.reflection = stRetRejectDivorce_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDelUserOnlineMarryInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDelUserOnlineMarryInfo_ProtoModID_descriptor_;
}
bool stRetDelUserOnlineMarryInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDelUserOnlineMarryInfo_ProtoModID stRetDelUserOnlineMarryInfo::ModID;
const stRetDelUserOnlineMarryInfo_ProtoModID stRetDelUserOnlineMarryInfo::ProtoModID_MIN;
const stRetDelUserOnlineMarryInfo_ProtoModID stRetDelUserOnlineMarryInfo::ProtoModID_MAX;
const int stRetDelUserOnlineMarryInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDelUserOnlineMarryInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDelUserOnlineMarryInfo_ProtoFunID_descriptor_;
}
bool stRetDelUserOnlineMarryInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 178:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDelUserOnlineMarryInfo_ProtoFunID stRetDelUserOnlineMarryInfo::FunID;
const stRetDelUserOnlineMarryInfo_ProtoFunID stRetDelUserOnlineMarryInfo::ProtoFunID_MIN;
const stRetDelUserOnlineMarryInfo_ProtoFunID stRetDelUserOnlineMarryInfo::ProtoFunID_MAX;
const int stRetDelUserOnlineMarryInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDelUserOnlineMarryInfo::kIdFieldNumber;
#endif  // !_MSC_VER

stRetDelUserOnlineMarryInfo::stRetDelUserOnlineMarryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDelUserOnlineMarryInfo::InitAsDefaultInstance() {
}

stRetDelUserOnlineMarryInfo::stRetDelUserOnlineMarryInfo(const stRetDelUserOnlineMarryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDelUserOnlineMarryInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDelUserOnlineMarryInfo::~stRetDelUserOnlineMarryInfo() {
  SharedDtor();
}

void stRetDelUserOnlineMarryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDelUserOnlineMarryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDelUserOnlineMarryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDelUserOnlineMarryInfo_descriptor_;
}

const stRetDelUserOnlineMarryInfo& stRetDelUserOnlineMarryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetDelUserOnlineMarryInfo* stRetDelUserOnlineMarryInfo::default_instance_ = NULL;

stRetDelUserOnlineMarryInfo* stRetDelUserOnlineMarryInfo::New() const {
  return new stRetDelUserOnlineMarryInfo;
}

void stRetDelUserOnlineMarryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDelUserOnlineMarryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDelUserOnlineMarryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDelUserOnlineMarryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDelUserOnlineMarryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDelUserOnlineMarryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDelUserOnlineMarryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDelUserOnlineMarryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDelUserOnlineMarryInfo::MergeFrom(const stRetDelUserOnlineMarryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDelUserOnlineMarryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDelUserOnlineMarryInfo::CopyFrom(const stRetDelUserOnlineMarryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDelUserOnlineMarryInfo::IsInitialized() const {

  return true;
}

void stRetDelUserOnlineMarryInfo::Swap(stRetDelUserOnlineMarryInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDelUserOnlineMarryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDelUserOnlineMarryInfo_descriptor_;
  metadata.reflection = stRetDelUserOnlineMarryInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSynGuildBlackMarketLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSynGuildBlackMarketLv_ProtoModID_descriptor_;
}
bool stReqSynGuildBlackMarketLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSynGuildBlackMarketLv_ProtoModID stReqSynGuildBlackMarketLv::ModID;
const stReqSynGuildBlackMarketLv_ProtoModID stReqSynGuildBlackMarketLv::ProtoModID_MIN;
const stReqSynGuildBlackMarketLv_ProtoModID stReqSynGuildBlackMarketLv::ProtoModID_MAX;
const int stReqSynGuildBlackMarketLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSynGuildBlackMarketLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSynGuildBlackMarketLv_ProtoFunID_descriptor_;
}
bool stReqSynGuildBlackMarketLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 179:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSynGuildBlackMarketLv_ProtoFunID stReqSynGuildBlackMarketLv::FunID;
const stReqSynGuildBlackMarketLv_ProtoFunID stReqSynGuildBlackMarketLv::ProtoFunID_MIN;
const stReqSynGuildBlackMarketLv_ProtoFunID stReqSynGuildBlackMarketLv::ProtoFunID_MAX;
const int stReqSynGuildBlackMarketLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSynGuildBlackMarketLv::kCharidFieldNumber;
#endif  // !_MSC_VER

stReqSynGuildBlackMarketLv::stReqSynGuildBlackMarketLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSynGuildBlackMarketLv::InitAsDefaultInstance() {
}

stReqSynGuildBlackMarketLv::stReqSynGuildBlackMarketLv(const stReqSynGuildBlackMarketLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSynGuildBlackMarketLv::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSynGuildBlackMarketLv::~stReqSynGuildBlackMarketLv() {
  SharedDtor();
}

void stReqSynGuildBlackMarketLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSynGuildBlackMarketLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSynGuildBlackMarketLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSynGuildBlackMarketLv_descriptor_;
}

const stReqSynGuildBlackMarketLv& stReqSynGuildBlackMarketLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqSynGuildBlackMarketLv* stReqSynGuildBlackMarketLv::default_instance_ = NULL;

stReqSynGuildBlackMarketLv* stReqSynGuildBlackMarketLv::New() const {
  return new stReqSynGuildBlackMarketLv;
}

void stReqSynGuildBlackMarketLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSynGuildBlackMarketLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSynGuildBlackMarketLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSynGuildBlackMarketLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSynGuildBlackMarketLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSynGuildBlackMarketLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSynGuildBlackMarketLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSynGuildBlackMarketLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSynGuildBlackMarketLv::MergeFrom(const stReqSynGuildBlackMarketLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSynGuildBlackMarketLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSynGuildBlackMarketLv::CopyFrom(const stReqSynGuildBlackMarketLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSynGuildBlackMarketLv::IsInitialized() const {

  return true;
}

void stReqSynGuildBlackMarketLv::Swap(stReqSynGuildBlackMarketLv* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSynGuildBlackMarketLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSynGuildBlackMarketLv_descriptor_;
  metadata.reflection = stReqSynGuildBlackMarketLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynGuildBlackMarketLvResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildBlackMarketLvResult_ProtoModID_descriptor_;
}
bool stSynGuildBlackMarketLvResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGuildBlackMarketLvResult_ProtoModID stSynGuildBlackMarketLvResult::ModID;
const stSynGuildBlackMarketLvResult_ProtoModID stSynGuildBlackMarketLvResult::ProtoModID_MIN;
const stSynGuildBlackMarketLvResult_ProtoModID stSynGuildBlackMarketLvResult::ProtoModID_MAX;
const int stSynGuildBlackMarketLvResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynGuildBlackMarketLvResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildBlackMarketLvResult_ProtoFunID_descriptor_;
}
bool stSynGuildBlackMarketLvResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 180:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGuildBlackMarketLvResult_ProtoFunID stSynGuildBlackMarketLvResult::FunID;
const stSynGuildBlackMarketLvResult_ProtoFunID stSynGuildBlackMarketLvResult::ProtoFunID_MIN;
const stSynGuildBlackMarketLvResult_ProtoFunID stSynGuildBlackMarketLvResult::ProtoFunID_MAX;
const int stSynGuildBlackMarketLvResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynGuildBlackMarketLvResult::kLvFieldNumber;
const int stSynGuildBlackMarketLvResult::kCharidFieldNumber;
#endif  // !_MSC_VER

stSynGuildBlackMarketLvResult::stSynGuildBlackMarketLvResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynGuildBlackMarketLvResult::InitAsDefaultInstance() {
}

stSynGuildBlackMarketLvResult::stSynGuildBlackMarketLvResult(const stSynGuildBlackMarketLvResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynGuildBlackMarketLvResult::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynGuildBlackMarketLvResult::~stSynGuildBlackMarketLvResult() {
  SharedDtor();
}

void stSynGuildBlackMarketLvResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynGuildBlackMarketLvResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynGuildBlackMarketLvResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildBlackMarketLvResult_descriptor_;
}

const stSynGuildBlackMarketLvResult& stSynGuildBlackMarketLvResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynGuildBlackMarketLvResult* stSynGuildBlackMarketLvResult::default_instance_ = NULL;

stSynGuildBlackMarketLvResult* stSynGuildBlackMarketLvResult::New() const {
  return new stSynGuildBlackMarketLvResult;
}

void stSynGuildBlackMarketLvResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynGuildBlackMarketLvResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynGuildBlackMarketLvResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynGuildBlackMarketLvResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lv(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynGuildBlackMarketLvResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynGuildBlackMarketLvResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynGuildBlackMarketLvResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynGuildBlackMarketLvResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynGuildBlackMarketLvResult::MergeFrom(const stSynGuildBlackMarketLvResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynGuildBlackMarketLvResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynGuildBlackMarketLvResult::CopyFrom(const stSynGuildBlackMarketLvResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynGuildBlackMarketLvResult::IsInitialized() const {

  return true;
}

void stSynGuildBlackMarketLvResult::Swap(stSynGuildBlackMarketLvResult* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynGuildBlackMarketLvResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynGuildBlackMarketLvResult_descriptor_;
  metadata.reflection = stSynGuildBlackMarketLvResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGloryUserPart::kCharIDFieldNumber;
const int stGloryUserPart::kAreaCodeFieldNumber;
const int stGloryUserPart::kNameFieldNumber;
const int stGloryUserPart::kJobFieldNumber;
const int stGloryUserPart::kSexFieldNumber;
const int stGloryUserPart::kLevelFieldNumber;
const int stGloryUserPart::kBattlePowerFieldNumber;
const int stGloryUserPart::kHeadIDFieldNumber;
const int stGloryUserPart::kBodyIDFieldNumber;
const int stGloryUserPart::kWeaponIDFieldNumber;
const int stGloryUserPart::kCloackIDFieldNumber;
const int stGloryUserPart::kWingIDFieldNumber;
const int stGloryUserPart::kShoeIDFieldNumber;
const int stGloryUserPart::kFashionHairFieldNumber;
const int stGloryUserPart::kFashionFaceFieldNumber;
const int stGloryUserPart::kFashionBodyFieldNumber;
const int stGloryUserPart::kFashionWeaponFieldNumber;
const int stGloryUserPart::kFashionShoeFieldNumber;
const int stGloryUserPart::kFashionDecorationFieldNumber;
const int stGloryUserPart::kEffectIDFieldNumber;
const int stGloryUserPart::kWingBreakLvFieldNumber;
#endif  // !_MSC_VER

stGloryUserPart::stGloryUserPart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGloryUserPart::InitAsDefaultInstance() {
}

stGloryUserPart::stGloryUserPart(const stGloryUserPart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGloryUserPart::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  areacode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  battlepower_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGloryUserPart::~stGloryUserPart() {
  SharedDtor();
}

void stGloryUserPart::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stGloryUserPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGloryUserPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryUserPart_descriptor_;
}

const stGloryUserPart& stGloryUserPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGloryUserPart* stGloryUserPart::default_instance_ = NULL;

stGloryUserPart* stGloryUserPart::New() const {
  return new stGloryUserPart;
}

void stGloryUserPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    areacode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    battlepower_ = 0u;
    headid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
    fashionbody_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGloryUserPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGloryUserPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->areacode(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional uint32 headID = 8;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->headid(), output);
  }

  // optional uint32 bodyID = 9;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bodyid(), output);
  }

  // optional uint32 weaponID = 10;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weaponid(), output);
  }

  // optional uint32 cloackID = 11;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cloackid(), output);
  }

  // optional uint32 wingID = 12;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->wingid(), output);
  }

  // optional uint32 shoeID = 13;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 14;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 15;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 16;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 17;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 18;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 19;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 20;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 21;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->wingbreaklv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGloryUserPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->areacode(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional uint32 headID = 8;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->headid(), target);
  }

  // optional uint32 bodyID = 9;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bodyid(), target);
  }

  // optional uint32 weaponID = 10;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weaponid(), target);
  }

  // optional uint32 cloackID = 11;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cloackid(), target);
  }

  // optional uint32 wingID = 12;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->wingid(), target);
  }

  // optional uint32 shoeID = 13;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 14;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 15;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 16;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 17;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 18;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 19;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 20;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 21;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->wingbreaklv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGloryUserPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 areaCode = 2;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 headID = 8;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 bodyID = 9;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 10;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 11;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 12;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 13;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 14;
    if (has_fashionhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 15;
    if (has_fashionface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

    // optional uint32 fashionBody = 16;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionWeapon = 17;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 18;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 19;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 20;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 21;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGloryUserPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGloryUserPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGloryUserPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGloryUserPart::MergeFrom(const stGloryUserPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGloryUserPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGloryUserPart::CopyFrom(const stGloryUserPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGloryUserPart::IsInitialized() const {

  return true;
}

void stGloryUserPart::Swap(stGloryUserPart* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(areacode_, other->areacode_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGloryUserPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGloryUserPart_descriptor_;
  metadata.reflection = stGloryUserPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGloryUserDetail::kCharIDFieldNumber;
const int stGloryUserDetail::kAreaCodeFieldNumber;
const int stGloryUserDetail::kNameFieldNumber;
const int stGloryUserDetail::kJobFieldNumber;
const int stGloryUserDetail::kSexFieldNumber;
const int stGloryUserDetail::kLevelFieldNumber;
const int stGloryUserDetail::kBattlePowerFieldNumber;
const int stGloryUserDetail::kHeadIDFieldNumber;
const int stGloryUserDetail::kBodyIDFieldNumber;
const int stGloryUserDetail::kWeaponIDFieldNumber;
const int stGloryUserDetail::kCloackIDFieldNumber;
const int stGloryUserDetail::kWingIDFieldNumber;
const int stGloryUserDetail::kShoeIDFieldNumber;
const int stGloryUserDetail::kFashionHairFieldNumber;
const int stGloryUserDetail::kFashionFaceFieldNumber;
const int stGloryUserDetail::kFashionBodyFieldNumber;
const int stGloryUserDetail::kFashionWeaponFieldNumber;
const int stGloryUserDetail::kFashionShoeFieldNumber;
const int stGloryUserDetail::kFashionDecorationFieldNumber;
const int stGloryUserDetail::kEffectIDFieldNumber;
const int stGloryUserDetail::kWingBreakLvFieldNumber;
const int stGloryUserDetail::kKillNumFieldNumber;
const int stGloryUserDetail::kEvenKillNumFieldNumber;
const int stGloryUserDetail::kTotalKillNumFieldNumber;
const int stGloryUserDetail::kGloryValFieldNumber;
const int stGloryUserDetail::kGloryActionTimeFieldNumber;
const int stGloryUserDetail::kProstatedNumFieldNumber;
const int stGloryUserDetail::kProstateTimeFieldNumber;
const int stGloryUserDetail::kNormalIdFieldNumber;
#endif  // !_MSC_VER

stGloryUserDetail::stGloryUserDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGloryUserDetail::InitAsDefaultInstance() {
}

stGloryUserDetail::stGloryUserDetail(const stGloryUserDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGloryUserDetail::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  areacode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  battlepower_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  killnum_ = 0u;
  evenkillnum_ = 0u;
  totalkillnum_ = 0u;
  gloryval_ = 0u;
  gloryactiontime_ = 0u;
  prostatednum_ = 0u;
  prostatetime_ = 0u;
  normalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGloryUserDetail::~stGloryUserDetail() {
  SharedDtor();
}

void stGloryUserDetail::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stGloryUserDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGloryUserDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryUserDetail_descriptor_;
}

const stGloryUserDetail& stGloryUserDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGloryUserDetail* stGloryUserDetail::default_instance_ = NULL;

stGloryUserDetail* stGloryUserDetail::New() const {
  return new stGloryUserDetail;
}

void stGloryUserDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    areacode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    battlepower_ = 0u;
    headid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
    fashionbody_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    killnum_ = 0u;
    evenkillnum_ = 0u;
    totalkillnum_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    gloryval_ = 0u;
    gloryactiontime_ = 0u;
    prostatednum_ = 0u;
    prostatetime_ = 0u;
    normalid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGloryUserDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_evenKillNum;
        break;
      }

      // optional uint32 evenKillNum = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evenKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evenkillnum_)));
          set_has_evenkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_totalKillNum;
        break;
      }

      // optional uint32 totalKillNum = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalkillnum_)));
          set_has_totalkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_gloryVal;
        break;
      }

      // optional uint32 gloryVal = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryval_)));
          set_has_gloryval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_gloryActionTime;
        break;
      }

      // optional uint32 gloryActionTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryActionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryactiontime_)));
          set_has_gloryactiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_prostatedNum;
        break;
      }

      // optional uint32 prostatedNum = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prostatedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostatednum_)));
          set_has_prostatednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_prostateTime;
        break;
      }

      // optional uint32 prostateTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prostateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostatetime_)));
          set_has_prostatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_normalId;
        break;
      }

      // optional uint32 normalId = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalid_)));
          set_has_normalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGloryUserDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->areacode(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional uint32 headID = 8;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->headid(), output);
  }

  // optional uint32 bodyID = 9;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bodyid(), output);
  }

  // optional uint32 weaponID = 10;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weaponid(), output);
  }

  // optional uint32 cloackID = 11;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cloackid(), output);
  }

  // optional uint32 wingID = 12;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->wingid(), output);
  }

  // optional uint32 shoeID = 13;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 14;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 15;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 16;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 17;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 18;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 19;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 20;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 21;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->wingbreaklv(), output);
  }

  // optional uint32 killNum = 22;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->killnum(), output);
  }

  // optional uint32 evenKillNum = 23;
  if (has_evenkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->evenkillnum(), output);
  }

  // optional uint32 totalKillNum = 24;
  if (has_totalkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->totalkillnum(), output);
  }

  // optional uint32 gloryVal = 25;
  if (has_gloryval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->gloryval(), output);
  }

  // optional uint32 gloryActionTime = 26;
  if (has_gloryactiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->gloryactiontime(), output);
  }

  // optional uint32 prostatedNum = 27;
  if (has_prostatednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->prostatednum(), output);
  }

  // optional uint32 prostateTime = 28;
  if (has_prostatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->prostatetime(), output);
  }

  // optional uint32 normalId = 29;
  if (has_normalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->normalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGloryUserDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->areacode(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional uint32 headID = 8;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->headid(), target);
  }

  // optional uint32 bodyID = 9;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bodyid(), target);
  }

  // optional uint32 weaponID = 10;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weaponid(), target);
  }

  // optional uint32 cloackID = 11;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cloackid(), target);
  }

  // optional uint32 wingID = 12;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->wingid(), target);
  }

  // optional uint32 shoeID = 13;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 14;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 15;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 16;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 17;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 18;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 19;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 20;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 21;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->wingbreaklv(), target);
  }

  // optional uint32 killNum = 22;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->killnum(), target);
  }

  // optional uint32 evenKillNum = 23;
  if (has_evenkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->evenkillnum(), target);
  }

  // optional uint32 totalKillNum = 24;
  if (has_totalkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->totalkillnum(), target);
  }

  // optional uint32 gloryVal = 25;
  if (has_gloryval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->gloryval(), target);
  }

  // optional uint32 gloryActionTime = 26;
  if (has_gloryactiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->gloryactiontime(), target);
  }

  // optional uint32 prostatedNum = 27;
  if (has_prostatednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->prostatednum(), target);
  }

  // optional uint32 prostateTime = 28;
  if (has_prostatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->prostatetime(), target);
  }

  // optional uint32 normalId = 29;
  if (has_normalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->normalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGloryUserDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 areaCode = 2;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 headID = 8;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 bodyID = 9;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 10;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 11;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 12;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 13;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 14;
    if (has_fashionhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 15;
    if (has_fashionface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

    // optional uint32 fashionBody = 16;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionWeapon = 17;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 18;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 19;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 20;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 21;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 killNum = 22;
    if (has_killnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 evenKillNum = 23;
    if (has_evenkillnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evenkillnum());
    }

    // optional uint32 totalKillNum = 24;
    if (has_totalkillnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalkillnum());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 gloryVal = 25;
    if (has_gloryval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryval());
    }

    // optional uint32 gloryActionTime = 26;
    if (has_gloryactiontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryactiontime());
    }

    // optional uint32 prostatedNum = 27;
    if (has_prostatednum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostatednum());
    }

    // optional uint32 prostateTime = 28;
    if (has_prostatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostatetime());
    }

    // optional uint32 normalId = 29;
    if (has_normalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGloryUserDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGloryUserDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGloryUserDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGloryUserDetail::MergeFrom(const stGloryUserDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_evenkillnum()) {
      set_evenkillnum(from.evenkillnum());
    }
    if (from.has_totalkillnum()) {
      set_totalkillnum(from.totalkillnum());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gloryval()) {
      set_gloryval(from.gloryval());
    }
    if (from.has_gloryactiontime()) {
      set_gloryactiontime(from.gloryactiontime());
    }
    if (from.has_prostatednum()) {
      set_prostatednum(from.prostatednum());
    }
    if (from.has_prostatetime()) {
      set_prostatetime(from.prostatetime());
    }
    if (from.has_normalid()) {
      set_normalid(from.normalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGloryUserDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGloryUserDetail::CopyFrom(const stGloryUserDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGloryUserDetail::IsInitialized() const {

  return true;
}

void stGloryUserDetail::Swap(stGloryUserDetail* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(areacode_, other->areacode_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(killnum_, other->killnum_);
    std::swap(evenkillnum_, other->evenkillnum_);
    std::swap(totalkillnum_, other->totalkillnum_);
    std::swap(gloryval_, other->gloryval_);
    std::swap(gloryactiontime_, other->gloryactiontime_);
    std::swap(prostatednum_, other->prostatednum_);
    std::swap(prostatetime_, other->prostatetime_);
    std::swap(normalid_, other->normalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGloryUserDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGloryUserDetail_descriptor_;
  metadata.reflection = stGloryUserDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGloryUser::kCharIDFieldNumber;
const int stGloryUser::kAreaCodeFieldNumber;
const int stGloryUser::kNameFieldNumber;
const int stGloryUser::kKillNumFieldNumber;
const int stGloryUser::kEvenKillNumFieldNumber;
const int stGloryUser::kTotalKillNumFieldNumber;
const int stGloryUser::kGloryValFieldNumber;
const int stGloryUser::kGloryActionTimeFieldNumber;
const int stGloryUser::kProstatedNumFieldNumber;
const int stGloryUser::kProstateTimeFieldNumber;
const int stGloryUser::kNormalIdFieldNumber;
#endif  // !_MSC_VER

stGloryUser::stGloryUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGloryUser::InitAsDefaultInstance() {
}

stGloryUser::stGloryUser(const stGloryUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGloryUser::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  areacode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  killnum_ = 0u;
  evenkillnum_ = 0u;
  totalkillnum_ = 0u;
  gloryval_ = 0u;
  gloryactiontime_ = 0u;
  prostatednum_ = 0u;
  prostatetime_ = 0u;
  normalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGloryUser::~stGloryUser() {
  SharedDtor();
}

void stGloryUser::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stGloryUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGloryUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryUser_descriptor_;
}

const stGloryUser& stGloryUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGloryUser* stGloryUser::default_instance_ = NULL;

stGloryUser* stGloryUser::New() const {
  return new stGloryUser;
}

void stGloryUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    areacode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    killnum_ = 0u;
    evenkillnum_ = 0u;
    totalkillnum_ = 0u;
    gloryval_ = 0u;
    gloryactiontime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    prostatednum_ = 0u;
    prostatetime_ = 0u;
    normalid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGloryUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_evenKillNum;
        break;
      }

      // optional uint32 evenKillNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evenKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evenkillnum_)));
          set_has_evenkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalKillNum;
        break;
      }

      // optional uint32 totalKillNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalkillnum_)));
          set_has_totalkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gloryVal;
        break;
      }

      // optional uint32 gloryVal = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryval_)));
          set_has_gloryval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gloryActionTime;
        break;
      }

      // optional uint32 gloryActionTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryActionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryactiontime_)));
          set_has_gloryactiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_prostatedNum;
        break;
      }

      // optional uint32 prostatedNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prostatedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostatednum_)));
          set_has_prostatednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_prostateTime;
        break;
      }

      // optional uint32 prostateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prostateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostatetime_)));
          set_has_prostatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_normalId;
        break;
      }

      // optional uint32 normalId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalid_)));
          set_has_normalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGloryUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->areacode(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 killNum = 4;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killnum(), output);
  }

  // optional uint32 evenKillNum = 5;
  if (has_evenkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->evenkillnum(), output);
  }

  // optional uint32 totalKillNum = 6;
  if (has_totalkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->totalkillnum(), output);
  }

  // optional uint32 gloryVal = 7;
  if (has_gloryval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gloryval(), output);
  }

  // optional uint32 gloryActionTime = 8;
  if (has_gloryactiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gloryactiontime(), output);
  }

  // optional uint32 prostatedNum = 9;
  if (has_prostatednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->prostatednum(), output);
  }

  // optional uint32 prostateTime = 10;
  if (has_prostatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->prostatetime(), output);
  }

  // optional uint32 normalId = 11;
  if (has_normalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->normalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGloryUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->areacode(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 killNum = 4;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killnum(), target);
  }

  // optional uint32 evenKillNum = 5;
  if (has_evenkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->evenkillnum(), target);
  }

  // optional uint32 totalKillNum = 6;
  if (has_totalkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->totalkillnum(), target);
  }

  // optional uint32 gloryVal = 7;
  if (has_gloryval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gloryval(), target);
  }

  // optional uint32 gloryActionTime = 8;
  if (has_gloryactiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gloryactiontime(), target);
  }

  // optional uint32 prostatedNum = 9;
  if (has_prostatednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->prostatednum(), target);
  }

  // optional uint32 prostateTime = 10;
  if (has_prostatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->prostatetime(), target);
  }

  // optional uint32 normalId = 11;
  if (has_normalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->normalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGloryUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 areaCode = 2;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 killNum = 4;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 evenKillNum = 5;
    if (has_evenkillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evenkillnum());
    }

    // optional uint32 totalKillNum = 6;
    if (has_totalkillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalkillnum());
    }

    // optional uint32 gloryVal = 7;
    if (has_gloryval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryval());
    }

    // optional uint32 gloryActionTime = 8;
    if (has_gloryactiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryactiontime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 prostatedNum = 9;
    if (has_prostatednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostatednum());
    }

    // optional uint32 prostateTime = 10;
    if (has_prostatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostatetime());
    }

    // optional uint32 normalId = 11;
    if (has_normalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGloryUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGloryUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGloryUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGloryUser::MergeFrom(const stGloryUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_evenkillnum()) {
      set_evenkillnum(from.evenkillnum());
    }
    if (from.has_totalkillnum()) {
      set_totalkillnum(from.totalkillnum());
    }
    if (from.has_gloryval()) {
      set_gloryval(from.gloryval());
    }
    if (from.has_gloryactiontime()) {
      set_gloryactiontime(from.gloryactiontime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prostatednum()) {
      set_prostatednum(from.prostatednum());
    }
    if (from.has_prostatetime()) {
      set_prostatetime(from.prostatetime());
    }
    if (from.has_normalid()) {
      set_normalid(from.normalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGloryUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGloryUser::CopyFrom(const stGloryUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGloryUser::IsInitialized() const {

  return true;
}

void stGloryUser::Swap(stGloryUser* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(areacode_, other->areacode_);
    std::swap(name_, other->name_);
    std::swap(killnum_, other->killnum_);
    std::swap(evenkillnum_, other->evenkillnum_);
    std::swap(totalkillnum_, other->totalkillnum_);
    std::swap(gloryval_, other->gloryval_);
    std::swap(gloryactiontime_, other->gloryactiontime_);
    std::swap(prostatednum_, other->prostatednum_);
    std::swap(prostatetime_, other->prostatetime_);
    std::swap(normalid_, other->normalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGloryUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGloryUser_descriptor_;
  metadata.reflection = stGloryUser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterResBattle_ProtoModID_descriptor_;
}
bool stEnterResBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterResBattle_ProtoModID stEnterResBattle::ModID;
const stEnterResBattle_ProtoModID stEnterResBattle::ProtoModID_MIN;
const stEnterResBattle_ProtoModID stEnterResBattle::ProtoModID_MAX;
const int stEnterResBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterResBattle_ProtoFunID_descriptor_;
}
bool stEnterResBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 181:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterResBattle_ProtoFunID stEnterResBattle::FunID;
const stEnterResBattle_ProtoFunID stEnterResBattle::ProtoFunID_MIN;
const stEnterResBattle_ProtoFunID stEnterResBattle::ProtoFunID_MAX;
const int stEnterResBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEnterResBattle::kCharIdFieldNumber;
const int stEnterResBattle::kCopyMapLevelFieldNumber;
const int stEnterResBattle::kGuildIdFieldNumber;
const int stEnterResBattle::kSelfFieldNumber;
#endif  // !_MSC_VER

stEnterResBattle::stEnterResBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterResBattle::InitAsDefaultInstance() {
  self_ = const_cast< ::Global::stGloryUser*>(&::Global::stGloryUser::default_instance());
}

stEnterResBattle::stEnterResBattle(const stEnterResBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterResBattle::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  copymaplevel_ = 0u;
  guildid_ = 0u;
  self_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterResBattle::~stEnterResBattle() {
  SharedDtor();
}

void stEnterResBattle::SharedDtor() {
  if (this != default_instance_) {
    delete self_;
  }
}

void stEnterResBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterResBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterResBattle_descriptor_;
}

const stEnterResBattle& stEnterResBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stEnterResBattle* stEnterResBattle::default_instance_ = NULL;

stEnterResBattle* stEnterResBattle::New() const {
  return new stEnterResBattle;
}

void stEnterResBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    copymaplevel_ = 0u;
    guildid_ = 0u;
    if (has_self()) {
      if (self_ != NULL) self_->::Global::stGloryUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterResBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copyMapLevel;
        break;
      }

      // optional uint32 copyMapLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyMapLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymaplevel_)));
          set_has_copymaplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildId;
        break;
      }

      // optional uint32 guildId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_self;
        break;
      }

      // optional .Global.stGloryUser self = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterResBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 copyMapLevel = 2;
  if (has_copymaplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymaplevel(), output);
  }

  // optional uint32 guildId = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guildid(), output);
  }

  // optional .Global.stGloryUser self = 4;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->self(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterResBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 copyMapLevel = 2;
  if (has_copymaplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymaplevel(), target);
  }

  // optional uint32 guildId = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guildid(), target);
  }

  // optional .Global.stGloryUser self = 4;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->self(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterResBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 copyMapLevel = 2;
    if (has_copymaplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymaplevel());
    }

    // optional uint32 guildId = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional .Global.stGloryUser self = 4;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterResBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterResBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterResBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterResBattle::MergeFrom(const stEnterResBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_copymaplevel()) {
      set_copymaplevel(from.copymaplevel());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_self()) {
      mutable_self()->::Global::stGloryUser::MergeFrom(from.self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterResBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterResBattle::CopyFrom(const stEnterResBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterResBattle::IsInitialized() const {

  return true;
}

void stEnterResBattle::Swap(stEnterResBattle* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(copymaplevel_, other->copymaplevel_);
    std::swap(guildid_, other->guildid_);
    std::swap(self_, other->self_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterResBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterResBattle_descriptor_;
  metadata.reflection = stEnterResBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadResBattleInvite_ProtoModID_descriptor_;
}
bool stBroadResBattleInvite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadResBattleInvite_ProtoModID stBroadResBattleInvite::ModID;
const stBroadResBattleInvite_ProtoModID stBroadResBattleInvite::ProtoModID_MIN;
const stBroadResBattleInvite_ProtoModID stBroadResBattleInvite::ProtoModID_MAX;
const int stBroadResBattleInvite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadResBattleInvite_ProtoFunID_descriptor_;
}
bool stBroadResBattleInvite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 182:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadResBattleInvite_ProtoFunID stBroadResBattleInvite::FunID;
const stBroadResBattleInvite_ProtoFunID stBroadResBattleInvite::ProtoFunID_MIN;
const stBroadResBattleInvite_ProtoFunID stBroadResBattleInvite::ProtoFunID_MAX;
const int stBroadResBattleInvite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBroadResBattleInvite::kCharIdFieldNumber;
const int stBroadResBattleInvite::kNameFieldNumber;
const int stBroadResBattleInvite::kGuildIdFieldNumber;
const int stBroadResBattleInvite::kJobFieldNumber;
const int stBroadResBattleInvite::kSexFieldNumber;
const int stBroadResBattleInvite::kBattlePowerFieldNumber;
const int stBroadResBattleInvite::kVipLvFieldNumber;
const int stBroadResBattleInvite::kInstanceLvlFieldNumber;
#endif  // !_MSC_VER

stBroadResBattleInvite::stBroadResBattleInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBroadResBattleInvite::InitAsDefaultInstance() {
}

stBroadResBattleInvite::stBroadResBattleInvite(const stBroadResBattleInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBroadResBattleInvite::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  viplv_ = 0u;
  instancelvl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadResBattleInvite::~stBroadResBattleInvite() {
  SharedDtor();
}

void stBroadResBattleInvite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stBroadResBattleInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadResBattleInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadResBattleInvite_descriptor_;
}

const stBroadResBattleInvite& stBroadResBattleInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stBroadResBattleInvite* stBroadResBattleInvite::default_instance_ = NULL;

stBroadResBattleInvite* stBroadResBattleInvite::New() const {
  return new stBroadResBattleInvite;
}

void stBroadResBattleInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    guildid_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    battlepower_ = 0u;
    viplv_ = 0u;
    instancelvl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadResBattleInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildId;
        break;
      }

      // optional uint32 guildId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_instanceLvl;
        break;
      }

      // optional uint32 instanceLvl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instancelvl_)));
          set_has_instancelvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBroadResBattleInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 guildId = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guildid(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battlepower(), output);
  }

  // optional uint32 vipLv = 7;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->viplv(), output);
  }

  // optional uint32 instanceLvl = 8;
  if (has_instancelvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->instancelvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBroadResBattleInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 guildId = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guildid(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battlepower(), target);
  }

  // optional uint32 vipLv = 7;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->viplv(), target);
  }

  // optional uint32 instanceLvl = 8;
  if (has_instancelvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->instancelvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBroadResBattleInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 guildId = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 battlePower = 6;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 vipLv = 7;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 instanceLvl = 8;
    if (has_instancelvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instancelvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadResBattleInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadResBattleInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadResBattleInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadResBattleInvite::MergeFrom(const stBroadResBattleInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_instancelvl()) {
      set_instancelvl(from.instancelvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadResBattleInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadResBattleInvite::CopyFrom(const stBroadResBattleInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadResBattleInvite::IsInitialized() const {

  return true;
}

void stBroadResBattleInvite::Swap(stBroadResBattleInvite* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(guildid_, other->guildid_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(viplv_, other->viplv_);
    std::swap(instancelvl_, other->instancelvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadResBattleInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadResBattleInvite_descriptor_;
  metadata.reflection = stBroadResBattleInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPubOffline_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubOffline_ProtoModID_descriptor_;
}
bool stPubOffline_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPubOffline_ProtoModID stPubOffline::ModID;
const stPubOffline_ProtoModID stPubOffline::ProtoModID_MIN;
const stPubOffline_ProtoModID stPubOffline::ProtoModID_MAX;
const int stPubOffline::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPubOffline_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubOffline_ProtoFunID_descriptor_;
}
bool stPubOffline_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 183:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPubOffline_ProtoFunID stPubOffline::FunID;
const stPubOffline_ProtoFunID stPubOffline::ProtoFunID_MIN;
const stPubOffline_ProtoFunID stPubOffline::ProtoFunID_MAX;
const int stPubOffline::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPubOffline::kMsgFieldNumber;
#endif  // !_MSC_VER

stPubOffline::stPubOffline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPubOffline::InitAsDefaultInstance() {
}

stPubOffline::stPubOffline(const stPubOffline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPubOffline::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPubOffline::~stPubOffline() {
  SharedDtor();
}

void stPubOffline::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void stPubOffline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPubOffline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubOffline_descriptor_;
}

const stPubOffline& stPubOffline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stPubOffline* stPubOffline::default_instance_ = NULL;

stPubOffline* stPubOffline::New() const {
  return new stPubOffline;
}

void stPubOffline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPubOffline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPubOffline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPubOffline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPubOffline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPubOffline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPubOffline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPubOffline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPubOffline::MergeFrom(const stPubOffline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPubOffline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPubOffline::CopyFrom(const stPubOffline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPubOffline::IsInitialized() const {

  return true;
}

void stPubOffline::Swap(stPubOffline* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPubOffline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPubOffline_descriptor_;
  metadata.reflection = stPubOffline_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDiscoverConsume_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDiscoverConsume_ProtoModID_descriptor_;
}
bool stDiscoverConsume_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDiscoverConsume_ProtoModID stDiscoverConsume::ModID;
const stDiscoverConsume_ProtoModID stDiscoverConsume::ProtoModID_MIN;
const stDiscoverConsume_ProtoModID stDiscoverConsume::ProtoModID_MAX;
const int stDiscoverConsume::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDiscoverConsume_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDiscoverConsume_ProtoFunID_descriptor_;
}
bool stDiscoverConsume_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 184:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDiscoverConsume_ProtoFunID stDiscoverConsume::FunID;
const stDiscoverConsume_ProtoFunID stDiscoverConsume::ProtoFunID_MIN;
const stDiscoverConsume_ProtoFunID stDiscoverConsume::ProtoFunID_MAX;
const int stDiscoverConsume::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDiscoverConsume::kCharIDFieldNumber;
#endif  // !_MSC_VER

stDiscoverConsume::stDiscoverConsume()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDiscoverConsume::InitAsDefaultInstance() {
}

stDiscoverConsume::stDiscoverConsume(const stDiscoverConsume& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDiscoverConsume::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDiscoverConsume::~stDiscoverConsume() {
  SharedDtor();
}

void stDiscoverConsume::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDiscoverConsume::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDiscoverConsume::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDiscoverConsume_descriptor_;
}

const stDiscoverConsume& stDiscoverConsume::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDiscoverConsume* stDiscoverConsume::default_instance_ = NULL;

stDiscoverConsume* stDiscoverConsume::New() const {
  return new stDiscoverConsume;
}

void stDiscoverConsume::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDiscoverConsume::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDiscoverConsume::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDiscoverConsume::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDiscoverConsume::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDiscoverConsume::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDiscoverConsume* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDiscoverConsume*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDiscoverConsume::MergeFrom(const stDiscoverConsume& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDiscoverConsume::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDiscoverConsume::CopyFrom(const stDiscoverConsume& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDiscoverConsume::IsInitialized() const {

  return true;
}

void stDiscoverConsume::Swap(stDiscoverConsume* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDiscoverConsume::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDiscoverConsume_descriptor_;
  metadata.reflection = stDiscoverConsume_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynCoupleInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCoupleInfo_ProtoModID_descriptor_;
}
bool stSynCoupleInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynCoupleInfo_ProtoModID stSynCoupleInfo::ModID;
const stSynCoupleInfo_ProtoModID stSynCoupleInfo::ProtoModID_MIN;
const stSynCoupleInfo_ProtoModID stSynCoupleInfo::ProtoModID_MAX;
const int stSynCoupleInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynCoupleInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCoupleInfo_ProtoFunID_descriptor_;
}
bool stSynCoupleInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 185:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynCoupleInfo_ProtoFunID stSynCoupleInfo::FunID;
const stSynCoupleInfo_ProtoFunID stSynCoupleInfo::ProtoFunID_MIN;
const stSynCoupleInfo_ProtoFunID stSynCoupleInfo::ProtoFunID_MAX;
const int stSynCoupleInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynCoupleInfo::kCoupleIdFieldNumber;
const int stSynCoupleInfo::kCharIDFieldNumber;
const int stSynCoupleInfo::kMyNewNameFieldNumber;
#endif  // !_MSC_VER

stSynCoupleInfo::stSynCoupleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynCoupleInfo::InitAsDefaultInstance() {
}

stSynCoupleInfo::stSynCoupleInfo(const stSynCoupleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynCoupleInfo::SharedCtor() {
  _cached_size_ = 0;
  coupleid_ = 0u;
  charid_ = 0u;
  mynewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynCoupleInfo::~stSynCoupleInfo() {
  SharedDtor();
}

void stSynCoupleInfo::SharedDtor() {
  if (mynewname_ != &::google::protobuf::internal::kEmptyString) {
    delete mynewname_;
  }
  if (this != default_instance_) {
  }
}

void stSynCoupleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynCoupleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynCoupleInfo_descriptor_;
}

const stSynCoupleInfo& stSynCoupleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynCoupleInfo* stSynCoupleInfo::default_instance_ = NULL;

stSynCoupleInfo* stSynCoupleInfo::New() const {
  return new stSynCoupleInfo;
}

void stSynCoupleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coupleid_ = 0u;
    charid_ = 0u;
    if (has_mynewname()) {
      if (mynewname_ != &::google::protobuf::internal::kEmptyString) {
        mynewname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynCoupleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 coupleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coupleid_)));
          set_has_coupleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_myNewName;
        break;
      }

      // optional string myNewName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myNewName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mynewname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mynewname().data(), this->mynewname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynCoupleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 coupleId = 1;
  if (has_coupleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->coupleid(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional string myNewName = 3;
  if (has_mynewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mynewname().data(), this->mynewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->mynewname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynCoupleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 coupleId = 1;
  if (has_coupleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->coupleid(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional string myNewName = 3;
  if (has_mynewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mynewname().data(), this->mynewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->mynewname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynCoupleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 coupleId = 1;
    if (has_coupleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coupleid());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string myNewName = 3;
    if (has_mynewname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mynewname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynCoupleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynCoupleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynCoupleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynCoupleInfo::MergeFrom(const stSynCoupleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coupleid()) {
      set_coupleid(from.coupleid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mynewname()) {
      set_mynewname(from.mynewname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynCoupleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynCoupleInfo::CopyFrom(const stSynCoupleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynCoupleInfo::IsInitialized() const {

  return true;
}

void stSynCoupleInfo::Swap(stSynCoupleInfo* other) {
  if (other != this) {
    std::swap(coupleid_, other->coupleid_);
    std::swap(charid_, other->charid_);
    std::swap(mynewname_, other->mynewname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynCoupleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynCoupleInfo_descriptor_;
  metadata.reflection = stSynCoupleInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleUserData_ProtoModID_descriptor_;
}
bool stSynResBattleUserData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleUserData_ProtoModID stSynResBattleUserData::ModID;
const stSynResBattleUserData_ProtoModID stSynResBattleUserData::ProtoModID_MIN;
const stSynResBattleUserData_ProtoModID stSynResBattleUserData::ProtoModID_MAX;
const int stSynResBattleUserData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleUserData_ProtoFunID_descriptor_;
}
bool stSynResBattleUserData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 186:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleUserData_ProtoFunID stSynResBattleUserData::FunID;
const stSynResBattleUserData_ProtoFunID stSynResBattleUserData::ProtoFunID_MIN;
const stSynResBattleUserData_ProtoFunID stSynResBattleUserData::ProtoFunID_MAX;
const int stSynResBattleUserData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynResBattleUserData::kUserFieldNumber;
#endif  // !_MSC_VER

stSynResBattleUserData::stSynResBattleUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynResBattleUserData::InitAsDefaultInstance() {
  user_ = const_cast< ::Global::stGloryUser*>(&::Global::stGloryUser::default_instance());
}

stSynResBattleUserData::stSynResBattleUserData(const stSynResBattleUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynResBattleUserData::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynResBattleUserData::~stSynResBattleUserData() {
  SharedDtor();
}

void stSynResBattleUserData::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void stSynResBattleUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynResBattleUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleUserData_descriptor_;
}

const stSynResBattleUserData& stSynResBattleUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynResBattleUserData* stSynResBattleUserData::default_instance_ = NULL;

stSynResBattleUserData* stSynResBattleUserData::New() const {
  return new stSynResBattleUserData;
}

void stSynResBattleUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::Global::stGloryUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynResBattleUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.stGloryUser user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynResBattleUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.stGloryUser user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynResBattleUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.stGloryUser user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynResBattleUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.stGloryUser user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynResBattleUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynResBattleUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynResBattleUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynResBattleUserData::MergeFrom(const stSynResBattleUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::Global::stGloryUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynResBattleUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynResBattleUserData::CopyFrom(const stSynResBattleUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynResBattleUserData::IsInitialized() const {

  return true;
}

void stSynResBattleUserData::Swap(stSynResBattleUserData* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynResBattleUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynResBattleUserData_descriptor_;
  metadata.reflection = stSynResBattleUserData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleTop50_ProtoModID_descriptor_;
}
bool stSynResBattleTop50_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleTop50_ProtoModID stSynResBattleTop50::ModID;
const stSynResBattleTop50_ProtoModID stSynResBattleTop50::ProtoModID_MIN;
const stSynResBattleTop50_ProtoModID stSynResBattleTop50::ProtoModID_MAX;
const int stSynResBattleTop50::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleTop50_ProtoFunID_descriptor_;
}
bool stSynResBattleTop50_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 187:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleTop50_ProtoFunID stSynResBattleTop50::FunID;
const stSynResBattleTop50_ProtoFunID stSynResBattleTop50::ProtoFunID_MIN;
const stSynResBattleTop50_ProtoFunID stSynResBattleTop50::ProtoFunID_MAX;
const int stSynResBattleTop50::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynResBattleTop50::kDetailFieldNumber;
#endif  // !_MSC_VER

stSynResBattleTop50::stSynResBattleTop50()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynResBattleTop50::InitAsDefaultInstance() {
}

stSynResBattleTop50::stSynResBattleTop50(const stSynResBattleTop50& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynResBattleTop50::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynResBattleTop50::~stSynResBattleTop50() {
  SharedDtor();
}

void stSynResBattleTop50::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynResBattleTop50::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynResBattleTop50::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleTop50_descriptor_;
}

const stSynResBattleTop50& stSynResBattleTop50::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynResBattleTop50* stSynResBattleTop50::default_instance_ = NULL;

stSynResBattleTop50* stSynResBattleTop50::New() const {
  return new stSynResBattleTop50;
}

void stSynResBattleTop50::Clear() {
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynResBattleTop50::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stGloryUserPart detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynResBattleTop50::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stGloryUserPart detail = 1;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynResBattleTop50::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stGloryUserPart detail = 1;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynResBattleTop50::ByteSize() const {
  int total_size = 0;

  // repeated .Global.stGloryUserPart detail = 1;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynResBattleTop50::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynResBattleTop50* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynResBattleTop50*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynResBattleTop50::MergeFrom(const stSynResBattleTop50& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynResBattleTop50::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynResBattleTop50::CopyFrom(const stSynResBattleTop50& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynResBattleTop50::IsInitialized() const {

  return true;
}

void stSynResBattleTop50::Swap(stSynResBattleTop50* other) {
  if (other != this) {
    detail_.Swap(&other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynResBattleTop50::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynResBattleTop50_descriptor_;
  metadata.reflection = stSynResBattleTop50_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleKing_ProtoModID_descriptor_;
}
bool stSynResBattleKing_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleKing_ProtoModID stSynResBattleKing::ModID;
const stSynResBattleKing_ProtoModID stSynResBattleKing::ProtoModID_MIN;
const stSynResBattleKing_ProtoModID stSynResBattleKing::ProtoModID_MAX;
const int stSynResBattleKing::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleKing_ProtoFunID_descriptor_;
}
bool stSynResBattleKing_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 188:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleKing_ProtoFunID stSynResBattleKing::FunID;
const stSynResBattleKing_ProtoFunID stSynResBattleKing::ProtoFunID_MIN;
const stSynResBattleKing_ProtoFunID stSynResBattleKing::ProtoFunID_MAX;
const int stSynResBattleKing::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynResBattleKing::kClearFieldNumber;
const int stSynResBattleKing::kKingFieldNumber;
#endif  // !_MSC_VER

stSynResBattleKing::stSynResBattleKing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynResBattleKing::InitAsDefaultInstance() {
  king_ = const_cast< ::Global::stGloryUserDetail*>(&::Global::stGloryUserDetail::default_instance());
}

stSynResBattleKing::stSynResBattleKing(const stSynResBattleKing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynResBattleKing::SharedCtor() {
  _cached_size_ = 0;
  clear_ = false;
  king_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynResBattleKing::~stSynResBattleKing() {
  SharedDtor();
}

void stSynResBattleKing::SharedDtor() {
  if (this != default_instance_) {
    delete king_;
  }
}

void stSynResBattleKing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynResBattleKing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleKing_descriptor_;
}

const stSynResBattleKing& stSynResBattleKing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynResBattleKing* stSynResBattleKing::default_instance_ = NULL;

stSynResBattleKing* stSynResBattleKing::New() const {
  return new stSynResBattleKing;
}

void stSynResBattleKing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clear_ = false;
    if (has_king()) {
      if (king_ != NULL) king_->::Global::stGloryUserDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynResBattleKing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool clear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_)));
          set_has_clear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_king;
        break;
      }

      // optional .Global.stGloryUserDetail king = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_king:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_king()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynResBattleKing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool clear = 1;
  if (has_clear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->clear(), output);
  }

  // optional .Global.stGloryUserDetail king = 2;
  if (has_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->king(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynResBattleKing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool clear = 1;
  if (has_clear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->clear(), target);
  }

  // optional .Global.stGloryUserDetail king = 2;
  if (has_king()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->king(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynResBattleKing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool clear = 1;
    if (has_clear()) {
      total_size += 1 + 1;
    }

    // optional .Global.stGloryUserDetail king = 2;
    if (has_king()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->king());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynResBattleKing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynResBattleKing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynResBattleKing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynResBattleKing::MergeFrom(const stSynResBattleKing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clear()) {
      set_clear(from.clear());
    }
    if (from.has_king()) {
      mutable_king()->::Global::stGloryUserDetail::MergeFrom(from.king());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynResBattleKing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynResBattleKing::CopyFrom(const stSynResBattleKing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynResBattleKing::IsInitialized() const {

  return true;
}

void stSynResBattleKing::Swap(stSynResBattleKing* other) {
  if (other != this) {
    std::swap(clear_, other->clear_);
    std::swap(king_, other->king_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynResBattleKing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynResBattleKing_descriptor_;
  metadata.reflection = stSynResBattleKing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyInviteResBattle_ProtoModID_descriptor_;
}
bool stReplyInviteResBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyInviteResBattle_ProtoModID stReplyInviteResBattle::ModID;
const stReplyInviteResBattle_ProtoModID stReplyInviteResBattle::ProtoModID_MIN;
const stReplyInviteResBattle_ProtoModID stReplyInviteResBattle::ProtoModID_MAX;
const int stReplyInviteResBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyInviteResBattle_ProtoFunID_descriptor_;
}
bool stReplyInviteResBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 189:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyInviteResBattle_ProtoFunID stReplyInviteResBattle::FunID;
const stReplyInviteResBattle_ProtoFunID stReplyInviteResBattle::ProtoFunID_MIN;
const stReplyInviteResBattle_ProtoFunID stReplyInviteResBattle::ProtoFunID_MAX;
const int stReplyInviteResBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplyInviteResBattle::kCharIdFieldNumber;
const int stReplyInviteResBattle::kGuildIdFieldNumber;
const int stReplyInviteResBattle::kInviteIdFieldNumber;
const int stReplyInviteResBattle::kSelfFieldNumber;
#endif  // !_MSC_VER

stReplyInviteResBattle::stReplyInviteResBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplyInviteResBattle::InitAsDefaultInstance() {
  self_ = const_cast< ::Global::stGloryUser*>(&::Global::stGloryUser::default_instance());
}

stReplyInviteResBattle::stReplyInviteResBattle(const stReplyInviteResBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplyInviteResBattle::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  guildid_ = 0u;
  inviteid_ = 0u;
  self_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplyInviteResBattle::~stReplyInviteResBattle() {
  SharedDtor();
}

void stReplyInviteResBattle::SharedDtor() {
  if (this != default_instance_) {
    delete self_;
  }
}

void stReplyInviteResBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplyInviteResBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyInviteResBattle_descriptor_;
}

const stReplyInviteResBattle& stReplyInviteResBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReplyInviteResBattle* stReplyInviteResBattle::default_instance_ = NULL;

stReplyInviteResBattle* stReplyInviteResBattle::New() const {
  return new stReplyInviteResBattle;
}

void stReplyInviteResBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    guildid_ = 0u;
    inviteid_ = 0u;
    if (has_self()) {
      if (self_ != NULL) self_->::Global::stGloryUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplyInviteResBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildId;
        break;
      }

      // optional uint32 guildId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_inviteId;
        break;
      }

      // optional uint32 inviteId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteid_)));
          set_has_inviteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_self;
        break;
      }

      // optional .Global.stGloryUser self = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplyInviteResBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 guildId = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guildid(), output);
  }

  // optional uint32 inviteId = 3;
  if (has_inviteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inviteid(), output);
  }

  // optional .Global.stGloryUser self = 4;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->self(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplyInviteResBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 guildId = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guildid(), target);
  }

  // optional uint32 inviteId = 3;
  if (has_inviteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inviteid(), target);
  }

  // optional .Global.stGloryUser self = 4;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->self(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplyInviteResBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 guildId = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional uint32 inviteId = 3;
    if (has_inviteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteid());
    }

    // optional .Global.stGloryUser self = 4;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplyInviteResBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplyInviteResBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplyInviteResBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplyInviteResBattle::MergeFrom(const stReplyInviteResBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_inviteid()) {
      set_inviteid(from.inviteid());
    }
    if (from.has_self()) {
      mutable_self()->::Global::stGloryUser::MergeFrom(from.self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplyInviteResBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplyInviteResBattle::CopyFrom(const stReplyInviteResBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplyInviteResBattle::IsInitialized() const {

  return true;
}

void stReplyInviteResBattle::Swap(stReplyInviteResBattle* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(inviteid_, other->inviteid_);
    std::swap(self_, other->self_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplyInviteResBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplyInviteResBattle_descriptor_;
  metadata.reflection = stReplyInviteResBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynGloryKingTitle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGloryKingTitle_ProtoModID_descriptor_;
}
bool stSynGloryKingTitle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGloryKingTitle_ProtoModID stSynGloryKingTitle::ModID;
const stSynGloryKingTitle_ProtoModID stSynGloryKingTitle::ProtoModID_MIN;
const stSynGloryKingTitle_ProtoModID stSynGloryKingTitle::ProtoModID_MAX;
const int stSynGloryKingTitle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynGloryKingTitle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGloryKingTitle_ProtoFunID_descriptor_;
}
bool stSynGloryKingTitle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 190:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGloryKingTitle_ProtoFunID stSynGloryKingTitle::FunID;
const stSynGloryKingTitle_ProtoFunID stSynGloryKingTitle::ProtoFunID_MIN;
const stSynGloryKingTitle_ProtoFunID stSynGloryKingTitle::ProtoFunID_MAX;
const int stSynGloryKingTitle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynGloryKingTitle::kCharIdFieldNumber;
const int stSynGloryKingTitle::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

stSynGloryKingTitle::stSynGloryKingTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynGloryKingTitle::InitAsDefaultInstance() {
}

stSynGloryKingTitle::stSynGloryKingTitle(const stSynGloryKingTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynGloryKingTitle::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  expiretime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynGloryKingTitle::~stSynGloryKingTitle() {
  SharedDtor();
}

void stSynGloryKingTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynGloryKingTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynGloryKingTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGloryKingTitle_descriptor_;
}

const stSynGloryKingTitle& stSynGloryKingTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynGloryKingTitle* stSynGloryKingTitle::default_instance_ = NULL;

stSynGloryKingTitle* stSynGloryKingTitle::New() const {
  return new stSynGloryKingTitle;
}

void stSynGloryKingTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    expiretime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynGloryKingTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expireTime;
        break;
      }

      // optional uint32 expireTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynGloryKingTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 expireTime = 2;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynGloryKingTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 expireTime = 2;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynGloryKingTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 expireTime = 2;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expiretime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynGloryKingTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynGloryKingTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynGloryKingTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynGloryKingTitle::MergeFrom(const stSynGloryKingTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynGloryKingTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynGloryKingTitle::CopyFrom(const stSynGloryKingTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynGloryKingTitle::IsInitialized() const {

  return true;
}

void stSynGloryKingTitle::Swap(stSynGloryKingTitle* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynGloryKingTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynGloryKingTitle_descriptor_;
  metadata.reflection = stSynGloryKingTitle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPubOnline_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubOnline_ProtoModID_descriptor_;
}
bool stPubOnline_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPubOnline_ProtoModID stPubOnline::ModID;
const stPubOnline_ProtoModID stPubOnline::ProtoModID_MIN;
const stPubOnline_ProtoModID stPubOnline::ProtoModID_MAX;
const int stPubOnline::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPubOnline_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubOnline_ProtoFunID_descriptor_;
}
bool stPubOnline_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 191:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPubOnline_ProtoFunID stPubOnline::FunID;
const stPubOnline_ProtoFunID stPubOnline::ProtoFunID_MIN;
const stPubOnline_ProtoFunID stPubOnline::ProtoFunID_MAX;
const int stPubOnline::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPubOnline::kMsgFieldNumber;
#endif  // !_MSC_VER

stPubOnline::stPubOnline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPubOnline::InitAsDefaultInstance() {
}

stPubOnline::stPubOnline(const stPubOnline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPubOnline::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPubOnline::~stPubOnline() {
  SharedDtor();
}

void stPubOnline::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void stPubOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPubOnline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubOnline_descriptor_;
}

const stPubOnline& stPubOnline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stPubOnline* stPubOnline::default_instance_ = NULL;

stPubOnline* stPubOnline::New() const {
  return new stPubOnline;
}

void stPubOnline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPubOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPubOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPubOnline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPubOnline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPubOnline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPubOnline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPubOnline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPubOnline::MergeFrom(const stPubOnline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPubOnline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPubOnline::CopyFrom(const stPubOnline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPubOnline::IsInitialized() const {

  return true;
}

void stPubOnline::Swap(stPubOnline* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPubOnline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPubOnline_descriptor_;
  metadata.reflection = stPubOnline_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResBattleSend2Pub_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleSend2Pub_ProtoModID_descriptor_;
}
bool stResBattleSend2Pub_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleSend2Pub_ProtoModID stResBattleSend2Pub::ModID;
const stResBattleSend2Pub_ProtoModID stResBattleSend2Pub::ProtoModID_MIN;
const stResBattleSend2Pub_ProtoModID stResBattleSend2Pub::ProtoModID_MAX;
const int stResBattleSend2Pub::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResBattleSend2Pub_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleSend2Pub_ProtoFunID_descriptor_;
}
bool stResBattleSend2Pub_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 192:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleSend2Pub_ProtoFunID stResBattleSend2Pub::FunID;
const stResBattleSend2Pub_ProtoFunID stResBattleSend2Pub::ProtoFunID_MIN;
const stResBattleSend2Pub_ProtoFunID stResBattleSend2Pub::ProtoFunID_MAX;
const int stResBattleSend2Pub::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResBattleSend2Pub::kKingFieldNumber;
const int stResBattleSend2Pub::kDetailFieldNumber;
#endif  // !_MSC_VER

stResBattleSend2Pub::stResBattleSend2Pub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResBattleSend2Pub::InitAsDefaultInstance() {
  king_ = const_cast< ::Global::stGloryUserDetail*>(&::Global::stGloryUserDetail::default_instance());
}

stResBattleSend2Pub::stResBattleSend2Pub(const stResBattleSend2Pub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResBattleSend2Pub::SharedCtor() {
  _cached_size_ = 0;
  king_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResBattleSend2Pub::~stResBattleSend2Pub() {
  SharedDtor();
}

void stResBattleSend2Pub::SharedDtor() {
  if (this != default_instance_) {
    delete king_;
  }
}

void stResBattleSend2Pub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResBattleSend2Pub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleSend2Pub_descriptor_;
}

const stResBattleSend2Pub& stResBattleSend2Pub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stResBattleSend2Pub* stResBattleSend2Pub::default_instance_ = NULL;

stResBattleSend2Pub* stResBattleSend2Pub::New() const {
  return new stResBattleSend2Pub;
}

void stResBattleSend2Pub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_king()) {
      if (king_ != NULL) king_->::Global::stGloryUserDetail::Clear();
    }
  }
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResBattleSend2Pub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Global.stGloryUserDetail king = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_king()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // repeated .Global.stGloryUserDetail detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResBattleSend2Pub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Global.stGloryUserDetail king = 1;
  if (has_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->king(), output);
  }

  // repeated .Global.stGloryUserDetail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResBattleSend2Pub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Global.stGloryUserDetail king = 1;
  if (has_king()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->king(), target);
  }

  // repeated .Global.stGloryUserDetail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResBattleSend2Pub::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Global.stGloryUserDetail king = 1;
    if (has_king()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->king());
    }

  }
  // repeated .Global.stGloryUserDetail detail = 2;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResBattleSend2Pub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResBattleSend2Pub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResBattleSend2Pub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResBattleSend2Pub::MergeFrom(const stResBattleSend2Pub& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_king()) {
      mutable_king()->::Global::stGloryUserDetail::MergeFrom(from.king());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResBattleSend2Pub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResBattleSend2Pub::CopyFrom(const stResBattleSend2Pub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResBattleSend2Pub::IsInitialized() const {

  return true;
}

void stResBattleSend2Pub::Swap(stResBattleSend2Pub* other) {
  if (other != this) {
    std::swap(king_, other->king_);
    detail_.Swap(&other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResBattleSend2Pub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResBattleSend2Pub_descriptor_;
  metadata.reflection = stResBattleSend2Pub_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stServerParamItem::kNameFieldNumber;
const int stServerParamItem::kValueFieldNumber;
#endif  // !_MSC_VER

stServerParamItem::stServerParamItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stServerParamItem::InitAsDefaultInstance() {
}

stServerParamItem::stServerParamItem(const stServerParamItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stServerParamItem::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stServerParamItem::~stServerParamItem() {
  SharedDtor();
}

void stServerParamItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void stServerParamItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stServerParamItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stServerParamItem_descriptor_;
}

const stServerParamItem& stServerParamItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stServerParamItem* stServerParamItem::default_instance_ = NULL;

stServerParamItem* stServerParamItem::New() const {
  return new stServerParamItem;
}

void stServerParamItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stServerParamItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stServerParamItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stServerParamItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stServerParamItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stServerParamItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stServerParamItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stServerParamItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stServerParamItem::MergeFrom(const stServerParamItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stServerParamItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stServerParamItem::CopyFrom(const stServerParamItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stServerParamItem::IsInitialized() const {

  return true;
}

void stServerParamItem::Swap(stServerParamItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stServerParamItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stServerParamItem_descriptor_;
  metadata.reflection = stServerParamItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stServerParamSend2Game_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stServerParamSend2Game_ProtoModID_descriptor_;
}
bool stServerParamSend2Game_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stServerParamSend2Game_ProtoModID stServerParamSend2Game::ModID;
const stServerParamSend2Game_ProtoModID stServerParamSend2Game::ProtoModID_MIN;
const stServerParamSend2Game_ProtoModID stServerParamSend2Game::ProtoModID_MAX;
const int stServerParamSend2Game::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stServerParamSend2Game_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stServerParamSend2Game_ProtoFunID_descriptor_;
}
bool stServerParamSend2Game_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 193:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stServerParamSend2Game_ProtoFunID stServerParamSend2Game::FunID;
const stServerParamSend2Game_ProtoFunID stServerParamSend2Game::ProtoFunID_MIN;
const stServerParamSend2Game_ProtoFunID stServerParamSend2Game::ProtoFunID_MAX;
const int stServerParamSend2Game::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stServerParamSend2Game::kParamsFieldNumber;
#endif  // !_MSC_VER

stServerParamSend2Game::stServerParamSend2Game()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stServerParamSend2Game::InitAsDefaultInstance() {
}

stServerParamSend2Game::stServerParamSend2Game(const stServerParamSend2Game& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stServerParamSend2Game::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stServerParamSend2Game::~stServerParamSend2Game() {
  SharedDtor();
}

void stServerParamSend2Game::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stServerParamSend2Game::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stServerParamSend2Game::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stServerParamSend2Game_descriptor_;
}

const stServerParamSend2Game& stServerParamSend2Game::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stServerParamSend2Game* stServerParamSend2Game::default_instance_ = NULL;

stServerParamSend2Game* stServerParamSend2Game::New() const {
  return new stServerParamSend2Game;
}

void stServerParamSend2Game::Clear() {
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stServerParamSend2Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stServerParamItem params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_params()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_params;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stServerParamSend2Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stServerParamItem params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->params(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stServerParamSend2Game::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stServerParamItem params = 1;
  for (int i = 0; i < this->params_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->params(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stServerParamSend2Game::ByteSize() const {
  int total_size = 0;

  // repeated .Global.stServerParamItem params = 1;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stServerParamSend2Game::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stServerParamSend2Game* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stServerParamSend2Game*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stServerParamSend2Game::MergeFrom(const stServerParamSend2Game& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stServerParamSend2Game::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stServerParamSend2Game::CopyFrom(const stServerParamSend2Game& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stServerParamSend2Game::IsInitialized() const {

  return true;
}

void stServerParamSend2Game::Swap(stServerParamSend2Game* other) {
  if (other != this) {
    params_.Swap(&other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stServerParamSend2Game::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stServerParamSend2Game_descriptor_;
  metadata.reflection = stServerParamSend2Game_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynUserPhotoID_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserPhotoID_ProtoModID_descriptor_;
}
bool stSynUserPhotoID_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynUserPhotoID_ProtoModID stSynUserPhotoID::ModID;
const stSynUserPhotoID_ProtoModID stSynUserPhotoID::ProtoModID_MIN;
const stSynUserPhotoID_ProtoModID stSynUserPhotoID::ProtoModID_MAX;
const int stSynUserPhotoID::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynUserPhotoID_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserPhotoID_ProtoFunID_descriptor_;
}
bool stSynUserPhotoID_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 194:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynUserPhotoID_ProtoFunID stSynUserPhotoID::FunID;
const stSynUserPhotoID_ProtoFunID stSynUserPhotoID::ProtoFunID_MIN;
const stSynUserPhotoID_ProtoFunID stSynUserPhotoID::ProtoFunID_MAX;
const int stSynUserPhotoID::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynUserPhotoID::kCharIDFieldNumber;
const int stSynUserPhotoID::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynUserPhotoID::stSynUserPhotoID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynUserPhotoID::InitAsDefaultInstance() {
}

stSynUserPhotoID::stSynUserPhotoID(const stSynUserPhotoID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynUserPhotoID::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynUserPhotoID::~stSynUserPhotoID() {
  SharedDtor();
}

void stSynUserPhotoID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynUserPhotoID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynUserPhotoID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynUserPhotoID_descriptor_;
}

const stSynUserPhotoID& stSynUserPhotoID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSynUserPhotoID* stSynUserPhotoID::default_instance_ = NULL;

stSynUserPhotoID* stSynUserPhotoID::New() const {
  return new stSynUserPhotoID;
}

void stSynUserPhotoID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynUserPhotoID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynUserPhotoID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 photoID = 2;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynUserPhotoID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 photoID = 2;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynUserPhotoID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 photoID = 2;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynUserPhotoID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynUserPhotoID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynUserPhotoID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynUserPhotoID::MergeFrom(const stSynUserPhotoID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynUserPhotoID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynUserPhotoID::CopyFrom(const stSynUserPhotoID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynUserPhotoID::IsInitialized() const {

  return true;
}

void stSynUserPhotoID::Swap(stSynUserPhotoID* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynUserPhotoID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynUserPhotoID_descriptor_;
  metadata.reflection = stSynUserPhotoID_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUseLvlBox_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseLvlBox_ProtoModID_descriptor_;
}
bool stUseLvlBox_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseLvlBox_ProtoModID stUseLvlBox::ModID;
const stUseLvlBox_ProtoModID stUseLvlBox::ProtoModID_MIN;
const stUseLvlBox_ProtoModID stUseLvlBox::ProtoModID_MAX;
const int stUseLvlBox::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUseLvlBox_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseLvlBox_ProtoFunID_descriptor_;
}
bool stUseLvlBox_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 195:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseLvlBox_ProtoFunID stUseLvlBox::FunID;
const stUseLvlBox_ProtoFunID stUseLvlBox::ProtoFunID_MIN;
const stUseLvlBox_ProtoFunID stUseLvlBox::ProtoFunID_MAX;
const int stUseLvlBox::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUseLvlBox::kCharIDFieldNumber;
const int stUseLvlBox::kBagtypeFieldNumber;
const int stUseLvlBox::kInstanceidFieldNumber;
#endif  // !_MSC_VER

stUseLvlBox::stUseLvlBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUseLvlBox::InitAsDefaultInstance() {
}

stUseLvlBox::stUseLvlBox(const stUseLvlBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUseLvlBox::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUseLvlBox::~stUseLvlBox() {
  SharedDtor();
}

void stUseLvlBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUseLvlBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUseLvlBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseLvlBox_descriptor_;
}

const stUseLvlBox& stUseLvlBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUseLvlBox* stUseLvlBox::default_instance_ = NULL;

stUseLvlBox* stUseLvlBox::New() const {
  return new stUseLvlBox;
}

void stUseLvlBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUseLvlBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bagtype;
        break;
      }

      // optional uint32 bagtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bagtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instanceid;
        break;
      }

      // optional uint64 instanceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUseLvlBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 bagtype = 2;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bagtype(), output);
  }

  // optional uint64 instanceid = 3;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUseLvlBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 bagtype = 2;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bagtype(), target);
  }

  // optional uint64 instanceid = 3;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUseLvlBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 bagtype = 2;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceid = 3;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUseLvlBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUseLvlBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUseLvlBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUseLvlBox::MergeFrom(const stUseLvlBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUseLvlBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUseLvlBox::CopyFrom(const stUseLvlBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUseLvlBox::IsInitialized() const {

  return true;
}

void stUseLvlBox::Swap(stUseLvlBox* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUseLvlBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUseLvlBox_descriptor_;
  metadata.reflection = stUseLvlBox_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUseLvlBoxRes_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseLvlBoxRes_ProtoModID_descriptor_;
}
bool stUseLvlBoxRes_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseLvlBoxRes_ProtoModID stUseLvlBoxRes::ModID;
const stUseLvlBoxRes_ProtoModID stUseLvlBoxRes::ProtoModID_MIN;
const stUseLvlBoxRes_ProtoModID stUseLvlBoxRes::ProtoModID_MAX;
const int stUseLvlBoxRes::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUseLvlBoxRes_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseLvlBoxRes_ProtoFunID_descriptor_;
}
bool stUseLvlBoxRes_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 196:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseLvlBoxRes_ProtoFunID stUseLvlBoxRes::FunID;
const stUseLvlBoxRes_ProtoFunID stUseLvlBoxRes::ProtoFunID_MIN;
const stUseLvlBoxRes_ProtoFunID stUseLvlBoxRes::ProtoFunID_MAX;
const int stUseLvlBoxRes::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUseLvlBoxRes::kCharIDFieldNumber;
const int stUseLvlBoxRes::kBagtypeFieldNumber;
const int stUseLvlBoxRes::kInstanceidFieldNumber;
const int stUseLvlBoxRes::kMaxLvlFieldNumber;
#endif  // !_MSC_VER

stUseLvlBoxRes::stUseLvlBoxRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUseLvlBoxRes::InitAsDefaultInstance() {
}

stUseLvlBoxRes::stUseLvlBoxRes(const stUseLvlBoxRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUseLvlBoxRes::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  bagtype_ = 0u;
  instanceid_ = GOOGLE_ULONGLONG(0);
  maxlvl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUseLvlBoxRes::~stUseLvlBoxRes() {
  SharedDtor();
}

void stUseLvlBoxRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUseLvlBoxRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUseLvlBoxRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseLvlBoxRes_descriptor_;
}

const stUseLvlBoxRes& stUseLvlBoxRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUseLvlBoxRes* stUseLvlBoxRes::default_instance_ = NULL;

stUseLvlBoxRes* stUseLvlBoxRes::New() const {
  return new stUseLvlBoxRes;
}

void stUseLvlBoxRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    bagtype_ = 0u;
    instanceid_ = GOOGLE_ULONGLONG(0);
    maxlvl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUseLvlBoxRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bagtype;
        break;
      }

      // optional uint32 bagtype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bagtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bagtype_)));
          set_has_bagtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instanceid;
        break;
      }

      // optional uint64 instanceid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxLvl;
        break;
      }

      // optional uint32 maxLvl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxlvl_)));
          set_has_maxlvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUseLvlBoxRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 bagtype = 2;
  if (has_bagtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->bagtype(), output);
  }

  // optional uint64 instanceid = 3;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->instanceid(), output);
  }

  // optional uint32 maxLvl = 4;
  if (has_maxlvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxlvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUseLvlBoxRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 bagtype = 2;
  if (has_bagtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->bagtype(), target);
  }

  // optional uint64 instanceid = 3;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->instanceid(), target);
  }

  // optional uint32 maxLvl = 4;
  if (has_maxlvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxlvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUseLvlBoxRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 bagtype = 2;
    if (has_bagtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bagtype());
    }

    // optional uint64 instanceid = 3;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->instanceid());
    }

    // optional uint32 maxLvl = 4;
    if (has_maxlvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxlvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUseLvlBoxRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUseLvlBoxRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUseLvlBoxRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUseLvlBoxRes::MergeFrom(const stUseLvlBoxRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_bagtype()) {
      set_bagtype(from.bagtype());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_maxlvl()) {
      set_maxlvl(from.maxlvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUseLvlBoxRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUseLvlBoxRes::CopyFrom(const stUseLvlBoxRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUseLvlBoxRes::IsInitialized() const {

  return true;
}

void stUseLvlBoxRes::Swap(stUseLvlBoxRes* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(bagtype_, other->bagtype_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(maxlvl_, other->maxlvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUseLvlBoxRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUseLvlBoxRes_descriptor_;
  metadata.reflection = stUseLvlBoxRes_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRechangeStatistics_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechangeStatistics_ProtoModID_descriptor_;
}
bool stRechangeStatistics_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRechangeStatistics_ProtoModID stRechangeStatistics::ModID;
const stRechangeStatistics_ProtoModID stRechangeStatistics::ProtoModID_MIN;
const stRechangeStatistics_ProtoModID stRechangeStatistics::ProtoModID_MAX;
const int stRechangeStatistics::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRechangeStatistics_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechangeStatistics_ProtoFunID_descriptor_;
}
bool stRechangeStatistics_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 197:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRechangeStatistics_ProtoFunID stRechangeStatistics::FunID;
const stRechangeStatistics_ProtoFunID stRechangeStatistics::ProtoFunID_MIN;
const stRechangeStatistics_ProtoFunID stRechangeStatistics::ProtoFunID_MAX;
const int stRechangeStatistics::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRechangeStatistics::kObtainDiamondFieldNumber;
const int stRechangeStatistics::kGiveDiamondFieldNumber;
const int stRechangeStatistics::kDataFieldNumber;
const int stRechangeStatistics::kCharidFieldNumber;
const int stRechangeStatistics::kMoneyFieldNumber;
#endif  // !_MSC_VER

stRechangeStatistics::stRechangeStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRechangeStatistics::InitAsDefaultInstance() {
}

stRechangeStatistics::stRechangeStatistics(const stRechangeStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRechangeStatistics::SharedCtor() {
  _cached_size_ = 0;
  obtaindiamond_ = 0u;
  givediamond_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  money_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRechangeStatistics::~stRechangeStatistics() {
  SharedDtor();
}

void stRechangeStatistics::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stRechangeStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRechangeStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechangeStatistics_descriptor_;
}

const stRechangeStatistics& stRechangeStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRechangeStatistics* stRechangeStatistics::default_instance_ = NULL;

stRechangeStatistics* stRechangeStatistics::New() const {
  return new stRechangeStatistics;
}

void stRechangeStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    obtaindiamond_ = 0u;
    givediamond_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    charid_ = 0u;
    money_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRechangeStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 obtainDiamond = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &obtaindiamond_)));
          set_has_obtaindiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_giveDiamond;
        break;
      }

      // optional uint32 giveDiamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giveDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &givediamond_)));
          set_has_givediamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // optional uint32 money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRechangeStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 obtainDiamond = 1;
  if (has_obtaindiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->obtaindiamond(), output);
  }

  // optional uint32 giveDiamond = 2;
  if (has_givediamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->givediamond(), output);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->data(), output);
  }

  // optional uint32 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charid(), output);
  }

  // optional uint32 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRechangeStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 obtainDiamond = 1;
  if (has_obtaindiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->obtaindiamond(), target);
  }

  // optional uint32 giveDiamond = 2;
  if (has_givediamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->givediamond(), target);
  }

  // optional string data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  // optional uint32 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charid(), target);
  }

  // optional uint32 money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRechangeStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 obtainDiamond = 1;
    if (has_obtaindiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->obtaindiamond());
    }

    // optional uint32 giveDiamond = 2;
    if (has_givediamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->givediamond());
    }

    // optional string data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

    // optional uint32 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRechangeStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRechangeStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRechangeStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRechangeStatistics::MergeFrom(const stRechangeStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obtaindiamond()) {
      set_obtaindiamond(from.obtaindiamond());
    }
    if (from.has_givediamond()) {
      set_givediamond(from.givediamond());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRechangeStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRechangeStatistics::CopyFrom(const stRechangeStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRechangeStatistics::IsInitialized() const {

  return true;
}

void stRechangeStatistics::Swap(stRechangeStatistics* other) {
  if (other != this) {
    std::swap(obtaindiamond_, other->obtaindiamond_);
    std::swap(givediamond_, other->givediamond_);
    std::swap(data_, other->data_);
    std::swap(charid_, other->charid_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRechangeStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRechangeStatistics_descriptor_;
  metadata.reflection = stRechangeStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stNftItem::kItemidFieldNumber;
const int stNftItem::kItemcntFieldNumber;
const int stNftItem::kItemnameFieldNumber;
const int stNftItem::kUrlFieldNumber;
#endif  // !_MSC_VER

stNftItem::stNftItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNftItem::InitAsDefaultInstance() {
}

stNftItem::stNftItem(const stNftItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNftItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  itemcnt_ = 0u;
  itemname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNftItem::~stNftItem() {
  SharedDtor();
}

void stNftItem::SharedDtor() {
  if (itemname_ != &::google::protobuf::internal::kEmptyString) {
    delete itemname_;
  }
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (this != default_instance_) {
  }
}

void stNftItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNftItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNftItem_descriptor_;
}

const stNftItem& stNftItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNftItem* stNftItem::default_instance_ = NULL;

stNftItem* stNftItem::New() const {
  return new stNftItem;
}

void stNftItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    itemcnt_ = 0u;
    if (has_itemname()) {
      if (itemname_ != &::google::protobuf::internal::kEmptyString) {
        itemname_->clear();
      }
    }
    if (has_url()) {
      if (url_ != &::google::protobuf::internal::kEmptyString) {
        url_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNftItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemcnt;
        break;
      }

      // optional uint32 itemcnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemcnt_)));
          set_has_itemcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemname;
        break;
      }

      // optional string itemname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->itemname().data(), this->itemname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_url;
        break;
      }

      // optional bytes url = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_url()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNftItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 itemcnt = 2;
  if (has_itemcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemcnt(), output);
  }

  // optional string itemname = 3;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->itemname(), output);
  }

  // optional bytes url = 4;
  if (has_url()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->url(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNftItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 itemcnt = 2;
  if (has_itemcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemcnt(), target);
  }

  // optional string itemname = 3;
  if (has_itemname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->itemname().data(), this->itemname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->itemname(), target);
  }

  // optional bytes url = 4;
  if (has_url()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->url(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNftItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 itemcnt = 2;
    if (has_itemcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemcnt());
    }

    // optional string itemname = 3;
    if (has_itemname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->itemname());
    }

    // optional bytes url = 4;
    if (has_url()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->url());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNftItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNftItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNftItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNftItem::MergeFrom(const stNftItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemcnt()) {
      set_itemcnt(from.itemcnt());
    }
    if (from.has_itemname()) {
      set_itemname(from.itemname());
    }
    if (from.has_url()) {
      set_url(from.url());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNftItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNftItem::CopyFrom(const stNftItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNftItem::IsInitialized() const {

  return true;
}

void stNftItem::Swap(stNftItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemcnt_, other->itemcnt_);
    std::swap(itemname_, other->itemname_);
    std::swap(url_, other->url_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNftItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNftItem_descriptor_;
  metadata.reflection = stNftItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGlobal2GameQueryUserNft_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2GameQueryUserNft_ProtoModID_descriptor_;
}
bool stGlobal2GameQueryUserNft_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGlobal2GameQueryUserNft_ProtoModID stGlobal2GameQueryUserNft::ModID;
const stGlobal2GameQueryUserNft_ProtoModID stGlobal2GameQueryUserNft::ProtoModID_MIN;
const stGlobal2GameQueryUserNft_ProtoModID stGlobal2GameQueryUserNft::ProtoModID_MAX;
const int stGlobal2GameQueryUserNft::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGlobal2GameQueryUserNft_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2GameQueryUserNft_ProtoFunID_descriptor_;
}
bool stGlobal2GameQueryUserNft_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 198:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGlobal2GameQueryUserNft_ProtoFunID stGlobal2GameQueryUserNft::FunID;
const stGlobal2GameQueryUserNft_ProtoFunID stGlobal2GameQueryUserNft::ProtoFunID_MIN;
const stGlobal2GameQueryUserNft_ProtoFunID stGlobal2GameQueryUserNft::ProtoFunID_MAX;
const int stGlobal2GameQueryUserNft::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGlobal2GameQueryUserNft::kWebConnIDFieldNumber;
const int stGlobal2GameQueryUserNft::kCharidFieldNumber;
#endif  // !_MSC_VER

stGlobal2GameQueryUserNft::stGlobal2GameQueryUserNft()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGlobal2GameQueryUserNft::InitAsDefaultInstance() {
}

stGlobal2GameQueryUserNft::stGlobal2GameQueryUserNft(const stGlobal2GameQueryUserNft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGlobal2GameQueryUserNft::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGlobal2GameQueryUserNft::~stGlobal2GameQueryUserNft() {
  SharedDtor();
}

void stGlobal2GameQueryUserNft::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGlobal2GameQueryUserNft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGlobal2GameQueryUserNft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2GameQueryUserNft_descriptor_;
}

const stGlobal2GameQueryUserNft& stGlobal2GameQueryUserNft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGlobal2GameQueryUserNft* stGlobal2GameQueryUserNft::default_instance_ = NULL;

stGlobal2GameQueryUserNft* stGlobal2GameQueryUserNft::New() const {
  return new stGlobal2GameQueryUserNft;
}

void stGlobal2GameQueryUserNft::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGlobal2GameQueryUserNft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGlobal2GameQueryUserNft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGlobal2GameQueryUserNft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGlobal2GameQueryUserNft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGlobal2GameQueryUserNft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGlobal2GameQueryUserNft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGlobal2GameQueryUserNft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGlobal2GameQueryUserNft::MergeFrom(const stGlobal2GameQueryUserNft& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGlobal2GameQueryUserNft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGlobal2GameQueryUserNft::CopyFrom(const stGlobal2GameQueryUserNft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGlobal2GameQueryUserNft::IsInitialized() const {

  return true;
}

void stGlobal2GameQueryUserNft::Swap(stGlobal2GameQueryUserNft* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGlobal2GameQueryUserNft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGlobal2GameQueryUserNft_descriptor_;
  metadata.reflection = stGlobal2GameQueryUserNft_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGame2GlobalQueryUserNftResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGame2GlobalQueryUserNftResult_ProtoModID_descriptor_;
}
bool stGame2GlobalQueryUserNftResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGame2GlobalQueryUserNftResult_ProtoModID stGame2GlobalQueryUserNftResult::ModID;
const stGame2GlobalQueryUserNftResult_ProtoModID stGame2GlobalQueryUserNftResult::ProtoModID_MIN;
const stGame2GlobalQueryUserNftResult_ProtoModID stGame2GlobalQueryUserNftResult::ProtoModID_MAX;
const int stGame2GlobalQueryUserNftResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGame2GlobalQueryUserNftResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGame2GlobalQueryUserNftResult_ProtoFunID_descriptor_;
}
bool stGame2GlobalQueryUserNftResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 199:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGame2GlobalQueryUserNftResult_ProtoFunID stGame2GlobalQueryUserNftResult::FunID;
const stGame2GlobalQueryUserNftResult_ProtoFunID stGame2GlobalQueryUserNftResult::ProtoFunID_MIN;
const stGame2GlobalQueryUserNftResult_ProtoFunID stGame2GlobalQueryUserNftResult::ProtoFunID_MAX;
const int stGame2GlobalQueryUserNftResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGame2GlobalQueryUserNftResult::kWebConnIDFieldNumber;
const int stGame2GlobalQueryUserNftResult::kCharidFieldNumber;
const int stGame2GlobalQueryUserNftResult::kResultFieldNumber;
const int stGame2GlobalQueryUserNftResult::kDataFieldNumber;
const int stGame2GlobalQueryUserNftResult::kVipFieldNumber;
#endif  // !_MSC_VER

stGame2GlobalQueryUserNftResult::stGame2GlobalQueryUserNftResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGame2GlobalQueryUserNftResult::InitAsDefaultInstance() {
}

stGame2GlobalQueryUserNftResult::stGame2GlobalQueryUserNftResult(const stGame2GlobalQueryUserNftResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGame2GlobalQueryUserNftResult::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  charid_ = 0u;
  result_ = 0u;
  vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGame2GlobalQueryUserNftResult::~stGame2GlobalQueryUserNftResult() {
  SharedDtor();
}

void stGame2GlobalQueryUserNftResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGame2GlobalQueryUserNftResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGame2GlobalQueryUserNftResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGame2GlobalQueryUserNftResult_descriptor_;
}

const stGame2GlobalQueryUserNftResult& stGame2GlobalQueryUserNftResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGame2GlobalQueryUserNftResult* stGame2GlobalQueryUserNftResult::default_instance_ = NULL;

stGame2GlobalQueryUserNftResult* stGame2GlobalQueryUserNftResult::New() const {
  return new stGame2GlobalQueryUserNftResult;
}

void stGame2GlobalQueryUserNftResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    charid_ = 0u;
    result_ = 0u;
    vip_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGame2GlobalQueryUserNftResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .Global.stNftItem data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectTag(40)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGame2GlobalQueryUserNftResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // repeated .Global.stNftItem data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  // optional uint32 vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGame2GlobalQueryUserNftResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // repeated .Global.stNftItem data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  // optional uint32 vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGame2GlobalQueryUserNftResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

  }
  // repeated .Global.stNftItem data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGame2GlobalQueryUserNftResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGame2GlobalQueryUserNftResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGame2GlobalQueryUserNftResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGame2GlobalQueryUserNftResult::MergeFrom(const stGame2GlobalQueryUserNftResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGame2GlobalQueryUserNftResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGame2GlobalQueryUserNftResult::CopyFrom(const stGame2GlobalQueryUserNftResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGame2GlobalQueryUserNftResult::IsInitialized() const {

  return true;
}

void stGame2GlobalQueryUserNftResult::Swap(stGame2GlobalQueryUserNftResult* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    data_.Swap(&other->data_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGame2GlobalQueryUserNftResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGame2GlobalQueryUserNftResult_descriptor_;
  metadata.reflection = stGame2GlobalQueryUserNftResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGlobal2GameChangeNftItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2GameChangeNftItem_ProtoModID_descriptor_;
}
bool stGlobal2GameChangeNftItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGlobal2GameChangeNftItem_ProtoModID stGlobal2GameChangeNftItem::ModID;
const stGlobal2GameChangeNftItem_ProtoModID stGlobal2GameChangeNftItem::ProtoModID_MIN;
const stGlobal2GameChangeNftItem_ProtoModID stGlobal2GameChangeNftItem::ProtoModID_MAX;
const int stGlobal2GameChangeNftItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGlobal2GameChangeNftItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2GameChangeNftItem_ProtoFunID_descriptor_;
}
bool stGlobal2GameChangeNftItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 200:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGlobal2GameChangeNftItem_ProtoFunID stGlobal2GameChangeNftItem::FunID;
const stGlobal2GameChangeNftItem_ProtoFunID stGlobal2GameChangeNftItem::ProtoFunID_MIN;
const stGlobal2GameChangeNftItem_ProtoFunID stGlobal2GameChangeNftItem::ProtoFunID_MAX;
const int stGlobal2GameChangeNftItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGlobal2GameChangeNftItem::kWebConnIDFieldNumber;
const int stGlobal2GameChangeNftItem::kCharidFieldNumber;
const int stGlobal2GameChangeNftItem::kItemidFieldNumber;
const int stGlobal2GameChangeNftItem::kCountFieldNumber;
#endif  // !_MSC_VER

stGlobal2GameChangeNftItem::stGlobal2GameChangeNftItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGlobal2GameChangeNftItem::InitAsDefaultInstance() {
}

stGlobal2GameChangeNftItem::stGlobal2GameChangeNftItem(const stGlobal2GameChangeNftItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGlobal2GameChangeNftItem::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  charid_ = 0u;
  itemid_ = 0u;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGlobal2GameChangeNftItem::~stGlobal2GameChangeNftItem() {
  SharedDtor();
}

void stGlobal2GameChangeNftItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGlobal2GameChangeNftItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGlobal2GameChangeNftItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2GameChangeNftItem_descriptor_;
}

const stGlobal2GameChangeNftItem& stGlobal2GameChangeNftItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGlobal2GameChangeNftItem* stGlobal2GameChangeNftItem::default_instance_ = NULL;

stGlobal2GameChangeNftItem* stGlobal2GameChangeNftItem::New() const {
  return new stGlobal2GameChangeNftItem;
}

void stGlobal2GameChangeNftItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    charid_ = 0u;
    itemid_ = 0u;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGlobal2GameChangeNftItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGlobal2GameChangeNftItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGlobal2GameChangeNftItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGlobal2GameChangeNftItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGlobal2GameChangeNftItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGlobal2GameChangeNftItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGlobal2GameChangeNftItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGlobal2GameChangeNftItem::MergeFrom(const stGlobal2GameChangeNftItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGlobal2GameChangeNftItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGlobal2GameChangeNftItem::CopyFrom(const stGlobal2GameChangeNftItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGlobal2GameChangeNftItem::IsInitialized() const {

  return true;
}

void stGlobal2GameChangeNftItem::Swap(stGlobal2GameChangeNftItem* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGlobal2GameChangeNftItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGlobal2GameChangeNftItem_descriptor_;
  metadata.reflection = stGlobal2GameChangeNftItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGame2GlobalChangeNftItemResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGame2GlobalChangeNftItemResult_ProtoModID_descriptor_;
}
bool stGame2GlobalChangeNftItemResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGame2GlobalChangeNftItemResult_ProtoModID stGame2GlobalChangeNftItemResult::ModID;
const stGame2GlobalChangeNftItemResult_ProtoModID stGame2GlobalChangeNftItemResult::ProtoModID_MIN;
const stGame2GlobalChangeNftItemResult_ProtoModID stGame2GlobalChangeNftItemResult::ProtoModID_MAX;
const int stGame2GlobalChangeNftItemResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGame2GlobalChangeNftItemResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGame2GlobalChangeNftItemResult_ProtoFunID_descriptor_;
}
bool stGame2GlobalChangeNftItemResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 201:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGame2GlobalChangeNftItemResult_ProtoFunID stGame2GlobalChangeNftItemResult::FunID;
const stGame2GlobalChangeNftItemResult_ProtoFunID stGame2GlobalChangeNftItemResult::ProtoFunID_MIN;
const stGame2GlobalChangeNftItemResult_ProtoFunID stGame2GlobalChangeNftItemResult::ProtoFunID_MAX;
const int stGame2GlobalChangeNftItemResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGame2GlobalChangeNftItemResult::kWebConnIDFieldNumber;
const int stGame2GlobalChangeNftItemResult::kCharidFieldNumber;
const int stGame2GlobalChangeNftItemResult::kResultFieldNumber;
#endif  // !_MSC_VER

stGame2GlobalChangeNftItemResult::stGame2GlobalChangeNftItemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGame2GlobalChangeNftItemResult::InitAsDefaultInstance() {
}

stGame2GlobalChangeNftItemResult::stGame2GlobalChangeNftItemResult(const stGame2GlobalChangeNftItemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGame2GlobalChangeNftItemResult::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  charid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGame2GlobalChangeNftItemResult::~stGame2GlobalChangeNftItemResult() {
  SharedDtor();
}

void stGame2GlobalChangeNftItemResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGame2GlobalChangeNftItemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGame2GlobalChangeNftItemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGame2GlobalChangeNftItemResult_descriptor_;
}

const stGame2GlobalChangeNftItemResult& stGame2GlobalChangeNftItemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGame2GlobalChangeNftItemResult* stGame2GlobalChangeNftItemResult::default_instance_ = NULL;

stGame2GlobalChangeNftItemResult* stGame2GlobalChangeNftItemResult::New() const {
  return new stGame2GlobalChangeNftItemResult;
}

void stGame2GlobalChangeNftItemResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    charid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGame2GlobalChangeNftItemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGame2GlobalChangeNftItemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGame2GlobalChangeNftItemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGame2GlobalChangeNftItemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGame2GlobalChangeNftItemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGame2GlobalChangeNftItemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGame2GlobalChangeNftItemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGame2GlobalChangeNftItemResult::MergeFrom(const stGame2GlobalChangeNftItemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGame2GlobalChangeNftItemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGame2GlobalChangeNftItemResult::CopyFrom(const stGame2GlobalChangeNftItemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGame2GlobalChangeNftItemResult::IsInitialized() const {

  return true;
}

void stGame2GlobalChangeNftItemResult::Swap(stGame2GlobalChangeNftItemResult* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGame2GlobalChangeNftItemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGame2GlobalChangeNftItemResult_descriptor_;
  metadata.reflection = stGame2GlobalChangeNftItemResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGame2GlobalNftVipGift_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGame2GlobalNftVipGift_ProtoModID_descriptor_;
}
bool stGame2GlobalNftVipGift_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGame2GlobalNftVipGift_ProtoModID stGame2GlobalNftVipGift::ModID;
const stGame2GlobalNftVipGift_ProtoModID stGame2GlobalNftVipGift::ProtoModID_MIN;
const stGame2GlobalNftVipGift_ProtoModID stGame2GlobalNftVipGift::ProtoModID_MAX;
const int stGame2GlobalNftVipGift::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGame2GlobalNftVipGift_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGame2GlobalNftVipGift_ProtoFunID_descriptor_;
}
bool stGame2GlobalNftVipGift_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 202:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGame2GlobalNftVipGift_ProtoFunID stGame2GlobalNftVipGift::FunID;
const stGame2GlobalNftVipGift_ProtoFunID stGame2GlobalNftVipGift::ProtoFunID_MIN;
const stGame2GlobalNftVipGift_ProtoFunID stGame2GlobalNftVipGift::ProtoFunID_MAX;
const int stGame2GlobalNftVipGift::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGame2GlobalNftVipGift::kCharidFieldNumber;
const int stGame2GlobalNftVipGift::kAttachesFieldNumber;
const int stGame2GlobalNftVipGift::kVipLvFieldNumber;
#endif  // !_MSC_VER

stGame2GlobalNftVipGift::stGame2GlobalNftVipGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGame2GlobalNftVipGift::InitAsDefaultInstance() {
}

stGame2GlobalNftVipGift::stGame2GlobalNftVipGift(const stGame2GlobalNftVipGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGame2GlobalNftVipGift::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  viplv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGame2GlobalNftVipGift::~stGame2GlobalNftVipGift() {
  SharedDtor();
}

void stGame2GlobalNftVipGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGame2GlobalNftVipGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGame2GlobalNftVipGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGame2GlobalNftVipGift_descriptor_;
}

const stGame2GlobalNftVipGift& stGame2GlobalNftVipGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGame2GlobalNftVipGift* stGame2GlobalNftVipGift::default_instance_ = NULL;

stGame2GlobalNftVipGift* stGame2GlobalNftVipGift::New() const {
  return new stGame2GlobalNftVipGift;
}

void stGame2GlobalNftVipGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    viplv_ = 0u;
  }
  attaches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGame2GlobalNftVipGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attaches;
        break;
      }

      // repeated .Global.stSendMailAttach attaches = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attaches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attaches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_attaches;
        if (input->ExpectTag(24)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGame2GlobalNftVipGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // repeated .Global.stSendMailAttach attaches = 2;
  for (int i = 0; i < this->attaches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->attaches(i), output);
  }

  // optional uint32 vipLv = 3;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGame2GlobalNftVipGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // repeated .Global.stSendMailAttach attaches = 2;
  for (int i = 0; i < this->attaches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->attaches(i), target);
  }

  // optional uint32 vipLv = 3;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGame2GlobalNftVipGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 vipLv = 3;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

  }
  // repeated .Global.stSendMailAttach attaches = 2;
  total_size += 1 * this->attaches_size();
  for (int i = 0; i < this->attaches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attaches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGame2GlobalNftVipGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGame2GlobalNftVipGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGame2GlobalNftVipGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGame2GlobalNftVipGift::MergeFrom(const stGame2GlobalNftVipGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  attaches_.MergeFrom(from.attaches_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGame2GlobalNftVipGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGame2GlobalNftVipGift::CopyFrom(const stGame2GlobalNftVipGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGame2GlobalNftVipGift::IsInitialized() const {

  return true;
}

void stGame2GlobalNftVipGift::Swap(stGame2GlobalNftVipGift* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    attaches_.Swap(&other->attaches_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGame2GlobalNftVipGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGame2GlobalNftVipGift_descriptor_;
  metadata.reflection = stGame2GlobalNftVipGift_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetNftOfflineUserData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetNftOfflineUserData_ProtoModID_descriptor_;
}
bool stRetNftOfflineUserData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetNftOfflineUserData_ProtoModID stRetNftOfflineUserData::ModID;
const stRetNftOfflineUserData_ProtoModID stRetNftOfflineUserData::ProtoModID_MIN;
const stRetNftOfflineUserData_ProtoModID stRetNftOfflineUserData::ProtoModID_MAX;
const int stRetNftOfflineUserData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetNftOfflineUserData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetNftOfflineUserData_ProtoFunID_descriptor_;
}
bool stRetNftOfflineUserData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 203:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetNftOfflineUserData_ProtoFunID stRetNftOfflineUserData::FunID;
const stRetNftOfflineUserData_ProtoFunID stRetNftOfflineUserData::ProtoFunID_MIN;
const stRetNftOfflineUserData_ProtoFunID stRetNftOfflineUserData::ProtoFunID_MAX;
const int stRetNftOfflineUserData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetNftOfflineUserData::kCharidFieldNumber;
const int stRetNftOfflineUserData::kDataSizeFieldNumber;
const int stRetNftOfflineUserData::kDataFieldNumber;
const int stRetNftOfflineUserData::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stRetNftOfflineUserData::stRetNftOfflineUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetNftOfflineUserData::InitAsDefaultInstance() {
}

stRetNftOfflineUserData::stRetNftOfflineUserData(const stRetNftOfflineUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetNftOfflineUserData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  datasize_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetNftOfflineUserData::~stRetNftOfflineUserData() {
  SharedDtor();
}

void stRetNftOfflineUserData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stRetNftOfflineUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetNftOfflineUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetNftOfflineUserData_descriptor_;
}

const stRetNftOfflineUserData& stRetNftOfflineUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetNftOfflineUserData* stRetNftOfflineUserData::default_instance_ = NULL;

stRetNftOfflineUserData* stRetNftOfflineUserData::New() const {
  return new stRetNftOfflineUserData;
}

void stRetNftOfflineUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    datasize_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetNftOfflineUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dataSize;
        break;
      }

      // optional uint32 dataSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetNftOfflineUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 dataSize = 2;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->datasize(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional uint32 webConnID = 4;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetNftOfflineUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 dataSize = 2;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->datasize(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 webConnID = 4;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetNftOfflineUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 dataSize = 2;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datasize());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 webConnID = 4;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetNftOfflineUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetNftOfflineUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetNftOfflineUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetNftOfflineUserData::MergeFrom(const stRetNftOfflineUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetNftOfflineUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetNftOfflineUserData::CopyFrom(const stRetNftOfflineUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetNftOfflineUserData::IsInitialized() const {

  return true;
}

void stRetNftOfflineUserData::Swap(stRetNftOfflineUserData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(datasize_, other->datasize_);
    std::swap(data_, other->data_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetNftOfflineUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetNftOfflineUserData_descriptor_;
  metadata.reflection = stRetNftOfflineUserData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetChangeNftOfflineUserData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChangeNftOfflineUserData_ProtoModID_descriptor_;
}
bool stRetChangeNftOfflineUserData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetChangeNftOfflineUserData_ProtoModID stRetChangeNftOfflineUserData::ModID;
const stRetChangeNftOfflineUserData_ProtoModID stRetChangeNftOfflineUserData::ProtoModID_MIN;
const stRetChangeNftOfflineUserData_ProtoModID stRetChangeNftOfflineUserData::ProtoModID_MAX;
const int stRetChangeNftOfflineUserData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetChangeNftOfflineUserData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChangeNftOfflineUserData_ProtoFunID_descriptor_;
}
bool stRetChangeNftOfflineUserData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 204:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetChangeNftOfflineUserData_ProtoFunID stRetChangeNftOfflineUserData::FunID;
const stRetChangeNftOfflineUserData_ProtoFunID stRetChangeNftOfflineUserData::ProtoFunID_MIN;
const stRetChangeNftOfflineUserData_ProtoFunID stRetChangeNftOfflineUserData::ProtoFunID_MAX;
const int stRetChangeNftOfflineUserData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetChangeNftOfflineUserData::kCharidFieldNumber;
const int stRetChangeNftOfflineUserData::kDataSizeFieldNumber;
const int stRetChangeNftOfflineUserData::kDataFieldNumber;
const int stRetChangeNftOfflineUserData::kWebConnIDFieldNumber;
const int stRetChangeNftOfflineUserData::kItemIDFieldNumber;
const int stRetChangeNftOfflineUserData::kCountFieldNumber;
#endif  // !_MSC_VER

stRetChangeNftOfflineUserData::stRetChangeNftOfflineUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetChangeNftOfflineUserData::InitAsDefaultInstance() {
}

stRetChangeNftOfflineUserData::stRetChangeNftOfflineUserData(const stRetChangeNftOfflineUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetChangeNftOfflineUserData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  datasize_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  webconnid_ = 0u;
  itemid_ = 0u;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetChangeNftOfflineUserData::~stRetChangeNftOfflineUserData() {
  SharedDtor();
}

void stRetChangeNftOfflineUserData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stRetChangeNftOfflineUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetChangeNftOfflineUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetChangeNftOfflineUserData_descriptor_;
}

const stRetChangeNftOfflineUserData& stRetChangeNftOfflineUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetChangeNftOfflineUserData* stRetChangeNftOfflineUserData::default_instance_ = NULL;

stRetChangeNftOfflineUserData* stRetChangeNftOfflineUserData::New() const {
  return new stRetChangeNftOfflineUserData;
}

void stRetChangeNftOfflineUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    datasize_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    webconnid_ = 0u;
    itemid_ = 0u;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetChangeNftOfflineUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dataSize;
        break;
      }

      // optional uint32 dataSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetChangeNftOfflineUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 dataSize = 2;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->datasize(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional uint32 webConnID = 4;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->webconnid(), output);
  }

  // optional uint32 itemID = 5;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->itemid(), output);
  }

  // optional int32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetChangeNftOfflineUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 dataSize = 2;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->datasize(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 webConnID = 4;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->webconnid(), target);
  }

  // optional uint32 itemID = 5;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->itemid(), target);
  }

  // optional int32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetChangeNftOfflineUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 dataSize = 2;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datasize());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 webConnID = 4;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 itemID = 5;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional int32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetChangeNftOfflineUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetChangeNftOfflineUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetChangeNftOfflineUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetChangeNftOfflineUserData::MergeFrom(const stRetChangeNftOfflineUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetChangeNftOfflineUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetChangeNftOfflineUserData::CopyFrom(const stRetChangeNftOfflineUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetChangeNftOfflineUserData::IsInitialized() const {

  return true;
}

void stRetChangeNftOfflineUserData::Swap(stRetChangeNftOfflineUserData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(datasize_, other->datasize_);
    std::swap(data_, other->data_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetChangeNftOfflineUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetChangeNftOfflineUserData_descriptor_;
  metadata.reflection = stRetChangeNftOfflineUserData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendUserLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendUserLog_ProtoModID_descriptor_;
}
bool stSendUserLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendUserLog_ProtoModID stSendUserLog::ModID;
const stSendUserLog_ProtoModID stSendUserLog::ProtoModID_MIN;
const stSendUserLog_ProtoModID stSendUserLog::ProtoModID_MAX;
const int stSendUserLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendUserLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendUserLog_ProtoFunID_descriptor_;
}
bool stSendUserLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendUserLog_ProtoFunID stSendUserLog::FunID;
const stSendUserLog_ProtoFunID stSendUserLog::ProtoFunID_MIN;
const stSendUserLog_ProtoFunID stSendUserLog::ProtoFunID_MAX;
const int stSendUserLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendUserLog::kLogParamFieldNumber;
#endif  // !_MSC_VER

stSendUserLog::stSendUserLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendUserLog::InitAsDefaultInstance() {
}

stSendUserLog::stSendUserLog(const stSendUserLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendUserLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendUserLog::~stSendUserLog() {
  SharedDtor();
}

void stSendUserLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendUserLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendUserLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendUserLog_descriptor_;
}

const stSendUserLog& stSendUserLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSendUserLog* stSendUserLog::default_instance_ = NULL;

stSendUserLog* stSendUserLog::New() const {
  return new stSendUserLog;
}

void stSendUserLog::Clear() {
  logparam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendUserLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string logParam = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_logparam()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logparam(this->logparam_size() - 1).data(),
            this->logparam(this->logparam_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_logParam;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendUserLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string logParam = 1;
  for (int i = 0; i < this->logparam_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->logparam(i).data(), this->logparam(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->logparam(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendUserLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string logParam = 1;
  for (int i = 0; i < this->logparam_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logparam(i).data(), this->logparam(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->logparam(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendUserLog::ByteSize() const {
  int total_size = 0;

  // repeated string logParam = 1;
  total_size += 1 * this->logparam_size();
  for (int i = 0; i < this->logparam_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->logparam(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendUserLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendUserLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendUserLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendUserLog::MergeFrom(const stSendUserLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  logparam_.MergeFrom(from.logparam_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendUserLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendUserLog::CopyFrom(const stSendUserLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendUserLog::IsInitialized() const {

  return true;
}

void stSendUserLog::Swap(stSendUserLog* other) {
  if (other != this) {
    logparam_.Swap(&other->logparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendUserLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendUserLog_descriptor_;
  metadata.reflection = stSendUserLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqKillUserOut_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqKillUserOut_ProtoModID_descriptor_;
}
bool stReqKillUserOut_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqKillUserOut_ProtoModID stReqKillUserOut::ModID;
const stReqKillUserOut_ProtoModID stReqKillUserOut::ProtoModID_MIN;
const stReqKillUserOut_ProtoModID stReqKillUserOut::ProtoModID_MAX;
const int stReqKillUserOut::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqKillUserOut_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqKillUserOut_ProtoFunID_descriptor_;
}
bool stReqKillUserOut_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqKillUserOut_ProtoFunID stReqKillUserOut::FunID;
const stReqKillUserOut_ProtoFunID stReqKillUserOut::ProtoFunID_MIN;
const stReqKillUserOut_ProtoFunID stReqKillUserOut::ProtoFunID_MAX;
const int stReqKillUserOut::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqKillUserOut::kCharIDFieldNumber;
const int stReqKillUserOut::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stReqKillUserOut::stReqKillUserOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqKillUserOut::InitAsDefaultInstance() {
}

stReqKillUserOut::stReqKillUserOut(const stReqKillUserOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqKillUserOut::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqKillUserOut::~stReqKillUserOut() {
  SharedDtor();
}

void stReqKillUserOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqKillUserOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqKillUserOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqKillUserOut_descriptor_;
}

const stReqKillUserOut& stReqKillUserOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqKillUserOut* stReqKillUserOut::default_instance_ = NULL;

stReqKillUserOut* stReqKillUserOut::New() const {
  return new stReqKillUserOut;
}

void stReqKillUserOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqKillUserOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqKillUserOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqKillUserOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqKillUserOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqKillUserOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqKillUserOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqKillUserOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqKillUserOut::MergeFrom(const stReqKillUserOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqKillUserOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqKillUserOut::CopyFrom(const stReqKillUserOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqKillUserOut::IsInitialized() const {

  return true;
}

void stReqKillUserOut::Swap(stReqKillUserOut* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqKillUserOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqKillUserOut_descriptor_;
  metadata.reflection = stReqKillUserOut_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stKillUserOutResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillUserOutResult_ProtoModID_descriptor_;
}
bool stKillUserOutResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillUserOutResult_ProtoModID stKillUserOutResult::ModID;
const stKillUserOutResult_ProtoModID stKillUserOutResult::ProtoModID_MIN;
const stKillUserOutResult_ProtoModID stKillUserOutResult::ProtoModID_MAX;
const int stKillUserOutResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stKillUserOutResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillUserOutResult_ProtoFunID_descriptor_;
}
bool stKillUserOutResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillUserOutResult_ProtoFunID stKillUserOutResult::FunID;
const stKillUserOutResult_ProtoFunID stKillUserOutResult::ProtoFunID_MIN;
const stKillUserOutResult_ProtoFunID stKillUserOutResult::ProtoFunID_MAX;
const int stKillUserOutResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stKillUserOutResult::kResultFieldNumber;
const int stKillUserOutResult::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stKillUserOutResult::stKillUserOutResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stKillUserOutResult::InitAsDefaultInstance() {
}

stKillUserOutResult::stKillUserOutResult(const stKillUserOutResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stKillUserOutResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stKillUserOutResult::~stKillUserOutResult() {
  SharedDtor();
}

void stKillUserOutResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stKillUserOutResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stKillUserOutResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillUserOutResult_descriptor_;
}

const stKillUserOutResult& stKillUserOutResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stKillUserOutResult* stKillUserOutResult::default_instance_ = NULL;

stKillUserOutResult* stKillUserOutResult::New() const {
  return new stKillUserOutResult;
}

void stKillUserOutResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stKillUserOutResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stKillUserOutResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stKillUserOutResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stKillUserOutResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stKillUserOutResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stKillUserOutResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stKillUserOutResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stKillUserOutResult::MergeFrom(const stKillUserOutResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stKillUserOutResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stKillUserOutResult::CopyFrom(const stKillUserOutResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stKillUserOutResult::IsInitialized() const {

  return true;
}

void stKillUserOutResult::Swap(stKillUserOutResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stKillUserOutResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stKillUserOutResult_descriptor_;
  metadata.reflection = stKillUserOutResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSetUserGMType_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSetUserGMType_ProtoModID_descriptor_;
}
bool stReqSetUserGMType_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSetUserGMType_ProtoModID stReqSetUserGMType::ModID;
const stReqSetUserGMType_ProtoModID stReqSetUserGMType::ProtoModID_MIN;
const stReqSetUserGMType_ProtoModID stReqSetUserGMType::ProtoModID_MAX;
const int stReqSetUserGMType::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSetUserGMType_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSetUserGMType_ProtoFunID_descriptor_;
}
bool stReqSetUserGMType_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSetUserGMType_ProtoFunID stReqSetUserGMType::FunID;
const stReqSetUserGMType_ProtoFunID stReqSetUserGMType::ProtoFunID_MIN;
const stReqSetUserGMType_ProtoFunID stReqSetUserGMType::ProtoFunID_MAX;
const int stReqSetUserGMType::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSetUserGMType::kCharIDFieldNumber;
const int stReqSetUserGMType::kGmValueFieldNumber;
const int stReqSetUserGMType::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stReqSetUserGMType::stReqSetUserGMType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSetUserGMType::InitAsDefaultInstance() {
}

stReqSetUserGMType::stReqSetUserGMType(const stReqSetUserGMType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSetUserGMType::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  gmvalue_ = 0u;
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSetUserGMType::~stReqSetUserGMType() {
  SharedDtor();
}

void stReqSetUserGMType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqSetUserGMType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSetUserGMType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSetUserGMType_descriptor_;
}

const stReqSetUserGMType& stReqSetUserGMType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqSetUserGMType* stReqSetUserGMType::default_instance_ = NULL;

stReqSetUserGMType* stReqSetUserGMType::New() const {
  return new stReqSetUserGMType;
}

void stReqSetUserGMType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    gmvalue_ = 0u;
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSetUserGMType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gmValue;
        break;
      }

      // optional uint32 gmValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gmValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gmvalue_)));
          set_has_gmvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSetUserGMType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 gmValue = 2;
  if (has_gmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gmvalue(), output);
  }

  // optional uint32 webConnID = 3;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSetUserGMType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 gmValue = 2;
  if (has_gmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gmvalue(), target);
  }

  // optional uint32 webConnID = 3;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSetUserGMType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 gmValue = 2;
    if (has_gmvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gmvalue());
    }

    // optional uint32 webConnID = 3;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSetUserGMType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSetUserGMType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSetUserGMType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSetUserGMType::MergeFrom(const stReqSetUserGMType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gmvalue()) {
      set_gmvalue(from.gmvalue());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSetUserGMType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSetUserGMType::CopyFrom(const stReqSetUserGMType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSetUserGMType::IsInitialized() const {

  return true;
}

void stReqSetUserGMType::Swap(stReqSetUserGMType* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(gmvalue_, other->gmvalue_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSetUserGMType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSetUserGMType_descriptor_;
  metadata.reflection = stReqSetUserGMType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSetUserGMTypeResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetUserGMTypeResult_ProtoModID_descriptor_;
}
bool stSetUserGMTypeResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetUserGMTypeResult_ProtoModID stSetUserGMTypeResult::ModID;
const stSetUserGMTypeResult_ProtoModID stSetUserGMTypeResult::ProtoModID_MIN;
const stSetUserGMTypeResult_ProtoModID stSetUserGMTypeResult::ProtoModID_MAX;
const int stSetUserGMTypeResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSetUserGMTypeResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetUserGMTypeResult_ProtoFunID_descriptor_;
}
bool stSetUserGMTypeResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetUserGMTypeResult_ProtoFunID stSetUserGMTypeResult::FunID;
const stSetUserGMTypeResult_ProtoFunID stSetUserGMTypeResult::ProtoFunID_MIN;
const stSetUserGMTypeResult_ProtoFunID stSetUserGMTypeResult::ProtoFunID_MAX;
const int stSetUserGMTypeResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSetUserGMTypeResult::kResultFieldNumber;
const int stSetUserGMTypeResult::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stSetUserGMTypeResult::stSetUserGMTypeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSetUserGMTypeResult::InitAsDefaultInstance() {
}

stSetUserGMTypeResult::stSetUserGMTypeResult(const stSetUserGMTypeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSetUserGMTypeResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSetUserGMTypeResult::~stSetUserGMTypeResult() {
  SharedDtor();
}

void stSetUserGMTypeResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSetUserGMTypeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSetUserGMTypeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetUserGMTypeResult_descriptor_;
}

const stSetUserGMTypeResult& stSetUserGMTypeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSetUserGMTypeResult* stSetUserGMTypeResult::default_instance_ = NULL;

stSetUserGMTypeResult* stSetUserGMTypeResult::New() const {
  return new stSetUserGMTypeResult;
}

void stSetUserGMTypeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSetUserGMTypeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSetUserGMTypeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSetUserGMTypeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSetUserGMTypeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSetUserGMTypeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSetUserGMTypeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSetUserGMTypeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSetUserGMTypeResult::MergeFrom(const stSetUserGMTypeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSetUserGMTypeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSetUserGMTypeResult::CopyFrom(const stSetUserGMTypeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSetUserGMTypeResult::IsInitialized() const {

  return true;
}

void stSetUserGMTypeResult::Swap(stSetUserGMTypeResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSetUserGMTypeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSetUserGMTypeResult_descriptor_;
  metadata.reflection = stSetUserGMTypeResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBanUser_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBanUser_ProtoModID_descriptor_;
}
bool stReqBanUser_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBanUser_ProtoModID stReqBanUser::ModID;
const stReqBanUser_ProtoModID stReqBanUser::ProtoModID_MIN;
const stReqBanUser_ProtoModID stReqBanUser::ProtoModID_MAX;
const int stReqBanUser::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBanUser_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBanUser_ProtoFunID_descriptor_;
}
bool stReqBanUser_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBanUser_ProtoFunID stReqBanUser::FunID;
const stReqBanUser_ProtoFunID stReqBanUser::ProtoFunID_MIN;
const stReqBanUser_ProtoFunID stReqBanUser::ProtoFunID_MAX;
const int stReqBanUser::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBanUser::kCharIDFieldNumber;
const int stReqBanUser::kWebConnIDFieldNumber;
const int stReqBanUser::kBanFieldNumber;
#endif  // !_MSC_VER

stReqBanUser::stReqBanUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBanUser::InitAsDefaultInstance() {
}

stReqBanUser::stReqBanUser(const stReqBanUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBanUser::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  webconnid_ = 0u;
  ban_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBanUser::~stReqBanUser() {
  SharedDtor();
}

void stReqBanUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBanUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBanUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBanUser_descriptor_;
}

const stReqBanUser& stReqBanUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqBanUser* stReqBanUser::default_instance_ = NULL;

stReqBanUser* stReqBanUser::New() const {
  return new stReqBanUser;
}

void stReqBanUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    webconnid_ = 0u;
    ban_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBanUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ban;
        break;
      }

      // optional bool ban = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ban:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ban_)));
          set_has_ban();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBanUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  // optional bool ban = 3;
  if (has_ban()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ban(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBanUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  // optional bool ban = 3;
  if (has_ban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ban(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBanUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional bool ban = 3;
    if (has_ban()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBanUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBanUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBanUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBanUser::MergeFrom(const stReqBanUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_ban()) {
      set_ban(from.ban());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBanUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBanUser::CopyFrom(const stReqBanUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBanUser::IsInitialized() const {

  return true;
}

void stReqBanUser::Swap(stReqBanUser* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(ban_, other->ban_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBanUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBanUser_descriptor_;
  metadata.reflection = stReqBanUser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBanUserResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBanUserResult_ProtoModID_descriptor_;
}
bool stBanUserResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBanUserResult_ProtoModID stBanUserResult::ModID;
const stBanUserResult_ProtoModID stBanUserResult::ProtoModID_MIN;
const stBanUserResult_ProtoModID stBanUserResult::ProtoModID_MAX;
const int stBanUserResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBanUserResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBanUserResult_ProtoFunID_descriptor_;
}
bool stBanUserResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBanUserResult_ProtoFunID stBanUserResult::FunID;
const stBanUserResult_ProtoFunID stBanUserResult::ProtoFunID_MIN;
const stBanUserResult_ProtoFunID stBanUserResult::ProtoFunID_MAX;
const int stBanUserResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBanUserResult::kWebConnIDFieldNumber;
const int stBanUserResult::kResultFieldNumber;
#endif  // !_MSC_VER

stBanUserResult::stBanUserResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBanUserResult::InitAsDefaultInstance() {
}

stBanUserResult::stBanUserResult(const stBanUserResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBanUserResult::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBanUserResult::~stBanUserResult() {
  SharedDtor();
}

void stBanUserResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stBanUserResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBanUserResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBanUserResult_descriptor_;
}

const stBanUserResult& stBanUserResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stBanUserResult* stBanUserResult::default_instance_ = NULL;

stBanUserResult* stBanUserResult::New() const {
  return new stBanUserResult;
}

void stBanUserResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBanUserResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional bool result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBanUserResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional bool result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBanUserResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional bool result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBanUserResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional bool result = 2;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBanUserResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBanUserResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBanUserResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBanUserResult::MergeFrom(const stBanUserResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBanUserResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBanUserResult::CopyFrom(const stBanUserResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBanUserResult::IsInitialized() const {

  return true;
}

void stBanUserResult::Swap(stBanUserResult* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBanUserResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBanUserResult_descriptor_;
  metadata.reflection = stBanUserResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSendMailAttach::kItemIDFieldNumber;
const int stSendMailAttach::kNumFieldNumber;
#endif  // !_MSC_VER

stSendMailAttach::stSendMailAttach()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendMailAttach::InitAsDefaultInstance() {
}

stSendMailAttach::stSendMailAttach(const stSendMailAttach& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendMailAttach::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendMailAttach::~stSendMailAttach() {
  SharedDtor();
}

void stSendMailAttach::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendMailAttach::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendMailAttach::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendMailAttach_descriptor_;
}

const stSendMailAttach& stSendMailAttach::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSendMailAttach* stSendMailAttach::default_instance_ = NULL;

stSendMailAttach* stSendMailAttach::New() const {
  return new stSendMailAttach;
}

void stSendMailAttach::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendMailAttach::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendMailAttach::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendMailAttach::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendMailAttach::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendMailAttach::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendMailAttach* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendMailAttach*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendMailAttach::MergeFrom(const stSendMailAttach& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendMailAttach::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendMailAttach::CopyFrom(const stSendMailAttach& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendMailAttach::IsInitialized() const {

  return true;
}

void stSendMailAttach::Swap(stSendMailAttach* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendMailAttach::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendMailAttach_descriptor_;
  metadata.reflection = stSendMailAttach_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendMail2User_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendMail2User_ProtoModID_descriptor_;
}
bool stSendMail2User_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendMail2User_ProtoModID stSendMail2User::ModID;
const stSendMail2User_ProtoModID stSendMail2User::ProtoModID_MIN;
const stSendMail2User_ProtoModID stSendMail2User::ProtoModID_MAX;
const int stSendMail2User::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendMail2User_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendMail2User_ProtoFunID_descriptor_;
}
bool stSendMail2User_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendMail2User_ProtoFunID stSendMail2User::FunID;
const stSendMail2User_ProtoFunID stSendMail2User::ProtoFunID_MIN;
const stSendMail2User_ProtoFunID stSendMail2User::ProtoFunID_MAX;
const int stSendMail2User::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendMail2User::kTitleFieldNumber;
const int stSendMail2User::kContentFieldNumber;
const int stSendMail2User::kUserListFieldNumber;
const int stSendMail2User::kAttachesFieldNumber;
const int stSendMail2User::kWebConnIDFieldNumber;
const int stSendMail2User::kTagFieldNumber;
const int stSendMail2User::kBAllFieldNumber;
#endif  // !_MSC_VER

stSendMail2User::stSendMail2User()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendMail2User::InitAsDefaultInstance() {
}

stSendMail2User::stSendMail2User(const stSendMail2User& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendMail2User::SharedCtor() {
  _cached_size_ = 0;
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  webconnid_ = 0u;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ball_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendMail2User::~stSendMail2User() {
  SharedDtor();
}

void stSendMail2User::SharedDtor() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void stSendMail2User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendMail2User::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendMail2User_descriptor_;
}

const stSendMail2User& stSendMail2User::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSendMail2User* stSendMail2User::default_instance_ = NULL;

stSendMail2User* stSendMail2User::New() const {
  return new stSendMail2User;
}

void stSendMail2User::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    webconnid_ = 0u;
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    ball_ = false;
  }
  userlist_.Clear();
  attaches_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendMail2User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userList;
        break;
      }

      // repeated uint32 userList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_userlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_userlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_userList;
        if (input->ExpectTag(34)) goto parse_attaches;
        break;
      }

      // repeated .Global.stSendMailAttach attaches = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attaches:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attaches()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_attaches;
        if (input->ExpectTag(40)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tag;
        break;
      }

      // optional string tag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bAll;
        break;
      }

      // optional bool bAll = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bAll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ball_)));
          set_has_ball();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendMail2User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // repeated uint32 userList = 3;
  for (int i = 0; i < this->userlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->userlist(i), output);
  }

  // repeated .Global.stSendMailAttach attaches = 4;
  for (int i = 0; i < this->attaches_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->attaches(i), output);
  }

  // optional uint32 webConnID = 5;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->webconnid(), output);
  }

  // optional string tag = 6;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tag(), output);
  }

  // optional bool bAll = 7;
  if (has_ball()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ball(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendMail2User::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // repeated uint32 userList = 3;
  for (int i = 0; i < this->userlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->userlist(i), target);
  }

  // repeated .Global.stSendMailAttach attaches = 4;
  for (int i = 0; i < this->attaches_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->attaches(i), target);
  }

  // optional uint32 webConnID = 5;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->webconnid(), target);
  }

  // optional string tag = 6;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tag(), target);
  }

  // optional bool bAll = 7;
  if (has_ball()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ball(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendMail2User::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 webConnID = 5;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional string tag = 6;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional bool bAll = 7;
    if (has_ball()) {
      total_size += 1 + 1;
    }

  }
  // repeated uint32 userList = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->userlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->userlist(i));
    }
    total_size += 1 * this->userlist_size() + data_size;
  }

  // repeated .Global.stSendMailAttach attaches = 4;
  total_size += 1 * this->attaches_size();
  for (int i = 0; i < this->attaches_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attaches(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendMail2User::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendMail2User* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendMail2User*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendMail2User::MergeFrom(const stSendMail2User& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlist_.MergeFrom(from.userlist_);
  attaches_.MergeFrom(from.attaches_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_ball()) {
      set_ball(from.ball());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendMail2User::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendMail2User::CopyFrom(const stSendMail2User& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendMail2User::IsInitialized() const {

  return true;
}

void stSendMail2User::Swap(stSendMail2User* other) {
  if (other != this) {
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    userlist_.Swap(&other->userlist_);
    attaches_.Swap(&other->attaches_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(tag_, other->tag_);
    std::swap(ball_, other->ball_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendMail2User::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendMail2User_descriptor_;
  metadata.reflection = stSendMail2User_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendMail2UserResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendMail2UserResult_ProtoModID_descriptor_;
}
bool stSendMail2UserResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendMail2UserResult_ProtoModID stSendMail2UserResult::ModID;
const stSendMail2UserResult_ProtoModID stSendMail2UserResult::ProtoModID_MIN;
const stSendMail2UserResult_ProtoModID stSendMail2UserResult::ProtoModID_MAX;
const int stSendMail2UserResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendMail2UserResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendMail2UserResult_ProtoFunID_descriptor_;
}
bool stSendMail2UserResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendMail2UserResult_ProtoFunID stSendMail2UserResult::FunID;
const stSendMail2UserResult_ProtoFunID stSendMail2UserResult::ProtoFunID_MIN;
const stSendMail2UserResult_ProtoFunID stSendMail2UserResult::ProtoFunID_MAX;
const int stSendMail2UserResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendMail2UserResult::kResultFieldNumber;
const int stSendMail2UserResult::kWebConnIDFieldNumber;
const int stSendMail2UserResult::kTagFieldNumber;
#endif  // !_MSC_VER

stSendMail2UserResult::stSendMail2UserResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendMail2UserResult::InitAsDefaultInstance() {
}

stSendMail2UserResult::stSendMail2UserResult(const stSendMail2UserResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendMail2UserResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  webconnid_ = 0u;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendMail2UserResult::~stSendMail2UserResult() {
  SharedDtor();
}

void stSendMail2UserResult::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (this != default_instance_) {
  }
}

void stSendMail2UserResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendMail2UserResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendMail2UserResult_descriptor_;
}

const stSendMail2UserResult& stSendMail2UserResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSendMail2UserResult* stSendMail2UserResult::default_instance_ = NULL;

stSendMail2UserResult* stSendMail2UserResult::New() const {
  return new stSendMail2UserResult;
}

void stSendMail2UserResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    webconnid_ = 0u;
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendMail2UserResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tag;
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendMail2UserResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendMail2UserResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  // optional string tag = 3;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendMail2UserResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional string tag = 3;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendMail2UserResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendMail2UserResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendMail2UserResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendMail2UserResult::MergeFrom(const stSendMail2UserResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendMail2UserResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendMail2UserResult::CopyFrom(const stSendMail2UserResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendMail2UserResult::IsInitialized() const {

  return true;
}

void stSendMail2UserResult::Swap(stSendMail2UserResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendMail2UserResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendMail2UserResult_descriptor_;
  metadata.reflection = stSendMail2UserResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWebMotifyUserInfo_ProtoModID_descriptor_;
}
bool stWebMotifyUserInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWebMotifyUserInfo_ProtoModID stWebMotifyUserInfo::ModID;
const stWebMotifyUserInfo_ProtoModID stWebMotifyUserInfo::ProtoModID_MIN;
const stWebMotifyUserInfo_ProtoModID stWebMotifyUserInfo::ProtoModID_MAX;
const int stWebMotifyUserInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWebMotifyUserInfo_ProtoFunID_descriptor_;
}
bool stWebMotifyUserInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWebMotifyUserInfo_ProtoFunID stWebMotifyUserInfo::FunID;
const stWebMotifyUserInfo_ProtoFunID stWebMotifyUserInfo::ProtoFunID_MIN;
const stWebMotifyUserInfo_ProtoFunID stWebMotifyUserInfo::ProtoFunID_MAX;
const int stWebMotifyUserInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stWebMotifyUserInfo::kCharIDFieldNumber;
const int stWebMotifyUserInfo::kNewbieGuideIDFieldNumber;
const int stWebMotifyUserInfo::kWebConnIDFieldNumber;
const int stWebMotifyUserInfo::kGoldCoinFieldNumber;
const int stWebMotifyUserInfo::kDiamondFieldNumber;
const int stWebMotifyUserInfo::kVipPointFieldNumber;
#endif  // !_MSC_VER

stWebMotifyUserInfo::stWebMotifyUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWebMotifyUserInfo::InitAsDefaultInstance() {
}

stWebMotifyUserInfo::stWebMotifyUserInfo(const stWebMotifyUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWebMotifyUserInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  newbieguideid_ = 0u;
  webconnid_ = 0u;
  goldcoin_ = 0u;
  diamond_ = 0u;
  vippoint_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWebMotifyUserInfo::~stWebMotifyUserInfo() {
  SharedDtor();
}

void stWebMotifyUserInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stWebMotifyUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWebMotifyUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWebMotifyUserInfo_descriptor_;
}

const stWebMotifyUserInfo& stWebMotifyUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stWebMotifyUserInfo* stWebMotifyUserInfo::default_instance_ = NULL;

stWebMotifyUserInfo* stWebMotifyUserInfo::New() const {
  return new stWebMotifyUserInfo;
}

void stWebMotifyUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    newbieguideid_ = 0u;
    webconnid_ = 0u;
    goldcoin_ = 0u;
    diamond_ = 0u;
    vippoint_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWebMotifyUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_newbieGuideID;
        break;
      }

      // optional uint32 newbieGuideID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newbieGuideID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newbieguideid_)));
          set_has_newbieguideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goldCoin;
        break;
      }

      // optional uint32 goldCoin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &goldcoin_)));
          set_has_goldcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_diamond;
        break;
      }

      // optional uint32 diamond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vipPoint;
        break;
      }

      // optional uint32 vipPoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vippoint_)));
          set_has_vippoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stWebMotifyUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 newbieGuideID = 2;
  if (has_newbieguideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->newbieguideid(), output);
  }

  // optional uint32 webConnID = 3;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->webconnid(), output);
  }

  // optional uint32 goldCoin = 4;
  if (has_goldcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->goldcoin(), output);
  }

  // optional uint32 diamond = 5;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->diamond(), output);
  }

  // optional uint32 vipPoint = 6;
  if (has_vippoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->vippoint(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWebMotifyUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 newbieGuideID = 2;
  if (has_newbieguideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->newbieguideid(), target);
  }

  // optional uint32 webConnID = 3;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->webconnid(), target);
  }

  // optional uint32 goldCoin = 4;
  if (has_goldcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->goldcoin(), target);
  }

  // optional uint32 diamond = 5;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->diamond(), target);
  }

  // optional uint32 vipPoint = 6;
  if (has_vippoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->vippoint(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWebMotifyUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 newbieGuideID = 2;
    if (has_newbieguideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newbieguideid());
    }

    // optional uint32 webConnID = 3;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 goldCoin = 4;
    if (has_goldcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->goldcoin());
    }

    // optional uint32 diamond = 5;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamond());
    }

    // optional uint32 vipPoint = 6;
    if (has_vippoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vippoint());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWebMotifyUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWebMotifyUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWebMotifyUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWebMotifyUserInfo::MergeFrom(const stWebMotifyUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_newbieguideid()) {
      set_newbieguideid(from.newbieguideid());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_goldcoin()) {
      set_goldcoin(from.goldcoin());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_vippoint()) {
      set_vippoint(from.vippoint());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWebMotifyUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWebMotifyUserInfo::CopyFrom(const stWebMotifyUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWebMotifyUserInfo::IsInitialized() const {

  return true;
}

void stWebMotifyUserInfo::Swap(stWebMotifyUserInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(newbieguideid_, other->newbieguideid_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(goldcoin_, other->goldcoin_);
    std::swap(diamond_, other->diamond_);
    std::swap(vippoint_, other->vippoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWebMotifyUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWebMotifyUserInfo_descriptor_;
  metadata.reflection = stWebMotifyUserInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfoRet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWebMotifyUserInfoRet_ProtoModID_descriptor_;
}
bool stWebMotifyUserInfoRet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWebMotifyUserInfoRet_ProtoModID stWebMotifyUserInfoRet::ModID;
const stWebMotifyUserInfoRet_ProtoModID stWebMotifyUserInfoRet::ProtoModID_MIN;
const stWebMotifyUserInfoRet_ProtoModID stWebMotifyUserInfoRet::ProtoModID_MAX;
const int stWebMotifyUserInfoRet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWebMotifyUserInfoRet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWebMotifyUserInfoRet_ProtoFunID_descriptor_;
}
bool stWebMotifyUserInfoRet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWebMotifyUserInfoRet_ProtoFunID stWebMotifyUserInfoRet::FunID;
const stWebMotifyUserInfoRet_ProtoFunID stWebMotifyUserInfoRet::ProtoFunID_MIN;
const stWebMotifyUserInfoRet_ProtoFunID stWebMotifyUserInfoRet::ProtoFunID_MAX;
const int stWebMotifyUserInfoRet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stWebMotifyUserInfoRet::kCharIDFieldNumber;
const int stWebMotifyUserInfoRet::kWebConnIDFieldNumber;
const int stWebMotifyUserInfoRet::kResultFieldNumber;
#endif  // !_MSC_VER

stWebMotifyUserInfoRet::stWebMotifyUserInfoRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWebMotifyUserInfoRet::InitAsDefaultInstance() {
}

stWebMotifyUserInfoRet::stWebMotifyUserInfoRet(const stWebMotifyUserInfoRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWebMotifyUserInfoRet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  webconnid_ = 0u;
  result_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWebMotifyUserInfoRet::~stWebMotifyUserInfoRet() {
  SharedDtor();
}

void stWebMotifyUserInfoRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stWebMotifyUserInfoRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWebMotifyUserInfoRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWebMotifyUserInfoRet_descriptor_;
}

const stWebMotifyUserInfoRet& stWebMotifyUserInfoRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stWebMotifyUserInfoRet* stWebMotifyUserInfoRet::default_instance_ = NULL;

stWebMotifyUserInfoRet* stWebMotifyUserInfoRet::New() const {
  return new stWebMotifyUserInfoRet;
}

void stWebMotifyUserInfoRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    webconnid_ = 0u;
    result_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWebMotifyUserInfoRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional bool result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stWebMotifyUserInfoRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  // optional bool result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWebMotifyUserInfoRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  // optional bool result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWebMotifyUserInfoRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional bool result = 3;
    if (has_result()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWebMotifyUserInfoRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWebMotifyUserInfoRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWebMotifyUserInfoRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWebMotifyUserInfoRet::MergeFrom(const stWebMotifyUserInfoRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWebMotifyUserInfoRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWebMotifyUserInfoRet::CopyFrom(const stWebMotifyUserInfoRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWebMotifyUserInfoRet::IsInitialized() const {

  return true;
}

void stWebMotifyUserInfoRet::Swap(stWebMotifyUserInfoRet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWebMotifyUserInfoRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWebMotifyUserInfoRet_descriptor_;
  metadata.reflection = stWebMotifyUserInfoRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddOrUpdateNotice_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddOrUpdateNotice_ProtoModID_descriptor_;
}
bool stAddOrUpdateNotice_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddOrUpdateNotice_ProtoModID stAddOrUpdateNotice::ModID;
const stAddOrUpdateNotice_ProtoModID stAddOrUpdateNotice::ProtoModID_MIN;
const stAddOrUpdateNotice_ProtoModID stAddOrUpdateNotice::ProtoModID_MAX;
const int stAddOrUpdateNotice::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddOrUpdateNotice_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddOrUpdateNotice_ProtoFunID_descriptor_;
}
bool stAddOrUpdateNotice_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddOrUpdateNotice_ProtoFunID stAddOrUpdateNotice::FunID;
const stAddOrUpdateNotice_ProtoFunID stAddOrUpdateNotice::ProtoFunID_MIN;
const stAddOrUpdateNotice_ProtoFunID stAddOrUpdateNotice::ProtoFunID_MAX;
const int stAddOrUpdateNotice::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddOrUpdateNotice::kNoticeIDFieldNumber;
const int stAddOrUpdateNotice::kIntervalFieldNumber;
const int stAddOrUpdateNotice::kNumFieldNumber;
const int stAddOrUpdateNotice::kContentFieldNumber;
const int stAddOrUpdateNotice::kOpFieldNumber;
const int stAddOrUpdateNotice::kNoticePositionFieldNumber;
const int stAddOrUpdateNotice::kBeginTimeFieldNumber;
#endif  // !_MSC_VER

stAddOrUpdateNotice::stAddOrUpdateNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddOrUpdateNotice::InitAsDefaultInstance() {
}

stAddOrUpdateNotice::stAddOrUpdateNotice(const stAddOrUpdateNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddOrUpdateNotice::SharedCtor() {
  _cached_size_ = 0;
  noticeid_ = 0u;
  interval_ = 0;
  num_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  op_ = 1;
  noticeposition_ = 0u;
  begintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddOrUpdateNotice::~stAddOrUpdateNotice() {
  SharedDtor();
}

void stAddOrUpdateNotice::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void stAddOrUpdateNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddOrUpdateNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddOrUpdateNotice_descriptor_;
}

const stAddOrUpdateNotice& stAddOrUpdateNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stAddOrUpdateNotice* stAddOrUpdateNotice::default_instance_ = NULL;

stAddOrUpdateNotice* stAddOrUpdateNotice::New() const {
  return new stAddOrUpdateNotice;
}

void stAddOrUpdateNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noticeid_ = 0u;
    interval_ = 0;
    num_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    op_ = 1;
    noticeposition_ = 0u;
    begintime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddOrUpdateNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 noticeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noticeid_)));
          set_has_noticeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_interval;
        break;
      }

      // optional int32 interval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional uint32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional string content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_op;
        break;
      }

      // optional .Global.eNoticeOp op = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Global::eNoticeOp_IsValid(value)) {
            set_op(static_cast< ::Global::eNoticeOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_noticePosition;
        break;
      }

      // optional uint32 noticePosition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noticePosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noticeposition_)));
          set_has_noticeposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_beginTime;
        break;
      }

      // optional uint32 beginTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddOrUpdateNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 noticeID = 1;
  if (has_noticeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->noticeid(), output);
  }

  // optional int32 interval = 2;
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->interval(), output);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num(), output);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->content(), output);
  }

  // optional .Global.eNoticeOp op = 5;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->op(), output);
  }

  // optional uint32 noticePosition = 6;
  if (has_noticeposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->noticeposition(), output);
  }

  // optional uint32 beginTime = 7;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->begintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddOrUpdateNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 noticeID = 1;
  if (has_noticeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->noticeid(), target);
  }

  // optional int32 interval = 2;
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->interval(), target);
  }

  // optional uint32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num(), target);
  }

  // optional string content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->content(), target);
  }

  // optional .Global.eNoticeOp op = 5;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->op(), target);
  }

  // optional uint32 noticePosition = 6;
  if (has_noticeposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->noticeposition(), target);
  }

  // optional uint32 beginTime = 7;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->begintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddOrUpdateNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 noticeID = 1;
    if (has_noticeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noticeid());
    }

    // optional int32 interval = 2;
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }

    // optional uint32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional string content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .Global.eNoticeOp op = 5;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->op());
    }

    // optional uint32 noticePosition = 6;
    if (has_noticeposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noticeposition());
    }

    // optional uint32 beginTime = 7;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddOrUpdateNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddOrUpdateNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddOrUpdateNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddOrUpdateNotice::MergeFrom(const stAddOrUpdateNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noticeid()) {
      set_noticeid(from.noticeid());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_noticeposition()) {
      set_noticeposition(from.noticeposition());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddOrUpdateNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddOrUpdateNotice::CopyFrom(const stAddOrUpdateNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddOrUpdateNotice::IsInitialized() const {

  return true;
}

void stAddOrUpdateNotice::Swap(stAddOrUpdateNotice* other) {
  if (other != this) {
    std::swap(noticeid_, other->noticeid_);
    std::swap(interval_, other->interval_);
    std::swap(num_, other->num_);
    std::swap(content_, other->content_);
    std::swap(op_, other->op_);
    std::swap(noticeposition_, other->noticeposition_);
    std::swap(begintime_, other->begintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddOrUpdateNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddOrUpdateNotice_descriptor_;
  metadata.reflection = stAddOrUpdateNotice_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDelNotice_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelNotice_ProtoModID_descriptor_;
}
bool stDelNotice_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDelNotice_ProtoModID stDelNotice::ModID;
const stDelNotice_ProtoModID stDelNotice::ProtoModID_MIN;
const stDelNotice_ProtoModID stDelNotice::ProtoModID_MAX;
const int stDelNotice::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDelNotice_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelNotice_ProtoFunID_descriptor_;
}
bool stDelNotice_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDelNotice_ProtoFunID stDelNotice::FunID;
const stDelNotice_ProtoFunID stDelNotice::ProtoFunID_MIN;
const stDelNotice_ProtoFunID stDelNotice::ProtoFunID_MAX;
const int stDelNotice::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDelNotice::kNoticeIDFieldNumber;
#endif  // !_MSC_VER

stDelNotice::stDelNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDelNotice::InitAsDefaultInstance() {
}

stDelNotice::stDelNotice(const stDelNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDelNotice::SharedCtor() {
  _cached_size_ = 0;
  noticeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDelNotice::~stDelNotice() {
  SharedDtor();
}

void stDelNotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDelNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDelNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelNotice_descriptor_;
}

const stDelNotice& stDelNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDelNotice* stDelNotice::default_instance_ = NULL;

stDelNotice* stDelNotice::New() const {
  return new stDelNotice;
}

void stDelNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noticeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDelNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 noticeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &noticeid_)));
          set_has_noticeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDelNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 noticeID = 1;
  if (has_noticeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->noticeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDelNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 noticeID = 1;
  if (has_noticeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->noticeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDelNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 noticeID = 1;
    if (has_noticeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->noticeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDelNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDelNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDelNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDelNotice::MergeFrom(const stDelNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noticeid()) {
      set_noticeid(from.noticeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDelNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDelNotice::CopyFrom(const stDelNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDelNotice::IsInitialized() const {

  return true;
}

void stDelNotice::Swap(stDelNotice* other) {
  if (other != this) {
    std::swap(noticeid_, other->noticeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDelNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDelNotice_descriptor_;
  metadata.reflection = stDelNotice_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stWebNotifyRechargeInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWebNotifyRechargeInfo_ProtoModID_descriptor_;
}
bool stWebNotifyRechargeInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWebNotifyRechargeInfo_ProtoModID stWebNotifyRechargeInfo::ModID;
const stWebNotifyRechargeInfo_ProtoModID stWebNotifyRechargeInfo::ProtoModID_MIN;
const stWebNotifyRechargeInfo_ProtoModID stWebNotifyRechargeInfo::ProtoModID_MAX;
const int stWebNotifyRechargeInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWebNotifyRechargeInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWebNotifyRechargeInfo_ProtoFunID_descriptor_;
}
bool stWebNotifyRechargeInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWebNotifyRechargeInfo_ProtoFunID stWebNotifyRechargeInfo::FunID;
const stWebNotifyRechargeInfo_ProtoFunID stWebNotifyRechargeInfo::ProtoFunID_MIN;
const stWebNotifyRechargeInfo_ProtoFunID stWebNotifyRechargeInfo::ProtoFunID_MAX;
const int stWebNotifyRechargeInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stWebNotifyRechargeInfo::kCharIDFieldNumber;
const int stWebNotifyRechargeInfo::kMoneyFieldNumber;
const int stWebNotifyRechargeInfo::kItemIDFieldNumber;
const int stWebNotifyRechargeInfo::kTidFieldNumber;
const int stWebNotifyRechargeInfo::kAccountFieldNumber;
const int stWebNotifyRechargeInfo::kOpIDFieldNumber;
const int stWebNotifyRechargeInfo::kIsExtendFieldNumber;
const int stWebNotifyRechargeInfo::kDataFieldNumber;
const int stWebNotifyRechargeInfo::kPayChannelFieldNumber;
#endif  // !_MSC_VER

stWebNotifyRechargeInfo::stWebNotifyRechargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWebNotifyRechargeInfo::InitAsDefaultInstance() {
}

stWebNotifyRechargeInfo::stWebNotifyRechargeInfo(const stWebNotifyRechargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWebNotifyRechargeInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  money_ = 0u;
  itemid_ = 0u;
  tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  isextend_ = false;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paychannel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWebNotifyRechargeInfo::~stWebNotifyRechargeInfo() {
  SharedDtor();
}

void stWebNotifyRechargeInfo::SharedDtor() {
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stWebNotifyRechargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWebNotifyRechargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWebNotifyRechargeInfo_descriptor_;
}

const stWebNotifyRechargeInfo& stWebNotifyRechargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stWebNotifyRechargeInfo* stWebNotifyRechargeInfo::default_instance_ = NULL;

stWebNotifyRechargeInfo* stWebNotifyRechargeInfo::New() const {
  return new stWebNotifyRechargeInfo;
}

void stWebNotifyRechargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    money_ = 0u;
    itemid_ = 0u;
    if (has_tid()) {
      if (tid_ != &::google::protobuf::internal::kEmptyString) {
        tid_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    opid_ = 0u;
    isextend_ = false;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    paychannel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWebNotifyRechargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional uint32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tid;
        break;
      }

      // optional string tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tid().data(), this->tid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_account;
        break;
      }

      // optional string account = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isExtend;
        break;
      }

      // optional bool isExtend = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isExtend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isextend_)));
          set_has_isextend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_data;
        break;
      }

      // optional string data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_payChannel;
        break;
      }

      // optional uint32 payChannel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &paychannel_)));
          set_has_paychannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stWebNotifyRechargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->money(), output);
  }

  // optional uint32 itemID = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional string tid = 4;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tid(), output);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->account(), output);
  }

  // optional uint32 opID = 6;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->opid(), output);
  }

  // optional bool isExtend = 7;
  if (has_isextend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isextend(), output);
  }

  // optional string data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->data(), output);
  }

  // optional uint32 payChannel = 9;
  if (has_paychannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->paychannel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWebNotifyRechargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->money(), target);
  }

  // optional uint32 itemID = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional string tid = 4;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tid(), target);
  }

  // optional string account = 5;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->account(), target);
  }

  // optional uint32 opID = 6;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->opid(), target);
  }

  // optional bool isExtend = 7;
  if (has_isextend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isextend(), target);
  }

  // optional string data = 8;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->data(), target);
  }

  // optional uint32 payChannel = 9;
  if (has_paychannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->paychannel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWebNotifyRechargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // optional uint32 itemID = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string tid = 4;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tid());
    }

    // optional string account = 5;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 opID = 6;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional bool isExtend = 7;
    if (has_isextend()) {
      total_size += 1 + 1;
    }

    // optional string data = 8;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 payChannel = 9;
    if (has_paychannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->paychannel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWebNotifyRechargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWebNotifyRechargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWebNotifyRechargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWebNotifyRechargeInfo::MergeFrom(const stWebNotifyRechargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_isextend()) {
      set_isextend(from.isextend());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_paychannel()) {
      set_paychannel(from.paychannel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWebNotifyRechargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWebNotifyRechargeInfo::CopyFrom(const stWebNotifyRechargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWebNotifyRechargeInfo::IsInitialized() const {

  return true;
}

void stWebNotifyRechargeInfo::Swap(stWebNotifyRechargeInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(money_, other->money_);
    std::swap(itemid_, other->itemid_);
    std::swap(tid_, other->tid_);
    std::swap(account_, other->account_);
    std::swap(opid_, other->opid_);
    std::swap(isextend_, other->isextend_);
    std::swap(data_, other->data_);
    std::swap(paychannel_, other->paychannel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWebNotifyRechargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWebNotifyRechargeInfo_descriptor_;
  metadata.reflection = stWebNotifyRechargeInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddGiftBagCfg_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddGiftBagCfg_ProtoModID_descriptor_;
}
bool stAddGiftBagCfg_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddGiftBagCfg_ProtoModID stAddGiftBagCfg::ModID;
const stAddGiftBagCfg_ProtoModID stAddGiftBagCfg::ProtoModID_MIN;
const stAddGiftBagCfg_ProtoModID stAddGiftBagCfg::ProtoModID_MAX;
const int stAddGiftBagCfg::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddGiftBagCfg_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddGiftBagCfg_ProtoFunID_descriptor_;
}
bool stAddGiftBagCfg_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddGiftBagCfg_ProtoFunID stAddGiftBagCfg::FunID;
const stAddGiftBagCfg_ProtoFunID stAddGiftBagCfg::ProtoFunID_MIN;
const stAddGiftBagCfg_ProtoFunID stAddGiftBagCfg::ProtoFunID_MAX;
const int stAddGiftBagCfg::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddGiftBagCfg::kIdFieldNumber;
const int stAddGiftBagCfg::kContentFieldNumber;
#endif  // !_MSC_VER

stAddGiftBagCfg::stAddGiftBagCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddGiftBagCfg::InitAsDefaultInstance() {
}

stAddGiftBagCfg::stAddGiftBagCfg(const stAddGiftBagCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddGiftBagCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddGiftBagCfg::~stAddGiftBagCfg() {
  SharedDtor();
}

void stAddGiftBagCfg::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void stAddGiftBagCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddGiftBagCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddGiftBagCfg_descriptor_;
}

const stAddGiftBagCfg& stAddGiftBagCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stAddGiftBagCfg* stAddGiftBagCfg::default_instance_ = NULL;

stAddGiftBagCfg* stAddGiftBagCfg::New() const {
  return new stAddGiftBagCfg;
}

void stAddGiftBagCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddGiftBagCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddGiftBagCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddGiftBagCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddGiftBagCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddGiftBagCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddGiftBagCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddGiftBagCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddGiftBagCfg::MergeFrom(const stAddGiftBagCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddGiftBagCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddGiftBagCfg::CopyFrom(const stAddGiftBagCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddGiftBagCfg::IsInitialized() const {

  return true;
}

void stAddGiftBagCfg::Swap(stAddGiftBagCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddGiftBagCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddGiftBagCfg_descriptor_;
  metadata.reflection = stAddGiftBagCfg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDelGiftBagCfg_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelGiftBagCfg_ProtoModID_descriptor_;
}
bool stDelGiftBagCfg_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDelGiftBagCfg_ProtoModID stDelGiftBagCfg::ModID;
const stDelGiftBagCfg_ProtoModID stDelGiftBagCfg::ProtoModID_MIN;
const stDelGiftBagCfg_ProtoModID stDelGiftBagCfg::ProtoModID_MAX;
const int stDelGiftBagCfg::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDelGiftBagCfg_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelGiftBagCfg_ProtoFunID_descriptor_;
}
bool stDelGiftBagCfg_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDelGiftBagCfg_ProtoFunID stDelGiftBagCfg::FunID;
const stDelGiftBagCfg_ProtoFunID stDelGiftBagCfg::ProtoFunID_MIN;
const stDelGiftBagCfg_ProtoFunID stDelGiftBagCfg::ProtoFunID_MAX;
const int stDelGiftBagCfg::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDelGiftBagCfg::kIdFieldNumber;
#endif  // !_MSC_VER

stDelGiftBagCfg::stDelGiftBagCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDelGiftBagCfg::InitAsDefaultInstance() {
}

stDelGiftBagCfg::stDelGiftBagCfg(const stDelGiftBagCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDelGiftBagCfg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDelGiftBagCfg::~stDelGiftBagCfg() {
  SharedDtor();
}

void stDelGiftBagCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDelGiftBagCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDelGiftBagCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelGiftBagCfg_descriptor_;
}

const stDelGiftBagCfg& stDelGiftBagCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stDelGiftBagCfg* stDelGiftBagCfg::default_instance_ = NULL;

stDelGiftBagCfg* stDelGiftBagCfg::New() const {
  return new stDelGiftBagCfg;
}

void stDelGiftBagCfg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDelGiftBagCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDelGiftBagCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDelGiftBagCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDelGiftBagCfg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDelGiftBagCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDelGiftBagCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDelGiftBagCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDelGiftBagCfg::MergeFrom(const stDelGiftBagCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDelGiftBagCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDelGiftBagCfg::CopyFrom(const stDelGiftBagCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDelGiftBagCfg::IsInitialized() const {

  return true;
}

void stDelGiftBagCfg::Swap(stDelGiftBagCfg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDelGiftBagCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDelGiftBagCfg_descriptor_;
  metadata.reflection = stDelGiftBagCfg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddBlackAndWhite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddBlackAndWhite_ProtoModID_descriptor_;
}
bool stAddBlackAndWhite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddBlackAndWhite_ProtoModID stAddBlackAndWhite::ModID;
const stAddBlackAndWhite_ProtoModID stAddBlackAndWhite::ProtoModID_MIN;
const stAddBlackAndWhite_ProtoModID stAddBlackAndWhite::ProtoModID_MAX;
const int stAddBlackAndWhite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddBlackAndWhite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddBlackAndWhite_ProtoFunID_descriptor_;
}
bool stAddBlackAndWhite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddBlackAndWhite_ProtoFunID stAddBlackAndWhite::FunID;
const stAddBlackAndWhite_ProtoFunID stAddBlackAndWhite::ProtoFunID_MIN;
const stAddBlackAndWhite_ProtoFunID stAddBlackAndWhite::ProtoFunID_MAX;
const int stAddBlackAndWhite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddBlackAndWhite::kBlackListFieldNumber;
const int stAddBlackAndWhite::kWhiteListFieldNumber;
#endif  // !_MSC_VER

stAddBlackAndWhite::stAddBlackAndWhite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddBlackAndWhite::InitAsDefaultInstance() {
}

stAddBlackAndWhite::stAddBlackAndWhite(const stAddBlackAndWhite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddBlackAndWhite::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddBlackAndWhite::~stAddBlackAndWhite() {
  SharedDtor();
}

void stAddBlackAndWhite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAddBlackAndWhite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddBlackAndWhite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddBlackAndWhite_descriptor_;
}

const stAddBlackAndWhite& stAddBlackAndWhite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stAddBlackAndWhite* stAddBlackAndWhite::default_instance_ = NULL;

stAddBlackAndWhite* stAddBlackAndWhite::New() const {
  return new stAddBlackAndWhite;
}

void stAddBlackAndWhite::Clear() {
  blacklist_.Clear();
  whitelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddBlackAndWhite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string blackList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blackList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_blacklist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->blacklist(this->blacklist_size() - 1).data(),
            this->blacklist(this->blacklist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blackList;
        if (input->ExpectTag(18)) goto parse_whiteList;
        break;
      }

      // repeated string whiteList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_whiteList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_whitelist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->whitelist(this->whitelist_size() - 1).data(),
            this->whitelist(this->whitelist_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_whiteList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddBlackAndWhite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string blackList = 1;
  for (int i = 0; i < this->blacklist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->blacklist(i).data(), this->blacklist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->blacklist(i), output);
  }

  // repeated string whiteList = 2;
  for (int i = 0; i < this->whitelist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->whitelist(i).data(), this->whitelist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->whitelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddBlackAndWhite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string blackList = 1;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->blacklist(i).data(), this->blacklist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->blacklist(i), target);
  }

  // repeated string whiteList = 2;
  for (int i = 0; i < this->whitelist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->whitelist(i).data(), this->whitelist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->whitelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddBlackAndWhite::ByteSize() const {
  int total_size = 0;

  // repeated string blackList = 1;
  total_size += 1 * this->blacklist_size();
  for (int i = 0; i < this->blacklist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->blacklist(i));
  }

  // repeated string whiteList = 2;
  total_size += 1 * this->whitelist_size();
  for (int i = 0; i < this->whitelist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->whitelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddBlackAndWhite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddBlackAndWhite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddBlackAndWhite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddBlackAndWhite::MergeFrom(const stAddBlackAndWhite& from) {
  GOOGLE_CHECK_NE(&from, this);
  blacklist_.MergeFrom(from.blacklist_);
  whitelist_.MergeFrom(from.whitelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddBlackAndWhite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddBlackAndWhite::CopyFrom(const stAddBlackAndWhite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddBlackAndWhite::IsInitialized() const {

  return true;
}

void stAddBlackAndWhite::Swap(stAddBlackAndWhite* other) {
  if (other != this) {
    blacklist_.Swap(&other->blacklist_);
    whitelist_.Swap(&other->whitelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddBlackAndWhite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddBlackAndWhite_descriptor_;
  metadata.reflection = stAddBlackAndWhite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSetServerMaintenanceTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetServerMaintenanceTime_ProtoModID_descriptor_;
}
bool stSetServerMaintenanceTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetServerMaintenanceTime_ProtoModID stSetServerMaintenanceTime::ModID;
const stSetServerMaintenanceTime_ProtoModID stSetServerMaintenanceTime::ProtoModID_MIN;
const stSetServerMaintenanceTime_ProtoModID stSetServerMaintenanceTime::ProtoModID_MAX;
const int stSetServerMaintenanceTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSetServerMaintenanceTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetServerMaintenanceTime_ProtoFunID_descriptor_;
}
bool stSetServerMaintenanceTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSetServerMaintenanceTime_ProtoFunID stSetServerMaintenanceTime::FunID;
const stSetServerMaintenanceTime_ProtoFunID stSetServerMaintenanceTime::ProtoFunID_MIN;
const stSetServerMaintenanceTime_ProtoFunID stSetServerMaintenanceTime::ProtoFunID_MAX;
const int stSetServerMaintenanceTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSetServerMaintenanceTime::kOpTimeFieldNumber;
const int stSetServerMaintenanceTime::kOpDuringFieldNumber;
#endif  // !_MSC_VER

stSetServerMaintenanceTime::stSetServerMaintenanceTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSetServerMaintenanceTime::InitAsDefaultInstance() {
}

stSetServerMaintenanceTime::stSetServerMaintenanceTime(const stSetServerMaintenanceTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSetServerMaintenanceTime::SharedCtor() {
  _cached_size_ = 0;
  optime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opduring_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSetServerMaintenanceTime::~stSetServerMaintenanceTime() {
  SharedDtor();
}

void stSetServerMaintenanceTime::SharedDtor() {
  if (optime_ != &::google::protobuf::internal::kEmptyString) {
    delete optime_;
  }
  if (this != default_instance_) {
  }
}

void stSetServerMaintenanceTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSetServerMaintenanceTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSetServerMaintenanceTime_descriptor_;
}

const stSetServerMaintenanceTime& stSetServerMaintenanceTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSetServerMaintenanceTime* stSetServerMaintenanceTime::default_instance_ = NULL;

stSetServerMaintenanceTime* stSetServerMaintenanceTime::New() const {
  return new stSetServerMaintenanceTime;
}

void stSetServerMaintenanceTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_optime()) {
      if (optime_ != &::google::protobuf::internal::kEmptyString) {
        optime_->clear();
      }
    }
    opduring_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSetServerMaintenanceTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string opTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->optime().data(), this->optime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opDuring;
        break;
      }

      // optional uint32 opDuring = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opDuring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opduring_)));
          set_has_opduring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSetServerMaintenanceTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string opTime = 1;
  if (has_optime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->optime().data(), this->optime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->optime(), output);
  }

  // optional uint32 opDuring = 2;
  if (has_opduring()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opduring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSetServerMaintenanceTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string opTime = 1;
  if (has_optime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->optime().data(), this->optime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->optime(), target);
  }

  // optional uint32 opDuring = 2;
  if (has_opduring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opduring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSetServerMaintenanceTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string opTime = 1;
    if (has_optime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->optime());
    }

    // optional uint32 opDuring = 2;
    if (has_opduring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opduring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSetServerMaintenanceTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSetServerMaintenanceTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSetServerMaintenanceTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSetServerMaintenanceTime::MergeFrom(const stSetServerMaintenanceTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optime()) {
      set_optime(from.optime());
    }
    if (from.has_opduring()) {
      set_opduring(from.opduring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSetServerMaintenanceTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSetServerMaintenanceTime::CopyFrom(const stSetServerMaintenanceTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSetServerMaintenanceTime::IsInitialized() const {

  return true;
}

void stSetServerMaintenanceTime::Swap(stSetServerMaintenanceTime* other) {
  if (other != this) {
    std::swap(optime_, other->optime_);
    std::swap(opduring_, other->opduring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSetServerMaintenanceTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSetServerMaintenanceTime_descriptor_;
  metadata.reflection = stSetServerMaintenanceTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGetSvrConfig_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetSvrConfig_ProtoModID_descriptor_;
}
bool stGetSvrConfig_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetSvrConfig_ProtoModID stGetSvrConfig::ModID;
const stGetSvrConfig_ProtoModID stGetSvrConfig::ProtoModID_MIN;
const stGetSvrConfig_ProtoModID stGetSvrConfig::ProtoModID_MAX;
const int stGetSvrConfig::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGetSvrConfig_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetSvrConfig_ProtoFunID_descriptor_;
}
bool stGetSvrConfig_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGetSvrConfig_ProtoFunID stGetSvrConfig::FunID;
const stGetSvrConfig_ProtoFunID stGetSvrConfig::ProtoFunID_MIN;
const stGetSvrConfig_ProtoFunID stGetSvrConfig::ProtoFunID_MAX;
const int stGetSvrConfig::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGetSvrConfig::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stGetSvrConfig::stGetSvrConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGetSvrConfig::InitAsDefaultInstance() {
}

stGetSvrConfig::stGetSvrConfig(const stGetSvrConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGetSvrConfig::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGetSvrConfig::~stGetSvrConfig() {
  SharedDtor();
}

void stGetSvrConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGetSvrConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGetSvrConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGetSvrConfig_descriptor_;
}

const stGetSvrConfig& stGetSvrConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGetSvrConfig* stGetSvrConfig::default_instance_ = NULL;

stGetSvrConfig* stGetSvrConfig::New() const {
  return new stGetSvrConfig;
}

void stGetSvrConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGetSvrConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGetSvrConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGetSvrConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGetSvrConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGetSvrConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGetSvrConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGetSvrConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGetSvrConfig::MergeFrom(const stGetSvrConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGetSvrConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGetSvrConfig::CopyFrom(const stGetSvrConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGetSvrConfig::IsInitialized() const {

  return true;
}

void stGetSvrConfig::Swap(stGetSvrConfig* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGetSvrConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGetSvrConfig_descriptor_;
  metadata.reflection = stGetSvrConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetSvrConfig_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSvrConfig_ProtoModID_descriptor_;
}
bool stRetSvrConfig_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetSvrConfig_ProtoModID stRetSvrConfig::ModID;
const stRetSvrConfig_ProtoModID stRetSvrConfig::ProtoModID_MIN;
const stRetSvrConfig_ProtoModID stRetSvrConfig::ProtoModID_MAX;
const int stRetSvrConfig::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetSvrConfig_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSvrConfig_ProtoFunID_descriptor_;
}
bool stRetSvrConfig_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetSvrConfig_ProtoFunID stRetSvrConfig::FunID;
const stRetSvrConfig_ProtoFunID stRetSvrConfig::ProtoFunID_MIN;
const stRetSvrConfig_ProtoFunID stRetSvrConfig::ProtoFunID_MAX;
const int stRetSvrConfig::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetSvrConfig::kCfgPairFieldNumber;
const int stRetSvrConfig::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stRetSvrConfig::stRetSvrConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetSvrConfig::InitAsDefaultInstance() {
}

stRetSvrConfig::stRetSvrConfig(const stRetSvrConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetSvrConfig::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetSvrConfig::~stRetSvrConfig() {
  SharedDtor();
}

void stRetSvrConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetSvrConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetSvrConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSvrConfig_descriptor_;
}

const stRetSvrConfig& stRetSvrConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetSvrConfig* stRetSvrConfig::default_instance_ = NULL;

stRetSvrConfig* stRetSvrConfig::New() const {
  return new stRetSvrConfig;
}

void stRetSvrConfig::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    webconnid_ = 0u;
  }
  cfgpair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetSvrConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stServerCfgPair cfgPair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfgPair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cfgpair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cfgPair;
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetSvrConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stServerCfgPair cfgPair = 1;
  for (int i = 0; i < this->cfgpair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cfgpair(i), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetSvrConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stServerCfgPair cfgPair = 1;
  for (int i = 0; i < this->cfgpair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cfgpair(i), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetSvrConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  // repeated .Global.stServerCfgPair cfgPair = 1;
  total_size += 1 * this->cfgpair_size();
  for (int i = 0; i < this->cfgpair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cfgpair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetSvrConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetSvrConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetSvrConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetSvrConfig::MergeFrom(const stRetSvrConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfgpair_.MergeFrom(from.cfgpair_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetSvrConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetSvrConfig::CopyFrom(const stRetSvrConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetSvrConfig::IsInitialized() const {

  return true;
}

void stRetSvrConfig::Swap(stRetSvrConfig* other) {
  if (other != this) {
    cfgpair_.Swap(&other->cfgpair_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetSvrConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetSvrConfig_descriptor_;
  metadata.reflection = stRetSvrConfig_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUpdateSvrCfg_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateSvrCfg_ProtoModID_descriptor_;
}
bool stUpdateSvrCfg_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpdateSvrCfg_ProtoModID stUpdateSvrCfg::ModID;
const stUpdateSvrCfg_ProtoModID stUpdateSvrCfg::ProtoModID_MIN;
const stUpdateSvrCfg_ProtoModID stUpdateSvrCfg::ProtoModID_MAX;
const int stUpdateSvrCfg::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpdateSvrCfg_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateSvrCfg_ProtoFunID_descriptor_;
}
bool stUpdateSvrCfg_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpdateSvrCfg_ProtoFunID stUpdateSvrCfg::FunID;
const stUpdateSvrCfg_ProtoFunID stUpdateSvrCfg::ProtoFunID_MIN;
const stUpdateSvrCfg_ProtoFunID stUpdateSvrCfg::ProtoFunID_MAX;
const int stUpdateSvrCfg::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUpdateSvrCfg::kCfgPairFieldNumber;
#endif  // !_MSC_VER

stUpdateSvrCfg::stUpdateSvrCfg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUpdateSvrCfg::InitAsDefaultInstance() {
}

stUpdateSvrCfg::stUpdateSvrCfg(const stUpdateSvrCfg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUpdateSvrCfg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUpdateSvrCfg::~stUpdateSvrCfg() {
  SharedDtor();
}

void stUpdateSvrCfg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUpdateSvrCfg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUpdateSvrCfg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateSvrCfg_descriptor_;
}

const stUpdateSvrCfg& stUpdateSvrCfg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUpdateSvrCfg* stUpdateSvrCfg::default_instance_ = NULL;

stUpdateSvrCfg* stUpdateSvrCfg::New() const {
  return new stUpdateSvrCfg;
}

void stUpdateSvrCfg::Clear() {
  cfgpair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUpdateSvrCfg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Global.stServerCfgPair cfgPair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cfgPair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cfgpair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cfgPair;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUpdateSvrCfg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Global.stServerCfgPair cfgPair = 1;
  for (int i = 0; i < this->cfgpair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cfgpair(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUpdateSvrCfg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Global.stServerCfgPair cfgPair = 1;
  for (int i = 0; i < this->cfgpair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cfgpair(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUpdateSvrCfg::ByteSize() const {
  int total_size = 0;

  // repeated .Global.stServerCfgPair cfgPair = 1;
  total_size += 1 * this->cfgpair_size();
  for (int i = 0; i < this->cfgpair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cfgpair(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUpdateSvrCfg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUpdateSvrCfg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUpdateSvrCfg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUpdateSvrCfg::MergeFrom(const stUpdateSvrCfg& from) {
  GOOGLE_CHECK_NE(&from, this);
  cfgpair_.MergeFrom(from.cfgpair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUpdateSvrCfg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUpdateSvrCfg::CopyFrom(const stUpdateSvrCfg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUpdateSvrCfg::IsInitialized() const {

  return true;
}

void stUpdateSvrCfg::Swap(stUpdateSvrCfg* other) {
  if (other != this) {
    cfgpair_.Swap(&other->cfgpair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUpdateSvrCfg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUpdateSvrCfg_descriptor_;
  metadata.reflection = stUpdateSvrCfg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyWebOnlineNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyWebOnlineNum_ProtoModID_descriptor_;
}
bool stNotifyWebOnlineNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyWebOnlineNum_ProtoModID stNotifyWebOnlineNum::ModID;
const stNotifyWebOnlineNum_ProtoModID stNotifyWebOnlineNum::ProtoModID_MIN;
const stNotifyWebOnlineNum_ProtoModID stNotifyWebOnlineNum::ProtoModID_MAX;
const int stNotifyWebOnlineNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyWebOnlineNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyWebOnlineNum_ProtoFunID_descriptor_;
}
bool stNotifyWebOnlineNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyWebOnlineNum_ProtoFunID stNotifyWebOnlineNum::FunID;
const stNotifyWebOnlineNum_ProtoFunID stNotifyWebOnlineNum::ProtoFunID_MIN;
const stNotifyWebOnlineNum_ProtoFunID stNotifyWebOnlineNum::ProtoFunID_MAX;
const int stNotifyWebOnlineNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyWebOnlineNum::kNumFieldNumber;
#endif  // !_MSC_VER

stNotifyWebOnlineNum::stNotifyWebOnlineNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyWebOnlineNum::InitAsDefaultInstance() {
}

stNotifyWebOnlineNum::stNotifyWebOnlineNum(const stNotifyWebOnlineNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyWebOnlineNum::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyWebOnlineNum::~stNotifyWebOnlineNum() {
  SharedDtor();
}

void stNotifyWebOnlineNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyWebOnlineNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyWebOnlineNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyWebOnlineNum_descriptor_;
}

const stNotifyWebOnlineNum& stNotifyWebOnlineNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyWebOnlineNum* stNotifyWebOnlineNum::default_instance_ = NULL;

stNotifyWebOnlineNum* stNotifyWebOnlineNum::New() const {
  return new stNotifyWebOnlineNum;
}

void stNotifyWebOnlineNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyWebOnlineNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyWebOnlineNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyWebOnlineNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyWebOnlineNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyWebOnlineNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyWebOnlineNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyWebOnlineNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyWebOnlineNum::MergeFrom(const stNotifyWebOnlineNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyWebOnlineNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyWebOnlineNum::CopyFrom(const stNotifyWebOnlineNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyWebOnlineNum::IsInitialized() const {

  return true;
}

void stNotifyWebOnlineNum::Swap(stNotifyWebOnlineNum* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyWebOnlineNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyWebOnlineNum_descriptor_;
  metadata.reflection = stNotifyWebOnlineNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEnterSelectPage_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterSelectPage_ProtoModID_descriptor_;
}
bool stEnterSelectPage_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterSelectPage_ProtoModID stEnterSelectPage::ModID;
const stEnterSelectPage_ProtoModID stEnterSelectPage::ProtoModID_MIN;
const stEnterSelectPage_ProtoModID stEnterSelectPage::ProtoModID_MAX;
const int stEnterSelectPage::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterSelectPage_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterSelectPage_ProtoFunID_descriptor_;
}
bool stEnterSelectPage_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterSelectPage_ProtoFunID stEnterSelectPage::FunID;
const stEnterSelectPage_ProtoFunID stEnterSelectPage::ProtoFunID_MIN;
const stEnterSelectPage_ProtoFunID stEnterSelectPage::ProtoFunID_MAX;
const int stEnterSelectPage::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEnterSelectPage::kAccountFieldNumber;
const int stEnterSelectPage::kDeviceIDFieldNumber;
const int stEnterSelectPage::kOpIDFieldNumber;
#endif  // !_MSC_VER

stEnterSelectPage::stEnterSelectPage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterSelectPage::InitAsDefaultInstance() {
}

stEnterSelectPage::stEnterSelectPage(const stEnterSelectPage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterSelectPage::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterSelectPage::~stEnterSelectPage() {
  SharedDtor();
}

void stEnterSelectPage::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void stEnterSelectPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterSelectPage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterSelectPage_descriptor_;
}

const stEnterSelectPage& stEnterSelectPage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stEnterSelectPage* stEnterSelectPage::default_instance_ = NULL;

stEnterSelectPage* stEnterSelectPage::New() const {
  return new stEnterSelectPage;
}

void stEnterSelectPage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    opid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterSelectPage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceID;
        break;
      }

      // optional string deviceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterSelectPage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string deviceID = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceid(), output);
  }

  // optional uint32 opID = 3;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->opid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterSelectPage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string deviceID = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }

  // optional uint32 opID = 3;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->opid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterSelectPage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string deviceID = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional uint32 opID = 3;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterSelectPage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterSelectPage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterSelectPage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterSelectPage::MergeFrom(const stEnterSelectPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterSelectPage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterSelectPage::CopyFrom(const stEnterSelectPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterSelectPage::IsInitialized() const {

  return true;
}

void stEnterSelectPage::Swap(stEnterSelectPage* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(opid_, other->opid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterSelectPage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterSelectPage_descriptor_;
  metadata.reflection = stEnterSelectPage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyWebCreateRole_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyWebCreateRole_ProtoModID_descriptor_;
}
bool stNotifyWebCreateRole_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyWebCreateRole_ProtoModID stNotifyWebCreateRole::ModID;
const stNotifyWebCreateRole_ProtoModID stNotifyWebCreateRole::ProtoModID_MIN;
const stNotifyWebCreateRole_ProtoModID stNotifyWebCreateRole::ProtoModID_MAX;
const int stNotifyWebCreateRole::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyWebCreateRole_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyWebCreateRole_ProtoFunID_descriptor_;
}
bool stNotifyWebCreateRole_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyWebCreateRole_ProtoFunID stNotifyWebCreateRole::FunID;
const stNotifyWebCreateRole_ProtoFunID stNotifyWebCreateRole::ProtoFunID_MIN;
const stNotifyWebCreateRole_ProtoFunID stNotifyWebCreateRole::ProtoFunID_MAX;
const int stNotifyWebCreateRole::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyWebCreateRole::kAccountFieldNumber;
const int stNotifyWebCreateRole::kOpIDFieldNumber;
const int stNotifyWebCreateRole::kDeviceIDFieldNumber;
#endif  // !_MSC_VER

stNotifyWebCreateRole::stNotifyWebCreateRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyWebCreateRole::InitAsDefaultInstance() {
}

stNotifyWebCreateRole::stNotifyWebCreateRole(const stNotifyWebCreateRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyWebCreateRole::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyWebCreateRole::~stNotifyWebCreateRole() {
  SharedDtor();
}

void stNotifyWebCreateRole::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void stNotifyWebCreateRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyWebCreateRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyWebCreateRole_descriptor_;
}

const stNotifyWebCreateRole& stNotifyWebCreateRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stNotifyWebCreateRole* stNotifyWebCreateRole::default_instance_ = NULL;

stNotifyWebCreateRole* stNotifyWebCreateRole::New() const {
  return new stNotifyWebCreateRole;
}

void stNotifyWebCreateRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    opid_ = 0u;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyWebCreateRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deviceID;
        break;
      }

      // optional string deviceID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyWebCreateRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 opID = 2;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opid(), output);
  }

  // optional string deviceID = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->deviceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyWebCreateRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 opID = 2;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opid(), target);
  }

  // optional string deviceID = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deviceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyWebCreateRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 opID = 2;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional string deviceID = 3;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyWebCreateRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyWebCreateRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyWebCreateRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyWebCreateRole::MergeFrom(const stNotifyWebCreateRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyWebCreateRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyWebCreateRole::CopyFrom(const stNotifyWebCreateRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyWebCreateRole::IsInitialized() const {

  return true;
}

void stNotifyWebCreateRole::Swap(stNotifyWebCreateRole* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(opid_, other->opid_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyWebCreateRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyWebCreateRole_descriptor_;
  metadata.reflection = stNotifyWebCreateRole_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendGuildLog_ProtoModID_descriptor_;
}
bool stSendGuildLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendGuildLog_ProtoModID stSendGuildLog::ModID;
const stSendGuildLog_ProtoModID stSendGuildLog::ProtoModID_MIN;
const stSendGuildLog_ProtoModID stSendGuildLog::ProtoModID_MAX;
const int stSendGuildLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendGuildLog_ProtoFunID_descriptor_;
}
bool stSendGuildLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendGuildLog_ProtoFunID stSendGuildLog::FunID;
const stSendGuildLog_ProtoFunID stSendGuildLog::ProtoFunID_MIN;
const stSendGuildLog_ProtoFunID stSendGuildLog::ProtoFunID_MAX;
const int stSendGuildLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendGuildLog::kAccountFieldNumber;
const int stSendGuildLog::kOpIDFieldNumber;
const int stSendGuildLog::kCharIDFieldNumber;
const int stSendGuildLog::kLevelFieldNumber;
const int stSendGuildLog::kVipLvFieldNumber;
const int stSendGuildLog::kGuildIDFieldNumber;
const int stSendGuildLog::kActionFieldNumber;
const int stSendGuildLog::kOpObjIDFieldNumber;
const int stSendGuildLog::kNameFieldNumber;
#endif  // !_MSC_VER

stSendGuildLog::stSendGuildLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendGuildLog::InitAsDefaultInstance() {
}

stSendGuildLog::stSendGuildLog(const stSendGuildLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendGuildLog::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  charid_ = 0u;
  level_ = 0u;
  viplv_ = 0u;
  guildid_ = 0u;
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opobjid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendGuildLog::~stSendGuildLog() {
  SharedDtor();
}

void stSendGuildLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (opobjid_ != &::google::protobuf::internal::kEmptyString) {
    delete opobjid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSendGuildLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendGuildLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendGuildLog_descriptor_;
}

const stSendGuildLog& stSendGuildLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSendGuildLog* stSendGuildLog::default_instance_ = NULL;

stSendGuildLog* stSendGuildLog::New() const {
  return new stSendGuildLog;
}

void stSendGuildLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    opid_ = 0u;
    charid_ = 0u;
    level_ = 0u;
    viplv_ = 0u;
    guildid_ = 0u;
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::kEmptyString) {
        action_->clear();
      }
    }
    if (has_opobjid()) {
      if (opobjid_ != &::google::protobuf::internal::kEmptyString) {
        opobjid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendGuildLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_guildID;
        break;
      }

      // optional uint32 guildID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_action;
        break;
      }

      // optional string action = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_opObjID;
        break;
      }

      // optional string opObjID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opObjID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opobjid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opobjid().data(), this->opobjid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_name;
        break;
      }

      // optional string name = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendGuildLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 opID = 2;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opid(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplv(), output);
  }

  // optional uint32 guildID = 6;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->guildid(), output);
  }

  // optional string action = 7;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->action(), output);
  }

  // optional string opObjID = 8;
  if (has_opobjid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opobjid().data(), this->opobjid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->opobjid(), output);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendGuildLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 opID = 2;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opid(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplv(), target);
  }

  // optional uint32 guildID = 6;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->guildid(), target);
  }

  // optional string action = 7;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->action(), target);
  }

  // optional string opObjID = 8;
  if (has_opobjid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opobjid().data(), this->opobjid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->opobjid(), target);
  }

  // optional string name = 9;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendGuildLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 opID = 2;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vipLv = 5;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 guildID = 6;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional string action = 7;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional string opObjID = 8;
    if (has_opobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opobjid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 9;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendGuildLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendGuildLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendGuildLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendGuildLog::MergeFrom(const stSendGuildLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_opobjid()) {
      set_opobjid(from.opobjid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendGuildLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendGuildLog::CopyFrom(const stSendGuildLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendGuildLog::IsInitialized() const {

  return true;
}

void stSendGuildLog::Swap(stSendGuildLog* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(opid_, other->opid_);
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(guildid_, other->guildid_);
    std::swap(action_, other->action_);
    std::swap(opobjid_, other->opobjid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendGuildLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendGuildLog_descriptor_;
  metadata.reflection = stSendGuildLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sstSendGuildResLog_ProtoModID_descriptor_;
}
bool sstSendGuildResLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const sstSendGuildResLog_ProtoModID sstSendGuildResLog::ModID;
const sstSendGuildResLog_ProtoModID sstSendGuildResLog::ProtoModID_MIN;
const sstSendGuildResLog_ProtoModID sstSendGuildResLog::ProtoModID_MAX;
const int sstSendGuildResLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sstSendGuildResLog_ProtoFunID_descriptor_;
}
bool sstSendGuildResLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const sstSendGuildResLog_ProtoFunID sstSendGuildResLog::FunID;
const sstSendGuildResLog_ProtoFunID sstSendGuildResLog::ProtoFunID_MIN;
const sstSendGuildResLog_ProtoFunID sstSendGuildResLog::ProtoFunID_MAX;
const int sstSendGuildResLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int sstSendGuildResLog::kGuildIDFieldNumber;
const int sstSendGuildResLog::kResFieldNumber;
const int sstSendGuildResLog::kOldValFieldNumber;
const int sstSendGuildResLog::kNewValFieldNumber;
const int sstSendGuildResLog::kReasonFieldNumber;
#endif  // !_MSC_VER

sstSendGuildResLog::sstSendGuildResLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sstSendGuildResLog::InitAsDefaultInstance() {
}

sstSendGuildResLog::sstSendGuildResLog(const sstSendGuildResLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sstSendGuildResLog::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldval_ = 0u;
  newval_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sstSendGuildResLog::~sstSendGuildResLog() {
  SharedDtor();
}

void sstSendGuildResLog::SharedDtor() {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void sstSendGuildResLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sstSendGuildResLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sstSendGuildResLog_descriptor_;
}

const sstSendGuildResLog& sstSendGuildResLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

sstSendGuildResLog* sstSendGuildResLog::default_instance_ = NULL;

sstSendGuildResLog* sstSendGuildResLog::New() const {
  return new sstSendGuildResLog;
}

void sstSendGuildResLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
    if (has_res()) {
      if (res_ != &::google::protobuf::internal::kEmptyString) {
        res_->clear();
      }
    }
    oldval_ = 0u;
    newval_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sstSendGuildResLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_res;
        break;
      }

      // optional string res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res().data(), this->res().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldVal;
        break;
      }

      // optional uint32 oldVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldval_)));
          set_has_oldval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newVal;
        break;
      }

      // optional uint32 newVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newval_)));
          set_has_newval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sstSendGuildResLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  // optional string res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->res(), output);
  }

  // optional uint32 oldVal = 3;
  if (has_oldval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldval(), output);
  }

  // optional uint32 newVal = 4;
  if (has_newval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newval(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sstSendGuildResLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  // optional string res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->res(), target);
  }

  // optional uint32 oldVal = 3;
  if (has_oldval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldval(), target);
  }

  // optional uint32 newVal = 4;
  if (has_newval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newval(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sstSendGuildResLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional string res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res());
    }

    // optional uint32 oldVal = 3;
    if (has_oldval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldval());
    }

    // optional uint32 newVal = 4;
    if (has_newval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newval());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sstSendGuildResLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sstSendGuildResLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sstSendGuildResLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sstSendGuildResLog::MergeFrom(const sstSendGuildResLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_oldval()) {
      set_oldval(from.oldval());
    }
    if (from.has_newval()) {
      set_newval(from.newval());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sstSendGuildResLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sstSendGuildResLog::CopyFrom(const sstSendGuildResLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sstSendGuildResLog::IsInitialized() const {

  return true;
}

void sstSendGuildResLog::Swap(sstSendGuildResLog* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(res_, other->res_);
    std::swap(oldval_, other->oldval_);
    std::swap(newval_, other->newval_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sstSendGuildResLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sstSendGuildResLog_descriptor_;
  metadata.reflection = sstSendGuildResLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendModuleLog_ProtoModID_descriptor_;
}
bool stSendModuleLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendModuleLog_ProtoModID stSendModuleLog::ModID;
const stSendModuleLog_ProtoModID stSendModuleLog::ProtoModID_MIN;
const stSendModuleLog_ProtoModID stSendModuleLog::ProtoModID_MAX;
const int stSendModuleLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendModuleLog_ProtoFunID_descriptor_;
}
bool stSendModuleLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendModuleLog_ProtoFunID stSendModuleLog::FunID;
const stSendModuleLog_ProtoFunID stSendModuleLog::ProtoFunID_MIN;
const stSendModuleLog_ProtoFunID stSendModuleLog::ProtoFunID_MAX;
const int stSendModuleLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendModuleLog::kAccountFieldNumber;
const int stSendModuleLog::kOpIDFieldNumber;
const int stSendModuleLog::kCharIDFieldNumber;
const int stSendModuleLog::kLevelFieldNumber;
const int stSendModuleLog::kVipLvFieldNumber;
const int stSendModuleLog::kModuleFieldNumber;
const int stSendModuleLog::kCopymapIDFieldNumber;
const int stSendModuleLog::kOtherCharIDFieldNumber;
const int stSendModuleLog::kResultFieldNumber;
const int stSendModuleLog::kOldRankFieldNumber;
const int stSendModuleLog::kNewRankFieldNumber;
#endif  // !_MSC_VER

stSendModuleLog::stSendModuleLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendModuleLog::InitAsDefaultInstance() {
}

stSendModuleLog::stSendModuleLog(const stSendModuleLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendModuleLog::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  charid_ = 0u;
  level_ = 0u;
  viplv_ = 0u;
  module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  copymapid_ = 0u;
  othercharid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = false;
  oldrank_ = 0u;
  newrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendModuleLog::~stSendModuleLog() {
  SharedDtor();
}

void stSendModuleLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    delete module_;
  }
  if (othercharid_ != &::google::protobuf::internal::kEmptyString) {
    delete othercharid_;
  }
  if (this != default_instance_) {
  }
}

void stSendModuleLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendModuleLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendModuleLog_descriptor_;
}

const stSendModuleLog& stSendModuleLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSendModuleLog* stSendModuleLog::default_instance_ = NULL;

stSendModuleLog* stSendModuleLog::New() const {
  return new stSendModuleLog;
}

void stSendModuleLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    opid_ = 0u;
    charid_ = 0u;
    level_ = 0u;
    viplv_ = 0u;
    if (has_module()) {
      if (module_ != &::google::protobuf::internal::kEmptyString) {
        module_->clear();
      }
    }
    copymapid_ = 0u;
    if (has_othercharid()) {
      if (othercharid_ != &::google::protobuf::internal::kEmptyString) {
        othercharid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    result_ = false;
    oldrank_ = 0u;
    newrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendModuleLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_module;
        break;
      }

      // optional string module = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_copymapID;
        break;
      }

      // optional uint32 copymapID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_otherCharID;
        break;
      }

      // optional string otherCharID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherCharID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othercharid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->othercharid().data(), this->othercharid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_result;
        break;
      }

      // optional bool result = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_oldRank;
        break;
      }

      // optional uint32 oldRank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldrank_)));
          set_has_oldrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_newRank;
        break;
      }

      // optional uint32 newRank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newrank_)));
          set_has_newrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendModuleLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 opID = 2;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opid(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplv(), output);
  }

  // optional string module = 6;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->module(), output);
  }

  // optional uint32 copymapID = 7;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->copymapid(), output);
  }

  // optional string otherCharID = 8;
  if (has_othercharid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othercharid().data(), this->othercharid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->othercharid(), output);
  }

  // optional bool result = 9;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->result(), output);
  }

  // optional uint32 oldRank = 10;
  if (has_oldrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->oldrank(), output);
  }

  // optional uint32 newRank = 11;
  if (has_newrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->newrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendModuleLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 opID = 2;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opid(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplv(), target);
  }

  // optional string module = 6;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->module(), target);
  }

  // optional uint32 copymapID = 7;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->copymapid(), target);
  }

  // optional string otherCharID = 8;
  if (has_othercharid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othercharid().data(), this->othercharid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->othercharid(), target);
  }

  // optional bool result = 9;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->result(), target);
  }

  // optional uint32 oldRank = 10;
  if (has_oldrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->oldrank(), target);
  }

  // optional uint32 newRank = 11;
  if (has_newrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->newrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendModuleLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 opID = 2;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vipLv = 5;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional string module = 6;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

    // optional uint32 copymapID = 7;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional string otherCharID = 8;
    if (has_othercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->othercharid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool result = 9;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 oldRank = 10;
    if (has_oldrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldrank());
    }

    // optional uint32 newRank = 11;
    if (has_newrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendModuleLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendModuleLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendModuleLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendModuleLog::MergeFrom(const stSendModuleLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_othercharid()) {
      set_othercharid(from.othercharid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_oldrank()) {
      set_oldrank(from.oldrank());
    }
    if (from.has_newrank()) {
      set_newrank(from.newrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendModuleLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendModuleLog::CopyFrom(const stSendModuleLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendModuleLog::IsInitialized() const {

  return true;
}

void stSendModuleLog::Swap(stSendModuleLog* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(opid_, other->opid_);
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(module_, other->module_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(othercharid_, other->othercharid_);
    std::swap(result_, other->result_);
    std::swap(oldrank_, other->oldrank_);
    std::swap(newrank_, other->newrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendModuleLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendModuleLog_descriptor_;
  metadata.reflection = stSendModuleLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGetTxGiftBag_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetTxGiftBag_ProtoModID_descriptor_;
}
bool stReqGetTxGiftBag_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGetTxGiftBag_ProtoModID stReqGetTxGiftBag::ModID;
const stReqGetTxGiftBag_ProtoModID stReqGetTxGiftBag::ProtoModID_MIN;
const stReqGetTxGiftBag_ProtoModID stReqGetTxGiftBag::ProtoModID_MAX;
const int stReqGetTxGiftBag::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGetTxGiftBag_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetTxGiftBag_ProtoFunID_descriptor_;
}
bool stReqGetTxGiftBag_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGetTxGiftBag_ProtoFunID stReqGetTxGiftBag::FunID;
const stReqGetTxGiftBag_ProtoFunID stReqGetTxGiftBag::ProtoFunID_MIN;
const stReqGetTxGiftBag_ProtoFunID stReqGetTxGiftBag::ProtoFunID_MAX;
const int stReqGetTxGiftBag::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGetTxGiftBag::kWebConnIDFieldNumber;
const int stReqGetTxGiftBag::kOpenidFieldNumber;
const int stReqGetTxGiftBag::kTaskIDFieldNumber;
const int stReqGetTxGiftBag::kArewardIDFieldNumber;
const int stReqGetTxGiftBag::kActionFieldNumber;
const int stReqGetTxGiftBag::kBillnoFieldNumber;
const int stReqGetTxGiftBag::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqGetTxGiftBag::stReqGetTxGiftBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGetTxGiftBag::InitAsDefaultInstance() {
}

stReqGetTxGiftBag::stReqGetTxGiftBag(const stReqGetTxGiftBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGetTxGiftBag::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskid_ = 0u;
  arewardid_ = 0u;
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGetTxGiftBag::~stReqGetTxGiftBag() {
  SharedDtor();
}

void stReqGetTxGiftBag::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (billno_ != &::google::protobuf::internal::kEmptyString) {
    delete billno_;
  }
  if (this != default_instance_) {
  }
}

void stReqGetTxGiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGetTxGiftBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGetTxGiftBag_descriptor_;
}

const stReqGetTxGiftBag& stReqGetTxGiftBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqGetTxGiftBag* stReqGetTxGiftBag::default_instance_ = NULL;

stReqGetTxGiftBag* stReqGetTxGiftBag::New() const {
  return new stReqGetTxGiftBag;
}

void stReqGetTxGiftBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    taskid_ = 0u;
    arewardid_ = 0u;
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::kEmptyString) {
        action_->clear();
      }
    }
    if (has_billno()) {
      if (billno_ != &::google::protobuf::internal::kEmptyString) {
        billno_->clear();
      }
    }
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGetTxGiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskID;
        break;
      }

      // optional uint32 taskID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_arewardID;
        break;
      }

      // optional uint32 arewardID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arewardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &arewardid_)));
          set_has_arewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_action;
        break;
      }

      // optional string action = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_billno;
        break;
      }

      // optional string billno = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billno().data(), this->billno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGetTxGiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(), output);
  }

  // optional uint32 taskID = 3;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->taskid(), output);
  }

  // optional uint32 arewardID = 4;
  if (has_arewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->arewardid(), output);
  }

  // optional string action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->action(), output);
  }

  // optional string billno = 6;
  if (has_billno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billno().data(), this->billno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->billno(), output);
  }

  // optional uint32 charID = 7;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGetTxGiftBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // optional uint32 taskID = 3;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->taskid(), target);
  }

  // optional uint32 arewardID = 4;
  if (has_arewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->arewardid(), target);
  }

  // optional string action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->action(), target);
  }

  // optional string billno = 6;
  if (has_billno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billno().data(), this->billno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->billno(), target);
  }

  // optional uint32 charID = 7;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGetTxGiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional uint32 taskID = 3;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 arewardID = 4;
    if (has_arewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->arewardid());
    }

    // optional string action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional string billno = 6;
    if (has_billno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billno());
    }

    // optional uint32 charID = 7;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGetTxGiftBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGetTxGiftBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGetTxGiftBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGetTxGiftBag::MergeFrom(const stReqGetTxGiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_arewardid()) {
      set_arewardid(from.arewardid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_billno()) {
      set_billno(from.billno());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGetTxGiftBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGetTxGiftBag::CopyFrom(const stReqGetTxGiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGetTxGiftBag::IsInitialized() const {

  return true;
}

void stReqGetTxGiftBag::Swap(stReqGetTxGiftBag* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(openid_, other->openid_);
    std::swap(taskid_, other->taskid_);
    std::swap(arewardid_, other->arewardid_);
    std::swap(action_, other->action_);
    std::swap(billno_, other->billno_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGetTxGiftBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGetTxGiftBag_descriptor_;
  metadata.reflection = stReqGetTxGiftBag_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetGetTxGiftBag_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGetTxGiftBag_ProtoModID_descriptor_;
}
bool stRetGetTxGiftBag_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGetTxGiftBag_ProtoModID stRetGetTxGiftBag::ModID;
const stRetGetTxGiftBag_ProtoModID stRetGetTxGiftBag::ProtoModID_MIN;
const stRetGetTxGiftBag_ProtoModID stRetGetTxGiftBag::ProtoModID_MAX;
const int stRetGetTxGiftBag::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetGetTxGiftBag_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGetTxGiftBag_ProtoFunID_descriptor_;
}
bool stRetGetTxGiftBag_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGetTxGiftBag_ProtoFunID stRetGetTxGiftBag::FunID;
const stRetGetTxGiftBag_ProtoFunID stRetGetTxGiftBag::ProtoFunID_MIN;
const stRetGetTxGiftBag_ProtoFunID stRetGetTxGiftBag::ProtoFunID_MAX;
const int stRetGetTxGiftBag::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetGetTxGiftBag::kWebConnIDFieldNumber;
const int stRetGetTxGiftBag::kResultFieldNumber;
const int stRetGetTxGiftBag::kMsgFieldNumber;
#endif  // !_MSC_VER

stRetGetTxGiftBag::stRetGetTxGiftBag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetGetTxGiftBag::InitAsDefaultInstance() {
}

stRetGetTxGiftBag::stRetGetTxGiftBag(const stRetGetTxGiftBag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetGetTxGiftBag::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  result_ = 0u;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetGetTxGiftBag::~stRetGetTxGiftBag() {
  SharedDtor();
}

void stRetGetTxGiftBag::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void stRetGetTxGiftBag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetGetTxGiftBag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGetTxGiftBag_descriptor_;
}

const stRetGetTxGiftBag& stRetGetTxGiftBag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stRetGetTxGiftBag* stRetGetTxGiftBag::default_instance_ = NULL;

stRetGetTxGiftBag* stRetGetTxGiftBag::New() const {
  return new stRetGetTxGiftBag;
}

void stRetGetTxGiftBag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    result_ = 0u;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetGetTxGiftBag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional uint32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // optional string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetGetTxGiftBag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->result(), output);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetGetTxGiftBag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional uint32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->result(), target);
  }

  // optional string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetGetTxGiftBag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetGetTxGiftBag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetGetTxGiftBag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetGetTxGiftBag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetGetTxGiftBag::MergeFrom(const stRetGetTxGiftBag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetGetTxGiftBag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetGetTxGiftBag::CopyFrom(const stRetGetTxGiftBag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetGetTxGiftBag::IsInitialized() const {

  return true;
}

void stRetGetTxGiftBag::Swap(stRetGetTxGiftBag* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(result_, other->result_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetGetTxGiftBag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetGetTxGiftBag_descriptor_;
  metadata.reflection = stRetGetTxGiftBag_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateSvrOpenTime_ProtoModID_descriptor_;
}
bool stUpdateSvrOpenTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpdateSvrOpenTime_ProtoModID stUpdateSvrOpenTime::ModID;
const stUpdateSvrOpenTime_ProtoModID stUpdateSvrOpenTime::ProtoModID_MIN;
const stUpdateSvrOpenTime_ProtoModID stUpdateSvrOpenTime::ProtoModID_MAX;
const int stUpdateSvrOpenTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateSvrOpenTime_ProtoFunID_descriptor_;
}
bool stUpdateSvrOpenTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpdateSvrOpenTime_ProtoFunID stUpdateSvrOpenTime::FunID;
const stUpdateSvrOpenTime_ProtoFunID stUpdateSvrOpenTime::ProtoFunID_MIN;
const stUpdateSvrOpenTime_ProtoFunID stUpdateSvrOpenTime::ProtoFunID_MAX;
const int stUpdateSvrOpenTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUpdateSvrOpenTime::kTimeFieldNumber;
#endif  // !_MSC_VER

stUpdateSvrOpenTime::stUpdateSvrOpenTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUpdateSvrOpenTime::InitAsDefaultInstance() {
}

stUpdateSvrOpenTime::stUpdateSvrOpenTime(const stUpdateSvrOpenTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUpdateSvrOpenTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUpdateSvrOpenTime::~stUpdateSvrOpenTime() {
  SharedDtor();
}

void stUpdateSvrOpenTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUpdateSvrOpenTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUpdateSvrOpenTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateSvrOpenTime_descriptor_;
}

const stUpdateSvrOpenTime& stUpdateSvrOpenTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUpdateSvrOpenTime* stUpdateSvrOpenTime::default_instance_ = NULL;

stUpdateSvrOpenTime* stUpdateSvrOpenTime::New() const {
  return new stUpdateSvrOpenTime;
}

void stUpdateSvrOpenTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUpdateSvrOpenTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUpdateSvrOpenTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUpdateSvrOpenTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUpdateSvrOpenTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUpdateSvrOpenTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUpdateSvrOpenTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUpdateSvrOpenTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUpdateSvrOpenTime::MergeFrom(const stUpdateSvrOpenTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUpdateSvrOpenTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUpdateSvrOpenTime::CopyFrom(const stUpdateSvrOpenTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUpdateSvrOpenTime::IsInitialized() const {

  return true;
}

void stUpdateSvrOpenTime::Swap(stUpdateSvrOpenTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUpdateSvrOpenTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUpdateSvrOpenTime_descriptor_;
  metadata.reflection = stUpdateSvrOpenTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResourceChgLog_ProtoModID_descriptor_;
}
bool stResourceChgLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResourceChgLog_ProtoModID stResourceChgLog::ModID;
const stResourceChgLog_ProtoModID stResourceChgLog::ProtoModID_MIN;
const stResourceChgLog_ProtoModID stResourceChgLog::ProtoModID_MAX;
const int stResourceChgLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResourceChgLog_ProtoFunID_descriptor_;
}
bool stResourceChgLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResourceChgLog_ProtoFunID stResourceChgLog::FunID;
const stResourceChgLog_ProtoFunID stResourceChgLog::ProtoFunID_MIN;
const stResourceChgLog_ProtoFunID stResourceChgLog::ProtoFunID_MAX;
const int stResourceChgLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResourceChgLog::kCharIDFieldNumber;
const int stResourceChgLog::kAccountFieldNumber;
const int stResourceChgLog::kNameFieldNumber;
const int stResourceChgLog::kResIDFieldNumber;
const int stResourceChgLog::kAddNumFieldNumber;
const int stResourceChgLog::kOldValueFieldNumber;
const int stResourceChgLog::kNewValueFieldNumber;
const int stResourceChgLog::kReasonFieldNumber;
#endif  // !_MSC_VER

stResourceChgLog::stResourceChgLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResourceChgLog::InitAsDefaultInstance() {
}

stResourceChgLog::stResourceChgLog(const stResourceChgLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResourceChgLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resid_ = 0u;
  addnum_ = 0u;
  oldvalue_ = 0u;
  newvalue_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResourceChgLog::~stResourceChgLog() {
  SharedDtor();
}

void stResourceChgLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void stResourceChgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResourceChgLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResourceChgLog_descriptor_;
}

const stResourceChgLog& stResourceChgLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stResourceChgLog* stResourceChgLog::default_instance_ = NULL;

stResourceChgLog* stResourceChgLog::New() const {
  return new stResourceChgLog;
}

void stResourceChgLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    resid_ = 0u;
    addnum_ = 0u;
    oldvalue_ = 0u;
    newvalue_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResourceChgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resID;
        break;
      }

      // optional uint32 resID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
          set_has_resid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_addNum;
        break;
      }

      // optional uint32 addNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_oldValue;
        break;
      }

      // optional uint32 oldValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldvalue_)));
          set_has_oldvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_newValue;
        break;
      }

      // optional uint32 newValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newvalue_)));
          set_has_newvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reason;
        break;
      }

      // optional string reason = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResourceChgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 resID = 4;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resid(), output);
  }

  // optional uint32 addNum = 5;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addnum(), output);
  }

  // optional uint32 oldValue = 6;
  if (has_oldvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->oldvalue(), output);
  }

  // optional uint32 newValue = 7;
  if (has_newvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->newvalue(), output);
  }

  // optional string reason = 8;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResourceChgLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 resID = 4;
  if (has_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resid(), target);
  }

  // optional uint32 addNum = 5;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addnum(), target);
  }

  // optional uint32 oldValue = 6;
  if (has_oldvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->oldvalue(), target);
  }

  // optional uint32 newValue = 7;
  if (has_newvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->newvalue(), target);
  }

  // optional string reason = 8;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResourceChgLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 resID = 4;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

    // optional uint32 addNum = 5;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addnum());
    }

    // optional uint32 oldValue = 6;
    if (has_oldvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldvalue());
    }

    // optional uint32 newValue = 7;
    if (has_newvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newvalue());
    }

    // optional string reason = 8;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResourceChgLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResourceChgLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResourceChgLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResourceChgLog::MergeFrom(const stResourceChgLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
    if (from.has_oldvalue()) {
      set_oldvalue(from.oldvalue());
    }
    if (from.has_newvalue()) {
      set_newvalue(from.newvalue());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResourceChgLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResourceChgLog::CopyFrom(const stResourceChgLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResourceChgLog::IsInitialized() const {

  return true;
}

void stResourceChgLog::Swap(stResourceChgLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(resid_, other->resid_);
    std::swap(addnum_, other->addnum_);
    std::swap(oldvalue_, other->oldvalue_);
    std::swap(newvalue_, other->newvalue_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResourceChgLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResourceChgLog_descriptor_;
  metadata.reflection = stResourceChgLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUseInviteCode_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseInviteCode_ProtoModID_descriptor_;
}
bool stUseInviteCode_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseInviteCode_ProtoModID stUseInviteCode::ModID;
const stUseInviteCode_ProtoModID stUseInviteCode::ProtoModID_MIN;
const stUseInviteCode_ProtoModID stUseInviteCode::ProtoModID_MAX;
const int stUseInviteCode::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUseInviteCode_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseInviteCode_ProtoFunID_descriptor_;
}
bool stUseInviteCode_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseInviteCode_ProtoFunID stUseInviteCode::FunID;
const stUseInviteCode_ProtoFunID stUseInviteCode::ProtoFunID_MIN;
const stUseInviteCode_ProtoFunID stUseInviteCode::ProtoFunID_MAX;
const int stUseInviteCode::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUseInviteCode::kCodeFieldNumber;
const int stUseInviteCode::kWebConnIDFieldNumber;
const int stUseInviteCode::kAccountFieldNumber;
const int stUseInviteCode::kUserIdFieldNumber;
#endif  // !_MSC_VER

stUseInviteCode::stUseInviteCode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUseInviteCode::InitAsDefaultInstance() {
}

stUseInviteCode::stUseInviteCode(const stUseInviteCode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUseInviteCode::SharedCtor() {
  _cached_size_ = 0;
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  webconnid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUseInviteCode::~stUseInviteCode() {
  SharedDtor();
}

void stUseInviteCode::SharedDtor() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void stUseInviteCode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUseInviteCode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseInviteCode_descriptor_;
}

const stUseInviteCode& stUseInviteCode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUseInviteCode* stUseInviteCode::default_instance_ = NULL;

stUseInviteCode* stUseInviteCode::New() const {
  return new stUseInviteCode;
}

void stUseInviteCode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
    webconnid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUseInviteCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userId;
        break;
      }

      // optional string userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUseInviteCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->code(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUseInviteCode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->code(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUseInviteCode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string userId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUseInviteCode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUseInviteCode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUseInviteCode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUseInviteCode::MergeFrom(const stUseInviteCode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUseInviteCode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUseInviteCode::CopyFrom(const stUseInviteCode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUseInviteCode::IsInitialized() const {

  return true;
}

void stUseInviteCode::Swap(stUseInviteCode* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(account_, other->account_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUseInviteCode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUseInviteCode_descriptor_;
  metadata.reflection = stUseInviteCode_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUseInviteCodeCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseInviteCodeCb_ProtoModID_descriptor_;
}
bool stUseInviteCodeCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseInviteCodeCb_ProtoModID stUseInviteCodeCb::ModID;
const stUseInviteCodeCb_ProtoModID stUseInviteCodeCb::ProtoModID_MIN;
const stUseInviteCodeCb_ProtoModID stUseInviteCodeCb::ProtoModID_MAX;
const int stUseInviteCodeCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUseInviteCodeCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseInviteCodeCb_ProtoFunID_descriptor_;
}
bool stUseInviteCodeCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUseInviteCodeCb_ProtoFunID stUseInviteCodeCb::FunID;
const stUseInviteCodeCb_ProtoFunID stUseInviteCodeCb::ProtoFunID_MIN;
const stUseInviteCodeCb_ProtoFunID stUseInviteCodeCb::ProtoFunID_MAX;
const int stUseInviteCodeCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUseInviteCodeCb::kMsgFieldNumber;
const int stUseInviteCodeCb::kWebConnIDFieldNumber;
const int stUseInviteCodeCb::kAccountFieldNumber;
const int stUseInviteCodeCb::kUserIdFieldNumber;
#endif  // !_MSC_VER

stUseInviteCodeCb::stUseInviteCodeCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUseInviteCodeCb::InitAsDefaultInstance() {
}

stUseInviteCodeCb::stUseInviteCodeCb(const stUseInviteCodeCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUseInviteCodeCb::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  webconnid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUseInviteCodeCb::~stUseInviteCodeCb() {
  SharedDtor();
}

void stUseInviteCodeCb::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void stUseInviteCodeCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUseInviteCodeCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUseInviteCodeCb_descriptor_;
}

const stUseInviteCodeCb& stUseInviteCodeCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stUseInviteCodeCb* stUseInviteCodeCb::default_instance_ = NULL;

stUseInviteCodeCb* stUseInviteCodeCb::New() const {
  return new stUseInviteCodeCb;
}

void stUseInviteCodeCb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    webconnid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUseInviteCodeCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_userId;
        break;
      }

      // optional string userId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUseInviteCodeCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUseInviteCodeCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string userId = 4;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUseInviteCodeCb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string userId = 4;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUseInviteCodeCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUseInviteCodeCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUseInviteCodeCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUseInviteCodeCb::MergeFrom(const stUseInviteCodeCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUseInviteCodeCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUseInviteCodeCb::CopyFrom(const stUseInviteCodeCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUseInviteCodeCb::IsInitialized() const {

  return true;
}

void stUseInviteCodeCb::Swap(stUseInviteCodeCb* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(account_, other->account_);
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUseInviteCodeCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUseInviteCodeCb_descriptor_;
  metadata.reflection = stUseInviteCodeCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLimitPetActivityData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLimitPetActivityData_ProtoModID_descriptor_;
}
bool stReqLimitPetActivityData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLimitPetActivityData_ProtoModID stReqLimitPetActivityData::ModID;
const stReqLimitPetActivityData_ProtoModID stReqLimitPetActivityData::ProtoModID_MIN;
const stReqLimitPetActivityData_ProtoModID stReqLimitPetActivityData::ProtoModID_MAX;
const int stReqLimitPetActivityData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLimitPetActivityData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLimitPetActivityData_ProtoFunID_descriptor_;
}
bool stReqLimitPetActivityData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLimitPetActivityData_ProtoFunID stReqLimitPetActivityData::FunID;
const stReqLimitPetActivityData_ProtoFunID stReqLimitPetActivityData::ProtoFunID_MIN;
const stReqLimitPetActivityData_ProtoFunID stReqLimitPetActivityData::ProtoFunID_MAX;
const int stReqLimitPetActivityData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLimitPetActivityData::kMsgFieldNumber;
#endif  // !_MSC_VER

stReqLimitPetActivityData::stReqLimitPetActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLimitPetActivityData::InitAsDefaultInstance() {
}

stReqLimitPetActivityData::stReqLimitPetActivityData(const stReqLimitPetActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLimitPetActivityData::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLimitPetActivityData::~stReqLimitPetActivityData() {
  SharedDtor();
}

void stReqLimitPetActivityData::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void stReqLimitPetActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLimitPetActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLimitPetActivityData_descriptor_;
}

const stReqLimitPetActivityData& stReqLimitPetActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stReqLimitPetActivityData* stReqLimitPetActivityData::default_instance_ = NULL;

stReqLimitPetActivityData* stReqLimitPetActivityData::New() const {
  return new stReqLimitPetActivityData;
}

void stReqLimitPetActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLimitPetActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLimitPetActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLimitPetActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLimitPetActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLimitPetActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLimitPetActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLimitPetActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLimitPetActivityData::MergeFrom(const stReqLimitPetActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLimitPetActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLimitPetActivityData::CopyFrom(const stReqLimitPetActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLimitPetActivityData::IsInitialized() const {

  return true;
}

void stReqLimitPetActivityData::Swap(stReqLimitPetActivityData* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLimitPetActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLimitPetActivityData_descriptor_;
  metadata.reflection = stReqLimitPetActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAcitivityLimitPetItem::kIdFieldNumber;
const int stAcitivityLimitPetItem::kActiviyIdFieldNumber;
const int stAcitivityLimitPetItem::kStartTimeFieldNumber;
const int stAcitivityLimitPetItem::kEndTimeFieldNumber;
#endif  // !_MSC_VER

stAcitivityLimitPetItem::stAcitivityLimitPetItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAcitivityLimitPetItem::InitAsDefaultInstance() {
}

stAcitivityLimitPetItem::stAcitivityLimitPetItem(const stAcitivityLimitPetItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAcitivityLimitPetItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  activiyid_ = 0u;
  starttime_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAcitivityLimitPetItem::~stAcitivityLimitPetItem() {
  SharedDtor();
}

void stAcitivityLimitPetItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAcitivityLimitPetItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAcitivityLimitPetItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAcitivityLimitPetItem_descriptor_;
}

const stAcitivityLimitPetItem& stAcitivityLimitPetItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stAcitivityLimitPetItem* stAcitivityLimitPetItem::default_instance_ = NULL;

stAcitivityLimitPetItem* stAcitivityLimitPetItem::New() const {
  return new stAcitivityLimitPetItem;
}

void stAcitivityLimitPetItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    activiyid_ = 0u;
    starttime_ = 0u;
    endtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAcitivityLimitPetItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activiyId;
        break;
      }

      // optional uint32 activiyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activiyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activiyid_)));
          set_has_activiyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }

      // optional uint32 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endTime;
        break;
      }

      // optional uint32 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAcitivityLimitPetItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 activiyId = 2;
  if (has_activiyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activiyid(), output);
  }

  // optional uint32 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starttime(), output);
  }

  // optional uint32 endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAcitivityLimitPetItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 activiyId = 2;
  if (has_activiyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activiyid(), target);
  }

  // optional uint32 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starttime(), target);
  }

  // optional uint32 endTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAcitivityLimitPetItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 activiyId = 2;
    if (has_activiyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activiyid());
    }

    // optional uint32 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAcitivityLimitPetItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAcitivityLimitPetItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAcitivityLimitPetItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAcitivityLimitPetItem::MergeFrom(const stAcitivityLimitPetItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_activiyid()) {
      set_activiyid(from.activiyid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAcitivityLimitPetItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAcitivityLimitPetItem::CopyFrom(const stAcitivityLimitPetItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAcitivityLimitPetItem::IsInitialized() const {

  return true;
}

void stAcitivityLimitPetItem::Swap(stAcitivityLimitPetItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(activiyid_, other->activiyid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAcitivityLimitPetItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAcitivityLimitPetItem_descriptor_;
  metadata.reflection = stAcitivityLimitPetItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLimitPetActivityData_ProtoModID_descriptor_;
}
bool stSendLimitPetActivityData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendLimitPetActivityData_ProtoModID stSendLimitPetActivityData::ModID;
const stSendLimitPetActivityData_ProtoModID stSendLimitPetActivityData::ProtoModID_MIN;
const stSendLimitPetActivityData_ProtoModID stSendLimitPetActivityData::ProtoModID_MAX;
const int stSendLimitPetActivityData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLimitPetActivityData_ProtoFunID_descriptor_;
}
bool stSendLimitPetActivityData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendLimitPetActivityData_ProtoFunID stSendLimitPetActivityData::FunID;
const stSendLimitPetActivityData_ProtoFunID stSendLimitPetActivityData::ProtoFunID_MIN;
const stSendLimitPetActivityData_ProtoFunID stSendLimitPetActivityData::ProtoFunID_MAX;
const int stSendLimitPetActivityData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendLimitPetActivityData::kMsgFieldNumber;
const int stSendLimitPetActivityData::kItemFieldNumber;
#endif  // !_MSC_VER

stSendLimitPetActivityData::stSendLimitPetActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendLimitPetActivityData::InitAsDefaultInstance() {
}

stSendLimitPetActivityData::stSendLimitPetActivityData(const stSendLimitPetActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendLimitPetActivityData::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendLimitPetActivityData::~stSendLimitPetActivityData() {
  SharedDtor();
}

void stSendLimitPetActivityData::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void stSendLimitPetActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendLimitPetActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLimitPetActivityData_descriptor_;
}

const stSendLimitPetActivityData& stSendLimitPetActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSendLimitPetActivityData* stSendLimitPetActivityData::default_instance_ = NULL;

stSendLimitPetActivityData* stSendLimitPetActivityData::New() const {
  return new stSendLimitPetActivityData;
}

void stSendLimitPetActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendLimitPetActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .Global.stAcitivityLimitPetItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendLimitPetActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // repeated .Global.stAcitivityLimitPetItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendLimitPetActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // repeated .Global.stAcitivityLimitPetItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendLimitPetActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  // repeated .Global.stAcitivityLimitPetItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendLimitPetActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendLimitPetActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendLimitPetActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendLimitPetActivityData::MergeFrom(const stSendLimitPetActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendLimitPetActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendLimitPetActivityData::CopyFrom(const stSendLimitPetActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendLimitPetActivityData::IsInitialized() const {

  return true;
}

void stSendLimitPetActivityData::Swap(stSendLimitPetActivityData* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendLimitPetActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendLimitPetActivityData_descriptor_;
  metadata.reflection = stSendLimitPetActivityData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendShutDown_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendShutDown_ProtoModID_descriptor_;
}
bool stSendShutDown_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendShutDown_ProtoModID stSendShutDown::ModID;
const stSendShutDown_ProtoModID stSendShutDown::ProtoModID_MIN;
const stSendShutDown_ProtoModID stSendShutDown::ProtoModID_MAX;
const int stSendShutDown::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendShutDown_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendShutDown_ProtoFunID_descriptor_;
}
bool stSendShutDown_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendShutDown_ProtoFunID stSendShutDown::FunID;
const stSendShutDown_ProtoFunID stSendShutDown::ProtoFunID_MIN;
const stSendShutDown_ProtoFunID stSendShutDown::ProtoFunID_MAX;
const int stSendShutDown::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendShutDown::kMsgFieldNumber;
#endif  // !_MSC_VER

stSendShutDown::stSendShutDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendShutDown::InitAsDefaultInstance() {
}

stSendShutDown::stSendShutDown(const stSendShutDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendShutDown::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendShutDown::~stSendShutDown() {
  SharedDtor();
}

void stSendShutDown::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void stSendShutDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendShutDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendShutDown_descriptor_;
}

const stSendShutDown& stSendShutDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stSendShutDown* stSendShutDown::default_instance_ = NULL;

stSendShutDown* stSendShutDown::New() const {
  return new stSendShutDown;
}

void stSendShutDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendShutDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendShutDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendShutDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendShutDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendShutDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendShutDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendShutDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendShutDown::MergeFrom(const stSendShutDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendShutDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendShutDown::CopyFrom(const stSendShutDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendShutDown::IsInitialized() const {

  return true;
}

void stSendShutDown::Swap(stSendShutDown* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendShutDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendShutDown_descriptor_;
  metadata.reflection = stSendShutDown_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stWeb2GlobalQueryUserNft_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWeb2GlobalQueryUserNft_ProtoModID_descriptor_;
}
bool stWeb2GlobalQueryUserNft_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWeb2GlobalQueryUserNft_ProtoModID stWeb2GlobalQueryUserNft::ModID;
const stWeb2GlobalQueryUserNft_ProtoModID stWeb2GlobalQueryUserNft::ProtoModID_MIN;
const stWeb2GlobalQueryUserNft_ProtoModID stWeb2GlobalQueryUserNft::ProtoModID_MAX;
const int stWeb2GlobalQueryUserNft::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWeb2GlobalQueryUserNft_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWeb2GlobalQueryUserNft_ProtoFunID_descriptor_;
}
bool stWeb2GlobalQueryUserNft_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWeb2GlobalQueryUserNft_ProtoFunID stWeb2GlobalQueryUserNft::FunID;
const stWeb2GlobalQueryUserNft_ProtoFunID stWeb2GlobalQueryUserNft::ProtoFunID_MIN;
const stWeb2GlobalQueryUserNft_ProtoFunID stWeb2GlobalQueryUserNft::ProtoFunID_MAX;
const int stWeb2GlobalQueryUserNft::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stWeb2GlobalQueryUserNft::kWebConnIDFieldNumber;
const int stWeb2GlobalQueryUserNft::kCharidFieldNumber;
#endif  // !_MSC_VER

stWeb2GlobalQueryUserNft::stWeb2GlobalQueryUserNft()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWeb2GlobalQueryUserNft::InitAsDefaultInstance() {
}

stWeb2GlobalQueryUserNft::stWeb2GlobalQueryUserNft(const stWeb2GlobalQueryUserNft& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWeb2GlobalQueryUserNft::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWeb2GlobalQueryUserNft::~stWeb2GlobalQueryUserNft() {
  SharedDtor();
}

void stWeb2GlobalQueryUserNft::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stWeb2GlobalQueryUserNft::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWeb2GlobalQueryUserNft::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWeb2GlobalQueryUserNft_descriptor_;
}

const stWeb2GlobalQueryUserNft& stWeb2GlobalQueryUserNft::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stWeb2GlobalQueryUserNft* stWeb2GlobalQueryUserNft::default_instance_ = NULL;

stWeb2GlobalQueryUserNft* stWeb2GlobalQueryUserNft::New() const {
  return new stWeb2GlobalQueryUserNft;
}

void stWeb2GlobalQueryUserNft::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWeb2GlobalQueryUserNft::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stWeb2GlobalQueryUserNft::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWeb2GlobalQueryUserNft::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWeb2GlobalQueryUserNft::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWeb2GlobalQueryUserNft::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWeb2GlobalQueryUserNft* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWeb2GlobalQueryUserNft*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWeb2GlobalQueryUserNft::MergeFrom(const stWeb2GlobalQueryUserNft& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWeb2GlobalQueryUserNft::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWeb2GlobalQueryUserNft::CopyFrom(const stWeb2GlobalQueryUserNft& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWeb2GlobalQueryUserNft::IsInitialized() const {

  return true;
}

void stWeb2GlobalQueryUserNft::Swap(stWeb2GlobalQueryUserNft* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWeb2GlobalQueryUserNft::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWeb2GlobalQueryUserNft_descriptor_;
  metadata.reflection = stWeb2GlobalQueryUserNft_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGlobal2WebQueryUserNftResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2WebQueryUserNftResult_ProtoModID_descriptor_;
}
bool stGlobal2WebQueryUserNftResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGlobal2WebQueryUserNftResult_ProtoModID stGlobal2WebQueryUserNftResult::ModID;
const stGlobal2WebQueryUserNftResult_ProtoModID stGlobal2WebQueryUserNftResult::ProtoModID_MIN;
const stGlobal2WebQueryUserNftResult_ProtoModID stGlobal2WebQueryUserNftResult::ProtoModID_MAX;
const int stGlobal2WebQueryUserNftResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGlobal2WebQueryUserNftResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2WebQueryUserNftResult_ProtoFunID_descriptor_;
}
bool stGlobal2WebQueryUserNftResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 37:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGlobal2WebQueryUserNftResult_ProtoFunID stGlobal2WebQueryUserNftResult::FunID;
const stGlobal2WebQueryUserNftResult_ProtoFunID stGlobal2WebQueryUserNftResult::ProtoFunID_MIN;
const stGlobal2WebQueryUserNftResult_ProtoFunID stGlobal2WebQueryUserNftResult::ProtoFunID_MAX;
const int stGlobal2WebQueryUserNftResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGlobal2WebQueryUserNftResult::kWebConnIDFieldNumber;
const int stGlobal2WebQueryUserNftResult::kCharidFieldNumber;
const int stGlobal2WebQueryUserNftResult::kResultFieldNumber;
const int stGlobal2WebQueryUserNftResult::kDataFieldNumber;
const int stGlobal2WebQueryUserNftResult::kVipFieldNumber;
#endif  // !_MSC_VER

stGlobal2WebQueryUserNftResult::stGlobal2WebQueryUserNftResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGlobal2WebQueryUserNftResult::InitAsDefaultInstance() {
}

stGlobal2WebQueryUserNftResult::stGlobal2WebQueryUserNftResult(const stGlobal2WebQueryUserNftResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGlobal2WebQueryUserNftResult::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  charid_ = 0u;
  result_ = 0u;
  vip_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGlobal2WebQueryUserNftResult::~stGlobal2WebQueryUserNftResult() {
  SharedDtor();
}

void stGlobal2WebQueryUserNftResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGlobal2WebQueryUserNftResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGlobal2WebQueryUserNftResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2WebQueryUserNftResult_descriptor_;
}

const stGlobal2WebQueryUserNftResult& stGlobal2WebQueryUserNftResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGlobal2WebQueryUserNftResult* stGlobal2WebQueryUserNftResult::default_instance_ = NULL;

stGlobal2WebQueryUserNftResult* stGlobal2WebQueryUserNftResult::New() const {
  return new stGlobal2WebQueryUserNftResult;
}

void stGlobal2WebQueryUserNftResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    charid_ = 0u;
    result_ = 0u;
    vip_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGlobal2WebQueryUserNftResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // repeated .Global.stNftItem data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        if (input->ExpectTag(40)) goto parse_vip;
        break;
      }

      // optional uint32 vip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGlobal2WebQueryUserNftResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  // repeated .Global.stNftItem data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(i), output);
  }

  // optional uint32 vip = 5;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGlobal2WebQueryUserNftResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  // repeated .Global.stNftItem data = 4;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(i), target);
  }

  // optional uint32 vip = 5;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGlobal2WebQueryUserNftResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 vip = 5;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip());
    }

  }
  // repeated .Global.stNftItem data = 4;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGlobal2WebQueryUserNftResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGlobal2WebQueryUserNftResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGlobal2WebQueryUserNftResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGlobal2WebQueryUserNftResult::MergeFrom(const stGlobal2WebQueryUserNftResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGlobal2WebQueryUserNftResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGlobal2WebQueryUserNftResult::CopyFrom(const stGlobal2WebQueryUserNftResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGlobal2WebQueryUserNftResult::IsInitialized() const {

  return true;
}

void stGlobal2WebQueryUserNftResult::Swap(stGlobal2WebQueryUserNftResult* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    data_.Swap(&other->data_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGlobal2WebQueryUserNftResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGlobal2WebQueryUserNftResult_descriptor_;
  metadata.reflection = stGlobal2WebQueryUserNftResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stWeb2GlobalChangeNftItem_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWeb2GlobalChangeNftItem_ProtoModID_descriptor_;
}
bool stWeb2GlobalChangeNftItem_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWeb2GlobalChangeNftItem_ProtoModID stWeb2GlobalChangeNftItem::ModID;
const stWeb2GlobalChangeNftItem_ProtoModID stWeb2GlobalChangeNftItem::ProtoModID_MIN;
const stWeb2GlobalChangeNftItem_ProtoModID stWeb2GlobalChangeNftItem::ProtoModID_MAX;
const int stWeb2GlobalChangeNftItem::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWeb2GlobalChangeNftItem_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWeb2GlobalChangeNftItem_ProtoFunID_descriptor_;
}
bool stWeb2GlobalChangeNftItem_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWeb2GlobalChangeNftItem_ProtoFunID stWeb2GlobalChangeNftItem::FunID;
const stWeb2GlobalChangeNftItem_ProtoFunID stWeb2GlobalChangeNftItem::ProtoFunID_MIN;
const stWeb2GlobalChangeNftItem_ProtoFunID stWeb2GlobalChangeNftItem::ProtoFunID_MAX;
const int stWeb2GlobalChangeNftItem::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stWeb2GlobalChangeNftItem::kWebConnIDFieldNumber;
const int stWeb2GlobalChangeNftItem::kCharidFieldNumber;
const int stWeb2GlobalChangeNftItem::kItemidFieldNumber;
const int stWeb2GlobalChangeNftItem::kCountFieldNumber;
#endif  // !_MSC_VER

stWeb2GlobalChangeNftItem::stWeb2GlobalChangeNftItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWeb2GlobalChangeNftItem::InitAsDefaultInstance() {
}

stWeb2GlobalChangeNftItem::stWeb2GlobalChangeNftItem(const stWeb2GlobalChangeNftItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWeb2GlobalChangeNftItem::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  charid_ = 0u;
  itemid_ = 0u;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWeb2GlobalChangeNftItem::~stWeb2GlobalChangeNftItem() {
  SharedDtor();
}

void stWeb2GlobalChangeNftItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stWeb2GlobalChangeNftItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWeb2GlobalChangeNftItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWeb2GlobalChangeNftItem_descriptor_;
}

const stWeb2GlobalChangeNftItem& stWeb2GlobalChangeNftItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stWeb2GlobalChangeNftItem* stWeb2GlobalChangeNftItem::default_instance_ = NULL;

stWeb2GlobalChangeNftItem* stWeb2GlobalChangeNftItem::New() const {
  return new stWeb2GlobalChangeNftItem;
}

void stWeb2GlobalChangeNftItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    charid_ = 0u;
    itemid_ = 0u;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWeb2GlobalChangeNftItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // optional uint32 itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stWeb2GlobalChangeNftItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->itemid(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWeb2GlobalChangeNftItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 itemid = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->itemid(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWeb2GlobalChangeNftItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 itemid = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWeb2GlobalChangeNftItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWeb2GlobalChangeNftItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWeb2GlobalChangeNftItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWeb2GlobalChangeNftItem::MergeFrom(const stWeb2GlobalChangeNftItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWeb2GlobalChangeNftItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWeb2GlobalChangeNftItem::CopyFrom(const stWeb2GlobalChangeNftItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWeb2GlobalChangeNftItem::IsInitialized() const {

  return true;
}

void stWeb2GlobalChangeNftItem::Swap(stWeb2GlobalChangeNftItem* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWeb2GlobalChangeNftItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWeb2GlobalChangeNftItem_descriptor_;
  metadata.reflection = stWeb2GlobalChangeNftItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGlobal2WebChangeNftItemResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2WebChangeNftItemResult_ProtoModID_descriptor_;
}
bool stGlobal2WebChangeNftItemResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGlobal2WebChangeNftItemResult_ProtoModID stGlobal2WebChangeNftItemResult::ModID;
const stGlobal2WebChangeNftItemResult_ProtoModID stGlobal2WebChangeNftItemResult::ProtoModID_MIN;
const stGlobal2WebChangeNftItemResult_ProtoModID stGlobal2WebChangeNftItemResult::ProtoModID_MAX;
const int stGlobal2WebChangeNftItemResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGlobal2WebChangeNftItemResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2WebChangeNftItemResult_ProtoFunID_descriptor_;
}
bool stGlobal2WebChangeNftItemResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 39:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGlobal2WebChangeNftItemResult_ProtoFunID stGlobal2WebChangeNftItemResult::FunID;
const stGlobal2WebChangeNftItemResult_ProtoFunID stGlobal2WebChangeNftItemResult::ProtoFunID_MIN;
const stGlobal2WebChangeNftItemResult_ProtoFunID stGlobal2WebChangeNftItemResult::ProtoFunID_MAX;
const int stGlobal2WebChangeNftItemResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGlobal2WebChangeNftItemResult::kWebConnIDFieldNumber;
const int stGlobal2WebChangeNftItemResult::kCharidFieldNumber;
const int stGlobal2WebChangeNftItemResult::kResultFieldNumber;
#endif  // !_MSC_VER

stGlobal2WebChangeNftItemResult::stGlobal2WebChangeNftItemResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGlobal2WebChangeNftItemResult::InitAsDefaultInstance() {
}

stGlobal2WebChangeNftItemResult::stGlobal2WebChangeNftItemResult(const stGlobal2WebChangeNftItemResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGlobal2WebChangeNftItemResult::SharedCtor() {
  _cached_size_ = 0;
  webconnid_ = 0u;
  charid_ = 0u;
  result_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGlobal2WebChangeNftItemResult::~stGlobal2WebChangeNftItemResult() {
  SharedDtor();
}

void stGlobal2WebChangeNftItemResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGlobal2WebChangeNftItemResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGlobal2WebChangeNftItemResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGlobal2WebChangeNftItemResult_descriptor_;
}

const stGlobal2WebChangeNftItemResult& stGlobal2WebChangeNftItemResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Global_2eproto();
  return *default_instance_;
}

stGlobal2WebChangeNftItemResult* stGlobal2WebChangeNftItemResult::default_instance_ = NULL;

stGlobal2WebChangeNftItemResult* stGlobal2WebChangeNftItemResult::New() const {
  return new stGlobal2WebChangeNftItemResult;
}

void stGlobal2WebChangeNftItemResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    webconnid_ = 0u;
    charid_ = 0u;
    result_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGlobal2WebChangeNftItemResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 webConnID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint32 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional uint32 result = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGlobal2WebChangeNftItemResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->webconnid(), output);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGlobal2WebChangeNftItemResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 webConnID = 1;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->webconnid(), target);
  }

  // optional uint32 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 result = 3;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGlobal2WebChangeNftItemResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 webConnID = 1;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

    // optional uint32 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGlobal2WebChangeNftItemResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGlobal2WebChangeNftItemResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGlobal2WebChangeNftItemResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGlobal2WebChangeNftItemResult::MergeFrom(const stGlobal2WebChangeNftItemResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGlobal2WebChangeNftItemResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGlobal2WebChangeNftItemResult::CopyFrom(const stGlobal2WebChangeNftItemResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGlobal2WebChangeNftItemResult::IsInitialized() const {

  return true;
}

void stGlobal2WebChangeNftItemResult::Swap(stGlobal2WebChangeNftItemResult* other) {
  if (other != this) {
    std::swap(webconnid_, other->webconnid_);
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGlobal2WebChangeNftItemResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGlobal2WebChangeNftItemResult_descriptor_;
  metadata.reflection = stGlobal2WebChangeNftItemResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Global

// @@protoc_insertion_point(global_scope)
