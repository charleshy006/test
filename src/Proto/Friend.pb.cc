// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Friend.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Friend.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace FriendProto {

namespace {

const ::google::protobuf::Descriptor* stSynFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynAllFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynAllFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAddOneFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAddOneFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAddOneFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAddOneFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyAddOneFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyAddOneFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddOneFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddOneFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddFriendTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddFriendTip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddFriendTip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddFriendTip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDelFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDelFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDelFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDelFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFindAndAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFindAndAddFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFindAndAddFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFindAndAddFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFindAndAddFriendResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFindAndAddFriendResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFindAndAddFriendResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFindAndAddFriendResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqApplyAddFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqApplyAddFriendList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqApplyAddFriendList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqApplyAddFriendList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynApplyerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynApplyerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetApplyAddFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetApplyAddFriendList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetApplyAddFriendList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetApplyAddFriendList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRecommondChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRecommondChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqRecommondFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRecommondFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecommondFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRecommondFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRecommondFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRecommondFriendList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRecommondFriendList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRecommondFriendList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGiveLilian2Friend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiveLilian2Friend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLilian2Friend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLilian2Friend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGiveLilianResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiveLilianResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLilianResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLilianResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLilianResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqReceiveLilian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqReceiveLilian_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReceiveLilian_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqReceiveLilian_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReceiveLilianList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReceiveLilianList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveLilianList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReceiveLilianList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFetchLilian_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFetchLilian_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFetchLilian_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFetchLilian_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFetchLilianResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFetchLilianResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFetchLilianResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFetchLilianResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFetchLilianResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAdd2ApplyList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAdd2ApplyList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAdd2ApplyList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAdd2ApplyList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAdd2ApplyListResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAdd2ApplyListResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAdd2ApplyListResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAdd2ApplyListResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAdd2ApplyListResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefuseAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefuseAddFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefuseAddFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefuseAddFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInvitePKWithFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInvitePKWithFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvitePKWithFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvitePKWithFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAskAgreePKWithFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAskAgreePKWithFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAskAgreePKWithFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAskAgreePKWithFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplyFriendPKInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplyFriendPKInvite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyFriendPKInvite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyFriendPKInvite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInvitePKResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInvitePKResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvitePKResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvitePKResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInvitePKResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplyFriendPKInviteResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplyFriendPKInviteResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyFriendPKInviteResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyFriendPKInviteResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyFriendPKInviteResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSomeOneApplyAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSomeOneApplyAddFriend_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSomeOneApplyAddFriend_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSomeOneApplyAddFriend_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MarryObjInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryObjInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqPropose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPropose_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RejectMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RejectMarry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RejectMarry_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RejectMarry_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RejectMarry_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ProposeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProposeResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProposeResult_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProposeResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ProposeResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAgreeMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAgreeMarry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCancelMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCancelMarry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCancelMarry_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCancelMarry_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyCancelMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyCancelMarry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyCancelMarry_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyCancelMarry_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* NotifyAgree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAgree_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyAgree_Result_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyAgree_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyAgree_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NotifyFriendType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eFetchLilianType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Friend_2eproto() {
  protobuf_AddDesc_Friend_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Friend.proto");
  GOOGLE_CHECK(file != NULL);
  stSynFriendInfo_descriptor_ = file->message_type(0);
  static const int stSynFriendInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, photoid_),
  };
  stSynFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynFriendInfo_descriptor_,
      stSynFriendInfo::default_instance_,
      stSynFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynFriendInfo));
  stSynAllFriend_descriptor_ = file->message_type(1);
  static const int stSynAllFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllFriend, allfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllFriend, fetchliliannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllFriend, hasgiveliliancharid_),
  };
  stSynAllFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynAllFriend_descriptor_,
      stSynAllFriend::default_instance_,
      stSynAllFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynAllFriend));
  stSynAllFriend_ProtoModID_descriptor_ = stSynAllFriend_descriptor_->enum_type(0);
  stSynAllFriend_ProtoFunID_descriptor_ = stSynAllFriend_descriptor_->enum_type(1);
  stReqAddOneFriend_descriptor_ = file->message_type(2);
  static const int stReqAddOneFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAddOneFriend, charid_),
  };
  stReqAddOneFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAddOneFriend_descriptor_,
      stReqAddOneFriend::default_instance_,
      stReqAddOneFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAddOneFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAddOneFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAddOneFriend));
  stReqAddOneFriend_ProtoModID_descriptor_ = stReqAddOneFriend_descriptor_->enum_type(0);
  stReqAddOneFriend_ProtoFunID_descriptor_ = stReqAddOneFriend_descriptor_->enum_type(1);
  stNotifyAddOneFriend_descriptor_ = file->message_type(3);
  static const int stNotifyAddOneFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddOneFriend, data_),
  };
  stNotifyAddOneFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyAddOneFriend_descriptor_,
      stNotifyAddOneFriend::default_instance_,
      stNotifyAddOneFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddOneFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddOneFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyAddOneFriend));
  stNotifyAddOneFriend_ProtoModID_descriptor_ = stNotifyAddOneFriend_descriptor_->enum_type(0);
  stNotifyAddOneFriend_ProtoFunID_descriptor_ = stNotifyAddOneFriend_descriptor_->enum_type(1);
  stAddFriendTip_descriptor_ = file->message_type(4);
  static const int stAddFriendTip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddFriendTip, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddFriendTip, name_),
  };
  stAddFriendTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddFriendTip_descriptor_,
      stAddFriendTip::default_instance_,
      stAddFriendTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddFriendTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddFriendTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddFriendTip));
  stAddFriendTip_ProtoModID_descriptor_ = stAddFriendTip_descriptor_->enum_type(0);
  stAddFriendTip_ProtoFunID_descriptor_ = stAddFriendTip_descriptor_->enum_type(1);
  stDelFriend_descriptor_ = file->message_type(5);
  static const int stDelFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelFriend, charid_),
  };
  stDelFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDelFriend_descriptor_,
      stDelFriend::default_instance_,
      stDelFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDelFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDelFriend));
  stDelFriend_ProtoModID_descriptor_ = stDelFriend_descriptor_->enum_type(0);
  stDelFriend_ProtoFunID_descriptor_ = stDelFriend_descriptor_->enum_type(1);
  stFindAndAddFriend_descriptor_ = file->message_type(6);
  static const int stFindAndAddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFindAndAddFriend, name_),
  };
  stFindAndAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFindAndAddFriend_descriptor_,
      stFindAndAddFriend::default_instance_,
      stFindAndAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFindAndAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFindAndAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFindAndAddFriend));
  stFindAndAddFriend_ProtoModID_descriptor_ = stFindAndAddFriend_descriptor_->enum_type(0);
  stFindAndAddFriend_ProtoFunID_descriptor_ = stFindAndAddFriend_descriptor_->enum_type(1);
  stFindAndAddFriendResult_descriptor_ = file->message_type(7);
  static const int stFindAndAddFriendResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFindAndAddFriendResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFindAndAddFriendResult, name_),
  };
  stFindAndAddFriendResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFindAndAddFriendResult_descriptor_,
      stFindAndAddFriendResult::default_instance_,
      stFindAndAddFriendResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFindAndAddFriendResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFindAndAddFriendResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFindAndAddFriendResult));
  stFindAndAddFriendResult_ProtoModID_descriptor_ = stFindAndAddFriendResult_descriptor_->enum_type(0);
  stFindAndAddFriendResult_ProtoFunID_descriptor_ = stFindAndAddFriendResult_descriptor_->enum_type(1);
  stReqApplyAddFriendList_descriptor_ = file->message_type(8);
  static const int stReqApplyAddFriendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqApplyAddFriendList, flag_),
  };
  stReqApplyAddFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqApplyAddFriendList_descriptor_,
      stReqApplyAddFriendList::default_instance_,
      stReqApplyAddFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqApplyAddFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqApplyAddFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqApplyAddFriendList));
  stReqApplyAddFriendList_ProtoModID_descriptor_ = stReqApplyAddFriendList_descriptor_->enum_type(0);
  stReqApplyAddFriendList_ProtoFunID_descriptor_ = stReqApplyAddFriendList_descriptor_->enum_type(1);
  stSynApplyerInfo_descriptor_ = file->message_type(9);
  static const int stSynApplyerInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplyerInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplyerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplyerInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplyerInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplyerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplyerInfo, applydifftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplyerInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplyerInfo, photoid_),
  };
  stSynApplyerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynApplyerInfo_descriptor_,
      stSynApplyerInfo::default_instance_,
      stSynApplyerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplyerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplyerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynApplyerInfo));
  stRetApplyAddFriendList_descriptor_ = file->message_type(10);
  static const int stRetApplyAddFriendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetApplyAddFriendList, applyerlist_),
  };
  stRetApplyAddFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetApplyAddFriendList_descriptor_,
      stRetApplyAddFriendList::default_instance_,
      stRetApplyAddFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetApplyAddFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetApplyAddFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetApplyAddFriendList));
  stRetApplyAddFriendList_ProtoModID_descriptor_ = stRetApplyAddFriendList_descriptor_->enum_type(0);
  stRetApplyAddFriendList_ProtoFunID_descriptor_ = stRetApplyAddFriendList_descriptor_->enum_type(1);
  stNotifyFriend_descriptor_ = file->message_type(11);
  static const int stNotifyFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriend, type_),
  };
  stNotifyFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyFriend_descriptor_,
      stNotifyFriend::default_instance_,
      stNotifyFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyFriend));
  stNotifyFriend_ProtoModID_descriptor_ = stNotifyFriend_descriptor_->enum_type(0);
  stNotifyFriend_ProtoFunID_descriptor_ = stNotifyFriend_descriptor_->enum_type(1);
  stSynRecommondChar_descriptor_ = file->message_type(12);
  static const int stSynRecommondChar_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRecommondChar, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRecommondChar, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRecommondChar, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRecommondChar, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRecommondChar, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRecommondChar, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRecommondChar, photoid_),
  };
  stSynRecommondChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRecommondChar_descriptor_,
      stSynRecommondChar::default_instance_,
      stSynRecommondChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRecommondChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRecommondChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRecommondChar));
  stReqRecommondFriend_descriptor_ = file->message_type(13);
  static const int stReqRecommondFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecommondFriend, charid_),
  };
  stReqRecommondFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRecommondFriend_descriptor_,
      stReqRecommondFriend::default_instance_,
      stReqRecommondFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecommondFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRecommondFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRecommondFriend));
  stReqRecommondFriend_ProtoModID_descriptor_ = stReqRecommondFriend_descriptor_->enum_type(0);
  stReqRecommondFriend_ProtoFunID_descriptor_ = stReqRecommondFriend_descriptor_->enum_type(1);
  stRecommondFriendList_descriptor_ = file->message_type(14);
  static const int stRecommondFriendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecommondFriendList, charlist_),
  };
  stRecommondFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRecommondFriendList_descriptor_,
      stRecommondFriendList::default_instance_,
      stRecommondFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecommondFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRecommondFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRecommondFriendList));
  stRecommondFriendList_ProtoModID_descriptor_ = stRecommondFriendList_descriptor_->enum_type(0);
  stRecommondFriendList_ProtoFunID_descriptor_ = stRecommondFriendList_descriptor_->enum_type(1);
  stGiveLilian2Friend_descriptor_ = file->message_type(15);
  static const int stGiveLilian2Friend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLilian2Friend, charid_),
  };
  stGiveLilian2Friend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiveLilian2Friend_descriptor_,
      stGiveLilian2Friend::default_instance_,
      stGiveLilian2Friend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLilian2Friend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLilian2Friend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiveLilian2Friend));
  stGiveLilian2Friend_ProtoModID_descriptor_ = stGiveLilian2Friend_descriptor_->enum_type(0);
  stGiveLilian2Friend_ProtoFunID_descriptor_ = stGiveLilian2Friend_descriptor_->enum_type(1);
  stGiveLilianResult_descriptor_ = file->message_type(16);
  static const int stGiveLilianResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLilianResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLilianResult, result_),
  };
  stGiveLilianResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiveLilianResult_descriptor_,
      stGiveLilianResult::default_instance_,
      stGiveLilianResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLilianResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLilianResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiveLilianResult));
  stGiveLilianResult_eResult_descriptor_ = stGiveLilianResult_descriptor_->enum_type(0);
  stGiveLilianResult_ProtoModID_descriptor_ = stGiveLilianResult_descriptor_->enum_type(1);
  stGiveLilianResult_ProtoFunID_descriptor_ = stGiveLilianResult_descriptor_->enum_type(2);
  stReqReceiveLilian_descriptor_ = file->message_type(17);
  static const int stReqReceiveLilian_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveLilian, charid_),
  };
  stReqReceiveLilian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqReceiveLilian_descriptor_,
      stReqReceiveLilian::default_instance_,
      stReqReceiveLilian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveLilian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqReceiveLilian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqReceiveLilian));
  stReqReceiveLilian_ProtoModID_descriptor_ = stReqReceiveLilian_descriptor_->enum_type(0);
  stReqReceiveLilian_ProtoFunID_descriptor_ = stReqReceiveLilian_descriptor_->enum_type(1);
  stReceiveLilianList_descriptor_ = file->message_type(18);
  static const int stReceiveLilianList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveLilianList, charids_),
  };
  stReceiveLilianList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReceiveLilianList_descriptor_,
      stReceiveLilianList::default_instance_,
      stReceiveLilianList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveLilianList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReceiveLilianList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReceiveLilianList));
  stReceiveLilianList_ProtoModID_descriptor_ = stReceiveLilianList_descriptor_->enum_type(0);
  stReceiveLilianList_ProtoFunID_descriptor_ = stReceiveLilianList_descriptor_->enum_type(1);
  stFetchLilian_descriptor_ = file->message_type(19);
  static const int stFetchLilian_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchLilian, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchLilian, charid_),
  };
  stFetchLilian_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFetchLilian_descriptor_,
      stFetchLilian::default_instance_,
      stFetchLilian_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchLilian, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchLilian, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFetchLilian));
  stFetchLilian_ProtoModID_descriptor_ = stFetchLilian_descriptor_->enum_type(0);
  stFetchLilian_ProtoFunID_descriptor_ = stFetchLilian_descriptor_->enum_type(1);
  stFetchLilianResult_descriptor_ = file->message_type(20);
  static const int stFetchLilianResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchLilianResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchLilianResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchLilianResult, type_),
  };
  stFetchLilianResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFetchLilianResult_descriptor_,
      stFetchLilianResult::default_instance_,
      stFetchLilianResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchLilianResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFetchLilianResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFetchLilianResult));
  stFetchLilianResult_eResult_descriptor_ = stFetchLilianResult_descriptor_->enum_type(0);
  stFetchLilianResult_ProtoModID_descriptor_ = stFetchLilianResult_descriptor_->enum_type(1);
  stFetchLilianResult_ProtoFunID_descriptor_ = stFetchLilianResult_descriptor_->enum_type(2);
  stReqAdd2ApplyList_descriptor_ = file->message_type(21);
  static const int stReqAdd2ApplyList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAdd2ApplyList, otherid_),
  };
  stReqAdd2ApplyList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAdd2ApplyList_descriptor_,
      stReqAdd2ApplyList::default_instance_,
      stReqAdd2ApplyList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAdd2ApplyList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAdd2ApplyList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAdd2ApplyList));
  stReqAdd2ApplyList_ProtoModID_descriptor_ = stReqAdd2ApplyList_descriptor_->enum_type(0);
  stReqAdd2ApplyList_ProtoFunID_descriptor_ = stReqAdd2ApplyList_descriptor_->enum_type(1);
  stAdd2ApplyListResult_descriptor_ = file->message_type(22);
  static const int stAdd2ApplyListResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAdd2ApplyListResult, result_),
  };
  stAdd2ApplyListResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAdd2ApplyListResult_descriptor_,
      stAdd2ApplyListResult::default_instance_,
      stAdd2ApplyListResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAdd2ApplyListResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAdd2ApplyListResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAdd2ApplyListResult));
  stAdd2ApplyListResult_eResult_descriptor_ = stAdd2ApplyListResult_descriptor_->enum_type(0);
  stAdd2ApplyListResult_ProtoModID_descriptor_ = stAdd2ApplyListResult_descriptor_->enum_type(1);
  stAdd2ApplyListResult_ProtoFunID_descriptor_ = stAdd2ApplyListResult_descriptor_->enum_type(2);
  stRefuseAddFriend_descriptor_ = file->message_type(23);
  static const int stRefuseAddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefuseAddFriend, charid_),
  };
  stRefuseAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefuseAddFriend_descriptor_,
      stRefuseAddFriend::default_instance_,
      stRefuseAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefuseAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefuseAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefuseAddFriend));
  stRefuseAddFriend_ProtoModID_descriptor_ = stRefuseAddFriend_descriptor_->enum_type(0);
  stRefuseAddFriend_ProtoFunID_descriptor_ = stRefuseAddFriend_descriptor_->enum_type(1);
  stInvitePKWithFriend_descriptor_ = file->message_type(24);
  static const int stInvitePKWithFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvitePKWithFriend, charid_),
  };
  stInvitePKWithFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInvitePKWithFriend_descriptor_,
      stInvitePKWithFriend::default_instance_,
      stInvitePKWithFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvitePKWithFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvitePKWithFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInvitePKWithFriend));
  stInvitePKWithFriend_ProtoModID_descriptor_ = stInvitePKWithFriend_descriptor_->enum_type(0);
  stInvitePKWithFriend_ProtoFunID_descriptor_ = stInvitePKWithFriend_descriptor_->enum_type(1);
  stAskAgreePKWithFriend_descriptor_ = file->message_type(25);
  static const int stAskAgreePKWithFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskAgreePKWithFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskAgreePKWithFriend, name_),
  };
  stAskAgreePKWithFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAskAgreePKWithFriend_descriptor_,
      stAskAgreePKWithFriend::default_instance_,
      stAskAgreePKWithFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskAgreePKWithFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskAgreePKWithFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAskAgreePKWithFriend));
  stAskAgreePKWithFriend_ProtoModID_descriptor_ = stAskAgreePKWithFriend_descriptor_->enum_type(0);
  stAskAgreePKWithFriend_ProtoFunID_descriptor_ = stAskAgreePKWithFriend_descriptor_->enum_type(1);
  stReplyFriendPKInvite_descriptor_ = file->message_type(26);
  static const int stReplyFriendPKInvite_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyFriendPKInvite, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyFriendPKInvite, charid_),
  };
  stReplyFriendPKInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplyFriendPKInvite_descriptor_,
      stReplyFriendPKInvite::default_instance_,
      stReplyFriendPKInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyFriendPKInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyFriendPKInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplyFriendPKInvite));
  stReplyFriendPKInvite_ProtoModID_descriptor_ = stReplyFriendPKInvite_descriptor_->enum_type(0);
  stReplyFriendPKInvite_ProtoFunID_descriptor_ = stReplyFriendPKInvite_descriptor_->enum_type(1);
  stInvitePKResult_descriptor_ = file->message_type(27);
  static const int stInvitePKResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvitePKResult, result_),
  };
  stInvitePKResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInvitePKResult_descriptor_,
      stInvitePKResult::default_instance_,
      stInvitePKResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvitePKResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInvitePKResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInvitePKResult));
  stInvitePKResult_eResult_descriptor_ = stInvitePKResult_descriptor_->enum_type(0);
  stInvitePKResult_ProtoModID_descriptor_ = stInvitePKResult_descriptor_->enum_type(1);
  stInvitePKResult_ProtoFunID_descriptor_ = stInvitePKResult_descriptor_->enum_type(2);
  stReplyFriendPKInviteResult_descriptor_ = file->message_type(28);
  static const int stReplyFriendPKInviteResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyFriendPKInviteResult, result_),
  };
  stReplyFriendPKInviteResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplyFriendPKInviteResult_descriptor_,
      stReplyFriendPKInviteResult::default_instance_,
      stReplyFriendPKInviteResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyFriendPKInviteResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyFriendPKInviteResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplyFriendPKInviteResult));
  stReplyFriendPKInviteResult_eResult_descriptor_ = stReplyFriendPKInviteResult_descriptor_->enum_type(0);
  stReplyFriendPKInviteResult_ProtoModID_descriptor_ = stReplyFriendPKInviteResult_descriptor_->enum_type(1);
  stReplyFriendPKInviteResult_ProtoFunID_descriptor_ = stReplyFriendPKInviteResult_descriptor_->enum_type(2);
  stSomeOneApplyAddFriend_descriptor_ = file->message_type(29);
  static const int stSomeOneApplyAddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSomeOneApplyAddFriend, one_),
  };
  stSomeOneApplyAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSomeOneApplyAddFriend_descriptor_,
      stSomeOneApplyAddFriend::default_instance_,
      stSomeOneApplyAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSomeOneApplyAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSomeOneApplyAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSomeOneApplyAddFriend));
  stSomeOneApplyAddFriend_ProtoModID_descriptor_ = stSomeOneApplyAddFriend_descriptor_->enum_type(0);
  stSomeOneApplyAddFriend_ProtoFunID_descriptor_ = stSomeOneApplyAddFriend_descriptor_->enum_type(1);
  MarryObjInfo_descriptor_ = file->message_type(30);
  static const int MarryObjInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, fashionwingid_),
  };
  MarryObjInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryObjInfo_descriptor_,
      MarryObjInfo::default_instance_,
      MarryObjInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryObjInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryObjInfo));
  stReqPropose_descriptor_ = file->message_type(31);
  static const int stReqPropose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPropose, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPropose, info_),
  };
  stReqPropose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPropose_descriptor_,
      stReqPropose::default_instance_,
      stReqPropose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPropose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPropose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPropose));
  stReqPropose_ProtoModID_descriptor_ = stReqPropose_descriptor_->enum_type(0);
  stReqPropose_ProtoFunID_descriptor_ = stReqPropose_descriptor_->enum_type(1);
  RejectMarry_descriptor_ = file->message_type(32);
  static const int RejectMarry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectMarry, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectMarry, tick1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectMarry, tick2_),
  };
  RejectMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RejectMarry_descriptor_,
      RejectMarry::default_instance_,
      RejectMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RejectMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RejectMarry));
  RejectMarry_Result_descriptor_ = RejectMarry_descriptor_->enum_type(0);
  RejectMarry_ProtoModID_descriptor_ = RejectMarry_descriptor_->enum_type(1);
  RejectMarry_ProtoFunID_descriptor_ = RejectMarry_descriptor_->enum_type(2);
  ProposeResult_descriptor_ = file->message_type(33);
  static const int ProposeResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeResult, info_),
  };
  ProposeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProposeResult_descriptor_,
      ProposeResult::default_instance_,
      ProposeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProposeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProposeResult));
  ProposeResult_Result_descriptor_ = ProposeResult_descriptor_->enum_type(0);
  ProposeResult_ProtoModID_descriptor_ = ProposeResult_descriptor_->enum_type(1);
  ProposeResult_ProtoFunID_descriptor_ = ProposeResult_descriptor_->enum_type(2);
  stReqAgreeMarry_descriptor_ = file->message_type(34);
  static const int stReqAgreeMarry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeMarry, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeMarry, id_),
  };
  stReqAgreeMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAgreeMarry_descriptor_,
      stReqAgreeMarry::default_instance_,
      stReqAgreeMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAgreeMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAgreeMarry));
  stReqAgreeMarry_Result_descriptor_ = stReqAgreeMarry_descriptor_->enum_type(0);
  stReqAgreeMarry_ProtoModID_descriptor_ = stReqAgreeMarry_descriptor_->enum_type(1);
  stReqAgreeMarry_ProtoFunID_descriptor_ = stReqAgreeMarry_descriptor_->enum_type(2);
  stReqCancelMarry_descriptor_ = file->message_type(35);
  static const int stReqCancelMarry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelMarry, id_),
  };
  stReqCancelMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCancelMarry_descriptor_,
      stReqCancelMarry::default_instance_,
      stReqCancelMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCancelMarry));
  stReqCancelMarry_ProtoModID_descriptor_ = stReqCancelMarry_descriptor_->enum_type(0);
  stReqCancelMarry_ProtoFunID_descriptor_ = stReqCancelMarry_descriptor_->enum_type(1);
  NotifyCancelMarry_descriptor_ = file->message_type(36);
  static const int NotifyCancelMarry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCancelMarry, id_),
  };
  NotifyCancelMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyCancelMarry_descriptor_,
      NotifyCancelMarry::default_instance_,
      NotifyCancelMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCancelMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyCancelMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyCancelMarry));
  NotifyCancelMarry_ProtoModID_descriptor_ = NotifyCancelMarry_descriptor_->enum_type(0);
  NotifyCancelMarry_ProtoFunID_descriptor_ = NotifyCancelMarry_descriptor_->enum_type(1);
  NotifyAgree_descriptor_ = file->message_type(37);
  static const int NotifyAgree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAgree, result_),
  };
  NotifyAgree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAgree_descriptor_,
      NotifyAgree::default_instance_,
      NotifyAgree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAgree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAgree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAgree));
  NotifyAgree_Result_descriptor_ = NotifyAgree_descriptor_->enum_type(0);
  NotifyAgree_ProtoModID_descriptor_ = NotifyAgree_descriptor_->enum_type(1);
  NotifyAgree_ProtoFunID_descriptor_ = NotifyAgree_descriptor_->enum_type(2);
  NotifyFriendType_descriptor_ = file->enum_type(0);
  eFetchLilianType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Friend_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynFriendInfo_descriptor_, &stSynFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynAllFriend_descriptor_, &stSynAllFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAddOneFriend_descriptor_, &stReqAddOneFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyAddOneFriend_descriptor_, &stNotifyAddOneFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddFriendTip_descriptor_, &stAddFriendTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDelFriend_descriptor_, &stDelFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFindAndAddFriend_descriptor_, &stFindAndAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFindAndAddFriendResult_descriptor_, &stFindAndAddFriendResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqApplyAddFriendList_descriptor_, &stReqApplyAddFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynApplyerInfo_descriptor_, &stSynApplyerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetApplyAddFriendList_descriptor_, &stRetApplyAddFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyFriend_descriptor_, &stNotifyFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRecommondChar_descriptor_, &stSynRecommondChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRecommondFriend_descriptor_, &stReqRecommondFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRecommondFriendList_descriptor_, &stRecommondFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiveLilian2Friend_descriptor_, &stGiveLilian2Friend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiveLilianResult_descriptor_, &stGiveLilianResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqReceiveLilian_descriptor_, &stReqReceiveLilian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReceiveLilianList_descriptor_, &stReceiveLilianList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFetchLilian_descriptor_, &stFetchLilian::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFetchLilianResult_descriptor_, &stFetchLilianResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAdd2ApplyList_descriptor_, &stReqAdd2ApplyList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAdd2ApplyListResult_descriptor_, &stAdd2ApplyListResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefuseAddFriend_descriptor_, &stRefuseAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInvitePKWithFriend_descriptor_, &stInvitePKWithFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAskAgreePKWithFriend_descriptor_, &stAskAgreePKWithFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplyFriendPKInvite_descriptor_, &stReplyFriendPKInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInvitePKResult_descriptor_, &stInvitePKResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplyFriendPKInviteResult_descriptor_, &stReplyFriendPKInviteResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSomeOneApplyAddFriend_descriptor_, &stSomeOneApplyAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryObjInfo_descriptor_, &MarryObjInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPropose_descriptor_, &stReqPropose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RejectMarry_descriptor_, &RejectMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProposeResult_descriptor_, &ProposeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAgreeMarry_descriptor_, &stReqAgreeMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCancelMarry_descriptor_, &stReqCancelMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyCancelMarry_descriptor_, &NotifyCancelMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAgree_descriptor_, &NotifyAgree::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Friend_2eproto() {
  delete stSynFriendInfo::default_instance_;
  delete stSynFriendInfo_reflection_;
  delete stSynAllFriend::default_instance_;
  delete stSynAllFriend_reflection_;
  delete stReqAddOneFriend::default_instance_;
  delete stReqAddOneFriend_reflection_;
  delete stNotifyAddOneFriend::default_instance_;
  delete stNotifyAddOneFriend_reflection_;
  delete stAddFriendTip::default_instance_;
  delete stAddFriendTip_reflection_;
  delete stDelFriend::default_instance_;
  delete stDelFriend_reflection_;
  delete stFindAndAddFriend::default_instance_;
  delete stFindAndAddFriend_reflection_;
  delete stFindAndAddFriendResult::default_instance_;
  delete stFindAndAddFriendResult_reflection_;
  delete stReqApplyAddFriendList::default_instance_;
  delete stReqApplyAddFriendList_reflection_;
  delete stSynApplyerInfo::default_instance_;
  delete stSynApplyerInfo_reflection_;
  delete stRetApplyAddFriendList::default_instance_;
  delete stRetApplyAddFriendList_reflection_;
  delete stNotifyFriend::default_instance_;
  delete stNotifyFriend_reflection_;
  delete stSynRecommondChar::default_instance_;
  delete stSynRecommondChar_reflection_;
  delete stReqRecommondFriend::default_instance_;
  delete stReqRecommondFriend_reflection_;
  delete stRecommondFriendList::default_instance_;
  delete stRecommondFriendList_reflection_;
  delete stGiveLilian2Friend::default_instance_;
  delete stGiveLilian2Friend_reflection_;
  delete stGiveLilianResult::default_instance_;
  delete stGiveLilianResult_reflection_;
  delete stReqReceiveLilian::default_instance_;
  delete stReqReceiveLilian_reflection_;
  delete stReceiveLilianList::default_instance_;
  delete stReceiveLilianList_reflection_;
  delete stFetchLilian::default_instance_;
  delete stFetchLilian_reflection_;
  delete stFetchLilianResult::default_instance_;
  delete stFetchLilianResult_reflection_;
  delete stReqAdd2ApplyList::default_instance_;
  delete stReqAdd2ApplyList_reflection_;
  delete stAdd2ApplyListResult::default_instance_;
  delete stAdd2ApplyListResult_reflection_;
  delete stRefuseAddFriend::default_instance_;
  delete stRefuseAddFriend_reflection_;
  delete stInvitePKWithFriend::default_instance_;
  delete stInvitePKWithFriend_reflection_;
  delete stAskAgreePKWithFriend::default_instance_;
  delete stAskAgreePKWithFriend_reflection_;
  delete stReplyFriendPKInvite::default_instance_;
  delete stReplyFriendPKInvite_reflection_;
  delete stInvitePKResult::default_instance_;
  delete stInvitePKResult_reflection_;
  delete stReplyFriendPKInviteResult::default_instance_;
  delete stReplyFriendPKInviteResult_reflection_;
  delete stSomeOneApplyAddFriend::default_instance_;
  delete stSomeOneApplyAddFriend_reflection_;
  delete MarryObjInfo::default_instance_;
  delete MarryObjInfo_reflection_;
  delete stReqPropose::default_instance_;
  delete stReqPropose_reflection_;
  delete RejectMarry::default_instance_;
  delete RejectMarry_reflection_;
  delete ProposeResult::default_instance_;
  delete ProposeResult_reflection_;
  delete stReqAgreeMarry::default_instance_;
  delete stReqAgreeMarry_reflection_;
  delete stReqCancelMarry::default_instance_;
  delete stReqCancelMarry_reflection_;
  delete NotifyCancelMarry::default_instance_;
  delete NotifyCancelMarry_reflection_;
  delete NotifyAgree::default_instance_;
  delete NotifyAgree_reflection_;
}

void protobuf_AddDesc_Friend_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_ModID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Friend.proto\022\013FriendProto\032\013ModID.proto"
    "\"\245\001\n\017stSynFriendInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004"
    "name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\013"
    "\n\003sex\030\005 \001(\r\022\016\n\006online\030\006 \001(\010\022\023\n\013battlePow"
    "er\030\007 \001(\r\022\025\n\rlastLoginTime\030\010 \001(\t\022\017\n\007photo"
    "ID\030\t \001(\r\"\250\001\n\016stSynAllFriend\022/\n\tallFriend"
    "\030\001 \003(\0132\034.FriendProto.stSynFriendInfo\022\026\n\016"
    "fetchLilianNum\030\002 \001(\r\022\033\n\023hasGiveLilianCha"
    "rID\030\003 \003(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020\001\"U\n\021stReqAddOneFriend"
    "\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\005\"\027\n\nProtoFunID\022\t\n\005FunID\020\002\"t\n\024stNotifyAd"
    "dOneFriend\022*\n\004data\030\001 \001(\0132\034.FriendProto.s"
    "tSynFriendInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\005\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020\003\"`\n\016stAddFriendT"
    "ip\022\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020\004\"O\n\013stDelFriend\022\016\n\006charID\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\005\"T\n\022stFindAndAddFriend\022\014\n\004name\030\001 \001(\t\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\006\"j\n\030stFindAndAddFriendResult\022\016\n"
    "\006result\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t\n\005FunID\020\007\"Y\n"
    "\027stReqApplyAddFriendList\022\014\n\004flag\030\001 \001(\r\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020\010\"\226\001\n\020stSynApplyerInfo\022\016\n\006charID\030"
    "\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\013\n\003jo"
    "b\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\025\n\rapplyDiffTime\030\006 "
    "\001(\r\022\023\n\013battlePower\030\007 \001(\r\022\017\n\007photoID\030\010 \001("
    "\r\"\177\n\027stRetApplyAddFriendList\0222\n\013applyerL"
    "ist\030\001 \003(\0132\035.FriendProto.stSynApplyerInfo"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\010\"\177\n\016stNotifyFriend\022\016\n\006charID\030\001"
    " \001(\r\022+\n\004type\030\002 \001(\0162\035.FriendProto.NotifyF"
    "riendType\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020\t\"\201\001\n\022stSynRecommondCh"
    "ar\022\016\n\006charID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013\n\003job\030"
    "\003 \001(\r\022\013\n\003sex\030\004 \001(\r\022\023\n\013battlePower\030\005 \001(\r\022"
    "\r\n\005level\030\006 \001(\r\022\017\n\007photoID\030\007 \001(\r\"X\n\024stReq"
    "RecommondFriend\022\016\n\006charID\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\n\"|\n\025stRecommondFriendList\0221\n\010charList\030\001"
    " \003(\0132\037.FriendProto.stSynRecommondChar\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\013\"W\n\023stGiveLilian2Friend\022\016\n\006charID"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\014\"\263\001\n\022stGiveLilianResult\022"
    "\016\n\006charID\030\001 \001(\r\0227\n\006result\030\002 \001(\0162\'.Friend"
    "Proto.stGiveLilianResult.eResult\"\"\n\007eRes"
    "ult\022\014\n\010eSUCCESS\020\001\022\t\n\005eFAIL\020\002\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t\n\005FunID\020\r\"V"
    "\n\022stReqReceiveLilian\022\016\n\006charID\030\001 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\016\"X\n\023stReceiveLilianList\022\017\n\007charIDs"
    "\030\001 \003(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\017\"~\n\rstFetchLilian\022+\n\004typ"
    "e\030\001 \001(\0162\035.FriendProto.eFetchLilianType\022\016"
    "\n\006charID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\005\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020\020\"\325\001\n\023stFetchLili"
    "anResult\022\016\n\006result\030\001 \001(\r\022\016\n\006charID\030\002 \001(\r"
    "\022+\n\004type\030\003 \001(\0162\035.FriendProto.eFetchLilia"
    "nType\"\?\n\007eResult\022\014\n\010eSUCCESS\020\001\022\020\n\014eNUM_U"
    "SE_OUT\020\002\022\024\n\020eNOT_GIVE_LILIAN\020\003\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t\n\005FunID\020\020"
    "\"W\n\022stReqAdd2ApplyList\022\017\n\007otherID\030\001 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\021\"\251\001\n\025stAdd2ApplyListResult\022:\n\006r"
    "esult\030\001 \001(\0162*.FriendProto.stAdd2ApplyLis"
    "tResult.eResult\"\"\n\007eResult\022\014\n\010eSUCCESS\020\001"
    "\022\t\n\005eFAIL\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\022\"U\n\021stRefuseAddFrie"
    "nd\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\005\"\027\n\nProtoFunID\022\t\n\005FunID\020\023\"X\n\024stInvite"
    "PKWithFriend\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022\t\n\005FunID\020\024\"h"
    "\n\026stAskAgreePKWithFriend\022\016\n\006charID\030\001 \001(\r"
    "\022\014\n\004name\030\002 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\005\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020\025\"h\n\025stReplyFrien"
    "dPKInvite\022\r\n\005agree\030\001 \001(\010\022\016\n\006charID\030\002 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\026\"\327\001\n\020stInvitePKResult\0225\n\006resul"
    "t\030\001 \001(\0162%.FriendProto.stInvitePKResult.e"
    "Result\"Z\n\007eResult\022\013\n\007eRefuse\020\001\022\n\n\006eAgree"
    "\020\002\022\022\n\016eNotYourFriend\020\003\022\016\n\neNotOnline\020\004\022\022"
    "\n\016eInviteSuccess\020\005\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\005\"\027\n\nProtoFunID\022\t\n\005FunID\020\026\"\270\001\n\033stReply"
    "FriendPKInviteResult\022@\n\006result\030\001 \001(\01620.F"
    "riendProto.stReplyFriendPKInviteResult.e"
    "Result\"%\n\007eResult\022\032\n\026eNot_Invited_Has_En"
    "ter\020\001\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\027\"w\n\027stSomeOneApplyAddFrie"
    "nd\022*\n\003one\030\001 \001(\0132\035.FriendProto.stSynApply"
    "erInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\030\"\222\003\n\014MarryObjInfo\022\016\n\006cha"
    "rID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\013"
    "\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\023\n\013battlePower\030"
    "\006 \001(\r\022\016\n\006headID\030\007 \001(\r\022\016\n\006bodyID\030\010 \001(\r\022\020\n"
    "\010weaponID\030\t \001(\r\022\020\n\010cloackID\030\n \001(\r\022\016\n\006win"
    "gID\030\013 \001(\r\022\016\n\006shoeID\030\014 \001(\r\022\023\n\013fashionHair"
    "\030\r \001(\r\022\023\n\013fashionFace\030\016 \001(\r\022\023\n\013fashionBo"
    "dy\030\017 \001(\r\022\025\n\rfashionWeapon\030\020 \001(\r\022\023\n\013fashi"
    "onShoe\030\021 \001(\r\022\031\n\021fashionDecoration\030\022 \001(\r\022"
    "\020\n\010effectID\030\023 \001(\r\022\023\n\013wingBreakLv\030\024 \001(\r\022\025"
    "\n\rfashionWingID\030\025 \001(\r\"u\n\014stReqPropose\022\n\n"
    "\002id\030\001 \001(\r\022\'\n\004info\030\002 \001(\0132\031.FriendProto.Ma"
    "rryObjInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020\031\"\277\002\n\013RejectMarry\022/\n\006"
    "result\030\001 \001(\0162\037.FriendProto.RejectMarry.R"
    "esult\022\r\n\005tick1\030\002 \001(\r\022\r\n\005tick2\030\003 \001(\r\"\256\001\n\006"
    "Result\022\022\n\016RESULT_SUCCESS\020\001\022\027\n\023RESULT_ERR"
    "OR_FRIEND\020\002\022\027\n\023RESULT_ERROR_ONLINE\020\003\022\024\n\020"
    "RESULT_ERROR_SEX\020\004\022\030\n\024RESULT_ERROR_MARRI"
    "ED\020\005\022\026\n\022RESULT_ERROR_TICK1\020\006\022\026\n\022RESULT_E"
    "RROR_TICK2\020\007\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\032\"\316\001\n\rProposeResult"
    "\0221\n\006result\030\001 \001(\0162!.FriendProto.ProposeRe"
    "sult.Result\022\'\n\004info\030\002 \001(\0132\031.FriendProto."
    "MarryObjInfo\"/\n\006Result\022\022\n\016RESULT_SUCCESS"
    "\020\001\022\021\n\rRESULT_REFUSE\020\002\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\005\"\027\n\nProtoFunID\022\t\n\005FunID\020\033\"\263\001\n\017stRe"
    "qAgreeMarry\0223\n\006result\030\001 \001(\0162#.FriendProt"
    "o.stReqAgreeMarry.Result\022\n\n\002id\030\002 \001(\r\"-\n\006"
    "Result\022\020\n\014RESULT_AGREE\020\001\022\021\n\rRESULT_REFUS"
    "E\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\034\"P\n\020stReqCancelMarry\022\n\n\002id\030"
    "\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\035\"Q\n\021NotifyCancelMarry\022\n\n\002"
    "id\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\036\"\310\001\n\013NotifyAgree\022/\n\006re"
    "sult\030\001 \001(\0162\037.FriendProto.NotifyAgree.Res"
    "ult\"V\n\006Result\022\022\n\016RESULT_SUCCESS\020\001\022\021\n\rRES"
    "ULT_ONLINE\020\002\022\021\n\rRESULT_CANCEL\020\003\022\022\n\016RESUL"
    "T_WEDDING\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\005\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\037*9\n\020NotifyFriendTyp"
    "e\022\021\n\rNOTIFY_ONLINE\020\001\022\022\n\016NOTIFY_OFFLINE\020\002"
    "*0\n\020eFetchLilianType\022\r\n\tFETCH_ONE\020\001\022\r\n\tF"
    "ETCH_ALL\020\002", 5490);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Friend.proto", &protobuf_RegisterTypes);
  stSynFriendInfo::default_instance_ = new stSynFriendInfo();
  stSynAllFriend::default_instance_ = new stSynAllFriend();
  stReqAddOneFriend::default_instance_ = new stReqAddOneFriend();
  stNotifyAddOneFriend::default_instance_ = new stNotifyAddOneFriend();
  stAddFriendTip::default_instance_ = new stAddFriendTip();
  stDelFriend::default_instance_ = new stDelFriend();
  stFindAndAddFriend::default_instance_ = new stFindAndAddFriend();
  stFindAndAddFriendResult::default_instance_ = new stFindAndAddFriendResult();
  stReqApplyAddFriendList::default_instance_ = new stReqApplyAddFriendList();
  stSynApplyerInfo::default_instance_ = new stSynApplyerInfo();
  stRetApplyAddFriendList::default_instance_ = new stRetApplyAddFriendList();
  stNotifyFriend::default_instance_ = new stNotifyFriend();
  stSynRecommondChar::default_instance_ = new stSynRecommondChar();
  stReqRecommondFriend::default_instance_ = new stReqRecommondFriend();
  stRecommondFriendList::default_instance_ = new stRecommondFriendList();
  stGiveLilian2Friend::default_instance_ = new stGiveLilian2Friend();
  stGiveLilianResult::default_instance_ = new stGiveLilianResult();
  stReqReceiveLilian::default_instance_ = new stReqReceiveLilian();
  stReceiveLilianList::default_instance_ = new stReceiveLilianList();
  stFetchLilian::default_instance_ = new stFetchLilian();
  stFetchLilianResult::default_instance_ = new stFetchLilianResult();
  stReqAdd2ApplyList::default_instance_ = new stReqAdd2ApplyList();
  stAdd2ApplyListResult::default_instance_ = new stAdd2ApplyListResult();
  stRefuseAddFriend::default_instance_ = new stRefuseAddFriend();
  stInvitePKWithFriend::default_instance_ = new stInvitePKWithFriend();
  stAskAgreePKWithFriend::default_instance_ = new stAskAgreePKWithFriend();
  stReplyFriendPKInvite::default_instance_ = new stReplyFriendPKInvite();
  stInvitePKResult::default_instance_ = new stInvitePKResult();
  stReplyFriendPKInviteResult::default_instance_ = new stReplyFriendPKInviteResult();
  stSomeOneApplyAddFriend::default_instance_ = new stSomeOneApplyAddFriend();
  MarryObjInfo::default_instance_ = new MarryObjInfo();
  stReqPropose::default_instance_ = new stReqPropose();
  RejectMarry::default_instance_ = new RejectMarry();
  ProposeResult::default_instance_ = new ProposeResult();
  stReqAgreeMarry::default_instance_ = new stReqAgreeMarry();
  stReqCancelMarry::default_instance_ = new stReqCancelMarry();
  NotifyCancelMarry::default_instance_ = new NotifyCancelMarry();
  NotifyAgree::default_instance_ = new NotifyAgree();
  stSynFriendInfo::default_instance_->InitAsDefaultInstance();
  stSynAllFriend::default_instance_->InitAsDefaultInstance();
  stReqAddOneFriend::default_instance_->InitAsDefaultInstance();
  stNotifyAddOneFriend::default_instance_->InitAsDefaultInstance();
  stAddFriendTip::default_instance_->InitAsDefaultInstance();
  stDelFriend::default_instance_->InitAsDefaultInstance();
  stFindAndAddFriend::default_instance_->InitAsDefaultInstance();
  stFindAndAddFriendResult::default_instance_->InitAsDefaultInstance();
  stReqApplyAddFriendList::default_instance_->InitAsDefaultInstance();
  stSynApplyerInfo::default_instance_->InitAsDefaultInstance();
  stRetApplyAddFriendList::default_instance_->InitAsDefaultInstance();
  stNotifyFriend::default_instance_->InitAsDefaultInstance();
  stSynRecommondChar::default_instance_->InitAsDefaultInstance();
  stReqRecommondFriend::default_instance_->InitAsDefaultInstance();
  stRecommondFriendList::default_instance_->InitAsDefaultInstance();
  stGiveLilian2Friend::default_instance_->InitAsDefaultInstance();
  stGiveLilianResult::default_instance_->InitAsDefaultInstance();
  stReqReceiveLilian::default_instance_->InitAsDefaultInstance();
  stReceiveLilianList::default_instance_->InitAsDefaultInstance();
  stFetchLilian::default_instance_->InitAsDefaultInstance();
  stFetchLilianResult::default_instance_->InitAsDefaultInstance();
  stReqAdd2ApplyList::default_instance_->InitAsDefaultInstance();
  stAdd2ApplyListResult::default_instance_->InitAsDefaultInstance();
  stRefuseAddFriend::default_instance_->InitAsDefaultInstance();
  stInvitePKWithFriend::default_instance_->InitAsDefaultInstance();
  stAskAgreePKWithFriend::default_instance_->InitAsDefaultInstance();
  stReplyFriendPKInvite::default_instance_->InitAsDefaultInstance();
  stInvitePKResult::default_instance_->InitAsDefaultInstance();
  stReplyFriendPKInviteResult::default_instance_->InitAsDefaultInstance();
  stSomeOneApplyAddFriend::default_instance_->InitAsDefaultInstance();
  MarryObjInfo::default_instance_->InitAsDefaultInstance();
  stReqPropose::default_instance_->InitAsDefaultInstance();
  RejectMarry::default_instance_->InitAsDefaultInstance();
  ProposeResult::default_instance_->InitAsDefaultInstance();
  stReqAgreeMarry::default_instance_->InitAsDefaultInstance();
  stReqCancelMarry::default_instance_->InitAsDefaultInstance();
  NotifyCancelMarry::default_instance_->InitAsDefaultInstance();
  NotifyAgree::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Friend_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Friend_2eproto {
  StaticDescriptorInitializer_Friend_2eproto() {
    protobuf_AddDesc_Friend_2eproto();
  }
} static_descriptor_initializer_Friend_2eproto_;
const ::google::protobuf::EnumDescriptor* NotifyFriendType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyFriendType_descriptor_;
}
bool NotifyFriendType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eFetchLilianType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eFetchLilianType_descriptor_;
}
bool eFetchLilianType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int stSynFriendInfo::kCharIDFieldNumber;
const int stSynFriendInfo::kNameFieldNumber;
const int stSynFriendInfo::kLevelFieldNumber;
const int stSynFriendInfo::kJobFieldNumber;
const int stSynFriendInfo::kSexFieldNumber;
const int stSynFriendInfo::kOnlineFieldNumber;
const int stSynFriendInfo::kBattlePowerFieldNumber;
const int stSynFriendInfo::kLastLoginTimeFieldNumber;
const int stSynFriendInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynFriendInfo::stSynFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynFriendInfo::InitAsDefaultInstance() {
}

stSynFriendInfo::stSynFriendInfo(const stSynFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  online_ = false;
  battlepower_ = 0u;
  lastlogintime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynFriendInfo::~stSynFriendInfo() {
  SharedDtor();
}

void stSynFriendInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (lastlogintime_ != &::google::protobuf::internal::kEmptyString) {
    delete lastlogintime_;
  }
  if (this != default_instance_) {
  }
}

void stSynFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynFriendInfo_descriptor_;
}

const stSynFriendInfo& stSynFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stSynFriendInfo* stSynFriendInfo::default_instance_ = NULL;

stSynFriendInfo* stSynFriendInfo::New() const {
  return new stSynFriendInfo;
}

void stSynFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    online_ = false;
    battlepower_ = 0u;
    if (has_lastlogintime()) {
      if (lastlogintime_ != &::google::protobuf::internal::kEmptyString) {
        lastlogintime_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_online;
        break;
      }

      // optional bool online = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_lastLoginTime;
        break;
      }

      // optional string lastLoginTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastLoginTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lastlogintime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lastlogintime().data(), this->lastlogintime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional bool online = 6;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->online(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional string lastLoginTime = 8;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastlogintime().data(), this->lastlogintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->lastlogintime(), output);
  }

  // optional uint32 photoID = 9;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional bool online = 6;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->online(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional string lastLoginTime = 8;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lastlogintime().data(), this->lastlogintime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->lastlogintime(), target);
  }

  // optional uint32 photoID = 9;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional bool online = 6;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional string lastLoginTime = 8;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lastlogintime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 photoID = 9;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynFriendInfo::MergeFrom(const stSynFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynFriendInfo::CopyFrom(const stSynFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynFriendInfo::IsInitialized() const {

  return true;
}

void stSynFriendInfo::Swap(stSynFriendInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(online_, other->online_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynFriendInfo_descriptor_;
  metadata.reflection = stSynFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynAllFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllFriend_ProtoModID_descriptor_;
}
bool stSynAllFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllFriend_ProtoModID stSynAllFriend::ModID;
const stSynAllFriend_ProtoModID stSynAllFriend::ProtoModID_MIN;
const stSynAllFriend_ProtoModID stSynAllFriend::ProtoModID_MAX;
const int stSynAllFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynAllFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllFriend_ProtoFunID_descriptor_;
}
bool stSynAllFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllFriend_ProtoFunID stSynAllFriend::FunID;
const stSynAllFriend_ProtoFunID stSynAllFriend::ProtoFunID_MIN;
const stSynAllFriend_ProtoFunID stSynAllFriend::ProtoFunID_MAX;
const int stSynAllFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynAllFriend::kAllFriendFieldNumber;
const int stSynAllFriend::kFetchLilianNumFieldNumber;
const int stSynAllFriend::kHasGiveLilianCharIDFieldNumber;
#endif  // !_MSC_VER

stSynAllFriend::stSynAllFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynAllFriend::InitAsDefaultInstance() {
}

stSynAllFriend::stSynAllFriend(const stSynAllFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynAllFriend::SharedCtor() {
  _cached_size_ = 0;
  fetchliliannum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynAllFriend::~stSynAllFriend() {
  SharedDtor();
}

void stSynAllFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynAllFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynAllFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllFriend_descriptor_;
}

const stSynAllFriend& stSynAllFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stSynAllFriend* stSynAllFriend::default_instance_ = NULL;

stSynAllFriend* stSynAllFriend::New() const {
  return new stSynAllFriend;
}

void stSynAllFriend::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    fetchliliannum_ = 0u;
  }
  allfriend_.Clear();
  hasgiveliliancharid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynAllFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendProto.stSynFriendInfo allFriend = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allFriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_allFriend;
        if (input->ExpectTag(16)) goto parse_fetchLilianNum;
        break;
      }

      // optional uint32 fetchLilianNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetchLilianNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fetchliliannum_)));
          set_has_fetchliliannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasGiveLilianCharID;
        break;
      }

      // repeated uint32 hasGiveLilianCharID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasGiveLilianCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_hasgiveliliancharid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hasgiveliliancharid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hasGiveLilianCharID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynAllFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FriendProto.stSynFriendInfo allFriend = 1;
  for (int i = 0; i < this->allfriend_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->allfriend(i), output);
  }

  // optional uint32 fetchLilianNum = 2;
  if (has_fetchliliannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fetchliliannum(), output);
  }

  // repeated uint32 hasGiveLilianCharID = 3;
  for (int i = 0; i < this->hasgiveliliancharid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->hasgiveliliancharid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynAllFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FriendProto.stSynFriendInfo allFriend = 1;
  for (int i = 0; i < this->allfriend_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->allfriend(i), target);
  }

  // optional uint32 fetchLilianNum = 2;
  if (has_fetchliliannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fetchliliannum(), target);
  }

  // repeated uint32 hasGiveLilianCharID = 3;
  for (int i = 0; i < this->hasgiveliliancharid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->hasgiveliliancharid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynAllFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 fetchLilianNum = 2;
    if (has_fetchliliannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fetchliliannum());
    }

  }
  // repeated .FriendProto.stSynFriendInfo allFriend = 1;
  total_size += 1 * this->allfriend_size();
  for (int i = 0; i < this->allfriend_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allfriend(i));
  }

  // repeated uint32 hasGiveLilianCharID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hasgiveliliancharid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->hasgiveliliancharid(i));
    }
    total_size += 1 * this->hasgiveliliancharid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynAllFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynAllFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynAllFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynAllFriend::MergeFrom(const stSynAllFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  allfriend_.MergeFrom(from.allfriend_);
  hasgiveliliancharid_.MergeFrom(from.hasgiveliliancharid_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fetchliliannum()) {
      set_fetchliliannum(from.fetchliliannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynAllFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynAllFriend::CopyFrom(const stSynAllFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynAllFriend::IsInitialized() const {

  return true;
}

void stSynAllFriend::Swap(stSynAllFriend* other) {
  if (other != this) {
    allfriend_.Swap(&other->allfriend_);
    std::swap(fetchliliannum_, other->fetchliliannum_);
    hasgiveliliancharid_.Swap(&other->hasgiveliliancharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynAllFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynAllFriend_descriptor_;
  metadata.reflection = stSynAllFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAddOneFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAddOneFriend_ProtoModID_descriptor_;
}
bool stReqAddOneFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAddOneFriend_ProtoModID stReqAddOneFriend::ModID;
const stReqAddOneFriend_ProtoModID stReqAddOneFriend::ProtoModID_MIN;
const stReqAddOneFriend_ProtoModID stReqAddOneFriend::ProtoModID_MAX;
const int stReqAddOneFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAddOneFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAddOneFriend_ProtoFunID_descriptor_;
}
bool stReqAddOneFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAddOneFriend_ProtoFunID stReqAddOneFriend::FunID;
const stReqAddOneFriend_ProtoFunID stReqAddOneFriend::ProtoFunID_MIN;
const stReqAddOneFriend_ProtoFunID stReqAddOneFriend::ProtoFunID_MAX;
const int stReqAddOneFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAddOneFriend::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqAddOneFriend::stReqAddOneFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAddOneFriend::InitAsDefaultInstance() {
}

stReqAddOneFriend::stReqAddOneFriend(const stReqAddOneFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAddOneFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAddOneFriend::~stReqAddOneFriend() {
  SharedDtor();
}

void stReqAddOneFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAddOneFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAddOneFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAddOneFriend_descriptor_;
}

const stReqAddOneFriend& stReqAddOneFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReqAddOneFriend* stReqAddOneFriend::default_instance_ = NULL;

stReqAddOneFriend* stReqAddOneFriend::New() const {
  return new stReqAddOneFriend;
}

void stReqAddOneFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAddOneFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAddOneFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAddOneFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAddOneFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAddOneFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAddOneFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAddOneFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAddOneFriend::MergeFrom(const stReqAddOneFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAddOneFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAddOneFriend::CopyFrom(const stReqAddOneFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAddOneFriend::IsInitialized() const {

  return true;
}

void stReqAddOneFriend::Swap(stReqAddOneFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAddOneFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAddOneFriend_descriptor_;
  metadata.reflection = stReqAddOneFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyAddOneFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddOneFriend_ProtoModID_descriptor_;
}
bool stNotifyAddOneFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddOneFriend_ProtoModID stNotifyAddOneFriend::ModID;
const stNotifyAddOneFriend_ProtoModID stNotifyAddOneFriend::ProtoModID_MIN;
const stNotifyAddOneFriend_ProtoModID stNotifyAddOneFriend::ProtoModID_MAX;
const int stNotifyAddOneFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyAddOneFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddOneFriend_ProtoFunID_descriptor_;
}
bool stNotifyAddOneFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddOneFriend_ProtoFunID stNotifyAddOneFriend::FunID;
const stNotifyAddOneFriend_ProtoFunID stNotifyAddOneFriend::ProtoFunID_MIN;
const stNotifyAddOneFriend_ProtoFunID stNotifyAddOneFriend::ProtoFunID_MAX;
const int stNotifyAddOneFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyAddOneFriend::kDataFieldNumber;
#endif  // !_MSC_VER

stNotifyAddOneFriend::stNotifyAddOneFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyAddOneFriend::InitAsDefaultInstance() {
  data_ = const_cast< ::FriendProto::stSynFriendInfo*>(&::FriendProto::stSynFriendInfo::default_instance());
}

stNotifyAddOneFriend::stNotifyAddOneFriend(const stNotifyAddOneFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyAddOneFriend::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyAddOneFriend::~stNotifyAddOneFriend() {
  SharedDtor();
}

void stNotifyAddOneFriend::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stNotifyAddOneFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyAddOneFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddOneFriend_descriptor_;
}

const stNotifyAddOneFriend& stNotifyAddOneFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stNotifyAddOneFriend* stNotifyAddOneFriend::default_instance_ = NULL;

stNotifyAddOneFriend* stNotifyAddOneFriend::New() const {
  return new stNotifyAddOneFriend;
}

void stNotifyAddOneFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::FriendProto::stSynFriendInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyAddOneFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendProto.stSynFriendInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyAddOneFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FriendProto.stSynFriendInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyAddOneFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FriendProto.stSynFriendInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyAddOneFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendProto.stSynFriendInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyAddOneFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyAddOneFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyAddOneFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyAddOneFriend::MergeFrom(const stNotifyAddOneFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::FriendProto::stSynFriendInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyAddOneFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyAddOneFriend::CopyFrom(const stNotifyAddOneFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyAddOneFriend::IsInitialized() const {

  return true;
}

void stNotifyAddOneFriend::Swap(stNotifyAddOneFriend* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyAddOneFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyAddOneFriend_descriptor_;
  metadata.reflection = stNotifyAddOneFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddFriendTip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddFriendTip_ProtoModID_descriptor_;
}
bool stAddFriendTip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddFriendTip_ProtoModID stAddFriendTip::ModID;
const stAddFriendTip_ProtoModID stAddFriendTip::ProtoModID_MIN;
const stAddFriendTip_ProtoModID stAddFriendTip::ProtoModID_MAX;
const int stAddFriendTip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddFriendTip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddFriendTip_ProtoFunID_descriptor_;
}
bool stAddFriendTip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddFriendTip_ProtoFunID stAddFriendTip::FunID;
const stAddFriendTip_ProtoFunID stAddFriendTip::ProtoFunID_MIN;
const stAddFriendTip_ProtoFunID stAddFriendTip::ProtoFunID_MAX;
const int stAddFriendTip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddFriendTip::kCharIDFieldNumber;
const int stAddFriendTip::kNameFieldNumber;
#endif  // !_MSC_VER

stAddFriendTip::stAddFriendTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddFriendTip::InitAsDefaultInstance() {
}

stAddFriendTip::stAddFriendTip(const stAddFriendTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddFriendTip::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddFriendTip::~stAddFriendTip() {
  SharedDtor();
}

void stAddFriendTip::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stAddFriendTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddFriendTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddFriendTip_descriptor_;
}

const stAddFriendTip& stAddFriendTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stAddFriendTip* stAddFriendTip::default_instance_ = NULL;

stAddFriendTip* stAddFriendTip::New() const {
  return new stAddFriendTip;
}

void stAddFriendTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddFriendTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddFriendTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddFriendTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddFriendTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddFriendTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddFriendTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddFriendTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddFriendTip::MergeFrom(const stAddFriendTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddFriendTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddFriendTip::CopyFrom(const stAddFriendTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddFriendTip::IsInitialized() const {

  return true;
}

void stAddFriendTip::Swap(stAddFriendTip* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddFriendTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddFriendTip_descriptor_;
  metadata.reflection = stAddFriendTip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDelFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelFriend_ProtoModID_descriptor_;
}
bool stDelFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDelFriend_ProtoModID stDelFriend::ModID;
const stDelFriend_ProtoModID stDelFriend::ProtoModID_MIN;
const stDelFriend_ProtoModID stDelFriend::ProtoModID_MAX;
const int stDelFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDelFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelFriend_ProtoFunID_descriptor_;
}
bool stDelFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDelFriend_ProtoFunID stDelFriend::FunID;
const stDelFriend_ProtoFunID stDelFriend::ProtoFunID_MIN;
const stDelFriend_ProtoFunID stDelFriend::ProtoFunID_MAX;
const int stDelFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDelFriend::kCharIDFieldNumber;
#endif  // !_MSC_VER

stDelFriend::stDelFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDelFriend::InitAsDefaultInstance() {
}

stDelFriend::stDelFriend(const stDelFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDelFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDelFriend::~stDelFriend() {
  SharedDtor();
}

void stDelFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDelFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDelFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDelFriend_descriptor_;
}

const stDelFriend& stDelFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stDelFriend* stDelFriend::default_instance_ = NULL;

stDelFriend* stDelFriend::New() const {
  return new stDelFriend;
}

void stDelFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDelFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDelFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDelFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDelFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDelFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDelFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDelFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDelFriend::MergeFrom(const stDelFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDelFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDelFriend::CopyFrom(const stDelFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDelFriend::IsInitialized() const {

  return true;
}

void stDelFriend::Swap(stDelFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDelFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDelFriend_descriptor_;
  metadata.reflection = stDelFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFindAndAddFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFindAndAddFriend_ProtoModID_descriptor_;
}
bool stFindAndAddFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFindAndAddFriend_ProtoModID stFindAndAddFriend::ModID;
const stFindAndAddFriend_ProtoModID stFindAndAddFriend::ProtoModID_MIN;
const stFindAndAddFriend_ProtoModID stFindAndAddFriend::ProtoModID_MAX;
const int stFindAndAddFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFindAndAddFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFindAndAddFriend_ProtoFunID_descriptor_;
}
bool stFindAndAddFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFindAndAddFriend_ProtoFunID stFindAndAddFriend::FunID;
const stFindAndAddFriend_ProtoFunID stFindAndAddFriend::ProtoFunID_MIN;
const stFindAndAddFriend_ProtoFunID stFindAndAddFriend::ProtoFunID_MAX;
const int stFindAndAddFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFindAndAddFriend::kNameFieldNumber;
#endif  // !_MSC_VER

stFindAndAddFriend::stFindAndAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFindAndAddFriend::InitAsDefaultInstance() {
}

stFindAndAddFriend::stFindAndAddFriend(const stFindAndAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFindAndAddFriend::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFindAndAddFriend::~stFindAndAddFriend() {
  SharedDtor();
}

void stFindAndAddFriend::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stFindAndAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFindAndAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFindAndAddFriend_descriptor_;
}

const stFindAndAddFriend& stFindAndAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stFindAndAddFriend* stFindAndAddFriend::default_instance_ = NULL;

stFindAndAddFriend* stFindAndAddFriend::New() const {
  return new stFindAndAddFriend;
}

void stFindAndAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFindAndAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFindAndAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFindAndAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFindAndAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFindAndAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFindAndAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFindAndAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFindAndAddFriend::MergeFrom(const stFindAndAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFindAndAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFindAndAddFriend::CopyFrom(const stFindAndAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFindAndAddFriend::IsInitialized() const {

  return true;
}

void stFindAndAddFriend::Swap(stFindAndAddFriend* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFindAndAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFindAndAddFriend_descriptor_;
  metadata.reflection = stFindAndAddFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFindAndAddFriendResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFindAndAddFriendResult_ProtoModID_descriptor_;
}
bool stFindAndAddFriendResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFindAndAddFriendResult_ProtoModID stFindAndAddFriendResult::ModID;
const stFindAndAddFriendResult_ProtoModID stFindAndAddFriendResult::ProtoModID_MIN;
const stFindAndAddFriendResult_ProtoModID stFindAndAddFriendResult::ProtoModID_MAX;
const int stFindAndAddFriendResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFindAndAddFriendResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFindAndAddFriendResult_ProtoFunID_descriptor_;
}
bool stFindAndAddFriendResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFindAndAddFriendResult_ProtoFunID stFindAndAddFriendResult::FunID;
const stFindAndAddFriendResult_ProtoFunID stFindAndAddFriendResult::ProtoFunID_MIN;
const stFindAndAddFriendResult_ProtoFunID stFindAndAddFriendResult::ProtoFunID_MAX;
const int stFindAndAddFriendResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFindAndAddFriendResult::kResultFieldNumber;
const int stFindAndAddFriendResult::kNameFieldNumber;
#endif  // !_MSC_VER

stFindAndAddFriendResult::stFindAndAddFriendResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFindAndAddFriendResult::InitAsDefaultInstance() {
}

stFindAndAddFriendResult::stFindAndAddFriendResult(const stFindAndAddFriendResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFindAndAddFriendResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFindAndAddFriendResult::~stFindAndAddFriendResult() {
  SharedDtor();
}

void stFindAndAddFriendResult::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stFindAndAddFriendResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFindAndAddFriendResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFindAndAddFriendResult_descriptor_;
}

const stFindAndAddFriendResult& stFindAndAddFriendResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stFindAndAddFriendResult* stFindAndAddFriendResult::default_instance_ = NULL;

stFindAndAddFriendResult* stFindAndAddFriendResult::New() const {
  return new stFindAndAddFriendResult;
}

void stFindAndAddFriendResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFindAndAddFriendResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFindAndAddFriendResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFindAndAddFriendResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFindAndAddFriendResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFindAndAddFriendResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFindAndAddFriendResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFindAndAddFriendResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFindAndAddFriendResult::MergeFrom(const stFindAndAddFriendResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFindAndAddFriendResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFindAndAddFriendResult::CopyFrom(const stFindAndAddFriendResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFindAndAddFriendResult::IsInitialized() const {

  return true;
}

void stFindAndAddFriendResult::Swap(stFindAndAddFriendResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFindAndAddFriendResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFindAndAddFriendResult_descriptor_;
  metadata.reflection = stFindAndAddFriendResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqApplyAddFriendList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqApplyAddFriendList_ProtoModID_descriptor_;
}
bool stReqApplyAddFriendList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqApplyAddFriendList_ProtoModID stReqApplyAddFriendList::ModID;
const stReqApplyAddFriendList_ProtoModID stReqApplyAddFriendList::ProtoModID_MIN;
const stReqApplyAddFriendList_ProtoModID stReqApplyAddFriendList::ProtoModID_MAX;
const int stReqApplyAddFriendList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqApplyAddFriendList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqApplyAddFriendList_ProtoFunID_descriptor_;
}
bool stReqApplyAddFriendList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqApplyAddFriendList_ProtoFunID stReqApplyAddFriendList::FunID;
const stReqApplyAddFriendList_ProtoFunID stReqApplyAddFriendList::ProtoFunID_MIN;
const stReqApplyAddFriendList_ProtoFunID stReqApplyAddFriendList::ProtoFunID_MAX;
const int stReqApplyAddFriendList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqApplyAddFriendList::kFlagFieldNumber;
#endif  // !_MSC_VER

stReqApplyAddFriendList::stReqApplyAddFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqApplyAddFriendList::InitAsDefaultInstance() {
}

stReqApplyAddFriendList::stReqApplyAddFriendList(const stReqApplyAddFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqApplyAddFriendList::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqApplyAddFriendList::~stReqApplyAddFriendList() {
  SharedDtor();
}

void stReqApplyAddFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqApplyAddFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqApplyAddFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqApplyAddFriendList_descriptor_;
}

const stReqApplyAddFriendList& stReqApplyAddFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReqApplyAddFriendList* stReqApplyAddFriendList::default_instance_ = NULL;

stReqApplyAddFriendList* stReqApplyAddFriendList::New() const {
  return new stReqApplyAddFriendList;
}

void stReqApplyAddFriendList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqApplyAddFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqApplyAddFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqApplyAddFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqApplyAddFriendList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqApplyAddFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqApplyAddFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqApplyAddFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqApplyAddFriendList::MergeFrom(const stReqApplyAddFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqApplyAddFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqApplyAddFriendList::CopyFrom(const stReqApplyAddFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqApplyAddFriendList::IsInitialized() const {

  return true;
}

void stReqApplyAddFriendList::Swap(stReqApplyAddFriendList* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqApplyAddFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqApplyAddFriendList_descriptor_;
  metadata.reflection = stReqApplyAddFriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynApplyerInfo::kCharIDFieldNumber;
const int stSynApplyerInfo::kNameFieldNumber;
const int stSynApplyerInfo::kLevelFieldNumber;
const int stSynApplyerInfo::kJobFieldNumber;
const int stSynApplyerInfo::kSexFieldNumber;
const int stSynApplyerInfo::kApplyDiffTimeFieldNumber;
const int stSynApplyerInfo::kBattlePowerFieldNumber;
const int stSynApplyerInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynApplyerInfo::stSynApplyerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynApplyerInfo::InitAsDefaultInstance() {
}

stSynApplyerInfo::stSynApplyerInfo(const stSynApplyerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynApplyerInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  applydifftime_ = 0u;
  battlepower_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynApplyerInfo::~stSynApplyerInfo() {
  SharedDtor();
}

void stSynApplyerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynApplyerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynApplyerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynApplyerInfo_descriptor_;
}

const stSynApplyerInfo& stSynApplyerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stSynApplyerInfo* stSynApplyerInfo::default_instance_ = NULL;

stSynApplyerInfo* stSynApplyerInfo::New() const {
  return new stSynApplyerInfo;
}

void stSynApplyerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    applydifftime_ = 0u;
    battlepower_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynApplyerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_applyDiffTime;
        break;
      }

      // optional uint32 applyDiffTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyDiffTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applydifftime_)));
          set_has_applydifftime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynApplyerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 applyDiffTime = 6;
  if (has_applydifftime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->applydifftime(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynApplyerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 applyDiffTime = 6;
  if (has_applydifftime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->applydifftime(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynApplyerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 applyDiffTime = 6;
    if (has_applydifftime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applydifftime());
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 photoID = 8;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynApplyerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynApplyerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynApplyerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynApplyerInfo::MergeFrom(const stSynApplyerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_applydifftime()) {
      set_applydifftime(from.applydifftime());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynApplyerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynApplyerInfo::CopyFrom(const stSynApplyerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynApplyerInfo::IsInitialized() const {

  return true;
}

void stSynApplyerInfo::Swap(stSynApplyerInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(applydifftime_, other->applydifftime_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynApplyerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynApplyerInfo_descriptor_;
  metadata.reflection = stSynApplyerInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetApplyAddFriendList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetApplyAddFriendList_ProtoModID_descriptor_;
}
bool stRetApplyAddFriendList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetApplyAddFriendList_ProtoModID stRetApplyAddFriendList::ModID;
const stRetApplyAddFriendList_ProtoModID stRetApplyAddFriendList::ProtoModID_MIN;
const stRetApplyAddFriendList_ProtoModID stRetApplyAddFriendList::ProtoModID_MAX;
const int stRetApplyAddFriendList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetApplyAddFriendList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetApplyAddFriendList_ProtoFunID_descriptor_;
}
bool stRetApplyAddFriendList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetApplyAddFriendList_ProtoFunID stRetApplyAddFriendList::FunID;
const stRetApplyAddFriendList_ProtoFunID stRetApplyAddFriendList::ProtoFunID_MIN;
const stRetApplyAddFriendList_ProtoFunID stRetApplyAddFriendList::ProtoFunID_MAX;
const int stRetApplyAddFriendList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetApplyAddFriendList::kApplyerListFieldNumber;
#endif  // !_MSC_VER

stRetApplyAddFriendList::stRetApplyAddFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetApplyAddFriendList::InitAsDefaultInstance() {
}

stRetApplyAddFriendList::stRetApplyAddFriendList(const stRetApplyAddFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetApplyAddFriendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetApplyAddFriendList::~stRetApplyAddFriendList() {
  SharedDtor();
}

void stRetApplyAddFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetApplyAddFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetApplyAddFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetApplyAddFriendList_descriptor_;
}

const stRetApplyAddFriendList& stRetApplyAddFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stRetApplyAddFriendList* stRetApplyAddFriendList::default_instance_ = NULL;

stRetApplyAddFriendList* stRetApplyAddFriendList::New() const {
  return new stRetApplyAddFriendList;
}

void stRetApplyAddFriendList::Clear() {
  applyerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetApplyAddFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendProto.stSynApplyerInfo applyerList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applyerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applyerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_applyerList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetApplyAddFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FriendProto.stSynApplyerInfo applyerList = 1;
  for (int i = 0; i < this->applyerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applyerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetApplyAddFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FriendProto.stSynApplyerInfo applyerList = 1;
  for (int i = 0; i < this->applyerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applyerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetApplyAddFriendList::ByteSize() const {
  int total_size = 0;

  // repeated .FriendProto.stSynApplyerInfo applyerList = 1;
  total_size += 1 * this->applyerlist_size();
  for (int i = 0; i < this->applyerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applyerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetApplyAddFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetApplyAddFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetApplyAddFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetApplyAddFriendList::MergeFrom(const stRetApplyAddFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyerlist_.MergeFrom(from.applyerlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetApplyAddFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetApplyAddFriendList::CopyFrom(const stRetApplyAddFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetApplyAddFriendList::IsInitialized() const {

  return true;
}

void stRetApplyAddFriendList::Swap(stRetApplyAddFriendList* other) {
  if (other != this) {
    applyerlist_.Swap(&other->applyerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetApplyAddFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetApplyAddFriendList_descriptor_;
  metadata.reflection = stRetApplyAddFriendList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFriend_ProtoModID_descriptor_;
}
bool stNotifyFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyFriend_ProtoModID stNotifyFriend::ModID;
const stNotifyFriend_ProtoModID stNotifyFriend::ProtoModID_MIN;
const stNotifyFriend_ProtoModID stNotifyFriend::ProtoModID_MAX;
const int stNotifyFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFriend_ProtoFunID_descriptor_;
}
bool stNotifyFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyFriend_ProtoFunID stNotifyFriend::FunID;
const stNotifyFriend_ProtoFunID stNotifyFriend::ProtoFunID_MIN;
const stNotifyFriend_ProtoFunID stNotifyFriend::ProtoFunID_MAX;
const int stNotifyFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyFriend::kCharIDFieldNumber;
const int stNotifyFriend::kTypeFieldNumber;
#endif  // !_MSC_VER

stNotifyFriend::stNotifyFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyFriend::InitAsDefaultInstance() {
}

stNotifyFriend::stNotifyFriend(const stNotifyFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyFriend::~stNotifyFriend() {
  SharedDtor();
}

void stNotifyFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFriend_descriptor_;
}

const stNotifyFriend& stNotifyFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stNotifyFriend* stNotifyFriend::default_instance_ = NULL;

stNotifyFriend* stNotifyFriend::New() const {
  return new stNotifyFriend;
}

void stNotifyFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .FriendProto.NotifyFriendType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::NotifyFriendType_IsValid(value)) {
            set_type(static_cast< ::FriendProto::NotifyFriendType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional .FriendProto.NotifyFriendType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional .FriendProto.NotifyFriendType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .FriendProto.NotifyFriendType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyFriend::MergeFrom(const stNotifyFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyFriend::CopyFrom(const stNotifyFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyFriend::IsInitialized() const {

  return true;
}

void stNotifyFriend::Swap(stNotifyFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyFriend_descriptor_;
  metadata.reflection = stNotifyFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynRecommondChar::kCharIDFieldNumber;
const int stSynRecommondChar::kNameFieldNumber;
const int stSynRecommondChar::kJobFieldNumber;
const int stSynRecommondChar::kSexFieldNumber;
const int stSynRecommondChar::kBattlePowerFieldNumber;
const int stSynRecommondChar::kLevelFieldNumber;
const int stSynRecommondChar::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynRecommondChar::stSynRecommondChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRecommondChar::InitAsDefaultInstance() {
}

stSynRecommondChar::stSynRecommondChar(const stSynRecommondChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRecommondChar::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  level_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRecommondChar::~stSynRecommondChar() {
  SharedDtor();
}

void stSynRecommondChar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynRecommondChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRecommondChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRecommondChar_descriptor_;
}

const stSynRecommondChar& stSynRecommondChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stSynRecommondChar* stSynRecommondChar::default_instance_ = NULL;

stSynRecommondChar* stSynRecommondChar::New() const {
  return new stSynRecommondChar;
}

void stSynRecommondChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    battlepower_ = 0u;
    level_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRecommondChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRecommondChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 battlePower = 5;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->battlepower(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 photoID = 7;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRecommondChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 battlePower = 5;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->battlepower(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 photoID = 7;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRecommondChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 battlePower = 5;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 photoID = 7;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRecommondChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRecommondChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRecommondChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRecommondChar::MergeFrom(const stSynRecommondChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRecommondChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRecommondChar::CopyFrom(const stSynRecommondChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRecommondChar::IsInitialized() const {

  return true;
}

void stSynRecommondChar::Swap(stSynRecommondChar* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(level_, other->level_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRecommondChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRecommondChar_descriptor_;
  metadata.reflection = stSynRecommondChar_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRecommondFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecommondFriend_ProtoModID_descriptor_;
}
bool stReqRecommondFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecommondFriend_ProtoModID stReqRecommondFriend::ModID;
const stReqRecommondFriend_ProtoModID stReqRecommondFriend::ProtoModID_MIN;
const stReqRecommondFriend_ProtoModID stReqRecommondFriend::ProtoModID_MAX;
const int stReqRecommondFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRecommondFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecommondFriend_ProtoFunID_descriptor_;
}
bool stReqRecommondFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRecommondFriend_ProtoFunID stReqRecommondFriend::FunID;
const stReqRecommondFriend_ProtoFunID stReqRecommondFriend::ProtoFunID_MIN;
const stReqRecommondFriend_ProtoFunID stReqRecommondFriend::ProtoFunID_MAX;
const int stReqRecommondFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRecommondFriend::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqRecommondFriend::stReqRecommondFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRecommondFriend::InitAsDefaultInstance() {
}

stReqRecommondFriend::stReqRecommondFriend(const stReqRecommondFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRecommondFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRecommondFriend::~stReqRecommondFriend() {
  SharedDtor();
}

void stReqRecommondFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRecommondFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRecommondFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRecommondFriend_descriptor_;
}

const stReqRecommondFriend& stReqRecommondFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReqRecommondFriend* stReqRecommondFriend::default_instance_ = NULL;

stReqRecommondFriend* stReqRecommondFriend::New() const {
  return new stReqRecommondFriend;
}

void stReqRecommondFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRecommondFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRecommondFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRecommondFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRecommondFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRecommondFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRecommondFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRecommondFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRecommondFriend::MergeFrom(const stReqRecommondFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRecommondFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRecommondFriend::CopyFrom(const stReqRecommondFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRecommondFriend::IsInitialized() const {

  return true;
}

void stReqRecommondFriend::Swap(stReqRecommondFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRecommondFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRecommondFriend_descriptor_;
  metadata.reflection = stReqRecommondFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRecommondFriendList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRecommondFriendList_ProtoModID_descriptor_;
}
bool stRecommondFriendList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRecommondFriendList_ProtoModID stRecommondFriendList::ModID;
const stRecommondFriendList_ProtoModID stRecommondFriendList::ProtoModID_MIN;
const stRecommondFriendList_ProtoModID stRecommondFriendList::ProtoModID_MAX;
const int stRecommondFriendList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRecommondFriendList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRecommondFriendList_ProtoFunID_descriptor_;
}
bool stRecommondFriendList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRecommondFriendList_ProtoFunID stRecommondFriendList::FunID;
const stRecommondFriendList_ProtoFunID stRecommondFriendList::ProtoFunID_MIN;
const stRecommondFriendList_ProtoFunID stRecommondFriendList::ProtoFunID_MAX;
const int stRecommondFriendList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRecommondFriendList::kCharListFieldNumber;
#endif  // !_MSC_VER

stRecommondFriendList::stRecommondFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRecommondFriendList::InitAsDefaultInstance() {
}

stRecommondFriendList::stRecommondFriendList(const stRecommondFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRecommondFriendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRecommondFriendList::~stRecommondFriendList() {
  SharedDtor();
}

void stRecommondFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRecommondFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRecommondFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRecommondFriendList_descriptor_;
}

const stRecommondFriendList& stRecommondFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stRecommondFriendList* stRecommondFriendList::default_instance_ = NULL;

stRecommondFriendList* stRecommondFriendList::New() const {
  return new stRecommondFriendList;
}

void stRecommondFriendList::Clear() {
  charlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRecommondFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FriendProto.stSynRecommondChar charList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_charList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRecommondFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FriendProto.stSynRecommondChar charList = 1;
  for (int i = 0; i < this->charlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->charlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRecommondFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FriendProto.stSynRecommondChar charList = 1;
  for (int i = 0; i < this->charlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->charlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRecommondFriendList::ByteSize() const {
  int total_size = 0;

  // repeated .FriendProto.stSynRecommondChar charList = 1;
  total_size += 1 * this->charlist_size();
  for (int i = 0; i < this->charlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRecommondFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRecommondFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRecommondFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRecommondFriendList::MergeFrom(const stRecommondFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  charlist_.MergeFrom(from.charlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRecommondFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRecommondFriendList::CopyFrom(const stRecommondFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRecommondFriendList::IsInitialized() const {

  return true;
}

void stRecommondFriendList::Swap(stRecommondFriendList* other) {
  if (other != this) {
    charlist_.Swap(&other->charlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRecommondFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRecommondFriendList_descriptor_;
  metadata.reflection = stRecommondFriendList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGiveLilian2Friend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLilian2Friend_ProtoModID_descriptor_;
}
bool stGiveLilian2Friend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLilian2Friend_ProtoModID stGiveLilian2Friend::ModID;
const stGiveLilian2Friend_ProtoModID stGiveLilian2Friend::ProtoModID_MIN;
const stGiveLilian2Friend_ProtoModID stGiveLilian2Friend::ProtoModID_MAX;
const int stGiveLilian2Friend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveLilian2Friend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLilian2Friend_ProtoFunID_descriptor_;
}
bool stGiveLilian2Friend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLilian2Friend_ProtoFunID stGiveLilian2Friend::FunID;
const stGiveLilian2Friend_ProtoFunID stGiveLilian2Friend::ProtoFunID_MIN;
const stGiveLilian2Friend_ProtoFunID stGiveLilian2Friend::ProtoFunID_MAX;
const int stGiveLilian2Friend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGiveLilian2Friend::kCharIDFieldNumber;
#endif  // !_MSC_VER

stGiveLilian2Friend::stGiveLilian2Friend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiveLilian2Friend::InitAsDefaultInstance() {
}

stGiveLilian2Friend::stGiveLilian2Friend(const stGiveLilian2Friend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiveLilian2Friend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiveLilian2Friend::~stGiveLilian2Friend() {
  SharedDtor();
}

void stGiveLilian2Friend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiveLilian2Friend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiveLilian2Friend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLilian2Friend_descriptor_;
}

const stGiveLilian2Friend& stGiveLilian2Friend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stGiveLilian2Friend* stGiveLilian2Friend::default_instance_ = NULL;

stGiveLilian2Friend* stGiveLilian2Friend::New() const {
  return new stGiveLilian2Friend;
}

void stGiveLilian2Friend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiveLilian2Friend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiveLilian2Friend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiveLilian2Friend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiveLilian2Friend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiveLilian2Friend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiveLilian2Friend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiveLilian2Friend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiveLilian2Friend::MergeFrom(const stGiveLilian2Friend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiveLilian2Friend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiveLilian2Friend::CopyFrom(const stGiveLilian2Friend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiveLilian2Friend::IsInitialized() const {

  return true;
}

void stGiveLilian2Friend::Swap(stGiveLilian2Friend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiveLilian2Friend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiveLilian2Friend_descriptor_;
  metadata.reflection = stGiveLilian2Friend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGiveLilianResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLilianResult_eResult_descriptor_;
}
bool stGiveLilianResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLilianResult_eResult stGiveLilianResult::eSUCCESS;
const stGiveLilianResult_eResult stGiveLilianResult::eFAIL;
const stGiveLilianResult_eResult stGiveLilianResult::eResult_MIN;
const stGiveLilianResult_eResult stGiveLilianResult::eResult_MAX;
const int stGiveLilianResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveLilianResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLilianResult_ProtoModID_descriptor_;
}
bool stGiveLilianResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLilianResult_ProtoModID stGiveLilianResult::ModID;
const stGiveLilianResult_ProtoModID stGiveLilianResult::ProtoModID_MIN;
const stGiveLilianResult_ProtoModID stGiveLilianResult::ProtoModID_MAX;
const int stGiveLilianResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveLilianResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLilianResult_ProtoFunID_descriptor_;
}
bool stGiveLilianResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLilianResult_ProtoFunID stGiveLilianResult::FunID;
const stGiveLilianResult_ProtoFunID stGiveLilianResult::ProtoFunID_MIN;
const stGiveLilianResult_ProtoFunID stGiveLilianResult::ProtoFunID_MAX;
const int stGiveLilianResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGiveLilianResult::kCharIDFieldNumber;
const int stGiveLilianResult::kResultFieldNumber;
#endif  // !_MSC_VER

stGiveLilianResult::stGiveLilianResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiveLilianResult::InitAsDefaultInstance() {
}

stGiveLilianResult::stGiveLilianResult(const stGiveLilianResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiveLilianResult::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiveLilianResult::~stGiveLilianResult() {
  SharedDtor();
}

void stGiveLilianResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiveLilianResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiveLilianResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLilianResult_descriptor_;
}

const stGiveLilianResult& stGiveLilianResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stGiveLilianResult* stGiveLilianResult::default_instance_ = NULL;

stGiveLilianResult* stGiveLilianResult::New() const {
  return new stGiveLilianResult;
}

void stGiveLilianResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiveLilianResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .FriendProto.stGiveLilianResult.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::stGiveLilianResult_eResult_IsValid(value)) {
            set_result(static_cast< ::FriendProto::stGiveLilianResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiveLilianResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional .FriendProto.stGiveLilianResult.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiveLilianResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional .FriendProto.stGiveLilianResult.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiveLilianResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .FriendProto.stGiveLilianResult.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiveLilianResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiveLilianResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiveLilianResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiveLilianResult::MergeFrom(const stGiveLilianResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiveLilianResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiveLilianResult::CopyFrom(const stGiveLilianResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiveLilianResult::IsInitialized() const {

  return true;
}

void stGiveLilianResult::Swap(stGiveLilianResult* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiveLilianResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiveLilianResult_descriptor_;
  metadata.reflection = stGiveLilianResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqReceiveLilian_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveLilian_ProtoModID_descriptor_;
}
bool stReqReceiveLilian_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReceiveLilian_ProtoModID stReqReceiveLilian::ModID;
const stReqReceiveLilian_ProtoModID stReqReceiveLilian::ProtoModID_MIN;
const stReqReceiveLilian_ProtoModID stReqReceiveLilian::ProtoModID_MAX;
const int stReqReceiveLilian::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqReceiveLilian_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveLilian_ProtoFunID_descriptor_;
}
bool stReqReceiveLilian_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqReceiveLilian_ProtoFunID stReqReceiveLilian::FunID;
const stReqReceiveLilian_ProtoFunID stReqReceiveLilian::ProtoFunID_MIN;
const stReqReceiveLilian_ProtoFunID stReqReceiveLilian::ProtoFunID_MAX;
const int stReqReceiveLilian::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqReceiveLilian::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqReceiveLilian::stReqReceiveLilian()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqReceiveLilian::InitAsDefaultInstance() {
}

stReqReceiveLilian::stReqReceiveLilian(const stReqReceiveLilian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqReceiveLilian::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqReceiveLilian::~stReqReceiveLilian() {
  SharedDtor();
}

void stReqReceiveLilian::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqReceiveLilian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqReceiveLilian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqReceiveLilian_descriptor_;
}

const stReqReceiveLilian& stReqReceiveLilian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReqReceiveLilian* stReqReceiveLilian::default_instance_ = NULL;

stReqReceiveLilian* stReqReceiveLilian::New() const {
  return new stReqReceiveLilian;
}

void stReqReceiveLilian::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqReceiveLilian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqReceiveLilian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqReceiveLilian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqReceiveLilian::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqReceiveLilian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqReceiveLilian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqReceiveLilian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqReceiveLilian::MergeFrom(const stReqReceiveLilian& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqReceiveLilian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqReceiveLilian::CopyFrom(const stReqReceiveLilian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqReceiveLilian::IsInitialized() const {

  return true;
}

void stReqReceiveLilian::Swap(stReqReceiveLilian* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqReceiveLilian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqReceiveLilian_descriptor_;
  metadata.reflection = stReqReceiveLilian_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReceiveLilianList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveLilianList_ProtoModID_descriptor_;
}
bool stReceiveLilianList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveLilianList_ProtoModID stReceiveLilianList::ModID;
const stReceiveLilianList_ProtoModID stReceiveLilianList::ProtoModID_MIN;
const stReceiveLilianList_ProtoModID stReceiveLilianList::ProtoModID_MAX;
const int stReceiveLilianList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReceiveLilianList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveLilianList_ProtoFunID_descriptor_;
}
bool stReceiveLilianList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReceiveLilianList_ProtoFunID stReceiveLilianList::FunID;
const stReceiveLilianList_ProtoFunID stReceiveLilianList::ProtoFunID_MIN;
const stReceiveLilianList_ProtoFunID stReceiveLilianList::ProtoFunID_MAX;
const int stReceiveLilianList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReceiveLilianList::kCharIDsFieldNumber;
#endif  // !_MSC_VER

stReceiveLilianList::stReceiveLilianList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReceiveLilianList::InitAsDefaultInstance() {
}

stReceiveLilianList::stReceiveLilianList(const stReceiveLilianList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReceiveLilianList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReceiveLilianList::~stReceiveLilianList() {
  SharedDtor();
}

void stReceiveLilianList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReceiveLilianList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReceiveLilianList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReceiveLilianList_descriptor_;
}

const stReceiveLilianList& stReceiveLilianList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReceiveLilianList* stReceiveLilianList::default_instance_ = NULL;

stReceiveLilianList* stReceiveLilianList::New() const {
  return new stReceiveLilianList;
}

void stReceiveLilianList::Clear() {
  charids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReceiveLilianList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 charIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_charids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_charids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_charIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReceiveLilianList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 charIDs = 1;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->charids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReceiveLilianList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 charIDs = 1;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->charids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReceiveLilianList::ByteSize() const {
  int total_size = 0;

  // repeated uint32 charIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->charids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->charids(i));
    }
    total_size += 1 * this->charids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReceiveLilianList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReceiveLilianList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReceiveLilianList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReceiveLilianList::MergeFrom(const stReceiveLilianList& from) {
  GOOGLE_CHECK_NE(&from, this);
  charids_.MergeFrom(from.charids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReceiveLilianList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReceiveLilianList::CopyFrom(const stReceiveLilianList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReceiveLilianList::IsInitialized() const {

  return true;
}

void stReceiveLilianList::Swap(stReceiveLilianList* other) {
  if (other != this) {
    charids_.Swap(&other->charids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReceiveLilianList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReceiveLilianList_descriptor_;
  metadata.reflection = stReceiveLilianList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFetchLilian_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchLilian_ProtoModID_descriptor_;
}
bool stFetchLilian_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFetchLilian_ProtoModID stFetchLilian::ModID;
const stFetchLilian_ProtoModID stFetchLilian::ProtoModID_MIN;
const stFetchLilian_ProtoModID stFetchLilian::ProtoModID_MAX;
const int stFetchLilian::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFetchLilian_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchLilian_ProtoFunID_descriptor_;
}
bool stFetchLilian_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFetchLilian_ProtoFunID stFetchLilian::FunID;
const stFetchLilian_ProtoFunID stFetchLilian::ProtoFunID_MIN;
const stFetchLilian_ProtoFunID stFetchLilian::ProtoFunID_MAX;
const int stFetchLilian::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFetchLilian::kTypeFieldNumber;
const int stFetchLilian::kCharIDFieldNumber;
#endif  // !_MSC_VER

stFetchLilian::stFetchLilian()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFetchLilian::InitAsDefaultInstance() {
}

stFetchLilian::stFetchLilian(const stFetchLilian& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFetchLilian::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFetchLilian::~stFetchLilian() {
  SharedDtor();
}

void stFetchLilian::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stFetchLilian::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFetchLilian::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchLilian_descriptor_;
}

const stFetchLilian& stFetchLilian::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stFetchLilian* stFetchLilian::default_instance_ = NULL;

stFetchLilian* stFetchLilian::New() const {
  return new stFetchLilian;
}

void stFetchLilian::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFetchLilian::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendProto.eFetchLilianType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::eFetchLilianType_IsValid(value)) {
            set_type(static_cast< ::FriendProto::eFetchLilianType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFetchLilian::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FriendProto.eFetchLilianType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFetchLilian::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FriendProto.eFetchLilianType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFetchLilian::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendProto.eFetchLilianType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFetchLilian::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFetchLilian* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFetchLilian*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFetchLilian::MergeFrom(const stFetchLilian& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFetchLilian::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFetchLilian::CopyFrom(const stFetchLilian& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFetchLilian::IsInitialized() const {

  return true;
}

void stFetchLilian::Swap(stFetchLilian* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFetchLilian::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFetchLilian_descriptor_;
  metadata.reflection = stFetchLilian_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFetchLilianResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchLilianResult_eResult_descriptor_;
}
bool stFetchLilianResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFetchLilianResult_eResult stFetchLilianResult::eSUCCESS;
const stFetchLilianResult_eResult stFetchLilianResult::eNUM_USE_OUT;
const stFetchLilianResult_eResult stFetchLilianResult::eNOT_GIVE_LILIAN;
const stFetchLilianResult_eResult stFetchLilianResult::eResult_MIN;
const stFetchLilianResult_eResult stFetchLilianResult::eResult_MAX;
const int stFetchLilianResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFetchLilianResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchLilianResult_ProtoModID_descriptor_;
}
bool stFetchLilianResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFetchLilianResult_ProtoModID stFetchLilianResult::ModID;
const stFetchLilianResult_ProtoModID stFetchLilianResult::ProtoModID_MIN;
const stFetchLilianResult_ProtoModID stFetchLilianResult::ProtoModID_MAX;
const int stFetchLilianResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFetchLilianResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchLilianResult_ProtoFunID_descriptor_;
}
bool stFetchLilianResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFetchLilianResult_ProtoFunID stFetchLilianResult::FunID;
const stFetchLilianResult_ProtoFunID stFetchLilianResult::ProtoFunID_MIN;
const stFetchLilianResult_ProtoFunID stFetchLilianResult::ProtoFunID_MAX;
const int stFetchLilianResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFetchLilianResult::kResultFieldNumber;
const int stFetchLilianResult::kCharIDFieldNumber;
const int stFetchLilianResult::kTypeFieldNumber;
#endif  // !_MSC_VER

stFetchLilianResult::stFetchLilianResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFetchLilianResult::InitAsDefaultInstance() {
}

stFetchLilianResult::stFetchLilianResult(const stFetchLilianResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFetchLilianResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0u;
  charid_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFetchLilianResult::~stFetchLilianResult() {
  SharedDtor();
}

void stFetchLilianResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stFetchLilianResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFetchLilianResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFetchLilianResult_descriptor_;
}

const stFetchLilianResult& stFetchLilianResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stFetchLilianResult* stFetchLilianResult::default_instance_ = NULL;

stFetchLilianResult* stFetchLilianResult::New() const {
  return new stFetchLilianResult;
}

void stFetchLilianResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0u;
    charid_ = 0u;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFetchLilianResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .FriendProto.eFetchLilianType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::eFetchLilianType_IsValid(value)) {
            set_type(static_cast< ::FriendProto::eFetchLilianType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFetchLilianResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional .FriendProto.eFetchLilianType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFetchLilianResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional .FriendProto.eFetchLilianType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFetchLilianResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .FriendProto.eFetchLilianType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFetchLilianResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFetchLilianResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFetchLilianResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFetchLilianResult::MergeFrom(const stFetchLilianResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFetchLilianResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFetchLilianResult::CopyFrom(const stFetchLilianResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFetchLilianResult::IsInitialized() const {

  return true;
}

void stFetchLilianResult::Swap(stFetchLilianResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFetchLilianResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFetchLilianResult_descriptor_;
  metadata.reflection = stFetchLilianResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAdd2ApplyList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAdd2ApplyList_ProtoModID_descriptor_;
}
bool stReqAdd2ApplyList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAdd2ApplyList_ProtoModID stReqAdd2ApplyList::ModID;
const stReqAdd2ApplyList_ProtoModID stReqAdd2ApplyList::ProtoModID_MIN;
const stReqAdd2ApplyList_ProtoModID stReqAdd2ApplyList::ProtoModID_MAX;
const int stReqAdd2ApplyList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAdd2ApplyList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAdd2ApplyList_ProtoFunID_descriptor_;
}
bool stReqAdd2ApplyList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAdd2ApplyList_ProtoFunID stReqAdd2ApplyList::FunID;
const stReqAdd2ApplyList_ProtoFunID stReqAdd2ApplyList::ProtoFunID_MIN;
const stReqAdd2ApplyList_ProtoFunID stReqAdd2ApplyList::ProtoFunID_MAX;
const int stReqAdd2ApplyList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAdd2ApplyList::kOtherIDFieldNumber;
#endif  // !_MSC_VER

stReqAdd2ApplyList::stReqAdd2ApplyList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAdd2ApplyList::InitAsDefaultInstance() {
}

stReqAdd2ApplyList::stReqAdd2ApplyList(const stReqAdd2ApplyList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAdd2ApplyList::SharedCtor() {
  _cached_size_ = 0;
  otherid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAdd2ApplyList::~stReqAdd2ApplyList() {
  SharedDtor();
}

void stReqAdd2ApplyList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAdd2ApplyList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAdd2ApplyList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAdd2ApplyList_descriptor_;
}

const stReqAdd2ApplyList& stReqAdd2ApplyList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReqAdd2ApplyList* stReqAdd2ApplyList::default_instance_ = NULL;

stReqAdd2ApplyList* stReqAdd2ApplyList::New() const {
  return new stReqAdd2ApplyList;
}

void stReqAdd2ApplyList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    otherid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAdd2ApplyList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 otherID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAdd2ApplyList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 otherID = 1;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->otherid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAdd2ApplyList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 otherID = 1;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->otherid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAdd2ApplyList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 otherID = 1;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->otherid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAdd2ApplyList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAdd2ApplyList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAdd2ApplyList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAdd2ApplyList::MergeFrom(const stReqAdd2ApplyList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAdd2ApplyList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAdd2ApplyList::CopyFrom(const stReqAdd2ApplyList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAdd2ApplyList::IsInitialized() const {

  return true;
}

void stReqAdd2ApplyList::Swap(stReqAdd2ApplyList* other) {
  if (other != this) {
    std::swap(otherid_, other->otherid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAdd2ApplyList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAdd2ApplyList_descriptor_;
  metadata.reflection = stReqAdd2ApplyList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAdd2ApplyListResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAdd2ApplyListResult_eResult_descriptor_;
}
bool stAdd2ApplyListResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAdd2ApplyListResult_eResult stAdd2ApplyListResult::eSUCCESS;
const stAdd2ApplyListResult_eResult stAdd2ApplyListResult::eFAIL;
const stAdd2ApplyListResult_eResult stAdd2ApplyListResult::eResult_MIN;
const stAdd2ApplyListResult_eResult stAdd2ApplyListResult::eResult_MAX;
const int stAdd2ApplyListResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAdd2ApplyListResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAdd2ApplyListResult_ProtoModID_descriptor_;
}
bool stAdd2ApplyListResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAdd2ApplyListResult_ProtoModID stAdd2ApplyListResult::ModID;
const stAdd2ApplyListResult_ProtoModID stAdd2ApplyListResult::ProtoModID_MIN;
const stAdd2ApplyListResult_ProtoModID stAdd2ApplyListResult::ProtoModID_MAX;
const int stAdd2ApplyListResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAdd2ApplyListResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAdd2ApplyListResult_ProtoFunID_descriptor_;
}
bool stAdd2ApplyListResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAdd2ApplyListResult_ProtoFunID stAdd2ApplyListResult::FunID;
const stAdd2ApplyListResult_ProtoFunID stAdd2ApplyListResult::ProtoFunID_MIN;
const stAdd2ApplyListResult_ProtoFunID stAdd2ApplyListResult::ProtoFunID_MAX;
const int stAdd2ApplyListResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAdd2ApplyListResult::kResultFieldNumber;
#endif  // !_MSC_VER

stAdd2ApplyListResult::stAdd2ApplyListResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAdd2ApplyListResult::InitAsDefaultInstance() {
}

stAdd2ApplyListResult::stAdd2ApplyListResult(const stAdd2ApplyListResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAdd2ApplyListResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAdd2ApplyListResult::~stAdd2ApplyListResult() {
  SharedDtor();
}

void stAdd2ApplyListResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAdd2ApplyListResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAdd2ApplyListResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAdd2ApplyListResult_descriptor_;
}

const stAdd2ApplyListResult& stAdd2ApplyListResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stAdd2ApplyListResult* stAdd2ApplyListResult::default_instance_ = NULL;

stAdd2ApplyListResult* stAdd2ApplyListResult::New() const {
  return new stAdd2ApplyListResult;
}

void stAdd2ApplyListResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAdd2ApplyListResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendProto.stAdd2ApplyListResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::stAdd2ApplyListResult_eResult_IsValid(value)) {
            set_result(static_cast< ::FriendProto::stAdd2ApplyListResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAdd2ApplyListResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FriendProto.stAdd2ApplyListResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAdd2ApplyListResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FriendProto.stAdd2ApplyListResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAdd2ApplyListResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendProto.stAdd2ApplyListResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAdd2ApplyListResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAdd2ApplyListResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAdd2ApplyListResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAdd2ApplyListResult::MergeFrom(const stAdd2ApplyListResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAdd2ApplyListResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAdd2ApplyListResult::CopyFrom(const stAdd2ApplyListResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAdd2ApplyListResult::IsInitialized() const {

  return true;
}

void stAdd2ApplyListResult::Swap(stAdd2ApplyListResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAdd2ApplyListResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAdd2ApplyListResult_descriptor_;
  metadata.reflection = stAdd2ApplyListResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefuseAddFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefuseAddFriend_ProtoModID_descriptor_;
}
bool stRefuseAddFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefuseAddFriend_ProtoModID stRefuseAddFriend::ModID;
const stRefuseAddFriend_ProtoModID stRefuseAddFriend::ProtoModID_MIN;
const stRefuseAddFriend_ProtoModID stRefuseAddFriend::ProtoModID_MAX;
const int stRefuseAddFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefuseAddFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefuseAddFriend_ProtoFunID_descriptor_;
}
bool stRefuseAddFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefuseAddFriend_ProtoFunID stRefuseAddFriend::FunID;
const stRefuseAddFriend_ProtoFunID stRefuseAddFriend::ProtoFunID_MIN;
const stRefuseAddFriend_ProtoFunID stRefuseAddFriend::ProtoFunID_MAX;
const int stRefuseAddFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefuseAddFriend::kCharIDFieldNumber;
#endif  // !_MSC_VER

stRefuseAddFriend::stRefuseAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefuseAddFriend::InitAsDefaultInstance() {
}

stRefuseAddFriend::stRefuseAddFriend(const stRefuseAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefuseAddFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefuseAddFriend::~stRefuseAddFriend() {
  SharedDtor();
}

void stRefuseAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefuseAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefuseAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefuseAddFriend_descriptor_;
}

const stRefuseAddFriend& stRefuseAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stRefuseAddFriend* stRefuseAddFriend::default_instance_ = NULL;

stRefuseAddFriend* stRefuseAddFriend::New() const {
  return new stRefuseAddFriend;
}

void stRefuseAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefuseAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefuseAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefuseAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefuseAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefuseAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefuseAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefuseAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefuseAddFriend::MergeFrom(const stRefuseAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefuseAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefuseAddFriend::CopyFrom(const stRefuseAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefuseAddFriend::IsInitialized() const {

  return true;
}

void stRefuseAddFriend::Swap(stRefuseAddFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefuseAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefuseAddFriend_descriptor_;
  metadata.reflection = stRefuseAddFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInvitePKWithFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvitePKWithFriend_ProtoModID_descriptor_;
}
bool stInvitePKWithFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvitePKWithFriend_ProtoModID stInvitePKWithFriend::ModID;
const stInvitePKWithFriend_ProtoModID stInvitePKWithFriend::ProtoModID_MIN;
const stInvitePKWithFriend_ProtoModID stInvitePKWithFriend::ProtoModID_MAX;
const int stInvitePKWithFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInvitePKWithFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvitePKWithFriend_ProtoFunID_descriptor_;
}
bool stInvitePKWithFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvitePKWithFriend_ProtoFunID stInvitePKWithFriend::FunID;
const stInvitePKWithFriend_ProtoFunID stInvitePKWithFriend::ProtoFunID_MIN;
const stInvitePKWithFriend_ProtoFunID stInvitePKWithFriend::ProtoFunID_MAX;
const int stInvitePKWithFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInvitePKWithFriend::kCharIDFieldNumber;
#endif  // !_MSC_VER

stInvitePKWithFriend::stInvitePKWithFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInvitePKWithFriend::InitAsDefaultInstance() {
}

stInvitePKWithFriend::stInvitePKWithFriend(const stInvitePKWithFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInvitePKWithFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInvitePKWithFriend::~stInvitePKWithFriend() {
  SharedDtor();
}

void stInvitePKWithFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInvitePKWithFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInvitePKWithFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvitePKWithFriend_descriptor_;
}

const stInvitePKWithFriend& stInvitePKWithFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stInvitePKWithFriend* stInvitePKWithFriend::default_instance_ = NULL;

stInvitePKWithFriend* stInvitePKWithFriend::New() const {
  return new stInvitePKWithFriend;
}

void stInvitePKWithFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInvitePKWithFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInvitePKWithFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInvitePKWithFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInvitePKWithFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInvitePKWithFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInvitePKWithFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInvitePKWithFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInvitePKWithFriend::MergeFrom(const stInvitePKWithFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInvitePKWithFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInvitePKWithFriend::CopyFrom(const stInvitePKWithFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInvitePKWithFriend::IsInitialized() const {

  return true;
}

void stInvitePKWithFriend::Swap(stInvitePKWithFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInvitePKWithFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInvitePKWithFriend_descriptor_;
  metadata.reflection = stInvitePKWithFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAskAgreePKWithFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskAgreePKWithFriend_ProtoModID_descriptor_;
}
bool stAskAgreePKWithFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAskAgreePKWithFriend_ProtoModID stAskAgreePKWithFriend::ModID;
const stAskAgreePKWithFriend_ProtoModID stAskAgreePKWithFriend::ProtoModID_MIN;
const stAskAgreePKWithFriend_ProtoModID stAskAgreePKWithFriend::ProtoModID_MAX;
const int stAskAgreePKWithFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAskAgreePKWithFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskAgreePKWithFriend_ProtoFunID_descriptor_;
}
bool stAskAgreePKWithFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAskAgreePKWithFriend_ProtoFunID stAskAgreePKWithFriend::FunID;
const stAskAgreePKWithFriend_ProtoFunID stAskAgreePKWithFriend::ProtoFunID_MIN;
const stAskAgreePKWithFriend_ProtoFunID stAskAgreePKWithFriend::ProtoFunID_MAX;
const int stAskAgreePKWithFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAskAgreePKWithFriend::kCharIDFieldNumber;
const int stAskAgreePKWithFriend::kNameFieldNumber;
#endif  // !_MSC_VER

stAskAgreePKWithFriend::stAskAgreePKWithFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAskAgreePKWithFriend::InitAsDefaultInstance() {
}

stAskAgreePKWithFriend::stAskAgreePKWithFriend(const stAskAgreePKWithFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAskAgreePKWithFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAskAgreePKWithFriend::~stAskAgreePKWithFriend() {
  SharedDtor();
}

void stAskAgreePKWithFriend::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stAskAgreePKWithFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAskAgreePKWithFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskAgreePKWithFriend_descriptor_;
}

const stAskAgreePKWithFriend& stAskAgreePKWithFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stAskAgreePKWithFriend* stAskAgreePKWithFriend::default_instance_ = NULL;

stAskAgreePKWithFriend* stAskAgreePKWithFriend::New() const {
  return new stAskAgreePKWithFriend;
}

void stAskAgreePKWithFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAskAgreePKWithFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAskAgreePKWithFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAskAgreePKWithFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAskAgreePKWithFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAskAgreePKWithFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAskAgreePKWithFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAskAgreePKWithFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAskAgreePKWithFriend::MergeFrom(const stAskAgreePKWithFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAskAgreePKWithFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAskAgreePKWithFriend::CopyFrom(const stAskAgreePKWithFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAskAgreePKWithFriend::IsInitialized() const {

  return true;
}

void stAskAgreePKWithFriend::Swap(stAskAgreePKWithFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAskAgreePKWithFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAskAgreePKWithFriend_descriptor_;
  metadata.reflection = stAskAgreePKWithFriend_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplyFriendPKInvite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyFriendPKInvite_ProtoModID_descriptor_;
}
bool stReplyFriendPKInvite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyFriendPKInvite_ProtoModID stReplyFriendPKInvite::ModID;
const stReplyFriendPKInvite_ProtoModID stReplyFriendPKInvite::ProtoModID_MIN;
const stReplyFriendPKInvite_ProtoModID stReplyFriendPKInvite::ProtoModID_MAX;
const int stReplyFriendPKInvite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyFriendPKInvite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyFriendPKInvite_ProtoFunID_descriptor_;
}
bool stReplyFriendPKInvite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyFriendPKInvite_ProtoFunID stReplyFriendPKInvite::FunID;
const stReplyFriendPKInvite_ProtoFunID stReplyFriendPKInvite::ProtoFunID_MIN;
const stReplyFriendPKInvite_ProtoFunID stReplyFriendPKInvite::ProtoFunID_MAX;
const int stReplyFriendPKInvite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplyFriendPKInvite::kAgreeFieldNumber;
const int stReplyFriendPKInvite::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReplyFriendPKInvite::stReplyFriendPKInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplyFriendPKInvite::InitAsDefaultInstance() {
}

stReplyFriendPKInvite::stReplyFriendPKInvite(const stReplyFriendPKInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplyFriendPKInvite::SharedCtor() {
  _cached_size_ = 0;
  agree_ = false;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplyFriendPKInvite::~stReplyFriendPKInvite() {
  SharedDtor();
}

void stReplyFriendPKInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReplyFriendPKInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplyFriendPKInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyFriendPKInvite_descriptor_;
}

const stReplyFriendPKInvite& stReplyFriendPKInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReplyFriendPKInvite* stReplyFriendPKInvite::default_instance_ = NULL;

stReplyFriendPKInvite* stReplyFriendPKInvite::New() const {
  return new stReplyFriendPKInvite;
}

void stReplyFriendPKInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agree_ = false;
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplyFriendPKInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool agree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplyFriendPKInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool agree = 1;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agree(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplyFriendPKInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool agree = 1;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agree(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplyFriendPKInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool agree = 1;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplyFriendPKInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplyFriendPKInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplyFriendPKInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplyFriendPKInvite::MergeFrom(const stReplyFriendPKInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplyFriendPKInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplyFriendPKInvite::CopyFrom(const stReplyFriendPKInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplyFriendPKInvite::IsInitialized() const {

  return true;
}

void stReplyFriendPKInvite::Swap(stReplyFriendPKInvite* other) {
  if (other != this) {
    std::swap(agree_, other->agree_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplyFriendPKInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplyFriendPKInvite_descriptor_;
  metadata.reflection = stReplyFriendPKInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInvitePKResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvitePKResult_eResult_descriptor_;
}
bool stInvitePKResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvitePKResult_eResult stInvitePKResult::eRefuse;
const stInvitePKResult_eResult stInvitePKResult::eAgree;
const stInvitePKResult_eResult stInvitePKResult::eNotYourFriend;
const stInvitePKResult_eResult stInvitePKResult::eNotOnline;
const stInvitePKResult_eResult stInvitePKResult::eInviteSuccess;
const stInvitePKResult_eResult stInvitePKResult::eResult_MIN;
const stInvitePKResult_eResult stInvitePKResult::eResult_MAX;
const int stInvitePKResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInvitePKResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvitePKResult_ProtoModID_descriptor_;
}
bool stInvitePKResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvitePKResult_ProtoModID stInvitePKResult::ModID;
const stInvitePKResult_ProtoModID stInvitePKResult::ProtoModID_MIN;
const stInvitePKResult_ProtoModID stInvitePKResult::ProtoModID_MAX;
const int stInvitePKResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInvitePKResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvitePKResult_ProtoFunID_descriptor_;
}
bool stInvitePKResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInvitePKResult_ProtoFunID stInvitePKResult::FunID;
const stInvitePKResult_ProtoFunID stInvitePKResult::ProtoFunID_MIN;
const stInvitePKResult_ProtoFunID stInvitePKResult::ProtoFunID_MAX;
const int stInvitePKResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInvitePKResult::kResultFieldNumber;
#endif  // !_MSC_VER

stInvitePKResult::stInvitePKResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInvitePKResult::InitAsDefaultInstance() {
}

stInvitePKResult::stInvitePKResult(const stInvitePKResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInvitePKResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInvitePKResult::~stInvitePKResult() {
  SharedDtor();
}

void stInvitePKResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInvitePKResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInvitePKResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInvitePKResult_descriptor_;
}

const stInvitePKResult& stInvitePKResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stInvitePKResult* stInvitePKResult::default_instance_ = NULL;

stInvitePKResult* stInvitePKResult::New() const {
  return new stInvitePKResult;
}

void stInvitePKResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInvitePKResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendProto.stInvitePKResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::stInvitePKResult_eResult_IsValid(value)) {
            set_result(static_cast< ::FriendProto::stInvitePKResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInvitePKResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FriendProto.stInvitePKResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInvitePKResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FriendProto.stInvitePKResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInvitePKResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendProto.stInvitePKResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInvitePKResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInvitePKResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInvitePKResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInvitePKResult::MergeFrom(const stInvitePKResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInvitePKResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInvitePKResult::CopyFrom(const stInvitePKResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInvitePKResult::IsInitialized() const {

  return true;
}

void stInvitePKResult::Swap(stInvitePKResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInvitePKResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInvitePKResult_descriptor_;
  metadata.reflection = stInvitePKResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplyFriendPKInviteResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyFriendPKInviteResult_eResult_descriptor_;
}
bool stReplyFriendPKInviteResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyFriendPKInviteResult_eResult stReplyFriendPKInviteResult::eNot_Invited_Has_Enter;
const stReplyFriendPKInviteResult_eResult stReplyFriendPKInviteResult::eResult_MIN;
const stReplyFriendPKInviteResult_eResult stReplyFriendPKInviteResult::eResult_MAX;
const int stReplyFriendPKInviteResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyFriendPKInviteResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyFriendPKInviteResult_ProtoModID_descriptor_;
}
bool stReplyFriendPKInviteResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyFriendPKInviteResult_ProtoModID stReplyFriendPKInviteResult::ModID;
const stReplyFriendPKInviteResult_ProtoModID stReplyFriendPKInviteResult::ProtoModID_MIN;
const stReplyFriendPKInviteResult_ProtoModID stReplyFriendPKInviteResult::ProtoModID_MAX;
const int stReplyFriendPKInviteResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyFriendPKInviteResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyFriendPKInviteResult_ProtoFunID_descriptor_;
}
bool stReplyFriendPKInviteResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyFriendPKInviteResult_ProtoFunID stReplyFriendPKInviteResult::FunID;
const stReplyFriendPKInviteResult_ProtoFunID stReplyFriendPKInviteResult::ProtoFunID_MIN;
const stReplyFriendPKInviteResult_ProtoFunID stReplyFriendPKInviteResult::ProtoFunID_MAX;
const int stReplyFriendPKInviteResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplyFriendPKInviteResult::kResultFieldNumber;
#endif  // !_MSC_VER

stReplyFriendPKInviteResult::stReplyFriendPKInviteResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplyFriendPKInviteResult::InitAsDefaultInstance() {
}

stReplyFriendPKInviteResult::stReplyFriendPKInviteResult(const stReplyFriendPKInviteResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplyFriendPKInviteResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplyFriendPKInviteResult::~stReplyFriendPKInviteResult() {
  SharedDtor();
}

void stReplyFriendPKInviteResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReplyFriendPKInviteResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplyFriendPKInviteResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyFriendPKInviteResult_descriptor_;
}

const stReplyFriendPKInviteResult& stReplyFriendPKInviteResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReplyFriendPKInviteResult* stReplyFriendPKInviteResult::default_instance_ = NULL;

stReplyFriendPKInviteResult* stReplyFriendPKInviteResult::New() const {
  return new stReplyFriendPKInviteResult;
}

void stReplyFriendPKInviteResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplyFriendPKInviteResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendProto.stReplyFriendPKInviteResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::stReplyFriendPKInviteResult_eResult_IsValid(value)) {
            set_result(static_cast< ::FriendProto::stReplyFriendPKInviteResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplyFriendPKInviteResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FriendProto.stReplyFriendPKInviteResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplyFriendPKInviteResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FriendProto.stReplyFriendPKInviteResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplyFriendPKInviteResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendProto.stReplyFriendPKInviteResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplyFriendPKInviteResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplyFriendPKInviteResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplyFriendPKInviteResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplyFriendPKInviteResult::MergeFrom(const stReplyFriendPKInviteResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplyFriendPKInviteResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplyFriendPKInviteResult::CopyFrom(const stReplyFriendPKInviteResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplyFriendPKInviteResult::IsInitialized() const {

  return true;
}

void stReplyFriendPKInviteResult::Swap(stReplyFriendPKInviteResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplyFriendPKInviteResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplyFriendPKInviteResult_descriptor_;
  metadata.reflection = stReplyFriendPKInviteResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSomeOneApplyAddFriend_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSomeOneApplyAddFriend_ProtoModID_descriptor_;
}
bool stSomeOneApplyAddFriend_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSomeOneApplyAddFriend_ProtoModID stSomeOneApplyAddFriend::ModID;
const stSomeOneApplyAddFriend_ProtoModID stSomeOneApplyAddFriend::ProtoModID_MIN;
const stSomeOneApplyAddFriend_ProtoModID stSomeOneApplyAddFriend::ProtoModID_MAX;
const int stSomeOneApplyAddFriend::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSomeOneApplyAddFriend_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSomeOneApplyAddFriend_ProtoFunID_descriptor_;
}
bool stSomeOneApplyAddFriend_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSomeOneApplyAddFriend_ProtoFunID stSomeOneApplyAddFriend::FunID;
const stSomeOneApplyAddFriend_ProtoFunID stSomeOneApplyAddFriend::ProtoFunID_MIN;
const stSomeOneApplyAddFriend_ProtoFunID stSomeOneApplyAddFriend::ProtoFunID_MAX;
const int stSomeOneApplyAddFriend::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSomeOneApplyAddFriend::kOneFieldNumber;
#endif  // !_MSC_VER

stSomeOneApplyAddFriend::stSomeOneApplyAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSomeOneApplyAddFriend::InitAsDefaultInstance() {
  one_ = const_cast< ::FriendProto::stSynApplyerInfo*>(&::FriendProto::stSynApplyerInfo::default_instance());
}

stSomeOneApplyAddFriend::stSomeOneApplyAddFriend(const stSomeOneApplyAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSomeOneApplyAddFriend::SharedCtor() {
  _cached_size_ = 0;
  one_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSomeOneApplyAddFriend::~stSomeOneApplyAddFriend() {
  SharedDtor();
}

void stSomeOneApplyAddFriend::SharedDtor() {
  if (this != default_instance_) {
    delete one_;
  }
}

void stSomeOneApplyAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSomeOneApplyAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSomeOneApplyAddFriend_descriptor_;
}

const stSomeOneApplyAddFriend& stSomeOneApplyAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stSomeOneApplyAddFriend* stSomeOneApplyAddFriend::default_instance_ = NULL;

stSomeOneApplyAddFriend* stSomeOneApplyAddFriend::New() const {
  return new stSomeOneApplyAddFriend;
}

void stSomeOneApplyAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_one()) {
      if (one_ != NULL) one_->::FriendProto::stSynApplyerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSomeOneApplyAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendProto.stSynApplyerInfo one = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_one()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSomeOneApplyAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FriendProto.stSynApplyerInfo one = 1;
  if (has_one()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->one(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSomeOneApplyAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FriendProto.stSynApplyerInfo one = 1;
  if (has_one()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->one(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSomeOneApplyAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendProto.stSynApplyerInfo one = 1;
    if (has_one()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->one());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSomeOneApplyAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSomeOneApplyAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSomeOneApplyAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSomeOneApplyAddFriend::MergeFrom(const stSomeOneApplyAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_one()) {
      mutable_one()->::FriendProto::stSynApplyerInfo::MergeFrom(from.one());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSomeOneApplyAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSomeOneApplyAddFriend::CopyFrom(const stSomeOneApplyAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSomeOneApplyAddFriend::IsInitialized() const {

  return true;
}

void stSomeOneApplyAddFriend::Swap(stSomeOneApplyAddFriend* other) {
  if (other != this) {
    std::swap(one_, other->one_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSomeOneApplyAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSomeOneApplyAddFriend_descriptor_;
  metadata.reflection = stSomeOneApplyAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryObjInfo::kCharIDFieldNumber;
const int MarryObjInfo::kNameFieldNumber;
const int MarryObjInfo::kLevelFieldNumber;
const int MarryObjInfo::kJobFieldNumber;
const int MarryObjInfo::kSexFieldNumber;
const int MarryObjInfo::kBattlePowerFieldNumber;
const int MarryObjInfo::kHeadIDFieldNumber;
const int MarryObjInfo::kBodyIDFieldNumber;
const int MarryObjInfo::kWeaponIDFieldNumber;
const int MarryObjInfo::kCloackIDFieldNumber;
const int MarryObjInfo::kWingIDFieldNumber;
const int MarryObjInfo::kShoeIDFieldNumber;
const int MarryObjInfo::kFashionHairFieldNumber;
const int MarryObjInfo::kFashionFaceFieldNumber;
const int MarryObjInfo::kFashionBodyFieldNumber;
const int MarryObjInfo::kFashionWeaponFieldNumber;
const int MarryObjInfo::kFashionShoeFieldNumber;
const int MarryObjInfo::kFashionDecorationFieldNumber;
const int MarryObjInfo::kEffectIDFieldNumber;
const int MarryObjInfo::kWingBreakLvFieldNumber;
const int MarryObjInfo::kFashionWingIDFieldNumber;
#endif  // !_MSC_VER

MarryObjInfo::MarryObjInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryObjInfo::InitAsDefaultInstance() {
}

MarryObjInfo::MarryObjInfo(const MarryObjInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryObjInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  fashionwingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryObjInfo::~MarryObjInfo() {
  SharedDtor();
}

void MarryObjInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MarryObjInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryObjInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryObjInfo_descriptor_;
}

const MarryObjInfo& MarryObjInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

MarryObjInfo* MarryObjInfo::default_instance_ = NULL;

MarryObjInfo* MarryObjInfo::New() const {
  return new MarryObjInfo;
}

void MarryObjInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    battlepower_ = 0u;
    headid_ = 0u;
    bodyid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
    fashionbody_ = 0u;
    fashionweapon_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    fashionwingid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryObjInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fashionWingID;
        break;
      }

      // optional uint32 fashionWingID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionwingid_)));
          set_has_fashionwingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryObjInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battlepower(), output);
  }

  // optional uint32 headID = 7;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->headid(), output);
  }

  // optional uint32 bodyID = 8;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->bodyid(), output);
  }

  // optional uint32 weaponID = 9;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->weaponid(), output);
  }

  // optional uint32 cloackID = 10;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->cloackid(), output);
  }

  // optional uint32 wingID = 11;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->wingid(), output);
  }

  // optional uint32 shoeID = 12;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 13;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 14;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 15;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 16;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 17;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 18;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 19;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 20;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->wingbreaklv(), output);
  }

  // optional uint32 fashionWingID = 21;
  if (has_fashionwingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->fashionwingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryObjInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battlepower(), target);
  }

  // optional uint32 headID = 7;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->headid(), target);
  }

  // optional uint32 bodyID = 8;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->bodyid(), target);
  }

  // optional uint32 weaponID = 9;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->weaponid(), target);
  }

  // optional uint32 cloackID = 10;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->cloackid(), target);
  }

  // optional uint32 wingID = 11;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->wingid(), target);
  }

  // optional uint32 shoeID = 12;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 13;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 14;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 15;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 16;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 17;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 18;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 19;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 20;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->wingbreaklv(), target);
  }

  // optional uint32 fashionWingID = 21;
  if (has_fashionwingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->fashionwingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryObjInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 battlePower = 6;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 headID = 7;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 bodyID = 8;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 weaponID = 9;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 10;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 11;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 12;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 13;
    if (has_fashionhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 14;
    if (has_fashionface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

    // optional uint32 fashionBody = 15;
    if (has_fashionbody()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

    // optional uint32 fashionWeapon = 16;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionShoe = 17;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 18;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 19;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 20;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 fashionWingID = 21;
    if (has_fashionwingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionwingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryObjInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryObjInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryObjInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryObjInfo::MergeFrom(const MarryObjInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_fashionwingid()) {
      set_fashionwingid(from.fashionwingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryObjInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryObjInfo::CopyFrom(const MarryObjInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryObjInfo::IsInitialized() const {

  return true;
}

void MarryObjInfo::Swap(MarryObjInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(fashionwingid_, other->fashionwingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryObjInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryObjInfo_descriptor_;
  metadata.reflection = MarryObjInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPropose_ProtoModID_descriptor_;
}
bool stReqPropose_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPropose_ProtoModID stReqPropose::ModID;
const stReqPropose_ProtoModID stReqPropose::ProtoModID_MIN;
const stReqPropose_ProtoModID stReqPropose::ProtoModID_MAX;
const int stReqPropose::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPropose_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPropose_ProtoFunID_descriptor_;
}
bool stReqPropose_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPropose_ProtoFunID stReqPropose::FunID;
const stReqPropose_ProtoFunID stReqPropose::ProtoFunID_MIN;
const stReqPropose_ProtoFunID stReqPropose::ProtoFunID_MAX;
const int stReqPropose::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPropose::kIdFieldNumber;
const int stReqPropose::kInfoFieldNumber;
#endif  // !_MSC_VER

stReqPropose::stReqPropose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPropose::InitAsDefaultInstance() {
  info_ = const_cast< ::FriendProto::MarryObjInfo*>(&::FriendProto::MarryObjInfo::default_instance());
}

stReqPropose::stReqPropose(const stReqPropose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPropose::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPropose::~stReqPropose() {
  SharedDtor();
}

void stReqPropose::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void stReqPropose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPropose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPropose_descriptor_;
}

const stReqPropose& stReqPropose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReqPropose* stReqPropose::default_instance_ = NULL;

stReqPropose* stReqPropose::New() const {
  return new stReqPropose;
}

void stReqPropose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::FriendProto::MarryObjInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPropose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .FriendProto.MarryObjInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPropose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .FriendProto.MarryObjInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPropose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .FriendProto.MarryObjInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPropose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .FriendProto.MarryObjInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPropose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPropose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPropose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPropose::MergeFrom(const stReqPropose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_info()) {
      mutable_info()->::FriendProto::MarryObjInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPropose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPropose::CopyFrom(const stReqPropose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPropose::IsInitialized() const {

  return true;
}

void stReqPropose::Swap(stReqPropose* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPropose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPropose_descriptor_;
  metadata.reflection = stReqPropose_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RejectMarry_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectMarry_Result_descriptor_;
}
bool RejectMarry_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RejectMarry_Result RejectMarry::RESULT_SUCCESS;
const RejectMarry_Result RejectMarry::RESULT_ERROR_FRIEND;
const RejectMarry_Result RejectMarry::RESULT_ERROR_ONLINE;
const RejectMarry_Result RejectMarry::RESULT_ERROR_SEX;
const RejectMarry_Result RejectMarry::RESULT_ERROR_MARRIED;
const RejectMarry_Result RejectMarry::RESULT_ERROR_TICK1;
const RejectMarry_Result RejectMarry::RESULT_ERROR_TICK2;
const RejectMarry_Result RejectMarry::Result_MIN;
const RejectMarry_Result RejectMarry::Result_MAX;
const int RejectMarry::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RejectMarry_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectMarry_ProtoModID_descriptor_;
}
bool RejectMarry_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RejectMarry_ProtoModID RejectMarry::ModID;
const RejectMarry_ProtoModID RejectMarry::ProtoModID_MIN;
const RejectMarry_ProtoModID RejectMarry::ProtoModID_MAX;
const int RejectMarry::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RejectMarry_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectMarry_ProtoFunID_descriptor_;
}
bool RejectMarry_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RejectMarry_ProtoFunID RejectMarry::FunID;
const RejectMarry_ProtoFunID RejectMarry::ProtoFunID_MIN;
const RejectMarry_ProtoFunID RejectMarry::ProtoFunID_MAX;
const int RejectMarry::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RejectMarry::kResultFieldNumber;
const int RejectMarry::kTick1FieldNumber;
const int RejectMarry::kTick2FieldNumber;
#endif  // !_MSC_VER

RejectMarry::RejectMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RejectMarry::InitAsDefaultInstance() {
}

RejectMarry::RejectMarry(const RejectMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RejectMarry::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  tick1_ = 0u;
  tick2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RejectMarry::~RejectMarry() {
  SharedDtor();
}

void RejectMarry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RejectMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RejectMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RejectMarry_descriptor_;
}

const RejectMarry& RejectMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

RejectMarry* RejectMarry::default_instance_ = NULL;

RejectMarry* RejectMarry::New() const {
  return new RejectMarry;
}

void RejectMarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    tick1_ = 0u;
    tick2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RejectMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendProto.RejectMarry.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::RejectMarry_Result_IsValid(value)) {
            set_result(static_cast< ::FriendProto::RejectMarry_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick1;
        break;
      }

      // optional uint32 tick1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick1_)));
          set_has_tick1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tick2;
        break;
      }

      // optional uint32 tick2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tick2_)));
          set_has_tick2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RejectMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FriendProto.RejectMarry.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 tick1 = 2;
  if (has_tick1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tick1(), output);
  }

  // optional uint32 tick2 = 3;
  if (has_tick2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tick2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RejectMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FriendProto.RejectMarry.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 tick1 = 2;
  if (has_tick1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tick1(), target);
  }

  // optional uint32 tick2 = 3;
  if (has_tick2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tick2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RejectMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendProto.RejectMarry.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 tick1 = 2;
    if (has_tick1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick1());
    }

    // optional uint32 tick2 = 3;
    if (has_tick2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tick2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RejectMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RejectMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RejectMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RejectMarry::MergeFrom(const RejectMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_tick1()) {
      set_tick1(from.tick1());
    }
    if (from.has_tick2()) {
      set_tick2(from.tick2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RejectMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RejectMarry::CopyFrom(const RejectMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RejectMarry::IsInitialized() const {

  return true;
}

void RejectMarry::Swap(RejectMarry* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(tick1_, other->tick1_);
    std::swap(tick2_, other->tick2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RejectMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RejectMarry_descriptor_;
  metadata.reflection = RejectMarry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ProposeResult_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProposeResult_Result_descriptor_;
}
bool ProposeResult_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProposeResult_Result ProposeResult::RESULT_SUCCESS;
const ProposeResult_Result ProposeResult::RESULT_REFUSE;
const ProposeResult_Result ProposeResult::Result_MIN;
const ProposeResult_Result ProposeResult::Result_MAX;
const int ProposeResult::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ProposeResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProposeResult_ProtoModID_descriptor_;
}
bool ProposeResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProposeResult_ProtoModID ProposeResult::ModID;
const ProposeResult_ProtoModID ProposeResult::ProtoModID_MIN;
const ProposeResult_ProtoModID ProposeResult::ProtoModID_MAX;
const int ProposeResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ProposeResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProposeResult_ProtoFunID_descriptor_;
}
bool ProposeResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProposeResult_ProtoFunID ProposeResult::FunID;
const ProposeResult_ProtoFunID ProposeResult::ProtoFunID_MIN;
const ProposeResult_ProtoFunID ProposeResult::ProtoFunID_MAX;
const int ProposeResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProposeResult::kResultFieldNumber;
const int ProposeResult::kInfoFieldNumber;
#endif  // !_MSC_VER

ProposeResult::ProposeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProposeResult::InitAsDefaultInstance() {
  info_ = const_cast< ::FriendProto::MarryObjInfo*>(&::FriendProto::MarryObjInfo::default_instance());
}

ProposeResult::ProposeResult(const ProposeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProposeResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProposeResult::~ProposeResult() {
  SharedDtor();
}

void ProposeResult::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ProposeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProposeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProposeResult_descriptor_;
}

const ProposeResult& ProposeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

ProposeResult* ProposeResult::default_instance_ = NULL;

ProposeResult* ProposeResult::New() const {
  return new ProposeResult;
}

void ProposeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    if (has_info()) {
      if (info_ != NULL) info_->::FriendProto::MarryObjInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProposeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendProto.ProposeResult.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::ProposeResult_Result_IsValid(value)) {
            set_result(static_cast< ::FriendProto::ProposeResult_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .FriendProto.MarryObjInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProposeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FriendProto.ProposeResult.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .FriendProto.MarryObjInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProposeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FriendProto.ProposeResult.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .FriendProto.MarryObjInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProposeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendProto.ProposeResult.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .FriendProto.MarryObjInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProposeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProposeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProposeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProposeResult::MergeFrom(const ProposeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_info()) {
      mutable_info()->::FriendProto::MarryObjInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProposeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProposeResult::CopyFrom(const ProposeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProposeResult::IsInitialized() const {

  return true;
}

void ProposeResult::Swap(ProposeResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProposeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProposeResult_descriptor_;
  metadata.reflection = ProposeResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeMarry_Result_descriptor_;
}
bool stReqAgreeMarry_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeMarry_Result stReqAgreeMarry::RESULT_AGREE;
const stReqAgreeMarry_Result stReqAgreeMarry::RESULT_REFUSE;
const stReqAgreeMarry_Result stReqAgreeMarry::Result_MIN;
const stReqAgreeMarry_Result stReqAgreeMarry::Result_MAX;
const int stReqAgreeMarry::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeMarry_ProtoModID_descriptor_;
}
bool stReqAgreeMarry_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeMarry_ProtoModID stReqAgreeMarry::ModID;
const stReqAgreeMarry_ProtoModID stReqAgreeMarry::ProtoModID_MIN;
const stReqAgreeMarry_ProtoModID stReqAgreeMarry::ProtoModID_MAX;
const int stReqAgreeMarry::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAgreeMarry_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeMarry_ProtoFunID_descriptor_;
}
bool stReqAgreeMarry_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAgreeMarry_ProtoFunID stReqAgreeMarry::FunID;
const stReqAgreeMarry_ProtoFunID stReqAgreeMarry::ProtoFunID_MIN;
const stReqAgreeMarry_ProtoFunID stReqAgreeMarry::ProtoFunID_MAX;
const int stReqAgreeMarry::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAgreeMarry::kResultFieldNumber;
const int stReqAgreeMarry::kIdFieldNumber;
#endif  // !_MSC_VER

stReqAgreeMarry::stReqAgreeMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAgreeMarry::InitAsDefaultInstance() {
}

stReqAgreeMarry::stReqAgreeMarry(const stReqAgreeMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAgreeMarry::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAgreeMarry::~stReqAgreeMarry() {
  SharedDtor();
}

void stReqAgreeMarry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAgreeMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAgreeMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAgreeMarry_descriptor_;
}

const stReqAgreeMarry& stReqAgreeMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReqAgreeMarry* stReqAgreeMarry::default_instance_ = NULL;

stReqAgreeMarry* stReqAgreeMarry::New() const {
  return new stReqAgreeMarry;
}

void stReqAgreeMarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAgreeMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendProto.stReqAgreeMarry.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::stReqAgreeMarry_Result_IsValid(value)) {
            set_result(static_cast< ::FriendProto::stReqAgreeMarry_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAgreeMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FriendProto.stReqAgreeMarry.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAgreeMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FriendProto.stReqAgreeMarry.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAgreeMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendProto.stReqAgreeMarry.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAgreeMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAgreeMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAgreeMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAgreeMarry::MergeFrom(const stReqAgreeMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAgreeMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAgreeMarry::CopyFrom(const stReqAgreeMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAgreeMarry::IsInitialized() const {

  return true;
}

void stReqAgreeMarry::Swap(stReqAgreeMarry* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAgreeMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAgreeMarry_descriptor_;
  metadata.reflection = stReqAgreeMarry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCancelMarry_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelMarry_ProtoModID_descriptor_;
}
bool stReqCancelMarry_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCancelMarry_ProtoModID stReqCancelMarry::ModID;
const stReqCancelMarry_ProtoModID stReqCancelMarry::ProtoModID_MIN;
const stReqCancelMarry_ProtoModID stReqCancelMarry::ProtoModID_MAX;
const int stReqCancelMarry::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCancelMarry_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelMarry_ProtoFunID_descriptor_;
}
bool stReqCancelMarry_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCancelMarry_ProtoFunID stReqCancelMarry::FunID;
const stReqCancelMarry_ProtoFunID stReqCancelMarry::ProtoFunID_MIN;
const stReqCancelMarry_ProtoFunID stReqCancelMarry::ProtoFunID_MAX;
const int stReqCancelMarry::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCancelMarry::kIdFieldNumber;
#endif  // !_MSC_VER

stReqCancelMarry::stReqCancelMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCancelMarry::InitAsDefaultInstance() {
}

stReqCancelMarry::stReqCancelMarry(const stReqCancelMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCancelMarry::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCancelMarry::~stReqCancelMarry() {
  SharedDtor();
}

void stReqCancelMarry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCancelMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCancelMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelMarry_descriptor_;
}

const stReqCancelMarry& stReqCancelMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

stReqCancelMarry* stReqCancelMarry::default_instance_ = NULL;

stReqCancelMarry* stReqCancelMarry::New() const {
  return new stReqCancelMarry;
}

void stReqCancelMarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCancelMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCancelMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCancelMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCancelMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCancelMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCancelMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCancelMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCancelMarry::MergeFrom(const stReqCancelMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCancelMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCancelMarry::CopyFrom(const stReqCancelMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCancelMarry::IsInitialized() const {

  return true;
}

void stReqCancelMarry::Swap(stReqCancelMarry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCancelMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCancelMarry_descriptor_;
  metadata.reflection = stReqCancelMarry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyCancelMarry_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCancelMarry_ProtoModID_descriptor_;
}
bool NotifyCancelMarry_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyCancelMarry_ProtoModID NotifyCancelMarry::ModID;
const NotifyCancelMarry_ProtoModID NotifyCancelMarry::ProtoModID_MIN;
const NotifyCancelMarry_ProtoModID NotifyCancelMarry::ProtoModID_MAX;
const int NotifyCancelMarry::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NotifyCancelMarry_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCancelMarry_ProtoFunID_descriptor_;
}
bool NotifyCancelMarry_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyCancelMarry_ProtoFunID NotifyCancelMarry::FunID;
const NotifyCancelMarry_ProtoFunID NotifyCancelMarry::ProtoFunID_MIN;
const NotifyCancelMarry_ProtoFunID NotifyCancelMarry::ProtoFunID_MAX;
const int NotifyCancelMarry::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyCancelMarry::kIdFieldNumber;
#endif  // !_MSC_VER

NotifyCancelMarry::NotifyCancelMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyCancelMarry::InitAsDefaultInstance() {
}

NotifyCancelMarry::NotifyCancelMarry(const NotifyCancelMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyCancelMarry::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyCancelMarry::~NotifyCancelMarry() {
  SharedDtor();
}

void NotifyCancelMarry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyCancelMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyCancelMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyCancelMarry_descriptor_;
}

const NotifyCancelMarry& NotifyCancelMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

NotifyCancelMarry* NotifyCancelMarry::default_instance_ = NULL;

NotifyCancelMarry* NotifyCancelMarry::New() const {
  return new NotifyCancelMarry;
}

void NotifyCancelMarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyCancelMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyCancelMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyCancelMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyCancelMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyCancelMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyCancelMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyCancelMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyCancelMarry::MergeFrom(const NotifyCancelMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyCancelMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyCancelMarry::CopyFrom(const NotifyCancelMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyCancelMarry::IsInitialized() const {

  return true;
}

void NotifyCancelMarry::Swap(NotifyCancelMarry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyCancelMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyCancelMarry_descriptor_;
  metadata.reflection = NotifyCancelMarry_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* NotifyAgree_Result_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAgree_Result_descriptor_;
}
bool NotifyAgree_Result_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyAgree_Result NotifyAgree::RESULT_SUCCESS;
const NotifyAgree_Result NotifyAgree::RESULT_ONLINE;
const NotifyAgree_Result NotifyAgree::RESULT_CANCEL;
const NotifyAgree_Result NotifyAgree::RESULT_WEDDING;
const NotifyAgree_Result NotifyAgree::Result_MIN;
const NotifyAgree_Result NotifyAgree::Result_MAX;
const int NotifyAgree::Result_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NotifyAgree_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAgree_ProtoModID_descriptor_;
}
bool NotifyAgree_ProtoModID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyAgree_ProtoModID NotifyAgree::ModID;
const NotifyAgree_ProtoModID NotifyAgree::ProtoModID_MIN;
const NotifyAgree_ProtoModID NotifyAgree::ProtoModID_MAX;
const int NotifyAgree::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* NotifyAgree_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAgree_ProtoFunID_descriptor_;
}
bool NotifyAgree_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NotifyAgree_ProtoFunID NotifyAgree::FunID;
const NotifyAgree_ProtoFunID NotifyAgree::ProtoFunID_MIN;
const NotifyAgree_ProtoFunID NotifyAgree::ProtoFunID_MAX;
const int NotifyAgree::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NotifyAgree::kResultFieldNumber;
#endif  // !_MSC_VER

NotifyAgree::NotifyAgree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyAgree::InitAsDefaultInstance() {
}

NotifyAgree::NotifyAgree(const NotifyAgree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyAgree::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAgree::~NotifyAgree() {
  SharedDtor();
}

void NotifyAgree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAgree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAgree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAgree_descriptor_;
}

const NotifyAgree& NotifyAgree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2eproto();
  return *default_instance_;
}

NotifyAgree* NotifyAgree::default_instance_ = NULL;

NotifyAgree* NotifyAgree::New() const {
  return new NotifyAgree;
}

void NotifyAgree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAgree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .FriendProto.NotifyAgree.Result result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::FriendProto::NotifyAgree_Result_IsValid(value)) {
            set_result(static_cast< ::FriendProto::NotifyAgree_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyAgree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .FriendProto.NotifyAgree.Result result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyAgree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .FriendProto.NotifyAgree.Result result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyAgree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .FriendProto.NotifyAgree.Result result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAgree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAgree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAgree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAgree::MergeFrom(const NotifyAgree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAgree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAgree::CopyFrom(const NotifyAgree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAgree::IsInitialized() const {

  return true;
}

void NotifyAgree::Swap(NotifyAgree* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAgree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAgree_descriptor_;
  metadata.reflection = NotifyAgree_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace FriendProto

// @@protoc_insertion_point(global_scope)
