// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PubGame.proto

#ifndef PROTOBUF_PubGame_2eproto__INCLUDED
#define PROTOBUF_PubGame_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PubGame {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PubGame_2eproto();
void protobuf_AssignDesc_PubGame_2eproto();
void protobuf_ShutdownFile_PubGame_2eproto();

class stLoginPubGame;
class stTitleToPub;
class stRoleInfo;
class stNormalForwardPub;
class stRoleLogout;
class stRealTimeTeamMatch;
class stPubForwardNormal;
class stPubForwardGate;
class stNotifyUserOnPub;
class stPubForwardGlobal;
class stNotifyOne2OneResult;
class stNotifyRealTimeResult;
class stSaveRoleInfo;
class stAddRegisterNum;
class stHeroLeagueMatch;
class stHeroLeagueCancelMatch;
class stPubRoleInfo;
class stNotifyHeroLeagueResult;
class stSynPubRoleList;
class stSynRoleInfo;
class stTeam;
class stSynPubRoleListResult;
class stReqMenberInfo;
class stSynChampionInfo;
class stReqSynChampionInfo;
class stGloryUserPart;
class stGloryUserDetail;
class stGloryUser;
class stEnterResBattle;
class stSynResBattleUserData;
class stSynResBattleTop50;
class stSynResBattleKing;
class stBroadResBattleInvite;
class stReplyInviteResBattle;
class stResBattleResChange;
class stSendResBattle2Pub;

enum stLoginPubGame_ProtoModID {
  stLoginPubGame_ProtoModID_ModID = 2
};
bool stLoginPubGame_ProtoModID_IsValid(int value);
const stLoginPubGame_ProtoModID stLoginPubGame_ProtoModID_ProtoModID_MIN = stLoginPubGame_ProtoModID_ModID;
const stLoginPubGame_ProtoModID stLoginPubGame_ProtoModID_ProtoModID_MAX = stLoginPubGame_ProtoModID_ModID;
const int stLoginPubGame_ProtoModID_ProtoModID_ARRAYSIZE = stLoginPubGame_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginPubGame_ProtoModID_descriptor();
inline const ::std::string& stLoginPubGame_ProtoModID_Name(stLoginPubGame_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginPubGame_ProtoModID_descriptor(), value);
}
inline bool stLoginPubGame_ProtoModID_Parse(
    const ::std::string& name, stLoginPubGame_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginPubGame_ProtoModID>(
    stLoginPubGame_ProtoModID_descriptor(), name, value);
}
enum stLoginPubGame_ProtoFunID {
  stLoginPubGame_ProtoFunID_FunID = 1
};
bool stLoginPubGame_ProtoFunID_IsValid(int value);
const stLoginPubGame_ProtoFunID stLoginPubGame_ProtoFunID_ProtoFunID_MIN = stLoginPubGame_ProtoFunID_FunID;
const stLoginPubGame_ProtoFunID stLoginPubGame_ProtoFunID_ProtoFunID_MAX = stLoginPubGame_ProtoFunID_FunID;
const int stLoginPubGame_ProtoFunID_ProtoFunID_ARRAYSIZE = stLoginPubGame_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginPubGame_ProtoFunID_descriptor();
inline const ::std::string& stLoginPubGame_ProtoFunID_Name(stLoginPubGame_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginPubGame_ProtoFunID_descriptor(), value);
}
inline bool stLoginPubGame_ProtoFunID_Parse(
    const ::std::string& name, stLoginPubGame_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginPubGame_ProtoFunID>(
    stLoginPubGame_ProtoFunID_descriptor(), name, value);
}
enum stRoleInfo_ProtoModID {
  stRoleInfo_ProtoModID_ModID = 2
};
bool stRoleInfo_ProtoModID_IsValid(int value);
const stRoleInfo_ProtoModID stRoleInfo_ProtoModID_ProtoModID_MIN = stRoleInfo_ProtoModID_ModID;
const stRoleInfo_ProtoModID stRoleInfo_ProtoModID_ProtoModID_MAX = stRoleInfo_ProtoModID_ModID;
const int stRoleInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRoleInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoModID_descriptor();
inline const ::std::string& stRoleInfo_ProtoModID_Name(stRoleInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRoleInfo_ProtoModID_descriptor(), value);
}
inline bool stRoleInfo_ProtoModID_Parse(
    const ::std::string& name, stRoleInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRoleInfo_ProtoModID>(
    stRoleInfo_ProtoModID_descriptor(), name, value);
}
enum stRoleInfo_ProtoFunID {
  stRoleInfo_ProtoFunID_FunID = 2
};
bool stRoleInfo_ProtoFunID_IsValid(int value);
const stRoleInfo_ProtoFunID stRoleInfo_ProtoFunID_ProtoFunID_MIN = stRoleInfo_ProtoFunID_FunID;
const stRoleInfo_ProtoFunID stRoleInfo_ProtoFunID_ProtoFunID_MAX = stRoleInfo_ProtoFunID_FunID;
const int stRoleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRoleInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoFunID_descriptor();
inline const ::std::string& stRoleInfo_ProtoFunID_Name(stRoleInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRoleInfo_ProtoFunID_descriptor(), value);
}
inline bool stRoleInfo_ProtoFunID_Parse(
    const ::std::string& name, stRoleInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRoleInfo_ProtoFunID>(
    stRoleInfo_ProtoFunID_descriptor(), name, value);
}
enum stNormalForwardPub_ProtoModID {
  stNormalForwardPub_ProtoModID_ModID = 2
};
bool stNormalForwardPub_ProtoModID_IsValid(int value);
const stNormalForwardPub_ProtoModID stNormalForwardPub_ProtoModID_ProtoModID_MIN = stNormalForwardPub_ProtoModID_ModID;
const stNormalForwardPub_ProtoModID stNormalForwardPub_ProtoModID_ProtoModID_MAX = stNormalForwardPub_ProtoModID_ModID;
const int stNormalForwardPub_ProtoModID_ProtoModID_ARRAYSIZE = stNormalForwardPub_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNormalForwardPub_ProtoModID_descriptor();
inline const ::std::string& stNormalForwardPub_ProtoModID_Name(stNormalForwardPub_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNormalForwardPub_ProtoModID_descriptor(), value);
}
inline bool stNormalForwardPub_ProtoModID_Parse(
    const ::std::string& name, stNormalForwardPub_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNormalForwardPub_ProtoModID>(
    stNormalForwardPub_ProtoModID_descriptor(), name, value);
}
enum stNormalForwardPub_ProtoFunID {
  stNormalForwardPub_ProtoFunID_FunID = 3
};
bool stNormalForwardPub_ProtoFunID_IsValid(int value);
const stNormalForwardPub_ProtoFunID stNormalForwardPub_ProtoFunID_ProtoFunID_MIN = stNormalForwardPub_ProtoFunID_FunID;
const stNormalForwardPub_ProtoFunID stNormalForwardPub_ProtoFunID_ProtoFunID_MAX = stNormalForwardPub_ProtoFunID_FunID;
const int stNormalForwardPub_ProtoFunID_ProtoFunID_ARRAYSIZE = stNormalForwardPub_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNormalForwardPub_ProtoFunID_descriptor();
inline const ::std::string& stNormalForwardPub_ProtoFunID_Name(stNormalForwardPub_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNormalForwardPub_ProtoFunID_descriptor(), value);
}
inline bool stNormalForwardPub_ProtoFunID_Parse(
    const ::std::string& name, stNormalForwardPub_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNormalForwardPub_ProtoFunID>(
    stNormalForwardPub_ProtoFunID_descriptor(), name, value);
}
enum stRoleLogout_ProtoModID {
  stRoleLogout_ProtoModID_ModID = 2
};
bool stRoleLogout_ProtoModID_IsValid(int value);
const stRoleLogout_ProtoModID stRoleLogout_ProtoModID_ProtoModID_MIN = stRoleLogout_ProtoModID_ModID;
const stRoleLogout_ProtoModID stRoleLogout_ProtoModID_ProtoModID_MAX = stRoleLogout_ProtoModID_ModID;
const int stRoleLogout_ProtoModID_ProtoModID_ARRAYSIZE = stRoleLogout_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRoleLogout_ProtoModID_descriptor();
inline const ::std::string& stRoleLogout_ProtoModID_Name(stRoleLogout_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRoleLogout_ProtoModID_descriptor(), value);
}
inline bool stRoleLogout_ProtoModID_Parse(
    const ::std::string& name, stRoleLogout_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRoleLogout_ProtoModID>(
    stRoleLogout_ProtoModID_descriptor(), name, value);
}
enum stRoleLogout_ProtoFunID {
  stRoleLogout_ProtoFunID_FunID = 4
};
bool stRoleLogout_ProtoFunID_IsValid(int value);
const stRoleLogout_ProtoFunID stRoleLogout_ProtoFunID_ProtoFunID_MIN = stRoleLogout_ProtoFunID_FunID;
const stRoleLogout_ProtoFunID stRoleLogout_ProtoFunID_ProtoFunID_MAX = stRoleLogout_ProtoFunID_FunID;
const int stRoleLogout_ProtoFunID_ProtoFunID_ARRAYSIZE = stRoleLogout_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRoleLogout_ProtoFunID_descriptor();
inline const ::std::string& stRoleLogout_ProtoFunID_Name(stRoleLogout_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRoleLogout_ProtoFunID_descriptor(), value);
}
inline bool stRoleLogout_ProtoFunID_Parse(
    const ::std::string& name, stRoleLogout_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRoleLogout_ProtoFunID>(
    stRoleLogout_ProtoFunID_descriptor(), name, value);
}
enum stRealTimeTeamMatch_ProtoModID {
  stRealTimeTeamMatch_ProtoModID_ModID = 2
};
bool stRealTimeTeamMatch_ProtoModID_IsValid(int value);
const stRealTimeTeamMatch_ProtoModID stRealTimeTeamMatch_ProtoModID_ProtoModID_MIN = stRealTimeTeamMatch_ProtoModID_ModID;
const stRealTimeTeamMatch_ProtoModID stRealTimeTeamMatch_ProtoModID_ProtoModID_MAX = stRealTimeTeamMatch_ProtoModID_ModID;
const int stRealTimeTeamMatch_ProtoModID_ProtoModID_ARRAYSIZE = stRealTimeTeamMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoModID_descriptor();
inline const ::std::string& stRealTimeTeamMatch_ProtoModID_Name(stRealTimeTeamMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeTeamMatch_ProtoModID_descriptor(), value);
}
inline bool stRealTimeTeamMatch_ProtoModID_Parse(
    const ::std::string& name, stRealTimeTeamMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeTeamMatch_ProtoModID>(
    stRealTimeTeamMatch_ProtoModID_descriptor(), name, value);
}
enum stRealTimeTeamMatch_ProtoFunID {
  stRealTimeTeamMatch_ProtoFunID_FunID = 5
};
bool stRealTimeTeamMatch_ProtoFunID_IsValid(int value);
const stRealTimeTeamMatch_ProtoFunID stRealTimeTeamMatch_ProtoFunID_ProtoFunID_MIN = stRealTimeTeamMatch_ProtoFunID_FunID;
const stRealTimeTeamMatch_ProtoFunID stRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX = stRealTimeTeamMatch_ProtoFunID_FunID;
const int stRealTimeTeamMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoFunID_descriptor();
inline const ::std::string& stRealTimeTeamMatch_ProtoFunID_Name(stRealTimeTeamMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeTeamMatch_ProtoFunID_descriptor(), value);
}
inline bool stRealTimeTeamMatch_ProtoFunID_Parse(
    const ::std::string& name, stRealTimeTeamMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeTeamMatch_ProtoFunID>(
    stRealTimeTeamMatch_ProtoFunID_descriptor(), name, value);
}
enum stPubForwardNormal_ProtoModID {
  stPubForwardNormal_ProtoModID_ModID = 3
};
bool stPubForwardNormal_ProtoModID_IsValid(int value);
const stPubForwardNormal_ProtoModID stPubForwardNormal_ProtoModID_ProtoModID_MIN = stPubForwardNormal_ProtoModID_ModID;
const stPubForwardNormal_ProtoModID stPubForwardNormal_ProtoModID_ProtoModID_MAX = stPubForwardNormal_ProtoModID_ModID;
const int stPubForwardNormal_ProtoModID_ProtoModID_ARRAYSIZE = stPubForwardNormal_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPubForwardNormal_ProtoModID_descriptor();
inline const ::std::string& stPubForwardNormal_ProtoModID_Name(stPubForwardNormal_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPubForwardNormal_ProtoModID_descriptor(), value);
}
inline bool stPubForwardNormal_ProtoModID_Parse(
    const ::std::string& name, stPubForwardNormal_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPubForwardNormal_ProtoModID>(
    stPubForwardNormal_ProtoModID_descriptor(), name, value);
}
enum stPubForwardNormal_ProtoFunID {
  stPubForwardNormal_ProtoFunID_FunID = 1
};
bool stPubForwardNormal_ProtoFunID_IsValid(int value);
const stPubForwardNormal_ProtoFunID stPubForwardNormal_ProtoFunID_ProtoFunID_MIN = stPubForwardNormal_ProtoFunID_FunID;
const stPubForwardNormal_ProtoFunID stPubForwardNormal_ProtoFunID_ProtoFunID_MAX = stPubForwardNormal_ProtoFunID_FunID;
const int stPubForwardNormal_ProtoFunID_ProtoFunID_ARRAYSIZE = stPubForwardNormal_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPubForwardNormal_ProtoFunID_descriptor();
inline const ::std::string& stPubForwardNormal_ProtoFunID_Name(stPubForwardNormal_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPubForwardNormal_ProtoFunID_descriptor(), value);
}
inline bool stPubForwardNormal_ProtoFunID_Parse(
    const ::std::string& name, stPubForwardNormal_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPubForwardNormal_ProtoFunID>(
    stPubForwardNormal_ProtoFunID_descriptor(), name, value);
}
enum stPubForwardGate_ProtoModID {
  stPubForwardGate_ProtoModID_ModID = 3
};
bool stPubForwardGate_ProtoModID_IsValid(int value);
const stPubForwardGate_ProtoModID stPubForwardGate_ProtoModID_ProtoModID_MIN = stPubForwardGate_ProtoModID_ModID;
const stPubForwardGate_ProtoModID stPubForwardGate_ProtoModID_ProtoModID_MAX = stPubForwardGate_ProtoModID_ModID;
const int stPubForwardGate_ProtoModID_ProtoModID_ARRAYSIZE = stPubForwardGate_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPubForwardGate_ProtoModID_descriptor();
inline const ::std::string& stPubForwardGate_ProtoModID_Name(stPubForwardGate_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPubForwardGate_ProtoModID_descriptor(), value);
}
inline bool stPubForwardGate_ProtoModID_Parse(
    const ::std::string& name, stPubForwardGate_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPubForwardGate_ProtoModID>(
    stPubForwardGate_ProtoModID_descriptor(), name, value);
}
enum stPubForwardGate_ProtoFunID {
  stPubForwardGate_ProtoFunID_FunID = 2
};
bool stPubForwardGate_ProtoFunID_IsValid(int value);
const stPubForwardGate_ProtoFunID stPubForwardGate_ProtoFunID_ProtoFunID_MIN = stPubForwardGate_ProtoFunID_FunID;
const stPubForwardGate_ProtoFunID stPubForwardGate_ProtoFunID_ProtoFunID_MAX = stPubForwardGate_ProtoFunID_FunID;
const int stPubForwardGate_ProtoFunID_ProtoFunID_ARRAYSIZE = stPubForwardGate_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPubForwardGate_ProtoFunID_descriptor();
inline const ::std::string& stPubForwardGate_ProtoFunID_Name(stPubForwardGate_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPubForwardGate_ProtoFunID_descriptor(), value);
}
inline bool stPubForwardGate_ProtoFunID_Parse(
    const ::std::string& name, stPubForwardGate_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPubForwardGate_ProtoFunID>(
    stPubForwardGate_ProtoFunID_descriptor(), name, value);
}
enum stNotifyUserOnPub_ProtoModID {
  stNotifyUserOnPub_ProtoModID_ModID = 3
};
bool stNotifyUserOnPub_ProtoModID_IsValid(int value);
const stNotifyUserOnPub_ProtoModID stNotifyUserOnPub_ProtoModID_ProtoModID_MIN = stNotifyUserOnPub_ProtoModID_ModID;
const stNotifyUserOnPub_ProtoModID stNotifyUserOnPub_ProtoModID_ProtoModID_MAX = stNotifyUserOnPub_ProtoModID_ModID;
const int stNotifyUserOnPub_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyUserOnPub_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyUserOnPub_ProtoModID_descriptor();
inline const ::std::string& stNotifyUserOnPub_ProtoModID_Name(stNotifyUserOnPub_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyUserOnPub_ProtoModID_descriptor(), value);
}
inline bool stNotifyUserOnPub_ProtoModID_Parse(
    const ::std::string& name, stNotifyUserOnPub_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyUserOnPub_ProtoModID>(
    stNotifyUserOnPub_ProtoModID_descriptor(), name, value);
}
enum stNotifyUserOnPub_ProtoFunID {
  stNotifyUserOnPub_ProtoFunID_FunID = 3
};
bool stNotifyUserOnPub_ProtoFunID_IsValid(int value);
const stNotifyUserOnPub_ProtoFunID stNotifyUserOnPub_ProtoFunID_ProtoFunID_MIN = stNotifyUserOnPub_ProtoFunID_FunID;
const stNotifyUserOnPub_ProtoFunID stNotifyUserOnPub_ProtoFunID_ProtoFunID_MAX = stNotifyUserOnPub_ProtoFunID_FunID;
const int stNotifyUserOnPub_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyUserOnPub_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyUserOnPub_ProtoFunID_descriptor();
inline const ::std::string& stNotifyUserOnPub_ProtoFunID_Name(stNotifyUserOnPub_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyUserOnPub_ProtoFunID_descriptor(), value);
}
inline bool stNotifyUserOnPub_ProtoFunID_Parse(
    const ::std::string& name, stNotifyUserOnPub_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyUserOnPub_ProtoFunID>(
    stNotifyUserOnPub_ProtoFunID_descriptor(), name, value);
}
enum stPubForwardGlobal_ProtoModID {
  stPubForwardGlobal_ProtoModID_ModID = 3
};
bool stPubForwardGlobal_ProtoModID_IsValid(int value);
const stPubForwardGlobal_ProtoModID stPubForwardGlobal_ProtoModID_ProtoModID_MIN = stPubForwardGlobal_ProtoModID_ModID;
const stPubForwardGlobal_ProtoModID stPubForwardGlobal_ProtoModID_ProtoModID_MAX = stPubForwardGlobal_ProtoModID_ModID;
const int stPubForwardGlobal_ProtoModID_ProtoModID_ARRAYSIZE = stPubForwardGlobal_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPubForwardGlobal_ProtoModID_descriptor();
inline const ::std::string& stPubForwardGlobal_ProtoModID_Name(stPubForwardGlobal_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPubForwardGlobal_ProtoModID_descriptor(), value);
}
inline bool stPubForwardGlobal_ProtoModID_Parse(
    const ::std::string& name, stPubForwardGlobal_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPubForwardGlobal_ProtoModID>(
    stPubForwardGlobal_ProtoModID_descriptor(), name, value);
}
enum stPubForwardGlobal_ProtoFunID {
  stPubForwardGlobal_ProtoFunID_FunID = 4
};
bool stPubForwardGlobal_ProtoFunID_IsValid(int value);
const stPubForwardGlobal_ProtoFunID stPubForwardGlobal_ProtoFunID_ProtoFunID_MIN = stPubForwardGlobal_ProtoFunID_FunID;
const stPubForwardGlobal_ProtoFunID stPubForwardGlobal_ProtoFunID_ProtoFunID_MAX = stPubForwardGlobal_ProtoFunID_FunID;
const int stPubForwardGlobal_ProtoFunID_ProtoFunID_ARRAYSIZE = stPubForwardGlobal_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPubForwardGlobal_ProtoFunID_descriptor();
inline const ::std::string& stPubForwardGlobal_ProtoFunID_Name(stPubForwardGlobal_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPubForwardGlobal_ProtoFunID_descriptor(), value);
}
inline bool stPubForwardGlobal_ProtoFunID_Parse(
    const ::std::string& name, stPubForwardGlobal_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPubForwardGlobal_ProtoFunID>(
    stPubForwardGlobal_ProtoFunID_descriptor(), name, value);
}
enum stNotifyOne2OneResult_ProtoModID {
  stNotifyOne2OneResult_ProtoModID_ModID = 3
};
bool stNotifyOne2OneResult_ProtoModID_IsValid(int value);
const stNotifyOne2OneResult_ProtoModID stNotifyOne2OneResult_ProtoModID_ProtoModID_MIN = stNotifyOne2OneResult_ProtoModID_ModID;
const stNotifyOne2OneResult_ProtoModID stNotifyOne2OneResult_ProtoModID_ProtoModID_MAX = stNotifyOne2OneResult_ProtoModID_ModID;
const int stNotifyOne2OneResult_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyOne2OneResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyOne2OneResult_ProtoModID_descriptor();
inline const ::std::string& stNotifyOne2OneResult_ProtoModID_Name(stNotifyOne2OneResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyOne2OneResult_ProtoModID_descriptor(), value);
}
inline bool stNotifyOne2OneResult_ProtoModID_Parse(
    const ::std::string& name, stNotifyOne2OneResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyOne2OneResult_ProtoModID>(
    stNotifyOne2OneResult_ProtoModID_descriptor(), name, value);
}
enum stNotifyOne2OneResult_ProtoFunID {
  stNotifyOne2OneResult_ProtoFunID_FunID = 5
};
bool stNotifyOne2OneResult_ProtoFunID_IsValid(int value);
const stNotifyOne2OneResult_ProtoFunID stNotifyOne2OneResult_ProtoFunID_ProtoFunID_MIN = stNotifyOne2OneResult_ProtoFunID_FunID;
const stNotifyOne2OneResult_ProtoFunID stNotifyOne2OneResult_ProtoFunID_ProtoFunID_MAX = stNotifyOne2OneResult_ProtoFunID_FunID;
const int stNotifyOne2OneResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyOne2OneResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyOne2OneResult_ProtoFunID_descriptor();
inline const ::std::string& stNotifyOne2OneResult_ProtoFunID_Name(stNotifyOne2OneResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyOne2OneResult_ProtoFunID_descriptor(), value);
}
inline bool stNotifyOne2OneResult_ProtoFunID_Parse(
    const ::std::string& name, stNotifyOne2OneResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyOne2OneResult_ProtoFunID>(
    stNotifyOne2OneResult_ProtoFunID_descriptor(), name, value);
}
enum stNotifyRealTimeResult_ProtoModID {
  stNotifyRealTimeResult_ProtoModID_ModID = 3
};
bool stNotifyRealTimeResult_ProtoModID_IsValid(int value);
const stNotifyRealTimeResult_ProtoModID stNotifyRealTimeResult_ProtoModID_ProtoModID_MIN = stNotifyRealTimeResult_ProtoModID_ModID;
const stNotifyRealTimeResult_ProtoModID stNotifyRealTimeResult_ProtoModID_ProtoModID_MAX = stNotifyRealTimeResult_ProtoModID_ModID;
const int stNotifyRealTimeResult_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyRealTimeResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyRealTimeResult_ProtoModID_descriptor();
inline const ::std::string& stNotifyRealTimeResult_ProtoModID_Name(stNotifyRealTimeResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyRealTimeResult_ProtoModID_descriptor(), value);
}
inline bool stNotifyRealTimeResult_ProtoModID_Parse(
    const ::std::string& name, stNotifyRealTimeResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyRealTimeResult_ProtoModID>(
    stNotifyRealTimeResult_ProtoModID_descriptor(), name, value);
}
enum stNotifyRealTimeResult_ProtoFunID {
  stNotifyRealTimeResult_ProtoFunID_FunID = 6
};
bool stNotifyRealTimeResult_ProtoFunID_IsValid(int value);
const stNotifyRealTimeResult_ProtoFunID stNotifyRealTimeResult_ProtoFunID_ProtoFunID_MIN = stNotifyRealTimeResult_ProtoFunID_FunID;
const stNotifyRealTimeResult_ProtoFunID stNotifyRealTimeResult_ProtoFunID_ProtoFunID_MAX = stNotifyRealTimeResult_ProtoFunID_FunID;
const int stNotifyRealTimeResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyRealTimeResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyRealTimeResult_ProtoFunID_descriptor();
inline const ::std::string& stNotifyRealTimeResult_ProtoFunID_Name(stNotifyRealTimeResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyRealTimeResult_ProtoFunID_descriptor(), value);
}
inline bool stNotifyRealTimeResult_ProtoFunID_Parse(
    const ::std::string& name, stNotifyRealTimeResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyRealTimeResult_ProtoFunID>(
    stNotifyRealTimeResult_ProtoFunID_descriptor(), name, value);
}
enum stSaveRoleInfo_ProtoModID {
  stSaveRoleInfo_ProtoModID_ModID = 2
};
bool stSaveRoleInfo_ProtoModID_IsValid(int value);
const stSaveRoleInfo_ProtoModID stSaveRoleInfo_ProtoModID_ProtoModID_MIN = stSaveRoleInfo_ProtoModID_ModID;
const stSaveRoleInfo_ProtoModID stSaveRoleInfo_ProtoModID_ProtoModID_MAX = stSaveRoleInfo_ProtoModID_ModID;
const int stSaveRoleInfo_ProtoModID_ProtoModID_ARRAYSIZE = stSaveRoleInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoModID_descriptor();
inline const ::std::string& stSaveRoleInfo_ProtoModID_Name(stSaveRoleInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSaveRoleInfo_ProtoModID_descriptor(), value);
}
inline bool stSaveRoleInfo_ProtoModID_Parse(
    const ::std::string& name, stSaveRoleInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSaveRoleInfo_ProtoModID>(
    stSaveRoleInfo_ProtoModID_descriptor(), name, value);
}
enum stSaveRoleInfo_ProtoFunID {
  stSaveRoleInfo_ProtoFunID_FunID = 7
};
bool stSaveRoleInfo_ProtoFunID_IsValid(int value);
const stSaveRoleInfo_ProtoFunID stSaveRoleInfo_ProtoFunID_ProtoFunID_MIN = stSaveRoleInfo_ProtoFunID_FunID;
const stSaveRoleInfo_ProtoFunID stSaveRoleInfo_ProtoFunID_ProtoFunID_MAX = stSaveRoleInfo_ProtoFunID_FunID;
const int stSaveRoleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stSaveRoleInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoFunID_descriptor();
inline const ::std::string& stSaveRoleInfo_ProtoFunID_Name(stSaveRoleInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSaveRoleInfo_ProtoFunID_descriptor(), value);
}
inline bool stSaveRoleInfo_ProtoFunID_Parse(
    const ::std::string& name, stSaveRoleInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSaveRoleInfo_ProtoFunID>(
    stSaveRoleInfo_ProtoFunID_descriptor(), name, value);
}
enum stAddRegisterNum_ProtoModID {
  stAddRegisterNum_ProtoModID_ModID = 3
};
bool stAddRegisterNum_ProtoModID_IsValid(int value);
const stAddRegisterNum_ProtoModID stAddRegisterNum_ProtoModID_ProtoModID_MIN = stAddRegisterNum_ProtoModID_ModID;
const stAddRegisterNum_ProtoModID stAddRegisterNum_ProtoModID_ProtoModID_MAX = stAddRegisterNum_ProtoModID_ModID;
const int stAddRegisterNum_ProtoModID_ProtoModID_ARRAYSIZE = stAddRegisterNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddRegisterNum_ProtoModID_descriptor();
inline const ::std::string& stAddRegisterNum_ProtoModID_Name(stAddRegisterNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddRegisterNum_ProtoModID_descriptor(), value);
}
inline bool stAddRegisterNum_ProtoModID_Parse(
    const ::std::string& name, stAddRegisterNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddRegisterNum_ProtoModID>(
    stAddRegisterNum_ProtoModID_descriptor(), name, value);
}
enum stAddRegisterNum_ProtoFunID {
  stAddRegisterNum_ProtoFunID_FunID = 8
};
bool stAddRegisterNum_ProtoFunID_IsValid(int value);
const stAddRegisterNum_ProtoFunID stAddRegisterNum_ProtoFunID_ProtoFunID_MIN = stAddRegisterNum_ProtoFunID_FunID;
const stAddRegisterNum_ProtoFunID stAddRegisterNum_ProtoFunID_ProtoFunID_MAX = stAddRegisterNum_ProtoFunID_FunID;
const int stAddRegisterNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddRegisterNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddRegisterNum_ProtoFunID_descriptor();
inline const ::std::string& stAddRegisterNum_ProtoFunID_Name(stAddRegisterNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddRegisterNum_ProtoFunID_descriptor(), value);
}
inline bool stAddRegisterNum_ProtoFunID_Parse(
    const ::std::string& name, stAddRegisterNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddRegisterNum_ProtoFunID>(
    stAddRegisterNum_ProtoFunID_descriptor(), name, value);
}
enum stHeroLeagueMatch_ProtoModID {
  stHeroLeagueMatch_ProtoModID_ModID = 2
};
bool stHeroLeagueMatch_ProtoModID_IsValid(int value);
const stHeroLeagueMatch_ProtoModID stHeroLeagueMatch_ProtoModID_ProtoModID_MIN = stHeroLeagueMatch_ProtoModID_ModID;
const stHeroLeagueMatch_ProtoModID stHeroLeagueMatch_ProtoModID_ProtoModID_MAX = stHeroLeagueMatch_ProtoModID_ModID;
const int stHeroLeagueMatch_ProtoModID_ProtoModID_ARRAYSIZE = stHeroLeagueMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoModID_descriptor();
inline const ::std::string& stHeroLeagueMatch_ProtoModID_Name(stHeroLeagueMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueMatch_ProtoModID_descriptor(), value);
}
inline bool stHeroLeagueMatch_ProtoModID_Parse(
    const ::std::string& name, stHeroLeagueMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueMatch_ProtoModID>(
    stHeroLeagueMatch_ProtoModID_descriptor(), name, value);
}
enum stHeroLeagueMatch_ProtoFunID {
  stHeroLeagueMatch_ProtoFunID_FunID = 9
};
bool stHeroLeagueMatch_ProtoFunID_IsValid(int value);
const stHeroLeagueMatch_ProtoFunID stHeroLeagueMatch_ProtoFunID_ProtoFunID_MIN = stHeroLeagueMatch_ProtoFunID_FunID;
const stHeroLeagueMatch_ProtoFunID stHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX = stHeroLeagueMatch_ProtoFunID_FunID;
const int stHeroLeagueMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoFunID_descriptor();
inline const ::std::string& stHeroLeagueMatch_ProtoFunID_Name(stHeroLeagueMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueMatch_ProtoFunID_descriptor(), value);
}
inline bool stHeroLeagueMatch_ProtoFunID_Parse(
    const ::std::string& name, stHeroLeagueMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueMatch_ProtoFunID>(
    stHeroLeagueMatch_ProtoFunID_descriptor(), name, value);
}
enum stHeroLeagueCancelMatch_ProtoModID {
  stHeroLeagueCancelMatch_ProtoModID_ModID = 2
};
bool stHeroLeagueCancelMatch_ProtoModID_IsValid(int value);
const stHeroLeagueCancelMatch_ProtoModID stHeroLeagueCancelMatch_ProtoModID_ProtoModID_MIN = stHeroLeagueCancelMatch_ProtoModID_ModID;
const stHeroLeagueCancelMatch_ProtoModID stHeroLeagueCancelMatch_ProtoModID_ProtoModID_MAX = stHeroLeagueCancelMatch_ProtoModID_ModID;
const int stHeroLeagueCancelMatch_ProtoModID_ProtoModID_ARRAYSIZE = stHeroLeagueCancelMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueCancelMatch_ProtoModID_descriptor();
inline const ::std::string& stHeroLeagueCancelMatch_ProtoModID_Name(stHeroLeagueCancelMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueCancelMatch_ProtoModID_descriptor(), value);
}
inline bool stHeroLeagueCancelMatch_ProtoModID_Parse(
    const ::std::string& name, stHeroLeagueCancelMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueCancelMatch_ProtoModID>(
    stHeroLeagueCancelMatch_ProtoModID_descriptor(), name, value);
}
enum stHeroLeagueCancelMatch_ProtoFunID {
  stHeroLeagueCancelMatch_ProtoFunID_FunID = 10
};
bool stHeroLeagueCancelMatch_ProtoFunID_IsValid(int value);
const stHeroLeagueCancelMatch_ProtoFunID stHeroLeagueCancelMatch_ProtoFunID_ProtoFunID_MIN = stHeroLeagueCancelMatch_ProtoFunID_FunID;
const stHeroLeagueCancelMatch_ProtoFunID stHeroLeagueCancelMatch_ProtoFunID_ProtoFunID_MAX = stHeroLeagueCancelMatch_ProtoFunID_FunID;
const int stHeroLeagueCancelMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stHeroLeagueCancelMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueCancelMatch_ProtoFunID_descriptor();
inline const ::std::string& stHeroLeagueCancelMatch_ProtoFunID_Name(stHeroLeagueCancelMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueCancelMatch_ProtoFunID_descriptor(), value);
}
inline bool stHeroLeagueCancelMatch_ProtoFunID_Parse(
    const ::std::string& name, stHeroLeagueCancelMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueCancelMatch_ProtoFunID>(
    stHeroLeagueCancelMatch_ProtoFunID_descriptor(), name, value);
}
enum stNotifyHeroLeagueResult_ProtoModID {
  stNotifyHeroLeagueResult_ProtoModID_ModID = 3
};
bool stNotifyHeroLeagueResult_ProtoModID_IsValid(int value);
const stNotifyHeroLeagueResult_ProtoModID stNotifyHeroLeagueResult_ProtoModID_ProtoModID_MIN = stNotifyHeroLeagueResult_ProtoModID_ModID;
const stNotifyHeroLeagueResult_ProtoModID stNotifyHeroLeagueResult_ProtoModID_ProtoModID_MAX = stNotifyHeroLeagueResult_ProtoModID_ModID;
const int stNotifyHeroLeagueResult_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyHeroLeagueResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyHeroLeagueResult_ProtoModID_descriptor();
inline const ::std::string& stNotifyHeroLeagueResult_ProtoModID_Name(stNotifyHeroLeagueResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyHeroLeagueResult_ProtoModID_descriptor(), value);
}
inline bool stNotifyHeroLeagueResult_ProtoModID_Parse(
    const ::std::string& name, stNotifyHeroLeagueResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyHeroLeagueResult_ProtoModID>(
    stNotifyHeroLeagueResult_ProtoModID_descriptor(), name, value);
}
enum stNotifyHeroLeagueResult_ProtoFunID {
  stNotifyHeroLeagueResult_ProtoFunID_FunID = 10
};
bool stNotifyHeroLeagueResult_ProtoFunID_IsValid(int value);
const stNotifyHeroLeagueResult_ProtoFunID stNotifyHeroLeagueResult_ProtoFunID_ProtoFunID_MIN = stNotifyHeroLeagueResult_ProtoFunID_FunID;
const stNotifyHeroLeagueResult_ProtoFunID stNotifyHeroLeagueResult_ProtoFunID_ProtoFunID_MAX = stNotifyHeroLeagueResult_ProtoFunID_FunID;
const int stNotifyHeroLeagueResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyHeroLeagueResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyHeroLeagueResult_ProtoFunID_descriptor();
inline const ::std::string& stNotifyHeroLeagueResult_ProtoFunID_Name(stNotifyHeroLeagueResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyHeroLeagueResult_ProtoFunID_descriptor(), value);
}
inline bool stNotifyHeroLeagueResult_ProtoFunID_Parse(
    const ::std::string& name, stNotifyHeroLeagueResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyHeroLeagueResult_ProtoFunID>(
    stNotifyHeroLeagueResult_ProtoFunID_descriptor(), name, value);
}
enum stSynPubRoleList_ProtoModID {
  stSynPubRoleList_ProtoModID_ModID = 3
};
bool stSynPubRoleList_ProtoModID_IsValid(int value);
const stSynPubRoleList_ProtoModID stSynPubRoleList_ProtoModID_ProtoModID_MIN = stSynPubRoleList_ProtoModID_ModID;
const stSynPubRoleList_ProtoModID stSynPubRoleList_ProtoModID_ProtoModID_MAX = stSynPubRoleList_ProtoModID_ModID;
const int stSynPubRoleList_ProtoModID_ProtoModID_ARRAYSIZE = stSynPubRoleList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynPubRoleList_ProtoModID_descriptor();
inline const ::std::string& stSynPubRoleList_ProtoModID_Name(stSynPubRoleList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynPubRoleList_ProtoModID_descriptor(), value);
}
inline bool stSynPubRoleList_ProtoModID_Parse(
    const ::std::string& name, stSynPubRoleList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynPubRoleList_ProtoModID>(
    stSynPubRoleList_ProtoModID_descriptor(), name, value);
}
enum stSynPubRoleList_ProtoFunID {
  stSynPubRoleList_ProtoFunID_FunID = 11
};
bool stSynPubRoleList_ProtoFunID_IsValid(int value);
const stSynPubRoleList_ProtoFunID stSynPubRoleList_ProtoFunID_ProtoFunID_MIN = stSynPubRoleList_ProtoFunID_FunID;
const stSynPubRoleList_ProtoFunID stSynPubRoleList_ProtoFunID_ProtoFunID_MAX = stSynPubRoleList_ProtoFunID_FunID;
const int stSynPubRoleList_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynPubRoleList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynPubRoleList_ProtoFunID_descriptor();
inline const ::std::string& stSynPubRoleList_ProtoFunID_Name(stSynPubRoleList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynPubRoleList_ProtoFunID_descriptor(), value);
}
inline bool stSynPubRoleList_ProtoFunID_Parse(
    const ::std::string& name, stSynPubRoleList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynPubRoleList_ProtoFunID>(
    stSynPubRoleList_ProtoFunID_descriptor(), name, value);
}
enum stSynPubRoleListResult_ProtoModID {
  stSynPubRoleListResult_ProtoModID_ModID = 2
};
bool stSynPubRoleListResult_ProtoModID_IsValid(int value);
const stSynPubRoleListResult_ProtoModID stSynPubRoleListResult_ProtoModID_ProtoModID_MIN = stSynPubRoleListResult_ProtoModID_ModID;
const stSynPubRoleListResult_ProtoModID stSynPubRoleListResult_ProtoModID_ProtoModID_MAX = stSynPubRoleListResult_ProtoModID_ModID;
const int stSynPubRoleListResult_ProtoModID_ProtoModID_ARRAYSIZE = stSynPubRoleListResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynPubRoleListResult_ProtoModID_descriptor();
inline const ::std::string& stSynPubRoleListResult_ProtoModID_Name(stSynPubRoleListResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynPubRoleListResult_ProtoModID_descriptor(), value);
}
inline bool stSynPubRoleListResult_ProtoModID_Parse(
    const ::std::string& name, stSynPubRoleListResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynPubRoleListResult_ProtoModID>(
    stSynPubRoleListResult_ProtoModID_descriptor(), name, value);
}
enum stSynPubRoleListResult_ProtoFunID {
  stSynPubRoleListResult_ProtoFunID_FunID = 12
};
bool stSynPubRoleListResult_ProtoFunID_IsValid(int value);
const stSynPubRoleListResult_ProtoFunID stSynPubRoleListResult_ProtoFunID_ProtoFunID_MIN = stSynPubRoleListResult_ProtoFunID_FunID;
const stSynPubRoleListResult_ProtoFunID stSynPubRoleListResult_ProtoFunID_ProtoFunID_MAX = stSynPubRoleListResult_ProtoFunID_FunID;
const int stSynPubRoleListResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynPubRoleListResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynPubRoleListResult_ProtoFunID_descriptor();
inline const ::std::string& stSynPubRoleListResult_ProtoFunID_Name(stSynPubRoleListResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynPubRoleListResult_ProtoFunID_descriptor(), value);
}
inline bool stSynPubRoleListResult_ProtoFunID_Parse(
    const ::std::string& name, stSynPubRoleListResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynPubRoleListResult_ProtoFunID>(
    stSynPubRoleListResult_ProtoFunID_descriptor(), name, value);
}
enum stReqMenberInfo_ProtoModID {
  stReqMenberInfo_ProtoModID_ModID = 2
};
bool stReqMenberInfo_ProtoModID_IsValid(int value);
const stReqMenberInfo_ProtoModID stReqMenberInfo_ProtoModID_ProtoModID_MIN = stReqMenberInfo_ProtoModID_ModID;
const stReqMenberInfo_ProtoModID stReqMenberInfo_ProtoModID_ProtoModID_MAX = stReqMenberInfo_ProtoModID_ModID;
const int stReqMenberInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqMenberInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoModID_descriptor();
inline const ::std::string& stReqMenberInfo_ProtoModID_Name(stReqMenberInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMenberInfo_ProtoModID_descriptor(), value);
}
inline bool stReqMenberInfo_ProtoModID_Parse(
    const ::std::string& name, stReqMenberInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMenberInfo_ProtoModID>(
    stReqMenberInfo_ProtoModID_descriptor(), name, value);
}
enum stReqMenberInfo_ProtoFunID {
  stReqMenberInfo_ProtoFunID_FunID = 13
};
bool stReqMenberInfo_ProtoFunID_IsValid(int value);
const stReqMenberInfo_ProtoFunID stReqMenberInfo_ProtoFunID_ProtoFunID_MIN = stReqMenberInfo_ProtoFunID_FunID;
const stReqMenberInfo_ProtoFunID stReqMenberInfo_ProtoFunID_ProtoFunID_MAX = stReqMenberInfo_ProtoFunID_FunID;
const int stReqMenberInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqMenberInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqMenberInfo_ProtoFunID_Name(stReqMenberInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMenberInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqMenberInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqMenberInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMenberInfo_ProtoFunID>(
    stReqMenberInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqSynChampionInfo_ProtoModID {
  stReqSynChampionInfo_ProtoModID_ModID = 3
};
bool stReqSynChampionInfo_ProtoModID_IsValid(int value);
const stReqSynChampionInfo_ProtoModID stReqSynChampionInfo_ProtoModID_ProtoModID_MIN = stReqSynChampionInfo_ProtoModID_ModID;
const stReqSynChampionInfo_ProtoModID stReqSynChampionInfo_ProtoModID_ProtoModID_MAX = stReqSynChampionInfo_ProtoModID_ModID;
const int stReqSynChampionInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqSynChampionInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoModID_descriptor();
inline const ::std::string& stReqSynChampionInfo_ProtoModID_Name(stReqSynChampionInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSynChampionInfo_ProtoModID_descriptor(), value);
}
inline bool stReqSynChampionInfo_ProtoModID_Parse(
    const ::std::string& name, stReqSynChampionInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSynChampionInfo_ProtoModID>(
    stReqSynChampionInfo_ProtoModID_descriptor(), name, value);
}
enum stReqSynChampionInfo_ProtoFunID {
  stReqSynChampionInfo_ProtoFunID_FunID = 14
};
bool stReqSynChampionInfo_ProtoFunID_IsValid(int value);
const stReqSynChampionInfo_ProtoFunID stReqSynChampionInfo_ProtoFunID_ProtoFunID_MIN = stReqSynChampionInfo_ProtoFunID_FunID;
const stReqSynChampionInfo_ProtoFunID stReqSynChampionInfo_ProtoFunID_ProtoFunID_MAX = stReqSynChampionInfo_ProtoFunID_FunID;
const int stReqSynChampionInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSynChampionInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqSynChampionInfo_ProtoFunID_Name(stReqSynChampionInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSynChampionInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqSynChampionInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqSynChampionInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSynChampionInfo_ProtoFunID>(
    stReqSynChampionInfo_ProtoFunID_descriptor(), name, value);
}
enum stEnterResBattle_ProtoModID {
  stEnterResBattle_ProtoModID_ModID = 2
};
bool stEnterResBattle_ProtoModID_IsValid(int value);
const stEnterResBattle_ProtoModID stEnterResBattle_ProtoModID_ProtoModID_MIN = stEnterResBattle_ProtoModID_ModID;
const stEnterResBattle_ProtoModID stEnterResBattle_ProtoModID_ProtoModID_MAX = stEnterResBattle_ProtoModID_ModID;
const int stEnterResBattle_ProtoModID_ProtoModID_ARRAYSIZE = stEnterResBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoModID_descriptor();
inline const ::std::string& stEnterResBattle_ProtoModID_Name(stEnterResBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterResBattle_ProtoModID_descriptor(), value);
}
inline bool stEnterResBattle_ProtoModID_Parse(
    const ::std::string& name, stEnterResBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterResBattle_ProtoModID>(
    stEnterResBattle_ProtoModID_descriptor(), name, value);
}
enum stEnterResBattle_ProtoFunID {
  stEnterResBattle_ProtoFunID_FunID = 15
};
bool stEnterResBattle_ProtoFunID_IsValid(int value);
const stEnterResBattle_ProtoFunID stEnterResBattle_ProtoFunID_ProtoFunID_MIN = stEnterResBattle_ProtoFunID_FunID;
const stEnterResBattle_ProtoFunID stEnterResBattle_ProtoFunID_ProtoFunID_MAX = stEnterResBattle_ProtoFunID_FunID;
const int stEnterResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stEnterResBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoFunID_descriptor();
inline const ::std::string& stEnterResBattle_ProtoFunID_Name(stEnterResBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterResBattle_ProtoFunID_descriptor(), value);
}
inline bool stEnterResBattle_ProtoFunID_Parse(
    const ::std::string& name, stEnterResBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterResBattle_ProtoFunID>(
    stEnterResBattle_ProtoFunID_descriptor(), name, value);
}
enum stSynResBattleUserData_ProtoModID {
  stSynResBattleUserData_ProtoModID_ModID = 3
};
bool stSynResBattleUserData_ProtoModID_IsValid(int value);
const stSynResBattleUserData_ProtoModID stSynResBattleUserData_ProtoModID_ProtoModID_MIN = stSynResBattleUserData_ProtoModID_ModID;
const stSynResBattleUserData_ProtoModID stSynResBattleUserData_ProtoModID_ProtoModID_MAX = stSynResBattleUserData_ProtoModID_ModID;
const int stSynResBattleUserData_ProtoModID_ProtoModID_ARRAYSIZE = stSynResBattleUserData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoModID_descriptor();
inline const ::std::string& stSynResBattleUserData_ProtoModID_Name(stSynResBattleUserData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleUserData_ProtoModID_descriptor(), value);
}
inline bool stSynResBattleUserData_ProtoModID_Parse(
    const ::std::string& name, stSynResBattleUserData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleUserData_ProtoModID>(
    stSynResBattleUserData_ProtoModID_descriptor(), name, value);
}
enum stSynResBattleUserData_ProtoFunID {
  stSynResBattleUserData_ProtoFunID_FunID = 16
};
bool stSynResBattleUserData_ProtoFunID_IsValid(int value);
const stSynResBattleUserData_ProtoFunID stSynResBattleUserData_ProtoFunID_ProtoFunID_MIN = stSynResBattleUserData_ProtoFunID_FunID;
const stSynResBattleUserData_ProtoFunID stSynResBattleUserData_ProtoFunID_ProtoFunID_MAX = stSynResBattleUserData_ProtoFunID_FunID;
const int stSynResBattleUserData_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynResBattleUserData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoFunID_descriptor();
inline const ::std::string& stSynResBattleUserData_ProtoFunID_Name(stSynResBattleUserData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleUserData_ProtoFunID_descriptor(), value);
}
inline bool stSynResBattleUserData_ProtoFunID_Parse(
    const ::std::string& name, stSynResBattleUserData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleUserData_ProtoFunID>(
    stSynResBattleUserData_ProtoFunID_descriptor(), name, value);
}
enum stSynResBattleTop50_ProtoModID {
  stSynResBattleTop50_ProtoModID_ModID = 3
};
bool stSynResBattleTop50_ProtoModID_IsValid(int value);
const stSynResBattleTop50_ProtoModID stSynResBattleTop50_ProtoModID_ProtoModID_MIN = stSynResBattleTop50_ProtoModID_ModID;
const stSynResBattleTop50_ProtoModID stSynResBattleTop50_ProtoModID_ProtoModID_MAX = stSynResBattleTop50_ProtoModID_ModID;
const int stSynResBattleTop50_ProtoModID_ProtoModID_ARRAYSIZE = stSynResBattleTop50_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoModID_descriptor();
inline const ::std::string& stSynResBattleTop50_ProtoModID_Name(stSynResBattleTop50_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleTop50_ProtoModID_descriptor(), value);
}
inline bool stSynResBattleTop50_ProtoModID_Parse(
    const ::std::string& name, stSynResBattleTop50_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleTop50_ProtoModID>(
    stSynResBattleTop50_ProtoModID_descriptor(), name, value);
}
enum stSynResBattleTop50_ProtoFunID {
  stSynResBattleTop50_ProtoFunID_FunID = 17
};
bool stSynResBattleTop50_ProtoFunID_IsValid(int value);
const stSynResBattleTop50_ProtoFunID stSynResBattleTop50_ProtoFunID_ProtoFunID_MIN = stSynResBattleTop50_ProtoFunID_FunID;
const stSynResBattleTop50_ProtoFunID stSynResBattleTop50_ProtoFunID_ProtoFunID_MAX = stSynResBattleTop50_ProtoFunID_FunID;
const int stSynResBattleTop50_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynResBattleTop50_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoFunID_descriptor();
inline const ::std::string& stSynResBattleTop50_ProtoFunID_Name(stSynResBattleTop50_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleTop50_ProtoFunID_descriptor(), value);
}
inline bool stSynResBattleTop50_ProtoFunID_Parse(
    const ::std::string& name, stSynResBattleTop50_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleTop50_ProtoFunID>(
    stSynResBattleTop50_ProtoFunID_descriptor(), name, value);
}
enum stSynResBattleKing_ProtoModID {
  stSynResBattleKing_ProtoModID_ModID = 3
};
bool stSynResBattleKing_ProtoModID_IsValid(int value);
const stSynResBattleKing_ProtoModID stSynResBattleKing_ProtoModID_ProtoModID_MIN = stSynResBattleKing_ProtoModID_ModID;
const stSynResBattleKing_ProtoModID stSynResBattleKing_ProtoModID_ProtoModID_MAX = stSynResBattleKing_ProtoModID_ModID;
const int stSynResBattleKing_ProtoModID_ProtoModID_ARRAYSIZE = stSynResBattleKing_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoModID_descriptor();
inline const ::std::string& stSynResBattleKing_ProtoModID_Name(stSynResBattleKing_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleKing_ProtoModID_descriptor(), value);
}
inline bool stSynResBattleKing_ProtoModID_Parse(
    const ::std::string& name, stSynResBattleKing_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleKing_ProtoModID>(
    stSynResBattleKing_ProtoModID_descriptor(), name, value);
}
enum stSynResBattleKing_ProtoFunID {
  stSynResBattleKing_ProtoFunID_FunID = 18
};
bool stSynResBattleKing_ProtoFunID_IsValid(int value);
const stSynResBattleKing_ProtoFunID stSynResBattleKing_ProtoFunID_ProtoFunID_MIN = stSynResBattleKing_ProtoFunID_FunID;
const stSynResBattleKing_ProtoFunID stSynResBattleKing_ProtoFunID_ProtoFunID_MAX = stSynResBattleKing_ProtoFunID_FunID;
const int stSynResBattleKing_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynResBattleKing_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoFunID_descriptor();
inline const ::std::string& stSynResBattleKing_ProtoFunID_Name(stSynResBattleKing_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResBattleKing_ProtoFunID_descriptor(), value);
}
inline bool stSynResBattleKing_ProtoFunID_Parse(
    const ::std::string& name, stSynResBattleKing_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResBattleKing_ProtoFunID>(
    stSynResBattleKing_ProtoFunID_descriptor(), name, value);
}
enum stBroadResBattleInvite_ProtoModID {
  stBroadResBattleInvite_ProtoModID_ModID = 3
};
bool stBroadResBattleInvite_ProtoModID_IsValid(int value);
const stBroadResBattleInvite_ProtoModID stBroadResBattleInvite_ProtoModID_ProtoModID_MIN = stBroadResBattleInvite_ProtoModID_ModID;
const stBroadResBattleInvite_ProtoModID stBroadResBattleInvite_ProtoModID_ProtoModID_MAX = stBroadResBattleInvite_ProtoModID_ModID;
const int stBroadResBattleInvite_ProtoModID_ProtoModID_ARRAYSIZE = stBroadResBattleInvite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoModID_descriptor();
inline const ::std::string& stBroadResBattleInvite_ProtoModID_Name(stBroadResBattleInvite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadResBattleInvite_ProtoModID_descriptor(), value);
}
inline bool stBroadResBattleInvite_ProtoModID_Parse(
    const ::std::string& name, stBroadResBattleInvite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadResBattleInvite_ProtoModID>(
    stBroadResBattleInvite_ProtoModID_descriptor(), name, value);
}
enum stBroadResBattleInvite_ProtoFunID {
  stBroadResBattleInvite_ProtoFunID_FunID = 19
};
bool stBroadResBattleInvite_ProtoFunID_IsValid(int value);
const stBroadResBattleInvite_ProtoFunID stBroadResBattleInvite_ProtoFunID_ProtoFunID_MIN = stBroadResBattleInvite_ProtoFunID_FunID;
const stBroadResBattleInvite_ProtoFunID stBroadResBattleInvite_ProtoFunID_ProtoFunID_MAX = stBroadResBattleInvite_ProtoFunID_FunID;
const int stBroadResBattleInvite_ProtoFunID_ProtoFunID_ARRAYSIZE = stBroadResBattleInvite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoFunID_descriptor();
inline const ::std::string& stBroadResBattleInvite_ProtoFunID_Name(stBroadResBattleInvite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadResBattleInvite_ProtoFunID_descriptor(), value);
}
inline bool stBroadResBattleInvite_ProtoFunID_Parse(
    const ::std::string& name, stBroadResBattleInvite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadResBattleInvite_ProtoFunID>(
    stBroadResBattleInvite_ProtoFunID_descriptor(), name, value);
}
enum stReplyInviteResBattle_ProtoModID {
  stReplyInviteResBattle_ProtoModID_ModID = 2
};
bool stReplyInviteResBattle_ProtoModID_IsValid(int value);
const stReplyInviteResBattle_ProtoModID stReplyInviteResBattle_ProtoModID_ProtoModID_MIN = stReplyInviteResBattle_ProtoModID_ModID;
const stReplyInviteResBattle_ProtoModID stReplyInviteResBattle_ProtoModID_ProtoModID_MAX = stReplyInviteResBattle_ProtoModID_ModID;
const int stReplyInviteResBattle_ProtoModID_ProtoModID_ARRAYSIZE = stReplyInviteResBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoModID_descriptor();
inline const ::std::string& stReplyInviteResBattle_ProtoModID_Name(stReplyInviteResBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyInviteResBattle_ProtoModID_descriptor(), value);
}
inline bool stReplyInviteResBattle_ProtoModID_Parse(
    const ::std::string& name, stReplyInviteResBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyInviteResBattle_ProtoModID>(
    stReplyInviteResBattle_ProtoModID_descriptor(), name, value);
}
enum stReplyInviteResBattle_ProtoFunID {
  stReplyInviteResBattle_ProtoFunID_FunID = 20
};
bool stReplyInviteResBattle_ProtoFunID_IsValid(int value);
const stReplyInviteResBattle_ProtoFunID stReplyInviteResBattle_ProtoFunID_ProtoFunID_MIN = stReplyInviteResBattle_ProtoFunID_FunID;
const stReplyInviteResBattle_ProtoFunID stReplyInviteResBattle_ProtoFunID_ProtoFunID_MAX = stReplyInviteResBattle_ProtoFunID_FunID;
const int stReplyInviteResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplyInviteResBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoFunID_descriptor();
inline const ::std::string& stReplyInviteResBattle_ProtoFunID_Name(stReplyInviteResBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyInviteResBattle_ProtoFunID_descriptor(), value);
}
inline bool stReplyInviteResBattle_ProtoFunID_Parse(
    const ::std::string& name, stReplyInviteResBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyInviteResBattle_ProtoFunID>(
    stReplyInviteResBattle_ProtoFunID_descriptor(), name, value);
}
enum stResBattleResChange_ProtoModID {
  stResBattleResChange_ProtoModID_ModID = 3
};
bool stResBattleResChange_ProtoModID_IsValid(int value);
const stResBattleResChange_ProtoModID stResBattleResChange_ProtoModID_ProtoModID_MIN = stResBattleResChange_ProtoModID_ModID;
const stResBattleResChange_ProtoModID stResBattleResChange_ProtoModID_ProtoModID_MAX = stResBattleResChange_ProtoModID_ModID;
const int stResBattleResChange_ProtoModID_ProtoModID_ARRAYSIZE = stResBattleResChange_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleResChange_ProtoModID_descriptor();
inline const ::std::string& stResBattleResChange_ProtoModID_Name(stResBattleResChange_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleResChange_ProtoModID_descriptor(), value);
}
inline bool stResBattleResChange_ProtoModID_Parse(
    const ::std::string& name, stResBattleResChange_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleResChange_ProtoModID>(
    stResBattleResChange_ProtoModID_descriptor(), name, value);
}
enum stResBattleResChange_ProtoFunID {
  stResBattleResChange_ProtoFunID_FunID = 21
};
bool stResBattleResChange_ProtoFunID_IsValid(int value);
const stResBattleResChange_ProtoFunID stResBattleResChange_ProtoFunID_ProtoFunID_MIN = stResBattleResChange_ProtoFunID_FunID;
const stResBattleResChange_ProtoFunID stResBattleResChange_ProtoFunID_ProtoFunID_MAX = stResBattleResChange_ProtoFunID_FunID;
const int stResBattleResChange_ProtoFunID_ProtoFunID_ARRAYSIZE = stResBattleResChange_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleResChange_ProtoFunID_descriptor();
inline const ::std::string& stResBattleResChange_ProtoFunID_Name(stResBattleResChange_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleResChange_ProtoFunID_descriptor(), value);
}
inline bool stResBattleResChange_ProtoFunID_Parse(
    const ::std::string& name, stResBattleResChange_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleResChange_ProtoFunID>(
    stResBattleResChange_ProtoFunID_descriptor(), name, value);
}
enum stSendResBattle2Pub_ProtoModID {
  stSendResBattle2Pub_ProtoModID_ModID = 2
};
bool stSendResBattle2Pub_ProtoModID_IsValid(int value);
const stSendResBattle2Pub_ProtoModID stSendResBattle2Pub_ProtoModID_ProtoModID_MIN = stSendResBattle2Pub_ProtoModID_ModID;
const stSendResBattle2Pub_ProtoModID stSendResBattle2Pub_ProtoModID_ProtoModID_MAX = stSendResBattle2Pub_ProtoModID_ModID;
const int stSendResBattle2Pub_ProtoModID_ProtoModID_ARRAYSIZE = stSendResBattle2Pub_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendResBattle2Pub_ProtoModID_descriptor();
inline const ::std::string& stSendResBattle2Pub_ProtoModID_Name(stSendResBattle2Pub_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendResBattle2Pub_ProtoModID_descriptor(), value);
}
inline bool stSendResBattle2Pub_ProtoModID_Parse(
    const ::std::string& name, stSendResBattle2Pub_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendResBattle2Pub_ProtoModID>(
    stSendResBattle2Pub_ProtoModID_descriptor(), name, value);
}
enum stSendResBattle2Pub_ProtoFunID {
  stSendResBattle2Pub_ProtoFunID_FunID = 22
};
bool stSendResBattle2Pub_ProtoFunID_IsValid(int value);
const stSendResBattle2Pub_ProtoFunID stSendResBattle2Pub_ProtoFunID_ProtoFunID_MIN = stSendResBattle2Pub_ProtoFunID_FunID;
const stSendResBattle2Pub_ProtoFunID stSendResBattle2Pub_ProtoFunID_ProtoFunID_MAX = stSendResBattle2Pub_ProtoFunID_FunID;
const int stSendResBattle2Pub_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendResBattle2Pub_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendResBattle2Pub_ProtoFunID_descriptor();
inline const ::std::string& stSendResBattle2Pub_ProtoFunID_Name(stSendResBattle2Pub_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendResBattle2Pub_ProtoFunID_descriptor(), value);
}
inline bool stSendResBattle2Pub_ProtoFunID_Parse(
    const ::std::string& name, stSendResBattle2Pub_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendResBattle2Pub_ProtoFunID>(
    stSendResBattle2Pub_ProtoFunID_descriptor(), name, value);
}
enum PubGameModID {
  NORMAL2PUB_MOD = 2,
  PUB2NORMAL_MOD = 3
};
bool PubGameModID_IsValid(int value);
const PubGameModID PubGameModID_MIN = NORMAL2PUB_MOD;
const PubGameModID PubGameModID_MAX = PUB2NORMAL_MOD;
const int PubGameModID_ARRAYSIZE = PubGameModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* PubGameModID_descriptor();
inline const ::std::string& PubGameModID_Name(PubGameModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    PubGameModID_descriptor(), value);
}
inline bool PubGameModID_Parse(
    const ::std::string& name, PubGameModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PubGameModID>(
    PubGameModID_descriptor(), name, value);
}
enum eRealTimePKType {
  eRealTimePKType_KillAll = 1,
  eRealTimePKType_Finish = 2
};
bool eRealTimePKType_IsValid(int value);
const eRealTimePKType eRealTimePKType_MIN = eRealTimePKType_KillAll;
const eRealTimePKType eRealTimePKType_MAX = eRealTimePKType_Finish;
const int eRealTimePKType_ARRAYSIZE = eRealTimePKType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eRealTimePKType_descriptor();
inline const ::std::string& eRealTimePKType_Name(eRealTimePKType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eRealTimePKType_descriptor(), value);
}
inline bool eRealTimePKType_Parse(
    const ::std::string& name, eRealTimePKType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eRealTimePKType>(
    eRealTimePKType_descriptor(), name, value);
}
// ===================================================================

class stLoginPubGame : public ::google::protobuf::Message {
 public:
  stLoginPubGame();
  virtual ~stLoginPubGame();

  stLoginPubGame(const stLoginPubGame& from);

  inline stLoginPubGame& operator=(const stLoginPubGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLoginPubGame& default_instance();

  void Swap(stLoginPubGame* other);

  // implements Message ----------------------------------------------

  stLoginPubGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLoginPubGame& from);
  void MergeFrom(const stLoginPubGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLoginPubGame_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLoginPubGame_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLoginPubGame_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLoginPubGame_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLoginPubGame_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLoginPubGame_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLoginPubGame_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLoginPubGame_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLoginPubGame_ProtoModID_Parse(name, value);
  }

  typedef stLoginPubGame_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLoginPubGame_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLoginPubGame_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLoginPubGame_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLoginPubGame_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLoginPubGame_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLoginPubGame_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLoginPubGame_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLoginPubGame_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 svrType = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // optional uint32 svrID = 2;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvrIDFieldNumber = 2;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional string key = 5;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 5;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:PubGame.stLoginPubGame)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 svrid_;
  ::std::string* ip_;
  ::std::string* key_;
  ::google::protobuf::uint32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stLoginPubGame* default_instance_;
};
// -------------------------------------------------------------------

class stTitleToPub : public ::google::protobuf::Message {
 public:
  stTitleToPub();
  virtual ~stTitleToPub();

  stTitleToPub(const stTitleToPub& from);

  inline stTitleToPub& operator=(const stTitleToPub& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTitleToPub& default_instance();

  void Swap(stTitleToPub* other);

  // implements Message ----------------------------------------------

  stTitleToPub* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTitleToPub& from);
  void MergeFrom(const stTitleToPub& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 activeID = 1;
  inline bool has_activeid() const;
  inline void clear_activeid();
  static const int kActiveIDFieldNumber = 1;
  inline ::google::protobuf::uint32 activeid() const;
  inline void set_activeid(::google::protobuf::uint32 value);

  // repeated uint32 gotSave = 2;
  inline int gotsave_size() const;
  inline void clear_gotsave();
  static const int kGotSaveFieldNumber = 2;
  inline ::google::protobuf::uint32 gotsave(int index) const;
  inline void set_gotsave(int index, ::google::protobuf::uint32 value);
  inline void add_gotsave(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      gotsave() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_gotsave();

  // repeated uint32 notSave = 3;
  inline int notsave_size() const;
  inline void clear_notsave();
  static const int kNotSaveFieldNumber = 3;
  inline ::google::protobuf::uint32 notsave(int index) const;
  inline void set_notsave(int index, ::google::protobuf::uint32 value);
  inline void add_notsave(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      notsave() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_notsave();

  // @@protoc_insertion_point(class_scope:PubGame.stTitleToPub)
 private:
  inline void set_has_activeid();
  inline void clear_has_activeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > gotsave_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > notsave_;
  ::google::protobuf::uint32 activeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stTitleToPub* default_instance_;
};
// -------------------------------------------------------------------

class stRoleInfo : public ::google::protobuf::Message {
 public:
  stRoleInfo();
  virtual ~stRoleInfo();

  stRoleInfo(const stRoleInfo& from);

  inline stRoleInfo& operator=(const stRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRoleInfo& default_instance();

  void Swap(stRoleInfo* other);

  // implements Message ----------------------------------------------

  stRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRoleInfo& from);
  void MergeFrom(const stRoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRoleInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRoleInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRoleInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRoleInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRoleInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRoleInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRoleInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRoleInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRoleInfo_ProtoModID_Parse(name, value);
  }

  typedef stRoleInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRoleInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRoleInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRoleInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRoleInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRoleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRoleInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRoleInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRoleInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string account = 2;
  inline bool has_account() const;
  inline void clear_account();
  static const int kAccountFieldNumber = 2;
  inline const ::std::string& account() const;
  inline void set_account(const ::std::string& value);
  inline void set_account(const char* value);
  inline void set_account(const char* value, size_t size);
  inline ::std::string* mutable_account();
  inline ::std::string* release_account();
  inline void set_allocated_account(::std::string* account);

  // optional uint32 dataSize = 3;
  inline bool has_datasize() const;
  inline void clear_datasize();
  static const int kDataSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 datasize() const;
  inline void set_datasize(::google::protobuf::uint32 value);

  // optional bytes data = 4;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 4;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 normalServerID = 6;
  inline bool has_normalserverid() const;
  inline void clear_normalserverid();
  static const int kNormalServerIDFieldNumber = 6;
  inline ::google::protobuf::uint32 normalserverid() const;
  inline void set_normalserverid(::google::protobuf::uint32 value);

  // optional uint32 normalCharID = 7;
  inline bool has_normalcharid() const;
  inline void clear_normalcharid();
  static const int kNormalCharIDFieldNumber = 7;
  inline ::google::protobuf::uint32 normalcharid() const;
  inline void set_normalcharid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 8;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 8;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional uint32 mapId = 9;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIdFieldNumber = 9;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // optional .PubGame.stTitleToPub titles = 10;
  inline bool has_titles() const;
  inline void clear_titles();
  static const int kTitlesFieldNumber = 10;
  inline const ::PubGame::stTitleToPub& titles() const;
  inline ::PubGame::stTitleToPub* mutable_titles();
  inline ::PubGame::stTitleToPub* release_titles();
  inline void set_allocated_titles(::PubGame::stTitleToPub* titles);

  // @@protoc_insertion_point(class_scope:PubGame.stRoleInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_account();
  inline void clear_has_account();
  inline void set_has_datasize();
  inline void clear_has_datasize();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_normalserverid();
  inline void clear_has_normalserverid();
  inline void set_has_normalcharid();
  inline void clear_has_normalcharid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_titles();
  inline void clear_has_titles();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* account_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 datasize_;
  ::std::string* data_;
  ::std::string* ip_;
  ::google::protobuf::uint32 normalserverid_;
  ::google::protobuf::uint32 normalcharid_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 mapid_;
  ::PubGame::stTitleToPub* titles_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stNormalForwardPub : public ::google::protobuf::Message {
 public:
  stNormalForwardPub();
  virtual ~stNormalForwardPub();

  stNormalForwardPub(const stNormalForwardPub& from);

  inline stNormalForwardPub& operator=(const stNormalForwardPub& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNormalForwardPub& default_instance();

  void Swap(stNormalForwardPub* other);

  // implements Message ----------------------------------------------

  stNormalForwardPub* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNormalForwardPub& from);
  void MergeFrom(const stNormalForwardPub& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNormalForwardPub_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNormalForwardPub_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNormalForwardPub_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNormalForwardPub_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNormalForwardPub_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNormalForwardPub_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNormalForwardPub_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNormalForwardPub_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNormalForwardPub_ProtoModID_Parse(name, value);
  }

  typedef stNormalForwardPub_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNormalForwardPub_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNormalForwardPub_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNormalForwardPub_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNormalForwardPub_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNormalForwardPub_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNormalForwardPub_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNormalForwardPub_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNormalForwardPub_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 3;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 3;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 4;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 4;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:PubGame.stNormalForwardPub)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::google::protobuf::uint32 cmdlen_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stNormalForwardPub* default_instance_;
};
// -------------------------------------------------------------------

class stRoleLogout : public ::google::protobuf::Message {
 public:
  stRoleLogout();
  virtual ~stRoleLogout();

  stRoleLogout(const stRoleLogout& from);

  inline stRoleLogout& operator=(const stRoleLogout& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRoleLogout& default_instance();

  void Swap(stRoleLogout* other);

  // implements Message ----------------------------------------------

  stRoleLogout* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRoleLogout& from);
  void MergeFrom(const stRoleLogout& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRoleLogout_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRoleLogout_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRoleLogout_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRoleLogout_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRoleLogout_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRoleLogout_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRoleLogout_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRoleLogout_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRoleLogout_ProtoModID_Parse(name, value);
  }

  typedef stRoleLogout_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRoleLogout_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRoleLogout_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRoleLogout_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRoleLogout_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRoleLogout_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRoleLogout_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRoleLogout_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRoleLogout_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stRoleLogout)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stRoleLogout* default_instance_;
};
// -------------------------------------------------------------------

class stRealTimeTeamMatch : public ::google::protobuf::Message {
 public:
  stRealTimeTeamMatch();
  virtual ~stRealTimeTeamMatch();

  stRealTimeTeamMatch(const stRealTimeTeamMatch& from);

  inline stRealTimeTeamMatch& operator=(const stRealTimeTeamMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRealTimeTeamMatch& default_instance();

  void Swap(stRealTimeTeamMatch* other);

  // implements Message ----------------------------------------------

  stRealTimeTeamMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRealTimeTeamMatch& from);
  void MergeFrom(const stRealTimeTeamMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRealTimeTeamMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRealTimeTeamMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRealTimeTeamMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRealTimeTeamMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRealTimeTeamMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRealTimeTeamMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRealTimeTeamMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRealTimeTeamMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRealTimeTeamMatch_ProtoModID_Parse(name, value);
  }

  typedef stRealTimeTeamMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRealTimeTeamMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRealTimeTeamMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRealTimeTeamMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRealTimeTeamMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRealTimeTeamMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRealTimeTeamMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRealTimeTeamMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PubGame.eRealTimePKType eType = 1;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 1;
  inline ::PubGame::eRealTimePKType etype() const;
  inline void set_etype(::PubGame::eRealTimePKType value);

  // optional uint32 teamID = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 2;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // repeated uint32 memberId = 3;
  inline int memberid_size() const;
  inline void clear_memberid();
  static const int kMemberIdFieldNumber = 3;
  inline ::google::protobuf::uint32 memberid(int index) const;
  inline void set_memberid(int index, ::google::protobuf::uint32 value);
  inline void add_memberid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      memberid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_memberid();

  // @@protoc_insertion_point(class_scope:PubGame.stRealTimeTeamMatch)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int etype_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > memberid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stRealTimeTeamMatch* default_instance_;
};
// -------------------------------------------------------------------

class stPubForwardNormal : public ::google::protobuf::Message {
 public:
  stPubForwardNormal();
  virtual ~stPubForwardNormal();

  stPubForwardNormal(const stPubForwardNormal& from);

  inline stPubForwardNormal& operator=(const stPubForwardNormal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPubForwardNormal& default_instance();

  void Swap(stPubForwardNormal* other);

  // implements Message ----------------------------------------------

  stPubForwardNormal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPubForwardNormal& from);
  void MergeFrom(const stPubForwardNormal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPubForwardNormal_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPubForwardNormal_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPubForwardNormal_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPubForwardNormal_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPubForwardNormal_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPubForwardNormal_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPubForwardNormal_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPubForwardNormal_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPubForwardNormal_ProtoModID_Parse(name, value);
  }

  typedef stPubForwardNormal_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPubForwardNormal_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPubForwardNormal_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPubForwardNormal_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPubForwardNormal_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPubForwardNormal_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPubForwardNormal_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPubForwardNormal_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPubForwardNormal_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 3;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 3;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 4;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 4;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:PubGame.stPubForwardNormal)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::google::protobuf::uint32 cmdlen_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stPubForwardNormal* default_instance_;
};
// -------------------------------------------------------------------

class stPubForwardGate : public ::google::protobuf::Message {
 public:
  stPubForwardGate();
  virtual ~stPubForwardGate();

  stPubForwardGate(const stPubForwardGate& from);

  inline stPubForwardGate& operator=(const stPubForwardGate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPubForwardGate& default_instance();

  void Swap(stPubForwardGate* other);

  // implements Message ----------------------------------------------

  stPubForwardGate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPubForwardGate& from);
  void MergeFrom(const stPubForwardGate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPubForwardGate_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPubForwardGate_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPubForwardGate_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPubForwardGate_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPubForwardGate_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPubForwardGate_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPubForwardGate_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPubForwardGate_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPubForwardGate_ProtoModID_Parse(name, value);
  }

  typedef stPubForwardGate_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPubForwardGate_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPubForwardGate_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPubForwardGate_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPubForwardGate_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPubForwardGate_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPubForwardGate_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPubForwardGate_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPubForwardGate_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 3;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 3;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 4;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 4;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:PubGame.stPubForwardGate)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::google::protobuf::uint32 cmdlen_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stPubForwardGate* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyUserOnPub : public ::google::protobuf::Message {
 public:
  stNotifyUserOnPub();
  virtual ~stNotifyUserOnPub();

  stNotifyUserOnPub(const stNotifyUserOnPub& from);

  inline stNotifyUserOnPub& operator=(const stNotifyUserOnPub& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyUserOnPub& default_instance();

  void Swap(stNotifyUserOnPub* other);

  // implements Message ----------------------------------------------

  stNotifyUserOnPub* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyUserOnPub& from);
  void MergeFrom(const stNotifyUserOnPub& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyUserOnPub_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyUserOnPub_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyUserOnPub_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyUserOnPub_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyUserOnPub_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyUserOnPub_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyUserOnPub_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyUserOnPub_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyUserOnPub_ProtoModID_Parse(name, value);
  }

  typedef stNotifyUserOnPub_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyUserOnPub_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyUserOnPub_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyUserOnPub_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyUserOnPub_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyUserOnPub_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyUserOnPub_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyUserOnPub_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyUserOnPub_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bool onPub = 2;
  inline bool has_onpub() const;
  inline void clear_onpub();
  static const int kOnPubFieldNumber = 2;
  inline bool onpub() const;
  inline void set_onpub(bool value);

  // @@protoc_insertion_point(class_scope:PubGame.stNotifyUserOnPub)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_onpub();
  inline void clear_has_onpub();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  bool onpub_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stNotifyUserOnPub* default_instance_;
};
// -------------------------------------------------------------------

class stPubForwardGlobal : public ::google::protobuf::Message {
 public:
  stPubForwardGlobal();
  virtual ~stPubForwardGlobal();

  stPubForwardGlobal(const stPubForwardGlobal& from);

  inline stPubForwardGlobal& operator=(const stPubForwardGlobal& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPubForwardGlobal& default_instance();

  void Swap(stPubForwardGlobal* other);

  // implements Message ----------------------------------------------

  stPubForwardGlobal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPubForwardGlobal& from);
  void MergeFrom(const stPubForwardGlobal& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPubForwardGlobal_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPubForwardGlobal_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPubForwardGlobal_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPubForwardGlobal_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPubForwardGlobal_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPubForwardGlobal_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPubForwardGlobal_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPubForwardGlobal_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPubForwardGlobal_ProtoModID_Parse(name, value);
  }

  typedef stPubForwardGlobal_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPubForwardGlobal_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPubForwardGlobal_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPubForwardGlobal_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPubForwardGlobal_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPubForwardGlobal_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPubForwardGlobal_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPubForwardGlobal_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPubForwardGlobal_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 funID = 3;
  inline bool has_funid() const;
  inline void clear_funid();
  static const int kFunIDFieldNumber = 3;
  inline ::google::protobuf::uint32 funid() const;
  inline void set_funid(::google::protobuf::uint32 value);

  // optional uint32 cmdLen = 4;
  inline bool has_cmdlen() const;
  inline void clear_cmdlen();
  static const int kCmdLenFieldNumber = 4;
  inline ::google::protobuf::uint32 cmdlen() const;
  inline void set_cmdlen(::google::protobuf::uint32 value);

  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:PubGame.stPubForwardGlobal)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_funid();
  inline void clear_has_funid();
  inline void set_has_cmdlen();
  inline void clear_has_cmdlen();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 funid_;
  ::google::protobuf::uint32 cmdlen_;
  ::std::string* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stPubForwardGlobal* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyOne2OneResult : public ::google::protobuf::Message {
 public:
  stNotifyOne2OneResult();
  virtual ~stNotifyOne2OneResult();

  stNotifyOne2OneResult(const stNotifyOne2OneResult& from);

  inline stNotifyOne2OneResult& operator=(const stNotifyOne2OneResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyOne2OneResult& default_instance();

  void Swap(stNotifyOne2OneResult* other);

  // implements Message ----------------------------------------------

  stNotifyOne2OneResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyOne2OneResult& from);
  void MergeFrom(const stNotifyOne2OneResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyOne2OneResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyOne2OneResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyOne2OneResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyOne2OneResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyOne2OneResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyOne2OneResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyOne2OneResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyOne2OneResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyOne2OneResult_ProtoModID_Parse(name, value);
  }

  typedef stNotifyOne2OneResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyOne2OneResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyOne2OneResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyOne2OneResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyOne2OneResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyOne2OneResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyOne2OneResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyOne2OneResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyOne2OneResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID1 = 1;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharID1FieldNumber = 1;
  inline ::google::protobuf::uint32 charid1() const;
  inline void set_charid1(::google::protobuf::uint32 value);

  // optional bool win1 = 2;
  inline bool has_win1() const;
  inline void clear_win1();
  static const int kWin1FieldNumber = 2;
  inline bool win1() const;
  inline void set_win1(bool value);

  // optional uint32 score1 = 3;
  inline bool has_score1() const;
  inline void clear_score1();
  static const int kScore1FieldNumber = 3;
  inline ::google::protobuf::uint32 score1() const;
  inline void set_score1(::google::protobuf::uint32 value);

  // optional uint32 charID2 = 4;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharID2FieldNumber = 4;
  inline ::google::protobuf::uint32 charid2() const;
  inline void set_charid2(::google::protobuf::uint32 value);

  // optional bool win2 = 5;
  inline bool has_win2() const;
  inline void clear_win2();
  static const int kWin2FieldNumber = 5;
  inline bool win2() const;
  inline void set_win2(bool value);

  // optional uint32 score2 = 6;
  inline bool has_score2() const;
  inline void clear_score2();
  static const int kScore2FieldNumber = 6;
  inline ::google::protobuf::uint32 score2() const;
  inline void set_score2(::google::protobuf::uint32 value);

  // optional bool withfriend = 7;
  inline bool has_withfriend() const;
  inline void clear_withfriend();
  static const int kWithfriendFieldNumber = 7;
  inline bool withfriend() const;
  inline void set_withfriend(bool value);

  // optional uint32 serverIdx1 = 8;
  inline bool has_serveridx1() const;
  inline void clear_serveridx1();
  static const int kServerIdx1FieldNumber = 8;
  inline ::google::protobuf::uint32 serveridx1() const;
  inline void set_serveridx1(::google::protobuf::uint32 value);

  // optional uint32 serverIdx2 = 9;
  inline bool has_serveridx2() const;
  inline void clear_serveridx2();
  static const int kServerIdx2FieldNumber = 9;
  inline ::google::protobuf::uint32 serveridx2() const;
  inline void set_serveridx2(::google::protobuf::uint32 value);

  // optional uint32 costLiLian = 10;
  inline bool has_costlilian() const;
  inline void clear_costlilian();
  static const int kCostLiLianFieldNumber = 10;
  inline ::google::protobuf::uint32 costlilian() const;
  inline void set_costlilian(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stNotifyOne2OneResult)
 private:
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_win1();
  inline void clear_has_win1();
  inline void set_has_score1();
  inline void clear_has_score1();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_win2();
  inline void clear_has_win2();
  inline void set_has_score2();
  inline void clear_has_score2();
  inline void set_has_withfriend();
  inline void clear_has_withfriend();
  inline void set_has_serveridx1();
  inline void clear_has_serveridx1();
  inline void set_has_serveridx2();
  inline void clear_has_serveridx2();
  inline void set_has_costlilian();
  inline void clear_has_costlilian();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid1_;
  ::google::protobuf::uint32 score1_;
  ::google::protobuf::uint32 charid2_;
  bool win1_;
  bool win2_;
  bool withfriend_;
  ::google::protobuf::uint32 score2_;
  ::google::protobuf::uint32 serveridx1_;
  ::google::protobuf::uint32 serveridx2_;
  ::google::protobuf::uint32 costlilian_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stNotifyOne2OneResult* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyRealTimeResult : public ::google::protobuf::Message {
 public:
  stNotifyRealTimeResult();
  virtual ~stNotifyRealTimeResult();

  stNotifyRealTimeResult(const stNotifyRealTimeResult& from);

  inline stNotifyRealTimeResult& operator=(const stNotifyRealTimeResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyRealTimeResult& default_instance();

  void Swap(stNotifyRealTimeResult* other);

  // implements Message ----------------------------------------------

  stNotifyRealTimeResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyRealTimeResult& from);
  void MergeFrom(const stNotifyRealTimeResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyRealTimeResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyRealTimeResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyRealTimeResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyRealTimeResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyRealTimeResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyRealTimeResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyRealTimeResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyRealTimeResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyRealTimeResult_ProtoModID_Parse(name, value);
  }

  typedef stNotifyRealTimeResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyRealTimeResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyRealTimeResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyRealTimeResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyRealTimeResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyRealTimeResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyRealTimeResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyRealTimeResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyRealTimeResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional bool win = 2;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 2;
  inline bool win() const;
  inline void set_win(bool value);

  // optional .PubGame.eRealTimePKType type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::PubGame::eRealTimePKType type() const;
  inline void set_type(::PubGame::eRealTimePKType value);

  // optional uint32 costLilian = 4;
  inline bool has_costlilian() const;
  inline void clear_costlilian();
  static const int kCostLilianFieldNumber = 4;
  inline ::google::protobuf::uint32 costlilian() const;
  inline void set_costlilian(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stNotifyRealTimeResult)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_win();
  inline void clear_has_win();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_costlilian();
  inline void clear_has_costlilian();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  bool win_;
  int type_;
  ::google::protobuf::uint32 costlilian_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stNotifyRealTimeResult* default_instance_;
};
// -------------------------------------------------------------------

class stSaveRoleInfo : public ::google::protobuf::Message {
 public:
  stSaveRoleInfo();
  virtual ~stSaveRoleInfo();

  stSaveRoleInfo(const stSaveRoleInfo& from);

  inline stSaveRoleInfo& operator=(const stSaveRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSaveRoleInfo& default_instance();

  void Swap(stSaveRoleInfo* other);

  // implements Message ----------------------------------------------

  stSaveRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSaveRoleInfo& from);
  void MergeFrom(const stSaveRoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSaveRoleInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSaveRoleInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSaveRoleInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSaveRoleInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSaveRoleInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSaveRoleInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSaveRoleInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSaveRoleInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSaveRoleInfo_ProtoModID_Parse(name, value);
  }

  typedef stSaveRoleInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSaveRoleInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSaveRoleInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSaveRoleInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSaveRoleInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSaveRoleInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSaveRoleInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSaveRoleInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSaveRoleInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 dataSize = 2;
  inline bool has_datasize() const;
  inline void clear_datasize();
  static const int kDataSizeFieldNumber = 2;
  inline ::google::protobuf::uint32 datasize() const;
  inline void set_datasize(::google::protobuf::uint32 value);

  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // optional uint32 normalServerID = 4;
  inline bool has_normalserverid() const;
  inline void clear_normalserverid();
  static const int kNormalServerIDFieldNumber = 4;
  inline ::google::protobuf::uint32 normalserverid() const;
  inline void set_normalserverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stSaveRoleInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_datasize();
  inline void clear_has_datasize();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_normalserverid();
  inline void clear_has_normalserverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 datasize_;
  ::std::string* data_;
  ::google::protobuf::uint32 normalserverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stSaveRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stAddRegisterNum : public ::google::protobuf::Message {
 public:
  stAddRegisterNum();
  virtual ~stAddRegisterNum();

  stAddRegisterNum(const stAddRegisterNum& from);

  inline stAddRegisterNum& operator=(const stAddRegisterNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddRegisterNum& default_instance();

  void Swap(stAddRegisterNum* other);

  // implements Message ----------------------------------------------

  stAddRegisterNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddRegisterNum& from);
  void MergeFrom(const stAddRegisterNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddRegisterNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddRegisterNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddRegisterNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddRegisterNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddRegisterNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddRegisterNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddRegisterNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddRegisterNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddRegisterNum_ProtoModID_Parse(name, value);
  }

  typedef stAddRegisterNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddRegisterNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddRegisterNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddRegisterNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddRegisterNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddRegisterNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddRegisterNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddRegisterNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddRegisterNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stAddRegisterNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stAddRegisterNum* default_instance_;
};
// -------------------------------------------------------------------

class stHeroLeagueMatch : public ::google::protobuf::Message {
 public:
  stHeroLeagueMatch();
  virtual ~stHeroLeagueMatch();

  stHeroLeagueMatch(const stHeroLeagueMatch& from);

  inline stHeroLeagueMatch& operator=(const stHeroLeagueMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroLeagueMatch& default_instance();

  void Swap(stHeroLeagueMatch* other);

  // implements Message ----------------------------------------------

  stHeroLeagueMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroLeagueMatch& from);
  void MergeFrom(const stHeroLeagueMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHeroLeagueMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHeroLeagueMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHeroLeagueMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHeroLeagueMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHeroLeagueMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHeroLeagueMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHeroLeagueMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHeroLeagueMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHeroLeagueMatch_ProtoModID_Parse(name, value);
  }

  typedef stHeroLeagueMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHeroLeagueMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHeroLeagueMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHeroLeagueMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHeroLeagueMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHeroLeagueMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHeroLeagueMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHeroLeagueMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stHeroLeagueMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stHeroLeagueMatch* default_instance_;
};
// -------------------------------------------------------------------

class stHeroLeagueCancelMatch : public ::google::protobuf::Message {
 public:
  stHeroLeagueCancelMatch();
  virtual ~stHeroLeagueCancelMatch();

  stHeroLeagueCancelMatch(const stHeroLeagueCancelMatch& from);

  inline stHeroLeagueCancelMatch& operator=(const stHeroLeagueCancelMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroLeagueCancelMatch& default_instance();

  void Swap(stHeroLeagueCancelMatch* other);

  // implements Message ----------------------------------------------

  stHeroLeagueCancelMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroLeagueCancelMatch& from);
  void MergeFrom(const stHeroLeagueCancelMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHeroLeagueCancelMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHeroLeagueCancelMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHeroLeagueCancelMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHeroLeagueCancelMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHeroLeagueCancelMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHeroLeagueCancelMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHeroLeagueCancelMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHeroLeagueCancelMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHeroLeagueCancelMatch_ProtoModID_Parse(name, value);
  }

  typedef stHeroLeagueCancelMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHeroLeagueCancelMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHeroLeagueCancelMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHeroLeagueCancelMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHeroLeagueCancelMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHeroLeagueCancelMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHeroLeagueCancelMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHeroLeagueCancelMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHeroLeagueCancelMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stHeroLeagueCancelMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stHeroLeagueCancelMatch* default_instance_;
};
// -------------------------------------------------------------------

class stPubRoleInfo : public ::google::protobuf::Message {
 public:
  stPubRoleInfo();
  virtual ~stPubRoleInfo();

  stPubRoleInfo(const stPubRoleInfo& from);

  inline stPubRoleInfo& operator=(const stPubRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPubRoleInfo& default_instance();

  void Swap(stPubRoleInfo* other);

  // implements Message ----------------------------------------------

  stPubRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPubRoleInfo& from);
  void MergeFrom(const stPubRoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 pubCharID = 2;
  inline bool has_pubcharid() const;
  inline void clear_pubcharid();
  static const int kPubCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 pubcharid() const;
  inline void set_pubcharid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 3;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 6;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 6;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 job = 7;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 7;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 8;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 8;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 9;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 9;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 pubServerIndex = 10;
  inline bool has_pubserverindex() const;
  inline void clear_pubserverindex();
  static const int kPubServerIndexFieldNumber = 10;
  inline ::google::protobuf::uint32 pubserverindex() const;
  inline void set_pubserverindex(::google::protobuf::uint32 value);

  // optional uint32 score = 11;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 11;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional bool winOrLoss = 12;
  inline bool has_winorloss() const;
  inline void clear_winorloss();
  static const int kWinOrLossFieldNumber = 12;
  inline bool winorloss() const;
  inline void set_winorloss(bool value);

  // optional uint32 photoID = 13;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 13;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stPubRoleInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_pubcharid();
  inline void clear_has_pubcharid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_pubserverindex();
  inline void clear_has_pubserverindex();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_winorloss();
  inline void clear_has_winorloss();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 pubcharid_;
  ::std::string* name_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 pubserverindex_;
  ::google::protobuf::uint32 score_;
  bool winorloss_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stPubRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyHeroLeagueResult : public ::google::protobuf::Message {
 public:
  stNotifyHeroLeagueResult();
  virtual ~stNotifyHeroLeagueResult();

  stNotifyHeroLeagueResult(const stNotifyHeroLeagueResult& from);

  inline stNotifyHeroLeagueResult& operator=(const stNotifyHeroLeagueResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyHeroLeagueResult& default_instance();

  void Swap(stNotifyHeroLeagueResult* other);

  // implements Message ----------------------------------------------

  stNotifyHeroLeagueResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyHeroLeagueResult& from);
  void MergeFrom(const stNotifyHeroLeagueResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyHeroLeagueResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyHeroLeagueResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyHeroLeagueResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyHeroLeagueResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyHeroLeagueResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyHeroLeagueResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyHeroLeagueResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyHeroLeagueResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyHeroLeagueResult_ProtoModID_Parse(name, value);
  }

  typedef stNotifyHeroLeagueResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyHeroLeagueResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyHeroLeagueResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyHeroLeagueResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyHeroLeagueResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyHeroLeagueResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyHeroLeagueResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyHeroLeagueResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyHeroLeagueResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PubGame.stPubRoleInfo user1 = 1;
  inline bool has_user1() const;
  inline void clear_user1();
  static const int kUser1FieldNumber = 1;
  inline const ::PubGame::stPubRoleInfo& user1() const;
  inline ::PubGame::stPubRoleInfo* mutable_user1();
  inline ::PubGame::stPubRoleInfo* release_user1();
  inline void set_allocated_user1(::PubGame::stPubRoleInfo* user1);

  // optional .PubGame.stPubRoleInfo user2 = 2;
  inline bool has_user2() const;
  inline void clear_user2();
  static const int kUser2FieldNumber = 2;
  inline const ::PubGame::stPubRoleInfo& user2() const;
  inline ::PubGame::stPubRoleInfo* mutable_user2();
  inline ::PubGame::stPubRoleInfo* release_user2();
  inline void set_allocated_user2(::PubGame::stPubRoleInfo* user2);

  // @@protoc_insertion_point(class_scope:PubGame.stNotifyHeroLeagueResult)
 private:
  inline void set_has_user1();
  inline void clear_has_user1();
  inline void set_has_user2();
  inline void clear_has_user2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PubGame::stPubRoleInfo* user1_;
  ::PubGame::stPubRoleInfo* user2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stNotifyHeroLeagueResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynPubRoleList : public ::google::protobuf::Message {
 public:
  stSynPubRoleList();
  virtual ~stSynPubRoleList();

  stSynPubRoleList(const stSynPubRoleList& from);

  inline stSynPubRoleList& operator=(const stSynPubRoleList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynPubRoleList& default_instance();

  void Swap(stSynPubRoleList* other);

  // implements Message ----------------------------------------------

  stSynPubRoleList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynPubRoleList& from);
  void MergeFrom(const stSynPubRoleList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynPubRoleList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynPubRoleList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynPubRoleList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynPubRoleList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynPubRoleList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynPubRoleList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynPubRoleList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynPubRoleList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynPubRoleList_ProtoModID_Parse(name, value);
  }

  typedef stSynPubRoleList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynPubRoleList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynPubRoleList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynPubRoleList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynPubRoleList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynPubRoleList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynPubRoleList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynPubRoleList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynPubRoleList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline ::google::protobuf::uint32 tag() const;
  inline void set_tag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stSynPubRoleList)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stSynPubRoleList* default_instance_;
};
// -------------------------------------------------------------------

class stSynRoleInfo : public ::google::protobuf::Message {
 public:
  stSynRoleInfo();
  virtual ~stSynRoleInfo();

  stSynRoleInfo(const stSynRoleInfo& from);

  inline stSynRoleInfo& operator=(const stSynRoleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRoleInfo& default_instance();

  void Swap(stSynRoleInfo* other);

  // implements Message ----------------------------------------------

  stSynRoleInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRoleInfo& from);
  void MergeFrom(const stSynRoleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 pubCharID = 1;
  inline bool has_pubcharid() const;
  inline void clear_pubcharid();
  static const int kPubCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 pubcharid() const;
  inline void set_pubcharid(::google::protobuf::uint32 value);

  // optional uint32 pubServerIndex = 2;
  inline bool has_pubserverindex() const;
  inline void clear_pubserverindex();
  static const int kPubServerIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 pubserverindex() const;
  inline void set_pubserverindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stSynRoleInfo)
 private:
  inline void set_has_pubcharid();
  inline void clear_has_pubcharid();
  inline void set_has_pubserverindex();
  inline void clear_has_pubserverindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pubcharid_;
  ::google::protobuf::uint32 pubserverindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stSynRoleInfo* default_instance_;
};
// -------------------------------------------------------------------

class stTeam : public ::google::protobuf::Message {
 public:
  stTeam();
  virtual ~stTeam();

  stTeam(const stTeam& from);

  inline stTeam& operator=(const stTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTeam& default_instance();

  void Swap(stTeam* other);

  // implements Message ----------------------------------------------

  stTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTeam& from);
  void MergeFrom(const stTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PubGame.stPubRoleInfo user1 = 1;
  inline bool has_user1() const;
  inline void clear_user1();
  static const int kUser1FieldNumber = 1;
  inline const ::PubGame::stPubRoleInfo& user1() const;
  inline ::PubGame::stPubRoleInfo* mutable_user1();
  inline ::PubGame::stPubRoleInfo* release_user1();
  inline void set_allocated_user1(::PubGame::stPubRoleInfo* user1);

  // optional .PubGame.stPubRoleInfo user2 = 2;
  inline bool has_user2() const;
  inline void clear_user2();
  static const int kUser2FieldNumber = 2;
  inline const ::PubGame::stPubRoleInfo& user2() const;
  inline ::PubGame::stPubRoleInfo* mutable_user2();
  inline ::PubGame::stPubRoleInfo* release_user2();
  inline void set_allocated_user2(::PubGame::stPubRoleInfo* user2);

  // @@protoc_insertion_point(class_scope:PubGame.stTeam)
 private:
  inline void set_has_user1();
  inline void clear_has_user1();
  inline void set_has_user2();
  inline void clear_has_user2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PubGame::stPubRoleInfo* user1_;
  ::PubGame::stPubRoleInfo* user2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stTeam* default_instance_;
};
// -------------------------------------------------------------------

class stSynPubRoleListResult : public ::google::protobuf::Message {
 public:
  stSynPubRoleListResult();
  virtual ~stSynPubRoleListResult();

  stSynPubRoleListResult(const stSynPubRoleListResult& from);

  inline stSynPubRoleListResult& operator=(const stSynPubRoleListResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynPubRoleListResult& default_instance();

  void Swap(stSynPubRoleListResult* other);

  // implements Message ----------------------------------------------

  stSynPubRoleListResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynPubRoleListResult& from);
  void MergeFrom(const stSynPubRoleListResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynPubRoleListResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynPubRoleListResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynPubRoleListResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynPubRoleListResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynPubRoleListResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynPubRoleListResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynPubRoleListResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynPubRoleListResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynPubRoleListResult_ProtoModID_Parse(name, value);
  }

  typedef stSynPubRoleListResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynPubRoleListResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynPubRoleListResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynPubRoleListResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynPubRoleListResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynPubRoleListResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynPubRoleListResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynPubRoleListResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynPubRoleListResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .PubGame.stTeam team = 1;
  inline int team_size() const;
  inline void clear_team();
  static const int kTeamFieldNumber = 1;
  inline const ::PubGame::stTeam& team(int index) const;
  inline ::PubGame::stTeam* mutable_team(int index);
  inline ::PubGame::stTeam* add_team();
  inline const ::google::protobuf::RepeatedPtrField< ::PubGame::stTeam >&
      team() const;
  inline ::google::protobuf::RepeatedPtrField< ::PubGame::stTeam >*
      mutable_team();

  // repeated .PubGame.stPubRoleInfo charIDs = 2;
  inline int charids_size() const;
  inline void clear_charids();
  static const int kCharIDsFieldNumber = 2;
  inline const ::PubGame::stPubRoleInfo& charids(int index) const;
  inline ::PubGame::stPubRoleInfo* mutable_charids(int index);
  inline ::PubGame::stPubRoleInfo* add_charids();
  inline const ::google::protobuf::RepeatedPtrField< ::PubGame::stPubRoleInfo >&
      charids() const;
  inline ::google::protobuf::RepeatedPtrField< ::PubGame::stPubRoleInfo >*
      mutable_charids();

  // optional bool isFinal = 3;
  inline bool has_isfinal() const;
  inline void clear_isfinal();
  static const int kIsFinalFieldNumber = 3;
  inline bool isfinal() const;
  inline void set_isfinal(bool value);

  // @@protoc_insertion_point(class_scope:PubGame.stSynPubRoleListResult)
 private:
  inline void set_has_isfinal();
  inline void clear_has_isfinal();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PubGame::stTeam > team_;
  ::google::protobuf::RepeatedPtrField< ::PubGame::stPubRoleInfo > charids_;
  bool isfinal_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stSynPubRoleListResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqMenberInfo : public ::google::protobuf::Message {
 public:
  stReqMenberInfo();
  virtual ~stReqMenberInfo();

  stReqMenberInfo(const stReqMenberInfo& from);

  inline stReqMenberInfo& operator=(const stReqMenberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqMenberInfo& default_instance();

  void Swap(stReqMenberInfo* other);

  // implements Message ----------------------------------------------

  stReqMenberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqMenberInfo& from);
  void MergeFrom(const stReqMenberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqMenberInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqMenberInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqMenberInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqMenberInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqMenberInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqMenberInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqMenberInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqMenberInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqMenberInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqMenberInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqMenberInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqMenberInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqMenberInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqMenberInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqMenberInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqMenberInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqMenberInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqMenberInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stReqMenberInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stReqMenberInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynChampionInfo : public ::google::protobuf::Message {
 public:
  stSynChampionInfo();
  virtual ~stSynChampionInfo();

  stSynChampionInfo(const stSynChampionInfo& from);

  inline stSynChampionInfo& operator=(const stSynChampionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynChampionInfo& default_instance();

  void Swap(stSynChampionInfo* other);

  // implements Message ----------------------------------------------

  stSynChampionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynChampionInfo& from);
  void MergeFrom(const stSynChampionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 areaCode = 3;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional bool leader = 7;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 7;
  inline bool leader() const;
  inline void set_leader(bool value);

  // optional uint32 battlePower = 8;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 8;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 pos = 9;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 9;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 headID = 10;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 10;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 11;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 11;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 12;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 12;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 13;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 13;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 14;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 14;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 15;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 15;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 16;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 17;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 18;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 18;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 19;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 19;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 20;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 20;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 21;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 21;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 22;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 22;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 23;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 23;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 photoID = 24;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 24;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stSynChampionInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  bool leader_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stSynChampionInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqSynChampionInfo : public ::google::protobuf::Message {
 public:
  stReqSynChampionInfo();
  virtual ~stReqSynChampionInfo();

  stReqSynChampionInfo(const stReqSynChampionInfo& from);

  inline stReqSynChampionInfo& operator=(const stReqSynChampionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSynChampionInfo& default_instance();

  void Swap(stReqSynChampionInfo* other);

  // implements Message ----------------------------------------------

  stReqSynChampionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSynChampionInfo& from);
  void MergeFrom(const stReqSynChampionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSynChampionInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSynChampionInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSynChampionInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSynChampionInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSynChampionInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSynChampionInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSynChampionInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSynChampionInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSynChampionInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqSynChampionInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSynChampionInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSynChampionInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSynChampionInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSynChampionInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSynChampionInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSynChampionInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSynChampionInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSynChampionInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PubGame.stSynChampionInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PubGame::stSynChampionInfo& info() const;
  inline ::PubGame::stSynChampionInfo* mutable_info();
  inline ::PubGame::stSynChampionInfo* release_info();
  inline void set_allocated_info(::PubGame::stSynChampionInfo* info);

  // @@protoc_insertion_point(class_scope:PubGame.stReqSynChampionInfo)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PubGame::stSynChampionInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stReqSynChampionInfo* default_instance_;
};
// -------------------------------------------------------------------

class stGloryUserPart : public ::google::protobuf::Message {
 public:
  stGloryUserPart();
  virtual ~stGloryUserPart();

  stGloryUserPart(const stGloryUserPart& from);

  inline stGloryUserPart& operator=(const stGloryUserPart& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGloryUserPart& default_instance();

  void Swap(stGloryUserPart* other);

  // implements Message ----------------------------------------------

  stGloryUserPart* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGloryUserPart& from);
  void MergeFrom(const stGloryUserPart& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 2;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 headID = 8;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 8;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 9;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 9;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 10;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 10;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 11;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 11;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 12;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 12;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 13;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 13;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 14;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 14;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 15;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 15;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 16;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 17;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 18;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 18;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 19;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 19;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 20;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 20;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 21;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 21;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stGloryUserPart)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::std::string* name_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stGloryUserPart* default_instance_;
};
// -------------------------------------------------------------------

class stGloryUserDetail : public ::google::protobuf::Message {
 public:
  stGloryUserDetail();
  virtual ~stGloryUserDetail();

  stGloryUserDetail(const stGloryUserDetail& from);

  inline stGloryUserDetail& operator=(const stGloryUserDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGloryUserDetail& default_instance();

  void Swap(stGloryUserDetail* other);

  // implements Message ----------------------------------------------

  stGloryUserDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGloryUserDetail& from);
  void MergeFrom(const stGloryUserDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 2;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 headID = 8;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 8;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 9;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 9;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 10;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 10;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 11;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 11;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 12;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 12;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 13;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 13;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 14;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 14;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 15;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 15;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 16;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 17;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 18;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 18;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 19;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 19;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 20;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 20;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 21;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 21;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 killNum = 22;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 22;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint32 evenKillNum = 23;
  inline bool has_evenkillnum() const;
  inline void clear_evenkillnum();
  static const int kEvenKillNumFieldNumber = 23;
  inline ::google::protobuf::uint32 evenkillnum() const;
  inline void set_evenkillnum(::google::protobuf::uint32 value);

  // optional uint32 totalKillNum = 24;
  inline bool has_totalkillnum() const;
  inline void clear_totalkillnum();
  static const int kTotalKillNumFieldNumber = 24;
  inline ::google::protobuf::uint32 totalkillnum() const;
  inline void set_totalkillnum(::google::protobuf::uint32 value);

  // optional uint32 gloryVal = 25;
  inline bool has_gloryval() const;
  inline void clear_gloryval();
  static const int kGloryValFieldNumber = 25;
  inline ::google::protobuf::uint32 gloryval() const;
  inline void set_gloryval(::google::protobuf::uint32 value);

  // optional uint32 gloryActionTime = 26;
  inline bool has_gloryactiontime() const;
  inline void clear_gloryactiontime();
  static const int kGloryActionTimeFieldNumber = 26;
  inline ::google::protobuf::uint32 gloryactiontime() const;
  inline void set_gloryactiontime(::google::protobuf::uint32 value);

  // optional uint32 prostatedNum = 27;
  inline bool has_prostatednum() const;
  inline void clear_prostatednum();
  static const int kProstatedNumFieldNumber = 27;
  inline ::google::protobuf::uint32 prostatednum() const;
  inline void set_prostatednum(::google::protobuf::uint32 value);

  // optional uint32 prostateTime = 28;
  inline bool has_prostatetime() const;
  inline void clear_prostatetime();
  static const int kProstateTimeFieldNumber = 28;
  inline ::google::protobuf::uint32 prostatetime() const;
  inline void set_prostatetime(::google::protobuf::uint32 value);

  // optional uint32 normalId = 29;
  inline bool has_normalid() const;
  inline void clear_normalid();
  static const int kNormalIdFieldNumber = 29;
  inline ::google::protobuf::uint32 normalid() const;
  inline void set_normalid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stGloryUserDetail)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_evenkillnum();
  inline void clear_has_evenkillnum();
  inline void set_has_totalkillnum();
  inline void clear_has_totalkillnum();
  inline void set_has_gloryval();
  inline void clear_has_gloryval();
  inline void set_has_gloryactiontime();
  inline void clear_has_gloryactiontime();
  inline void set_has_prostatednum();
  inline void clear_has_prostatednum();
  inline void set_has_prostatetime();
  inline void clear_has_prostatetime();
  inline void set_has_normalid();
  inline void clear_has_normalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::std::string* name_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 evenkillnum_;
  ::google::protobuf::uint32 totalkillnum_;
  ::google::protobuf::uint32 gloryval_;
  ::google::protobuf::uint32 gloryactiontime_;
  ::google::protobuf::uint32 prostatednum_;
  ::google::protobuf::uint32 prostatetime_;
  ::google::protobuf::uint32 normalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(29 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stGloryUserDetail* default_instance_;
};
// -------------------------------------------------------------------

class stGloryUser : public ::google::protobuf::Message {
 public:
  stGloryUser();
  virtual ~stGloryUser();

  stGloryUser(const stGloryUser& from);

  inline stGloryUser& operator=(const stGloryUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGloryUser& default_instance();

  void Swap(stGloryUser* other);

  // implements Message ----------------------------------------------

  stGloryUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGloryUser& from);
  void MergeFrom(const stGloryUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 2;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 killNum = 4;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 4;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint32 evenKillNum = 5;
  inline bool has_evenkillnum() const;
  inline void clear_evenkillnum();
  static const int kEvenKillNumFieldNumber = 5;
  inline ::google::protobuf::uint32 evenkillnum() const;
  inline void set_evenkillnum(::google::protobuf::uint32 value);

  // optional uint32 totalKillNum = 6;
  inline bool has_totalkillnum() const;
  inline void clear_totalkillnum();
  static const int kTotalKillNumFieldNumber = 6;
  inline ::google::protobuf::uint32 totalkillnum() const;
  inline void set_totalkillnum(::google::protobuf::uint32 value);

  // optional uint32 gloryVal = 7;
  inline bool has_gloryval() const;
  inline void clear_gloryval();
  static const int kGloryValFieldNumber = 7;
  inline ::google::protobuf::uint32 gloryval() const;
  inline void set_gloryval(::google::protobuf::uint32 value);

  // optional uint32 gloryActionTime = 8;
  inline bool has_gloryactiontime() const;
  inline void clear_gloryactiontime();
  static const int kGloryActionTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 gloryactiontime() const;
  inline void set_gloryactiontime(::google::protobuf::uint32 value);

  // optional uint32 prostatedNum = 9;
  inline bool has_prostatednum() const;
  inline void clear_prostatednum();
  static const int kProstatedNumFieldNumber = 9;
  inline ::google::protobuf::uint32 prostatednum() const;
  inline void set_prostatednum(::google::protobuf::uint32 value);

  // optional uint32 prostateTime = 10;
  inline bool has_prostatetime() const;
  inline void clear_prostatetime();
  static const int kProstateTimeFieldNumber = 10;
  inline ::google::protobuf::uint32 prostatetime() const;
  inline void set_prostatetime(::google::protobuf::uint32 value);

  // optional uint32 normalId = 11;
  inline bool has_normalid() const;
  inline void clear_normalid();
  static const int kNormalIdFieldNumber = 11;
  inline ::google::protobuf::uint32 normalid() const;
  inline void set_normalid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stGloryUser)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_evenkillnum();
  inline void clear_has_evenkillnum();
  inline void set_has_totalkillnum();
  inline void clear_has_totalkillnum();
  inline void set_has_gloryval();
  inline void clear_has_gloryval();
  inline void set_has_gloryactiontime();
  inline void clear_has_gloryactiontime();
  inline void set_has_prostatednum();
  inline void clear_has_prostatednum();
  inline void set_has_prostatetime();
  inline void clear_has_prostatetime();
  inline void set_has_normalid();
  inline void clear_has_normalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::std::string* name_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 evenkillnum_;
  ::google::protobuf::uint32 totalkillnum_;
  ::google::protobuf::uint32 gloryval_;
  ::google::protobuf::uint32 gloryactiontime_;
  ::google::protobuf::uint32 prostatednum_;
  ::google::protobuf::uint32 prostatetime_;
  ::google::protobuf::uint32 normalid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stGloryUser* default_instance_;
};
// -------------------------------------------------------------------

class stEnterResBattle : public ::google::protobuf::Message {
 public:
  stEnterResBattle();
  virtual ~stEnterResBattle();

  stEnterResBattle(const stEnterResBattle& from);

  inline stEnterResBattle& operator=(const stEnterResBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterResBattle& default_instance();

  void Swap(stEnterResBattle* other);

  // implements Message ----------------------------------------------

  stEnterResBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterResBattle& from);
  void MergeFrom(const stEnterResBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEnterResBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEnterResBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEnterResBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEnterResBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEnterResBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEnterResBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEnterResBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEnterResBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEnterResBattle_ProtoModID_Parse(name, value);
  }

  typedef stEnterResBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEnterResBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEnterResBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEnterResBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEnterResBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEnterResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEnterResBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEnterResBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEnterResBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 copyMapLevel = 2;
  inline bool has_copymaplevel() const;
  inline void clear_copymaplevel();
  static const int kCopyMapLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 copymaplevel() const;
  inline void set_copymaplevel(::google::protobuf::uint32 value);

  // optional uint32 guildId = 3;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 3;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional .PubGame.stGloryUser self = 4;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 4;
  inline const ::PubGame::stGloryUser& self() const;
  inline ::PubGame::stGloryUser* mutable_self();
  inline ::PubGame::stGloryUser* release_self();
  inline void set_allocated_self(::PubGame::stGloryUser* self);

  // @@protoc_insertion_point(class_scope:PubGame.stEnterResBattle)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_copymaplevel();
  inline void clear_has_copymaplevel();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_self();
  inline void clear_has_self();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 copymaplevel_;
  ::PubGame::stGloryUser* self_;
  ::google::protobuf::uint32 guildid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stEnterResBattle* default_instance_;
};
// -------------------------------------------------------------------

class stSynResBattleUserData : public ::google::protobuf::Message {
 public:
  stSynResBattleUserData();
  virtual ~stSynResBattleUserData();

  stSynResBattleUserData(const stSynResBattleUserData& from);

  inline stSynResBattleUserData& operator=(const stSynResBattleUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynResBattleUserData& default_instance();

  void Swap(stSynResBattleUserData* other);

  // implements Message ----------------------------------------------

  stSynResBattleUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynResBattleUserData& from);
  void MergeFrom(const stSynResBattleUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynResBattleUserData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynResBattleUserData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynResBattleUserData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynResBattleUserData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynResBattleUserData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynResBattleUserData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynResBattleUserData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynResBattleUserData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynResBattleUserData_ProtoModID_Parse(name, value);
  }

  typedef stSynResBattleUserData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynResBattleUserData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynResBattleUserData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynResBattleUserData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynResBattleUserData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynResBattleUserData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynResBattleUserData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynResBattleUserData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynResBattleUserData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PubGame.stGloryUser user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::PubGame::stGloryUser& user() const;
  inline ::PubGame::stGloryUser* mutable_user();
  inline ::PubGame::stGloryUser* release_user();
  inline void set_allocated_user(::PubGame::stGloryUser* user);

  // @@protoc_insertion_point(class_scope:PubGame.stSynResBattleUserData)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PubGame::stGloryUser* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stSynResBattleUserData* default_instance_;
};
// -------------------------------------------------------------------

class stSynResBattleTop50 : public ::google::protobuf::Message {
 public:
  stSynResBattleTop50();
  virtual ~stSynResBattleTop50();

  stSynResBattleTop50(const stSynResBattleTop50& from);

  inline stSynResBattleTop50& operator=(const stSynResBattleTop50& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynResBattleTop50& default_instance();

  void Swap(stSynResBattleTop50* other);

  // implements Message ----------------------------------------------

  stSynResBattleTop50* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynResBattleTop50& from);
  void MergeFrom(const stSynResBattleTop50& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynResBattleTop50_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynResBattleTop50_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynResBattleTop50_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynResBattleTop50_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynResBattleTop50_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynResBattleTop50_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynResBattleTop50_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynResBattleTop50_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynResBattleTop50_ProtoModID_Parse(name, value);
  }

  typedef stSynResBattleTop50_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynResBattleTop50_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynResBattleTop50_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynResBattleTop50_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynResBattleTop50_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynResBattleTop50_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynResBattleTop50_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynResBattleTop50_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynResBattleTop50_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .PubGame.stGloryUserPart detail = 1;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 1;
  inline const ::PubGame::stGloryUserPart& detail(int index) const;
  inline ::PubGame::stGloryUserPart* mutable_detail(int index);
  inline ::PubGame::stGloryUserPart* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::PubGame::stGloryUserPart >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::PubGame::stGloryUserPart >*
      mutable_detail();

  // @@protoc_insertion_point(class_scope:PubGame.stSynResBattleTop50)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PubGame::stGloryUserPart > detail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stSynResBattleTop50* default_instance_;
};
// -------------------------------------------------------------------

class stSynResBattleKing : public ::google::protobuf::Message {
 public:
  stSynResBattleKing();
  virtual ~stSynResBattleKing();

  stSynResBattleKing(const stSynResBattleKing& from);

  inline stSynResBattleKing& operator=(const stSynResBattleKing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynResBattleKing& default_instance();

  void Swap(stSynResBattleKing* other);

  // implements Message ----------------------------------------------

  stSynResBattleKing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynResBattleKing& from);
  void MergeFrom(const stSynResBattleKing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynResBattleKing_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynResBattleKing_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynResBattleKing_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynResBattleKing_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynResBattleKing_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynResBattleKing_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynResBattleKing_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynResBattleKing_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynResBattleKing_ProtoModID_Parse(name, value);
  }

  typedef stSynResBattleKing_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynResBattleKing_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynResBattleKing_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynResBattleKing_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynResBattleKing_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynResBattleKing_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynResBattleKing_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynResBattleKing_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynResBattleKing_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool clear = 1;
  inline bool has_clear() const;
  inline void clear_clear();
  static const int kClearFieldNumber = 1;
  inline bool clear() const;
  inline void set_clear(bool value);

  // optional .PubGame.stGloryUserDetail king = 2;
  inline bool has_king() const;
  inline void clear_king();
  static const int kKingFieldNumber = 2;
  inline const ::PubGame::stGloryUserDetail& king() const;
  inline ::PubGame::stGloryUserDetail* mutable_king();
  inline ::PubGame::stGloryUserDetail* release_king();
  inline void set_allocated_king(::PubGame::stGloryUserDetail* king);

  // @@protoc_insertion_point(class_scope:PubGame.stSynResBattleKing)
 private:
  inline void set_has_clear();
  inline void clear_has_clear();
  inline void set_has_king();
  inline void clear_has_king();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PubGame::stGloryUserDetail* king_;
  bool clear_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stSynResBattleKing* default_instance_;
};
// -------------------------------------------------------------------

class stBroadResBattleInvite : public ::google::protobuf::Message {
 public:
  stBroadResBattleInvite();
  virtual ~stBroadResBattleInvite();

  stBroadResBattleInvite(const stBroadResBattleInvite& from);

  inline stBroadResBattleInvite& operator=(const stBroadResBattleInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBroadResBattleInvite& default_instance();

  void Swap(stBroadResBattleInvite* other);

  // implements Message ----------------------------------------------

  stBroadResBattleInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBroadResBattleInvite& from);
  void MergeFrom(const stBroadResBattleInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBroadResBattleInvite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBroadResBattleInvite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBroadResBattleInvite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBroadResBattleInvite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBroadResBattleInvite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBroadResBattleInvite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBroadResBattleInvite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBroadResBattleInvite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBroadResBattleInvite_ProtoModID_Parse(name, value);
  }

  typedef stBroadResBattleInvite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBroadResBattleInvite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBroadResBattleInvite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBroadResBattleInvite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBroadResBattleInvite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBroadResBattleInvite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBroadResBattleInvite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBroadResBattleInvite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBroadResBattleInvite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 guildId = 3;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 3;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 6;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 6;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 7;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 7;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 instanceLvl = 8;
  inline bool has_instancelvl() const;
  inline void clear_instancelvl();
  static const int kInstanceLvlFieldNumber = 8;
  inline ::google::protobuf::uint32 instancelvl() const;
  inline void set_instancelvl(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PubGame.stBroadResBattleInvite)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_instancelvl();
  inline void clear_has_instancelvl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 instancelvl_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stBroadResBattleInvite* default_instance_;
};
// -------------------------------------------------------------------

class stReplyInviteResBattle : public ::google::protobuf::Message {
 public:
  stReplyInviteResBattle();
  virtual ~stReplyInviteResBattle();

  stReplyInviteResBattle(const stReplyInviteResBattle& from);

  inline stReplyInviteResBattle& operator=(const stReplyInviteResBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplyInviteResBattle& default_instance();

  void Swap(stReplyInviteResBattle* other);

  // implements Message ----------------------------------------------

  stReplyInviteResBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplyInviteResBattle& from);
  void MergeFrom(const stReplyInviteResBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplyInviteResBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplyInviteResBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplyInviteResBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplyInviteResBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplyInviteResBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplyInviteResBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplyInviteResBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplyInviteResBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplyInviteResBattle_ProtoModID_Parse(name, value);
  }

  typedef stReplyInviteResBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplyInviteResBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplyInviteResBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplyInviteResBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplyInviteResBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplyInviteResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplyInviteResBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplyInviteResBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplyInviteResBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool agree = 1;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 1;
  inline bool agree() const;
  inline void set_agree(bool value);

  // optional uint32 charId = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 guildId = 3;
  inline bool has_guildid() const;
  inline void clear_guildid();
  static const int kGuildIdFieldNumber = 3;
  inline ::google::protobuf::uint32 guildid() const;
  inline void set_guildid(::google::protobuf::uint32 value);

  // optional uint32 inviteId = 4;
  inline bool has_inviteid() const;
  inline void clear_inviteid();
  static const int kInviteIdFieldNumber = 4;
  inline ::google::protobuf::uint32 inviteid() const;
  inline void set_inviteid(::google::protobuf::uint32 value);

  // optional .PubGame.stGloryUser self = 5;
  inline bool has_self() const;
  inline void clear_self();
  static const int kSelfFieldNumber = 5;
  inline const ::PubGame::stGloryUser& self() const;
  inline ::PubGame::stGloryUser* mutable_self();
  inline ::PubGame::stGloryUser* release_self();
  inline void set_allocated_self(::PubGame::stGloryUser* self);

  // @@protoc_insertion_point(class_scope:PubGame.stReplyInviteResBattle)
 private:
  inline void set_has_agree();
  inline void clear_has_agree();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_guildid();
  inline void clear_has_guildid();
  inline void set_has_inviteid();
  inline void clear_has_inviteid();
  inline void set_has_self();
  inline void clear_has_self();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool agree_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 guildid_;
  ::google::protobuf::uint32 inviteid_;
  ::PubGame::stGloryUser* self_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stReplyInviteResBattle* default_instance_;
};
// -------------------------------------------------------------------

class stResBattleResChange : public ::google::protobuf::Message {
 public:
  stResBattleResChange();
  virtual ~stResBattleResChange();

  stResBattleResChange(const stResBattleResChange& from);

  inline stResBattleResChange& operator=(const stResBattleResChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResBattleResChange& default_instance();

  void Swap(stResBattleResChange* other);

  // implements Message ----------------------------------------------

  stResBattleResChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResBattleResChange& from);
  void MergeFrom(const stResBattleResChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResBattleResChange_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResBattleResChange_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResBattleResChange_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResBattleResChange_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResBattleResChange_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResBattleResChange_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResBattleResChange_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResBattleResChange_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResBattleResChange_ProtoModID_Parse(name, value);
  }

  typedef stResBattleResChange_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResBattleResChange_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResBattleResChange_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResBattleResChange_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResBattleResChange_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResBattleResChange_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResBattleResChange_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResBattleResChange_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResBattleResChange_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool isAdd = 1;
  inline bool has_isadd() const;
  inline void clear_isadd();
  static const int kIsAddFieldNumber = 1;
  inline bool isadd() const;
  inline void set_isadd(bool value);

  // optional uint32 charId = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 item = 3;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline ::google::protobuf::uint32 item() const;
  inline void set_item(::google::protobuf::uint32 value);

  // optional uint32 val = 4;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 4;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);

  // optional string desc = 5;
  inline bool has_desc() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 5;
  inline const ::std::string& desc() const;
  inline void set_desc(const ::std::string& value);
  inline void set_desc(const char* value);
  inline void set_desc(const char* value, size_t size);
  inline ::std::string* mutable_desc();
  inline ::std::string* release_desc();
  inline void set_allocated_desc(::std::string* desc);

  // @@protoc_insertion_point(class_scope:PubGame.stResBattleResChange)
 private:
  inline void set_has_isadd();
  inline void clear_has_isadd();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_desc();
  inline void clear_has_desc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isadd_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 item_;
  ::google::protobuf::uint32 val_;
  ::std::string* desc_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stResBattleResChange* default_instance_;
};
// -------------------------------------------------------------------

class stSendResBattle2Pub : public ::google::protobuf::Message {
 public:
  stSendResBattle2Pub();
  virtual ~stSendResBattle2Pub();

  stSendResBattle2Pub(const stSendResBattle2Pub& from);

  inline stSendResBattle2Pub& operator=(const stSendResBattle2Pub& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendResBattle2Pub& default_instance();

  void Swap(stSendResBattle2Pub* other);

  // implements Message ----------------------------------------------

  stSendResBattle2Pub* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendResBattle2Pub& from);
  void MergeFrom(const stSendResBattle2Pub& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendResBattle2Pub_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendResBattle2Pub_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendResBattle2Pub_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendResBattle2Pub_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendResBattle2Pub_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendResBattle2Pub_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendResBattle2Pub_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendResBattle2Pub_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendResBattle2Pub_ProtoModID_Parse(name, value);
  }

  typedef stSendResBattle2Pub_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendResBattle2Pub_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendResBattle2Pub_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendResBattle2Pub_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendResBattle2Pub_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendResBattle2Pub_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendResBattle2Pub_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendResBattle2Pub_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendResBattle2Pub_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .PubGame.stGloryUserDetail king = 1;
  inline bool has_king() const;
  inline void clear_king();
  static const int kKingFieldNumber = 1;
  inline const ::PubGame::stGloryUserDetail& king() const;
  inline ::PubGame::stGloryUserDetail* mutable_king();
  inline ::PubGame::stGloryUserDetail* release_king();
  inline void set_allocated_king(::PubGame::stGloryUserDetail* king);

  // repeated .PubGame.stGloryUserDetail detail = 2;
  inline int detail_size() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 2;
  inline const ::PubGame::stGloryUserDetail& detail(int index) const;
  inline ::PubGame::stGloryUserDetail* mutable_detail(int index);
  inline ::PubGame::stGloryUserDetail* add_detail();
  inline const ::google::protobuf::RepeatedPtrField< ::PubGame::stGloryUserDetail >&
      detail() const;
  inline ::google::protobuf::RepeatedPtrField< ::PubGame::stGloryUserDetail >*
      mutable_detail();

  // @@protoc_insertion_point(class_scope:PubGame.stSendResBattle2Pub)
 private:
  inline void set_has_king();
  inline void clear_has_king();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PubGame::stGloryUserDetail* king_;
  ::google::protobuf::RepeatedPtrField< ::PubGame::stGloryUserDetail > detail_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PubGame_2eproto();
  friend void protobuf_AssignDesc_PubGame_2eproto();
  friend void protobuf_ShutdownFile_PubGame_2eproto();

  void InitAsDefaultInstance();
  static stSendResBattle2Pub* default_instance_;
};
// ===================================================================


// ===================================================================

// stLoginPubGame

// optional uint32 svrType = 1;
inline bool stLoginPubGame::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLoginPubGame::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLoginPubGame::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLoginPubGame::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 stLoginPubGame::svrtype() const {
  return svrtype_;
}
inline void stLoginPubGame::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
}

// optional uint32 svrID = 2;
inline bool stLoginPubGame::has_svrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLoginPubGame::set_has_svrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLoginPubGame::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLoginPubGame::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 stLoginPubGame::svrid() const {
  return svrid_;
}
inline void stLoginPubGame::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional string ip = 3;
inline bool stLoginPubGame::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stLoginPubGame::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stLoginPubGame::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stLoginPubGame::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stLoginPubGame::ip() const {
  return *ip_;
}
inline void stLoginPubGame::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stLoginPubGame::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stLoginPubGame::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stLoginPubGame::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stLoginPubGame::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stLoginPubGame::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 4;
inline bool stLoginPubGame::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stLoginPubGame::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stLoginPubGame::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stLoginPubGame::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 stLoginPubGame::port() const {
  return port_;
}
inline void stLoginPubGame::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional string key = 5;
inline bool stLoginPubGame::has_key() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stLoginPubGame::set_has_key() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stLoginPubGame::clear_has_key() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stLoginPubGame::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& stLoginPubGame::key() const {
  return *key_;
}
inline void stLoginPubGame::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void stLoginPubGame::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void stLoginPubGame::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stLoginPubGame::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* stLoginPubGame::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stLoginPubGame::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stTitleToPub

// optional uint32 activeID = 1;
inline bool stTitleToPub::has_activeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTitleToPub::set_has_activeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTitleToPub::clear_has_activeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTitleToPub::clear_activeid() {
  activeid_ = 0u;
  clear_has_activeid();
}
inline ::google::protobuf::uint32 stTitleToPub::activeid() const {
  return activeid_;
}
inline void stTitleToPub::set_activeid(::google::protobuf::uint32 value) {
  set_has_activeid();
  activeid_ = value;
}

// repeated uint32 gotSave = 2;
inline int stTitleToPub::gotsave_size() const {
  return gotsave_.size();
}
inline void stTitleToPub::clear_gotsave() {
  gotsave_.Clear();
}
inline ::google::protobuf::uint32 stTitleToPub::gotsave(int index) const {
  return gotsave_.Get(index);
}
inline void stTitleToPub::set_gotsave(int index, ::google::protobuf::uint32 value) {
  gotsave_.Set(index, value);
}
inline void stTitleToPub::add_gotsave(::google::protobuf::uint32 value) {
  gotsave_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stTitleToPub::gotsave() const {
  return gotsave_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stTitleToPub::mutable_gotsave() {
  return &gotsave_;
}

// repeated uint32 notSave = 3;
inline int stTitleToPub::notsave_size() const {
  return notsave_.size();
}
inline void stTitleToPub::clear_notsave() {
  notsave_.Clear();
}
inline ::google::protobuf::uint32 stTitleToPub::notsave(int index) const {
  return notsave_.Get(index);
}
inline void stTitleToPub::set_notsave(int index, ::google::protobuf::uint32 value) {
  notsave_.Set(index, value);
}
inline void stTitleToPub::add_notsave(::google::protobuf::uint32 value) {
  notsave_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stTitleToPub::notsave() const {
  return notsave_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stTitleToPub::mutable_notsave() {
  return &notsave_;
}

// -------------------------------------------------------------------

// stRoleInfo

// optional uint32 charID = 1;
inline bool stRoleInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRoleInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRoleInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRoleInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRoleInfo::charid() const {
  return charid_;
}
inline void stRoleInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string account = 2;
inline bool stRoleInfo::has_account() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRoleInfo::set_has_account() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRoleInfo::clear_has_account() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRoleInfo::clear_account() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    account_->clear();
  }
  clear_has_account();
}
inline const ::std::string& stRoleInfo::account() const {
  return *account_;
}
inline void stRoleInfo::set_account(const ::std::string& value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stRoleInfo::set_account(const char* value) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(value);
}
inline void stRoleInfo::set_account(const char* value, size_t size) {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  account_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRoleInfo::mutable_account() {
  set_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    account_ = new ::std::string;
  }
  return account_;
}
inline ::std::string* stRoleInfo::release_account() {
  clear_has_account();
  if (account_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = account_;
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRoleInfo::set_allocated_account(::std::string* account) {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (account) {
    set_has_account();
    account_ = account;
  } else {
    clear_has_account();
    account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 dataSize = 3;
inline bool stRoleInfo::has_datasize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRoleInfo::set_has_datasize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRoleInfo::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRoleInfo::clear_datasize() {
  datasize_ = 0u;
  clear_has_datasize();
}
inline ::google::protobuf::uint32 stRoleInfo::datasize() const {
  return datasize_;
}
inline void stRoleInfo::set_datasize(::google::protobuf::uint32 value) {
  set_has_datasize();
  datasize_ = value;
}

// optional bytes data = 4;
inline bool stRoleInfo::has_data() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRoleInfo::set_has_data() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRoleInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRoleInfo::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stRoleInfo::data() const {
  return *data_;
}
inline void stRoleInfo::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRoleInfo::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stRoleInfo::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRoleInfo::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stRoleInfo::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRoleInfo::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 5;
inline bool stRoleInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRoleInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRoleInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRoleInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stRoleInfo::ip() const {
  return *ip_;
}
inline void stRoleInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stRoleInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stRoleInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRoleInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stRoleInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRoleInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 normalServerID = 6;
inline bool stRoleInfo::has_normalserverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRoleInfo::set_has_normalserverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRoleInfo::clear_has_normalserverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRoleInfo::clear_normalserverid() {
  normalserverid_ = 0u;
  clear_has_normalserverid();
}
inline ::google::protobuf::uint32 stRoleInfo::normalserverid() const {
  return normalserverid_;
}
inline void stRoleInfo::set_normalserverid(::google::protobuf::uint32 value) {
  set_has_normalserverid();
  normalserverid_ = value;
}

// optional uint32 normalCharID = 7;
inline bool stRoleInfo::has_normalcharid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRoleInfo::set_has_normalcharid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRoleInfo::clear_has_normalcharid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRoleInfo::clear_normalcharid() {
  normalcharid_ = 0u;
  clear_has_normalcharid();
}
inline ::google::protobuf::uint32 stRoleInfo::normalcharid() const {
  return normalcharid_;
}
inline void stRoleInfo::set_normalcharid(::google::protobuf::uint32 value) {
  set_has_normalcharid();
  normalcharid_ = value;
}

// optional uint32 areaCode = 8;
inline bool stRoleInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRoleInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRoleInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRoleInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stRoleInfo::areacode() const {
  return areacode_;
}
inline void stRoleInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional uint32 mapId = 9;
inline bool stRoleInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRoleInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRoleInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRoleInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 stRoleInfo::mapid() const {
  return mapid_;
}
inline void stRoleInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional .PubGame.stTitleToPub titles = 10;
inline bool stRoleInfo::has_titles() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stRoleInfo::set_has_titles() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stRoleInfo::clear_has_titles() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stRoleInfo::clear_titles() {
  if (titles_ != NULL) titles_->::PubGame::stTitleToPub::Clear();
  clear_has_titles();
}
inline const ::PubGame::stTitleToPub& stRoleInfo::titles() const {
  return titles_ != NULL ? *titles_ : *default_instance_->titles_;
}
inline ::PubGame::stTitleToPub* stRoleInfo::mutable_titles() {
  set_has_titles();
  if (titles_ == NULL) titles_ = new ::PubGame::stTitleToPub;
  return titles_;
}
inline ::PubGame::stTitleToPub* stRoleInfo::release_titles() {
  clear_has_titles();
  ::PubGame::stTitleToPub* temp = titles_;
  titles_ = NULL;
  return temp;
}
inline void stRoleInfo::set_allocated_titles(::PubGame::stTitleToPub* titles) {
  delete titles_;
  titles_ = titles;
  if (titles) {
    set_has_titles();
  } else {
    clear_has_titles();
  }
}

// -------------------------------------------------------------------

// stNormalForwardPub

// optional uint32 charID = 1;
inline bool stNormalForwardPub::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNormalForwardPub::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNormalForwardPub::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNormalForwardPub::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNormalForwardPub::charid() const {
  return charid_;
}
inline void stNormalForwardPub::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 modID = 2;
inline bool stNormalForwardPub::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNormalForwardPub::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNormalForwardPub::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNormalForwardPub::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stNormalForwardPub::modid() const {
  return modid_;
}
inline void stNormalForwardPub::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 3;
inline bool stNormalForwardPub::has_funid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNormalForwardPub::set_has_funid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNormalForwardPub::clear_has_funid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNormalForwardPub::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stNormalForwardPub::funid() const {
  return funid_;
}
inline void stNormalForwardPub::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 4;
inline bool stNormalForwardPub::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNormalForwardPub::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNormalForwardPub::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNormalForwardPub::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stNormalForwardPub::cmdlen() const {
  return cmdlen_;
}
inline void stNormalForwardPub::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 5;
inline bool stNormalForwardPub::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stNormalForwardPub::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stNormalForwardPub::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stNormalForwardPub::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stNormalForwardPub::data() const {
  return *data_;
}
inline void stNormalForwardPub::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stNormalForwardPub::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stNormalForwardPub::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNormalForwardPub::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stNormalForwardPub::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNormalForwardPub::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stRoleLogout

// optional uint32 charID = 1;
inline bool stRoleLogout::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRoleLogout::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRoleLogout::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRoleLogout::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRoleLogout::charid() const {
  return charid_;
}
inline void stRoleLogout::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRealTimeTeamMatch

// optional .PubGame.eRealTimePKType eType = 1;
inline bool stRealTimeTeamMatch::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRealTimeTeamMatch::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRealTimeTeamMatch::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRealTimeTeamMatch::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::PubGame::eRealTimePKType stRealTimeTeamMatch::etype() const {
  return static_cast< ::PubGame::eRealTimePKType >(etype_);
}
inline void stRealTimeTeamMatch::set_etype(::PubGame::eRealTimePKType value) {
  assert(::PubGame::eRealTimePKType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// optional uint32 teamID = 2;
inline bool stRealTimeTeamMatch::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRealTimeTeamMatch::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRealTimeTeamMatch::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRealTimeTeamMatch::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stRealTimeTeamMatch::teamid() const {
  return teamid_;
}
inline void stRealTimeTeamMatch::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// repeated uint32 memberId = 3;
inline int stRealTimeTeamMatch::memberid_size() const {
  return memberid_.size();
}
inline void stRealTimeTeamMatch::clear_memberid() {
  memberid_.Clear();
}
inline ::google::protobuf::uint32 stRealTimeTeamMatch::memberid(int index) const {
  return memberid_.Get(index);
}
inline void stRealTimeTeamMatch::set_memberid(int index, ::google::protobuf::uint32 value) {
  memberid_.Set(index, value);
}
inline void stRealTimeTeamMatch::add_memberid(::google::protobuf::uint32 value) {
  memberid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stRealTimeTeamMatch::memberid() const {
  return memberid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stRealTimeTeamMatch::mutable_memberid() {
  return &memberid_;
}

// -------------------------------------------------------------------

// stPubForwardNormal

// optional uint32 charID = 1;
inline bool stPubForwardNormal::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPubForwardNormal::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPubForwardNormal::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPubForwardNormal::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stPubForwardNormal::charid() const {
  return charid_;
}
inline void stPubForwardNormal::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 modID = 2;
inline bool stPubForwardNormal::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stPubForwardNormal::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stPubForwardNormal::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stPubForwardNormal::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stPubForwardNormal::modid() const {
  return modid_;
}
inline void stPubForwardNormal::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 3;
inline bool stPubForwardNormal::has_funid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stPubForwardNormal::set_has_funid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stPubForwardNormal::clear_has_funid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stPubForwardNormal::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stPubForwardNormal::funid() const {
  return funid_;
}
inline void stPubForwardNormal::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 4;
inline bool stPubForwardNormal::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stPubForwardNormal::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stPubForwardNormal::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stPubForwardNormal::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stPubForwardNormal::cmdlen() const {
  return cmdlen_;
}
inline void stPubForwardNormal::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 5;
inline bool stPubForwardNormal::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stPubForwardNormal::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stPubForwardNormal::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stPubForwardNormal::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stPubForwardNormal::data() const {
  return *data_;
}
inline void stPubForwardNormal::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stPubForwardNormal::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stPubForwardNormal::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPubForwardNormal::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stPubForwardNormal::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPubForwardNormal::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stPubForwardGate

// optional uint32 charID = 1;
inline bool stPubForwardGate::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPubForwardGate::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPubForwardGate::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPubForwardGate::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stPubForwardGate::charid() const {
  return charid_;
}
inline void stPubForwardGate::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 modID = 2;
inline bool stPubForwardGate::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stPubForwardGate::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stPubForwardGate::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stPubForwardGate::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stPubForwardGate::modid() const {
  return modid_;
}
inline void stPubForwardGate::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 3;
inline bool stPubForwardGate::has_funid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stPubForwardGate::set_has_funid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stPubForwardGate::clear_has_funid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stPubForwardGate::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stPubForwardGate::funid() const {
  return funid_;
}
inline void stPubForwardGate::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 4;
inline bool stPubForwardGate::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stPubForwardGate::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stPubForwardGate::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stPubForwardGate::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stPubForwardGate::cmdlen() const {
  return cmdlen_;
}
inline void stPubForwardGate::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 5;
inline bool stPubForwardGate::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stPubForwardGate::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stPubForwardGate::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stPubForwardGate::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stPubForwardGate::data() const {
  return *data_;
}
inline void stPubForwardGate::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stPubForwardGate::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stPubForwardGate::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPubForwardGate::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stPubForwardGate::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPubForwardGate::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stNotifyUserOnPub

// optional uint32 charID = 1;
inline bool stNotifyUserOnPub::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyUserOnPub::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyUserOnPub::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyUserOnPub::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyUserOnPub::charid() const {
  return charid_;
}
inline void stNotifyUserOnPub::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool onPub = 2;
inline bool stNotifyUserOnPub::has_onpub() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyUserOnPub::set_has_onpub() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyUserOnPub::clear_has_onpub() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyUserOnPub::clear_onpub() {
  onpub_ = false;
  clear_has_onpub();
}
inline bool stNotifyUserOnPub::onpub() const {
  return onpub_;
}
inline void stNotifyUserOnPub::set_onpub(bool value) {
  set_has_onpub();
  onpub_ = value;
}

// -------------------------------------------------------------------

// stPubForwardGlobal

// optional uint32 charID = 1;
inline bool stPubForwardGlobal::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPubForwardGlobal::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPubForwardGlobal::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPubForwardGlobal::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stPubForwardGlobal::charid() const {
  return charid_;
}
inline void stPubForwardGlobal::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 modID = 2;
inline bool stPubForwardGlobal::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stPubForwardGlobal::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stPubForwardGlobal::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stPubForwardGlobal::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stPubForwardGlobal::modid() const {
  return modid_;
}
inline void stPubForwardGlobal::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 funID = 3;
inline bool stPubForwardGlobal::has_funid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stPubForwardGlobal::set_has_funid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stPubForwardGlobal::clear_has_funid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stPubForwardGlobal::clear_funid() {
  funid_ = 0u;
  clear_has_funid();
}
inline ::google::protobuf::uint32 stPubForwardGlobal::funid() const {
  return funid_;
}
inline void stPubForwardGlobal::set_funid(::google::protobuf::uint32 value) {
  set_has_funid();
  funid_ = value;
}

// optional uint32 cmdLen = 4;
inline bool stPubForwardGlobal::has_cmdlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stPubForwardGlobal::set_has_cmdlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stPubForwardGlobal::clear_has_cmdlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stPubForwardGlobal::clear_cmdlen() {
  cmdlen_ = 0u;
  clear_has_cmdlen();
}
inline ::google::protobuf::uint32 stPubForwardGlobal::cmdlen() const {
  return cmdlen_;
}
inline void stPubForwardGlobal::set_cmdlen(::google::protobuf::uint32 value) {
  set_has_cmdlen();
  cmdlen_ = value;
}

// optional bytes data = 5;
inline bool stPubForwardGlobal::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stPubForwardGlobal::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stPubForwardGlobal::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stPubForwardGlobal::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stPubForwardGlobal::data() const {
  return *data_;
}
inline void stPubForwardGlobal::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stPubForwardGlobal::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stPubForwardGlobal::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPubForwardGlobal::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stPubForwardGlobal::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPubForwardGlobal::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stNotifyOne2OneResult

// optional uint32 charID1 = 1;
inline bool stNotifyOne2OneResult::has_charid1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyOne2OneResult::set_has_charid1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyOne2OneResult::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyOne2OneResult::clear_charid1() {
  charid1_ = 0u;
  clear_has_charid1();
}
inline ::google::protobuf::uint32 stNotifyOne2OneResult::charid1() const {
  return charid1_;
}
inline void stNotifyOne2OneResult::set_charid1(::google::protobuf::uint32 value) {
  set_has_charid1();
  charid1_ = value;
}

// optional bool win1 = 2;
inline bool stNotifyOne2OneResult::has_win1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyOne2OneResult::set_has_win1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyOne2OneResult::clear_has_win1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyOne2OneResult::clear_win1() {
  win1_ = false;
  clear_has_win1();
}
inline bool stNotifyOne2OneResult::win1() const {
  return win1_;
}
inline void stNotifyOne2OneResult::set_win1(bool value) {
  set_has_win1();
  win1_ = value;
}

// optional uint32 score1 = 3;
inline bool stNotifyOne2OneResult::has_score1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyOne2OneResult::set_has_score1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyOne2OneResult::clear_has_score1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyOne2OneResult::clear_score1() {
  score1_ = 0u;
  clear_has_score1();
}
inline ::google::protobuf::uint32 stNotifyOne2OneResult::score1() const {
  return score1_;
}
inline void stNotifyOne2OneResult::set_score1(::google::protobuf::uint32 value) {
  set_has_score1();
  score1_ = value;
}

// optional uint32 charID2 = 4;
inline bool stNotifyOne2OneResult::has_charid2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyOne2OneResult::set_has_charid2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyOne2OneResult::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyOne2OneResult::clear_charid2() {
  charid2_ = 0u;
  clear_has_charid2();
}
inline ::google::protobuf::uint32 stNotifyOne2OneResult::charid2() const {
  return charid2_;
}
inline void stNotifyOne2OneResult::set_charid2(::google::protobuf::uint32 value) {
  set_has_charid2();
  charid2_ = value;
}

// optional bool win2 = 5;
inline bool stNotifyOne2OneResult::has_win2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stNotifyOne2OneResult::set_has_win2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stNotifyOne2OneResult::clear_has_win2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stNotifyOne2OneResult::clear_win2() {
  win2_ = false;
  clear_has_win2();
}
inline bool stNotifyOne2OneResult::win2() const {
  return win2_;
}
inline void stNotifyOne2OneResult::set_win2(bool value) {
  set_has_win2();
  win2_ = value;
}

// optional uint32 score2 = 6;
inline bool stNotifyOne2OneResult::has_score2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stNotifyOne2OneResult::set_has_score2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stNotifyOne2OneResult::clear_has_score2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stNotifyOne2OneResult::clear_score2() {
  score2_ = 0u;
  clear_has_score2();
}
inline ::google::protobuf::uint32 stNotifyOne2OneResult::score2() const {
  return score2_;
}
inline void stNotifyOne2OneResult::set_score2(::google::protobuf::uint32 value) {
  set_has_score2();
  score2_ = value;
}

// optional bool withfriend = 7;
inline bool stNotifyOne2OneResult::has_withfriend() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stNotifyOne2OneResult::set_has_withfriend() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stNotifyOne2OneResult::clear_has_withfriend() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stNotifyOne2OneResult::clear_withfriend() {
  withfriend_ = false;
  clear_has_withfriend();
}
inline bool stNotifyOne2OneResult::withfriend() const {
  return withfriend_;
}
inline void stNotifyOne2OneResult::set_withfriend(bool value) {
  set_has_withfriend();
  withfriend_ = value;
}

// optional uint32 serverIdx1 = 8;
inline bool stNotifyOne2OneResult::has_serveridx1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stNotifyOne2OneResult::set_has_serveridx1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stNotifyOne2OneResult::clear_has_serveridx1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stNotifyOne2OneResult::clear_serveridx1() {
  serveridx1_ = 0u;
  clear_has_serveridx1();
}
inline ::google::protobuf::uint32 stNotifyOne2OneResult::serveridx1() const {
  return serveridx1_;
}
inline void stNotifyOne2OneResult::set_serveridx1(::google::protobuf::uint32 value) {
  set_has_serveridx1();
  serveridx1_ = value;
}

// optional uint32 serverIdx2 = 9;
inline bool stNotifyOne2OneResult::has_serveridx2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stNotifyOne2OneResult::set_has_serveridx2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stNotifyOne2OneResult::clear_has_serveridx2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stNotifyOne2OneResult::clear_serveridx2() {
  serveridx2_ = 0u;
  clear_has_serveridx2();
}
inline ::google::protobuf::uint32 stNotifyOne2OneResult::serveridx2() const {
  return serveridx2_;
}
inline void stNotifyOne2OneResult::set_serveridx2(::google::protobuf::uint32 value) {
  set_has_serveridx2();
  serveridx2_ = value;
}

// optional uint32 costLiLian = 10;
inline bool stNotifyOne2OneResult::has_costlilian() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stNotifyOne2OneResult::set_has_costlilian() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stNotifyOne2OneResult::clear_has_costlilian() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stNotifyOne2OneResult::clear_costlilian() {
  costlilian_ = 0u;
  clear_has_costlilian();
}
inline ::google::protobuf::uint32 stNotifyOne2OneResult::costlilian() const {
  return costlilian_;
}
inline void stNotifyOne2OneResult::set_costlilian(::google::protobuf::uint32 value) {
  set_has_costlilian();
  costlilian_ = value;
}

// -------------------------------------------------------------------

// stNotifyRealTimeResult

// optional uint32 charID = 1;
inline bool stNotifyRealTimeResult::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyRealTimeResult::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyRealTimeResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyRealTimeResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyRealTimeResult::charid() const {
  return charid_;
}
inline void stNotifyRealTimeResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool win = 2;
inline bool stNotifyRealTimeResult::has_win() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyRealTimeResult::set_has_win() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyRealTimeResult::clear_has_win() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyRealTimeResult::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool stNotifyRealTimeResult::win() const {
  return win_;
}
inline void stNotifyRealTimeResult::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// optional .PubGame.eRealTimePKType type = 3;
inline bool stNotifyRealTimeResult::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyRealTimeResult::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyRealTimeResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyRealTimeResult::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::PubGame::eRealTimePKType stNotifyRealTimeResult::type() const {
  return static_cast< ::PubGame::eRealTimePKType >(type_);
}
inline void stNotifyRealTimeResult::set_type(::PubGame::eRealTimePKType value) {
  assert(::PubGame::eRealTimePKType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 costLilian = 4;
inline bool stNotifyRealTimeResult::has_costlilian() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyRealTimeResult::set_has_costlilian() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyRealTimeResult::clear_has_costlilian() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyRealTimeResult::clear_costlilian() {
  costlilian_ = 0u;
  clear_has_costlilian();
}
inline ::google::protobuf::uint32 stNotifyRealTimeResult::costlilian() const {
  return costlilian_;
}
inline void stNotifyRealTimeResult::set_costlilian(::google::protobuf::uint32 value) {
  set_has_costlilian();
  costlilian_ = value;
}

// -------------------------------------------------------------------

// stSaveRoleInfo

// optional uint32 charID = 1;
inline bool stSaveRoleInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSaveRoleInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSaveRoleInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSaveRoleInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSaveRoleInfo::charid() const {
  return charid_;
}
inline void stSaveRoleInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 dataSize = 2;
inline bool stSaveRoleInfo::has_datasize() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSaveRoleInfo::set_has_datasize() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSaveRoleInfo::clear_has_datasize() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSaveRoleInfo::clear_datasize() {
  datasize_ = 0u;
  clear_has_datasize();
}
inline ::google::protobuf::uint32 stSaveRoleInfo::datasize() const {
  return datasize_;
}
inline void stSaveRoleInfo::set_datasize(::google::protobuf::uint32 value) {
  set_has_datasize();
  datasize_ = value;
}

// optional bytes data = 3;
inline bool stSaveRoleInfo::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSaveRoleInfo::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSaveRoleInfo::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSaveRoleInfo::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& stSaveRoleInfo::data() const {
  return *data_;
}
inline void stSaveRoleInfo::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stSaveRoleInfo::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void stSaveRoleInfo::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSaveRoleInfo::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* stSaveRoleInfo::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSaveRoleInfo::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 normalServerID = 4;
inline bool stSaveRoleInfo::has_normalserverid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSaveRoleInfo::set_has_normalserverid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSaveRoleInfo::clear_has_normalserverid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSaveRoleInfo::clear_normalserverid() {
  normalserverid_ = 0u;
  clear_has_normalserverid();
}
inline ::google::protobuf::uint32 stSaveRoleInfo::normalserverid() const {
  return normalserverid_;
}
inline void stSaveRoleInfo::set_normalserverid(::google::protobuf::uint32 value) {
  set_has_normalserverid();
  normalserverid_ = value;
}

// -------------------------------------------------------------------

// stAddRegisterNum

// optional uint32 charID = 1;
inline bool stAddRegisterNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddRegisterNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddRegisterNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddRegisterNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stAddRegisterNum::charid() const {
  return charid_;
}
inline void stAddRegisterNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stHeroLeagueMatch

// optional uint32 charID = 1;
inline bool stHeroLeagueMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHeroLeagueMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHeroLeagueMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHeroLeagueMatch::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stHeroLeagueMatch::charid() const {
  return charid_;
}
inline void stHeroLeagueMatch::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stHeroLeagueCancelMatch

// optional uint32 charID = 1;
inline bool stHeroLeagueCancelMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHeroLeagueCancelMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHeroLeagueCancelMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHeroLeagueCancelMatch::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stHeroLeagueCancelMatch::charid() const {
  return charid_;
}
inline void stHeroLeagueCancelMatch::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stPubRoleInfo

// optional uint32 charID = 1;
inline bool stPubRoleInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPubRoleInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPubRoleInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPubRoleInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stPubRoleInfo::charid() const {
  return charid_;
}
inline void stPubRoleInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 pubCharID = 2;
inline bool stPubRoleInfo::has_pubcharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stPubRoleInfo::set_has_pubcharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stPubRoleInfo::clear_has_pubcharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stPubRoleInfo::clear_pubcharid() {
  pubcharid_ = 0u;
  clear_has_pubcharid();
}
inline ::google::protobuf::uint32 stPubRoleInfo::pubcharid() const {
  return pubcharid_;
}
inline void stPubRoleInfo::set_pubcharid(::google::protobuf::uint32 value) {
  set_has_pubcharid();
  pubcharid_ = value;
}

// optional uint32 areaCode = 3;
inline bool stPubRoleInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stPubRoleInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stPubRoleInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stPubRoleInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stPubRoleInfo::areacode() const {
  return areacode_;
}
inline void stPubRoleInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional string name = 4;
inline bool stPubRoleInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stPubRoleInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stPubRoleInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stPubRoleInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stPubRoleInfo::name() const {
  return *name_;
}
inline void stPubRoleInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stPubRoleInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stPubRoleInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPubRoleInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stPubRoleInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPubRoleInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 5;
inline bool stPubRoleInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stPubRoleInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stPubRoleInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stPubRoleInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stPubRoleInfo::level() const {
  return level_;
}
inline void stPubRoleInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vipLv = 6;
inline bool stPubRoleInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stPubRoleInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stPubRoleInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stPubRoleInfo::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stPubRoleInfo::viplv() const {
  return viplv_;
}
inline void stPubRoleInfo::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 job = 7;
inline bool stPubRoleInfo::has_job() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stPubRoleInfo::set_has_job() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stPubRoleInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stPubRoleInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stPubRoleInfo::job() const {
  return job_;
}
inline void stPubRoleInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 8;
inline bool stPubRoleInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stPubRoleInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stPubRoleInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stPubRoleInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stPubRoleInfo::sex() const {
  return sex_;
}
inline void stPubRoleInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 9;
inline bool stPubRoleInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stPubRoleInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stPubRoleInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stPubRoleInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stPubRoleInfo::battlepower() const {
  return battlepower_;
}
inline void stPubRoleInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 pubServerIndex = 10;
inline bool stPubRoleInfo::has_pubserverindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stPubRoleInfo::set_has_pubserverindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stPubRoleInfo::clear_has_pubserverindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stPubRoleInfo::clear_pubserverindex() {
  pubserverindex_ = 0u;
  clear_has_pubserverindex();
}
inline ::google::protobuf::uint32 stPubRoleInfo::pubserverindex() const {
  return pubserverindex_;
}
inline void stPubRoleInfo::set_pubserverindex(::google::protobuf::uint32 value) {
  set_has_pubserverindex();
  pubserverindex_ = value;
}

// optional uint32 score = 11;
inline bool stPubRoleInfo::has_score() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stPubRoleInfo::set_has_score() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stPubRoleInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stPubRoleInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stPubRoleInfo::score() const {
  return score_;
}
inline void stPubRoleInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional bool winOrLoss = 12;
inline bool stPubRoleInfo::has_winorloss() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stPubRoleInfo::set_has_winorloss() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stPubRoleInfo::clear_has_winorloss() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stPubRoleInfo::clear_winorloss() {
  winorloss_ = false;
  clear_has_winorloss();
}
inline bool stPubRoleInfo::winorloss() const {
  return winorloss_;
}
inline void stPubRoleInfo::set_winorloss(bool value) {
  set_has_winorloss();
  winorloss_ = value;
}

// optional uint32 photoID = 13;
inline bool stPubRoleInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stPubRoleInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stPubRoleInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stPubRoleInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stPubRoleInfo::photoid() const {
  return photoid_;
}
inline void stPubRoleInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stNotifyHeroLeagueResult

// optional .PubGame.stPubRoleInfo user1 = 1;
inline bool stNotifyHeroLeagueResult::has_user1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyHeroLeagueResult::set_has_user1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyHeroLeagueResult::clear_has_user1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyHeroLeagueResult::clear_user1() {
  if (user1_ != NULL) user1_->::PubGame::stPubRoleInfo::Clear();
  clear_has_user1();
}
inline const ::PubGame::stPubRoleInfo& stNotifyHeroLeagueResult::user1() const {
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
inline ::PubGame::stPubRoleInfo* stNotifyHeroLeagueResult::mutable_user1() {
  set_has_user1();
  if (user1_ == NULL) user1_ = new ::PubGame::stPubRoleInfo;
  return user1_;
}
inline ::PubGame::stPubRoleInfo* stNotifyHeroLeagueResult::release_user1() {
  clear_has_user1();
  ::PubGame::stPubRoleInfo* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline void stNotifyHeroLeagueResult::set_allocated_user1(::PubGame::stPubRoleInfo* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    set_has_user1();
  } else {
    clear_has_user1();
  }
}

// optional .PubGame.stPubRoleInfo user2 = 2;
inline bool stNotifyHeroLeagueResult::has_user2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyHeroLeagueResult::set_has_user2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyHeroLeagueResult::clear_has_user2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyHeroLeagueResult::clear_user2() {
  if (user2_ != NULL) user2_->::PubGame::stPubRoleInfo::Clear();
  clear_has_user2();
}
inline const ::PubGame::stPubRoleInfo& stNotifyHeroLeagueResult::user2() const {
  return user2_ != NULL ? *user2_ : *default_instance_->user2_;
}
inline ::PubGame::stPubRoleInfo* stNotifyHeroLeagueResult::mutable_user2() {
  set_has_user2();
  if (user2_ == NULL) user2_ = new ::PubGame::stPubRoleInfo;
  return user2_;
}
inline ::PubGame::stPubRoleInfo* stNotifyHeroLeagueResult::release_user2() {
  clear_has_user2();
  ::PubGame::stPubRoleInfo* temp = user2_;
  user2_ = NULL;
  return temp;
}
inline void stNotifyHeroLeagueResult::set_allocated_user2(::PubGame::stPubRoleInfo* user2) {
  delete user2_;
  user2_ = user2;
  if (user2) {
    set_has_user2();
  } else {
    clear_has_user2();
  }
}

// -------------------------------------------------------------------

// stSynPubRoleList

// optional uint32 tag = 1;
inline bool stSynPubRoleList::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynPubRoleList::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynPubRoleList::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynPubRoleList::clear_tag() {
  tag_ = 0u;
  clear_has_tag();
}
inline ::google::protobuf::uint32 stSynPubRoleList::tag() const {
  return tag_;
}
inline void stSynPubRoleList::set_tag(::google::protobuf::uint32 value) {
  set_has_tag();
  tag_ = value;
}

// -------------------------------------------------------------------

// stSynRoleInfo

// optional uint32 pubCharID = 1;
inline bool stSynRoleInfo::has_pubcharid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRoleInfo::set_has_pubcharid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRoleInfo::clear_has_pubcharid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRoleInfo::clear_pubcharid() {
  pubcharid_ = 0u;
  clear_has_pubcharid();
}
inline ::google::protobuf::uint32 stSynRoleInfo::pubcharid() const {
  return pubcharid_;
}
inline void stSynRoleInfo::set_pubcharid(::google::protobuf::uint32 value) {
  set_has_pubcharid();
  pubcharid_ = value;
}

// optional uint32 pubServerIndex = 2;
inline bool stSynRoleInfo::has_pubserverindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynRoleInfo::set_has_pubserverindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynRoleInfo::clear_has_pubserverindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynRoleInfo::clear_pubserverindex() {
  pubserverindex_ = 0u;
  clear_has_pubserverindex();
}
inline ::google::protobuf::uint32 stSynRoleInfo::pubserverindex() const {
  return pubserverindex_;
}
inline void stSynRoleInfo::set_pubserverindex(::google::protobuf::uint32 value) {
  set_has_pubserverindex();
  pubserverindex_ = value;
}

// -------------------------------------------------------------------

// stTeam

// optional .PubGame.stPubRoleInfo user1 = 1;
inline bool stTeam::has_user1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTeam::set_has_user1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTeam::clear_has_user1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTeam::clear_user1() {
  if (user1_ != NULL) user1_->::PubGame::stPubRoleInfo::Clear();
  clear_has_user1();
}
inline const ::PubGame::stPubRoleInfo& stTeam::user1() const {
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
inline ::PubGame::stPubRoleInfo* stTeam::mutable_user1() {
  set_has_user1();
  if (user1_ == NULL) user1_ = new ::PubGame::stPubRoleInfo;
  return user1_;
}
inline ::PubGame::stPubRoleInfo* stTeam::release_user1() {
  clear_has_user1();
  ::PubGame::stPubRoleInfo* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline void stTeam::set_allocated_user1(::PubGame::stPubRoleInfo* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    set_has_user1();
  } else {
    clear_has_user1();
  }
}

// optional .PubGame.stPubRoleInfo user2 = 2;
inline bool stTeam::has_user2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stTeam::set_has_user2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stTeam::clear_has_user2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stTeam::clear_user2() {
  if (user2_ != NULL) user2_->::PubGame::stPubRoleInfo::Clear();
  clear_has_user2();
}
inline const ::PubGame::stPubRoleInfo& stTeam::user2() const {
  return user2_ != NULL ? *user2_ : *default_instance_->user2_;
}
inline ::PubGame::stPubRoleInfo* stTeam::mutable_user2() {
  set_has_user2();
  if (user2_ == NULL) user2_ = new ::PubGame::stPubRoleInfo;
  return user2_;
}
inline ::PubGame::stPubRoleInfo* stTeam::release_user2() {
  clear_has_user2();
  ::PubGame::stPubRoleInfo* temp = user2_;
  user2_ = NULL;
  return temp;
}
inline void stTeam::set_allocated_user2(::PubGame::stPubRoleInfo* user2) {
  delete user2_;
  user2_ = user2;
  if (user2) {
    set_has_user2();
  } else {
    clear_has_user2();
  }
}

// -------------------------------------------------------------------

// stSynPubRoleListResult

// repeated .PubGame.stTeam team = 1;
inline int stSynPubRoleListResult::team_size() const {
  return team_.size();
}
inline void stSynPubRoleListResult::clear_team() {
  team_.Clear();
}
inline const ::PubGame::stTeam& stSynPubRoleListResult::team(int index) const {
  return team_.Get(index);
}
inline ::PubGame::stTeam* stSynPubRoleListResult::mutable_team(int index) {
  return team_.Mutable(index);
}
inline ::PubGame::stTeam* stSynPubRoleListResult::add_team() {
  return team_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PubGame::stTeam >&
stSynPubRoleListResult::team() const {
  return team_;
}
inline ::google::protobuf::RepeatedPtrField< ::PubGame::stTeam >*
stSynPubRoleListResult::mutable_team() {
  return &team_;
}

// repeated .PubGame.stPubRoleInfo charIDs = 2;
inline int stSynPubRoleListResult::charids_size() const {
  return charids_.size();
}
inline void stSynPubRoleListResult::clear_charids() {
  charids_.Clear();
}
inline const ::PubGame::stPubRoleInfo& stSynPubRoleListResult::charids(int index) const {
  return charids_.Get(index);
}
inline ::PubGame::stPubRoleInfo* stSynPubRoleListResult::mutable_charids(int index) {
  return charids_.Mutable(index);
}
inline ::PubGame::stPubRoleInfo* stSynPubRoleListResult::add_charids() {
  return charids_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PubGame::stPubRoleInfo >&
stSynPubRoleListResult::charids() const {
  return charids_;
}
inline ::google::protobuf::RepeatedPtrField< ::PubGame::stPubRoleInfo >*
stSynPubRoleListResult::mutable_charids() {
  return &charids_;
}

// optional bool isFinal = 3;
inline bool stSynPubRoleListResult::has_isfinal() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynPubRoleListResult::set_has_isfinal() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynPubRoleListResult::clear_has_isfinal() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynPubRoleListResult::clear_isfinal() {
  isfinal_ = false;
  clear_has_isfinal();
}
inline bool stSynPubRoleListResult::isfinal() const {
  return isfinal_;
}
inline void stSynPubRoleListResult::set_isfinal(bool value) {
  set_has_isfinal();
  isfinal_ = value;
}

// -------------------------------------------------------------------

// stReqMenberInfo

// optional uint32 charID = 1;
inline bool stReqMenberInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqMenberInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqMenberInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqMenberInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqMenberInfo::charid() const {
  return charid_;
}
inline void stReqMenberInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynChampionInfo

// optional uint32 charID = 1;
inline bool stSynChampionInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynChampionInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynChampionInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynChampionInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::charid() const {
  return charid_;
}
inline void stSynChampionInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynChampionInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynChampionInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynChampionInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynChampionInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynChampionInfo::name() const {
  return *name_;
}
inline void stSynChampionInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynChampionInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynChampionInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynChampionInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynChampionInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynChampionInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 areaCode = 3;
inline bool stSynChampionInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynChampionInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynChampionInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynChampionInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stSynChampionInfo::areacode() const {
  return areacode_;
}
inline void stSynChampionInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional uint32 level = 4;
inline bool stSynChampionInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynChampionInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynChampionInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynChampionInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynChampionInfo::level() const {
  return level_;
}
inline void stSynChampionInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 5;
inline bool stSynChampionInfo::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynChampionInfo::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynChampionInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynChampionInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynChampionInfo::job() const {
  return job_;
}
inline void stSynChampionInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool stSynChampionInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynChampionInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynChampionInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynChampionInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynChampionInfo::sex() const {
  return sex_;
}
inline void stSynChampionInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional bool leader = 7;
inline bool stSynChampionInfo::has_leader() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynChampionInfo::set_has_leader() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynChampionInfo::clear_has_leader() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynChampionInfo::clear_leader() {
  leader_ = false;
  clear_has_leader();
}
inline bool stSynChampionInfo::leader() const {
  return leader_;
}
inline void stSynChampionInfo::set_leader(bool value) {
  set_has_leader();
  leader_ = value;
}

// optional uint32 battlePower = 8;
inline bool stSynChampionInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynChampionInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynChampionInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynChampionInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynChampionInfo::battlepower() const {
  return battlepower_;
}
inline void stSynChampionInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 pos = 9;
inline bool stSynChampionInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSynChampionInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSynChampionInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSynChampionInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stSynChampionInfo::pos() const {
  return pos_;
}
inline void stSynChampionInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 headID = 10;
inline bool stSynChampionInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSynChampionInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSynChampionInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSynChampionInfo::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::headid() const {
  return headid_;
}
inline void stSynChampionInfo::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 11;
inline bool stSynChampionInfo::has_bodyid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSynChampionInfo::set_has_bodyid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSynChampionInfo::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSynChampionInfo::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::bodyid() const {
  return bodyid_;
}
inline void stSynChampionInfo::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 12;
inline bool stSynChampionInfo::has_weaponid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stSynChampionInfo::set_has_weaponid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stSynChampionInfo::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stSynChampionInfo::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::weaponid() const {
  return weaponid_;
}
inline void stSynChampionInfo::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 13;
inline bool stSynChampionInfo::has_cloackid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stSynChampionInfo::set_has_cloackid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stSynChampionInfo::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stSynChampionInfo::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::cloackid() const {
  return cloackid_;
}
inline void stSynChampionInfo::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 14;
inline bool stSynChampionInfo::has_wingid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stSynChampionInfo::set_has_wingid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stSynChampionInfo::clear_has_wingid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stSynChampionInfo::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::wingid() const {
  return wingid_;
}
inline void stSynChampionInfo::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 15;
inline bool stSynChampionInfo::has_shoeid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stSynChampionInfo::set_has_shoeid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stSynChampionInfo::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stSynChampionInfo::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::shoeid() const {
  return shoeid_;
}
inline void stSynChampionInfo::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 16;
inline bool stSynChampionInfo::has_fashionhair() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionhair() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stSynChampionInfo::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stSynChampionInfo::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionhair() const {
  return fashionhair_;
}
inline void stSynChampionInfo::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 17;
inline bool stSynChampionInfo::has_fashionface() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionface() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stSynChampionInfo::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stSynChampionInfo::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionface() const {
  return fashionface_;
}
inline void stSynChampionInfo::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 18;
inline bool stSynChampionInfo::has_fashionbody() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionbody() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stSynChampionInfo::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stSynChampionInfo::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionbody() const {
  return fashionbody_;
}
inline void stSynChampionInfo::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 19;
inline bool stSynChampionInfo::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stSynChampionInfo::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stSynChampionInfo::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionweapon() const {
  return fashionweapon_;
}
inline void stSynChampionInfo::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 20;
inline bool stSynChampionInfo::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stSynChampionInfo::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stSynChampionInfo::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionshoe() const {
  return fashionshoe_;
}
inline void stSynChampionInfo::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 21;
inline bool stSynChampionInfo::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stSynChampionInfo::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stSynChampionInfo::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stSynChampionInfo::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stSynChampionInfo::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 22;
inline bool stSynChampionInfo::has_effectid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stSynChampionInfo::set_has_effectid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stSynChampionInfo::clear_has_effectid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stSynChampionInfo::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::effectid() const {
  return effectid_;
}
inline void stSynChampionInfo::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 23;
inline bool stSynChampionInfo::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stSynChampionInfo::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stSynChampionInfo::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stSynChampionInfo::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stSynChampionInfo::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stSynChampionInfo::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 photoID = 24;
inline bool stSynChampionInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void stSynChampionInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void stSynChampionInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void stSynChampionInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::photoid() const {
  return photoid_;
}
inline void stSynChampionInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stReqSynChampionInfo

// optional .PubGame.stSynChampionInfo info = 1;
inline bool stReqSynChampionInfo::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSynChampionInfo::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSynChampionInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSynChampionInfo::clear_info() {
  if (info_ != NULL) info_->::PubGame::stSynChampionInfo::Clear();
  clear_has_info();
}
inline const ::PubGame::stSynChampionInfo& stReqSynChampionInfo::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PubGame::stSynChampionInfo* stReqSynChampionInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PubGame::stSynChampionInfo;
  return info_;
}
inline ::PubGame::stSynChampionInfo* stReqSynChampionInfo::release_info() {
  clear_has_info();
  ::PubGame::stSynChampionInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void stReqSynChampionInfo::set_allocated_info(::PubGame::stSynChampionInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// stGloryUserPart

// optional uint32 charID = 1;
inline bool stGloryUserPart::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGloryUserPart::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGloryUserPart::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGloryUserPart::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGloryUserPart::charid() const {
  return charid_;
}
inline void stGloryUserPart::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 areaCode = 2;
inline bool stGloryUserPart::has_areacode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGloryUserPart::set_has_areacode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGloryUserPart::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGloryUserPart::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stGloryUserPart::areacode() const {
  return areacode_;
}
inline void stGloryUserPart::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional string name = 3;
inline bool stGloryUserPart::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGloryUserPart::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGloryUserPart::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGloryUserPart::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stGloryUserPart::name() const {
  return *name_;
}
inline void stGloryUserPart::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUserPart::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUserPart::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGloryUserPart::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stGloryUserPart::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGloryUserPart::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 4;
inline bool stGloryUserPart::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGloryUserPart::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGloryUserPart::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGloryUserPart::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stGloryUserPart::job() const {
  return job_;
}
inline void stGloryUserPart::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stGloryUserPart::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGloryUserPart::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGloryUserPart::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGloryUserPart::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stGloryUserPart::sex() const {
  return sex_;
}
inline void stGloryUserPart::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 6;
inline bool stGloryUserPart::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stGloryUserPart::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stGloryUserPart::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stGloryUserPart::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stGloryUserPart::level() const {
  return level_;
}
inline void stGloryUserPart::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 7;
inline bool stGloryUserPart::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stGloryUserPart::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stGloryUserPart::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stGloryUserPart::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stGloryUserPart::battlepower() const {
  return battlepower_;
}
inline void stGloryUserPart::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 headID = 8;
inline bool stGloryUserPart::has_headid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stGloryUserPart::set_has_headid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stGloryUserPart::clear_has_headid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stGloryUserPart::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stGloryUserPart::headid() const {
  return headid_;
}
inline void stGloryUserPart::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 9;
inline bool stGloryUserPart::has_bodyid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stGloryUserPart::set_has_bodyid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stGloryUserPart::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stGloryUserPart::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stGloryUserPart::bodyid() const {
  return bodyid_;
}
inline void stGloryUserPart::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 10;
inline bool stGloryUserPart::has_weaponid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stGloryUserPart::set_has_weaponid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stGloryUserPart::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stGloryUserPart::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stGloryUserPart::weaponid() const {
  return weaponid_;
}
inline void stGloryUserPart::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 11;
inline bool stGloryUserPart::has_cloackid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stGloryUserPart::set_has_cloackid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stGloryUserPart::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stGloryUserPart::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stGloryUserPart::cloackid() const {
  return cloackid_;
}
inline void stGloryUserPart::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 12;
inline bool stGloryUserPart::has_wingid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stGloryUserPart::set_has_wingid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stGloryUserPart::clear_has_wingid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stGloryUserPart::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stGloryUserPart::wingid() const {
  return wingid_;
}
inline void stGloryUserPart::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 13;
inline bool stGloryUserPart::has_shoeid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stGloryUserPart::set_has_shoeid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stGloryUserPart::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stGloryUserPart::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stGloryUserPart::shoeid() const {
  return shoeid_;
}
inline void stGloryUserPart::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 14;
inline bool stGloryUserPart::has_fashionhair() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stGloryUserPart::set_has_fashionhair() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stGloryUserPart::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stGloryUserPart::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashionhair() const {
  return fashionhair_;
}
inline void stGloryUserPart::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 15;
inline bool stGloryUserPart::has_fashionface() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stGloryUserPart::set_has_fashionface() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stGloryUserPart::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stGloryUserPart::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashionface() const {
  return fashionface_;
}
inline void stGloryUserPart::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 16;
inline bool stGloryUserPart::has_fashionbody() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stGloryUserPart::set_has_fashionbody() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stGloryUserPart::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stGloryUserPart::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashionbody() const {
  return fashionbody_;
}
inline void stGloryUserPart::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 17;
inline bool stGloryUserPart::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stGloryUserPart::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stGloryUserPart::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stGloryUserPart::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashionweapon() const {
  return fashionweapon_;
}
inline void stGloryUserPart::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 18;
inline bool stGloryUserPart::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stGloryUserPart::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stGloryUserPart::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stGloryUserPart::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashionshoe() const {
  return fashionshoe_;
}
inline void stGloryUserPart::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 19;
inline bool stGloryUserPart::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stGloryUserPart::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stGloryUserPart::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stGloryUserPart::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stGloryUserPart::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stGloryUserPart::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 20;
inline bool stGloryUserPart::has_effectid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stGloryUserPart::set_has_effectid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stGloryUserPart::clear_has_effectid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stGloryUserPart::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stGloryUserPart::effectid() const {
  return effectid_;
}
inline void stGloryUserPart::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 21;
inline bool stGloryUserPart::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stGloryUserPart::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stGloryUserPart::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stGloryUserPart::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stGloryUserPart::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stGloryUserPart::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// -------------------------------------------------------------------

// stGloryUserDetail

// optional uint32 charID = 1;
inline bool stGloryUserDetail::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGloryUserDetail::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGloryUserDetail::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGloryUserDetail::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::charid() const {
  return charid_;
}
inline void stGloryUserDetail::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 areaCode = 2;
inline bool stGloryUserDetail::has_areacode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGloryUserDetail::set_has_areacode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGloryUserDetail::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGloryUserDetail::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stGloryUserDetail::areacode() const {
  return areacode_;
}
inline void stGloryUserDetail::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional string name = 3;
inline bool stGloryUserDetail::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGloryUserDetail::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGloryUserDetail::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGloryUserDetail::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stGloryUserDetail::name() const {
  return *name_;
}
inline void stGloryUserDetail::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUserDetail::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUserDetail::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGloryUserDetail::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stGloryUserDetail::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGloryUserDetail::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 4;
inline bool stGloryUserDetail::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGloryUserDetail::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGloryUserDetail::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGloryUserDetail::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stGloryUserDetail::job() const {
  return job_;
}
inline void stGloryUserDetail::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stGloryUserDetail::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGloryUserDetail::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGloryUserDetail::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGloryUserDetail::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stGloryUserDetail::sex() const {
  return sex_;
}
inline void stGloryUserDetail::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 6;
inline bool stGloryUserDetail::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stGloryUserDetail::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stGloryUserDetail::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stGloryUserDetail::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stGloryUserDetail::level() const {
  return level_;
}
inline void stGloryUserDetail::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 7;
inline bool stGloryUserDetail::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stGloryUserDetail::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stGloryUserDetail::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stGloryUserDetail::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stGloryUserDetail::battlepower() const {
  return battlepower_;
}
inline void stGloryUserDetail::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 headID = 8;
inline bool stGloryUserDetail::has_headid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stGloryUserDetail::set_has_headid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stGloryUserDetail::clear_has_headid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stGloryUserDetail::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::headid() const {
  return headid_;
}
inline void stGloryUserDetail::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 9;
inline bool stGloryUserDetail::has_bodyid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stGloryUserDetail::set_has_bodyid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stGloryUserDetail::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stGloryUserDetail::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::bodyid() const {
  return bodyid_;
}
inline void stGloryUserDetail::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 10;
inline bool stGloryUserDetail::has_weaponid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stGloryUserDetail::set_has_weaponid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stGloryUserDetail::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stGloryUserDetail::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::weaponid() const {
  return weaponid_;
}
inline void stGloryUserDetail::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 11;
inline bool stGloryUserDetail::has_cloackid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stGloryUserDetail::set_has_cloackid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stGloryUserDetail::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stGloryUserDetail::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::cloackid() const {
  return cloackid_;
}
inline void stGloryUserDetail::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 12;
inline bool stGloryUserDetail::has_wingid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stGloryUserDetail::set_has_wingid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stGloryUserDetail::clear_has_wingid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stGloryUserDetail::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::wingid() const {
  return wingid_;
}
inline void stGloryUserDetail::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 13;
inline bool stGloryUserDetail::has_shoeid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stGloryUserDetail::set_has_shoeid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stGloryUserDetail::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stGloryUserDetail::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::shoeid() const {
  return shoeid_;
}
inline void stGloryUserDetail::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 14;
inline bool stGloryUserDetail::has_fashionhair() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stGloryUserDetail::set_has_fashionhair() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stGloryUserDetail::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stGloryUserDetail::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashionhair() const {
  return fashionhair_;
}
inline void stGloryUserDetail::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 15;
inline bool stGloryUserDetail::has_fashionface() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stGloryUserDetail::set_has_fashionface() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stGloryUserDetail::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stGloryUserDetail::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashionface() const {
  return fashionface_;
}
inline void stGloryUserDetail::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 16;
inline bool stGloryUserDetail::has_fashionbody() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stGloryUserDetail::set_has_fashionbody() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stGloryUserDetail::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stGloryUserDetail::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashionbody() const {
  return fashionbody_;
}
inline void stGloryUserDetail::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 17;
inline bool stGloryUserDetail::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stGloryUserDetail::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stGloryUserDetail::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stGloryUserDetail::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashionweapon() const {
  return fashionweapon_;
}
inline void stGloryUserDetail::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 18;
inline bool stGloryUserDetail::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stGloryUserDetail::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stGloryUserDetail::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stGloryUserDetail::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashionshoe() const {
  return fashionshoe_;
}
inline void stGloryUserDetail::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 19;
inline bool stGloryUserDetail::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stGloryUserDetail::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stGloryUserDetail::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stGloryUserDetail::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stGloryUserDetail::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stGloryUserDetail::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 20;
inline bool stGloryUserDetail::has_effectid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stGloryUserDetail::set_has_effectid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stGloryUserDetail::clear_has_effectid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stGloryUserDetail::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::effectid() const {
  return effectid_;
}
inline void stGloryUserDetail::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 21;
inline bool stGloryUserDetail::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stGloryUserDetail::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stGloryUserDetail::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stGloryUserDetail::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stGloryUserDetail::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stGloryUserDetail::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 killNum = 22;
inline bool stGloryUserDetail::has_killnum() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stGloryUserDetail::set_has_killnum() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stGloryUserDetail::clear_has_killnum() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stGloryUserDetail::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 stGloryUserDetail::killnum() const {
  return killnum_;
}
inline void stGloryUserDetail::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional uint32 evenKillNum = 23;
inline bool stGloryUserDetail::has_evenkillnum() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stGloryUserDetail::set_has_evenkillnum() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stGloryUserDetail::clear_has_evenkillnum() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stGloryUserDetail::clear_evenkillnum() {
  evenkillnum_ = 0u;
  clear_has_evenkillnum();
}
inline ::google::protobuf::uint32 stGloryUserDetail::evenkillnum() const {
  return evenkillnum_;
}
inline void stGloryUserDetail::set_evenkillnum(::google::protobuf::uint32 value) {
  set_has_evenkillnum();
  evenkillnum_ = value;
}

// optional uint32 totalKillNum = 24;
inline bool stGloryUserDetail::has_totalkillnum() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void stGloryUserDetail::set_has_totalkillnum() {
  _has_bits_[0] |= 0x00800000u;
}
inline void stGloryUserDetail::clear_has_totalkillnum() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void stGloryUserDetail::clear_totalkillnum() {
  totalkillnum_ = 0u;
  clear_has_totalkillnum();
}
inline ::google::protobuf::uint32 stGloryUserDetail::totalkillnum() const {
  return totalkillnum_;
}
inline void stGloryUserDetail::set_totalkillnum(::google::protobuf::uint32 value) {
  set_has_totalkillnum();
  totalkillnum_ = value;
}

// optional uint32 gloryVal = 25;
inline bool stGloryUserDetail::has_gloryval() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void stGloryUserDetail::set_has_gloryval() {
  _has_bits_[0] |= 0x01000000u;
}
inline void stGloryUserDetail::clear_has_gloryval() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void stGloryUserDetail::clear_gloryval() {
  gloryval_ = 0u;
  clear_has_gloryval();
}
inline ::google::protobuf::uint32 stGloryUserDetail::gloryval() const {
  return gloryval_;
}
inline void stGloryUserDetail::set_gloryval(::google::protobuf::uint32 value) {
  set_has_gloryval();
  gloryval_ = value;
}

// optional uint32 gloryActionTime = 26;
inline bool stGloryUserDetail::has_gloryactiontime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void stGloryUserDetail::set_has_gloryactiontime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void stGloryUserDetail::clear_has_gloryactiontime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void stGloryUserDetail::clear_gloryactiontime() {
  gloryactiontime_ = 0u;
  clear_has_gloryactiontime();
}
inline ::google::protobuf::uint32 stGloryUserDetail::gloryactiontime() const {
  return gloryactiontime_;
}
inline void stGloryUserDetail::set_gloryactiontime(::google::protobuf::uint32 value) {
  set_has_gloryactiontime();
  gloryactiontime_ = value;
}

// optional uint32 prostatedNum = 27;
inline bool stGloryUserDetail::has_prostatednum() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void stGloryUserDetail::set_has_prostatednum() {
  _has_bits_[0] |= 0x04000000u;
}
inline void stGloryUserDetail::clear_has_prostatednum() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void stGloryUserDetail::clear_prostatednum() {
  prostatednum_ = 0u;
  clear_has_prostatednum();
}
inline ::google::protobuf::uint32 stGloryUserDetail::prostatednum() const {
  return prostatednum_;
}
inline void stGloryUserDetail::set_prostatednum(::google::protobuf::uint32 value) {
  set_has_prostatednum();
  prostatednum_ = value;
}

// optional uint32 prostateTime = 28;
inline bool stGloryUserDetail::has_prostatetime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void stGloryUserDetail::set_has_prostatetime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void stGloryUserDetail::clear_has_prostatetime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void stGloryUserDetail::clear_prostatetime() {
  prostatetime_ = 0u;
  clear_has_prostatetime();
}
inline ::google::protobuf::uint32 stGloryUserDetail::prostatetime() const {
  return prostatetime_;
}
inline void stGloryUserDetail::set_prostatetime(::google::protobuf::uint32 value) {
  set_has_prostatetime();
  prostatetime_ = value;
}

// optional uint32 normalId = 29;
inline bool stGloryUserDetail::has_normalid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void stGloryUserDetail::set_has_normalid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void stGloryUserDetail::clear_has_normalid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void stGloryUserDetail::clear_normalid() {
  normalid_ = 0u;
  clear_has_normalid();
}
inline ::google::protobuf::uint32 stGloryUserDetail::normalid() const {
  return normalid_;
}
inline void stGloryUserDetail::set_normalid(::google::protobuf::uint32 value) {
  set_has_normalid();
  normalid_ = value;
}

// -------------------------------------------------------------------

// stGloryUser

// optional uint32 charID = 1;
inline bool stGloryUser::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGloryUser::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGloryUser::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGloryUser::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGloryUser::charid() const {
  return charid_;
}
inline void stGloryUser::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 areaCode = 2;
inline bool stGloryUser::has_areacode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGloryUser::set_has_areacode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGloryUser::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGloryUser::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stGloryUser::areacode() const {
  return areacode_;
}
inline void stGloryUser::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional string name = 3;
inline bool stGloryUser::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGloryUser::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGloryUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGloryUser::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stGloryUser::name() const {
  return *name_;
}
inline void stGloryUser::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUser::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stGloryUser::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGloryUser::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stGloryUser::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stGloryUser::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 killNum = 4;
inline bool stGloryUser::has_killnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGloryUser::set_has_killnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGloryUser::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGloryUser::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 stGloryUser::killnum() const {
  return killnum_;
}
inline void stGloryUser::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional uint32 evenKillNum = 5;
inline bool stGloryUser::has_evenkillnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stGloryUser::set_has_evenkillnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stGloryUser::clear_has_evenkillnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stGloryUser::clear_evenkillnum() {
  evenkillnum_ = 0u;
  clear_has_evenkillnum();
}
inline ::google::protobuf::uint32 stGloryUser::evenkillnum() const {
  return evenkillnum_;
}
inline void stGloryUser::set_evenkillnum(::google::protobuf::uint32 value) {
  set_has_evenkillnum();
  evenkillnum_ = value;
}

// optional uint32 totalKillNum = 6;
inline bool stGloryUser::has_totalkillnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stGloryUser::set_has_totalkillnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stGloryUser::clear_has_totalkillnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stGloryUser::clear_totalkillnum() {
  totalkillnum_ = 0u;
  clear_has_totalkillnum();
}
inline ::google::protobuf::uint32 stGloryUser::totalkillnum() const {
  return totalkillnum_;
}
inline void stGloryUser::set_totalkillnum(::google::protobuf::uint32 value) {
  set_has_totalkillnum();
  totalkillnum_ = value;
}

// optional uint32 gloryVal = 7;
inline bool stGloryUser::has_gloryval() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stGloryUser::set_has_gloryval() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stGloryUser::clear_has_gloryval() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stGloryUser::clear_gloryval() {
  gloryval_ = 0u;
  clear_has_gloryval();
}
inline ::google::protobuf::uint32 stGloryUser::gloryval() const {
  return gloryval_;
}
inline void stGloryUser::set_gloryval(::google::protobuf::uint32 value) {
  set_has_gloryval();
  gloryval_ = value;
}

// optional uint32 gloryActionTime = 8;
inline bool stGloryUser::has_gloryactiontime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stGloryUser::set_has_gloryactiontime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stGloryUser::clear_has_gloryactiontime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stGloryUser::clear_gloryactiontime() {
  gloryactiontime_ = 0u;
  clear_has_gloryactiontime();
}
inline ::google::protobuf::uint32 stGloryUser::gloryactiontime() const {
  return gloryactiontime_;
}
inline void stGloryUser::set_gloryactiontime(::google::protobuf::uint32 value) {
  set_has_gloryactiontime();
  gloryactiontime_ = value;
}

// optional uint32 prostatedNum = 9;
inline bool stGloryUser::has_prostatednum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stGloryUser::set_has_prostatednum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stGloryUser::clear_has_prostatednum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stGloryUser::clear_prostatednum() {
  prostatednum_ = 0u;
  clear_has_prostatednum();
}
inline ::google::protobuf::uint32 stGloryUser::prostatednum() const {
  return prostatednum_;
}
inline void stGloryUser::set_prostatednum(::google::protobuf::uint32 value) {
  set_has_prostatednum();
  prostatednum_ = value;
}

// optional uint32 prostateTime = 10;
inline bool stGloryUser::has_prostatetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stGloryUser::set_has_prostatetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stGloryUser::clear_has_prostatetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stGloryUser::clear_prostatetime() {
  prostatetime_ = 0u;
  clear_has_prostatetime();
}
inline ::google::protobuf::uint32 stGloryUser::prostatetime() const {
  return prostatetime_;
}
inline void stGloryUser::set_prostatetime(::google::protobuf::uint32 value) {
  set_has_prostatetime();
  prostatetime_ = value;
}

// optional uint32 normalId = 11;
inline bool stGloryUser::has_normalid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stGloryUser::set_has_normalid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stGloryUser::clear_has_normalid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stGloryUser::clear_normalid() {
  normalid_ = 0u;
  clear_has_normalid();
}
inline ::google::protobuf::uint32 stGloryUser::normalid() const {
  return normalid_;
}
inline void stGloryUser::set_normalid(::google::protobuf::uint32 value) {
  set_has_normalid();
  normalid_ = value;
}

// -------------------------------------------------------------------

// stEnterResBattle

// optional uint32 charId = 1;
inline bool stEnterResBattle::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterResBattle::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterResBattle::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterResBattle::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stEnterResBattle::charid() const {
  return charid_;
}
inline void stEnterResBattle::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 copyMapLevel = 2;
inline bool stEnterResBattle::has_copymaplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEnterResBattle::set_has_copymaplevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEnterResBattle::clear_has_copymaplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEnterResBattle::clear_copymaplevel() {
  copymaplevel_ = 0u;
  clear_has_copymaplevel();
}
inline ::google::protobuf::uint32 stEnterResBattle::copymaplevel() const {
  return copymaplevel_;
}
inline void stEnterResBattle::set_copymaplevel(::google::protobuf::uint32 value) {
  set_has_copymaplevel();
  copymaplevel_ = value;
}

// optional uint32 guildId = 3;
inline bool stEnterResBattle::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stEnterResBattle::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stEnterResBattle::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stEnterResBattle::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stEnterResBattle::guildid() const {
  return guildid_;
}
inline void stEnterResBattle::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional .PubGame.stGloryUser self = 4;
inline bool stEnterResBattle::has_self() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stEnterResBattle::set_has_self() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stEnterResBattle::clear_has_self() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stEnterResBattle::clear_self() {
  if (self_ != NULL) self_->::PubGame::stGloryUser::Clear();
  clear_has_self();
}
inline const ::PubGame::stGloryUser& stEnterResBattle::self() const {
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::PubGame::stGloryUser* stEnterResBattle::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::PubGame::stGloryUser;
  return self_;
}
inline ::PubGame::stGloryUser* stEnterResBattle::release_self() {
  clear_has_self();
  ::PubGame::stGloryUser* temp = self_;
  self_ = NULL;
  return temp;
}
inline void stEnterResBattle::set_allocated_self(::PubGame::stGloryUser* self) {
  delete self_;
  self_ = self;
  if (self) {
    set_has_self();
  } else {
    clear_has_self();
  }
}

// -------------------------------------------------------------------

// stSynResBattleUserData

// optional .PubGame.stGloryUser user = 1;
inline bool stSynResBattleUserData::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynResBattleUserData::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynResBattleUserData::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynResBattleUserData::clear_user() {
  if (user_ != NULL) user_->::PubGame::stGloryUser::Clear();
  clear_has_user();
}
inline const ::PubGame::stGloryUser& stSynResBattleUserData::user() const {
  return user_ != NULL ? *user_ : *default_instance_->user_;
}
inline ::PubGame::stGloryUser* stSynResBattleUserData::mutable_user() {
  set_has_user();
  if (user_ == NULL) user_ = new ::PubGame::stGloryUser;
  return user_;
}
inline ::PubGame::stGloryUser* stSynResBattleUserData::release_user() {
  clear_has_user();
  ::PubGame::stGloryUser* temp = user_;
  user_ = NULL;
  return temp;
}
inline void stSynResBattleUserData::set_allocated_user(::PubGame::stGloryUser* user) {
  delete user_;
  user_ = user;
  if (user) {
    set_has_user();
  } else {
    clear_has_user();
  }
}

// -------------------------------------------------------------------

// stSynResBattleTop50

// repeated .PubGame.stGloryUserPart detail = 1;
inline int stSynResBattleTop50::detail_size() const {
  return detail_.size();
}
inline void stSynResBattleTop50::clear_detail() {
  detail_.Clear();
}
inline const ::PubGame::stGloryUserPart& stSynResBattleTop50::detail(int index) const {
  return detail_.Get(index);
}
inline ::PubGame::stGloryUserPart* stSynResBattleTop50::mutable_detail(int index) {
  return detail_.Mutable(index);
}
inline ::PubGame::stGloryUserPart* stSynResBattleTop50::add_detail() {
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PubGame::stGloryUserPart >&
stSynResBattleTop50::detail() const {
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::PubGame::stGloryUserPart >*
stSynResBattleTop50::mutable_detail() {
  return &detail_;
}

// -------------------------------------------------------------------

// stSynResBattleKing

// optional bool clear = 1;
inline bool stSynResBattleKing::has_clear() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynResBattleKing::set_has_clear() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynResBattleKing::clear_has_clear() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynResBattleKing::clear_clear() {
  clear_ = false;
  clear_has_clear();
}
inline bool stSynResBattleKing::clear() const {
  return clear_;
}
inline void stSynResBattleKing::set_clear(bool value) {
  set_has_clear();
  clear_ = value;
}

// optional .PubGame.stGloryUserDetail king = 2;
inline bool stSynResBattleKing::has_king() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynResBattleKing::set_has_king() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynResBattleKing::clear_has_king() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynResBattleKing::clear_king() {
  if (king_ != NULL) king_->::PubGame::stGloryUserDetail::Clear();
  clear_has_king();
}
inline const ::PubGame::stGloryUserDetail& stSynResBattleKing::king() const {
  return king_ != NULL ? *king_ : *default_instance_->king_;
}
inline ::PubGame::stGloryUserDetail* stSynResBattleKing::mutable_king() {
  set_has_king();
  if (king_ == NULL) king_ = new ::PubGame::stGloryUserDetail;
  return king_;
}
inline ::PubGame::stGloryUserDetail* stSynResBattleKing::release_king() {
  clear_has_king();
  ::PubGame::stGloryUserDetail* temp = king_;
  king_ = NULL;
  return temp;
}
inline void stSynResBattleKing::set_allocated_king(::PubGame::stGloryUserDetail* king) {
  delete king_;
  king_ = king;
  if (king) {
    set_has_king();
  } else {
    clear_has_king();
  }
}

// -------------------------------------------------------------------

// stBroadResBattleInvite

// optional uint32 charId = 1;
inline bool stBroadResBattleInvite::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBroadResBattleInvite::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBroadResBattleInvite::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBroadResBattleInvite::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::charid() const {
  return charid_;
}
inline void stBroadResBattleInvite::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stBroadResBattleInvite::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBroadResBattleInvite::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBroadResBattleInvite::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBroadResBattleInvite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stBroadResBattleInvite::name() const {
  return *name_;
}
inline void stBroadResBattleInvite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stBroadResBattleInvite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stBroadResBattleInvite::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBroadResBattleInvite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stBroadResBattleInvite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBroadResBattleInvite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 guildId = 3;
inline bool stBroadResBattleInvite::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBroadResBattleInvite::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBroadResBattleInvite::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBroadResBattleInvite::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::guildid() const {
  return guildid_;
}
inline void stBroadResBattleInvite::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 job = 4;
inline bool stBroadResBattleInvite::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBroadResBattleInvite::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBroadResBattleInvite::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBroadResBattleInvite::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::job() const {
  return job_;
}
inline void stBroadResBattleInvite::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stBroadResBattleInvite::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stBroadResBattleInvite::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stBroadResBattleInvite::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stBroadResBattleInvite::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::sex() const {
  return sex_;
}
inline void stBroadResBattleInvite::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 6;
inline bool stBroadResBattleInvite::has_battlepower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stBroadResBattleInvite::set_has_battlepower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stBroadResBattleInvite::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stBroadResBattleInvite::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::battlepower() const {
  return battlepower_;
}
inline void stBroadResBattleInvite::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 vipLv = 7;
inline bool stBroadResBattleInvite::has_viplv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stBroadResBattleInvite::set_has_viplv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stBroadResBattleInvite::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stBroadResBattleInvite::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::viplv() const {
  return viplv_;
}
inline void stBroadResBattleInvite::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 instanceLvl = 8;
inline bool stBroadResBattleInvite::has_instancelvl() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stBroadResBattleInvite::set_has_instancelvl() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stBroadResBattleInvite::clear_has_instancelvl() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stBroadResBattleInvite::clear_instancelvl() {
  instancelvl_ = 0u;
  clear_has_instancelvl();
}
inline ::google::protobuf::uint32 stBroadResBattleInvite::instancelvl() const {
  return instancelvl_;
}
inline void stBroadResBattleInvite::set_instancelvl(::google::protobuf::uint32 value) {
  set_has_instancelvl();
  instancelvl_ = value;
}

// -------------------------------------------------------------------

// stReplyInviteResBattle

// optional bool agree = 1;
inline bool stReplyInviteResBattle::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplyInviteResBattle::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplyInviteResBattle::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplyInviteResBattle::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool stReplyInviteResBattle::agree() const {
  return agree_;
}
inline void stReplyInviteResBattle::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
}

// optional uint32 charId = 2;
inline bool stReplyInviteResBattle::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReplyInviteResBattle::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReplyInviteResBattle::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReplyInviteResBattle::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReplyInviteResBattle::charid() const {
  return charid_;
}
inline void stReplyInviteResBattle::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 guildId = 3;
inline bool stReplyInviteResBattle::has_guildid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReplyInviteResBattle::set_has_guildid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReplyInviteResBattle::clear_has_guildid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReplyInviteResBattle::clear_guildid() {
  guildid_ = 0u;
  clear_has_guildid();
}
inline ::google::protobuf::uint32 stReplyInviteResBattle::guildid() const {
  return guildid_;
}
inline void stReplyInviteResBattle::set_guildid(::google::protobuf::uint32 value) {
  set_has_guildid();
  guildid_ = value;
}

// optional uint32 inviteId = 4;
inline bool stReplyInviteResBattle::has_inviteid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReplyInviteResBattle::set_has_inviteid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReplyInviteResBattle::clear_has_inviteid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReplyInviteResBattle::clear_inviteid() {
  inviteid_ = 0u;
  clear_has_inviteid();
}
inline ::google::protobuf::uint32 stReplyInviteResBattle::inviteid() const {
  return inviteid_;
}
inline void stReplyInviteResBattle::set_inviteid(::google::protobuf::uint32 value) {
  set_has_inviteid();
  inviteid_ = value;
}

// optional .PubGame.stGloryUser self = 5;
inline bool stReplyInviteResBattle::has_self() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stReplyInviteResBattle::set_has_self() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stReplyInviteResBattle::clear_has_self() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stReplyInviteResBattle::clear_self() {
  if (self_ != NULL) self_->::PubGame::stGloryUser::Clear();
  clear_has_self();
}
inline const ::PubGame::stGloryUser& stReplyInviteResBattle::self() const {
  return self_ != NULL ? *self_ : *default_instance_->self_;
}
inline ::PubGame::stGloryUser* stReplyInviteResBattle::mutable_self() {
  set_has_self();
  if (self_ == NULL) self_ = new ::PubGame::stGloryUser;
  return self_;
}
inline ::PubGame::stGloryUser* stReplyInviteResBattle::release_self() {
  clear_has_self();
  ::PubGame::stGloryUser* temp = self_;
  self_ = NULL;
  return temp;
}
inline void stReplyInviteResBattle::set_allocated_self(::PubGame::stGloryUser* self) {
  delete self_;
  self_ = self;
  if (self) {
    set_has_self();
  } else {
    clear_has_self();
  }
}

// -------------------------------------------------------------------

// stResBattleResChange

// optional bool isAdd = 1;
inline bool stResBattleResChange::has_isadd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResBattleResChange::set_has_isadd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResBattleResChange::clear_has_isadd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResBattleResChange::clear_isadd() {
  isadd_ = false;
  clear_has_isadd();
}
inline bool stResBattleResChange::isadd() const {
  return isadd_;
}
inline void stResBattleResChange::set_isadd(bool value) {
  set_has_isadd();
  isadd_ = value;
}

// optional uint32 charId = 2;
inline bool stResBattleResChange::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stResBattleResChange::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stResBattleResChange::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stResBattleResChange::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResBattleResChange::charid() const {
  return charid_;
}
inline void stResBattleResChange::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 item = 3;
inline bool stResBattleResChange::has_item() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stResBattleResChange::set_has_item() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stResBattleResChange::clear_has_item() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stResBattleResChange::clear_item() {
  item_ = 0u;
  clear_has_item();
}
inline ::google::protobuf::uint32 stResBattleResChange::item() const {
  return item_;
}
inline void stResBattleResChange::set_item(::google::protobuf::uint32 value) {
  set_has_item();
  item_ = value;
}

// optional uint32 val = 4;
inline bool stResBattleResChange::has_val() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stResBattleResChange::set_has_val() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stResBattleResChange::clear_has_val() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stResBattleResChange::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 stResBattleResChange::val() const {
  return val_;
}
inline void stResBattleResChange::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
}

// optional string desc = 5;
inline bool stResBattleResChange::has_desc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stResBattleResChange::set_has_desc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stResBattleResChange::clear_has_desc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stResBattleResChange::clear_desc() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    desc_->clear();
  }
  clear_has_desc();
}
inline const ::std::string& stResBattleResChange::desc() const {
  return *desc_;
}
inline void stResBattleResChange::set_desc(const ::std::string& value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stResBattleResChange::set_desc(const char* value) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(value);
}
inline void stResBattleResChange::set_desc(const char* value, size_t size) {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stResBattleResChange::mutable_desc() {
  set_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    desc_ = new ::std::string;
  }
  return desc_;
}
inline ::std::string* stResBattleResChange::release_desc() {
  clear_has_desc();
  if (desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = desc_;
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stResBattleResChange::set_allocated_desc(::std::string* desc) {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (desc) {
    set_has_desc();
    desc_ = desc;
  } else {
    clear_has_desc();
    desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSendResBattle2Pub

// optional .PubGame.stGloryUserDetail king = 1;
inline bool stSendResBattle2Pub::has_king() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendResBattle2Pub::set_has_king() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendResBattle2Pub::clear_has_king() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendResBattle2Pub::clear_king() {
  if (king_ != NULL) king_->::PubGame::stGloryUserDetail::Clear();
  clear_has_king();
}
inline const ::PubGame::stGloryUserDetail& stSendResBattle2Pub::king() const {
  return king_ != NULL ? *king_ : *default_instance_->king_;
}
inline ::PubGame::stGloryUserDetail* stSendResBattle2Pub::mutable_king() {
  set_has_king();
  if (king_ == NULL) king_ = new ::PubGame::stGloryUserDetail;
  return king_;
}
inline ::PubGame::stGloryUserDetail* stSendResBattle2Pub::release_king() {
  clear_has_king();
  ::PubGame::stGloryUserDetail* temp = king_;
  king_ = NULL;
  return temp;
}
inline void stSendResBattle2Pub::set_allocated_king(::PubGame::stGloryUserDetail* king) {
  delete king_;
  king_ = king;
  if (king) {
    set_has_king();
  } else {
    clear_has_king();
  }
}

// repeated .PubGame.stGloryUserDetail detail = 2;
inline int stSendResBattle2Pub::detail_size() const {
  return detail_.size();
}
inline void stSendResBattle2Pub::clear_detail() {
  detail_.Clear();
}
inline const ::PubGame::stGloryUserDetail& stSendResBattle2Pub::detail(int index) const {
  return detail_.Get(index);
}
inline ::PubGame::stGloryUserDetail* stSendResBattle2Pub::mutable_detail(int index) {
  return detail_.Mutable(index);
}
inline ::PubGame::stGloryUserDetail* stSendResBattle2Pub::add_detail() {
  return detail_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PubGame::stGloryUserDetail >&
stSendResBattle2Pub::detail() const {
  return detail_;
}
inline ::google::protobuf::RepeatedPtrField< ::PubGame::stGloryUserDetail >*
stSendResBattle2Pub::mutable_detail() {
  return &detail_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PubGame

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stLoginPubGame_ProtoModID>() {
  return ::PubGame::stLoginPubGame_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stLoginPubGame_ProtoFunID>() {
  return ::PubGame::stLoginPubGame_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stRoleInfo_ProtoModID>() {
  return ::PubGame::stRoleInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stRoleInfo_ProtoFunID>() {
  return ::PubGame::stRoleInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stNormalForwardPub_ProtoModID>() {
  return ::PubGame::stNormalForwardPub_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stNormalForwardPub_ProtoFunID>() {
  return ::PubGame::stNormalForwardPub_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stRoleLogout_ProtoModID>() {
  return ::PubGame::stRoleLogout_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stRoleLogout_ProtoFunID>() {
  return ::PubGame::stRoleLogout_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stRealTimeTeamMatch_ProtoModID>() {
  return ::PubGame::stRealTimeTeamMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stRealTimeTeamMatch_ProtoFunID>() {
  return ::PubGame::stRealTimeTeamMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stPubForwardNormal_ProtoModID>() {
  return ::PubGame::stPubForwardNormal_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stPubForwardNormal_ProtoFunID>() {
  return ::PubGame::stPubForwardNormal_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stPubForwardGate_ProtoModID>() {
  return ::PubGame::stPubForwardGate_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stPubForwardGate_ProtoFunID>() {
  return ::PubGame::stPubForwardGate_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stNotifyUserOnPub_ProtoModID>() {
  return ::PubGame::stNotifyUserOnPub_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stNotifyUserOnPub_ProtoFunID>() {
  return ::PubGame::stNotifyUserOnPub_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stPubForwardGlobal_ProtoModID>() {
  return ::PubGame::stPubForwardGlobal_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stPubForwardGlobal_ProtoFunID>() {
  return ::PubGame::stPubForwardGlobal_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stNotifyOne2OneResult_ProtoModID>() {
  return ::PubGame::stNotifyOne2OneResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stNotifyOne2OneResult_ProtoFunID>() {
  return ::PubGame::stNotifyOne2OneResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stNotifyRealTimeResult_ProtoModID>() {
  return ::PubGame::stNotifyRealTimeResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stNotifyRealTimeResult_ProtoFunID>() {
  return ::PubGame::stNotifyRealTimeResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSaveRoleInfo_ProtoModID>() {
  return ::PubGame::stSaveRoleInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSaveRoleInfo_ProtoFunID>() {
  return ::PubGame::stSaveRoleInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stAddRegisterNum_ProtoModID>() {
  return ::PubGame::stAddRegisterNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stAddRegisterNum_ProtoFunID>() {
  return ::PubGame::stAddRegisterNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stHeroLeagueMatch_ProtoModID>() {
  return ::PubGame::stHeroLeagueMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stHeroLeagueMatch_ProtoFunID>() {
  return ::PubGame::stHeroLeagueMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stHeroLeagueCancelMatch_ProtoModID>() {
  return ::PubGame::stHeroLeagueCancelMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stHeroLeagueCancelMatch_ProtoFunID>() {
  return ::PubGame::stHeroLeagueCancelMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stNotifyHeroLeagueResult_ProtoModID>() {
  return ::PubGame::stNotifyHeroLeagueResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stNotifyHeroLeagueResult_ProtoFunID>() {
  return ::PubGame::stNotifyHeroLeagueResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSynPubRoleList_ProtoModID>() {
  return ::PubGame::stSynPubRoleList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSynPubRoleList_ProtoFunID>() {
  return ::PubGame::stSynPubRoleList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSynPubRoleListResult_ProtoModID>() {
  return ::PubGame::stSynPubRoleListResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSynPubRoleListResult_ProtoFunID>() {
  return ::PubGame::stSynPubRoleListResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stReqMenberInfo_ProtoModID>() {
  return ::PubGame::stReqMenberInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stReqMenberInfo_ProtoFunID>() {
  return ::PubGame::stReqMenberInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stReqSynChampionInfo_ProtoModID>() {
  return ::PubGame::stReqSynChampionInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stReqSynChampionInfo_ProtoFunID>() {
  return ::PubGame::stReqSynChampionInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stEnterResBattle_ProtoModID>() {
  return ::PubGame::stEnterResBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stEnterResBattle_ProtoFunID>() {
  return ::PubGame::stEnterResBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSynResBattleUserData_ProtoModID>() {
  return ::PubGame::stSynResBattleUserData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSynResBattleUserData_ProtoFunID>() {
  return ::PubGame::stSynResBattleUserData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSynResBattleTop50_ProtoModID>() {
  return ::PubGame::stSynResBattleTop50_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSynResBattleTop50_ProtoFunID>() {
  return ::PubGame::stSynResBattleTop50_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSynResBattleKing_ProtoModID>() {
  return ::PubGame::stSynResBattleKing_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSynResBattleKing_ProtoFunID>() {
  return ::PubGame::stSynResBattleKing_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stBroadResBattleInvite_ProtoModID>() {
  return ::PubGame::stBroadResBattleInvite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stBroadResBattleInvite_ProtoFunID>() {
  return ::PubGame::stBroadResBattleInvite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stReplyInviteResBattle_ProtoModID>() {
  return ::PubGame::stReplyInviteResBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stReplyInviteResBattle_ProtoFunID>() {
  return ::PubGame::stReplyInviteResBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stResBattleResChange_ProtoModID>() {
  return ::PubGame::stResBattleResChange_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stResBattleResChange_ProtoFunID>() {
  return ::PubGame::stResBattleResChange_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSendResBattle2Pub_ProtoModID>() {
  return ::PubGame::stSendResBattle2Pub_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::stSendResBattle2Pub_ProtoFunID>() {
  return ::PubGame::stSendResBattle2Pub_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::PubGameModID>() {
  return ::PubGame::PubGameModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PubGame::eRealTimePKType>() {
  return ::PubGame::eRealTimePKType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PubGame_2eproto__INCLUDED
