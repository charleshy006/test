// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Team.proto

#ifndef PROTOBUF_Team_2eproto__INCLUDED
#define PROTOBUF_Team_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ModID.pb.h"
// @@protoc_insertion_point(includes)

namespace TeamProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Team_2eproto();
void protobuf_AssignDesc_Team_2eproto();
void protobuf_ShutdownFile_Team_2eproto();

class stReqCreateTeam;
class stCreateTeamResult;
class stSynMemberInfo;
class stRoomInfo;
class stReqEnterTeam;
class stEnterTeamResult;
class stAddTeamMember;
class stReqLeaveTeam;
class stNotifyLeaveTeam;
class stReqFireTeam;
class stNotifyFireTeam;
class stInviteJoinInTeam;
class stInviteJoinInTeamResult;
class stAskJoinInTeam;
class stReplyJoinInTeam;
class stReqEnterLv;
class stReqBroadcastInviteCmd;
class stBroadcastInviteJoinIn;
class stReqAutoMatchTeam;
class stWaitMatchTeam;
class stMathcTeamSuccess;
class stCancelAutoMatchTeam;
class stCancelAutoMatchTeamResult;
class stReqFirstKillInfoByID;
class stRetFirstKillInfo;
class stReqRealTimeSingleMatch;
class stRealTimeSingleMatchWait;
class stReqCancelRealTimeSingleMatch;
class stCancelRealTimeSingleMatchResult;
class stReqRealTimeTeamMatch;
class stRealTimeTeamMatchWait;
class stReqCancelRealTimeTeamMatch;
class stCancelRealTimeTeamMatchResult;
class stRealTimePKNotOpen;

enum stReqCreateTeam_ProtoModID {
  stReqCreateTeam_ProtoModID_ModID = 9
};
bool stReqCreateTeam_ProtoModID_IsValid(int value);
const stReqCreateTeam_ProtoModID stReqCreateTeam_ProtoModID_ProtoModID_MIN = stReqCreateTeam_ProtoModID_ModID;
const stReqCreateTeam_ProtoModID stReqCreateTeam_ProtoModID_ProtoModID_MAX = stReqCreateTeam_ProtoModID_ModID;
const int stReqCreateTeam_ProtoModID_ProtoModID_ARRAYSIZE = stReqCreateTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCreateTeam_ProtoModID_descriptor();
inline const ::std::string& stReqCreateTeam_ProtoModID_Name(stReqCreateTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCreateTeam_ProtoModID_descriptor(), value);
}
inline bool stReqCreateTeam_ProtoModID_Parse(
    const ::std::string& name, stReqCreateTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCreateTeam_ProtoModID>(
    stReqCreateTeam_ProtoModID_descriptor(), name, value);
}
enum stReqCreateTeam_ProtoFunID {
  stReqCreateTeam_ProtoFunID_FunID = 1
};
bool stReqCreateTeam_ProtoFunID_IsValid(int value);
const stReqCreateTeam_ProtoFunID stReqCreateTeam_ProtoFunID_ProtoFunID_MIN = stReqCreateTeam_ProtoFunID_FunID;
const stReqCreateTeam_ProtoFunID stReqCreateTeam_ProtoFunID_ProtoFunID_MAX = stReqCreateTeam_ProtoFunID_FunID;
const int stReqCreateTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCreateTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCreateTeam_ProtoFunID_descriptor();
inline const ::std::string& stReqCreateTeam_ProtoFunID_Name(stReqCreateTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCreateTeam_ProtoFunID_descriptor(), value);
}
inline bool stReqCreateTeam_ProtoFunID_Parse(
    const ::std::string& name, stReqCreateTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCreateTeam_ProtoFunID>(
    stReqCreateTeam_ProtoFunID_descriptor(), name, value);
}
enum stCreateTeamResult_eResult {
  stCreateTeamResult_eResult_eSUCCESS = 1,
  stCreateTeamResult_eResult_eHAS_JOIN_IN_TEAM = 2,
  stCreateTeamResult_eResult_eINNER_ERROR = 3
};
bool stCreateTeamResult_eResult_IsValid(int value);
const stCreateTeamResult_eResult stCreateTeamResult_eResult_eResult_MIN = stCreateTeamResult_eResult_eSUCCESS;
const stCreateTeamResult_eResult stCreateTeamResult_eResult_eResult_MAX = stCreateTeamResult_eResult_eINNER_ERROR;
const int stCreateTeamResult_eResult_eResult_ARRAYSIZE = stCreateTeamResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateTeamResult_eResult_descriptor();
inline const ::std::string& stCreateTeamResult_eResult_Name(stCreateTeamResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateTeamResult_eResult_descriptor(), value);
}
inline bool stCreateTeamResult_eResult_Parse(
    const ::std::string& name, stCreateTeamResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateTeamResult_eResult>(
    stCreateTeamResult_eResult_descriptor(), name, value);
}
enum stCreateTeamResult_ProtoModID {
  stCreateTeamResult_ProtoModID_ModID = 9
};
bool stCreateTeamResult_ProtoModID_IsValid(int value);
const stCreateTeamResult_ProtoModID stCreateTeamResult_ProtoModID_ProtoModID_MIN = stCreateTeamResult_ProtoModID_ModID;
const stCreateTeamResult_ProtoModID stCreateTeamResult_ProtoModID_ProtoModID_MAX = stCreateTeamResult_ProtoModID_ModID;
const int stCreateTeamResult_ProtoModID_ProtoModID_ARRAYSIZE = stCreateTeamResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateTeamResult_ProtoModID_descriptor();
inline const ::std::string& stCreateTeamResult_ProtoModID_Name(stCreateTeamResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateTeamResult_ProtoModID_descriptor(), value);
}
inline bool stCreateTeamResult_ProtoModID_Parse(
    const ::std::string& name, stCreateTeamResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateTeamResult_ProtoModID>(
    stCreateTeamResult_ProtoModID_descriptor(), name, value);
}
enum stCreateTeamResult_ProtoFunID {
  stCreateTeamResult_ProtoFunID_FunID = 2
};
bool stCreateTeamResult_ProtoFunID_IsValid(int value);
const stCreateTeamResult_ProtoFunID stCreateTeamResult_ProtoFunID_ProtoFunID_MIN = stCreateTeamResult_ProtoFunID_FunID;
const stCreateTeamResult_ProtoFunID stCreateTeamResult_ProtoFunID_ProtoFunID_MAX = stCreateTeamResult_ProtoFunID_FunID;
const int stCreateTeamResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCreateTeamResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCreateTeamResult_ProtoFunID_descriptor();
inline const ::std::string& stCreateTeamResult_ProtoFunID_Name(stCreateTeamResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCreateTeamResult_ProtoFunID_descriptor(), value);
}
inline bool stCreateTeamResult_ProtoFunID_Parse(
    const ::std::string& name, stCreateTeamResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCreateTeamResult_ProtoFunID>(
    stCreateTeamResult_ProtoFunID_descriptor(), name, value);
}
enum stRoomInfo_ProtoModID {
  stRoomInfo_ProtoModID_ModID = 9
};
bool stRoomInfo_ProtoModID_IsValid(int value);
const stRoomInfo_ProtoModID stRoomInfo_ProtoModID_ProtoModID_MIN = stRoomInfo_ProtoModID_ModID;
const stRoomInfo_ProtoModID stRoomInfo_ProtoModID_ProtoModID_MAX = stRoomInfo_ProtoModID_ModID;
const int stRoomInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRoomInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRoomInfo_ProtoModID_descriptor();
inline const ::std::string& stRoomInfo_ProtoModID_Name(stRoomInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRoomInfo_ProtoModID_descriptor(), value);
}
inline bool stRoomInfo_ProtoModID_Parse(
    const ::std::string& name, stRoomInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRoomInfo_ProtoModID>(
    stRoomInfo_ProtoModID_descriptor(), name, value);
}
enum stRoomInfo_ProtoFunID {
  stRoomInfo_ProtoFunID_FunID = 3
};
bool stRoomInfo_ProtoFunID_IsValid(int value);
const stRoomInfo_ProtoFunID stRoomInfo_ProtoFunID_ProtoFunID_MIN = stRoomInfo_ProtoFunID_FunID;
const stRoomInfo_ProtoFunID stRoomInfo_ProtoFunID_ProtoFunID_MAX = stRoomInfo_ProtoFunID_FunID;
const int stRoomInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRoomInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRoomInfo_ProtoFunID_descriptor();
inline const ::std::string& stRoomInfo_ProtoFunID_Name(stRoomInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRoomInfo_ProtoFunID_descriptor(), value);
}
inline bool stRoomInfo_ProtoFunID_Parse(
    const ::std::string& name, stRoomInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRoomInfo_ProtoFunID>(
    stRoomInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqEnterTeam_ProtoModID {
  stReqEnterTeam_ProtoModID_ModID = 9
};
bool stReqEnterTeam_ProtoModID_IsValid(int value);
const stReqEnterTeam_ProtoModID stReqEnterTeam_ProtoModID_ProtoModID_MIN = stReqEnterTeam_ProtoModID_ModID;
const stReqEnterTeam_ProtoModID stReqEnterTeam_ProtoModID_ProtoModID_MAX = stReqEnterTeam_ProtoModID_ModID;
const int stReqEnterTeam_ProtoModID_ProtoModID_ARRAYSIZE = stReqEnterTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterTeam_ProtoModID_descriptor();
inline const ::std::string& stReqEnterTeam_ProtoModID_Name(stReqEnterTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterTeam_ProtoModID_descriptor(), value);
}
inline bool stReqEnterTeam_ProtoModID_Parse(
    const ::std::string& name, stReqEnterTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterTeam_ProtoModID>(
    stReqEnterTeam_ProtoModID_descriptor(), name, value);
}
enum stReqEnterTeam_ProtoFunID {
  stReqEnterTeam_ProtoFunID_FunID = 4
};
bool stReqEnterTeam_ProtoFunID_IsValid(int value);
const stReqEnterTeam_ProtoFunID stReqEnterTeam_ProtoFunID_ProtoFunID_MIN = stReqEnterTeam_ProtoFunID_FunID;
const stReqEnterTeam_ProtoFunID stReqEnterTeam_ProtoFunID_ProtoFunID_MAX = stReqEnterTeam_ProtoFunID_FunID;
const int stReqEnterTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEnterTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterTeam_ProtoFunID_descriptor();
inline const ::std::string& stReqEnterTeam_ProtoFunID_Name(stReqEnterTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterTeam_ProtoFunID_descriptor(), value);
}
inline bool stReqEnterTeam_ProtoFunID_Parse(
    const ::std::string& name, stReqEnterTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterTeam_ProtoFunID>(
    stReqEnterTeam_ProtoFunID_descriptor(), name, value);
}
enum stEnterTeamResult_eResult {
  stEnterTeamResult_eResult_eTeam_Full = 1,
  stEnterTeamResult_eResult_eTeam_Not_Exist = 2,
  stEnterTeamResult_eResult_eTeam_Leader_Busy = 3,
  stEnterTeamResult_eResult_eHas_In_Team = 4,
  stEnterTeamResult_eResult_eTeam_Is_Auto_Match = 5,
  stEnterTeamResult_eResult_ePos_Has_Member = 6
};
bool stEnterTeamResult_eResult_IsValid(int value);
const stEnterTeamResult_eResult stEnterTeamResult_eResult_eResult_MIN = stEnterTeamResult_eResult_eTeam_Full;
const stEnterTeamResult_eResult stEnterTeamResult_eResult_eResult_MAX = stEnterTeamResult_eResult_ePos_Has_Member;
const int stEnterTeamResult_eResult_eResult_ARRAYSIZE = stEnterTeamResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterTeamResult_eResult_descriptor();
inline const ::std::string& stEnterTeamResult_eResult_Name(stEnterTeamResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterTeamResult_eResult_descriptor(), value);
}
inline bool stEnterTeamResult_eResult_Parse(
    const ::std::string& name, stEnterTeamResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterTeamResult_eResult>(
    stEnterTeamResult_eResult_descriptor(), name, value);
}
enum stEnterTeamResult_ProtoModID {
  stEnterTeamResult_ProtoModID_ModID = 9
};
bool stEnterTeamResult_ProtoModID_IsValid(int value);
const stEnterTeamResult_ProtoModID stEnterTeamResult_ProtoModID_ProtoModID_MIN = stEnterTeamResult_ProtoModID_ModID;
const stEnterTeamResult_ProtoModID stEnterTeamResult_ProtoModID_ProtoModID_MAX = stEnterTeamResult_ProtoModID_ModID;
const int stEnterTeamResult_ProtoModID_ProtoModID_ARRAYSIZE = stEnterTeamResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterTeamResult_ProtoModID_descriptor();
inline const ::std::string& stEnterTeamResult_ProtoModID_Name(stEnterTeamResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterTeamResult_ProtoModID_descriptor(), value);
}
inline bool stEnterTeamResult_ProtoModID_Parse(
    const ::std::string& name, stEnterTeamResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterTeamResult_ProtoModID>(
    stEnterTeamResult_ProtoModID_descriptor(), name, value);
}
enum stEnterTeamResult_ProtoFunID {
  stEnterTeamResult_ProtoFunID_FunID = 5
};
bool stEnterTeamResult_ProtoFunID_IsValid(int value);
const stEnterTeamResult_ProtoFunID stEnterTeamResult_ProtoFunID_ProtoFunID_MIN = stEnterTeamResult_ProtoFunID_FunID;
const stEnterTeamResult_ProtoFunID stEnterTeamResult_ProtoFunID_ProtoFunID_MAX = stEnterTeamResult_ProtoFunID_FunID;
const int stEnterTeamResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stEnterTeamResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterTeamResult_ProtoFunID_descriptor();
inline const ::std::string& stEnterTeamResult_ProtoFunID_Name(stEnterTeamResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterTeamResult_ProtoFunID_descriptor(), value);
}
inline bool stEnterTeamResult_ProtoFunID_Parse(
    const ::std::string& name, stEnterTeamResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterTeamResult_ProtoFunID>(
    stEnterTeamResult_ProtoFunID_descriptor(), name, value);
}
enum stAddTeamMember_ProtoModID {
  stAddTeamMember_ProtoModID_ModID = 9
};
bool stAddTeamMember_ProtoModID_IsValid(int value);
const stAddTeamMember_ProtoModID stAddTeamMember_ProtoModID_ProtoModID_MIN = stAddTeamMember_ProtoModID_ModID;
const stAddTeamMember_ProtoModID stAddTeamMember_ProtoModID_ProtoModID_MAX = stAddTeamMember_ProtoModID_ModID;
const int stAddTeamMember_ProtoModID_ProtoModID_ARRAYSIZE = stAddTeamMember_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddTeamMember_ProtoModID_descriptor();
inline const ::std::string& stAddTeamMember_ProtoModID_Name(stAddTeamMember_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddTeamMember_ProtoModID_descriptor(), value);
}
inline bool stAddTeamMember_ProtoModID_Parse(
    const ::std::string& name, stAddTeamMember_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddTeamMember_ProtoModID>(
    stAddTeamMember_ProtoModID_descriptor(), name, value);
}
enum stAddTeamMember_ProtoFunID {
  stAddTeamMember_ProtoFunID_FunID = 6
};
bool stAddTeamMember_ProtoFunID_IsValid(int value);
const stAddTeamMember_ProtoFunID stAddTeamMember_ProtoFunID_ProtoFunID_MIN = stAddTeamMember_ProtoFunID_FunID;
const stAddTeamMember_ProtoFunID stAddTeamMember_ProtoFunID_ProtoFunID_MAX = stAddTeamMember_ProtoFunID_FunID;
const int stAddTeamMember_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddTeamMember_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddTeamMember_ProtoFunID_descriptor();
inline const ::std::string& stAddTeamMember_ProtoFunID_Name(stAddTeamMember_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddTeamMember_ProtoFunID_descriptor(), value);
}
inline bool stAddTeamMember_ProtoFunID_Parse(
    const ::std::string& name, stAddTeamMember_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddTeamMember_ProtoFunID>(
    stAddTeamMember_ProtoFunID_descriptor(), name, value);
}
enum stReqLeaveTeam_ProtoModID {
  stReqLeaveTeam_ProtoModID_ModID = 9
};
bool stReqLeaveTeam_ProtoModID_IsValid(int value);
const stReqLeaveTeam_ProtoModID stReqLeaveTeam_ProtoModID_ProtoModID_MIN = stReqLeaveTeam_ProtoModID_ModID;
const stReqLeaveTeam_ProtoModID stReqLeaveTeam_ProtoModID_ProtoModID_MAX = stReqLeaveTeam_ProtoModID_ModID;
const int stReqLeaveTeam_ProtoModID_ProtoModID_ARRAYSIZE = stReqLeaveTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLeaveTeam_ProtoModID_descriptor();
inline const ::std::string& stReqLeaveTeam_ProtoModID_Name(stReqLeaveTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLeaveTeam_ProtoModID_descriptor(), value);
}
inline bool stReqLeaveTeam_ProtoModID_Parse(
    const ::std::string& name, stReqLeaveTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLeaveTeam_ProtoModID>(
    stReqLeaveTeam_ProtoModID_descriptor(), name, value);
}
enum stReqLeaveTeam_ProtoFunID {
  stReqLeaveTeam_ProtoFunID_FunID = 7
};
bool stReqLeaveTeam_ProtoFunID_IsValid(int value);
const stReqLeaveTeam_ProtoFunID stReqLeaveTeam_ProtoFunID_ProtoFunID_MIN = stReqLeaveTeam_ProtoFunID_FunID;
const stReqLeaveTeam_ProtoFunID stReqLeaveTeam_ProtoFunID_ProtoFunID_MAX = stReqLeaveTeam_ProtoFunID_FunID;
const int stReqLeaveTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLeaveTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLeaveTeam_ProtoFunID_descriptor();
inline const ::std::string& stReqLeaveTeam_ProtoFunID_Name(stReqLeaveTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLeaveTeam_ProtoFunID_descriptor(), value);
}
inline bool stReqLeaveTeam_ProtoFunID_Parse(
    const ::std::string& name, stReqLeaveTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLeaveTeam_ProtoFunID>(
    stReqLeaveTeam_ProtoFunID_descriptor(), name, value);
}
enum stNotifyLeaveTeam_ProtoModID {
  stNotifyLeaveTeam_ProtoModID_ModID = 9
};
bool stNotifyLeaveTeam_ProtoModID_IsValid(int value);
const stNotifyLeaveTeam_ProtoModID stNotifyLeaveTeam_ProtoModID_ProtoModID_MIN = stNotifyLeaveTeam_ProtoModID_ModID;
const stNotifyLeaveTeam_ProtoModID stNotifyLeaveTeam_ProtoModID_ProtoModID_MAX = stNotifyLeaveTeam_ProtoModID_ModID;
const int stNotifyLeaveTeam_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyLeaveTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyLeaveTeam_ProtoModID_descriptor();
inline const ::std::string& stNotifyLeaveTeam_ProtoModID_Name(stNotifyLeaveTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyLeaveTeam_ProtoModID_descriptor(), value);
}
inline bool stNotifyLeaveTeam_ProtoModID_Parse(
    const ::std::string& name, stNotifyLeaveTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyLeaveTeam_ProtoModID>(
    stNotifyLeaveTeam_ProtoModID_descriptor(), name, value);
}
enum stNotifyLeaveTeam_ProtoFunID {
  stNotifyLeaveTeam_ProtoFunID_FunID = 8
};
bool stNotifyLeaveTeam_ProtoFunID_IsValid(int value);
const stNotifyLeaveTeam_ProtoFunID stNotifyLeaveTeam_ProtoFunID_ProtoFunID_MIN = stNotifyLeaveTeam_ProtoFunID_FunID;
const stNotifyLeaveTeam_ProtoFunID stNotifyLeaveTeam_ProtoFunID_ProtoFunID_MAX = stNotifyLeaveTeam_ProtoFunID_FunID;
const int stNotifyLeaveTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyLeaveTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyLeaveTeam_ProtoFunID_descriptor();
inline const ::std::string& stNotifyLeaveTeam_ProtoFunID_Name(stNotifyLeaveTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyLeaveTeam_ProtoFunID_descriptor(), value);
}
inline bool stNotifyLeaveTeam_ProtoFunID_Parse(
    const ::std::string& name, stNotifyLeaveTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyLeaveTeam_ProtoFunID>(
    stNotifyLeaveTeam_ProtoFunID_descriptor(), name, value);
}
enum stReqFireTeam_ProtoModID {
  stReqFireTeam_ProtoModID_ModID = 9
};
bool stReqFireTeam_ProtoModID_IsValid(int value);
const stReqFireTeam_ProtoModID stReqFireTeam_ProtoModID_ProtoModID_MIN = stReqFireTeam_ProtoModID_ModID;
const stReqFireTeam_ProtoModID stReqFireTeam_ProtoModID_ProtoModID_MAX = stReqFireTeam_ProtoModID_ModID;
const int stReqFireTeam_ProtoModID_ProtoModID_ARRAYSIZE = stReqFireTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFireTeam_ProtoModID_descriptor();
inline const ::std::string& stReqFireTeam_ProtoModID_Name(stReqFireTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFireTeam_ProtoModID_descriptor(), value);
}
inline bool stReqFireTeam_ProtoModID_Parse(
    const ::std::string& name, stReqFireTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFireTeam_ProtoModID>(
    stReqFireTeam_ProtoModID_descriptor(), name, value);
}
enum stReqFireTeam_ProtoFunID {
  stReqFireTeam_ProtoFunID_FunID = 9
};
bool stReqFireTeam_ProtoFunID_IsValid(int value);
const stReqFireTeam_ProtoFunID stReqFireTeam_ProtoFunID_ProtoFunID_MIN = stReqFireTeam_ProtoFunID_FunID;
const stReqFireTeam_ProtoFunID stReqFireTeam_ProtoFunID_ProtoFunID_MAX = stReqFireTeam_ProtoFunID_FunID;
const int stReqFireTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqFireTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFireTeam_ProtoFunID_descriptor();
inline const ::std::string& stReqFireTeam_ProtoFunID_Name(stReqFireTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFireTeam_ProtoFunID_descriptor(), value);
}
inline bool stReqFireTeam_ProtoFunID_Parse(
    const ::std::string& name, stReqFireTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFireTeam_ProtoFunID>(
    stReqFireTeam_ProtoFunID_descriptor(), name, value);
}
enum stNotifyFireTeam_ProtoModID {
  stNotifyFireTeam_ProtoModID_ModID = 9
};
bool stNotifyFireTeam_ProtoModID_IsValid(int value);
const stNotifyFireTeam_ProtoModID stNotifyFireTeam_ProtoModID_ProtoModID_MIN = stNotifyFireTeam_ProtoModID_ModID;
const stNotifyFireTeam_ProtoModID stNotifyFireTeam_ProtoModID_ProtoModID_MAX = stNotifyFireTeam_ProtoModID_ModID;
const int stNotifyFireTeam_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyFireTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyFireTeam_ProtoModID_descriptor();
inline const ::std::string& stNotifyFireTeam_ProtoModID_Name(stNotifyFireTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyFireTeam_ProtoModID_descriptor(), value);
}
inline bool stNotifyFireTeam_ProtoModID_Parse(
    const ::std::string& name, stNotifyFireTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyFireTeam_ProtoModID>(
    stNotifyFireTeam_ProtoModID_descriptor(), name, value);
}
enum stNotifyFireTeam_ProtoFunID {
  stNotifyFireTeam_ProtoFunID_FunID = 10
};
bool stNotifyFireTeam_ProtoFunID_IsValid(int value);
const stNotifyFireTeam_ProtoFunID stNotifyFireTeam_ProtoFunID_ProtoFunID_MIN = stNotifyFireTeam_ProtoFunID_FunID;
const stNotifyFireTeam_ProtoFunID stNotifyFireTeam_ProtoFunID_ProtoFunID_MAX = stNotifyFireTeam_ProtoFunID_FunID;
const int stNotifyFireTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyFireTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyFireTeam_ProtoFunID_descriptor();
inline const ::std::string& stNotifyFireTeam_ProtoFunID_Name(stNotifyFireTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyFireTeam_ProtoFunID_descriptor(), value);
}
inline bool stNotifyFireTeam_ProtoFunID_Parse(
    const ::std::string& name, stNotifyFireTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyFireTeam_ProtoFunID>(
    stNotifyFireTeam_ProtoFunID_descriptor(), name, value);
}
enum stInviteJoinInTeam_ProtoModID {
  stInviteJoinInTeam_ProtoModID_ModID = 9
};
bool stInviteJoinInTeam_ProtoModID_IsValid(int value);
const stInviteJoinInTeam_ProtoModID stInviteJoinInTeam_ProtoModID_ProtoModID_MIN = stInviteJoinInTeam_ProtoModID_ModID;
const stInviteJoinInTeam_ProtoModID stInviteJoinInTeam_ProtoModID_ProtoModID_MAX = stInviteJoinInTeam_ProtoModID_ModID;
const int stInviteJoinInTeam_ProtoModID_ProtoModID_ARRAYSIZE = stInviteJoinInTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteJoinInTeam_ProtoModID_descriptor();
inline const ::std::string& stInviteJoinInTeam_ProtoModID_Name(stInviteJoinInTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteJoinInTeam_ProtoModID_descriptor(), value);
}
inline bool stInviteJoinInTeam_ProtoModID_Parse(
    const ::std::string& name, stInviteJoinInTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteJoinInTeam_ProtoModID>(
    stInviteJoinInTeam_ProtoModID_descriptor(), name, value);
}
enum stInviteJoinInTeam_ProtoFunID {
  stInviteJoinInTeam_ProtoFunID_FunID = 10
};
bool stInviteJoinInTeam_ProtoFunID_IsValid(int value);
const stInviteJoinInTeam_ProtoFunID stInviteJoinInTeam_ProtoFunID_ProtoFunID_MIN = stInviteJoinInTeam_ProtoFunID_FunID;
const stInviteJoinInTeam_ProtoFunID stInviteJoinInTeam_ProtoFunID_ProtoFunID_MAX = stInviteJoinInTeam_ProtoFunID_FunID;
const int stInviteJoinInTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stInviteJoinInTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteJoinInTeam_ProtoFunID_descriptor();
inline const ::std::string& stInviteJoinInTeam_ProtoFunID_Name(stInviteJoinInTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteJoinInTeam_ProtoFunID_descriptor(), value);
}
inline bool stInviteJoinInTeam_ProtoFunID_Parse(
    const ::std::string& name, stInviteJoinInTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteJoinInTeam_ProtoFunID>(
    stInviteJoinInTeam_ProtoFunID_descriptor(), name, value);
}
enum stInviteJoinInTeamResult_eResult {
  stInviteJoinInTeamResult_eResult_USER_OFFLINE = 1,
  stInviteJoinInTeamResult_eResult_NOT_LEADER = 2,
  stInviteJoinInTeamResult_eResult_DISAGREE = 3,
  stInviteJoinInTeamResult_eResult_TEAM_NOT_EXSIT = 4,
  stInviteJoinInTeamResult_eResult_NOT_IN_APPLY_LIST = 5,
  stInviteJoinInTeamResult_eResult_OTHER = 6,
  stInviteJoinInTeamResult_eResult_COPYMAP_NUM_USE_OUT = 7,
  stInviteJoinInTeamResult_eResult_TEAM_IS_AUTO_MATCH = 8
};
bool stInviteJoinInTeamResult_eResult_IsValid(int value);
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult_eResult_eResult_MIN = stInviteJoinInTeamResult_eResult_USER_OFFLINE;
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult_eResult_eResult_MAX = stInviteJoinInTeamResult_eResult_TEAM_IS_AUTO_MATCH;
const int stInviteJoinInTeamResult_eResult_eResult_ARRAYSIZE = stInviteJoinInTeamResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteJoinInTeamResult_eResult_descriptor();
inline const ::std::string& stInviteJoinInTeamResult_eResult_Name(stInviteJoinInTeamResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteJoinInTeamResult_eResult_descriptor(), value);
}
inline bool stInviteJoinInTeamResult_eResult_Parse(
    const ::std::string& name, stInviteJoinInTeamResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteJoinInTeamResult_eResult>(
    stInviteJoinInTeamResult_eResult_descriptor(), name, value);
}
enum stInviteJoinInTeamResult_ProtoModID {
  stInviteJoinInTeamResult_ProtoModID_ModID = 9
};
bool stInviteJoinInTeamResult_ProtoModID_IsValid(int value);
const stInviteJoinInTeamResult_ProtoModID stInviteJoinInTeamResult_ProtoModID_ProtoModID_MIN = stInviteJoinInTeamResult_ProtoModID_ModID;
const stInviteJoinInTeamResult_ProtoModID stInviteJoinInTeamResult_ProtoModID_ProtoModID_MAX = stInviteJoinInTeamResult_ProtoModID_ModID;
const int stInviteJoinInTeamResult_ProtoModID_ProtoModID_ARRAYSIZE = stInviteJoinInTeamResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteJoinInTeamResult_ProtoModID_descriptor();
inline const ::std::string& stInviteJoinInTeamResult_ProtoModID_Name(stInviteJoinInTeamResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteJoinInTeamResult_ProtoModID_descriptor(), value);
}
inline bool stInviteJoinInTeamResult_ProtoModID_Parse(
    const ::std::string& name, stInviteJoinInTeamResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteJoinInTeamResult_ProtoModID>(
    stInviteJoinInTeamResult_ProtoModID_descriptor(), name, value);
}
enum stInviteJoinInTeamResult_ProtoFunID {
  stInviteJoinInTeamResult_ProtoFunID_FunID = 11
};
bool stInviteJoinInTeamResult_ProtoFunID_IsValid(int value);
const stInviteJoinInTeamResult_ProtoFunID stInviteJoinInTeamResult_ProtoFunID_ProtoFunID_MIN = stInviteJoinInTeamResult_ProtoFunID_FunID;
const stInviteJoinInTeamResult_ProtoFunID stInviteJoinInTeamResult_ProtoFunID_ProtoFunID_MAX = stInviteJoinInTeamResult_ProtoFunID_FunID;
const int stInviteJoinInTeamResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stInviteJoinInTeamResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInviteJoinInTeamResult_ProtoFunID_descriptor();
inline const ::std::string& stInviteJoinInTeamResult_ProtoFunID_Name(stInviteJoinInTeamResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInviteJoinInTeamResult_ProtoFunID_descriptor(), value);
}
inline bool stInviteJoinInTeamResult_ProtoFunID_Parse(
    const ::std::string& name, stInviteJoinInTeamResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInviteJoinInTeamResult_ProtoFunID>(
    stInviteJoinInTeamResult_ProtoFunID_descriptor(), name, value);
}
enum stAskJoinInTeam_ProtoModID {
  stAskJoinInTeam_ProtoModID_ModID = 9
};
bool stAskJoinInTeam_ProtoModID_IsValid(int value);
const stAskJoinInTeam_ProtoModID stAskJoinInTeam_ProtoModID_ProtoModID_MIN = stAskJoinInTeam_ProtoModID_ModID;
const stAskJoinInTeam_ProtoModID stAskJoinInTeam_ProtoModID_ProtoModID_MAX = stAskJoinInTeam_ProtoModID_ModID;
const int stAskJoinInTeam_ProtoModID_ProtoModID_ARRAYSIZE = stAskJoinInTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAskJoinInTeam_ProtoModID_descriptor();
inline const ::std::string& stAskJoinInTeam_ProtoModID_Name(stAskJoinInTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAskJoinInTeam_ProtoModID_descriptor(), value);
}
inline bool stAskJoinInTeam_ProtoModID_Parse(
    const ::std::string& name, stAskJoinInTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAskJoinInTeam_ProtoModID>(
    stAskJoinInTeam_ProtoModID_descriptor(), name, value);
}
enum stAskJoinInTeam_ProtoFunID {
  stAskJoinInTeam_ProtoFunID_FunID = 12
};
bool stAskJoinInTeam_ProtoFunID_IsValid(int value);
const stAskJoinInTeam_ProtoFunID stAskJoinInTeam_ProtoFunID_ProtoFunID_MIN = stAskJoinInTeam_ProtoFunID_FunID;
const stAskJoinInTeam_ProtoFunID stAskJoinInTeam_ProtoFunID_ProtoFunID_MAX = stAskJoinInTeam_ProtoFunID_FunID;
const int stAskJoinInTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stAskJoinInTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAskJoinInTeam_ProtoFunID_descriptor();
inline const ::std::string& stAskJoinInTeam_ProtoFunID_Name(stAskJoinInTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAskJoinInTeam_ProtoFunID_descriptor(), value);
}
inline bool stAskJoinInTeam_ProtoFunID_Parse(
    const ::std::string& name, stAskJoinInTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAskJoinInTeam_ProtoFunID>(
    stAskJoinInTeam_ProtoFunID_descriptor(), name, value);
}
enum stReplyJoinInTeam_ProtoModID {
  stReplyJoinInTeam_ProtoModID_ModID = 9
};
bool stReplyJoinInTeam_ProtoModID_IsValid(int value);
const stReplyJoinInTeam_ProtoModID stReplyJoinInTeam_ProtoModID_ProtoModID_MIN = stReplyJoinInTeam_ProtoModID_ModID;
const stReplyJoinInTeam_ProtoModID stReplyJoinInTeam_ProtoModID_ProtoModID_MAX = stReplyJoinInTeam_ProtoModID_ModID;
const int stReplyJoinInTeam_ProtoModID_ProtoModID_ARRAYSIZE = stReplyJoinInTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyJoinInTeam_ProtoModID_descriptor();
inline const ::std::string& stReplyJoinInTeam_ProtoModID_Name(stReplyJoinInTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyJoinInTeam_ProtoModID_descriptor(), value);
}
inline bool stReplyJoinInTeam_ProtoModID_Parse(
    const ::std::string& name, stReplyJoinInTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyJoinInTeam_ProtoModID>(
    stReplyJoinInTeam_ProtoModID_descriptor(), name, value);
}
enum stReplyJoinInTeam_ProtoFunID {
  stReplyJoinInTeam_ProtoFunID_FunID = 13
};
bool stReplyJoinInTeam_ProtoFunID_IsValid(int value);
const stReplyJoinInTeam_ProtoFunID stReplyJoinInTeam_ProtoFunID_ProtoFunID_MIN = stReplyJoinInTeam_ProtoFunID_FunID;
const stReplyJoinInTeam_ProtoFunID stReplyJoinInTeam_ProtoFunID_ProtoFunID_MAX = stReplyJoinInTeam_ProtoFunID_FunID;
const int stReplyJoinInTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplyJoinInTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplyJoinInTeam_ProtoFunID_descriptor();
inline const ::std::string& stReplyJoinInTeam_ProtoFunID_Name(stReplyJoinInTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplyJoinInTeam_ProtoFunID_descriptor(), value);
}
inline bool stReplyJoinInTeam_ProtoFunID_Parse(
    const ::std::string& name, stReplyJoinInTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplyJoinInTeam_ProtoFunID>(
    stReplyJoinInTeam_ProtoFunID_descriptor(), name, value);
}
enum stReqEnterLv_ProtoModID {
  stReqEnterLv_ProtoModID_ModID = 9
};
bool stReqEnterLv_ProtoModID_IsValid(int value);
const stReqEnterLv_ProtoModID stReqEnterLv_ProtoModID_ProtoModID_MIN = stReqEnterLv_ProtoModID_ModID;
const stReqEnterLv_ProtoModID stReqEnterLv_ProtoModID_ProtoModID_MAX = stReqEnterLv_ProtoModID_ModID;
const int stReqEnterLv_ProtoModID_ProtoModID_ARRAYSIZE = stReqEnterLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterLv_ProtoModID_descriptor();
inline const ::std::string& stReqEnterLv_ProtoModID_Name(stReqEnterLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterLv_ProtoModID_descriptor(), value);
}
inline bool stReqEnterLv_ProtoModID_Parse(
    const ::std::string& name, stReqEnterLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterLv_ProtoModID>(
    stReqEnterLv_ProtoModID_descriptor(), name, value);
}
enum stReqEnterLv_ProtoFunID {
  stReqEnterLv_ProtoFunID_FunID = 14
};
bool stReqEnterLv_ProtoFunID_IsValid(int value);
const stReqEnterLv_ProtoFunID stReqEnterLv_ProtoFunID_ProtoFunID_MIN = stReqEnterLv_ProtoFunID_FunID;
const stReqEnterLv_ProtoFunID stReqEnterLv_ProtoFunID_ProtoFunID_MAX = stReqEnterLv_ProtoFunID_FunID;
const int stReqEnterLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEnterLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterLv_ProtoFunID_descriptor();
inline const ::std::string& stReqEnterLv_ProtoFunID_Name(stReqEnterLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterLv_ProtoFunID_descriptor(), value);
}
inline bool stReqEnterLv_ProtoFunID_Parse(
    const ::std::string& name, stReqEnterLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterLv_ProtoFunID>(
    stReqEnterLv_ProtoFunID_descriptor(), name, value);
}
enum stReqBroadcastInviteCmd_ProtoModID {
  stReqBroadcastInviteCmd_ProtoModID_ModID = 9
};
bool stReqBroadcastInviteCmd_ProtoModID_IsValid(int value);
const stReqBroadcastInviteCmd_ProtoModID stReqBroadcastInviteCmd_ProtoModID_ProtoModID_MIN = stReqBroadcastInviteCmd_ProtoModID_ModID;
const stReqBroadcastInviteCmd_ProtoModID stReqBroadcastInviteCmd_ProtoModID_ProtoModID_MAX = stReqBroadcastInviteCmd_ProtoModID_ModID;
const int stReqBroadcastInviteCmd_ProtoModID_ProtoModID_ARRAYSIZE = stReqBroadcastInviteCmd_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBroadcastInviteCmd_ProtoModID_descriptor();
inline const ::std::string& stReqBroadcastInviteCmd_ProtoModID_Name(stReqBroadcastInviteCmd_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBroadcastInviteCmd_ProtoModID_descriptor(), value);
}
inline bool stReqBroadcastInviteCmd_ProtoModID_Parse(
    const ::std::string& name, stReqBroadcastInviteCmd_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBroadcastInviteCmd_ProtoModID>(
    stReqBroadcastInviteCmd_ProtoModID_descriptor(), name, value);
}
enum stReqBroadcastInviteCmd_ProtoFunID {
  stReqBroadcastInviteCmd_ProtoFunID_FunID = 15
};
bool stReqBroadcastInviteCmd_ProtoFunID_IsValid(int value);
const stReqBroadcastInviteCmd_ProtoFunID stReqBroadcastInviteCmd_ProtoFunID_ProtoFunID_MIN = stReqBroadcastInviteCmd_ProtoFunID_FunID;
const stReqBroadcastInviteCmd_ProtoFunID stReqBroadcastInviteCmd_ProtoFunID_ProtoFunID_MAX = stReqBroadcastInviteCmd_ProtoFunID_FunID;
const int stReqBroadcastInviteCmd_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBroadcastInviteCmd_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBroadcastInviteCmd_ProtoFunID_descriptor();
inline const ::std::string& stReqBroadcastInviteCmd_ProtoFunID_Name(stReqBroadcastInviteCmd_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBroadcastInviteCmd_ProtoFunID_descriptor(), value);
}
inline bool stReqBroadcastInviteCmd_ProtoFunID_Parse(
    const ::std::string& name, stReqBroadcastInviteCmd_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBroadcastInviteCmd_ProtoFunID>(
    stReqBroadcastInviteCmd_ProtoFunID_descriptor(), name, value);
}
enum stBroadcastInviteJoinIn_ProtoModID {
  stBroadcastInviteJoinIn_ProtoModID_ModID = 9
};
bool stBroadcastInviteJoinIn_ProtoModID_IsValid(int value);
const stBroadcastInviteJoinIn_ProtoModID stBroadcastInviteJoinIn_ProtoModID_ProtoModID_MIN = stBroadcastInviteJoinIn_ProtoModID_ModID;
const stBroadcastInviteJoinIn_ProtoModID stBroadcastInviteJoinIn_ProtoModID_ProtoModID_MAX = stBroadcastInviteJoinIn_ProtoModID_ModID;
const int stBroadcastInviteJoinIn_ProtoModID_ProtoModID_ARRAYSIZE = stBroadcastInviteJoinIn_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadcastInviteJoinIn_ProtoModID_descriptor();
inline const ::std::string& stBroadcastInviteJoinIn_ProtoModID_Name(stBroadcastInviteJoinIn_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadcastInviteJoinIn_ProtoModID_descriptor(), value);
}
inline bool stBroadcastInviteJoinIn_ProtoModID_Parse(
    const ::std::string& name, stBroadcastInviteJoinIn_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadcastInviteJoinIn_ProtoModID>(
    stBroadcastInviteJoinIn_ProtoModID_descriptor(), name, value);
}
enum stBroadcastInviteJoinIn_ProtoFunID {
  stBroadcastInviteJoinIn_ProtoFunID_FunID = 16
};
bool stBroadcastInviteJoinIn_ProtoFunID_IsValid(int value);
const stBroadcastInviteJoinIn_ProtoFunID stBroadcastInviteJoinIn_ProtoFunID_ProtoFunID_MIN = stBroadcastInviteJoinIn_ProtoFunID_FunID;
const stBroadcastInviteJoinIn_ProtoFunID stBroadcastInviteJoinIn_ProtoFunID_ProtoFunID_MAX = stBroadcastInviteJoinIn_ProtoFunID_FunID;
const int stBroadcastInviteJoinIn_ProtoFunID_ProtoFunID_ARRAYSIZE = stBroadcastInviteJoinIn_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadcastInviteJoinIn_ProtoFunID_descriptor();
inline const ::std::string& stBroadcastInviteJoinIn_ProtoFunID_Name(stBroadcastInviteJoinIn_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadcastInviteJoinIn_ProtoFunID_descriptor(), value);
}
inline bool stBroadcastInviteJoinIn_ProtoFunID_Parse(
    const ::std::string& name, stBroadcastInviteJoinIn_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadcastInviteJoinIn_ProtoFunID>(
    stBroadcastInviteJoinIn_ProtoFunID_descriptor(), name, value);
}
enum stReqAutoMatchTeam_ProtoModID {
  stReqAutoMatchTeam_ProtoModID_ModID = 9
};
bool stReqAutoMatchTeam_ProtoModID_IsValid(int value);
const stReqAutoMatchTeam_ProtoModID stReqAutoMatchTeam_ProtoModID_ProtoModID_MIN = stReqAutoMatchTeam_ProtoModID_ModID;
const stReqAutoMatchTeam_ProtoModID stReqAutoMatchTeam_ProtoModID_ProtoModID_MAX = stReqAutoMatchTeam_ProtoModID_ModID;
const int stReqAutoMatchTeam_ProtoModID_ProtoModID_ARRAYSIZE = stReqAutoMatchTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAutoMatchTeam_ProtoModID_descriptor();
inline const ::std::string& stReqAutoMatchTeam_ProtoModID_Name(stReqAutoMatchTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAutoMatchTeam_ProtoModID_descriptor(), value);
}
inline bool stReqAutoMatchTeam_ProtoModID_Parse(
    const ::std::string& name, stReqAutoMatchTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAutoMatchTeam_ProtoModID>(
    stReqAutoMatchTeam_ProtoModID_descriptor(), name, value);
}
enum stReqAutoMatchTeam_ProtoFunID {
  stReqAutoMatchTeam_ProtoFunID_FunID = 17
};
bool stReqAutoMatchTeam_ProtoFunID_IsValid(int value);
const stReqAutoMatchTeam_ProtoFunID stReqAutoMatchTeam_ProtoFunID_ProtoFunID_MIN = stReqAutoMatchTeam_ProtoFunID_FunID;
const stReqAutoMatchTeam_ProtoFunID stReqAutoMatchTeam_ProtoFunID_ProtoFunID_MAX = stReqAutoMatchTeam_ProtoFunID_FunID;
const int stReqAutoMatchTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAutoMatchTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAutoMatchTeam_ProtoFunID_descriptor();
inline const ::std::string& stReqAutoMatchTeam_ProtoFunID_Name(stReqAutoMatchTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAutoMatchTeam_ProtoFunID_descriptor(), value);
}
inline bool stReqAutoMatchTeam_ProtoFunID_Parse(
    const ::std::string& name, stReqAutoMatchTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAutoMatchTeam_ProtoFunID>(
    stReqAutoMatchTeam_ProtoFunID_descriptor(), name, value);
}
enum stWaitMatchTeam_ProtoModID {
  stWaitMatchTeam_ProtoModID_ModID = 9
};
bool stWaitMatchTeam_ProtoModID_IsValid(int value);
const stWaitMatchTeam_ProtoModID stWaitMatchTeam_ProtoModID_ProtoModID_MIN = stWaitMatchTeam_ProtoModID_ModID;
const stWaitMatchTeam_ProtoModID stWaitMatchTeam_ProtoModID_ProtoModID_MAX = stWaitMatchTeam_ProtoModID_ModID;
const int stWaitMatchTeam_ProtoModID_ProtoModID_ARRAYSIZE = stWaitMatchTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWaitMatchTeam_ProtoModID_descriptor();
inline const ::std::string& stWaitMatchTeam_ProtoModID_Name(stWaitMatchTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWaitMatchTeam_ProtoModID_descriptor(), value);
}
inline bool stWaitMatchTeam_ProtoModID_Parse(
    const ::std::string& name, stWaitMatchTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWaitMatchTeam_ProtoModID>(
    stWaitMatchTeam_ProtoModID_descriptor(), name, value);
}
enum stWaitMatchTeam_ProtoFunID {
  stWaitMatchTeam_ProtoFunID_FunID = 18
};
bool stWaitMatchTeam_ProtoFunID_IsValid(int value);
const stWaitMatchTeam_ProtoFunID stWaitMatchTeam_ProtoFunID_ProtoFunID_MIN = stWaitMatchTeam_ProtoFunID_FunID;
const stWaitMatchTeam_ProtoFunID stWaitMatchTeam_ProtoFunID_ProtoFunID_MAX = stWaitMatchTeam_ProtoFunID_FunID;
const int stWaitMatchTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stWaitMatchTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWaitMatchTeam_ProtoFunID_descriptor();
inline const ::std::string& stWaitMatchTeam_ProtoFunID_Name(stWaitMatchTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWaitMatchTeam_ProtoFunID_descriptor(), value);
}
inline bool stWaitMatchTeam_ProtoFunID_Parse(
    const ::std::string& name, stWaitMatchTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWaitMatchTeam_ProtoFunID>(
    stWaitMatchTeam_ProtoFunID_descriptor(), name, value);
}
enum stMathcTeamSuccess_ProtoModID {
  stMathcTeamSuccess_ProtoModID_ModID = 9
};
bool stMathcTeamSuccess_ProtoModID_IsValid(int value);
const stMathcTeamSuccess_ProtoModID stMathcTeamSuccess_ProtoModID_ProtoModID_MIN = stMathcTeamSuccess_ProtoModID_ModID;
const stMathcTeamSuccess_ProtoModID stMathcTeamSuccess_ProtoModID_ProtoModID_MAX = stMathcTeamSuccess_ProtoModID_ModID;
const int stMathcTeamSuccess_ProtoModID_ProtoModID_ARRAYSIZE = stMathcTeamSuccess_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMathcTeamSuccess_ProtoModID_descriptor();
inline const ::std::string& stMathcTeamSuccess_ProtoModID_Name(stMathcTeamSuccess_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMathcTeamSuccess_ProtoModID_descriptor(), value);
}
inline bool stMathcTeamSuccess_ProtoModID_Parse(
    const ::std::string& name, stMathcTeamSuccess_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMathcTeamSuccess_ProtoModID>(
    stMathcTeamSuccess_ProtoModID_descriptor(), name, value);
}
enum stMathcTeamSuccess_ProtoFunID {
  stMathcTeamSuccess_ProtoFunID_FunID = 19
};
bool stMathcTeamSuccess_ProtoFunID_IsValid(int value);
const stMathcTeamSuccess_ProtoFunID stMathcTeamSuccess_ProtoFunID_ProtoFunID_MIN = stMathcTeamSuccess_ProtoFunID_FunID;
const stMathcTeamSuccess_ProtoFunID stMathcTeamSuccess_ProtoFunID_ProtoFunID_MAX = stMathcTeamSuccess_ProtoFunID_FunID;
const int stMathcTeamSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE = stMathcTeamSuccess_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMathcTeamSuccess_ProtoFunID_descriptor();
inline const ::std::string& stMathcTeamSuccess_ProtoFunID_Name(stMathcTeamSuccess_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMathcTeamSuccess_ProtoFunID_descriptor(), value);
}
inline bool stMathcTeamSuccess_ProtoFunID_Parse(
    const ::std::string& name, stMathcTeamSuccess_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMathcTeamSuccess_ProtoFunID>(
    stMathcTeamSuccess_ProtoFunID_descriptor(), name, value);
}
enum stCancelAutoMatchTeam_ProtoModID {
  stCancelAutoMatchTeam_ProtoModID_ModID = 9
};
bool stCancelAutoMatchTeam_ProtoModID_IsValid(int value);
const stCancelAutoMatchTeam_ProtoModID stCancelAutoMatchTeam_ProtoModID_ProtoModID_MIN = stCancelAutoMatchTeam_ProtoModID_ModID;
const stCancelAutoMatchTeam_ProtoModID stCancelAutoMatchTeam_ProtoModID_ProtoModID_MAX = stCancelAutoMatchTeam_ProtoModID_ModID;
const int stCancelAutoMatchTeam_ProtoModID_ProtoModID_ARRAYSIZE = stCancelAutoMatchTeam_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeam_ProtoModID_descriptor();
inline const ::std::string& stCancelAutoMatchTeam_ProtoModID_Name(stCancelAutoMatchTeam_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelAutoMatchTeam_ProtoModID_descriptor(), value);
}
inline bool stCancelAutoMatchTeam_ProtoModID_Parse(
    const ::std::string& name, stCancelAutoMatchTeam_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelAutoMatchTeam_ProtoModID>(
    stCancelAutoMatchTeam_ProtoModID_descriptor(), name, value);
}
enum stCancelAutoMatchTeam_ProtoFunID {
  stCancelAutoMatchTeam_ProtoFunID_FunID = 20
};
bool stCancelAutoMatchTeam_ProtoFunID_IsValid(int value);
const stCancelAutoMatchTeam_ProtoFunID stCancelAutoMatchTeam_ProtoFunID_ProtoFunID_MIN = stCancelAutoMatchTeam_ProtoFunID_FunID;
const stCancelAutoMatchTeam_ProtoFunID stCancelAutoMatchTeam_ProtoFunID_ProtoFunID_MAX = stCancelAutoMatchTeam_ProtoFunID_FunID;
const int stCancelAutoMatchTeam_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelAutoMatchTeam_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeam_ProtoFunID_descriptor();
inline const ::std::string& stCancelAutoMatchTeam_ProtoFunID_Name(stCancelAutoMatchTeam_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelAutoMatchTeam_ProtoFunID_descriptor(), value);
}
inline bool stCancelAutoMatchTeam_ProtoFunID_Parse(
    const ::std::string& name, stCancelAutoMatchTeam_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelAutoMatchTeam_ProtoFunID>(
    stCancelAutoMatchTeam_ProtoFunID_descriptor(), name, value);
}
enum stCancelAutoMatchTeamResult_eResult {
  stCancelAutoMatchTeamResult_eResult_eSUCCESS = 1,
  stCancelAutoMatchTeamResult_eResult_eFAIL = 2
};
bool stCancelAutoMatchTeamResult_eResult_IsValid(int value);
const stCancelAutoMatchTeamResult_eResult stCancelAutoMatchTeamResult_eResult_eResult_MIN = stCancelAutoMatchTeamResult_eResult_eSUCCESS;
const stCancelAutoMatchTeamResult_eResult stCancelAutoMatchTeamResult_eResult_eResult_MAX = stCancelAutoMatchTeamResult_eResult_eFAIL;
const int stCancelAutoMatchTeamResult_eResult_eResult_ARRAYSIZE = stCancelAutoMatchTeamResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeamResult_eResult_descriptor();
inline const ::std::string& stCancelAutoMatchTeamResult_eResult_Name(stCancelAutoMatchTeamResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelAutoMatchTeamResult_eResult_descriptor(), value);
}
inline bool stCancelAutoMatchTeamResult_eResult_Parse(
    const ::std::string& name, stCancelAutoMatchTeamResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelAutoMatchTeamResult_eResult>(
    stCancelAutoMatchTeamResult_eResult_descriptor(), name, value);
}
enum stCancelAutoMatchTeamResult_ProtoModID {
  stCancelAutoMatchTeamResult_ProtoModID_ModID = 9
};
bool stCancelAutoMatchTeamResult_ProtoModID_IsValid(int value);
const stCancelAutoMatchTeamResult_ProtoModID stCancelAutoMatchTeamResult_ProtoModID_ProtoModID_MIN = stCancelAutoMatchTeamResult_ProtoModID_ModID;
const stCancelAutoMatchTeamResult_ProtoModID stCancelAutoMatchTeamResult_ProtoModID_ProtoModID_MAX = stCancelAutoMatchTeamResult_ProtoModID_ModID;
const int stCancelAutoMatchTeamResult_ProtoModID_ProtoModID_ARRAYSIZE = stCancelAutoMatchTeamResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeamResult_ProtoModID_descriptor();
inline const ::std::string& stCancelAutoMatchTeamResult_ProtoModID_Name(stCancelAutoMatchTeamResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelAutoMatchTeamResult_ProtoModID_descriptor(), value);
}
inline bool stCancelAutoMatchTeamResult_ProtoModID_Parse(
    const ::std::string& name, stCancelAutoMatchTeamResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelAutoMatchTeamResult_ProtoModID>(
    stCancelAutoMatchTeamResult_ProtoModID_descriptor(), name, value);
}
enum stCancelAutoMatchTeamResult_ProtoFunID {
  stCancelAutoMatchTeamResult_ProtoFunID_FunID = 21
};
bool stCancelAutoMatchTeamResult_ProtoFunID_IsValid(int value);
const stCancelAutoMatchTeamResult_ProtoFunID stCancelAutoMatchTeamResult_ProtoFunID_ProtoFunID_MIN = stCancelAutoMatchTeamResult_ProtoFunID_FunID;
const stCancelAutoMatchTeamResult_ProtoFunID stCancelAutoMatchTeamResult_ProtoFunID_ProtoFunID_MAX = stCancelAutoMatchTeamResult_ProtoFunID_FunID;
const int stCancelAutoMatchTeamResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelAutoMatchTeamResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeamResult_ProtoFunID_descriptor();
inline const ::std::string& stCancelAutoMatchTeamResult_ProtoFunID_Name(stCancelAutoMatchTeamResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelAutoMatchTeamResult_ProtoFunID_descriptor(), value);
}
inline bool stCancelAutoMatchTeamResult_ProtoFunID_Parse(
    const ::std::string& name, stCancelAutoMatchTeamResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelAutoMatchTeamResult_ProtoFunID>(
    stCancelAutoMatchTeamResult_ProtoFunID_descriptor(), name, value);
}
enum stReqFirstKillInfoByID_ProtoModID {
  stReqFirstKillInfoByID_ProtoModID_ModID = 9
};
bool stReqFirstKillInfoByID_ProtoModID_IsValid(int value);
const stReqFirstKillInfoByID_ProtoModID stReqFirstKillInfoByID_ProtoModID_ProtoModID_MIN = stReqFirstKillInfoByID_ProtoModID_ModID;
const stReqFirstKillInfoByID_ProtoModID stReqFirstKillInfoByID_ProtoModID_ProtoModID_MAX = stReqFirstKillInfoByID_ProtoModID_ModID;
const int stReqFirstKillInfoByID_ProtoModID_ProtoModID_ARRAYSIZE = stReqFirstKillInfoByID_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFirstKillInfoByID_ProtoModID_descriptor();
inline const ::std::string& stReqFirstKillInfoByID_ProtoModID_Name(stReqFirstKillInfoByID_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFirstKillInfoByID_ProtoModID_descriptor(), value);
}
inline bool stReqFirstKillInfoByID_ProtoModID_Parse(
    const ::std::string& name, stReqFirstKillInfoByID_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFirstKillInfoByID_ProtoModID>(
    stReqFirstKillInfoByID_ProtoModID_descriptor(), name, value);
}
enum stReqFirstKillInfoByID_ProtoFunID {
  stReqFirstKillInfoByID_ProtoFunID_FunID = 22
};
bool stReqFirstKillInfoByID_ProtoFunID_IsValid(int value);
const stReqFirstKillInfoByID_ProtoFunID stReqFirstKillInfoByID_ProtoFunID_ProtoFunID_MIN = stReqFirstKillInfoByID_ProtoFunID_FunID;
const stReqFirstKillInfoByID_ProtoFunID stReqFirstKillInfoByID_ProtoFunID_ProtoFunID_MAX = stReqFirstKillInfoByID_ProtoFunID_FunID;
const int stReqFirstKillInfoByID_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqFirstKillInfoByID_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFirstKillInfoByID_ProtoFunID_descriptor();
inline const ::std::string& stReqFirstKillInfoByID_ProtoFunID_Name(stReqFirstKillInfoByID_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFirstKillInfoByID_ProtoFunID_descriptor(), value);
}
inline bool stReqFirstKillInfoByID_ProtoFunID_Parse(
    const ::std::string& name, stReqFirstKillInfoByID_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFirstKillInfoByID_ProtoFunID>(
    stReqFirstKillInfoByID_ProtoFunID_descriptor(), name, value);
}
enum stRetFirstKillInfo_ProtoModID {
  stRetFirstKillInfo_ProtoModID_ModID = 9
};
bool stRetFirstKillInfo_ProtoModID_IsValid(int value);
const stRetFirstKillInfo_ProtoModID stRetFirstKillInfo_ProtoModID_ProtoModID_MIN = stRetFirstKillInfo_ProtoModID_ModID;
const stRetFirstKillInfo_ProtoModID stRetFirstKillInfo_ProtoModID_ProtoModID_MAX = stRetFirstKillInfo_ProtoModID_ModID;
const int stRetFirstKillInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetFirstKillInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFirstKillInfo_ProtoModID_descriptor();
inline const ::std::string& stRetFirstKillInfo_ProtoModID_Name(stRetFirstKillInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFirstKillInfo_ProtoModID_descriptor(), value);
}
inline bool stRetFirstKillInfo_ProtoModID_Parse(
    const ::std::string& name, stRetFirstKillInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFirstKillInfo_ProtoModID>(
    stRetFirstKillInfo_ProtoModID_descriptor(), name, value);
}
enum stRetFirstKillInfo_ProtoFunID {
  stRetFirstKillInfo_ProtoFunID_FunID = 23
};
bool stRetFirstKillInfo_ProtoFunID_IsValid(int value);
const stRetFirstKillInfo_ProtoFunID stRetFirstKillInfo_ProtoFunID_ProtoFunID_MIN = stRetFirstKillInfo_ProtoFunID_FunID;
const stRetFirstKillInfo_ProtoFunID stRetFirstKillInfo_ProtoFunID_ProtoFunID_MAX = stRetFirstKillInfo_ProtoFunID_FunID;
const int stRetFirstKillInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetFirstKillInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFirstKillInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetFirstKillInfo_ProtoFunID_Name(stRetFirstKillInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFirstKillInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetFirstKillInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetFirstKillInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFirstKillInfo_ProtoFunID>(
    stRetFirstKillInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqRealTimeSingleMatch_ProtoModID {
  stReqRealTimeSingleMatch_ProtoModID_ModID = 9
};
bool stReqRealTimeSingleMatch_ProtoModID_IsValid(int value);
const stReqRealTimeSingleMatch_ProtoModID stReqRealTimeSingleMatch_ProtoModID_ProtoModID_MIN = stReqRealTimeSingleMatch_ProtoModID_ModID;
const stReqRealTimeSingleMatch_ProtoModID stReqRealTimeSingleMatch_ProtoModID_ProtoModID_MAX = stReqRealTimeSingleMatch_ProtoModID_ModID;
const int stReqRealTimeSingleMatch_ProtoModID_ProtoModID_ARRAYSIZE = stReqRealTimeSingleMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRealTimeSingleMatch_ProtoModID_descriptor();
inline const ::std::string& stReqRealTimeSingleMatch_ProtoModID_Name(stReqRealTimeSingleMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRealTimeSingleMatch_ProtoModID_descriptor(), value);
}
inline bool stReqRealTimeSingleMatch_ProtoModID_Parse(
    const ::std::string& name, stReqRealTimeSingleMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRealTimeSingleMatch_ProtoModID>(
    stReqRealTimeSingleMatch_ProtoModID_descriptor(), name, value);
}
enum stReqRealTimeSingleMatch_ProtoFunID {
  stReqRealTimeSingleMatch_ProtoFunID_FunID = 24
};
bool stReqRealTimeSingleMatch_ProtoFunID_IsValid(int value);
const stReqRealTimeSingleMatch_ProtoFunID stReqRealTimeSingleMatch_ProtoFunID_ProtoFunID_MIN = stReqRealTimeSingleMatch_ProtoFunID_FunID;
const stReqRealTimeSingleMatch_ProtoFunID stReqRealTimeSingleMatch_ProtoFunID_ProtoFunID_MAX = stReqRealTimeSingleMatch_ProtoFunID_FunID;
const int stReqRealTimeSingleMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRealTimeSingleMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRealTimeSingleMatch_ProtoFunID_descriptor();
inline const ::std::string& stReqRealTimeSingleMatch_ProtoFunID_Name(stReqRealTimeSingleMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRealTimeSingleMatch_ProtoFunID_descriptor(), value);
}
inline bool stReqRealTimeSingleMatch_ProtoFunID_Parse(
    const ::std::string& name, stReqRealTimeSingleMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRealTimeSingleMatch_ProtoFunID>(
    stReqRealTimeSingleMatch_ProtoFunID_descriptor(), name, value);
}
enum stRealTimeSingleMatchWait_ProtoModID {
  stRealTimeSingleMatchWait_ProtoModID_ModID = 9
};
bool stRealTimeSingleMatchWait_ProtoModID_IsValid(int value);
const stRealTimeSingleMatchWait_ProtoModID stRealTimeSingleMatchWait_ProtoModID_ProtoModID_MIN = stRealTimeSingleMatchWait_ProtoModID_ModID;
const stRealTimeSingleMatchWait_ProtoModID stRealTimeSingleMatchWait_ProtoModID_ProtoModID_MAX = stRealTimeSingleMatchWait_ProtoModID_ModID;
const int stRealTimeSingleMatchWait_ProtoModID_ProtoModID_ARRAYSIZE = stRealTimeSingleMatchWait_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeSingleMatchWait_ProtoModID_descriptor();
inline const ::std::string& stRealTimeSingleMatchWait_ProtoModID_Name(stRealTimeSingleMatchWait_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeSingleMatchWait_ProtoModID_descriptor(), value);
}
inline bool stRealTimeSingleMatchWait_ProtoModID_Parse(
    const ::std::string& name, stRealTimeSingleMatchWait_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeSingleMatchWait_ProtoModID>(
    stRealTimeSingleMatchWait_ProtoModID_descriptor(), name, value);
}
enum stRealTimeSingleMatchWait_ProtoFunID {
  stRealTimeSingleMatchWait_ProtoFunID_FunID = 25
};
bool stRealTimeSingleMatchWait_ProtoFunID_IsValid(int value);
const stRealTimeSingleMatchWait_ProtoFunID stRealTimeSingleMatchWait_ProtoFunID_ProtoFunID_MIN = stRealTimeSingleMatchWait_ProtoFunID_FunID;
const stRealTimeSingleMatchWait_ProtoFunID stRealTimeSingleMatchWait_ProtoFunID_ProtoFunID_MAX = stRealTimeSingleMatchWait_ProtoFunID_FunID;
const int stRealTimeSingleMatchWait_ProtoFunID_ProtoFunID_ARRAYSIZE = stRealTimeSingleMatchWait_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeSingleMatchWait_ProtoFunID_descriptor();
inline const ::std::string& stRealTimeSingleMatchWait_ProtoFunID_Name(stRealTimeSingleMatchWait_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeSingleMatchWait_ProtoFunID_descriptor(), value);
}
inline bool stRealTimeSingleMatchWait_ProtoFunID_Parse(
    const ::std::string& name, stRealTimeSingleMatchWait_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeSingleMatchWait_ProtoFunID>(
    stRealTimeSingleMatchWait_ProtoFunID_descriptor(), name, value);
}
enum stReqCancelRealTimeSingleMatch_ProtoModID {
  stReqCancelRealTimeSingleMatch_ProtoModID_ModID = 9
};
bool stReqCancelRealTimeSingleMatch_ProtoModID_IsValid(int value);
const stReqCancelRealTimeSingleMatch_ProtoModID stReqCancelRealTimeSingleMatch_ProtoModID_ProtoModID_MIN = stReqCancelRealTimeSingleMatch_ProtoModID_ModID;
const stReqCancelRealTimeSingleMatch_ProtoModID stReqCancelRealTimeSingleMatch_ProtoModID_ProtoModID_MAX = stReqCancelRealTimeSingleMatch_ProtoModID_ModID;
const int stReqCancelRealTimeSingleMatch_ProtoModID_ProtoModID_ARRAYSIZE = stReqCancelRealTimeSingleMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeSingleMatch_ProtoModID_descriptor();
inline const ::std::string& stReqCancelRealTimeSingleMatch_ProtoModID_Name(stReqCancelRealTimeSingleMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCancelRealTimeSingleMatch_ProtoModID_descriptor(), value);
}
inline bool stReqCancelRealTimeSingleMatch_ProtoModID_Parse(
    const ::std::string& name, stReqCancelRealTimeSingleMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCancelRealTimeSingleMatch_ProtoModID>(
    stReqCancelRealTimeSingleMatch_ProtoModID_descriptor(), name, value);
}
enum stReqCancelRealTimeSingleMatch_ProtoFunID {
  stReqCancelRealTimeSingleMatch_ProtoFunID_FunID = 26
};
bool stReqCancelRealTimeSingleMatch_ProtoFunID_IsValid(int value);
const stReqCancelRealTimeSingleMatch_ProtoFunID stReqCancelRealTimeSingleMatch_ProtoFunID_ProtoFunID_MIN = stReqCancelRealTimeSingleMatch_ProtoFunID_FunID;
const stReqCancelRealTimeSingleMatch_ProtoFunID stReqCancelRealTimeSingleMatch_ProtoFunID_ProtoFunID_MAX = stReqCancelRealTimeSingleMatch_ProtoFunID_FunID;
const int stReqCancelRealTimeSingleMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCancelRealTimeSingleMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeSingleMatch_ProtoFunID_descriptor();
inline const ::std::string& stReqCancelRealTimeSingleMatch_ProtoFunID_Name(stReqCancelRealTimeSingleMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCancelRealTimeSingleMatch_ProtoFunID_descriptor(), value);
}
inline bool stReqCancelRealTimeSingleMatch_ProtoFunID_Parse(
    const ::std::string& name, stReqCancelRealTimeSingleMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCancelRealTimeSingleMatch_ProtoFunID>(
    stReqCancelRealTimeSingleMatch_ProtoFunID_descriptor(), name, value);
}
enum stCancelRealTimeSingleMatchResult_ProtoModID {
  stCancelRealTimeSingleMatchResult_ProtoModID_ModID = 9
};
bool stCancelRealTimeSingleMatchResult_ProtoModID_IsValid(int value);
const stCancelRealTimeSingleMatchResult_ProtoModID stCancelRealTimeSingleMatchResult_ProtoModID_ProtoModID_MIN = stCancelRealTimeSingleMatchResult_ProtoModID_ModID;
const stCancelRealTimeSingleMatchResult_ProtoModID stCancelRealTimeSingleMatchResult_ProtoModID_ProtoModID_MAX = stCancelRealTimeSingleMatchResult_ProtoModID_ModID;
const int stCancelRealTimeSingleMatchResult_ProtoModID_ProtoModID_ARRAYSIZE = stCancelRealTimeSingleMatchResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelRealTimeSingleMatchResult_ProtoModID_descriptor();
inline const ::std::string& stCancelRealTimeSingleMatchResult_ProtoModID_Name(stCancelRealTimeSingleMatchResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelRealTimeSingleMatchResult_ProtoModID_descriptor(), value);
}
inline bool stCancelRealTimeSingleMatchResult_ProtoModID_Parse(
    const ::std::string& name, stCancelRealTimeSingleMatchResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelRealTimeSingleMatchResult_ProtoModID>(
    stCancelRealTimeSingleMatchResult_ProtoModID_descriptor(), name, value);
}
enum stCancelRealTimeSingleMatchResult_ProtoFunID {
  stCancelRealTimeSingleMatchResult_ProtoFunID_FunID = 27
};
bool stCancelRealTimeSingleMatchResult_ProtoFunID_IsValid(int value);
const stCancelRealTimeSingleMatchResult_ProtoFunID stCancelRealTimeSingleMatchResult_ProtoFunID_ProtoFunID_MIN = stCancelRealTimeSingleMatchResult_ProtoFunID_FunID;
const stCancelRealTimeSingleMatchResult_ProtoFunID stCancelRealTimeSingleMatchResult_ProtoFunID_ProtoFunID_MAX = stCancelRealTimeSingleMatchResult_ProtoFunID_FunID;
const int stCancelRealTimeSingleMatchResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelRealTimeSingleMatchResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelRealTimeSingleMatchResult_ProtoFunID_descriptor();
inline const ::std::string& stCancelRealTimeSingleMatchResult_ProtoFunID_Name(stCancelRealTimeSingleMatchResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelRealTimeSingleMatchResult_ProtoFunID_descriptor(), value);
}
inline bool stCancelRealTimeSingleMatchResult_ProtoFunID_Parse(
    const ::std::string& name, stCancelRealTimeSingleMatchResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelRealTimeSingleMatchResult_ProtoFunID>(
    stCancelRealTimeSingleMatchResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRealTimeTeamMatch_ProtoModID {
  stReqRealTimeTeamMatch_ProtoModID_ModID = 9
};
bool stReqRealTimeTeamMatch_ProtoModID_IsValid(int value);
const stReqRealTimeTeamMatch_ProtoModID stReqRealTimeTeamMatch_ProtoModID_ProtoModID_MIN = stReqRealTimeTeamMatch_ProtoModID_ModID;
const stReqRealTimeTeamMatch_ProtoModID stReqRealTimeTeamMatch_ProtoModID_ProtoModID_MAX = stReqRealTimeTeamMatch_ProtoModID_ModID;
const int stReqRealTimeTeamMatch_ProtoModID_ProtoModID_ARRAYSIZE = stReqRealTimeTeamMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRealTimeTeamMatch_ProtoModID_descriptor();
inline const ::std::string& stReqRealTimeTeamMatch_ProtoModID_Name(stReqRealTimeTeamMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRealTimeTeamMatch_ProtoModID_descriptor(), value);
}
inline bool stReqRealTimeTeamMatch_ProtoModID_Parse(
    const ::std::string& name, stReqRealTimeTeamMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRealTimeTeamMatch_ProtoModID>(
    stReqRealTimeTeamMatch_ProtoModID_descriptor(), name, value);
}
enum stReqRealTimeTeamMatch_ProtoFunID {
  stReqRealTimeTeamMatch_ProtoFunID_FunID = 28
};
bool stReqRealTimeTeamMatch_ProtoFunID_IsValid(int value);
const stReqRealTimeTeamMatch_ProtoFunID stReqRealTimeTeamMatch_ProtoFunID_ProtoFunID_MIN = stReqRealTimeTeamMatch_ProtoFunID_FunID;
const stReqRealTimeTeamMatch_ProtoFunID stReqRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX = stReqRealTimeTeamMatch_ProtoFunID_FunID;
const int stReqRealTimeTeamMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRealTimeTeamMatch_ProtoFunID_descriptor();
inline const ::std::string& stReqRealTimeTeamMatch_ProtoFunID_Name(stReqRealTimeTeamMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRealTimeTeamMatch_ProtoFunID_descriptor(), value);
}
inline bool stReqRealTimeTeamMatch_ProtoFunID_Parse(
    const ::std::string& name, stReqRealTimeTeamMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRealTimeTeamMatch_ProtoFunID>(
    stReqRealTimeTeamMatch_ProtoFunID_descriptor(), name, value);
}
enum stRealTimeTeamMatchWait_ProtoModID {
  stRealTimeTeamMatchWait_ProtoModID_ModID = 9
};
bool stRealTimeTeamMatchWait_ProtoModID_IsValid(int value);
const stRealTimeTeamMatchWait_ProtoModID stRealTimeTeamMatchWait_ProtoModID_ProtoModID_MIN = stRealTimeTeamMatchWait_ProtoModID_ModID;
const stRealTimeTeamMatchWait_ProtoModID stRealTimeTeamMatchWait_ProtoModID_ProtoModID_MAX = stRealTimeTeamMatchWait_ProtoModID_ModID;
const int stRealTimeTeamMatchWait_ProtoModID_ProtoModID_ARRAYSIZE = stRealTimeTeamMatchWait_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatchWait_ProtoModID_descriptor();
inline const ::std::string& stRealTimeTeamMatchWait_ProtoModID_Name(stRealTimeTeamMatchWait_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeTeamMatchWait_ProtoModID_descriptor(), value);
}
inline bool stRealTimeTeamMatchWait_ProtoModID_Parse(
    const ::std::string& name, stRealTimeTeamMatchWait_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeTeamMatchWait_ProtoModID>(
    stRealTimeTeamMatchWait_ProtoModID_descriptor(), name, value);
}
enum stRealTimeTeamMatchWait_ProtoFunID {
  stRealTimeTeamMatchWait_ProtoFunID_FunID = 29
};
bool stRealTimeTeamMatchWait_ProtoFunID_IsValid(int value);
const stRealTimeTeamMatchWait_ProtoFunID stRealTimeTeamMatchWait_ProtoFunID_ProtoFunID_MIN = stRealTimeTeamMatchWait_ProtoFunID_FunID;
const stRealTimeTeamMatchWait_ProtoFunID stRealTimeTeamMatchWait_ProtoFunID_ProtoFunID_MAX = stRealTimeTeamMatchWait_ProtoFunID_FunID;
const int stRealTimeTeamMatchWait_ProtoFunID_ProtoFunID_ARRAYSIZE = stRealTimeTeamMatchWait_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatchWait_ProtoFunID_descriptor();
inline const ::std::string& stRealTimeTeamMatchWait_ProtoFunID_Name(stRealTimeTeamMatchWait_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeTeamMatchWait_ProtoFunID_descriptor(), value);
}
inline bool stRealTimeTeamMatchWait_ProtoFunID_Parse(
    const ::std::string& name, stRealTimeTeamMatchWait_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeTeamMatchWait_ProtoFunID>(
    stRealTimeTeamMatchWait_ProtoFunID_descriptor(), name, value);
}
enum stReqCancelRealTimeTeamMatch_ProtoModID {
  stReqCancelRealTimeTeamMatch_ProtoModID_ModID = 9
};
bool stReqCancelRealTimeTeamMatch_ProtoModID_IsValid(int value);
const stReqCancelRealTimeTeamMatch_ProtoModID stReqCancelRealTimeTeamMatch_ProtoModID_ProtoModID_MIN = stReqCancelRealTimeTeamMatch_ProtoModID_ModID;
const stReqCancelRealTimeTeamMatch_ProtoModID stReqCancelRealTimeTeamMatch_ProtoModID_ProtoModID_MAX = stReqCancelRealTimeTeamMatch_ProtoModID_ModID;
const int stReqCancelRealTimeTeamMatch_ProtoModID_ProtoModID_ARRAYSIZE = stReqCancelRealTimeTeamMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeTeamMatch_ProtoModID_descriptor();
inline const ::std::string& stReqCancelRealTimeTeamMatch_ProtoModID_Name(stReqCancelRealTimeTeamMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCancelRealTimeTeamMatch_ProtoModID_descriptor(), value);
}
inline bool stReqCancelRealTimeTeamMatch_ProtoModID_Parse(
    const ::std::string& name, stReqCancelRealTimeTeamMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCancelRealTimeTeamMatch_ProtoModID>(
    stReqCancelRealTimeTeamMatch_ProtoModID_descriptor(), name, value);
}
enum stReqCancelRealTimeTeamMatch_ProtoFunID {
  stReqCancelRealTimeTeamMatch_ProtoFunID_FunID = 30
};
bool stReqCancelRealTimeTeamMatch_ProtoFunID_IsValid(int value);
const stReqCancelRealTimeTeamMatch_ProtoFunID stReqCancelRealTimeTeamMatch_ProtoFunID_ProtoFunID_MIN = stReqCancelRealTimeTeamMatch_ProtoFunID_FunID;
const stReqCancelRealTimeTeamMatch_ProtoFunID stReqCancelRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX = stReqCancelRealTimeTeamMatch_ProtoFunID_FunID;
const int stReqCancelRealTimeTeamMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCancelRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeTeamMatch_ProtoFunID_descriptor();
inline const ::std::string& stReqCancelRealTimeTeamMatch_ProtoFunID_Name(stReqCancelRealTimeTeamMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCancelRealTimeTeamMatch_ProtoFunID_descriptor(), value);
}
inline bool stReqCancelRealTimeTeamMatch_ProtoFunID_Parse(
    const ::std::string& name, stReqCancelRealTimeTeamMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCancelRealTimeTeamMatch_ProtoFunID>(
    stReqCancelRealTimeTeamMatch_ProtoFunID_descriptor(), name, value);
}
enum stCancelRealTimeTeamMatchResult_ProtoModID {
  stCancelRealTimeTeamMatchResult_ProtoModID_ModID = 9
};
bool stCancelRealTimeTeamMatchResult_ProtoModID_IsValid(int value);
const stCancelRealTimeTeamMatchResult_ProtoModID stCancelRealTimeTeamMatchResult_ProtoModID_ProtoModID_MIN = stCancelRealTimeTeamMatchResult_ProtoModID_ModID;
const stCancelRealTimeTeamMatchResult_ProtoModID stCancelRealTimeTeamMatchResult_ProtoModID_ProtoModID_MAX = stCancelRealTimeTeamMatchResult_ProtoModID_ModID;
const int stCancelRealTimeTeamMatchResult_ProtoModID_ProtoModID_ARRAYSIZE = stCancelRealTimeTeamMatchResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelRealTimeTeamMatchResult_ProtoModID_descriptor();
inline const ::std::string& stCancelRealTimeTeamMatchResult_ProtoModID_Name(stCancelRealTimeTeamMatchResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelRealTimeTeamMatchResult_ProtoModID_descriptor(), value);
}
inline bool stCancelRealTimeTeamMatchResult_ProtoModID_Parse(
    const ::std::string& name, stCancelRealTimeTeamMatchResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelRealTimeTeamMatchResult_ProtoModID>(
    stCancelRealTimeTeamMatchResult_ProtoModID_descriptor(), name, value);
}
enum stCancelRealTimeTeamMatchResult_ProtoFunID {
  stCancelRealTimeTeamMatchResult_ProtoFunID_FunID = 31
};
bool stCancelRealTimeTeamMatchResult_ProtoFunID_IsValid(int value);
const stCancelRealTimeTeamMatchResult_ProtoFunID stCancelRealTimeTeamMatchResult_ProtoFunID_ProtoFunID_MIN = stCancelRealTimeTeamMatchResult_ProtoFunID_FunID;
const stCancelRealTimeTeamMatchResult_ProtoFunID stCancelRealTimeTeamMatchResult_ProtoFunID_ProtoFunID_MAX = stCancelRealTimeTeamMatchResult_ProtoFunID_FunID;
const int stCancelRealTimeTeamMatchResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelRealTimeTeamMatchResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelRealTimeTeamMatchResult_ProtoFunID_descriptor();
inline const ::std::string& stCancelRealTimeTeamMatchResult_ProtoFunID_Name(stCancelRealTimeTeamMatchResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelRealTimeTeamMatchResult_ProtoFunID_descriptor(), value);
}
inline bool stCancelRealTimeTeamMatchResult_ProtoFunID_Parse(
    const ::std::string& name, stCancelRealTimeTeamMatchResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelRealTimeTeamMatchResult_ProtoFunID>(
    stCancelRealTimeTeamMatchResult_ProtoFunID_descriptor(), name, value);
}
enum stRealTimePKNotOpen_ProtoModID {
  stRealTimePKNotOpen_ProtoModID_ModID = 9
};
bool stRealTimePKNotOpen_ProtoModID_IsValid(int value);
const stRealTimePKNotOpen_ProtoModID stRealTimePKNotOpen_ProtoModID_ProtoModID_MIN = stRealTimePKNotOpen_ProtoModID_ModID;
const stRealTimePKNotOpen_ProtoModID stRealTimePKNotOpen_ProtoModID_ProtoModID_MAX = stRealTimePKNotOpen_ProtoModID_ModID;
const int stRealTimePKNotOpen_ProtoModID_ProtoModID_ARRAYSIZE = stRealTimePKNotOpen_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimePKNotOpen_ProtoModID_descriptor();
inline const ::std::string& stRealTimePKNotOpen_ProtoModID_Name(stRealTimePKNotOpen_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimePKNotOpen_ProtoModID_descriptor(), value);
}
inline bool stRealTimePKNotOpen_ProtoModID_Parse(
    const ::std::string& name, stRealTimePKNotOpen_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimePKNotOpen_ProtoModID>(
    stRealTimePKNotOpen_ProtoModID_descriptor(), name, value);
}
enum stRealTimePKNotOpen_ProtoFunID {
  stRealTimePKNotOpen_ProtoFunID_FunID = 32
};
bool stRealTimePKNotOpen_ProtoFunID_IsValid(int value);
const stRealTimePKNotOpen_ProtoFunID stRealTimePKNotOpen_ProtoFunID_ProtoFunID_MIN = stRealTimePKNotOpen_ProtoFunID_FunID;
const stRealTimePKNotOpen_ProtoFunID stRealTimePKNotOpen_ProtoFunID_ProtoFunID_MAX = stRealTimePKNotOpen_ProtoFunID_FunID;
const int stRealTimePKNotOpen_ProtoFunID_ProtoFunID_ARRAYSIZE = stRealTimePKNotOpen_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimePKNotOpen_ProtoFunID_descriptor();
inline const ::std::string& stRealTimePKNotOpen_ProtoFunID_Name(stRealTimePKNotOpen_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimePKNotOpen_ProtoFunID_descriptor(), value);
}
inline bool stRealTimePKNotOpen_ProtoFunID_Parse(
    const ::std::string& name, stRealTimePKNotOpen_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimePKNotOpen_ProtoFunID>(
    stRealTimePKNotOpen_ProtoFunID_descriptor(), name, value);
}
enum eTeamType {
  eCopymap_Team = 1,
  eRealTime_Team = 2,
  eGuild_Copymap_Team = 3,
  eSpouse_Inviti = 4
};
bool eTeamType_IsValid(int value);
const eTeamType eTeamType_MIN = eCopymap_Team;
const eTeamType eTeamType_MAX = eSpouse_Inviti;
const int eTeamType_ARRAYSIZE = eTeamType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eTeamType_descriptor();
inline const ::std::string& eTeamType_Name(eTeamType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eTeamType_descriptor(), value);
}
inline bool eTeamType_Parse(
    const ::std::string& name, eTeamType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eTeamType>(
    eTeamType_descriptor(), name, value);
}
enum eRealTimePKType {
  eRealTimePKType_KillAll = 1,
  eRealTimePKType_Finish = 2
};
bool eRealTimePKType_IsValid(int value);
const eRealTimePKType eRealTimePKType_MIN = eRealTimePKType_KillAll;
const eRealTimePKType eRealTimePKType_MAX = eRealTimePKType_Finish;
const int eRealTimePKType_ARRAYSIZE = eRealTimePKType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eRealTimePKType_descriptor();
inline const ::std::string& eRealTimePKType_Name(eRealTimePKType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eRealTimePKType_descriptor(), value);
}
inline bool eRealTimePKType_Parse(
    const ::std::string& name, eRealTimePKType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eRealTimePKType>(
    eRealTimePKType_descriptor(), name, value);
}
// ===================================================================

class stReqCreateTeam : public ::google::protobuf::Message {
 public:
  stReqCreateTeam();
  virtual ~stReqCreateTeam();

  stReqCreateTeam(const stReqCreateTeam& from);

  inline stReqCreateTeam& operator=(const stReqCreateTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCreateTeam& default_instance();

  void Swap(stReqCreateTeam* other);

  // implements Message ----------------------------------------------

  stReqCreateTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCreateTeam& from);
  void MergeFrom(const stReqCreateTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCreateTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCreateTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCreateTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCreateTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCreateTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCreateTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCreateTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCreateTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCreateTeam_ProtoModID_Parse(name, value);
  }

  typedef stReqCreateTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCreateTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCreateTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCreateTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCreateTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCreateTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCreateTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCreateTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCreateTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copyMapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopyMapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqCreateTeam)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqCreateTeam* default_instance_;
};
// -------------------------------------------------------------------

class stCreateTeamResult : public ::google::protobuf::Message {
 public:
  stCreateTeamResult();
  virtual ~stCreateTeamResult();

  stCreateTeamResult(const stCreateTeamResult& from);

  inline stCreateTeamResult& operator=(const stCreateTeamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCreateTeamResult& default_instance();

  void Swap(stCreateTeamResult* other);

  // implements Message ----------------------------------------------

  stCreateTeamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCreateTeamResult& from);
  void MergeFrom(const stCreateTeamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCreateTeamResult_eResult eResult;
  static const eResult eSUCCESS = stCreateTeamResult_eResult_eSUCCESS;
  static const eResult eHAS_JOIN_IN_TEAM = stCreateTeamResult_eResult_eHAS_JOIN_IN_TEAM;
  static const eResult eINNER_ERROR = stCreateTeamResult_eResult_eINNER_ERROR;
  static inline bool eResult_IsValid(int value) {
    return stCreateTeamResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCreateTeamResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCreateTeamResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCreateTeamResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCreateTeamResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCreateTeamResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCreateTeamResult_eResult_Parse(name, value);
  }

  typedef stCreateTeamResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCreateTeamResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCreateTeamResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCreateTeamResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCreateTeamResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCreateTeamResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCreateTeamResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCreateTeamResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCreateTeamResult_ProtoModID_Parse(name, value);
  }

  typedef stCreateTeamResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCreateTeamResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCreateTeamResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCreateTeamResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCreateTeamResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCreateTeamResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCreateTeamResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCreateTeamResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCreateTeamResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.stCreateTeamResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::TeamProto::stCreateTeamResult_eResult result() const;
  inline void set_result(::TeamProto::stCreateTeamResult_eResult value);

  // @@protoc_insertion_point(class_scope:TeamProto.stCreateTeamResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stCreateTeamResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynMemberInfo : public ::google::protobuf::Message {
 public:
  stSynMemberInfo();
  virtual ~stSynMemberInfo();

  stSynMemberInfo(const stSynMemberInfo& from);

  inline stSynMemberInfo& operator=(const stSynMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMemberInfo& default_instance();

  void Swap(stSynMemberInfo* other);

  // implements Message ----------------------------------------------

  stSynMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMemberInfo& from);
  void MergeFrom(const stSynMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional bool leader = 6;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 6;
  inline bool leader() const;
  inline void set_leader(bool value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 pos = 8;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 8;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 headID = 9;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 9;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 10;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 10;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 11;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 11;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 12;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 12;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 13;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 13;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 14;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 14;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 15;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 15;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 16;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 17;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 18;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 18;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 19;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 19;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 20;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 20;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 21;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 21;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 22;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 22;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 fashionWingID = 23;
  inline bool has_fashionwingid() const;
  inline void clear_fashionwingid();
  static const int kFashionWingIDFieldNumber = 23;
  inline ::google::protobuf::uint32 fashionwingid() const;
  inline void set_fashionwingid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stSynMemberInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_fashionwingid();
  inline void clear_has_fashionwingid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  bool leader_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 fashionwingid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stSynMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRoomInfo : public ::google::protobuf::Message {
 public:
  stRoomInfo();
  virtual ~stRoomInfo();

  stRoomInfo(const stRoomInfo& from);

  inline stRoomInfo& operator=(const stRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRoomInfo& default_instance();

  void Swap(stRoomInfo* other);

  // implements Message ----------------------------------------------

  stRoomInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRoomInfo& from);
  void MergeFrom(const stRoomInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRoomInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRoomInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRoomInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRoomInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRoomInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRoomInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRoomInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRoomInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRoomInfo_ProtoModID_Parse(name, value);
  }

  typedef stRoomInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRoomInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRoomInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRoomInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRoomInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRoomInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRoomInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRoomInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRoomInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copyMapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopyMapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // repeated .TeamProto.stSynMemberInfo members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::TeamProto::stSynMemberInfo& members(int index) const;
  inline ::TeamProto::stSynMemberInfo* mutable_members(int index);
  inline ::TeamProto::stSynMemberInfo* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::TeamProto::stSynMemberInfo >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::TeamProto::stSynMemberInfo >*
      mutable_members();

  // optional uint32 teamID = 3;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 3;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stRoomInfo)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TeamProto::stSynMemberInfo > members_;
  ::google::protobuf::uint32 copymapid_;
  ::google::protobuf::uint32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stRoomInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqEnterTeam : public ::google::protobuf::Message {
 public:
  stReqEnterTeam();
  virtual ~stReqEnterTeam();

  stReqEnterTeam(const stReqEnterTeam& from);

  inline stReqEnterTeam& operator=(const stReqEnterTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEnterTeam& default_instance();

  void Swap(stReqEnterTeam* other);

  // implements Message ----------------------------------------------

  stReqEnterTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEnterTeam& from);
  void MergeFrom(const stReqEnterTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEnterTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEnterTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEnterTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEnterTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEnterTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEnterTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEnterTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEnterTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEnterTeam_ProtoModID_Parse(name, value);
  }

  typedef stReqEnterTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEnterTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEnterTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEnterTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEnterTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEnterTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEnterTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEnterTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEnterTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 teamID = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqEnterTeam)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqEnterTeam* default_instance_;
};
// -------------------------------------------------------------------

class stEnterTeamResult : public ::google::protobuf::Message {
 public:
  stEnterTeamResult();
  virtual ~stEnterTeamResult();

  stEnterTeamResult(const stEnterTeamResult& from);

  inline stEnterTeamResult& operator=(const stEnterTeamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterTeamResult& default_instance();

  void Swap(stEnterTeamResult* other);

  // implements Message ----------------------------------------------

  stEnterTeamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterTeamResult& from);
  void MergeFrom(const stEnterTeamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEnterTeamResult_eResult eResult;
  static const eResult eTeam_Full = stEnterTeamResult_eResult_eTeam_Full;
  static const eResult eTeam_Not_Exist = stEnterTeamResult_eResult_eTeam_Not_Exist;
  static const eResult eTeam_Leader_Busy = stEnterTeamResult_eResult_eTeam_Leader_Busy;
  static const eResult eHas_In_Team = stEnterTeamResult_eResult_eHas_In_Team;
  static const eResult eTeam_Is_Auto_Match = stEnterTeamResult_eResult_eTeam_Is_Auto_Match;
  static const eResult ePos_Has_Member = stEnterTeamResult_eResult_ePos_Has_Member;
  static inline bool eResult_IsValid(int value) {
    return stEnterTeamResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stEnterTeamResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stEnterTeamResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stEnterTeamResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stEnterTeamResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stEnterTeamResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stEnterTeamResult_eResult_Parse(name, value);
  }

  typedef stEnterTeamResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEnterTeamResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEnterTeamResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEnterTeamResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEnterTeamResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEnterTeamResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEnterTeamResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEnterTeamResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEnterTeamResult_ProtoModID_Parse(name, value);
  }

  typedef stEnterTeamResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEnterTeamResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEnterTeamResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEnterTeamResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEnterTeamResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEnterTeamResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEnterTeamResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEnterTeamResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEnterTeamResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.stEnterTeamResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::TeamProto::stEnterTeamResult_eResult result() const;
  inline void set_result(::TeamProto::stEnterTeamResult_eResult value);

  // @@protoc_insertion_point(class_scope:TeamProto.stEnterTeamResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stEnterTeamResult* default_instance_;
};
// -------------------------------------------------------------------

class stAddTeamMember : public ::google::protobuf::Message {
 public:
  stAddTeamMember();
  virtual ~stAddTeamMember();

  stAddTeamMember(const stAddTeamMember& from);

  inline stAddTeamMember& operator=(const stAddTeamMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddTeamMember& default_instance();

  void Swap(stAddTeamMember* other);

  // implements Message ----------------------------------------------

  stAddTeamMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddTeamMember& from);
  void MergeFrom(const stAddTeamMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddTeamMember_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddTeamMember_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddTeamMember_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddTeamMember_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddTeamMember_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddTeamMember_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddTeamMember_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddTeamMember_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddTeamMember_ProtoModID_Parse(name, value);
  }

  typedef stAddTeamMember_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddTeamMember_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddTeamMember_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddTeamMember_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddTeamMember_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddTeamMember_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddTeamMember_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddTeamMember_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddTeamMember_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .TeamProto.stSynMemberInfo memberInfo = 2;
  inline bool has_memberinfo() const;
  inline void clear_memberinfo();
  static const int kMemberInfoFieldNumber = 2;
  inline const ::TeamProto::stSynMemberInfo& memberinfo() const;
  inline ::TeamProto::stSynMemberInfo* mutable_memberinfo();
  inline ::TeamProto::stSynMemberInfo* release_memberinfo();
  inline void set_allocated_memberinfo(::TeamProto::stSynMemberInfo* memberinfo);

  // @@protoc_insertion_point(class_scope:TeamProto.stAddTeamMember)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_memberinfo();
  inline void clear_has_memberinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TeamProto::stSynMemberInfo* memberinfo_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stAddTeamMember* default_instance_;
};
// -------------------------------------------------------------------

class stReqLeaveTeam : public ::google::protobuf::Message {
 public:
  stReqLeaveTeam();
  virtual ~stReqLeaveTeam();

  stReqLeaveTeam(const stReqLeaveTeam& from);

  inline stReqLeaveTeam& operator=(const stReqLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLeaveTeam& default_instance();

  void Swap(stReqLeaveTeam* other);

  // implements Message ----------------------------------------------

  stReqLeaveTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLeaveTeam& from);
  void MergeFrom(const stReqLeaveTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLeaveTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLeaveTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLeaveTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLeaveTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLeaveTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLeaveTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLeaveTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLeaveTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLeaveTeam_ProtoModID_Parse(name, value);
  }

  typedef stReqLeaveTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLeaveTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLeaveTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLeaveTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLeaveTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLeaveTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLeaveTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLeaveTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLeaveTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqLeaveTeam)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqLeaveTeam* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyLeaveTeam : public ::google::protobuf::Message {
 public:
  stNotifyLeaveTeam();
  virtual ~stNotifyLeaveTeam();

  stNotifyLeaveTeam(const stNotifyLeaveTeam& from);

  inline stNotifyLeaveTeam& operator=(const stNotifyLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyLeaveTeam& default_instance();

  void Swap(stNotifyLeaveTeam* other);

  // implements Message ----------------------------------------------

  stNotifyLeaveTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyLeaveTeam& from);
  void MergeFrom(const stNotifyLeaveTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyLeaveTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyLeaveTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyLeaveTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyLeaveTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyLeaveTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyLeaveTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyLeaveTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyLeaveTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyLeaveTeam_ProtoModID_Parse(name, value);
  }

  typedef stNotifyLeaveTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyLeaveTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyLeaveTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyLeaveTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyLeaveTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyLeaveTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyLeaveTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyLeaveTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyLeaveTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stNotifyLeaveTeam)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stNotifyLeaveTeam* default_instance_;
};
// -------------------------------------------------------------------

class stReqFireTeam : public ::google::protobuf::Message {
 public:
  stReqFireTeam();
  virtual ~stReqFireTeam();

  stReqFireTeam(const stReqFireTeam& from);

  inline stReqFireTeam& operator=(const stReqFireTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqFireTeam& default_instance();

  void Swap(stReqFireTeam* other);

  // implements Message ----------------------------------------------

  stReqFireTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqFireTeam& from);
  void MergeFrom(const stReqFireTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqFireTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqFireTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqFireTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqFireTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqFireTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqFireTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqFireTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqFireTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqFireTeam_ProtoModID_Parse(name, value);
  }

  typedef stReqFireTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqFireTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqFireTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqFireTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqFireTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqFireTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqFireTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqFireTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqFireTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqFireTeam)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqFireTeam* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyFireTeam : public ::google::protobuf::Message {
 public:
  stNotifyFireTeam();
  virtual ~stNotifyFireTeam();

  stNotifyFireTeam(const stNotifyFireTeam& from);

  inline stNotifyFireTeam& operator=(const stNotifyFireTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyFireTeam& default_instance();

  void Swap(stNotifyFireTeam* other);

  // implements Message ----------------------------------------------

  stNotifyFireTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyFireTeam& from);
  void MergeFrom(const stNotifyFireTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyFireTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyFireTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyFireTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyFireTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyFireTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyFireTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyFireTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyFireTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyFireTeam_ProtoModID_Parse(name, value);
  }

  typedef stNotifyFireTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyFireTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyFireTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyFireTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyFireTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyFireTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyFireTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyFireTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyFireTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TeamProto.stNotifyFireTeam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stNotifyFireTeam* default_instance_;
};
// -------------------------------------------------------------------

class stInviteJoinInTeam : public ::google::protobuf::Message {
 public:
  stInviteJoinInTeam();
  virtual ~stInviteJoinInTeam();

  stInviteJoinInTeam(const stInviteJoinInTeam& from);

  inline stInviteJoinInTeam& operator=(const stInviteJoinInTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInviteJoinInTeam& default_instance();

  void Swap(stInviteJoinInTeam* other);

  // implements Message ----------------------------------------------

  stInviteJoinInTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInviteJoinInTeam& from);
  void MergeFrom(const stInviteJoinInTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInviteJoinInTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInviteJoinInTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInviteJoinInTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInviteJoinInTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInviteJoinInTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInviteJoinInTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInviteJoinInTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInviteJoinInTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInviteJoinInTeam_ProtoModID_Parse(name, value);
  }

  typedef stInviteJoinInTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInviteJoinInTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInviteJoinInTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInviteJoinInTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInviteJoinInTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInviteJoinInTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInviteJoinInTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInviteJoinInTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInviteJoinInTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .TeamProto.eTeamType eType = 3;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 3;
  inline ::TeamProto::eTeamType etype() const;
  inline void set_etype(::TeamProto::eTeamType value);

  // @@protoc_insertion_point(class_scope:TeamProto.stInviteJoinInTeam)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 pos_;
  int etype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stInviteJoinInTeam* default_instance_;
};
// -------------------------------------------------------------------

class stInviteJoinInTeamResult : public ::google::protobuf::Message {
 public:
  stInviteJoinInTeamResult();
  virtual ~stInviteJoinInTeamResult();

  stInviteJoinInTeamResult(const stInviteJoinInTeamResult& from);

  inline stInviteJoinInTeamResult& operator=(const stInviteJoinInTeamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInviteJoinInTeamResult& default_instance();

  void Swap(stInviteJoinInTeamResult* other);

  // implements Message ----------------------------------------------

  stInviteJoinInTeamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInviteJoinInTeamResult& from);
  void MergeFrom(const stInviteJoinInTeamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInviteJoinInTeamResult_eResult eResult;
  static const eResult USER_OFFLINE = stInviteJoinInTeamResult_eResult_USER_OFFLINE;
  static const eResult NOT_LEADER = stInviteJoinInTeamResult_eResult_NOT_LEADER;
  static const eResult DISAGREE = stInviteJoinInTeamResult_eResult_DISAGREE;
  static const eResult TEAM_NOT_EXSIT = stInviteJoinInTeamResult_eResult_TEAM_NOT_EXSIT;
  static const eResult NOT_IN_APPLY_LIST = stInviteJoinInTeamResult_eResult_NOT_IN_APPLY_LIST;
  static const eResult OTHER = stInviteJoinInTeamResult_eResult_OTHER;
  static const eResult COPYMAP_NUM_USE_OUT = stInviteJoinInTeamResult_eResult_COPYMAP_NUM_USE_OUT;
  static const eResult TEAM_IS_AUTO_MATCH = stInviteJoinInTeamResult_eResult_TEAM_IS_AUTO_MATCH;
  static inline bool eResult_IsValid(int value) {
    return stInviteJoinInTeamResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stInviteJoinInTeamResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stInviteJoinInTeamResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stInviteJoinInTeamResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stInviteJoinInTeamResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stInviteJoinInTeamResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stInviteJoinInTeamResult_eResult_Parse(name, value);
  }

  typedef stInviteJoinInTeamResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInviteJoinInTeamResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInviteJoinInTeamResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInviteJoinInTeamResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInviteJoinInTeamResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInviteJoinInTeamResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInviteJoinInTeamResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInviteJoinInTeamResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInviteJoinInTeamResult_ProtoModID_Parse(name, value);
  }

  typedef stInviteJoinInTeamResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInviteJoinInTeamResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInviteJoinInTeamResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInviteJoinInTeamResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInviteJoinInTeamResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInviteJoinInTeamResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInviteJoinInTeamResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInviteJoinInTeamResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInviteJoinInTeamResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.stInviteJoinInTeamResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::TeamProto::stInviteJoinInTeamResult_eResult result() const;
  inline void set_result(::TeamProto::stInviteJoinInTeamResult_eResult value);

  // optional .TeamProto.eTeamType eType = 2;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 2;
  inline ::TeamProto::eTeamType etype() const;
  inline void set_etype(::TeamProto::eTeamType value);

  // @@protoc_insertion_point(class_scope:TeamProto.stInviteJoinInTeamResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  int etype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stInviteJoinInTeamResult* default_instance_;
};
// -------------------------------------------------------------------

class stAskJoinInTeam : public ::google::protobuf::Message {
 public:
  stAskJoinInTeam();
  virtual ~stAskJoinInTeam();

  stAskJoinInTeam(const stAskJoinInTeam& from);

  inline stAskJoinInTeam& operator=(const stAskJoinInTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAskJoinInTeam& default_instance();

  void Swap(stAskJoinInTeam* other);

  // implements Message ----------------------------------------------

  stAskJoinInTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAskJoinInTeam& from);
  void MergeFrom(const stAskJoinInTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAskJoinInTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAskJoinInTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAskJoinInTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAskJoinInTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAskJoinInTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAskJoinInTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAskJoinInTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAskJoinInTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAskJoinInTeam_ProtoModID_Parse(name, value);
  }

  typedef stAskJoinInTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAskJoinInTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAskJoinInTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAskJoinInTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAskJoinInTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAskJoinInTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAskJoinInTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAskJoinInTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAskJoinInTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 teamID = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional string inviteName = 2;
  inline bool has_invitename() const;
  inline void clear_invitename();
  static const int kInviteNameFieldNumber = 2;
  inline const ::std::string& invitename() const;
  inline void set_invitename(const ::std::string& value);
  inline void set_invitename(const char* value);
  inline void set_invitename(const char* value, size_t size);
  inline ::std::string* mutable_invitename();
  inline ::std::string* release_invitename();
  inline void set_allocated_invitename(::std::string* invitename);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .TeamProto.eTeamType eType = 4;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 4;
  inline ::TeamProto::eTeamType etype() const;
  inline void set_etype(::TeamProto::eTeamType value);

  // optional uint32 copymapID = 5;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 5;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stAskJoinInTeam)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_invitename();
  inline void clear_has_invitename();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* invitename_;
  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 pos_;
  int etype_;
  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stAskJoinInTeam* default_instance_;
};
// -------------------------------------------------------------------

class stReplyJoinInTeam : public ::google::protobuf::Message {
 public:
  stReplyJoinInTeam();
  virtual ~stReplyJoinInTeam();

  stReplyJoinInTeam(const stReplyJoinInTeam& from);

  inline stReplyJoinInTeam& operator=(const stReplyJoinInTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplyJoinInTeam& default_instance();

  void Swap(stReplyJoinInTeam* other);

  // implements Message ----------------------------------------------

  stReplyJoinInTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplyJoinInTeam& from);
  void MergeFrom(const stReplyJoinInTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplyJoinInTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplyJoinInTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplyJoinInTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplyJoinInTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplyJoinInTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplyJoinInTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplyJoinInTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplyJoinInTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplyJoinInTeam_ProtoModID_Parse(name, value);
  }

  typedef stReplyJoinInTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplyJoinInTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplyJoinInTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplyJoinInTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplyJoinInTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplyJoinInTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplyJoinInTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplyJoinInTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplyJoinInTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 teamID = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional bool agree = 2;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 2;
  inline bool agree() const;
  inline void set_agree(bool value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional .TeamProto.eTeamType eType = 4;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 4;
  inline ::TeamProto::eTeamType etype() const;
  inline void set_etype(::TeamProto::eTeamType value);

  // optional bool timesUseOut = 5;
  inline bool has_timesuseout() const;
  inline void clear_timesuseout();
  static const int kTimesUseOutFieldNumber = 5;
  inline bool timesuseout() const;
  inline void set_timesuseout(bool value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReplyJoinInTeam)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_agree();
  inline void clear_has_agree();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_timesuseout();
  inline void clear_has_timesuseout();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 pos_;
  bool agree_;
  bool timesuseout_;
  int etype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReplyJoinInTeam* default_instance_;
};
// -------------------------------------------------------------------

class stReqEnterLv : public ::google::protobuf::Message {
 public:
  stReqEnterLv();
  virtual ~stReqEnterLv();

  stReqEnterLv(const stReqEnterLv& from);

  inline stReqEnterLv& operator=(const stReqEnterLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEnterLv& default_instance();

  void Swap(stReqEnterLv* other);

  // implements Message ----------------------------------------------

  stReqEnterLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEnterLv& from);
  void MergeFrom(const stReqEnterLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEnterLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEnterLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEnterLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEnterLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEnterLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEnterLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEnterLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEnterLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEnterLv_ProtoModID_Parse(name, value);
  }

  typedef stReqEnterLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEnterLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEnterLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEnterLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEnterLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEnterLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEnterLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEnterLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEnterLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copyMapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopyMapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqEnterLv)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqEnterLv* default_instance_;
};
// -------------------------------------------------------------------

class stReqBroadcastInviteCmd : public ::google::protobuf::Message {
 public:
  stReqBroadcastInviteCmd();
  virtual ~stReqBroadcastInviteCmd();

  stReqBroadcastInviteCmd(const stReqBroadcastInviteCmd& from);

  inline stReqBroadcastInviteCmd& operator=(const stReqBroadcastInviteCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBroadcastInviteCmd& default_instance();

  void Swap(stReqBroadcastInviteCmd* other);

  // implements Message ----------------------------------------------

  stReqBroadcastInviteCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBroadcastInviteCmd& from);
  void MergeFrom(const stReqBroadcastInviteCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBroadcastInviteCmd_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBroadcastInviteCmd_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBroadcastInviteCmd_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBroadcastInviteCmd_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBroadcastInviteCmd_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBroadcastInviteCmd_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBroadcastInviteCmd_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBroadcastInviteCmd_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBroadcastInviteCmd_ProtoModID_Parse(name, value);
  }

  typedef stReqBroadcastInviteCmd_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBroadcastInviteCmd_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBroadcastInviteCmd_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBroadcastInviteCmd_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBroadcastInviteCmd_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBroadcastInviteCmd_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBroadcastInviteCmd_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBroadcastInviteCmd_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBroadcastInviteCmd_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqBroadcastInviteCmd)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqBroadcastInviteCmd* default_instance_;
};
// -------------------------------------------------------------------

class stBroadcastInviteJoinIn : public ::google::protobuf::Message {
 public:
  stBroadcastInviteJoinIn();
  virtual ~stBroadcastInviteJoinIn();

  stBroadcastInviteJoinIn(const stBroadcastInviteJoinIn& from);

  inline stBroadcastInviteJoinIn& operator=(const stBroadcastInviteJoinIn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBroadcastInviteJoinIn& default_instance();

  void Swap(stBroadcastInviteJoinIn* other);

  // implements Message ----------------------------------------------

  stBroadcastInviteJoinIn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBroadcastInviteJoinIn& from);
  void MergeFrom(const stBroadcastInviteJoinIn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBroadcastInviteJoinIn_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBroadcastInviteJoinIn_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBroadcastInviteJoinIn_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBroadcastInviteJoinIn_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBroadcastInviteJoinIn_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBroadcastInviteJoinIn_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBroadcastInviteJoinIn_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBroadcastInviteJoinIn_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBroadcastInviteJoinIn_ProtoModID_Parse(name, value);
  }

  typedef stBroadcastInviteJoinIn_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBroadcastInviteJoinIn_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBroadcastInviteJoinIn_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBroadcastInviteJoinIn_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBroadcastInviteJoinIn_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBroadcastInviteJoinIn_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBroadcastInviteJoinIn_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBroadcastInviteJoinIn_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBroadcastInviteJoinIn_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 teamID = 1;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 1;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 6;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 6;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 7;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 7;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 copyMapID = 8;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopyMapIDFieldNumber = 8;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // optional uint32 photoID = 9;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 9;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stBroadcastInviteJoinIn)
 private:
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 teamid_;
  ::google::protobuf::uint32 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 copymapid_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stBroadcastInviteJoinIn* default_instance_;
};
// -------------------------------------------------------------------

class stReqAutoMatchTeam : public ::google::protobuf::Message {
 public:
  stReqAutoMatchTeam();
  virtual ~stReqAutoMatchTeam();

  stReqAutoMatchTeam(const stReqAutoMatchTeam& from);

  inline stReqAutoMatchTeam& operator=(const stReqAutoMatchTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAutoMatchTeam& default_instance();

  void Swap(stReqAutoMatchTeam* other);

  // implements Message ----------------------------------------------

  stReqAutoMatchTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAutoMatchTeam& from);
  void MergeFrom(const stReqAutoMatchTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAutoMatchTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAutoMatchTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAutoMatchTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAutoMatchTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAutoMatchTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAutoMatchTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAutoMatchTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAutoMatchTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAutoMatchTeam_ProtoModID_Parse(name, value);
  }

  typedef stReqAutoMatchTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAutoMatchTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAutoMatchTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAutoMatchTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAutoMatchTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAutoMatchTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAutoMatchTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAutoMatchTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAutoMatchTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 copyMapID = 2;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopyMapIDFieldNumber = 2;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqAutoMatchTeam)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqAutoMatchTeam* default_instance_;
};
// -------------------------------------------------------------------

class stWaitMatchTeam : public ::google::protobuf::Message {
 public:
  stWaitMatchTeam();
  virtual ~stWaitMatchTeam();

  stWaitMatchTeam(const stWaitMatchTeam& from);

  inline stWaitMatchTeam& operator=(const stWaitMatchTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWaitMatchTeam& default_instance();

  void Swap(stWaitMatchTeam* other);

  // implements Message ----------------------------------------------

  stWaitMatchTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWaitMatchTeam& from);
  void MergeFrom(const stWaitMatchTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stWaitMatchTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stWaitMatchTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stWaitMatchTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stWaitMatchTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stWaitMatchTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stWaitMatchTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stWaitMatchTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stWaitMatchTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stWaitMatchTeam_ProtoModID_Parse(name, value);
  }

  typedef stWaitMatchTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stWaitMatchTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stWaitMatchTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stWaitMatchTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stWaitMatchTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stWaitMatchTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stWaitMatchTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stWaitMatchTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stWaitMatchTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TeamProto.stWaitMatchTeam)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stWaitMatchTeam* default_instance_;
};
// -------------------------------------------------------------------

class stMathcTeamSuccess : public ::google::protobuf::Message {
 public:
  stMathcTeamSuccess();
  virtual ~stMathcTeamSuccess();

  stMathcTeamSuccess(const stMathcTeamSuccess& from);

  inline stMathcTeamSuccess& operator=(const stMathcTeamSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMathcTeamSuccess& default_instance();

  void Swap(stMathcTeamSuccess* other);

  // implements Message ----------------------------------------------

  stMathcTeamSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMathcTeamSuccess& from);
  void MergeFrom(const stMathcTeamSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMathcTeamSuccess_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMathcTeamSuccess_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMathcTeamSuccess_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMathcTeamSuccess_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMathcTeamSuccess_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMathcTeamSuccess_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMathcTeamSuccess_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMathcTeamSuccess_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMathcTeamSuccess_ProtoModID_Parse(name, value);
  }

  typedef stMathcTeamSuccess_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMathcTeamSuccess_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMathcTeamSuccess_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMathcTeamSuccess_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMathcTeamSuccess_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMathcTeamSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMathcTeamSuccess_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMathcTeamSuccess_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMathcTeamSuccess_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TeamProto.stMathcTeamSuccess)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stMathcTeamSuccess* default_instance_;
};
// -------------------------------------------------------------------

class stCancelAutoMatchTeam : public ::google::protobuf::Message {
 public:
  stCancelAutoMatchTeam();
  virtual ~stCancelAutoMatchTeam();

  stCancelAutoMatchTeam(const stCancelAutoMatchTeam& from);

  inline stCancelAutoMatchTeam& operator=(const stCancelAutoMatchTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelAutoMatchTeam& default_instance();

  void Swap(stCancelAutoMatchTeam* other);

  // implements Message ----------------------------------------------

  stCancelAutoMatchTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelAutoMatchTeam& from);
  void MergeFrom(const stCancelAutoMatchTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelAutoMatchTeam_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelAutoMatchTeam_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelAutoMatchTeam_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelAutoMatchTeam_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelAutoMatchTeam_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelAutoMatchTeam_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelAutoMatchTeam_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelAutoMatchTeam_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelAutoMatchTeam_ProtoModID_Parse(name, value);
  }

  typedef stCancelAutoMatchTeam_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelAutoMatchTeam_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelAutoMatchTeam_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelAutoMatchTeam_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelAutoMatchTeam_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelAutoMatchTeam_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelAutoMatchTeam_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelAutoMatchTeam_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelAutoMatchTeam_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 copyMapID = 2;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopyMapIDFieldNumber = 2;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stCancelAutoMatchTeam)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stCancelAutoMatchTeam* default_instance_;
};
// -------------------------------------------------------------------

class stCancelAutoMatchTeamResult : public ::google::protobuf::Message {
 public:
  stCancelAutoMatchTeamResult();
  virtual ~stCancelAutoMatchTeamResult();

  stCancelAutoMatchTeamResult(const stCancelAutoMatchTeamResult& from);

  inline stCancelAutoMatchTeamResult& operator=(const stCancelAutoMatchTeamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelAutoMatchTeamResult& default_instance();

  void Swap(stCancelAutoMatchTeamResult* other);

  // implements Message ----------------------------------------------

  stCancelAutoMatchTeamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelAutoMatchTeamResult& from);
  void MergeFrom(const stCancelAutoMatchTeamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelAutoMatchTeamResult_eResult eResult;
  static const eResult eSUCCESS = stCancelAutoMatchTeamResult_eResult_eSUCCESS;
  static const eResult eFAIL = stCancelAutoMatchTeamResult_eResult_eFAIL;
  static inline bool eResult_IsValid(int value) {
    return stCancelAutoMatchTeamResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCancelAutoMatchTeamResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCancelAutoMatchTeamResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCancelAutoMatchTeamResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCancelAutoMatchTeamResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCancelAutoMatchTeamResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCancelAutoMatchTeamResult_eResult_Parse(name, value);
  }

  typedef stCancelAutoMatchTeamResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelAutoMatchTeamResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelAutoMatchTeamResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelAutoMatchTeamResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelAutoMatchTeamResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelAutoMatchTeamResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelAutoMatchTeamResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelAutoMatchTeamResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelAutoMatchTeamResult_ProtoModID_Parse(name, value);
  }

  typedef stCancelAutoMatchTeamResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelAutoMatchTeamResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelAutoMatchTeamResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelAutoMatchTeamResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelAutoMatchTeamResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelAutoMatchTeamResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelAutoMatchTeamResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelAutoMatchTeamResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelAutoMatchTeamResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.stCancelAutoMatchTeamResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::TeamProto::stCancelAutoMatchTeamResult_eResult result() const;
  inline void set_result(::TeamProto::stCancelAutoMatchTeamResult_eResult value);

  // @@protoc_insertion_point(class_scope:TeamProto.stCancelAutoMatchTeamResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stCancelAutoMatchTeamResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqFirstKillInfoByID : public ::google::protobuf::Message {
 public:
  stReqFirstKillInfoByID();
  virtual ~stReqFirstKillInfoByID();

  stReqFirstKillInfoByID(const stReqFirstKillInfoByID& from);

  inline stReqFirstKillInfoByID& operator=(const stReqFirstKillInfoByID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqFirstKillInfoByID& default_instance();

  void Swap(stReqFirstKillInfoByID* other);

  // implements Message ----------------------------------------------

  stReqFirstKillInfoByID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqFirstKillInfoByID& from);
  void MergeFrom(const stReqFirstKillInfoByID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqFirstKillInfoByID_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqFirstKillInfoByID_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqFirstKillInfoByID_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqFirstKillInfoByID_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqFirstKillInfoByID_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqFirstKillInfoByID_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqFirstKillInfoByID_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqFirstKillInfoByID_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqFirstKillInfoByID_ProtoModID_Parse(name, value);
  }

  typedef stReqFirstKillInfoByID_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqFirstKillInfoByID_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqFirstKillInfoByID_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqFirstKillInfoByID_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqFirstKillInfoByID_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqFirstKillInfoByID_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqFirstKillInfoByID_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqFirstKillInfoByID_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqFirstKillInfoByID_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqFirstKillInfoByID)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqFirstKillInfoByID* default_instance_;
};
// -------------------------------------------------------------------

class stRetFirstKillInfo : public ::google::protobuf::Message {
 public:
  stRetFirstKillInfo();
  virtual ~stRetFirstKillInfo();

  stRetFirstKillInfo(const stRetFirstKillInfo& from);

  inline stRetFirstKillInfo& operator=(const stRetFirstKillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetFirstKillInfo& default_instance();

  void Swap(stRetFirstKillInfo* other);

  // implements Message ----------------------------------------------

  stRetFirstKillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetFirstKillInfo& from);
  void MergeFrom(const stRetFirstKillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetFirstKillInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetFirstKillInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetFirstKillInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetFirstKillInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetFirstKillInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetFirstKillInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetFirstKillInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetFirstKillInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetFirstKillInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetFirstKillInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetFirstKillInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetFirstKillInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetFirstKillInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetFirstKillInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetFirstKillInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetFirstKillInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetFirstKillInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetFirstKillInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copymapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopymapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // optional uint32 charID1 = 2;
  inline bool has_charid1() const;
  inline void clear_charid1();
  static const int kCharID1FieldNumber = 2;
  inline ::google::protobuf::uint32 charid1() const;
  inline void set_charid1(::google::protobuf::uint32 value);

  // optional uint32 job1 = 3;
  inline bool has_job1() const;
  inline void clear_job1();
  static const int kJob1FieldNumber = 3;
  inline ::google::protobuf::uint32 job1() const;
  inline void set_job1(::google::protobuf::uint32 value);

  // optional uint32 sex1 = 4;
  inline bool has_sex1() const;
  inline void clear_sex1();
  static const int kSex1FieldNumber = 4;
  inline ::google::protobuf::uint32 sex1() const;
  inline void set_sex1(::google::protobuf::uint32 value);

  // optional string name1 = 5;
  inline bool has_name1() const;
  inline void clear_name1();
  static const int kName1FieldNumber = 5;
  inline const ::std::string& name1() const;
  inline void set_name1(const ::std::string& value);
  inline void set_name1(const char* value);
  inline void set_name1(const char* value, size_t size);
  inline ::std::string* mutable_name1();
  inline ::std::string* release_name1();
  inline void set_allocated_name1(::std::string* name1);

  // optional uint32 level1 = 6;
  inline bool has_level1() const;
  inline void clear_level1();
  static const int kLevel1FieldNumber = 6;
  inline ::google::protobuf::uint32 level1() const;
  inline void set_level1(::google::protobuf::uint32 value);

  // optional uint32 battlePower1 = 7;
  inline bool has_battlepower1() const;
  inline void clear_battlepower1();
  static const int kBattlePower1FieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower1() const;
  inline void set_battlepower1(::google::protobuf::uint32 value);

  // optional uint32 charID2 = 8;
  inline bool has_charid2() const;
  inline void clear_charid2();
  static const int kCharID2FieldNumber = 8;
  inline ::google::protobuf::uint32 charid2() const;
  inline void set_charid2(::google::protobuf::uint32 value);

  // optional uint32 job2 = 9;
  inline bool has_job2() const;
  inline void clear_job2();
  static const int kJob2FieldNumber = 9;
  inline ::google::protobuf::uint32 job2() const;
  inline void set_job2(::google::protobuf::uint32 value);

  // optional uint32 sex2 = 10;
  inline bool has_sex2() const;
  inline void clear_sex2();
  static const int kSex2FieldNumber = 10;
  inline ::google::protobuf::uint32 sex2() const;
  inline void set_sex2(::google::protobuf::uint32 value);

  // optional string name2 = 11;
  inline bool has_name2() const;
  inline void clear_name2();
  static const int kName2FieldNumber = 11;
  inline const ::std::string& name2() const;
  inline void set_name2(const ::std::string& value);
  inline void set_name2(const char* value);
  inline void set_name2(const char* value, size_t size);
  inline ::std::string* mutable_name2();
  inline ::std::string* release_name2();
  inline void set_allocated_name2(::std::string* name2);

  // optional uint32 level2 = 12;
  inline bool has_level2() const;
  inline void clear_level2();
  static const int kLevel2FieldNumber = 12;
  inline ::google::protobuf::uint32 level2() const;
  inline void set_level2(::google::protobuf::uint32 value);

  // optional uint32 battlePower2 = 13;
  inline bool has_battlepower2() const;
  inline void clear_battlepower2();
  static const int kBattlePower2FieldNumber = 13;
  inline ::google::protobuf::uint32 battlepower2() const;
  inline void set_battlepower2(::google::protobuf::uint32 value);

  // optional uint32 charID3 = 14;
  inline bool has_charid3() const;
  inline void clear_charid3();
  static const int kCharID3FieldNumber = 14;
  inline ::google::protobuf::uint32 charid3() const;
  inline void set_charid3(::google::protobuf::uint32 value);

  // optional uint32 job3 = 15;
  inline bool has_job3() const;
  inline void clear_job3();
  static const int kJob3FieldNumber = 15;
  inline ::google::protobuf::uint32 job3() const;
  inline void set_job3(::google::protobuf::uint32 value);

  // optional uint32 sex3 = 16;
  inline bool has_sex3() const;
  inline void clear_sex3();
  static const int kSex3FieldNumber = 16;
  inline ::google::protobuf::uint32 sex3() const;
  inline void set_sex3(::google::protobuf::uint32 value);

  // optional string name3 = 17;
  inline bool has_name3() const;
  inline void clear_name3();
  static const int kName3FieldNumber = 17;
  inline const ::std::string& name3() const;
  inline void set_name3(const ::std::string& value);
  inline void set_name3(const char* value);
  inline void set_name3(const char* value, size_t size);
  inline ::std::string* mutable_name3();
  inline ::std::string* release_name3();
  inline void set_allocated_name3(::std::string* name3);

  // optional uint32 level3 = 18;
  inline bool has_level3() const;
  inline void clear_level3();
  static const int kLevel3FieldNumber = 18;
  inline ::google::protobuf::uint32 level3() const;
  inline void set_level3(::google::protobuf::uint32 value);

  // optional uint32 battlePower3 = 19;
  inline bool has_battlepower3() const;
  inline void clear_battlepower3();
  static const int kBattlePower3FieldNumber = 19;
  inline ::google::protobuf::uint32 battlepower3() const;
  inline void set_battlepower3(::google::protobuf::uint32 value);

  // optional uint32 killTime = 20;
  inline bool has_killtime() const;
  inline void clear_killtime();
  static const int kKillTimeFieldNumber = 20;
  inline ::google::protobuf::uint32 killtime() const;
  inline void set_killtime(::google::protobuf::uint32 value);

  // optional uint32 photoID1 = 21;
  inline bool has_photoid1() const;
  inline void clear_photoid1();
  static const int kPhotoID1FieldNumber = 21;
  inline ::google::protobuf::uint32 photoid1() const;
  inline void set_photoid1(::google::protobuf::uint32 value);

  // optional uint32 photoID2 = 22;
  inline bool has_photoid2() const;
  inline void clear_photoid2();
  static const int kPhotoID2FieldNumber = 22;
  inline ::google::protobuf::uint32 photoid2() const;
  inline void set_photoid2(::google::protobuf::uint32 value);

  // optional uint32 photoID3 = 23;
  inline bool has_photoid3() const;
  inline void clear_photoid3();
  static const int kPhotoID3FieldNumber = 23;
  inline ::google::protobuf::uint32 photoid3() const;
  inline void set_photoid3(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stRetFirstKillInfo)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();
  inline void set_has_charid1();
  inline void clear_has_charid1();
  inline void set_has_job1();
  inline void clear_has_job1();
  inline void set_has_sex1();
  inline void clear_has_sex1();
  inline void set_has_name1();
  inline void clear_has_name1();
  inline void set_has_level1();
  inline void clear_has_level1();
  inline void set_has_battlepower1();
  inline void clear_has_battlepower1();
  inline void set_has_charid2();
  inline void clear_has_charid2();
  inline void set_has_job2();
  inline void clear_has_job2();
  inline void set_has_sex2();
  inline void clear_has_sex2();
  inline void set_has_name2();
  inline void clear_has_name2();
  inline void set_has_level2();
  inline void clear_has_level2();
  inline void set_has_battlepower2();
  inline void clear_has_battlepower2();
  inline void set_has_charid3();
  inline void clear_has_charid3();
  inline void set_has_job3();
  inline void clear_has_job3();
  inline void set_has_sex3();
  inline void clear_has_sex3();
  inline void set_has_name3();
  inline void clear_has_name3();
  inline void set_has_level3();
  inline void clear_has_level3();
  inline void set_has_battlepower3();
  inline void clear_has_battlepower3();
  inline void set_has_killtime();
  inline void clear_has_killtime();
  inline void set_has_photoid1();
  inline void clear_has_photoid1();
  inline void set_has_photoid2();
  inline void clear_has_photoid2();
  inline void set_has_photoid3();
  inline void clear_has_photoid3();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymapid_;
  ::google::protobuf::uint32 charid1_;
  ::google::protobuf::uint32 job1_;
  ::google::protobuf::uint32 sex1_;
  ::std::string* name1_;
  ::google::protobuf::uint32 level1_;
  ::google::protobuf::uint32 battlepower1_;
  ::google::protobuf::uint32 charid2_;
  ::google::protobuf::uint32 job2_;
  ::std::string* name2_;
  ::google::protobuf::uint32 sex2_;
  ::google::protobuf::uint32 level2_;
  ::google::protobuf::uint32 battlepower2_;
  ::google::protobuf::uint32 charid3_;
  ::google::protobuf::uint32 job3_;
  ::google::protobuf::uint32 sex3_;
  ::std::string* name3_;
  ::google::protobuf::uint32 level3_;
  ::google::protobuf::uint32 battlepower3_;
  ::google::protobuf::uint32 killtime_;
  ::google::protobuf::uint32 photoid1_;
  ::google::protobuf::uint32 photoid2_;
  ::google::protobuf::uint32 photoid3_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(23 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stRetFirstKillInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqRealTimeSingleMatch : public ::google::protobuf::Message {
 public:
  stReqRealTimeSingleMatch();
  virtual ~stReqRealTimeSingleMatch();

  stReqRealTimeSingleMatch(const stReqRealTimeSingleMatch& from);

  inline stReqRealTimeSingleMatch& operator=(const stReqRealTimeSingleMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRealTimeSingleMatch& default_instance();

  void Swap(stReqRealTimeSingleMatch* other);

  // implements Message ----------------------------------------------

  stReqRealTimeSingleMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRealTimeSingleMatch& from);
  void MergeFrom(const stReqRealTimeSingleMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRealTimeSingleMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRealTimeSingleMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRealTimeSingleMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRealTimeSingleMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRealTimeSingleMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRealTimeSingleMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRealTimeSingleMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRealTimeSingleMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRealTimeSingleMatch_ProtoModID_Parse(name, value);
  }

  typedef stReqRealTimeSingleMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRealTimeSingleMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRealTimeSingleMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRealTimeSingleMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRealTimeSingleMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRealTimeSingleMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRealTimeSingleMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRealTimeSingleMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRealTimeSingleMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.eRealTimePKType eType = 1;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 1;
  inline ::TeamProto::eRealTimePKType etype() const;
  inline void set_etype(::TeamProto::eRealTimePKType value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqRealTimeSingleMatch)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int etype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqRealTimeSingleMatch* default_instance_;
};
// -------------------------------------------------------------------

class stRealTimeSingleMatchWait : public ::google::protobuf::Message {
 public:
  stRealTimeSingleMatchWait();
  virtual ~stRealTimeSingleMatchWait();

  stRealTimeSingleMatchWait(const stRealTimeSingleMatchWait& from);

  inline stRealTimeSingleMatchWait& operator=(const stRealTimeSingleMatchWait& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRealTimeSingleMatchWait& default_instance();

  void Swap(stRealTimeSingleMatchWait* other);

  // implements Message ----------------------------------------------

  stRealTimeSingleMatchWait* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRealTimeSingleMatchWait& from);
  void MergeFrom(const stRealTimeSingleMatchWait& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRealTimeSingleMatchWait_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRealTimeSingleMatchWait_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRealTimeSingleMatchWait_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRealTimeSingleMatchWait_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRealTimeSingleMatchWait_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRealTimeSingleMatchWait_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRealTimeSingleMatchWait_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRealTimeSingleMatchWait_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRealTimeSingleMatchWait_ProtoModID_Parse(name, value);
  }

  typedef stRealTimeSingleMatchWait_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRealTimeSingleMatchWait_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRealTimeSingleMatchWait_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRealTimeSingleMatchWait_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRealTimeSingleMatchWait_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRealTimeSingleMatchWait_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRealTimeSingleMatchWait_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRealTimeSingleMatchWait_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRealTimeSingleMatchWait_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.eRealTimePKType eType = 1;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 1;
  inline ::TeamProto::eRealTimePKType etype() const;
  inline void set_etype(::TeamProto::eRealTimePKType value);

  // @@protoc_insertion_point(class_scope:TeamProto.stRealTimeSingleMatchWait)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int etype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stRealTimeSingleMatchWait* default_instance_;
};
// -------------------------------------------------------------------

class stReqCancelRealTimeSingleMatch : public ::google::protobuf::Message {
 public:
  stReqCancelRealTimeSingleMatch();
  virtual ~stReqCancelRealTimeSingleMatch();

  stReqCancelRealTimeSingleMatch(const stReqCancelRealTimeSingleMatch& from);

  inline stReqCancelRealTimeSingleMatch& operator=(const stReqCancelRealTimeSingleMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCancelRealTimeSingleMatch& default_instance();

  void Swap(stReqCancelRealTimeSingleMatch* other);

  // implements Message ----------------------------------------------

  stReqCancelRealTimeSingleMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCancelRealTimeSingleMatch& from);
  void MergeFrom(const stReqCancelRealTimeSingleMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCancelRealTimeSingleMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCancelRealTimeSingleMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCancelRealTimeSingleMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCancelRealTimeSingleMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCancelRealTimeSingleMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCancelRealTimeSingleMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCancelRealTimeSingleMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCancelRealTimeSingleMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCancelRealTimeSingleMatch_ProtoModID_Parse(name, value);
  }

  typedef stReqCancelRealTimeSingleMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCancelRealTimeSingleMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCancelRealTimeSingleMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCancelRealTimeSingleMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCancelRealTimeSingleMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCancelRealTimeSingleMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCancelRealTimeSingleMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCancelRealTimeSingleMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCancelRealTimeSingleMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.eRealTimePKType eType = 1;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 1;
  inline ::TeamProto::eRealTimePKType etype() const;
  inline void set_etype(::TeamProto::eRealTimePKType value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqCancelRealTimeSingleMatch)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int etype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqCancelRealTimeSingleMatch* default_instance_;
};
// -------------------------------------------------------------------

class stCancelRealTimeSingleMatchResult : public ::google::protobuf::Message {
 public:
  stCancelRealTimeSingleMatchResult();
  virtual ~stCancelRealTimeSingleMatchResult();

  stCancelRealTimeSingleMatchResult(const stCancelRealTimeSingleMatchResult& from);

  inline stCancelRealTimeSingleMatchResult& operator=(const stCancelRealTimeSingleMatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelRealTimeSingleMatchResult& default_instance();

  void Swap(stCancelRealTimeSingleMatchResult* other);

  // implements Message ----------------------------------------------

  stCancelRealTimeSingleMatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelRealTimeSingleMatchResult& from);
  void MergeFrom(const stCancelRealTimeSingleMatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelRealTimeSingleMatchResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelRealTimeSingleMatchResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelRealTimeSingleMatchResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelRealTimeSingleMatchResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelRealTimeSingleMatchResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelRealTimeSingleMatchResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelRealTimeSingleMatchResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelRealTimeSingleMatchResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelRealTimeSingleMatchResult_ProtoModID_Parse(name, value);
  }

  typedef stCancelRealTimeSingleMatchResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelRealTimeSingleMatchResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelRealTimeSingleMatchResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelRealTimeSingleMatchResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelRealTimeSingleMatchResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelRealTimeSingleMatchResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelRealTimeSingleMatchResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelRealTimeSingleMatchResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelRealTimeSingleMatchResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:TeamProto.stCancelRealTimeSingleMatchResult)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stCancelRealTimeSingleMatchResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRealTimeTeamMatch : public ::google::protobuf::Message {
 public:
  stReqRealTimeTeamMatch();
  virtual ~stReqRealTimeTeamMatch();

  stReqRealTimeTeamMatch(const stReqRealTimeTeamMatch& from);

  inline stReqRealTimeTeamMatch& operator=(const stReqRealTimeTeamMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRealTimeTeamMatch& default_instance();

  void Swap(stReqRealTimeTeamMatch* other);

  // implements Message ----------------------------------------------

  stReqRealTimeTeamMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRealTimeTeamMatch& from);
  void MergeFrom(const stReqRealTimeTeamMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRealTimeTeamMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRealTimeTeamMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRealTimeTeamMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRealTimeTeamMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRealTimeTeamMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRealTimeTeamMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRealTimeTeamMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRealTimeTeamMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRealTimeTeamMatch_ProtoModID_Parse(name, value);
  }

  typedef stReqRealTimeTeamMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRealTimeTeamMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRealTimeTeamMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRealTimeTeamMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRealTimeTeamMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRealTimeTeamMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRealTimeTeamMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRealTimeTeamMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.eRealTimePKType eType = 1;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 1;
  inline ::TeamProto::eRealTimePKType etype() const;
  inline void set_etype(::TeamProto::eRealTimePKType value);

  // optional uint32 teamID = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 2;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqRealTimeTeamMatch)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int etype_;
  ::google::protobuf::uint32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqRealTimeTeamMatch* default_instance_;
};
// -------------------------------------------------------------------

class stRealTimeTeamMatchWait : public ::google::protobuf::Message {
 public:
  stRealTimeTeamMatchWait();
  virtual ~stRealTimeTeamMatchWait();

  stRealTimeTeamMatchWait(const stRealTimeTeamMatchWait& from);

  inline stRealTimeTeamMatchWait& operator=(const stRealTimeTeamMatchWait& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRealTimeTeamMatchWait& default_instance();

  void Swap(stRealTimeTeamMatchWait* other);

  // implements Message ----------------------------------------------

  stRealTimeTeamMatchWait* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRealTimeTeamMatchWait& from);
  void MergeFrom(const stRealTimeTeamMatchWait& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRealTimeTeamMatchWait_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRealTimeTeamMatchWait_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRealTimeTeamMatchWait_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRealTimeTeamMatchWait_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRealTimeTeamMatchWait_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRealTimeTeamMatchWait_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRealTimeTeamMatchWait_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRealTimeTeamMatchWait_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRealTimeTeamMatchWait_ProtoModID_Parse(name, value);
  }

  typedef stRealTimeTeamMatchWait_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRealTimeTeamMatchWait_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRealTimeTeamMatchWait_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRealTimeTeamMatchWait_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRealTimeTeamMatchWait_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRealTimeTeamMatchWait_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRealTimeTeamMatchWait_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRealTimeTeamMatchWait_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRealTimeTeamMatchWait_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.eRealTimePKType eType = 1;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 1;
  inline ::TeamProto::eRealTimePKType etype() const;
  inline void set_etype(::TeamProto::eRealTimePKType value);

  // @@protoc_insertion_point(class_scope:TeamProto.stRealTimeTeamMatchWait)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int etype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stRealTimeTeamMatchWait* default_instance_;
};
// -------------------------------------------------------------------

class stReqCancelRealTimeTeamMatch : public ::google::protobuf::Message {
 public:
  stReqCancelRealTimeTeamMatch();
  virtual ~stReqCancelRealTimeTeamMatch();

  stReqCancelRealTimeTeamMatch(const stReqCancelRealTimeTeamMatch& from);

  inline stReqCancelRealTimeTeamMatch& operator=(const stReqCancelRealTimeTeamMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCancelRealTimeTeamMatch& default_instance();

  void Swap(stReqCancelRealTimeTeamMatch* other);

  // implements Message ----------------------------------------------

  stReqCancelRealTimeTeamMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCancelRealTimeTeamMatch& from);
  void MergeFrom(const stReqCancelRealTimeTeamMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCancelRealTimeTeamMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCancelRealTimeTeamMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCancelRealTimeTeamMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCancelRealTimeTeamMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCancelRealTimeTeamMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCancelRealTimeTeamMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCancelRealTimeTeamMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCancelRealTimeTeamMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCancelRealTimeTeamMatch_ProtoModID_Parse(name, value);
  }

  typedef stReqCancelRealTimeTeamMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCancelRealTimeTeamMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCancelRealTimeTeamMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCancelRealTimeTeamMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCancelRealTimeTeamMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCancelRealTimeTeamMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCancelRealTimeTeamMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCancelRealTimeTeamMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCancelRealTimeTeamMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.eRealTimePKType eType = 1;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 1;
  inline ::TeamProto::eRealTimePKType etype() const;
  inline void set_etype(::TeamProto::eRealTimePKType value);

  // optional uint32 teamID = 2;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamIDFieldNumber = 2;
  inline ::google::protobuf::uint32 teamid() const;
  inline void set_teamid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TeamProto.stReqCancelRealTimeTeamMatch)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_teamid();
  inline void clear_has_teamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int etype_;
  ::google::protobuf::uint32 teamid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stReqCancelRealTimeTeamMatch* default_instance_;
};
// -------------------------------------------------------------------

class stCancelRealTimeTeamMatchResult : public ::google::protobuf::Message {
 public:
  stCancelRealTimeTeamMatchResult();
  virtual ~stCancelRealTimeTeamMatchResult();

  stCancelRealTimeTeamMatchResult(const stCancelRealTimeTeamMatchResult& from);

  inline stCancelRealTimeTeamMatchResult& operator=(const stCancelRealTimeTeamMatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelRealTimeTeamMatchResult& default_instance();

  void Swap(stCancelRealTimeTeamMatchResult* other);

  // implements Message ----------------------------------------------

  stCancelRealTimeTeamMatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelRealTimeTeamMatchResult& from);
  void MergeFrom(const stCancelRealTimeTeamMatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelRealTimeTeamMatchResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelRealTimeTeamMatchResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelRealTimeTeamMatchResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelRealTimeTeamMatchResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelRealTimeTeamMatchResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelRealTimeTeamMatchResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelRealTimeTeamMatchResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelRealTimeTeamMatchResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelRealTimeTeamMatchResult_ProtoModID_Parse(name, value);
  }

  typedef stCancelRealTimeTeamMatchResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelRealTimeTeamMatchResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelRealTimeTeamMatchResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelRealTimeTeamMatchResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelRealTimeTeamMatchResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelRealTimeTeamMatchResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelRealTimeTeamMatchResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelRealTimeTeamMatchResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelRealTimeTeamMatchResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 1;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:TeamProto.stCancelRealTimeTeamMatchResult)
 private:
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stCancelRealTimeTeamMatchResult* default_instance_;
};
// -------------------------------------------------------------------

class stRealTimePKNotOpen : public ::google::protobuf::Message {
 public:
  stRealTimePKNotOpen();
  virtual ~stRealTimePKNotOpen();

  stRealTimePKNotOpen(const stRealTimePKNotOpen& from);

  inline stRealTimePKNotOpen& operator=(const stRealTimePKNotOpen& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRealTimePKNotOpen& default_instance();

  void Swap(stRealTimePKNotOpen* other);

  // implements Message ----------------------------------------------

  stRealTimePKNotOpen* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRealTimePKNotOpen& from);
  void MergeFrom(const stRealTimePKNotOpen& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRealTimePKNotOpen_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRealTimePKNotOpen_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRealTimePKNotOpen_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRealTimePKNotOpen_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRealTimePKNotOpen_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRealTimePKNotOpen_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRealTimePKNotOpen_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRealTimePKNotOpen_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRealTimePKNotOpen_ProtoModID_Parse(name, value);
  }

  typedef stRealTimePKNotOpen_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRealTimePKNotOpen_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRealTimePKNotOpen_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRealTimePKNotOpen_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRealTimePKNotOpen_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRealTimePKNotOpen_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRealTimePKNotOpen_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRealTimePKNotOpen_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRealTimePKNotOpen_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TeamProto.eRealTimePKType eType = 1;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 1;
  inline ::TeamProto::eRealTimePKType etype() const;
  inline void set_etype(::TeamProto::eRealTimePKType value);

  // @@protoc_insertion_point(class_scope:TeamProto.stRealTimePKNotOpen)
 private:
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int etype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Team_2eproto();
  friend void protobuf_AssignDesc_Team_2eproto();
  friend void protobuf_ShutdownFile_Team_2eproto();

  void InitAsDefaultInstance();
  static stRealTimePKNotOpen* default_instance_;
};
// ===================================================================


// ===================================================================

// stReqCreateTeam

// optional uint32 copyMapID = 1;
inline bool stReqCreateTeam::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCreateTeam::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCreateTeam::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCreateTeam::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stReqCreateTeam::copymapid() const {
  return copymapid_;
}
inline void stReqCreateTeam::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stCreateTeamResult

// optional .TeamProto.stCreateTeamResult.eResult result = 1;
inline bool stCreateTeamResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCreateTeamResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCreateTeamResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCreateTeamResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::TeamProto::stCreateTeamResult_eResult stCreateTeamResult::result() const {
  return static_cast< ::TeamProto::stCreateTeamResult_eResult >(result_);
}
inline void stCreateTeamResult::set_result(::TeamProto::stCreateTeamResult_eResult value) {
  assert(::TeamProto::stCreateTeamResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynMemberInfo

// optional uint32 charID = 1;
inline bool stSynMemberInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMemberInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMemberInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMemberInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::charid() const {
  return charid_;
}
inline void stSynMemberInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynMemberInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMemberInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMemberInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMemberInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynMemberInfo::name() const {
  return *name_;
}
inline void stSynMemberInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynMemberInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynMemberInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynMemberInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynMemberInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynMemberInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stSynMemberInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynMemberInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynMemberInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynMemberInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynMemberInfo::level() const {
  return level_;
}
inline void stSynMemberInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool stSynMemberInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynMemberInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynMemberInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynMemberInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynMemberInfo::job() const {
  return job_;
}
inline void stSynMemberInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stSynMemberInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynMemberInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynMemberInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynMemberInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynMemberInfo::sex() const {
  return sex_;
}
inline void stSynMemberInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional bool leader = 6;
inline bool stSynMemberInfo::has_leader() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynMemberInfo::set_has_leader() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynMemberInfo::clear_has_leader() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynMemberInfo::clear_leader() {
  leader_ = false;
  clear_has_leader();
}
inline bool stSynMemberInfo::leader() const {
  return leader_;
}
inline void stSynMemberInfo::set_leader(bool value) {
  set_has_leader();
  leader_ = value;
}

// optional uint32 battlePower = 7;
inline bool stSynMemberInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynMemberInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynMemberInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynMemberInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynMemberInfo::battlepower() const {
  return battlepower_;
}
inline void stSynMemberInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 pos = 8;
inline bool stSynMemberInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynMemberInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynMemberInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynMemberInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stSynMemberInfo::pos() const {
  return pos_;
}
inline void stSynMemberInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 headID = 9;
inline bool stSynMemberInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSynMemberInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSynMemberInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSynMemberInfo::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::headid() const {
  return headid_;
}
inline void stSynMemberInfo::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 10;
inline bool stSynMemberInfo::has_bodyid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSynMemberInfo::set_has_bodyid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSynMemberInfo::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSynMemberInfo::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::bodyid() const {
  return bodyid_;
}
inline void stSynMemberInfo::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 11;
inline bool stSynMemberInfo::has_weaponid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSynMemberInfo::set_has_weaponid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSynMemberInfo::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSynMemberInfo::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::weaponid() const {
  return weaponid_;
}
inline void stSynMemberInfo::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 12;
inline bool stSynMemberInfo::has_cloackid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stSynMemberInfo::set_has_cloackid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stSynMemberInfo::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stSynMemberInfo::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::cloackid() const {
  return cloackid_;
}
inline void stSynMemberInfo::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 13;
inline bool stSynMemberInfo::has_wingid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stSynMemberInfo::set_has_wingid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stSynMemberInfo::clear_has_wingid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stSynMemberInfo::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::wingid() const {
  return wingid_;
}
inline void stSynMemberInfo::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 14;
inline bool stSynMemberInfo::has_shoeid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stSynMemberInfo::set_has_shoeid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stSynMemberInfo::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stSynMemberInfo::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::shoeid() const {
  return shoeid_;
}
inline void stSynMemberInfo::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 15;
inline bool stSynMemberInfo::has_fashionhair() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionhair() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stSynMemberInfo::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stSynMemberInfo::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionhair() const {
  return fashionhair_;
}
inline void stSynMemberInfo::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 16;
inline bool stSynMemberInfo::has_fashionface() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionface() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stSynMemberInfo::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stSynMemberInfo::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionface() const {
  return fashionface_;
}
inline void stSynMemberInfo::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 17;
inline bool stSynMemberInfo::has_fashionbody() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionbody() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stSynMemberInfo::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stSynMemberInfo::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionbody() const {
  return fashionbody_;
}
inline void stSynMemberInfo::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 18;
inline bool stSynMemberInfo::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stSynMemberInfo::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stSynMemberInfo::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionweapon() const {
  return fashionweapon_;
}
inline void stSynMemberInfo::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 19;
inline bool stSynMemberInfo::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stSynMemberInfo::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stSynMemberInfo::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionshoe() const {
  return fashionshoe_;
}
inline void stSynMemberInfo::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 20;
inline bool stSynMemberInfo::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stSynMemberInfo::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stSynMemberInfo::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stSynMemberInfo::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stSynMemberInfo::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 21;
inline bool stSynMemberInfo::has_effectid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stSynMemberInfo::set_has_effectid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stSynMemberInfo::clear_has_effectid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stSynMemberInfo::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::effectid() const {
  return effectid_;
}
inline void stSynMemberInfo::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 22;
inline bool stSynMemberInfo::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stSynMemberInfo::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stSynMemberInfo::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stSynMemberInfo::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stSynMemberInfo::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stSynMemberInfo::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 fashionWingID = 23;
inline bool stSynMemberInfo::has_fashionwingid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stSynMemberInfo::set_has_fashionwingid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stSynMemberInfo::clear_has_fashionwingid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stSynMemberInfo::clear_fashionwingid() {
  fashionwingid_ = 0u;
  clear_has_fashionwingid();
}
inline ::google::protobuf::uint32 stSynMemberInfo::fashionwingid() const {
  return fashionwingid_;
}
inline void stSynMemberInfo::set_fashionwingid(::google::protobuf::uint32 value) {
  set_has_fashionwingid();
  fashionwingid_ = value;
}

// -------------------------------------------------------------------

// stRoomInfo

// optional uint32 copyMapID = 1;
inline bool stRoomInfo::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRoomInfo::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRoomInfo::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRoomInfo::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stRoomInfo::copymapid() const {
  return copymapid_;
}
inline void stRoomInfo::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// repeated .TeamProto.stSynMemberInfo members = 2;
inline int stRoomInfo::members_size() const {
  return members_.size();
}
inline void stRoomInfo::clear_members() {
  members_.Clear();
}
inline const ::TeamProto::stSynMemberInfo& stRoomInfo::members(int index) const {
  return members_.Get(index);
}
inline ::TeamProto::stSynMemberInfo* stRoomInfo::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::TeamProto::stSynMemberInfo* stRoomInfo::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TeamProto::stSynMemberInfo >&
stRoomInfo::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::TeamProto::stSynMemberInfo >*
stRoomInfo::mutable_members() {
  return &members_;
}

// optional uint32 teamID = 3;
inline bool stRoomInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRoomInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRoomInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRoomInfo::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stRoomInfo::teamid() const {
  return teamid_;
}
inline void stRoomInfo::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// stReqEnterTeam

// optional uint32 teamID = 1;
inline bool stReqEnterTeam::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEnterTeam::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEnterTeam::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEnterTeam::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stReqEnterTeam::teamid() const {
  return teamid_;
}
inline void stReqEnterTeam::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// stEnterTeamResult

// optional .TeamProto.stEnterTeamResult.eResult result = 1;
inline bool stEnterTeamResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterTeamResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterTeamResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterTeamResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::TeamProto::stEnterTeamResult_eResult stEnterTeamResult::result() const {
  return static_cast< ::TeamProto::stEnterTeamResult_eResult >(result_);
}
inline void stEnterTeamResult::set_result(::TeamProto::stEnterTeamResult_eResult value) {
  assert(::TeamProto::stEnterTeamResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stAddTeamMember

// optional uint32 pos = 1;
inline bool stAddTeamMember::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddTeamMember::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddTeamMember::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddTeamMember::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stAddTeamMember::pos() const {
  return pos_;
}
inline void stAddTeamMember::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional .TeamProto.stSynMemberInfo memberInfo = 2;
inline bool stAddTeamMember::has_memberinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAddTeamMember::set_has_memberinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAddTeamMember::clear_has_memberinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAddTeamMember::clear_memberinfo() {
  if (memberinfo_ != NULL) memberinfo_->::TeamProto::stSynMemberInfo::Clear();
  clear_has_memberinfo();
}
inline const ::TeamProto::stSynMemberInfo& stAddTeamMember::memberinfo() const {
  return memberinfo_ != NULL ? *memberinfo_ : *default_instance_->memberinfo_;
}
inline ::TeamProto::stSynMemberInfo* stAddTeamMember::mutable_memberinfo() {
  set_has_memberinfo();
  if (memberinfo_ == NULL) memberinfo_ = new ::TeamProto::stSynMemberInfo;
  return memberinfo_;
}
inline ::TeamProto::stSynMemberInfo* stAddTeamMember::release_memberinfo() {
  clear_has_memberinfo();
  ::TeamProto::stSynMemberInfo* temp = memberinfo_;
  memberinfo_ = NULL;
  return temp;
}
inline void stAddTeamMember::set_allocated_memberinfo(::TeamProto::stSynMemberInfo* memberinfo) {
  delete memberinfo_;
  memberinfo_ = memberinfo;
  if (memberinfo) {
    set_has_memberinfo();
  } else {
    clear_has_memberinfo();
  }
}

// -------------------------------------------------------------------

// stReqLeaveTeam

// optional uint32 charID = 1;
inline bool stReqLeaveTeam::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLeaveTeam::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLeaveTeam::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLeaveTeam::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqLeaveTeam::charid() const {
  return charid_;
}
inline void stReqLeaveTeam::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stNotifyLeaveTeam

// optional uint32 charID = 1;
inline bool stNotifyLeaveTeam::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyLeaveTeam::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyLeaveTeam::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyLeaveTeam::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyLeaveTeam::charid() const {
  return charid_;
}
inline void stNotifyLeaveTeam::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReqFireTeam

// optional uint32 charID = 1;
inline bool stReqFireTeam::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqFireTeam::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqFireTeam::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqFireTeam::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqFireTeam::charid() const {
  return charid_;
}
inline void stReqFireTeam::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stNotifyFireTeam

// -------------------------------------------------------------------

// stInviteJoinInTeam

// optional uint32 charID = 1;
inline bool stInviteJoinInTeam::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInviteJoinInTeam::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInviteJoinInTeam::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInviteJoinInTeam::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stInviteJoinInTeam::charid() const {
  return charid_;
}
inline void stInviteJoinInTeam::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 pos = 2;
inline bool stInviteJoinInTeam::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stInviteJoinInTeam::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stInviteJoinInTeam::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stInviteJoinInTeam::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stInviteJoinInTeam::pos() const {
  return pos_;
}
inline void stInviteJoinInTeam::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional .TeamProto.eTeamType eType = 3;
inline bool stInviteJoinInTeam::has_etype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stInviteJoinInTeam::set_has_etype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stInviteJoinInTeam::clear_has_etype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stInviteJoinInTeam::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eTeamType stInviteJoinInTeam::etype() const {
  return static_cast< ::TeamProto::eTeamType >(etype_);
}
inline void stInviteJoinInTeam::set_etype(::TeamProto::eTeamType value) {
  assert(::TeamProto::eTeamType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// -------------------------------------------------------------------

// stInviteJoinInTeamResult

// optional .TeamProto.stInviteJoinInTeamResult.eResult result = 1;
inline bool stInviteJoinInTeamResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInviteJoinInTeamResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInviteJoinInTeamResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInviteJoinInTeamResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::TeamProto::stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::result() const {
  return static_cast< ::TeamProto::stInviteJoinInTeamResult_eResult >(result_);
}
inline void stInviteJoinInTeamResult::set_result(::TeamProto::stInviteJoinInTeamResult_eResult value) {
  assert(::TeamProto::stInviteJoinInTeamResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .TeamProto.eTeamType eType = 2;
inline bool stInviteJoinInTeamResult::has_etype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stInviteJoinInTeamResult::set_has_etype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stInviteJoinInTeamResult::clear_has_etype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stInviteJoinInTeamResult::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eTeamType stInviteJoinInTeamResult::etype() const {
  return static_cast< ::TeamProto::eTeamType >(etype_);
}
inline void stInviteJoinInTeamResult::set_etype(::TeamProto::eTeamType value) {
  assert(::TeamProto::eTeamType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// -------------------------------------------------------------------

// stAskJoinInTeam

// optional uint32 teamID = 1;
inline bool stAskJoinInTeam::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAskJoinInTeam::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAskJoinInTeam::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAskJoinInTeam::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stAskJoinInTeam::teamid() const {
  return teamid_;
}
inline void stAskJoinInTeam::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional string inviteName = 2;
inline bool stAskJoinInTeam::has_invitename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAskJoinInTeam::set_has_invitename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAskJoinInTeam::clear_has_invitename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAskJoinInTeam::clear_invitename() {
  if (invitename_ != &::google::protobuf::internal::kEmptyString) {
    invitename_->clear();
  }
  clear_has_invitename();
}
inline const ::std::string& stAskJoinInTeam::invitename() const {
  return *invitename_;
}
inline void stAskJoinInTeam::set_invitename(const ::std::string& value) {
  set_has_invitename();
  if (invitename_ == &::google::protobuf::internal::kEmptyString) {
    invitename_ = new ::std::string;
  }
  invitename_->assign(value);
}
inline void stAskJoinInTeam::set_invitename(const char* value) {
  set_has_invitename();
  if (invitename_ == &::google::protobuf::internal::kEmptyString) {
    invitename_ = new ::std::string;
  }
  invitename_->assign(value);
}
inline void stAskJoinInTeam::set_invitename(const char* value, size_t size) {
  set_has_invitename();
  if (invitename_ == &::google::protobuf::internal::kEmptyString) {
    invitename_ = new ::std::string;
  }
  invitename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stAskJoinInTeam::mutable_invitename() {
  set_has_invitename();
  if (invitename_ == &::google::protobuf::internal::kEmptyString) {
    invitename_ = new ::std::string;
  }
  return invitename_;
}
inline ::std::string* stAskJoinInTeam::release_invitename() {
  clear_has_invitename();
  if (invitename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = invitename_;
    invitename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stAskJoinInTeam::set_allocated_invitename(::std::string* invitename) {
  if (invitename_ != &::google::protobuf::internal::kEmptyString) {
    delete invitename_;
  }
  if (invitename) {
    set_has_invitename();
    invitename_ = invitename;
  } else {
    clear_has_invitename();
    invitename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 pos = 3;
inline bool stAskJoinInTeam::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAskJoinInTeam::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAskJoinInTeam::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAskJoinInTeam::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stAskJoinInTeam::pos() const {
  return pos_;
}
inline void stAskJoinInTeam::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional .TeamProto.eTeamType eType = 4;
inline bool stAskJoinInTeam::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stAskJoinInTeam::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stAskJoinInTeam::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stAskJoinInTeam::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eTeamType stAskJoinInTeam::etype() const {
  return static_cast< ::TeamProto::eTeamType >(etype_);
}
inline void stAskJoinInTeam::set_etype(::TeamProto::eTeamType value) {
  assert(::TeamProto::eTeamType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// optional uint32 copymapID = 5;
inline bool stAskJoinInTeam::has_copymapid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stAskJoinInTeam::set_has_copymapid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stAskJoinInTeam::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stAskJoinInTeam::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stAskJoinInTeam::copymapid() const {
  return copymapid_;
}
inline void stAskJoinInTeam::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stReplyJoinInTeam

// optional uint32 teamID = 1;
inline bool stReplyJoinInTeam::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplyJoinInTeam::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplyJoinInTeam::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplyJoinInTeam::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stReplyJoinInTeam::teamid() const {
  return teamid_;
}
inline void stReplyJoinInTeam::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional bool agree = 2;
inline bool stReplyJoinInTeam::has_agree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReplyJoinInTeam::set_has_agree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReplyJoinInTeam::clear_has_agree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReplyJoinInTeam::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool stReplyJoinInTeam::agree() const {
  return agree_;
}
inline void stReplyJoinInTeam::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
}

// optional uint32 pos = 3;
inline bool stReplyJoinInTeam::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReplyJoinInTeam::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReplyJoinInTeam::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReplyJoinInTeam::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stReplyJoinInTeam::pos() const {
  return pos_;
}
inline void stReplyJoinInTeam::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional .TeamProto.eTeamType eType = 4;
inline bool stReplyJoinInTeam::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReplyJoinInTeam::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReplyJoinInTeam::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReplyJoinInTeam::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eTeamType stReplyJoinInTeam::etype() const {
  return static_cast< ::TeamProto::eTeamType >(etype_);
}
inline void stReplyJoinInTeam::set_etype(::TeamProto::eTeamType value) {
  assert(::TeamProto::eTeamType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// optional bool timesUseOut = 5;
inline bool stReplyJoinInTeam::has_timesuseout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stReplyJoinInTeam::set_has_timesuseout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stReplyJoinInTeam::clear_has_timesuseout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stReplyJoinInTeam::clear_timesuseout() {
  timesuseout_ = false;
  clear_has_timesuseout();
}
inline bool stReplyJoinInTeam::timesuseout() const {
  return timesuseout_;
}
inline void stReplyJoinInTeam::set_timesuseout(bool value) {
  set_has_timesuseout();
  timesuseout_ = value;
}

// -------------------------------------------------------------------

// stReqEnterLv

// optional uint32 copyMapID = 1;
inline bool stReqEnterLv::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEnterLv::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEnterLv::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEnterLv::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stReqEnterLv::copymapid() const {
  return copymapid_;
}
inline void stReqEnterLv::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stReqBroadcastInviteCmd

// optional uint32 charID = 1;
inline bool stReqBroadcastInviteCmd::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBroadcastInviteCmd::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBroadcastInviteCmd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBroadcastInviteCmd::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqBroadcastInviteCmd::charid() const {
  return charid_;
}
inline void stReqBroadcastInviteCmd::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stBroadcastInviteJoinIn

// optional uint32 teamID = 1;
inline bool stBroadcastInviteJoinIn::has_teamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBroadcastInviteJoinIn::set_has_teamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBroadcastInviteJoinIn::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBroadcastInviteJoinIn::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stBroadcastInviteJoinIn::teamid() const {
  return teamid_;
}
inline void stBroadcastInviteJoinIn::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional uint32 charID = 2;
inline bool stBroadcastInviteJoinIn::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBroadcastInviteJoinIn::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBroadcastInviteJoinIn::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBroadcastInviteJoinIn::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stBroadcastInviteJoinIn::charid() const {
  return charid_;
}
inline void stBroadcastInviteJoinIn::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 3;
inline bool stBroadcastInviteJoinIn::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBroadcastInviteJoinIn::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBroadcastInviteJoinIn::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBroadcastInviteJoinIn::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stBroadcastInviteJoinIn::name() const {
  return *name_;
}
inline void stBroadcastInviteJoinIn::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stBroadcastInviteJoinIn::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stBroadcastInviteJoinIn::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBroadcastInviteJoinIn::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stBroadcastInviteJoinIn::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBroadcastInviteJoinIn::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 4;
inline bool stBroadcastInviteJoinIn::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBroadcastInviteJoinIn::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBroadcastInviteJoinIn::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBroadcastInviteJoinIn::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stBroadcastInviteJoinIn::job() const {
  return job_;
}
inline void stBroadcastInviteJoinIn::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stBroadcastInviteJoinIn::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stBroadcastInviteJoinIn::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stBroadcastInviteJoinIn::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stBroadcastInviteJoinIn::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stBroadcastInviteJoinIn::sex() const {
  return sex_;
}
inline void stBroadcastInviteJoinIn::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 6;
inline bool stBroadcastInviteJoinIn::has_battlepower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stBroadcastInviteJoinIn::set_has_battlepower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stBroadcastInviteJoinIn::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stBroadcastInviteJoinIn::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stBroadcastInviteJoinIn::battlepower() const {
  return battlepower_;
}
inline void stBroadcastInviteJoinIn::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 vipLv = 7;
inline bool stBroadcastInviteJoinIn::has_viplv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stBroadcastInviteJoinIn::set_has_viplv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stBroadcastInviteJoinIn::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stBroadcastInviteJoinIn::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stBroadcastInviteJoinIn::viplv() const {
  return viplv_;
}
inline void stBroadcastInviteJoinIn::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 copyMapID = 8;
inline bool stBroadcastInviteJoinIn::has_copymapid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stBroadcastInviteJoinIn::set_has_copymapid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stBroadcastInviteJoinIn::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stBroadcastInviteJoinIn::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stBroadcastInviteJoinIn::copymapid() const {
  return copymapid_;
}
inline void stBroadcastInviteJoinIn::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// optional uint32 photoID = 9;
inline bool stBroadcastInviteJoinIn::has_photoid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stBroadcastInviteJoinIn::set_has_photoid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stBroadcastInviteJoinIn::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stBroadcastInviteJoinIn::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stBroadcastInviteJoinIn::photoid() const {
  return photoid_;
}
inline void stBroadcastInviteJoinIn::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stReqAutoMatchTeam

// optional uint32 charID = 1;
inline bool stReqAutoMatchTeam::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAutoMatchTeam::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAutoMatchTeam::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAutoMatchTeam::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqAutoMatchTeam::charid() const {
  return charid_;
}
inline void stReqAutoMatchTeam::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 copyMapID = 2;
inline bool stReqAutoMatchTeam::has_copymapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqAutoMatchTeam::set_has_copymapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqAutoMatchTeam::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqAutoMatchTeam::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stReqAutoMatchTeam::copymapid() const {
  return copymapid_;
}
inline void stReqAutoMatchTeam::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stWaitMatchTeam

// -------------------------------------------------------------------

// stMathcTeamSuccess

// -------------------------------------------------------------------

// stCancelAutoMatchTeam

// optional uint32 charID = 1;
inline bool stCancelAutoMatchTeam::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelAutoMatchTeam::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelAutoMatchTeam::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelAutoMatchTeam::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCancelAutoMatchTeam::charid() const {
  return charid_;
}
inline void stCancelAutoMatchTeam::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 copyMapID = 2;
inline bool stCancelAutoMatchTeam::has_copymapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCancelAutoMatchTeam::set_has_copymapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCancelAutoMatchTeam::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCancelAutoMatchTeam::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stCancelAutoMatchTeam::copymapid() const {
  return copymapid_;
}
inline void stCancelAutoMatchTeam::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stCancelAutoMatchTeamResult

// optional .TeamProto.stCancelAutoMatchTeamResult.eResult result = 1;
inline bool stCancelAutoMatchTeamResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelAutoMatchTeamResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelAutoMatchTeamResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelAutoMatchTeamResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::TeamProto::stCancelAutoMatchTeamResult_eResult stCancelAutoMatchTeamResult::result() const {
  return static_cast< ::TeamProto::stCancelAutoMatchTeamResult_eResult >(result_);
}
inline void stCancelAutoMatchTeamResult::set_result(::TeamProto::stCancelAutoMatchTeamResult_eResult value) {
  assert(::TeamProto::stCancelAutoMatchTeamResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqFirstKillInfoByID

// optional uint32 levelID = 1;
inline bool stReqFirstKillInfoByID::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqFirstKillInfoByID::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqFirstKillInfoByID::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqFirstKillInfoByID::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqFirstKillInfoByID::levelid() const {
  return levelid_;
}
inline void stReqFirstKillInfoByID::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stRetFirstKillInfo

// optional uint32 copymapID = 1;
inline bool stRetFirstKillInfo::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetFirstKillInfo::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetFirstKillInfo::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetFirstKillInfo::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::copymapid() const {
  return copymapid_;
}
inline void stRetFirstKillInfo::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// optional uint32 charID1 = 2;
inline bool stRetFirstKillInfo::has_charid1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetFirstKillInfo::set_has_charid1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetFirstKillInfo::clear_has_charid1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetFirstKillInfo::clear_charid1() {
  charid1_ = 0u;
  clear_has_charid1();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::charid1() const {
  return charid1_;
}
inline void stRetFirstKillInfo::set_charid1(::google::protobuf::uint32 value) {
  set_has_charid1();
  charid1_ = value;
}

// optional uint32 job1 = 3;
inline bool stRetFirstKillInfo::has_job1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetFirstKillInfo::set_has_job1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetFirstKillInfo::clear_has_job1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetFirstKillInfo::clear_job1() {
  job1_ = 0u;
  clear_has_job1();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::job1() const {
  return job1_;
}
inline void stRetFirstKillInfo::set_job1(::google::protobuf::uint32 value) {
  set_has_job1();
  job1_ = value;
}

// optional uint32 sex1 = 4;
inline bool stRetFirstKillInfo::has_sex1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetFirstKillInfo::set_has_sex1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetFirstKillInfo::clear_has_sex1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetFirstKillInfo::clear_sex1() {
  sex1_ = 0u;
  clear_has_sex1();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::sex1() const {
  return sex1_;
}
inline void stRetFirstKillInfo::set_sex1(::google::protobuf::uint32 value) {
  set_has_sex1();
  sex1_ = value;
}

// optional string name1 = 5;
inline bool stRetFirstKillInfo::has_name1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetFirstKillInfo::set_has_name1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetFirstKillInfo::clear_has_name1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetFirstKillInfo::clear_name1() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    name1_->clear();
  }
  clear_has_name1();
}
inline const ::std::string& stRetFirstKillInfo::name1() const {
  return *name1_;
}
inline void stRetFirstKillInfo::set_name1(const ::std::string& value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void stRetFirstKillInfo::set_name1(const char* value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void stRetFirstKillInfo::set_name1(const char* value, size_t size) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetFirstKillInfo::mutable_name1() {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  return name1_;
}
inline ::std::string* stRetFirstKillInfo::release_name1() {
  clear_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name1_;
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetFirstKillInfo::set_allocated_name1(::std::string* name1) {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name1) {
    set_has_name1();
    name1_ = name1;
  } else {
    clear_has_name1();
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level1 = 6;
inline bool stRetFirstKillInfo::has_level1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetFirstKillInfo::set_has_level1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetFirstKillInfo::clear_has_level1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetFirstKillInfo::clear_level1() {
  level1_ = 0u;
  clear_has_level1();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::level1() const {
  return level1_;
}
inline void stRetFirstKillInfo::set_level1(::google::protobuf::uint32 value) {
  set_has_level1();
  level1_ = value;
}

// optional uint32 battlePower1 = 7;
inline bool stRetFirstKillInfo::has_battlepower1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRetFirstKillInfo::set_has_battlepower1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRetFirstKillInfo::clear_has_battlepower1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRetFirstKillInfo::clear_battlepower1() {
  battlepower1_ = 0u;
  clear_has_battlepower1();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::battlepower1() const {
  return battlepower1_;
}
inline void stRetFirstKillInfo::set_battlepower1(::google::protobuf::uint32 value) {
  set_has_battlepower1();
  battlepower1_ = value;
}

// optional uint32 charID2 = 8;
inline bool stRetFirstKillInfo::has_charid2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRetFirstKillInfo::set_has_charid2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRetFirstKillInfo::clear_has_charid2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRetFirstKillInfo::clear_charid2() {
  charid2_ = 0u;
  clear_has_charid2();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::charid2() const {
  return charid2_;
}
inline void stRetFirstKillInfo::set_charid2(::google::protobuf::uint32 value) {
  set_has_charid2();
  charid2_ = value;
}

// optional uint32 job2 = 9;
inline bool stRetFirstKillInfo::has_job2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRetFirstKillInfo::set_has_job2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRetFirstKillInfo::clear_has_job2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRetFirstKillInfo::clear_job2() {
  job2_ = 0u;
  clear_has_job2();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::job2() const {
  return job2_;
}
inline void stRetFirstKillInfo::set_job2(::google::protobuf::uint32 value) {
  set_has_job2();
  job2_ = value;
}

// optional uint32 sex2 = 10;
inline bool stRetFirstKillInfo::has_sex2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stRetFirstKillInfo::set_has_sex2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stRetFirstKillInfo::clear_has_sex2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stRetFirstKillInfo::clear_sex2() {
  sex2_ = 0u;
  clear_has_sex2();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::sex2() const {
  return sex2_;
}
inline void stRetFirstKillInfo::set_sex2(::google::protobuf::uint32 value) {
  set_has_sex2();
  sex2_ = value;
}

// optional string name2 = 11;
inline bool stRetFirstKillInfo::has_name2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stRetFirstKillInfo::set_has_name2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stRetFirstKillInfo::clear_has_name2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stRetFirstKillInfo::clear_name2() {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    name2_->clear();
  }
  clear_has_name2();
}
inline const ::std::string& stRetFirstKillInfo::name2() const {
  return *name2_;
}
inline void stRetFirstKillInfo::set_name2(const ::std::string& value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void stRetFirstKillInfo::set_name2(const char* value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void stRetFirstKillInfo::set_name2(const char* value, size_t size) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetFirstKillInfo::mutable_name2() {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  return name2_;
}
inline ::std::string* stRetFirstKillInfo::release_name2() {
  clear_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name2_;
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetFirstKillInfo::set_allocated_name2(::std::string* name2) {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name2) {
    set_has_name2();
    name2_ = name2;
  } else {
    clear_has_name2();
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level2 = 12;
inline bool stRetFirstKillInfo::has_level2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stRetFirstKillInfo::set_has_level2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stRetFirstKillInfo::clear_has_level2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stRetFirstKillInfo::clear_level2() {
  level2_ = 0u;
  clear_has_level2();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::level2() const {
  return level2_;
}
inline void stRetFirstKillInfo::set_level2(::google::protobuf::uint32 value) {
  set_has_level2();
  level2_ = value;
}

// optional uint32 battlePower2 = 13;
inline bool stRetFirstKillInfo::has_battlepower2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stRetFirstKillInfo::set_has_battlepower2() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stRetFirstKillInfo::clear_has_battlepower2() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stRetFirstKillInfo::clear_battlepower2() {
  battlepower2_ = 0u;
  clear_has_battlepower2();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::battlepower2() const {
  return battlepower2_;
}
inline void stRetFirstKillInfo::set_battlepower2(::google::protobuf::uint32 value) {
  set_has_battlepower2();
  battlepower2_ = value;
}

// optional uint32 charID3 = 14;
inline bool stRetFirstKillInfo::has_charid3() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stRetFirstKillInfo::set_has_charid3() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stRetFirstKillInfo::clear_has_charid3() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stRetFirstKillInfo::clear_charid3() {
  charid3_ = 0u;
  clear_has_charid3();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::charid3() const {
  return charid3_;
}
inline void stRetFirstKillInfo::set_charid3(::google::protobuf::uint32 value) {
  set_has_charid3();
  charid3_ = value;
}

// optional uint32 job3 = 15;
inline bool stRetFirstKillInfo::has_job3() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stRetFirstKillInfo::set_has_job3() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stRetFirstKillInfo::clear_has_job3() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stRetFirstKillInfo::clear_job3() {
  job3_ = 0u;
  clear_has_job3();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::job3() const {
  return job3_;
}
inline void stRetFirstKillInfo::set_job3(::google::protobuf::uint32 value) {
  set_has_job3();
  job3_ = value;
}

// optional uint32 sex3 = 16;
inline bool stRetFirstKillInfo::has_sex3() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stRetFirstKillInfo::set_has_sex3() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stRetFirstKillInfo::clear_has_sex3() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stRetFirstKillInfo::clear_sex3() {
  sex3_ = 0u;
  clear_has_sex3();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::sex3() const {
  return sex3_;
}
inline void stRetFirstKillInfo::set_sex3(::google::protobuf::uint32 value) {
  set_has_sex3();
  sex3_ = value;
}

// optional string name3 = 17;
inline bool stRetFirstKillInfo::has_name3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stRetFirstKillInfo::set_has_name3() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stRetFirstKillInfo::clear_has_name3() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stRetFirstKillInfo::clear_name3() {
  if (name3_ != &::google::protobuf::internal::kEmptyString) {
    name3_->clear();
  }
  clear_has_name3();
}
inline const ::std::string& stRetFirstKillInfo::name3() const {
  return *name3_;
}
inline void stRetFirstKillInfo::set_name3(const ::std::string& value) {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  name3_->assign(value);
}
inline void stRetFirstKillInfo::set_name3(const char* value) {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  name3_->assign(value);
}
inline void stRetFirstKillInfo::set_name3(const char* value, size_t size) {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  name3_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetFirstKillInfo::mutable_name3() {
  set_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    name3_ = new ::std::string;
  }
  return name3_;
}
inline ::std::string* stRetFirstKillInfo::release_name3() {
  clear_has_name3();
  if (name3_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name3_;
    name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetFirstKillInfo::set_allocated_name3(::std::string* name3) {
  if (name3_ != &::google::protobuf::internal::kEmptyString) {
    delete name3_;
  }
  if (name3) {
    set_has_name3();
    name3_ = name3;
  } else {
    clear_has_name3();
    name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level3 = 18;
inline bool stRetFirstKillInfo::has_level3() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stRetFirstKillInfo::set_has_level3() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stRetFirstKillInfo::clear_has_level3() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stRetFirstKillInfo::clear_level3() {
  level3_ = 0u;
  clear_has_level3();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::level3() const {
  return level3_;
}
inline void stRetFirstKillInfo::set_level3(::google::protobuf::uint32 value) {
  set_has_level3();
  level3_ = value;
}

// optional uint32 battlePower3 = 19;
inline bool stRetFirstKillInfo::has_battlepower3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stRetFirstKillInfo::set_has_battlepower3() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stRetFirstKillInfo::clear_has_battlepower3() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stRetFirstKillInfo::clear_battlepower3() {
  battlepower3_ = 0u;
  clear_has_battlepower3();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::battlepower3() const {
  return battlepower3_;
}
inline void stRetFirstKillInfo::set_battlepower3(::google::protobuf::uint32 value) {
  set_has_battlepower3();
  battlepower3_ = value;
}

// optional uint32 killTime = 20;
inline bool stRetFirstKillInfo::has_killtime() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stRetFirstKillInfo::set_has_killtime() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stRetFirstKillInfo::clear_has_killtime() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stRetFirstKillInfo::clear_killtime() {
  killtime_ = 0u;
  clear_has_killtime();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::killtime() const {
  return killtime_;
}
inline void stRetFirstKillInfo::set_killtime(::google::protobuf::uint32 value) {
  set_has_killtime();
  killtime_ = value;
}

// optional uint32 photoID1 = 21;
inline bool stRetFirstKillInfo::has_photoid1() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stRetFirstKillInfo::set_has_photoid1() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stRetFirstKillInfo::clear_has_photoid1() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stRetFirstKillInfo::clear_photoid1() {
  photoid1_ = 0u;
  clear_has_photoid1();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::photoid1() const {
  return photoid1_;
}
inline void stRetFirstKillInfo::set_photoid1(::google::protobuf::uint32 value) {
  set_has_photoid1();
  photoid1_ = value;
}

// optional uint32 photoID2 = 22;
inline bool stRetFirstKillInfo::has_photoid2() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stRetFirstKillInfo::set_has_photoid2() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stRetFirstKillInfo::clear_has_photoid2() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stRetFirstKillInfo::clear_photoid2() {
  photoid2_ = 0u;
  clear_has_photoid2();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::photoid2() const {
  return photoid2_;
}
inline void stRetFirstKillInfo::set_photoid2(::google::protobuf::uint32 value) {
  set_has_photoid2();
  photoid2_ = value;
}

// optional uint32 photoID3 = 23;
inline bool stRetFirstKillInfo::has_photoid3() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stRetFirstKillInfo::set_has_photoid3() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stRetFirstKillInfo::clear_has_photoid3() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stRetFirstKillInfo::clear_photoid3() {
  photoid3_ = 0u;
  clear_has_photoid3();
}
inline ::google::protobuf::uint32 stRetFirstKillInfo::photoid3() const {
  return photoid3_;
}
inline void stRetFirstKillInfo::set_photoid3(::google::protobuf::uint32 value) {
  set_has_photoid3();
  photoid3_ = value;
}

// -------------------------------------------------------------------

// stReqRealTimeSingleMatch

// optional .TeamProto.eRealTimePKType eType = 1;
inline bool stReqRealTimeSingleMatch::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRealTimeSingleMatch::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRealTimeSingleMatch::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRealTimeSingleMatch::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eRealTimePKType stReqRealTimeSingleMatch::etype() const {
  return static_cast< ::TeamProto::eRealTimePKType >(etype_);
}
inline void stReqRealTimeSingleMatch::set_etype(::TeamProto::eRealTimePKType value) {
  assert(::TeamProto::eRealTimePKType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// -------------------------------------------------------------------

// stRealTimeSingleMatchWait

// optional .TeamProto.eRealTimePKType eType = 1;
inline bool stRealTimeSingleMatchWait::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRealTimeSingleMatchWait::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRealTimeSingleMatchWait::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRealTimeSingleMatchWait::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eRealTimePKType stRealTimeSingleMatchWait::etype() const {
  return static_cast< ::TeamProto::eRealTimePKType >(etype_);
}
inline void stRealTimeSingleMatchWait::set_etype(::TeamProto::eRealTimePKType value) {
  assert(::TeamProto::eRealTimePKType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// -------------------------------------------------------------------

// stReqCancelRealTimeSingleMatch

// optional .TeamProto.eRealTimePKType eType = 1;
inline bool stReqCancelRealTimeSingleMatch::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCancelRealTimeSingleMatch::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCancelRealTimeSingleMatch::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCancelRealTimeSingleMatch::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eRealTimePKType stReqCancelRealTimeSingleMatch::etype() const {
  return static_cast< ::TeamProto::eRealTimePKType >(etype_);
}
inline void stReqCancelRealTimeSingleMatch::set_etype(::TeamProto::eRealTimePKType value) {
  assert(::TeamProto::eRealTimePKType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// -------------------------------------------------------------------

// stCancelRealTimeSingleMatchResult

// optional bool success = 1;
inline bool stCancelRealTimeSingleMatchResult::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelRealTimeSingleMatchResult::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelRealTimeSingleMatchResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelRealTimeSingleMatchResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool stCancelRealTimeSingleMatchResult::success() const {
  return success_;
}
inline void stCancelRealTimeSingleMatchResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// stReqRealTimeTeamMatch

// optional .TeamProto.eRealTimePKType eType = 1;
inline bool stReqRealTimeTeamMatch::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRealTimeTeamMatch::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRealTimeTeamMatch::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRealTimeTeamMatch::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eRealTimePKType stReqRealTimeTeamMatch::etype() const {
  return static_cast< ::TeamProto::eRealTimePKType >(etype_);
}
inline void stReqRealTimeTeamMatch::set_etype(::TeamProto::eRealTimePKType value) {
  assert(::TeamProto::eRealTimePKType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// optional uint32 teamID = 2;
inline bool stReqRealTimeTeamMatch::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRealTimeTeamMatch::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRealTimeTeamMatch::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRealTimeTeamMatch::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stReqRealTimeTeamMatch::teamid() const {
  return teamid_;
}
inline void stReqRealTimeTeamMatch::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// stRealTimeTeamMatchWait

// optional .TeamProto.eRealTimePKType eType = 1;
inline bool stRealTimeTeamMatchWait::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRealTimeTeamMatchWait::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRealTimeTeamMatchWait::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRealTimeTeamMatchWait::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eRealTimePKType stRealTimeTeamMatchWait::etype() const {
  return static_cast< ::TeamProto::eRealTimePKType >(etype_);
}
inline void stRealTimeTeamMatchWait::set_etype(::TeamProto::eRealTimePKType value) {
  assert(::TeamProto::eRealTimePKType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// -------------------------------------------------------------------

// stReqCancelRealTimeTeamMatch

// optional .TeamProto.eRealTimePKType eType = 1;
inline bool stReqCancelRealTimeTeamMatch::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCancelRealTimeTeamMatch::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCancelRealTimeTeamMatch::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCancelRealTimeTeamMatch::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eRealTimePKType stReqCancelRealTimeTeamMatch::etype() const {
  return static_cast< ::TeamProto::eRealTimePKType >(etype_);
}
inline void stReqCancelRealTimeTeamMatch::set_etype(::TeamProto::eRealTimePKType value) {
  assert(::TeamProto::eRealTimePKType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// optional uint32 teamID = 2;
inline bool stReqCancelRealTimeTeamMatch::has_teamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqCancelRealTimeTeamMatch::set_has_teamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqCancelRealTimeTeamMatch::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqCancelRealTimeTeamMatch::clear_teamid() {
  teamid_ = 0u;
  clear_has_teamid();
}
inline ::google::protobuf::uint32 stReqCancelRealTimeTeamMatch::teamid() const {
  return teamid_;
}
inline void stReqCancelRealTimeTeamMatch::set_teamid(::google::protobuf::uint32 value) {
  set_has_teamid();
  teamid_ = value;
}

// -------------------------------------------------------------------

// stCancelRealTimeTeamMatchResult

// optional bool success = 1;
inline bool stCancelRealTimeTeamMatchResult::has_success() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelRealTimeTeamMatchResult::set_has_success() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelRealTimeTeamMatchResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelRealTimeTeamMatchResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool stCancelRealTimeTeamMatchResult::success() const {
  return success_;
}
inline void stCancelRealTimeTeamMatchResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// stRealTimePKNotOpen

// optional .TeamProto.eRealTimePKType eType = 1;
inline bool stRealTimePKNotOpen::has_etype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRealTimePKNotOpen::set_has_etype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRealTimePKNotOpen::clear_has_etype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRealTimePKNotOpen::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::TeamProto::eRealTimePKType stRealTimePKNotOpen::etype() const {
  return static_cast< ::TeamProto::eRealTimePKType >(etype_);
}
inline void stRealTimePKNotOpen::set_etype(::TeamProto::eRealTimePKType value) {
  assert(::TeamProto::eRealTimePKType_IsValid(value));
  set_has_etype();
  etype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TeamProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqCreateTeam_ProtoModID>() {
  return ::TeamProto::stReqCreateTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqCreateTeam_ProtoFunID>() {
  return ::TeamProto::stReqCreateTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCreateTeamResult_eResult>() {
  return ::TeamProto::stCreateTeamResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCreateTeamResult_ProtoModID>() {
  return ::TeamProto::stCreateTeamResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCreateTeamResult_ProtoFunID>() {
  return ::TeamProto::stCreateTeamResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stRoomInfo_ProtoModID>() {
  return ::TeamProto::stRoomInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stRoomInfo_ProtoFunID>() {
  return ::TeamProto::stRoomInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqEnterTeam_ProtoModID>() {
  return ::TeamProto::stReqEnterTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqEnterTeam_ProtoFunID>() {
  return ::TeamProto::stReqEnterTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stEnterTeamResult_eResult>() {
  return ::TeamProto::stEnterTeamResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stEnterTeamResult_ProtoModID>() {
  return ::TeamProto::stEnterTeamResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stEnterTeamResult_ProtoFunID>() {
  return ::TeamProto::stEnterTeamResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stAddTeamMember_ProtoModID>() {
  return ::TeamProto::stAddTeamMember_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stAddTeamMember_ProtoFunID>() {
  return ::TeamProto::stAddTeamMember_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqLeaveTeam_ProtoModID>() {
  return ::TeamProto::stReqLeaveTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqLeaveTeam_ProtoFunID>() {
  return ::TeamProto::stReqLeaveTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stNotifyLeaveTeam_ProtoModID>() {
  return ::TeamProto::stNotifyLeaveTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stNotifyLeaveTeam_ProtoFunID>() {
  return ::TeamProto::stNotifyLeaveTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqFireTeam_ProtoModID>() {
  return ::TeamProto::stReqFireTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqFireTeam_ProtoFunID>() {
  return ::TeamProto::stReqFireTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stNotifyFireTeam_ProtoModID>() {
  return ::TeamProto::stNotifyFireTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stNotifyFireTeam_ProtoFunID>() {
  return ::TeamProto::stNotifyFireTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stInviteJoinInTeam_ProtoModID>() {
  return ::TeamProto::stInviteJoinInTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stInviteJoinInTeam_ProtoFunID>() {
  return ::TeamProto::stInviteJoinInTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stInviteJoinInTeamResult_eResult>() {
  return ::TeamProto::stInviteJoinInTeamResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stInviteJoinInTeamResult_ProtoModID>() {
  return ::TeamProto::stInviteJoinInTeamResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stInviteJoinInTeamResult_ProtoFunID>() {
  return ::TeamProto::stInviteJoinInTeamResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stAskJoinInTeam_ProtoModID>() {
  return ::TeamProto::stAskJoinInTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stAskJoinInTeam_ProtoFunID>() {
  return ::TeamProto::stAskJoinInTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReplyJoinInTeam_ProtoModID>() {
  return ::TeamProto::stReplyJoinInTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReplyJoinInTeam_ProtoFunID>() {
  return ::TeamProto::stReplyJoinInTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqEnterLv_ProtoModID>() {
  return ::TeamProto::stReqEnterLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqEnterLv_ProtoFunID>() {
  return ::TeamProto::stReqEnterLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqBroadcastInviteCmd_ProtoModID>() {
  return ::TeamProto::stReqBroadcastInviteCmd_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqBroadcastInviteCmd_ProtoFunID>() {
  return ::TeamProto::stReqBroadcastInviteCmd_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stBroadcastInviteJoinIn_ProtoModID>() {
  return ::TeamProto::stBroadcastInviteJoinIn_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stBroadcastInviteJoinIn_ProtoFunID>() {
  return ::TeamProto::stBroadcastInviteJoinIn_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqAutoMatchTeam_ProtoModID>() {
  return ::TeamProto::stReqAutoMatchTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqAutoMatchTeam_ProtoFunID>() {
  return ::TeamProto::stReqAutoMatchTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stWaitMatchTeam_ProtoModID>() {
  return ::TeamProto::stWaitMatchTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stWaitMatchTeam_ProtoFunID>() {
  return ::TeamProto::stWaitMatchTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stMathcTeamSuccess_ProtoModID>() {
  return ::TeamProto::stMathcTeamSuccess_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stMathcTeamSuccess_ProtoFunID>() {
  return ::TeamProto::stMathcTeamSuccess_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCancelAutoMatchTeam_ProtoModID>() {
  return ::TeamProto::stCancelAutoMatchTeam_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCancelAutoMatchTeam_ProtoFunID>() {
  return ::TeamProto::stCancelAutoMatchTeam_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCancelAutoMatchTeamResult_eResult>() {
  return ::TeamProto::stCancelAutoMatchTeamResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCancelAutoMatchTeamResult_ProtoModID>() {
  return ::TeamProto::stCancelAutoMatchTeamResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCancelAutoMatchTeamResult_ProtoFunID>() {
  return ::TeamProto::stCancelAutoMatchTeamResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqFirstKillInfoByID_ProtoModID>() {
  return ::TeamProto::stReqFirstKillInfoByID_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqFirstKillInfoByID_ProtoFunID>() {
  return ::TeamProto::stReqFirstKillInfoByID_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stRetFirstKillInfo_ProtoModID>() {
  return ::TeamProto::stRetFirstKillInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stRetFirstKillInfo_ProtoFunID>() {
  return ::TeamProto::stRetFirstKillInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqRealTimeSingleMatch_ProtoModID>() {
  return ::TeamProto::stReqRealTimeSingleMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqRealTimeSingleMatch_ProtoFunID>() {
  return ::TeamProto::stReqRealTimeSingleMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stRealTimeSingleMatchWait_ProtoModID>() {
  return ::TeamProto::stRealTimeSingleMatchWait_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stRealTimeSingleMatchWait_ProtoFunID>() {
  return ::TeamProto::stRealTimeSingleMatchWait_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqCancelRealTimeSingleMatch_ProtoModID>() {
  return ::TeamProto::stReqCancelRealTimeSingleMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqCancelRealTimeSingleMatch_ProtoFunID>() {
  return ::TeamProto::stReqCancelRealTimeSingleMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCancelRealTimeSingleMatchResult_ProtoModID>() {
  return ::TeamProto::stCancelRealTimeSingleMatchResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCancelRealTimeSingleMatchResult_ProtoFunID>() {
  return ::TeamProto::stCancelRealTimeSingleMatchResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqRealTimeTeamMatch_ProtoModID>() {
  return ::TeamProto::stReqRealTimeTeamMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqRealTimeTeamMatch_ProtoFunID>() {
  return ::TeamProto::stReqRealTimeTeamMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stRealTimeTeamMatchWait_ProtoModID>() {
  return ::TeamProto::stRealTimeTeamMatchWait_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stRealTimeTeamMatchWait_ProtoFunID>() {
  return ::TeamProto::stRealTimeTeamMatchWait_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqCancelRealTimeTeamMatch_ProtoModID>() {
  return ::TeamProto::stReqCancelRealTimeTeamMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stReqCancelRealTimeTeamMatch_ProtoFunID>() {
  return ::TeamProto::stReqCancelRealTimeTeamMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCancelRealTimeTeamMatchResult_ProtoModID>() {
  return ::TeamProto::stCancelRealTimeTeamMatchResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stCancelRealTimeTeamMatchResult_ProtoFunID>() {
  return ::TeamProto::stCancelRealTimeTeamMatchResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stRealTimePKNotOpen_ProtoModID>() {
  return ::TeamProto::stRealTimePKNotOpen_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::stRealTimePKNotOpen_ProtoFunID>() {
  return ::TeamProto::stRealTimePKNotOpen_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::eTeamType>() {
  return ::TeamProto::eTeamType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TeamProto::eRealTimePKType>() {
  return ::TeamProto::eRealTimePKType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Team_2eproto__INCLUDED
