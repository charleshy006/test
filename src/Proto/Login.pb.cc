// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Login.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Login {

namespace {

const ::google::protobuf::Descriptor* ReqLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLogin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqLogin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqLogin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* RetLoginSucess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetLoginSucess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RetLoginSucess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RetLoginSucess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* LoginError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginError_ErrorType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginError_ProtoID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReqLoginGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLoginGate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqLoginGate_ProtoID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqLoginGate_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqServerTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqServerTime_ProtoID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqServerTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetServerTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetServerTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetServerTime_ProtoID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetServerTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAutoLoginGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAutoLoginGate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAutoLoginGate_ProtoID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAutoLoginGate_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyRelogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyRelogin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyRelogin_ProtoID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyRelogin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stQueryPingValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stQueryPingValue_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stQueryPingValue_ProtoID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stQueryPingValue_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqClientTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqClientTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqClientTime_ProtoID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqClientTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendClient2Svr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendClient2Svr_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendClient2Svr_ProtoID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendClient2Svr_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyIsNewAccount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyIsNewAccount_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyIsNewAccount_ProtoID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyIsNewAccount_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LOGIN_MOD_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Login_2eproto() {
  protobuf_AddDesc_Login_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Login.proto");
  GOOGLE_CHECK(file != NULL);
  ReqLogin_descriptor_ = file->message_type(0);
  static const int ReqLogin_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, password_),
  };
  ReqLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLogin_descriptor_,
      ReqLogin::default_instance_,
      ReqLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLogin));
  ReqLogin_ProtoModID_descriptor_ = ReqLogin_descriptor_->enum_type(0);
  ReqLogin_ProtoFunID_descriptor_ = ReqLogin_descriptor_->enum_type(1);
  RetLoginSucess_descriptor_ = file->message_type(1);
  static const int RetLoginSucess_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLoginSucess, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLoginSucess, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLoginSucess, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLoginSucess, opid_),
  };
  RetLoginSucess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetLoginSucess_descriptor_,
      RetLoginSucess::default_instance_,
      RetLoginSucess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLoginSucess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLoginSucess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetLoginSucess));
  RetLoginSucess_ProtoModID_descriptor_ = RetLoginSucess_descriptor_->enum_type(0);
  RetLoginSucess_ProtoFunID_descriptor_ = RetLoginSucess_descriptor_->enum_type(1);
  LoginError_descriptor_ = file->message_type(2);
  static const int LoginError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginError, errortype_),
  };
  LoginError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginError_descriptor_,
      LoginError::default_instance_,
      LoginError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginError));
  LoginError_ErrorType_descriptor_ = LoginError_descriptor_->enum_type(0);
  LoginError_ProtoID_descriptor_ = LoginError_descriptor_->enum_type(1);
  LoginError_ProtoFunID_descriptor_ = LoginError_descriptor_->enum_type(2);
  ReqLoginGate_descriptor_ = file->message_type(3);
  static const int ReqLoginGate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGate, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGate, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGate, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGate, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGate, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGate, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGate, extradata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGate, sdkid_),
  };
  ReqLoginGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLoginGate_descriptor_,
      ReqLoginGate::default_instance_,
      ReqLoginGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLoginGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLoginGate));
  ReqLoginGate_ProtoID_descriptor_ = ReqLoginGate_descriptor_->enum_type(0);
  ReqLoginGate_ProtoFunID_descriptor_ = ReqLoginGate_descriptor_->enum_type(1);
  stReqServerTime_descriptor_ = file->message_type(4);
  static const int stReqServerTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqServerTime, flag_),
  };
  stReqServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqServerTime_descriptor_,
      stReqServerTime::default_instance_,
      stReqServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqServerTime));
  stReqServerTime_ProtoID_descriptor_ = stReqServerTime_descriptor_->enum_type(0);
  stReqServerTime_ProtoFunID_descriptor_ = stReqServerTime_descriptor_->enum_type(1);
  stRetServerTime_descriptor_ = file->message_type(5);
  static const int stRetServerTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetServerTime, svrtime_),
  };
  stRetServerTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetServerTime_descriptor_,
      stRetServerTime::default_instance_,
      stRetServerTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetServerTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetServerTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetServerTime));
  stRetServerTime_ProtoID_descriptor_ = stRetServerTime_descriptor_->enum_type(0);
  stRetServerTime_ProtoFunID_descriptor_ = stRetServerTime_descriptor_->enum_type(1);
  stAutoLoginGate_descriptor_ = file->message_type(6);
  static const int stAutoLoginGate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAutoLoginGate, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAutoLoginGate, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAutoLoginGate, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAutoLoginGate, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAutoLoginGate, extradata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAutoLoginGate, sdkid_),
  };
  stAutoLoginGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAutoLoginGate_descriptor_,
      stAutoLoginGate::default_instance_,
      stAutoLoginGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAutoLoginGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAutoLoginGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAutoLoginGate));
  stAutoLoginGate_ProtoID_descriptor_ = stAutoLoginGate_descriptor_->enum_type(0);
  stAutoLoginGate_ProtoFunID_descriptor_ = stAutoLoginGate_descriptor_->enum_type(1);
  stNotifyRelogin_descriptor_ = file->message_type(7);
  static const int stNotifyRelogin_offsets_[1] = {
  };
  stNotifyRelogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyRelogin_descriptor_,
      stNotifyRelogin::default_instance_,
      stNotifyRelogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRelogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRelogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyRelogin));
  stNotifyRelogin_ProtoID_descriptor_ = stNotifyRelogin_descriptor_->enum_type(0);
  stNotifyRelogin_ProtoFunID_descriptor_ = stNotifyRelogin_descriptor_->enum_type(1);
  stQueryPingValue_descriptor_ = file->message_type(8);
  static const int stQueryPingValue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryPingValue, curtime_),
  };
  stQueryPingValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stQueryPingValue_descriptor_,
      stQueryPingValue::default_instance_,
      stQueryPingValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryPingValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stQueryPingValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stQueryPingValue));
  stQueryPingValue_ProtoID_descriptor_ = stQueryPingValue_descriptor_->enum_type(0);
  stQueryPingValue_ProtoFunID_descriptor_ = stQueryPingValue_descriptor_->enum_type(1);
  stReqClientTime_descriptor_ = file->message_type(9);
  static const int stReqClientTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqClientTime, curtime_),
  };
  stReqClientTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqClientTime_descriptor_,
      stReqClientTime::default_instance_,
      stReqClientTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqClientTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqClientTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqClientTime));
  stReqClientTime_ProtoID_descriptor_ = stReqClientTime_descriptor_->enum_type(0);
  stReqClientTime_ProtoFunID_descriptor_ = stReqClientTime_descriptor_->enum_type(1);
  stSendClient2Svr_descriptor_ = file->message_type(10);
  static const int stSendClient2Svr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendClient2Svr, curtime_),
  };
  stSendClient2Svr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendClient2Svr_descriptor_,
      stSendClient2Svr::default_instance_,
      stSendClient2Svr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendClient2Svr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendClient2Svr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendClient2Svr));
  stSendClient2Svr_ProtoID_descriptor_ = stSendClient2Svr_descriptor_->enum_type(0);
  stSendClient2Svr_ProtoFunID_descriptor_ = stSendClient2Svr_descriptor_->enum_type(1);
  stNotifyIsNewAccount_descriptor_ = file->message_type(11);
  static const int stNotifyIsNewAccount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyIsNewAccount, isnewacc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyIsNewAccount, account_),
  };
  stNotifyIsNewAccount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyIsNewAccount_descriptor_,
      stNotifyIsNewAccount::default_instance_,
      stNotifyIsNewAccount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyIsNewAccount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyIsNewAccount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyIsNewAccount));
  stNotifyIsNewAccount_ProtoID_descriptor_ = stNotifyIsNewAccount_descriptor_->enum_type(0);
  stNotifyIsNewAccount_ProtoFunID_descriptor_ = stNotifyIsNewAccount_descriptor_->enum_type(1);
  LOGIN_MOD_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Login_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLogin_descriptor_, &ReqLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetLoginSucess_descriptor_, &RetLoginSucess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginError_descriptor_, &LoginError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLoginGate_descriptor_, &ReqLoginGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqServerTime_descriptor_, &stReqServerTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetServerTime_descriptor_, &stRetServerTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAutoLoginGate_descriptor_, &stAutoLoginGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyRelogin_descriptor_, &stNotifyRelogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stQueryPingValue_descriptor_, &stQueryPingValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqClientTime_descriptor_, &stReqClientTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendClient2Svr_descriptor_, &stSendClient2Svr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyIsNewAccount_descriptor_, &stNotifyIsNewAccount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Login_2eproto() {
  delete ReqLogin::default_instance_;
  delete ReqLogin_reflection_;
  delete RetLoginSucess::default_instance_;
  delete RetLoginSucess_reflection_;
  delete LoginError::default_instance_;
  delete LoginError_reflection_;
  delete ReqLoginGate::default_instance_;
  delete ReqLoginGate_reflection_;
  delete stReqServerTime::default_instance_;
  delete stReqServerTime_reflection_;
  delete stRetServerTime::default_instance_;
  delete stRetServerTime_reflection_;
  delete stAutoLoginGate::default_instance_;
  delete stAutoLoginGate_reflection_;
  delete stNotifyRelogin::default_instance_;
  delete stNotifyRelogin_reflection_;
  delete stQueryPingValue::default_instance_;
  delete stQueryPingValue_reflection_;
  delete stReqClientTime::default_instance_;
  delete stReqClientTime_reflection_;
  delete stSendClient2Svr::default_instance_;
  delete stSendClient2Svr_reflection_;
  delete stNotifyIsNewAccount::default_instance_;
  delete stNotifyIsNewAccount_reflection_;
}

void protobuf_AddDesc_Login_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_ModID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Login.proto\022\005Login\032\013ModID.proto\"_\n\010Req"
    "Login\022\017\n\007account\030\001 \001(\t\022\020\n\010password\030\002 \001(\t"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\001\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\001\"{\n\016RetLoginSucess\022\r\n\005token\030\001 "
    "\001(\t\022\n\n\002ip\030\002 \001(\t\022\016\n\006device\030\003 \001(\t\022\014\n\004opID\030"
    "\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\001\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\002\"\301\001\n\nLoginError\022\021\n\terrorT"
    "ype\030\001 \001(\r\"q\n\tErrorType\022\022\n\016PASSWORD_WRONG"
    "\020\001\022\020\n\014HAS_LOGIN_IN\020\002\022\t\n\005OTHER\020\003\022\030\n\024LOGIN"
    "_IN_OTHER_PLACE\020\004\022\031\n\025LOGIN_VERSION_TOO_L"
    "OW\020\005\"\024\n\007ProtoID\022\t\n\005ModID\020\001\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020\003\"\303\001\n\014ReqLoginGate\022\r\n\005token\030\001 "
    "\001(\t\022\020\n\010deviceID\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\014\n\004opI"
    "D\030\004 \001(\r\022\025\n\rclientVersion\030\005 \001(\r\022\020\n\010server"
    "ID\030\006 \001(\r\022\021\n\textraData\030\007 \001(\t\022\r\n\005sdkId\030\010 \001"
    "(\r\"\024\n\007ProtoID\022\t\n\005ModID\020\001\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\004\"N\n\017stReqServerTime\022\014\n\004flag\030\001 \001"
    "(\r\"\024\n\007ProtoID\022\t\n\005ModID\020\001\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\005\"Q\n\017stRetServerTime\022\017\n\007svrTime\030"
    "\001 \001(\r\"\024\n\007ProtoID\022\t\n\005ModID\020\001\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\006\"\235\001\n\017stAutoLoginGate\022\r\n\005toke"
    "n\030\001 \001(\t\022\020\n\010deviceID\030\002 \001(\t\022\n\n\002ip\030\003 \001(\t\022\014\n"
    "\004opID\030\004 \001(\r\022\021\n\textraData\030\005 \001(\t\022\r\n\005sdkId\030"
    "\006 \001(\r\"\024\n\007ProtoID\022\t\n\005ModID\020\001\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\007\"@\n\017stNotifyRelogin\"\024\n\007Proto"
    "ID\022\t\n\005ModID\020\001\"\027\n\nProtoFunID\022\t\n\005FunID\020\010\"R"
    "\n\020stQueryPingValue\022\017\n\007curTime\030\001 \001(\r\"\024\n\007P"
    "rotoID\022\t\n\005ModID\020\001\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020\t\"Q\n\017stReqClientTime\022\017\n\007curTime\030\001 \001(\r\"\024"
    "\n\007ProtoID\022\t\n\005ModID\020\001\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020\n\"R\n\020stSendClient2Svr\022\017\n\007curTime\030\001 \001"
    "(\r\"\024\n\007ProtoID\022\t\n\005ModID\020\001\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\013\"h\n\024stNotifyIsNewAccount\022\020\n\010isN"
    "ewAcc\030\001 \001(\010\022\017\n\007account\030\002 \001(\t\"\024\n\007ProtoID\022"
    "\t\n\005ModID\020\001\"\027\n\nProtoFunID\022\t\n\005FunID\020\014*I\n\tL"
    "OGIN_MOD\022\020\n\014ReqLogin_req\020\001\022\026\n\022RetLoginSu"
    "cess_rsp\020\002\022\022\n\016LoginError_rsp\020\003", 1470);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Login.proto", &protobuf_RegisterTypes);
  ReqLogin::default_instance_ = new ReqLogin();
  RetLoginSucess::default_instance_ = new RetLoginSucess();
  LoginError::default_instance_ = new LoginError();
  ReqLoginGate::default_instance_ = new ReqLoginGate();
  stReqServerTime::default_instance_ = new stReqServerTime();
  stRetServerTime::default_instance_ = new stRetServerTime();
  stAutoLoginGate::default_instance_ = new stAutoLoginGate();
  stNotifyRelogin::default_instance_ = new stNotifyRelogin();
  stQueryPingValue::default_instance_ = new stQueryPingValue();
  stReqClientTime::default_instance_ = new stReqClientTime();
  stSendClient2Svr::default_instance_ = new stSendClient2Svr();
  stNotifyIsNewAccount::default_instance_ = new stNotifyIsNewAccount();
  ReqLogin::default_instance_->InitAsDefaultInstance();
  RetLoginSucess::default_instance_->InitAsDefaultInstance();
  LoginError::default_instance_->InitAsDefaultInstance();
  ReqLoginGate::default_instance_->InitAsDefaultInstance();
  stReqServerTime::default_instance_->InitAsDefaultInstance();
  stRetServerTime::default_instance_->InitAsDefaultInstance();
  stAutoLoginGate::default_instance_->InitAsDefaultInstance();
  stNotifyRelogin::default_instance_->InitAsDefaultInstance();
  stQueryPingValue::default_instance_->InitAsDefaultInstance();
  stReqClientTime::default_instance_->InitAsDefaultInstance();
  stSendClient2Svr::default_instance_->InitAsDefaultInstance();
  stNotifyIsNewAccount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Login_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Login_2eproto {
  StaticDescriptorInitializer_Login_2eproto() {
    protobuf_AddDesc_Login_2eproto();
  }
} static_descriptor_initializer_Login_2eproto_;
const ::google::protobuf::EnumDescriptor* LOGIN_MOD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LOGIN_MOD_descriptor_;
}
bool LOGIN_MOD_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqLogin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_ProtoModID_descriptor_;
}
bool ReqLogin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqLogin_ProtoModID ReqLogin::ModID;
const ReqLogin_ProtoModID ReqLogin::ProtoModID_MIN;
const ReqLogin_ProtoModID ReqLogin::ProtoModID_MAX;
const int ReqLogin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ReqLogin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_ProtoFunID_descriptor_;
}
bool ReqLogin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqLogin_ProtoFunID ReqLogin::FunID;
const ReqLogin_ProtoFunID ReqLogin::ProtoFunID_MIN;
const ReqLogin_ProtoFunID ReqLogin::ProtoFunID_MAX;
const int ReqLogin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqLogin::kAccountFieldNumber;
const int ReqLogin::kPasswordFieldNumber;
#endif  // !_MSC_VER

ReqLogin::ReqLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLogin::InitAsDefaultInstance() {
}

ReqLogin::ReqLogin(const ReqLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLogin::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLogin::~ReqLogin() {
  SharedDtor();
}

void ReqLogin::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ReqLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLogin_descriptor_;
}

const ReqLogin& ReqLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

ReqLogin* ReqLogin::default_instance_ = NULL;

ReqLogin* ReqLogin::New() const {
  return new ReqLogin;
}

void ReqLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLogin::MergeFrom(const ReqLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLogin::CopyFrom(const ReqLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLogin::IsInitialized() const {

  return true;
}

void ReqLogin::Swap(ReqLogin* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLogin_descriptor_;
  metadata.reflection = ReqLogin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RetLoginSucess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetLoginSucess_ProtoModID_descriptor_;
}
bool RetLoginSucess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RetLoginSucess_ProtoModID RetLoginSucess::ModID;
const RetLoginSucess_ProtoModID RetLoginSucess::ProtoModID_MIN;
const RetLoginSucess_ProtoModID RetLoginSucess::ProtoModID_MAX;
const int RetLoginSucess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* RetLoginSucess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetLoginSucess_ProtoFunID_descriptor_;
}
bool RetLoginSucess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RetLoginSucess_ProtoFunID RetLoginSucess::FunID;
const RetLoginSucess_ProtoFunID RetLoginSucess::ProtoFunID_MIN;
const RetLoginSucess_ProtoFunID RetLoginSucess::ProtoFunID_MAX;
const int RetLoginSucess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RetLoginSucess::kTokenFieldNumber;
const int RetLoginSucess::kIpFieldNumber;
const int RetLoginSucess::kDeviceFieldNumber;
const int RetLoginSucess::kOpIDFieldNumber;
#endif  // !_MSC_VER

RetLoginSucess::RetLoginSucess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetLoginSucess::InitAsDefaultInstance() {
}

RetLoginSucess::RetLoginSucess(const RetLoginSucess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetLoginSucess::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetLoginSucess::~RetLoginSucess() {
  SharedDtor();
}

void RetLoginSucess::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (device_ != &::google::protobuf::internal::kEmptyString) {
    delete device_;
  }
  if (this != default_instance_) {
  }
}

void RetLoginSucess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetLoginSucess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetLoginSucess_descriptor_;
}

const RetLoginSucess& RetLoginSucess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

RetLoginSucess* RetLoginSucess::default_instance_ = NULL;

RetLoginSucess* RetLoginSucess::New() const {
  return new RetLoginSucess;
}

void RetLoginSucess::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_device()) {
      if (device_ != &::google::protobuf::internal::kEmptyString) {
        device_->clear();
      }
    }
    opid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetLoginSucess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_device;
        break;
      }

      // optional string device = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetLoginSucess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional string device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device(), output);
  }

  // optional uint32 opID = 4;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetLoginSucess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->device(), target);
  }

  // optional uint32 opID = 4;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetLoginSucess::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string device = 3;
    if (has_device()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device());
    }

    // optional uint32 opID = 4;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetLoginSucess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetLoginSucess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetLoginSucess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetLoginSucess::MergeFrom(const RetLoginSucess& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_device()) {
      set_device(from.device());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetLoginSucess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetLoginSucess::CopyFrom(const RetLoginSucess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetLoginSucess::IsInitialized() const {

  return true;
}

void RetLoginSucess::Swap(RetLoginSucess* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(ip_, other->ip_);
    std::swap(device_, other->device_);
    std::swap(opid_, other->opid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetLoginSucess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetLoginSucess_descriptor_;
  metadata.reflection = RetLoginSucess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoginError_ErrorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginError_ErrorType_descriptor_;
}
bool LoginError_ErrorType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginError_ErrorType LoginError::PASSWORD_WRONG;
const LoginError_ErrorType LoginError::HAS_LOGIN_IN;
const LoginError_ErrorType LoginError::OTHER;
const LoginError_ErrorType LoginError::LOGIN_IN_OTHER_PLACE;
const LoginError_ErrorType LoginError::LOGIN_VERSION_TOO_LOW;
const LoginError_ErrorType LoginError::ErrorType_MIN;
const LoginError_ErrorType LoginError::ErrorType_MAX;
const int LoginError::ErrorType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LoginError_ProtoID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginError_ProtoID_descriptor_;
}
bool LoginError_ProtoID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginError_ProtoID LoginError::ModID;
const LoginError_ProtoID LoginError::ProtoID_MIN;
const LoginError_ProtoID LoginError::ProtoID_MAX;
const int LoginError::ProtoID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* LoginError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginError_ProtoFunID_descriptor_;
}
bool LoginError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginError_ProtoFunID LoginError::FunID;
const LoginError_ProtoFunID LoginError::ProtoFunID_MIN;
const LoginError_ProtoFunID LoginError::ProtoFunID_MAX;
const int LoginError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginError::kErrorTypeFieldNumber;
#endif  // !_MSC_VER

LoginError::LoginError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginError::InitAsDefaultInstance() {
}

LoginError::LoginError(const LoginError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginError::SharedCtor() {
  _cached_size_ = 0;
  errortype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginError::~LoginError() {
  SharedDtor();
}

void LoginError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginError_descriptor_;
}

const LoginError& LoginError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

LoginError* LoginError::default_instance_ = NULL;

LoginError* LoginError::New() const {
  return new LoginError;
}

void LoginError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    errortype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 errorType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &errortype_)));
          set_has_errortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 errorType = 1;
  if (has_errortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->errortype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 errorType = 1;
  if (has_errortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->errortype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 errorType = 1;
    if (has_errortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->errortype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginError::MergeFrom(const LoginError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errortype()) {
      set_errortype(from.errortype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginError::CopyFrom(const LoginError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginError::IsInitialized() const {

  return true;
}

void LoginError::Swap(LoginError* other) {
  if (other != this) {
    std::swap(errortype_, other->errortype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginError_descriptor_;
  metadata.reflection = LoginError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReqLoginGate_ProtoID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLoginGate_ProtoID_descriptor_;
}
bool ReqLoginGate_ProtoID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqLoginGate_ProtoID ReqLoginGate::ModID;
const ReqLoginGate_ProtoID ReqLoginGate::ProtoID_MIN;
const ReqLoginGate_ProtoID ReqLoginGate::ProtoID_MAX;
const int ReqLoginGate::ProtoID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ReqLoginGate_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLoginGate_ProtoFunID_descriptor_;
}
bool ReqLoginGate_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReqLoginGate_ProtoFunID ReqLoginGate::FunID;
const ReqLoginGate_ProtoFunID ReqLoginGate::ProtoFunID_MIN;
const ReqLoginGate_ProtoFunID ReqLoginGate::ProtoFunID_MAX;
const int ReqLoginGate::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReqLoginGate::kTokenFieldNumber;
const int ReqLoginGate::kDeviceIDFieldNumber;
const int ReqLoginGate::kIpFieldNumber;
const int ReqLoginGate::kOpIDFieldNumber;
const int ReqLoginGate::kClientVersionFieldNumber;
const int ReqLoginGate::kServerIDFieldNumber;
const int ReqLoginGate::kExtraDataFieldNumber;
const int ReqLoginGate::kSdkIdFieldNumber;
#endif  // !_MSC_VER

ReqLoginGate::ReqLoginGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLoginGate::InitAsDefaultInstance() {
}

ReqLoginGate::ReqLoginGate(const ReqLoginGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLoginGate::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  clientversion_ = 0u;
  serverid_ = 0u;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sdkid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLoginGate::~ReqLoginGate() {
  SharedDtor();
}

void ReqLoginGate::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void ReqLoginGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLoginGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLoginGate_descriptor_;
}

const ReqLoginGate& ReqLoginGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

ReqLoginGate* ReqLoginGate::default_instance_ = NULL;

ReqLoginGate* ReqLoginGate::New() const {
  return new ReqLoginGate;
}

void ReqLoginGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    opid_ = 0u;
    clientversion_ = 0u;
    serverid_ = 0u;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
    sdkid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLoginGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceID;
        break;
      }

      // optional string deviceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clientVersion;
        break;
      }

      // optional uint32 clientVersion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_serverID;
        break;
      }

      // optional uint32 serverID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_extraData;
        break;
      }

      // optional string extraData = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sdkId;
        break;
      }

      // optional uint32 sdkId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sdkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdkid_)));
          set_has_sdkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLoginGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // optional string deviceID = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional uint32 opID = 4;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opid(), output);
  }

  // optional uint32 clientVersion = 5;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->clientversion(), output);
  }

  // optional uint32 serverID = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->serverid(), output);
  }

  // optional string extraData = 7;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->extradata(), output);
  }

  // optional uint32 sdkId = 8;
  if (has_sdkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sdkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLoginGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional string deviceID = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 opID = 4;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opid(), target);
  }

  // optional uint32 clientVersion = 5;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->clientversion(), target);
  }

  // optional uint32 serverID = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->serverid(), target);
  }

  // optional string extraData = 7;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->extradata(), target);
  }

  // optional uint32 sdkId = 8;
  if (has_sdkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sdkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLoginGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string deviceID = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 opID = 4;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional uint32 clientVersion = 5;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clientversion());
    }

    // optional uint32 serverID = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional string extraData = 7;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

    // optional uint32 sdkId = 8;
    if (has_sdkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sdkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLoginGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLoginGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLoginGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLoginGate::MergeFrom(const ReqLoginGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
    if (from.has_sdkid()) {
      set_sdkid(from.sdkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLoginGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLoginGate::CopyFrom(const ReqLoginGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLoginGate::IsInitialized() const {

  return true;
}

void ReqLoginGate::Swap(ReqLoginGate* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(ip_, other->ip_);
    std::swap(opid_, other->opid_);
    std::swap(clientversion_, other->clientversion_);
    std::swap(serverid_, other->serverid_);
    std::swap(extradata_, other->extradata_);
    std::swap(sdkid_, other->sdkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLoginGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLoginGate_descriptor_;
  metadata.reflection = ReqLoginGate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqServerTime_ProtoID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqServerTime_ProtoID_descriptor_;
}
bool stReqServerTime_ProtoID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqServerTime_ProtoID stReqServerTime::ModID;
const stReqServerTime_ProtoID stReqServerTime::ProtoID_MIN;
const stReqServerTime_ProtoID stReqServerTime::ProtoID_MAX;
const int stReqServerTime::ProtoID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqServerTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqServerTime_ProtoFunID_descriptor_;
}
bool stReqServerTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqServerTime_ProtoFunID stReqServerTime::FunID;
const stReqServerTime_ProtoFunID stReqServerTime::ProtoFunID_MIN;
const stReqServerTime_ProtoFunID stReqServerTime::ProtoFunID_MAX;
const int stReqServerTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqServerTime::kFlagFieldNumber;
#endif  // !_MSC_VER

stReqServerTime::stReqServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqServerTime::InitAsDefaultInstance() {
}

stReqServerTime::stReqServerTime(const stReqServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqServerTime::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqServerTime::~stReqServerTime() {
  SharedDtor();
}

void stReqServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqServerTime_descriptor_;
}

const stReqServerTime& stReqServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

stReqServerTime* stReqServerTime::default_instance_ = NULL;

stReqServerTime* stReqServerTime::New() const {
  return new stReqServerTime;
}

void stReqServerTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqServerTime::MergeFrom(const stReqServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqServerTime::CopyFrom(const stReqServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqServerTime::IsInitialized() const {

  return true;
}

void stReqServerTime::Swap(stReqServerTime* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqServerTime_descriptor_;
  metadata.reflection = stReqServerTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetServerTime_ProtoID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetServerTime_ProtoID_descriptor_;
}
bool stRetServerTime_ProtoID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetServerTime_ProtoID stRetServerTime::ModID;
const stRetServerTime_ProtoID stRetServerTime::ProtoID_MIN;
const stRetServerTime_ProtoID stRetServerTime::ProtoID_MAX;
const int stRetServerTime::ProtoID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetServerTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetServerTime_ProtoFunID_descriptor_;
}
bool stRetServerTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetServerTime_ProtoFunID stRetServerTime::FunID;
const stRetServerTime_ProtoFunID stRetServerTime::ProtoFunID_MIN;
const stRetServerTime_ProtoFunID stRetServerTime::ProtoFunID_MAX;
const int stRetServerTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetServerTime::kSvrTimeFieldNumber;
#endif  // !_MSC_VER

stRetServerTime::stRetServerTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetServerTime::InitAsDefaultInstance() {
}

stRetServerTime::stRetServerTime(const stRetServerTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetServerTime::SharedCtor() {
  _cached_size_ = 0;
  svrtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetServerTime::~stRetServerTime() {
  SharedDtor();
}

void stRetServerTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetServerTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetServerTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetServerTime_descriptor_;
}

const stRetServerTime& stRetServerTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

stRetServerTime* stRetServerTime::default_instance_ = NULL;

stRetServerTime* stRetServerTime::New() const {
  return new stRetServerTime;
}

void stRetServerTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetServerTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtime_)));
          set_has_svrtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetServerTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrTime = 1;
  if (has_svrtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetServerTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrTime = 1;
  if (has_svrtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetServerTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrTime = 1;
    if (has_svrtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetServerTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetServerTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetServerTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetServerTime::MergeFrom(const stRetServerTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtime()) {
      set_svrtime(from.svrtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetServerTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetServerTime::CopyFrom(const stRetServerTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetServerTime::IsInitialized() const {

  return true;
}

void stRetServerTime::Swap(stRetServerTime* other) {
  if (other != this) {
    std::swap(svrtime_, other->svrtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetServerTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetServerTime_descriptor_;
  metadata.reflection = stRetServerTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAutoLoginGate_ProtoID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAutoLoginGate_ProtoID_descriptor_;
}
bool stAutoLoginGate_ProtoID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAutoLoginGate_ProtoID stAutoLoginGate::ModID;
const stAutoLoginGate_ProtoID stAutoLoginGate::ProtoID_MIN;
const stAutoLoginGate_ProtoID stAutoLoginGate::ProtoID_MAX;
const int stAutoLoginGate::ProtoID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAutoLoginGate_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAutoLoginGate_ProtoFunID_descriptor_;
}
bool stAutoLoginGate_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAutoLoginGate_ProtoFunID stAutoLoginGate::FunID;
const stAutoLoginGate_ProtoFunID stAutoLoginGate::ProtoFunID_MIN;
const stAutoLoginGate_ProtoFunID stAutoLoginGate::ProtoFunID_MAX;
const int stAutoLoginGate::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAutoLoginGate::kTokenFieldNumber;
const int stAutoLoginGate::kDeviceIDFieldNumber;
const int stAutoLoginGate::kIpFieldNumber;
const int stAutoLoginGate::kOpIDFieldNumber;
const int stAutoLoginGate::kExtraDataFieldNumber;
const int stAutoLoginGate::kSdkIdFieldNumber;
#endif  // !_MSC_VER

stAutoLoginGate::stAutoLoginGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAutoLoginGate::InitAsDefaultInstance() {
}

stAutoLoginGate::stAutoLoginGate(const stAutoLoginGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAutoLoginGate::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  extradata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sdkid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAutoLoginGate::~stAutoLoginGate() {
  SharedDtor();
}

void stAutoLoginGate::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (extradata_ != &::google::protobuf::internal::kEmptyString) {
    delete extradata_;
  }
  if (this != default_instance_) {
  }
}

void stAutoLoginGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAutoLoginGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAutoLoginGate_descriptor_;
}

const stAutoLoginGate& stAutoLoginGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

stAutoLoginGate* stAutoLoginGate::default_instance_ = NULL;

stAutoLoginGate* stAutoLoginGate::New() const {
  return new stAutoLoginGate;
}

void stAutoLoginGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    opid_ = 0u;
    if (has_extradata()) {
      if (extradata_ != &::google::protobuf::internal::kEmptyString) {
        extradata_->clear();
      }
    }
    sdkid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAutoLoginGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceID;
        break;
      }

      // optional string deviceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_extraData;
        break;
      }

      // optional string extraData = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extradata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extradata().data(), this->extradata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sdkId;
        break;
      }

      // optional uint32 sdkId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sdkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdkid_)));
          set_has_sdkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAutoLoginGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // optional string deviceID = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional uint32 opID = 4;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->opid(), output);
  }

  // optional string extraData = 5;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->extradata(), output);
  }

  // optional uint32 sdkId = 6;
  if (has_sdkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sdkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAutoLoginGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // optional string deviceID = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 opID = 4;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->opid(), target);
  }

  // optional string extraData = 5;
  if (has_extradata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extradata().data(), this->extradata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->extradata(), target);
  }

  // optional uint32 sdkId = 6;
  if (has_sdkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sdkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAutoLoginGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional string deviceID = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 opID = 4;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional string extraData = 5;
    if (has_extradata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->extradata());
    }

    // optional uint32 sdkId = 6;
    if (has_sdkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sdkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAutoLoginGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAutoLoginGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAutoLoginGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAutoLoginGate::MergeFrom(const stAutoLoginGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_extradata()) {
      set_extradata(from.extradata());
    }
    if (from.has_sdkid()) {
      set_sdkid(from.sdkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAutoLoginGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAutoLoginGate::CopyFrom(const stAutoLoginGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAutoLoginGate::IsInitialized() const {

  return true;
}

void stAutoLoginGate::Swap(stAutoLoginGate* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(ip_, other->ip_);
    std::swap(opid_, other->opid_);
    std::swap(extradata_, other->extradata_);
    std::swap(sdkid_, other->sdkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAutoLoginGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAutoLoginGate_descriptor_;
  metadata.reflection = stAutoLoginGate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyRelogin_ProtoID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRelogin_ProtoID_descriptor_;
}
bool stNotifyRelogin_ProtoID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyRelogin_ProtoID stNotifyRelogin::ModID;
const stNotifyRelogin_ProtoID stNotifyRelogin::ProtoID_MIN;
const stNotifyRelogin_ProtoID stNotifyRelogin::ProtoID_MAX;
const int stNotifyRelogin::ProtoID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyRelogin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRelogin_ProtoFunID_descriptor_;
}
bool stNotifyRelogin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyRelogin_ProtoFunID stNotifyRelogin::FunID;
const stNotifyRelogin_ProtoFunID stNotifyRelogin::ProtoFunID_MIN;
const stNotifyRelogin_ProtoFunID stNotifyRelogin::ProtoFunID_MAX;
const int stNotifyRelogin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

stNotifyRelogin::stNotifyRelogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyRelogin::InitAsDefaultInstance() {
}

stNotifyRelogin::stNotifyRelogin(const stNotifyRelogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyRelogin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyRelogin::~stNotifyRelogin() {
  SharedDtor();
}

void stNotifyRelogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyRelogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyRelogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRelogin_descriptor_;
}

const stNotifyRelogin& stNotifyRelogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

stNotifyRelogin* stNotifyRelogin::default_instance_ = NULL;

stNotifyRelogin* stNotifyRelogin::New() const {
  return new stNotifyRelogin;
}

void stNotifyRelogin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyRelogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void stNotifyRelogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyRelogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyRelogin::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyRelogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyRelogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyRelogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyRelogin::MergeFrom(const stNotifyRelogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyRelogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyRelogin::CopyFrom(const stNotifyRelogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyRelogin::IsInitialized() const {

  return true;
}

void stNotifyRelogin::Swap(stNotifyRelogin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyRelogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyRelogin_descriptor_;
  metadata.reflection = stNotifyRelogin_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stQueryPingValue_ProtoID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQueryPingValue_ProtoID_descriptor_;
}
bool stQueryPingValue_ProtoID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQueryPingValue_ProtoID stQueryPingValue::ModID;
const stQueryPingValue_ProtoID stQueryPingValue::ProtoID_MIN;
const stQueryPingValue_ProtoID stQueryPingValue::ProtoID_MAX;
const int stQueryPingValue::ProtoID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stQueryPingValue_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQueryPingValue_ProtoFunID_descriptor_;
}
bool stQueryPingValue_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stQueryPingValue_ProtoFunID stQueryPingValue::FunID;
const stQueryPingValue_ProtoFunID stQueryPingValue::ProtoFunID_MIN;
const stQueryPingValue_ProtoFunID stQueryPingValue::ProtoFunID_MAX;
const int stQueryPingValue::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stQueryPingValue::kCurTimeFieldNumber;
#endif  // !_MSC_VER

stQueryPingValue::stQueryPingValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stQueryPingValue::InitAsDefaultInstance() {
}

stQueryPingValue::stQueryPingValue(const stQueryPingValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stQueryPingValue::SharedCtor() {
  _cached_size_ = 0;
  curtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stQueryPingValue::~stQueryPingValue() {
  SharedDtor();
}

void stQueryPingValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stQueryPingValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stQueryPingValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stQueryPingValue_descriptor_;
}

const stQueryPingValue& stQueryPingValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

stQueryPingValue* stQueryPingValue::default_instance_ = NULL;

stQueryPingValue* stQueryPingValue::New() const {
  return new stQueryPingValue;
}

void stQueryPingValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stQueryPingValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtime_)));
          set_has_curtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stQueryPingValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curTime = 1;
  if (has_curtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stQueryPingValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curTime = 1;
  if (has_curtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stQueryPingValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curTime = 1;
    if (has_curtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stQueryPingValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stQueryPingValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stQueryPingValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stQueryPingValue::MergeFrom(const stQueryPingValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curtime()) {
      set_curtime(from.curtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stQueryPingValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stQueryPingValue::CopyFrom(const stQueryPingValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stQueryPingValue::IsInitialized() const {

  return true;
}

void stQueryPingValue::Swap(stQueryPingValue* other) {
  if (other != this) {
    std::swap(curtime_, other->curtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stQueryPingValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stQueryPingValue_descriptor_;
  metadata.reflection = stQueryPingValue_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqClientTime_ProtoID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqClientTime_ProtoID_descriptor_;
}
bool stReqClientTime_ProtoID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqClientTime_ProtoID stReqClientTime::ModID;
const stReqClientTime_ProtoID stReqClientTime::ProtoID_MIN;
const stReqClientTime_ProtoID stReqClientTime::ProtoID_MAX;
const int stReqClientTime::ProtoID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqClientTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqClientTime_ProtoFunID_descriptor_;
}
bool stReqClientTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqClientTime_ProtoFunID stReqClientTime::FunID;
const stReqClientTime_ProtoFunID stReqClientTime::ProtoFunID_MIN;
const stReqClientTime_ProtoFunID stReqClientTime::ProtoFunID_MAX;
const int stReqClientTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqClientTime::kCurTimeFieldNumber;
#endif  // !_MSC_VER

stReqClientTime::stReqClientTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqClientTime::InitAsDefaultInstance() {
}

stReqClientTime::stReqClientTime(const stReqClientTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqClientTime::SharedCtor() {
  _cached_size_ = 0;
  curtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqClientTime::~stReqClientTime() {
  SharedDtor();
}

void stReqClientTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqClientTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqClientTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqClientTime_descriptor_;
}

const stReqClientTime& stReqClientTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

stReqClientTime* stReqClientTime::default_instance_ = NULL;

stReqClientTime* stReqClientTime::New() const {
  return new stReqClientTime;
}

void stReqClientTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqClientTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtime_)));
          set_has_curtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqClientTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curTime = 1;
  if (has_curtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqClientTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curTime = 1;
  if (has_curtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqClientTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curTime = 1;
    if (has_curtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqClientTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqClientTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqClientTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqClientTime::MergeFrom(const stReqClientTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curtime()) {
      set_curtime(from.curtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqClientTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqClientTime::CopyFrom(const stReqClientTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqClientTime::IsInitialized() const {

  return true;
}

void stReqClientTime::Swap(stReqClientTime* other) {
  if (other != this) {
    std::swap(curtime_, other->curtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqClientTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqClientTime_descriptor_;
  metadata.reflection = stReqClientTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendClient2Svr_ProtoID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendClient2Svr_ProtoID_descriptor_;
}
bool stSendClient2Svr_ProtoID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendClient2Svr_ProtoID stSendClient2Svr::ModID;
const stSendClient2Svr_ProtoID stSendClient2Svr::ProtoID_MIN;
const stSendClient2Svr_ProtoID stSendClient2Svr::ProtoID_MAX;
const int stSendClient2Svr::ProtoID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendClient2Svr_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendClient2Svr_ProtoFunID_descriptor_;
}
bool stSendClient2Svr_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendClient2Svr_ProtoFunID stSendClient2Svr::FunID;
const stSendClient2Svr_ProtoFunID stSendClient2Svr::ProtoFunID_MIN;
const stSendClient2Svr_ProtoFunID stSendClient2Svr::ProtoFunID_MAX;
const int stSendClient2Svr::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendClient2Svr::kCurTimeFieldNumber;
#endif  // !_MSC_VER

stSendClient2Svr::stSendClient2Svr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendClient2Svr::InitAsDefaultInstance() {
}

stSendClient2Svr::stSendClient2Svr(const stSendClient2Svr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendClient2Svr::SharedCtor() {
  _cached_size_ = 0;
  curtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendClient2Svr::~stSendClient2Svr() {
  SharedDtor();
}

void stSendClient2Svr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSendClient2Svr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendClient2Svr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendClient2Svr_descriptor_;
}

const stSendClient2Svr& stSendClient2Svr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

stSendClient2Svr* stSendClient2Svr::default_instance_ = NULL;

stSendClient2Svr* stSendClient2Svr::New() const {
  return new stSendClient2Svr;
}

void stSendClient2Svr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendClient2Svr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtime_)));
          set_has_curtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendClient2Svr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curTime = 1;
  if (has_curtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendClient2Svr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curTime = 1;
  if (has_curtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendClient2Svr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curTime = 1;
    if (has_curtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendClient2Svr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendClient2Svr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendClient2Svr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendClient2Svr::MergeFrom(const stSendClient2Svr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curtime()) {
      set_curtime(from.curtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendClient2Svr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendClient2Svr::CopyFrom(const stSendClient2Svr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendClient2Svr::IsInitialized() const {

  return true;
}

void stSendClient2Svr::Swap(stSendClient2Svr* other) {
  if (other != this) {
    std::swap(curtime_, other->curtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendClient2Svr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendClient2Svr_descriptor_;
  metadata.reflection = stSendClient2Svr_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyIsNewAccount_ProtoID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyIsNewAccount_ProtoID_descriptor_;
}
bool stNotifyIsNewAccount_ProtoID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyIsNewAccount_ProtoID stNotifyIsNewAccount::ModID;
const stNotifyIsNewAccount_ProtoID stNotifyIsNewAccount::ProtoID_MIN;
const stNotifyIsNewAccount_ProtoID stNotifyIsNewAccount::ProtoID_MAX;
const int stNotifyIsNewAccount::ProtoID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyIsNewAccount_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyIsNewAccount_ProtoFunID_descriptor_;
}
bool stNotifyIsNewAccount_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyIsNewAccount_ProtoFunID stNotifyIsNewAccount::FunID;
const stNotifyIsNewAccount_ProtoFunID stNotifyIsNewAccount::ProtoFunID_MIN;
const stNotifyIsNewAccount_ProtoFunID stNotifyIsNewAccount::ProtoFunID_MAX;
const int stNotifyIsNewAccount::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyIsNewAccount::kIsNewAccFieldNumber;
const int stNotifyIsNewAccount::kAccountFieldNumber;
#endif  // !_MSC_VER

stNotifyIsNewAccount::stNotifyIsNewAccount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyIsNewAccount::InitAsDefaultInstance() {
}

stNotifyIsNewAccount::stNotifyIsNewAccount(const stNotifyIsNewAccount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyIsNewAccount::SharedCtor() {
  _cached_size_ = 0;
  isnewacc_ = false;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyIsNewAccount::~stNotifyIsNewAccount() {
  SharedDtor();
}

void stNotifyIsNewAccount::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stNotifyIsNewAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyIsNewAccount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyIsNewAccount_descriptor_;
}

const stNotifyIsNewAccount& stNotifyIsNewAccount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Login_2eproto();
  return *default_instance_;
}

stNotifyIsNewAccount* stNotifyIsNewAccount::default_instance_ = NULL;

stNotifyIsNewAccount* stNotifyIsNewAccount::New() const {
  return new stNotifyIsNewAccount;
}

void stNotifyIsNewAccount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isnewacc_ = false;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyIsNewAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isNewAcc = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnewacc_)));
          set_has_isnewacc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyIsNewAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isNewAcc = 1;
  if (has_isnewacc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isnewacc(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyIsNewAccount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isNewAcc = 1;
  if (has_isnewacc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isnewacc(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyIsNewAccount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isNewAcc = 1;
    if (has_isnewacc()) {
      total_size += 1 + 1;
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyIsNewAccount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyIsNewAccount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyIsNewAccount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyIsNewAccount::MergeFrom(const stNotifyIsNewAccount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isnewacc()) {
      set_isnewacc(from.isnewacc());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyIsNewAccount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyIsNewAccount::CopyFrom(const stNotifyIsNewAccount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyIsNewAccount::IsInitialized() const {

  return true;
}

void stNotifyIsNewAccount::Swap(stNotifyIsNewAccount* other) {
  if (other != this) {
    std::swap(isnewacc_, other->isnewacc_);
    std::swap(account_, other->account_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyIsNewAccount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyIsNewAccount_descriptor_;
  metadata.reflection = stNotifyIsNewAccount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login

// @@protoc_insertion_point(global_scope)
