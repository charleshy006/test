// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Team.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Team.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TeamProto {

namespace {

const ::google::protobuf::Descriptor* stReqCreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCreateTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCreateTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCreateTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCreateTeamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCreateTeamResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateTeamResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateTeamResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateTeamResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRoomInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRoomInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRoomInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRoomInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqEnterTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEnterTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEnterTeamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterTeamResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterTeamResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterTeamResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterTeamResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddTeamMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddTeamMember_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddTeamMember_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLeaveTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLeaveTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLeaveTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyLeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyLeaveTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyLeaveTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyLeaveTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqFireTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqFireTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFireTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFireTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyFireTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyFireTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyFireTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyFireTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInviteJoinInTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInviteJoinInTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteJoinInTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteJoinInTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInviteJoinInTeamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInviteJoinInTeamResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteJoinInTeamResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteJoinInTeamResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteJoinInTeamResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAskJoinInTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAskJoinInTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAskJoinInTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAskJoinInTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplyJoinInTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplyJoinInTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyJoinInTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyJoinInTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqEnterLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEnterLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBroadcastInviteCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBroadcastInviteCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBroadcastInviteCmd_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBroadcastInviteCmd_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBroadcastInviteJoinIn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadcastInviteJoinIn_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadcastInviteJoinIn_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadcastInviteJoinIn_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAutoMatchTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAutoMatchTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAutoMatchTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAutoMatchTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stWaitMatchTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stWaitMatchTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stWaitMatchTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stWaitMatchTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMathcTeamSuccess_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMathcTeamSuccess_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMathcTeamSuccess_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMathcTeamSuccess_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelAutoMatchTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelAutoMatchTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelAutoMatchTeamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelAutoMatchTeamResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeamResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeamResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeamResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqFirstKillInfoByID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqFirstKillInfoByID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFirstKillInfoByID_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqFirstKillInfoByID_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetFirstKillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetFirstKillInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFirstKillInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetFirstKillInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRealTimeSingleMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRealTimeSingleMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRealTimeSingleMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRealTimeSingleMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRealTimeSingleMatchWait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRealTimeSingleMatchWait_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeSingleMatchWait_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeSingleMatchWait_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCancelRealTimeSingleMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCancelRealTimeSingleMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeSingleMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeSingleMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelRealTimeSingleMatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelRealTimeSingleMatchResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelRealTimeSingleMatchResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelRealTimeSingleMatchResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqRealTimeTeamMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqRealTimeTeamMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRealTimeTeamMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqRealTimeTeamMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRealTimeTeamMatchWait_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRealTimeTeamMatchWait_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatchWait_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatchWait_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCancelRealTimeTeamMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCancelRealTimeTeamMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeTeamMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeTeamMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelRealTimeTeamMatchResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelRealTimeTeamMatchResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelRealTimeTeamMatchResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelRealTimeTeamMatchResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRealTimePKNotOpen_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRealTimePKNotOpen_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimePKNotOpen_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimePKNotOpen_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eTeamType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRealTimePKType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Team_2eproto() {
  protobuf_AddDesc_Team_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Team.proto");
  GOOGLE_CHECK(file != NULL);
  stReqCreateTeam_descriptor_ = file->message_type(0);
  static const int stReqCreateTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCreateTeam, copymapid_),
  };
  stReqCreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCreateTeam_descriptor_,
      stReqCreateTeam::default_instance_,
      stReqCreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCreateTeam));
  stReqCreateTeam_ProtoModID_descriptor_ = stReqCreateTeam_descriptor_->enum_type(0);
  stReqCreateTeam_ProtoFunID_descriptor_ = stReqCreateTeam_descriptor_->enum_type(1);
  stCreateTeamResult_descriptor_ = file->message_type(1);
  static const int stCreateTeamResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateTeamResult, result_),
  };
  stCreateTeamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCreateTeamResult_descriptor_,
      stCreateTeamResult::default_instance_,
      stCreateTeamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateTeamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateTeamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCreateTeamResult));
  stCreateTeamResult_eResult_descriptor_ = stCreateTeamResult_descriptor_->enum_type(0);
  stCreateTeamResult_ProtoModID_descriptor_ = stCreateTeamResult_descriptor_->enum_type(1);
  stCreateTeamResult_ProtoFunID_descriptor_ = stCreateTeamResult_descriptor_->enum_type(2);
  stSynMemberInfo_descriptor_ = file->message_type(2);
  static const int stSynMemberInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, fashionwingid_),
  };
  stSynMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMemberInfo_descriptor_,
      stSynMemberInfo::default_instance_,
      stSynMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMemberInfo));
  stRoomInfo_descriptor_ = file->message_type(3);
  static const int stRoomInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoomInfo, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoomInfo, members_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoomInfo, teamid_),
  };
  stRoomInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRoomInfo_descriptor_,
      stRoomInfo::default_instance_,
      stRoomInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoomInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoomInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRoomInfo));
  stRoomInfo_ProtoModID_descriptor_ = stRoomInfo_descriptor_->enum_type(0);
  stRoomInfo_ProtoFunID_descriptor_ = stRoomInfo_descriptor_->enum_type(1);
  stReqEnterTeam_descriptor_ = file->message_type(4);
  static const int stReqEnterTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterTeam, teamid_),
  };
  stReqEnterTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEnterTeam_descriptor_,
      stReqEnterTeam::default_instance_,
      stReqEnterTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEnterTeam));
  stReqEnterTeam_ProtoModID_descriptor_ = stReqEnterTeam_descriptor_->enum_type(0);
  stReqEnterTeam_ProtoFunID_descriptor_ = stReqEnterTeam_descriptor_->enum_type(1);
  stEnterTeamResult_descriptor_ = file->message_type(5);
  static const int stEnterTeamResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterTeamResult, result_),
  };
  stEnterTeamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterTeamResult_descriptor_,
      stEnterTeamResult::default_instance_,
      stEnterTeamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterTeamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterTeamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterTeamResult));
  stEnterTeamResult_eResult_descriptor_ = stEnterTeamResult_descriptor_->enum_type(0);
  stEnterTeamResult_ProtoModID_descriptor_ = stEnterTeamResult_descriptor_->enum_type(1);
  stEnterTeamResult_ProtoFunID_descriptor_ = stEnterTeamResult_descriptor_->enum_type(2);
  stAddTeamMember_descriptor_ = file->message_type(6);
  static const int stAddTeamMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddTeamMember, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddTeamMember, memberinfo_),
  };
  stAddTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddTeamMember_descriptor_,
      stAddTeamMember::default_instance_,
      stAddTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddTeamMember));
  stAddTeamMember_ProtoModID_descriptor_ = stAddTeamMember_descriptor_->enum_type(0);
  stAddTeamMember_ProtoFunID_descriptor_ = stAddTeamMember_descriptor_->enum_type(1);
  stReqLeaveTeam_descriptor_ = file->message_type(7);
  static const int stReqLeaveTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveTeam, charid_),
  };
  stReqLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLeaveTeam_descriptor_,
      stReqLeaveTeam::default_instance_,
      stReqLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLeaveTeam));
  stReqLeaveTeam_ProtoModID_descriptor_ = stReqLeaveTeam_descriptor_->enum_type(0);
  stReqLeaveTeam_ProtoFunID_descriptor_ = stReqLeaveTeam_descriptor_->enum_type(1);
  stNotifyLeaveTeam_descriptor_ = file->message_type(8);
  static const int stNotifyLeaveTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLeaveTeam, charid_),
  };
  stNotifyLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyLeaveTeam_descriptor_,
      stNotifyLeaveTeam::default_instance_,
      stNotifyLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyLeaveTeam));
  stNotifyLeaveTeam_ProtoModID_descriptor_ = stNotifyLeaveTeam_descriptor_->enum_type(0);
  stNotifyLeaveTeam_ProtoFunID_descriptor_ = stNotifyLeaveTeam_descriptor_->enum_type(1);
  stReqFireTeam_descriptor_ = file->message_type(9);
  static const int stReqFireTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFireTeam, charid_),
  };
  stReqFireTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqFireTeam_descriptor_,
      stReqFireTeam::default_instance_,
      stReqFireTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFireTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFireTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqFireTeam));
  stReqFireTeam_ProtoModID_descriptor_ = stReqFireTeam_descriptor_->enum_type(0);
  stReqFireTeam_ProtoFunID_descriptor_ = stReqFireTeam_descriptor_->enum_type(1);
  stNotifyFireTeam_descriptor_ = file->message_type(10);
  static const int stNotifyFireTeam_offsets_[1] = {
  };
  stNotifyFireTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyFireTeam_descriptor_,
      stNotifyFireTeam::default_instance_,
      stNotifyFireTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFireTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFireTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyFireTeam));
  stNotifyFireTeam_ProtoModID_descriptor_ = stNotifyFireTeam_descriptor_->enum_type(0);
  stNotifyFireTeam_ProtoFunID_descriptor_ = stNotifyFireTeam_descriptor_->enum_type(1);
  stInviteJoinInTeam_descriptor_ = file->message_type(11);
  static const int stInviteJoinInTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteJoinInTeam, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteJoinInTeam, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteJoinInTeam, etype_),
  };
  stInviteJoinInTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInviteJoinInTeam_descriptor_,
      stInviteJoinInTeam::default_instance_,
      stInviteJoinInTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteJoinInTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteJoinInTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInviteJoinInTeam));
  stInviteJoinInTeam_ProtoModID_descriptor_ = stInviteJoinInTeam_descriptor_->enum_type(0);
  stInviteJoinInTeam_ProtoFunID_descriptor_ = stInviteJoinInTeam_descriptor_->enum_type(1);
  stInviteJoinInTeamResult_descriptor_ = file->message_type(12);
  static const int stInviteJoinInTeamResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteJoinInTeamResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteJoinInTeamResult, etype_),
  };
  stInviteJoinInTeamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInviteJoinInTeamResult_descriptor_,
      stInviteJoinInTeamResult::default_instance_,
      stInviteJoinInTeamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteJoinInTeamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteJoinInTeamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInviteJoinInTeamResult));
  stInviteJoinInTeamResult_eResult_descriptor_ = stInviteJoinInTeamResult_descriptor_->enum_type(0);
  stInviteJoinInTeamResult_ProtoModID_descriptor_ = stInviteJoinInTeamResult_descriptor_->enum_type(1);
  stInviteJoinInTeamResult_ProtoFunID_descriptor_ = stInviteJoinInTeamResult_descriptor_->enum_type(2);
  stAskJoinInTeam_descriptor_ = file->message_type(13);
  static const int stAskJoinInTeam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskJoinInTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskJoinInTeam, invitename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskJoinInTeam, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskJoinInTeam, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskJoinInTeam, copymapid_),
  };
  stAskJoinInTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAskJoinInTeam_descriptor_,
      stAskJoinInTeam::default_instance_,
      stAskJoinInTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskJoinInTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAskJoinInTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAskJoinInTeam));
  stAskJoinInTeam_ProtoModID_descriptor_ = stAskJoinInTeam_descriptor_->enum_type(0);
  stAskJoinInTeam_ProtoFunID_descriptor_ = stAskJoinInTeam_descriptor_->enum_type(1);
  stReplyJoinInTeam_descriptor_ = file->message_type(14);
  static const int stReplyJoinInTeam_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyJoinInTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyJoinInTeam, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyJoinInTeam, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyJoinInTeam, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyJoinInTeam, timesuseout_),
  };
  stReplyJoinInTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplyJoinInTeam_descriptor_,
      stReplyJoinInTeam::default_instance_,
      stReplyJoinInTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyJoinInTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyJoinInTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplyJoinInTeam));
  stReplyJoinInTeam_ProtoModID_descriptor_ = stReplyJoinInTeam_descriptor_->enum_type(0);
  stReplyJoinInTeam_ProtoFunID_descriptor_ = stReplyJoinInTeam_descriptor_->enum_type(1);
  stReqEnterLv_descriptor_ = file->message_type(15);
  static const int stReqEnterLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterLv, copymapid_),
  };
  stReqEnterLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEnterLv_descriptor_,
      stReqEnterLv::default_instance_,
      stReqEnterLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEnterLv));
  stReqEnterLv_ProtoModID_descriptor_ = stReqEnterLv_descriptor_->enum_type(0);
  stReqEnterLv_ProtoFunID_descriptor_ = stReqEnterLv_descriptor_->enum_type(1);
  stReqBroadcastInviteCmd_descriptor_ = file->message_type(16);
  static const int stReqBroadcastInviteCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBroadcastInviteCmd, charid_),
  };
  stReqBroadcastInviteCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBroadcastInviteCmd_descriptor_,
      stReqBroadcastInviteCmd::default_instance_,
      stReqBroadcastInviteCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBroadcastInviteCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBroadcastInviteCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBroadcastInviteCmd));
  stReqBroadcastInviteCmd_ProtoModID_descriptor_ = stReqBroadcastInviteCmd_descriptor_->enum_type(0);
  stReqBroadcastInviteCmd_ProtoFunID_descriptor_ = stReqBroadcastInviteCmd_descriptor_->enum_type(1);
  stBroadcastInviteJoinIn_descriptor_ = file->message_type(17);
  static const int stBroadcastInviteJoinIn_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, photoid_),
  };
  stBroadcastInviteJoinIn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadcastInviteJoinIn_descriptor_,
      stBroadcastInviteJoinIn::default_instance_,
      stBroadcastInviteJoinIn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastInviteJoinIn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadcastInviteJoinIn));
  stBroadcastInviteJoinIn_ProtoModID_descriptor_ = stBroadcastInviteJoinIn_descriptor_->enum_type(0);
  stBroadcastInviteJoinIn_ProtoFunID_descriptor_ = stBroadcastInviteJoinIn_descriptor_->enum_type(1);
  stReqAutoMatchTeam_descriptor_ = file->message_type(18);
  static const int stReqAutoMatchTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAutoMatchTeam, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAutoMatchTeam, copymapid_),
  };
  stReqAutoMatchTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAutoMatchTeam_descriptor_,
      stReqAutoMatchTeam::default_instance_,
      stReqAutoMatchTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAutoMatchTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAutoMatchTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAutoMatchTeam));
  stReqAutoMatchTeam_ProtoModID_descriptor_ = stReqAutoMatchTeam_descriptor_->enum_type(0);
  stReqAutoMatchTeam_ProtoFunID_descriptor_ = stReqAutoMatchTeam_descriptor_->enum_type(1);
  stWaitMatchTeam_descriptor_ = file->message_type(19);
  static const int stWaitMatchTeam_offsets_[1] = {
  };
  stWaitMatchTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stWaitMatchTeam_descriptor_,
      stWaitMatchTeam::default_instance_,
      stWaitMatchTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWaitMatchTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stWaitMatchTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stWaitMatchTeam));
  stWaitMatchTeam_ProtoModID_descriptor_ = stWaitMatchTeam_descriptor_->enum_type(0);
  stWaitMatchTeam_ProtoFunID_descriptor_ = stWaitMatchTeam_descriptor_->enum_type(1);
  stMathcTeamSuccess_descriptor_ = file->message_type(20);
  static const int stMathcTeamSuccess_offsets_[1] = {
  };
  stMathcTeamSuccess_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMathcTeamSuccess_descriptor_,
      stMathcTeamSuccess::default_instance_,
      stMathcTeamSuccess_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMathcTeamSuccess, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMathcTeamSuccess, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMathcTeamSuccess));
  stMathcTeamSuccess_ProtoModID_descriptor_ = stMathcTeamSuccess_descriptor_->enum_type(0);
  stMathcTeamSuccess_ProtoFunID_descriptor_ = stMathcTeamSuccess_descriptor_->enum_type(1);
  stCancelAutoMatchTeam_descriptor_ = file->message_type(21);
  static const int stCancelAutoMatchTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelAutoMatchTeam, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelAutoMatchTeam, copymapid_),
  };
  stCancelAutoMatchTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelAutoMatchTeam_descriptor_,
      stCancelAutoMatchTeam::default_instance_,
      stCancelAutoMatchTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelAutoMatchTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelAutoMatchTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelAutoMatchTeam));
  stCancelAutoMatchTeam_ProtoModID_descriptor_ = stCancelAutoMatchTeam_descriptor_->enum_type(0);
  stCancelAutoMatchTeam_ProtoFunID_descriptor_ = stCancelAutoMatchTeam_descriptor_->enum_type(1);
  stCancelAutoMatchTeamResult_descriptor_ = file->message_type(22);
  static const int stCancelAutoMatchTeamResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelAutoMatchTeamResult, result_),
  };
  stCancelAutoMatchTeamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelAutoMatchTeamResult_descriptor_,
      stCancelAutoMatchTeamResult::default_instance_,
      stCancelAutoMatchTeamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelAutoMatchTeamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelAutoMatchTeamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelAutoMatchTeamResult));
  stCancelAutoMatchTeamResult_eResult_descriptor_ = stCancelAutoMatchTeamResult_descriptor_->enum_type(0);
  stCancelAutoMatchTeamResult_ProtoModID_descriptor_ = stCancelAutoMatchTeamResult_descriptor_->enum_type(1);
  stCancelAutoMatchTeamResult_ProtoFunID_descriptor_ = stCancelAutoMatchTeamResult_descriptor_->enum_type(2);
  stReqFirstKillInfoByID_descriptor_ = file->message_type(23);
  static const int stReqFirstKillInfoByID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFirstKillInfoByID, levelid_),
  };
  stReqFirstKillInfoByID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqFirstKillInfoByID_descriptor_,
      stReqFirstKillInfoByID::default_instance_,
      stReqFirstKillInfoByID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFirstKillInfoByID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqFirstKillInfoByID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqFirstKillInfoByID));
  stReqFirstKillInfoByID_ProtoModID_descriptor_ = stReqFirstKillInfoByID_descriptor_->enum_type(0);
  stReqFirstKillInfoByID_ProtoFunID_descriptor_ = stReqFirstKillInfoByID_descriptor_->enum_type(1);
  stRetFirstKillInfo_descriptor_ = file->message_type(24);
  static const int stRetFirstKillInfo_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, job1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, sex1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, name1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, level1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, battlepower1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, job2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, sex2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, name2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, level2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, battlepower2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, charid3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, job3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, sex3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, name3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, level3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, battlepower3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, killtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, photoid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, photoid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, photoid3_),
  };
  stRetFirstKillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetFirstKillInfo_descriptor_,
      stRetFirstKillInfo::default_instance_,
      stRetFirstKillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetFirstKillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetFirstKillInfo));
  stRetFirstKillInfo_ProtoModID_descriptor_ = stRetFirstKillInfo_descriptor_->enum_type(0);
  stRetFirstKillInfo_ProtoFunID_descriptor_ = stRetFirstKillInfo_descriptor_->enum_type(1);
  stReqRealTimeSingleMatch_descriptor_ = file->message_type(25);
  static const int stReqRealTimeSingleMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRealTimeSingleMatch, etype_),
  };
  stReqRealTimeSingleMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRealTimeSingleMatch_descriptor_,
      stReqRealTimeSingleMatch::default_instance_,
      stReqRealTimeSingleMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRealTimeSingleMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRealTimeSingleMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRealTimeSingleMatch));
  stReqRealTimeSingleMatch_ProtoModID_descriptor_ = stReqRealTimeSingleMatch_descriptor_->enum_type(0);
  stReqRealTimeSingleMatch_ProtoFunID_descriptor_ = stReqRealTimeSingleMatch_descriptor_->enum_type(1);
  stRealTimeSingleMatchWait_descriptor_ = file->message_type(26);
  static const int stRealTimeSingleMatchWait_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeSingleMatchWait, etype_),
  };
  stRealTimeSingleMatchWait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRealTimeSingleMatchWait_descriptor_,
      stRealTimeSingleMatchWait::default_instance_,
      stRealTimeSingleMatchWait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeSingleMatchWait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeSingleMatchWait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRealTimeSingleMatchWait));
  stRealTimeSingleMatchWait_ProtoModID_descriptor_ = stRealTimeSingleMatchWait_descriptor_->enum_type(0);
  stRealTimeSingleMatchWait_ProtoFunID_descriptor_ = stRealTimeSingleMatchWait_descriptor_->enum_type(1);
  stReqCancelRealTimeSingleMatch_descriptor_ = file->message_type(27);
  static const int stReqCancelRealTimeSingleMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelRealTimeSingleMatch, etype_),
  };
  stReqCancelRealTimeSingleMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCancelRealTimeSingleMatch_descriptor_,
      stReqCancelRealTimeSingleMatch::default_instance_,
      stReqCancelRealTimeSingleMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelRealTimeSingleMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelRealTimeSingleMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCancelRealTimeSingleMatch));
  stReqCancelRealTimeSingleMatch_ProtoModID_descriptor_ = stReqCancelRealTimeSingleMatch_descriptor_->enum_type(0);
  stReqCancelRealTimeSingleMatch_ProtoFunID_descriptor_ = stReqCancelRealTimeSingleMatch_descriptor_->enum_type(1);
  stCancelRealTimeSingleMatchResult_descriptor_ = file->message_type(28);
  static const int stCancelRealTimeSingleMatchResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelRealTimeSingleMatchResult, success_),
  };
  stCancelRealTimeSingleMatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelRealTimeSingleMatchResult_descriptor_,
      stCancelRealTimeSingleMatchResult::default_instance_,
      stCancelRealTimeSingleMatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelRealTimeSingleMatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelRealTimeSingleMatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelRealTimeSingleMatchResult));
  stCancelRealTimeSingleMatchResult_ProtoModID_descriptor_ = stCancelRealTimeSingleMatchResult_descriptor_->enum_type(0);
  stCancelRealTimeSingleMatchResult_ProtoFunID_descriptor_ = stCancelRealTimeSingleMatchResult_descriptor_->enum_type(1);
  stReqRealTimeTeamMatch_descriptor_ = file->message_type(29);
  static const int stReqRealTimeTeamMatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRealTimeTeamMatch, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRealTimeTeamMatch, teamid_),
  };
  stReqRealTimeTeamMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqRealTimeTeamMatch_descriptor_,
      stReqRealTimeTeamMatch::default_instance_,
      stReqRealTimeTeamMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRealTimeTeamMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqRealTimeTeamMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqRealTimeTeamMatch));
  stReqRealTimeTeamMatch_ProtoModID_descriptor_ = stReqRealTimeTeamMatch_descriptor_->enum_type(0);
  stReqRealTimeTeamMatch_ProtoFunID_descriptor_ = stReqRealTimeTeamMatch_descriptor_->enum_type(1);
  stRealTimeTeamMatchWait_descriptor_ = file->message_type(30);
  static const int stRealTimeTeamMatchWait_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatchWait, etype_),
  };
  stRealTimeTeamMatchWait_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRealTimeTeamMatchWait_descriptor_,
      stRealTimeTeamMatchWait::default_instance_,
      stRealTimeTeamMatchWait_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatchWait, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatchWait, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRealTimeTeamMatchWait));
  stRealTimeTeamMatchWait_ProtoModID_descriptor_ = stRealTimeTeamMatchWait_descriptor_->enum_type(0);
  stRealTimeTeamMatchWait_ProtoFunID_descriptor_ = stRealTimeTeamMatchWait_descriptor_->enum_type(1);
  stReqCancelRealTimeTeamMatch_descriptor_ = file->message_type(31);
  static const int stReqCancelRealTimeTeamMatch_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelRealTimeTeamMatch, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelRealTimeTeamMatch, teamid_),
  };
  stReqCancelRealTimeTeamMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCancelRealTimeTeamMatch_descriptor_,
      stReqCancelRealTimeTeamMatch::default_instance_,
      stReqCancelRealTimeTeamMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelRealTimeTeamMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCancelRealTimeTeamMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCancelRealTimeTeamMatch));
  stReqCancelRealTimeTeamMatch_ProtoModID_descriptor_ = stReqCancelRealTimeTeamMatch_descriptor_->enum_type(0);
  stReqCancelRealTimeTeamMatch_ProtoFunID_descriptor_ = stReqCancelRealTimeTeamMatch_descriptor_->enum_type(1);
  stCancelRealTimeTeamMatchResult_descriptor_ = file->message_type(32);
  static const int stCancelRealTimeTeamMatchResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelRealTimeTeamMatchResult, success_),
  };
  stCancelRealTimeTeamMatchResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelRealTimeTeamMatchResult_descriptor_,
      stCancelRealTimeTeamMatchResult::default_instance_,
      stCancelRealTimeTeamMatchResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelRealTimeTeamMatchResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelRealTimeTeamMatchResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelRealTimeTeamMatchResult));
  stCancelRealTimeTeamMatchResult_ProtoModID_descriptor_ = stCancelRealTimeTeamMatchResult_descriptor_->enum_type(0);
  stCancelRealTimeTeamMatchResult_ProtoFunID_descriptor_ = stCancelRealTimeTeamMatchResult_descriptor_->enum_type(1);
  stRealTimePKNotOpen_descriptor_ = file->message_type(33);
  static const int stRealTimePKNotOpen_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimePKNotOpen, etype_),
  };
  stRealTimePKNotOpen_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRealTimePKNotOpen_descriptor_,
      stRealTimePKNotOpen::default_instance_,
      stRealTimePKNotOpen_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimePKNotOpen, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimePKNotOpen, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRealTimePKNotOpen));
  stRealTimePKNotOpen_ProtoModID_descriptor_ = stRealTimePKNotOpen_descriptor_->enum_type(0);
  stRealTimePKNotOpen_ProtoFunID_descriptor_ = stRealTimePKNotOpen_descriptor_->enum_type(1);
  eTeamType_descriptor_ = file->enum_type(0);
  eRealTimePKType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Team_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCreateTeam_descriptor_, &stReqCreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCreateTeamResult_descriptor_, &stCreateTeamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMemberInfo_descriptor_, &stSynMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRoomInfo_descriptor_, &stRoomInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEnterTeam_descriptor_, &stReqEnterTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterTeamResult_descriptor_, &stEnterTeamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddTeamMember_descriptor_, &stAddTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLeaveTeam_descriptor_, &stReqLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyLeaveTeam_descriptor_, &stNotifyLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqFireTeam_descriptor_, &stReqFireTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyFireTeam_descriptor_, &stNotifyFireTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInviteJoinInTeam_descriptor_, &stInviteJoinInTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInviteJoinInTeamResult_descriptor_, &stInviteJoinInTeamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAskJoinInTeam_descriptor_, &stAskJoinInTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplyJoinInTeam_descriptor_, &stReplyJoinInTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEnterLv_descriptor_, &stReqEnterLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBroadcastInviteCmd_descriptor_, &stReqBroadcastInviteCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadcastInviteJoinIn_descriptor_, &stBroadcastInviteJoinIn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAutoMatchTeam_descriptor_, &stReqAutoMatchTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stWaitMatchTeam_descriptor_, &stWaitMatchTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMathcTeamSuccess_descriptor_, &stMathcTeamSuccess::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelAutoMatchTeam_descriptor_, &stCancelAutoMatchTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelAutoMatchTeamResult_descriptor_, &stCancelAutoMatchTeamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqFirstKillInfoByID_descriptor_, &stReqFirstKillInfoByID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetFirstKillInfo_descriptor_, &stRetFirstKillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRealTimeSingleMatch_descriptor_, &stReqRealTimeSingleMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRealTimeSingleMatchWait_descriptor_, &stRealTimeSingleMatchWait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCancelRealTimeSingleMatch_descriptor_, &stReqCancelRealTimeSingleMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelRealTimeSingleMatchResult_descriptor_, &stCancelRealTimeSingleMatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqRealTimeTeamMatch_descriptor_, &stReqRealTimeTeamMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRealTimeTeamMatchWait_descriptor_, &stRealTimeTeamMatchWait::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCancelRealTimeTeamMatch_descriptor_, &stReqCancelRealTimeTeamMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelRealTimeTeamMatchResult_descriptor_, &stCancelRealTimeTeamMatchResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRealTimePKNotOpen_descriptor_, &stRealTimePKNotOpen::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Team_2eproto() {
  delete stReqCreateTeam::default_instance_;
  delete stReqCreateTeam_reflection_;
  delete stCreateTeamResult::default_instance_;
  delete stCreateTeamResult_reflection_;
  delete stSynMemberInfo::default_instance_;
  delete stSynMemberInfo_reflection_;
  delete stRoomInfo::default_instance_;
  delete stRoomInfo_reflection_;
  delete stReqEnterTeam::default_instance_;
  delete stReqEnterTeam_reflection_;
  delete stEnterTeamResult::default_instance_;
  delete stEnterTeamResult_reflection_;
  delete stAddTeamMember::default_instance_;
  delete stAddTeamMember_reflection_;
  delete stReqLeaveTeam::default_instance_;
  delete stReqLeaveTeam_reflection_;
  delete stNotifyLeaveTeam::default_instance_;
  delete stNotifyLeaveTeam_reflection_;
  delete stReqFireTeam::default_instance_;
  delete stReqFireTeam_reflection_;
  delete stNotifyFireTeam::default_instance_;
  delete stNotifyFireTeam_reflection_;
  delete stInviteJoinInTeam::default_instance_;
  delete stInviteJoinInTeam_reflection_;
  delete stInviteJoinInTeamResult::default_instance_;
  delete stInviteJoinInTeamResult_reflection_;
  delete stAskJoinInTeam::default_instance_;
  delete stAskJoinInTeam_reflection_;
  delete stReplyJoinInTeam::default_instance_;
  delete stReplyJoinInTeam_reflection_;
  delete stReqEnterLv::default_instance_;
  delete stReqEnterLv_reflection_;
  delete stReqBroadcastInviteCmd::default_instance_;
  delete stReqBroadcastInviteCmd_reflection_;
  delete stBroadcastInviteJoinIn::default_instance_;
  delete stBroadcastInviteJoinIn_reflection_;
  delete stReqAutoMatchTeam::default_instance_;
  delete stReqAutoMatchTeam_reflection_;
  delete stWaitMatchTeam::default_instance_;
  delete stWaitMatchTeam_reflection_;
  delete stMathcTeamSuccess::default_instance_;
  delete stMathcTeamSuccess_reflection_;
  delete stCancelAutoMatchTeam::default_instance_;
  delete stCancelAutoMatchTeam_reflection_;
  delete stCancelAutoMatchTeamResult::default_instance_;
  delete stCancelAutoMatchTeamResult_reflection_;
  delete stReqFirstKillInfoByID::default_instance_;
  delete stReqFirstKillInfoByID_reflection_;
  delete stRetFirstKillInfo::default_instance_;
  delete stRetFirstKillInfo_reflection_;
  delete stReqRealTimeSingleMatch::default_instance_;
  delete stReqRealTimeSingleMatch_reflection_;
  delete stRealTimeSingleMatchWait::default_instance_;
  delete stRealTimeSingleMatchWait_reflection_;
  delete stReqCancelRealTimeSingleMatch::default_instance_;
  delete stReqCancelRealTimeSingleMatch_reflection_;
  delete stCancelRealTimeSingleMatchResult::default_instance_;
  delete stCancelRealTimeSingleMatchResult_reflection_;
  delete stReqRealTimeTeamMatch::default_instance_;
  delete stReqRealTimeTeamMatch_reflection_;
  delete stRealTimeTeamMatchWait::default_instance_;
  delete stRealTimeTeamMatchWait_reflection_;
  delete stReqCancelRealTimeTeamMatch::default_instance_;
  delete stReqCancelRealTimeTeamMatch_reflection_;
  delete stCancelRealTimeTeamMatchResult::default_instance_;
  delete stCancelRealTimeTeamMatchResult_reflection_;
  delete stRealTimePKNotOpen::default_instance_;
  delete stRealTimePKNotOpen_reflection_;
}

void protobuf_AddDesc_Team_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_ModID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTeam.proto\022\tTeamProto\032\013ModID.proto\"V\n\017"
    "stReqCreateTeam\022\021\n\tcopyMapID\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\t\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\001\"\277\001\n\022stCreateTeamResult\0225\n\006result\030\001 "
    "\001(\0162%.TeamProto.stCreateTeamResult.eResu"
    "lt\"@\n\007eResult\022\014\n\010eSUCCESS\020\001\022\025\n\021eHAS_JOIN"
    "_IN_TEAM\020\002\022\020\n\014eINNER_ERROR\020\003\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\002\"\262"
    "\003\n\017stSynMemberInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004na"
    "me\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\013\n\003"
    "sex\030\005 \001(\r\022\016\n\006leader\030\006 \001(\010\022\023\n\013battlePower"
    "\030\007 \001(\r\022\013\n\003pos\030\010 \001(\r\022\016\n\006headID\030\t \001(\r\022\016\n\006b"
    "odyID\030\n \001(\r\022\020\n\010weaponID\030\013 \001(\r\022\020\n\010cloackI"
    "D\030\014 \001(\r\022\016\n\006wingID\030\r \001(\r\022\016\n\006shoeID\030\016 \001(\r\022"
    "\023\n\013fashionHair\030\017 \001(\r\022\023\n\013fashionFace\030\020 \001("
    "\r\022\023\n\013fashionBody\030\021 \001(\r\022\025\n\rfashionWeapon\030"
    "\022 \001(\r\022\023\n\013fashionShoe\030\023 \001(\r\022\031\n\021fashionDec"
    "oration\030\024 \001(\r\022\020\n\010effectID\030\025 \001(\r\022\023\n\013wingB"
    "reakLv\030\026 \001(\r\022\025\n\rfashionWingID\030\027 \001(\r\"\216\001\n\n"
    "stRoomInfo\022\021\n\tcopyMapID\030\001 \001(\r\022+\n\007members"
    "\030\002 \003(\0132\032.TeamProto.stSynMemberInfo\022\016\n\006te"
    "amID\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020\003\"R\n\016stReqEnterTeam\022\016"
    "\n\006teamID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\t\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020\004\"\203\002\n\021stEnterTeam"
    "Result\0224\n\006result\030\001 \001(\0162$.TeamProto.stEnt"
    "erTeamResult.eResult\"\205\001\n\007eResult\022\016\n\neTea"
    "m_Full\020\001\022\023\n\017eTeam_Not_Exist\020\002\022\025\n\021eTeam_L"
    "eader_Busy\020\003\022\020\n\014eHas_In_Team\020\004\022\027\n\023eTeam_"
    "Is_Auto_Match\020\005\022\023\n\017ePos_Has_Member\020\006\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\t\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\005\"\200\001\n\017stAddTeamMember\022\013\n\003pos\030\001 \001(\r\022"
    ".\n\nmemberInfo\030\002 \001(\0132\032.TeamProto.stSynMem"
    "berInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\006\"R\n\016stReqLeaveTeam\022\016\n\006c"
    "harID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\007\"U\n\021stNotifyLeaveTe"
    "am\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\010\"Q\n\rstReqFir"
    "eTeam\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\t\"D\n\020stNot"
    "ifyFireTeam\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\n\"\210\001\n\022stInviteJoinIn"
    "Team\022\016\n\006charID\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r\022#\n\005eTy"
    "pe\030\003 \001(\0162\024.TeamProto.eTeamType\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\n"
    "\"\321\002\n\030stInviteJoinInTeamResult\022;\n\006result\030"
    "\001 \001(\0162+.TeamProto.stInviteJoinInTeamResu"
    "lt.eResult\022#\n\005eType\030\002 \001(\0162\024.TeamProto.eT"
    "eamType\"\240\001\n\007eResult\022\020\n\014USER_OFFLINE\020\001\022\016\n"
    "\nNOT_LEADER\020\002\022\014\n\010DISAGREE\020\003\022\022\n\016TEAM_NOT_"
    "EXSIT\020\004\022\025\n\021NOT_IN_APPLY_LIST\020\005\022\t\n\005OTHER\020"
    "\006\022\027\n\023COPYMAP_NUM_USE_OUT\020\007\022\026\n\022TEAM_IS_AU"
    "TO_MATCH\020\010\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020\013\"\254\001\n\017stAskJoinInTeam"
    "\022\016\n\006teamID\030\001 \001(\r\022\022\n\ninviteName\030\002 \001(\t\022\013\n\003"
    "pos\030\003 \001(\r\022#\n\005eType\030\004 \001(\0162\024.TeamProto.eTe"
    "amType\022\021\n\tcopymapID\030\005 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\014\"\253\001\n\021"
    "stReplyJoinInTeam\022\016\n\006teamID\030\001 \001(\r\022\r\n\005agr"
    "ee\030\002 \001(\010\022\013\n\003pos\030\003 \001(\r\022#\n\005eType\030\004 \001(\0162\024.T"
    "eamProto.eTeamType\022\023\n\013timesUseOut\030\005 \001(\010\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\r\"S\n\014stReqEnterLv\022\021\n\tcopyMapID\030\001"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\016\"[\n\027stReqBroadcastInviteCm"
    "d\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\017\"\333\001\n\027stBroadc"
    "astInviteJoinIn\022\016\n\006teamID\030\001 \001(\r\022\016\n\006charI"
    "D\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\013\n\003job\030\004 \001(\r\022\013\n\003se"
    "x\030\005 \001(\r\022\023\n\013battlePower\030\006 \001(\r\022\r\n\005vipLv\030\007 "
    "\001(\r\022\021\n\tcopyMapID\030\010 \001(\r\022\017\n\007photoID\030\t \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\020\"i\n\022stReqAutoMatchTeam\022\016\n\006charI"
    "D\030\001 \001(\r\022\021\n\tcopyMapID\030\002 \001(\r\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\021\"C\n\017"
    "stWaitMatchTeam\"\027\n\nProtoModID\022\t\n\005ModID\020\t"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020\022\"F\n\022stMathcTeam"
    "Success\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\023\"l\n\025stCancelAutoMatchTe"
    "am\022\016\n\006charID\030\001 \001(\r\022\021\n\tcopyMapID\030\002 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\024\"\263\001\n\033stCancelAutoMatchTeamResult\022"
    ">\n\006result\030\001 \001(\0162..TeamProto.stCancelAuto"
    "MatchTeamResult.eResult\"\"\n\007eResult\022\014\n\010eS"
    "UCCESS\020\001\022\t\n\005eFAIL\020\002\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\025\"[\n\026stReqFi"
    "rstKillInfoByID\022\017\n\007levelID\030\001 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020\026\"\307\003\n\022stRetFirstKillInfo\022\021\n\tcopymapID\030\001"
    " \001(\r\022\017\n\007charID1\030\002 \001(\r\022\014\n\004job1\030\003 \001(\r\022\014\n\004s"
    "ex1\030\004 \001(\r\022\r\n\005name1\030\005 \001(\t\022\016\n\006level1\030\006 \001(\r"
    "\022\024\n\014battlePower1\030\007 \001(\r\022\017\n\007charID2\030\010 \001(\r\022"
    "\014\n\004job2\030\t \001(\r\022\014\n\004sex2\030\n \001(\r\022\r\n\005name2\030\013 \001"
    "(\t\022\016\n\006level2\030\014 \001(\r\022\024\n\014battlePower2\030\r \001(\r"
    "\022\017\n\007charID3\030\016 \001(\r\022\014\n\004job3\030\017 \001(\r\022\014\n\004sex3\030"
    "\020 \001(\r\022\r\n\005name3\030\021 \001(\t\022\016\n\006level3\030\022 \001(\r\022\024\n\014"
    "battlePower3\030\023 \001(\r\022\020\n\010killTime\030\024 \001(\r\022\020\n\010"
    "photoID1\030\025 \001(\r\022\020\n\010photoID2\030\026 \001(\r\022\020\n\010phot"
    "oID3\030\027 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020\027\"w\n\030stReqRealTimeSin"
    "gleMatch\022)\n\005eType\030\001 \001(\0162\032.TeamProto.eRea"
    "lTimePKType\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\030\"x\n\031stRealTimeSingl"
    "eMatchWait\022)\n\005eType\030\001 \001(\0162\032.TeamProto.eR"
    "ealTimePKType\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020\031\"}\n\036stReqCancelRe"
    "alTimeSingleMatch\022)\n\005eType\030\001 \001(\0162\032.TeamP"
    "roto.eRealTimePKType\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\032\"f\n!stCanc"
    "elRealTimeSingleMatchResult\022\017\n\007success\030\001"
    " \001(\010\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\033\"\205\001\n\026stReqRealTimeTeamMatc"
    "h\022)\n\005eType\030\001 \001(\0162\032.TeamProto.eRealTimePK"
    "Type\022\016\n\006teamID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\034\"v\n\027stReal"
    "TimeTeamMatchWait\022)\n\005eType\030\001 \001(\0162\032.TeamP"
    "roto.eRealTimePKType\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\035\"\213\001\n\034stReq"
    "CancelRealTimeTeamMatch\022)\n\005eType\030\001 \001(\0162\032"
    ".TeamProto.eRealTimePKType\022\016\n\006teamID\030\002 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\t\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\036\"d\n\037stCancelRealTimeTeamMatc"
    "hResult\022\017\n\007success\030\001 \001(\010\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020\037\"r\n\023st"
    "RealTimePKNotOpen\022)\n\005eType\030\001 \001(\0162\032.TeamP"
    "roto.eRealTimePKType\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\t\"\027\n\nProtoFunID\022\t\n\005FunID\020 *_\n\teTeamT"
    "ype\022\021\n\reCopymap_Team\020\001\022\022\n\016eRealTime_Team"
    "\020\002\022\027\n\023eGuild_Copymap_Team\020\003\022\022\n\016eSpouse_I"
    "nviti\020\004*J\n\017eRealTimePKType\022\033\n\027eRealTimeP"
    "KType_KillAll\020\001\022\032\n\026eRealTimePKType_Finis"
    "h\020\002", 5283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Team.proto", &protobuf_RegisterTypes);
  stReqCreateTeam::default_instance_ = new stReqCreateTeam();
  stCreateTeamResult::default_instance_ = new stCreateTeamResult();
  stSynMemberInfo::default_instance_ = new stSynMemberInfo();
  stRoomInfo::default_instance_ = new stRoomInfo();
  stReqEnterTeam::default_instance_ = new stReqEnterTeam();
  stEnterTeamResult::default_instance_ = new stEnterTeamResult();
  stAddTeamMember::default_instance_ = new stAddTeamMember();
  stReqLeaveTeam::default_instance_ = new stReqLeaveTeam();
  stNotifyLeaveTeam::default_instance_ = new stNotifyLeaveTeam();
  stReqFireTeam::default_instance_ = new stReqFireTeam();
  stNotifyFireTeam::default_instance_ = new stNotifyFireTeam();
  stInviteJoinInTeam::default_instance_ = new stInviteJoinInTeam();
  stInviteJoinInTeamResult::default_instance_ = new stInviteJoinInTeamResult();
  stAskJoinInTeam::default_instance_ = new stAskJoinInTeam();
  stReplyJoinInTeam::default_instance_ = new stReplyJoinInTeam();
  stReqEnterLv::default_instance_ = new stReqEnterLv();
  stReqBroadcastInviteCmd::default_instance_ = new stReqBroadcastInviteCmd();
  stBroadcastInviteJoinIn::default_instance_ = new stBroadcastInviteJoinIn();
  stReqAutoMatchTeam::default_instance_ = new stReqAutoMatchTeam();
  stWaitMatchTeam::default_instance_ = new stWaitMatchTeam();
  stMathcTeamSuccess::default_instance_ = new stMathcTeamSuccess();
  stCancelAutoMatchTeam::default_instance_ = new stCancelAutoMatchTeam();
  stCancelAutoMatchTeamResult::default_instance_ = new stCancelAutoMatchTeamResult();
  stReqFirstKillInfoByID::default_instance_ = new stReqFirstKillInfoByID();
  stRetFirstKillInfo::default_instance_ = new stRetFirstKillInfo();
  stReqRealTimeSingleMatch::default_instance_ = new stReqRealTimeSingleMatch();
  stRealTimeSingleMatchWait::default_instance_ = new stRealTimeSingleMatchWait();
  stReqCancelRealTimeSingleMatch::default_instance_ = new stReqCancelRealTimeSingleMatch();
  stCancelRealTimeSingleMatchResult::default_instance_ = new stCancelRealTimeSingleMatchResult();
  stReqRealTimeTeamMatch::default_instance_ = new stReqRealTimeTeamMatch();
  stRealTimeTeamMatchWait::default_instance_ = new stRealTimeTeamMatchWait();
  stReqCancelRealTimeTeamMatch::default_instance_ = new stReqCancelRealTimeTeamMatch();
  stCancelRealTimeTeamMatchResult::default_instance_ = new stCancelRealTimeTeamMatchResult();
  stRealTimePKNotOpen::default_instance_ = new stRealTimePKNotOpen();
  stReqCreateTeam::default_instance_->InitAsDefaultInstance();
  stCreateTeamResult::default_instance_->InitAsDefaultInstance();
  stSynMemberInfo::default_instance_->InitAsDefaultInstance();
  stRoomInfo::default_instance_->InitAsDefaultInstance();
  stReqEnterTeam::default_instance_->InitAsDefaultInstance();
  stEnterTeamResult::default_instance_->InitAsDefaultInstance();
  stAddTeamMember::default_instance_->InitAsDefaultInstance();
  stReqLeaveTeam::default_instance_->InitAsDefaultInstance();
  stNotifyLeaveTeam::default_instance_->InitAsDefaultInstance();
  stReqFireTeam::default_instance_->InitAsDefaultInstance();
  stNotifyFireTeam::default_instance_->InitAsDefaultInstance();
  stInviteJoinInTeam::default_instance_->InitAsDefaultInstance();
  stInviteJoinInTeamResult::default_instance_->InitAsDefaultInstance();
  stAskJoinInTeam::default_instance_->InitAsDefaultInstance();
  stReplyJoinInTeam::default_instance_->InitAsDefaultInstance();
  stReqEnterLv::default_instance_->InitAsDefaultInstance();
  stReqBroadcastInviteCmd::default_instance_->InitAsDefaultInstance();
  stBroadcastInviteJoinIn::default_instance_->InitAsDefaultInstance();
  stReqAutoMatchTeam::default_instance_->InitAsDefaultInstance();
  stWaitMatchTeam::default_instance_->InitAsDefaultInstance();
  stMathcTeamSuccess::default_instance_->InitAsDefaultInstance();
  stCancelAutoMatchTeam::default_instance_->InitAsDefaultInstance();
  stCancelAutoMatchTeamResult::default_instance_->InitAsDefaultInstance();
  stReqFirstKillInfoByID::default_instance_->InitAsDefaultInstance();
  stRetFirstKillInfo::default_instance_->InitAsDefaultInstance();
  stReqRealTimeSingleMatch::default_instance_->InitAsDefaultInstance();
  stRealTimeSingleMatchWait::default_instance_->InitAsDefaultInstance();
  stReqCancelRealTimeSingleMatch::default_instance_->InitAsDefaultInstance();
  stCancelRealTimeSingleMatchResult::default_instance_->InitAsDefaultInstance();
  stReqRealTimeTeamMatch::default_instance_->InitAsDefaultInstance();
  stRealTimeTeamMatchWait::default_instance_->InitAsDefaultInstance();
  stReqCancelRealTimeTeamMatch::default_instance_->InitAsDefaultInstance();
  stCancelRealTimeTeamMatchResult::default_instance_->InitAsDefaultInstance();
  stRealTimePKNotOpen::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Team_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Team_2eproto {
  StaticDescriptorInitializer_Team_2eproto() {
    protobuf_AddDesc_Team_2eproto();
  }
} static_descriptor_initializer_Team_2eproto_;
const ::google::protobuf::EnumDescriptor* eTeamType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eTeamType_descriptor_;
}
bool eTeamType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRealTimePKType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRealTimePKType_descriptor_;
}
bool eRealTimePKType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCreateTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCreateTeam_ProtoModID_descriptor_;
}
bool stReqCreateTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCreateTeam_ProtoModID stReqCreateTeam::ModID;
const stReqCreateTeam_ProtoModID stReqCreateTeam::ProtoModID_MIN;
const stReqCreateTeam_ProtoModID stReqCreateTeam::ProtoModID_MAX;
const int stReqCreateTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCreateTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCreateTeam_ProtoFunID_descriptor_;
}
bool stReqCreateTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCreateTeam_ProtoFunID stReqCreateTeam::FunID;
const stReqCreateTeam_ProtoFunID stReqCreateTeam::ProtoFunID_MIN;
const stReqCreateTeam_ProtoFunID stReqCreateTeam::ProtoFunID_MAX;
const int stReqCreateTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCreateTeam::kCopyMapIDFieldNumber;
#endif  // !_MSC_VER

stReqCreateTeam::stReqCreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCreateTeam::InitAsDefaultInstance() {
}

stReqCreateTeam::stReqCreateTeam(const stReqCreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCreateTeam::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCreateTeam::~stReqCreateTeam() {
  SharedDtor();
}

void stReqCreateTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCreateTeam_descriptor_;
}

const stReqCreateTeam& stReqCreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqCreateTeam* stReqCreateTeam::default_instance_ = NULL;

stReqCreateTeam* stReqCreateTeam::New() const {
  return new stReqCreateTeam;
}

void stReqCreateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copyMapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copyMapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copyMapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copyMapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCreateTeam::MergeFrom(const stReqCreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCreateTeam::CopyFrom(const stReqCreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCreateTeam::IsInitialized() const {

  return true;
}

void stReqCreateTeam::Swap(stReqCreateTeam* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCreateTeam_descriptor_;
  metadata.reflection = stReqCreateTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCreateTeamResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateTeamResult_eResult_descriptor_;
}
bool stCreateTeamResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateTeamResult_eResult stCreateTeamResult::eSUCCESS;
const stCreateTeamResult_eResult stCreateTeamResult::eHAS_JOIN_IN_TEAM;
const stCreateTeamResult_eResult stCreateTeamResult::eINNER_ERROR;
const stCreateTeamResult_eResult stCreateTeamResult::eResult_MIN;
const stCreateTeamResult_eResult stCreateTeamResult::eResult_MAX;
const int stCreateTeamResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCreateTeamResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateTeamResult_ProtoModID_descriptor_;
}
bool stCreateTeamResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateTeamResult_ProtoModID stCreateTeamResult::ModID;
const stCreateTeamResult_ProtoModID stCreateTeamResult::ProtoModID_MIN;
const stCreateTeamResult_ProtoModID stCreateTeamResult::ProtoModID_MAX;
const int stCreateTeamResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCreateTeamResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateTeamResult_ProtoFunID_descriptor_;
}
bool stCreateTeamResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateTeamResult_ProtoFunID stCreateTeamResult::FunID;
const stCreateTeamResult_ProtoFunID stCreateTeamResult::ProtoFunID_MIN;
const stCreateTeamResult_ProtoFunID stCreateTeamResult::ProtoFunID_MAX;
const int stCreateTeamResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCreateTeamResult::kResultFieldNumber;
#endif  // !_MSC_VER

stCreateTeamResult::stCreateTeamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCreateTeamResult::InitAsDefaultInstance() {
}

stCreateTeamResult::stCreateTeamResult(const stCreateTeamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCreateTeamResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCreateTeamResult::~stCreateTeamResult() {
  SharedDtor();
}

void stCreateTeamResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCreateTeamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCreateTeamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateTeamResult_descriptor_;
}

const stCreateTeamResult& stCreateTeamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stCreateTeamResult* stCreateTeamResult::default_instance_ = NULL;

stCreateTeamResult* stCreateTeamResult::New() const {
  return new stCreateTeamResult;
}

void stCreateTeamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCreateTeamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.stCreateTeamResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::stCreateTeamResult_eResult_IsValid(value)) {
            set_result(static_cast< ::TeamProto::stCreateTeamResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCreateTeamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.stCreateTeamResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCreateTeamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.stCreateTeamResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCreateTeamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.stCreateTeamResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCreateTeamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCreateTeamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCreateTeamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCreateTeamResult::MergeFrom(const stCreateTeamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCreateTeamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCreateTeamResult::CopyFrom(const stCreateTeamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCreateTeamResult::IsInitialized() const {

  return true;
}

void stCreateTeamResult::Swap(stCreateTeamResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCreateTeamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCreateTeamResult_descriptor_;
  metadata.reflection = stCreateTeamResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynMemberInfo::kCharIDFieldNumber;
const int stSynMemberInfo::kNameFieldNumber;
const int stSynMemberInfo::kLevelFieldNumber;
const int stSynMemberInfo::kJobFieldNumber;
const int stSynMemberInfo::kSexFieldNumber;
const int stSynMemberInfo::kLeaderFieldNumber;
const int stSynMemberInfo::kBattlePowerFieldNumber;
const int stSynMemberInfo::kPosFieldNumber;
const int stSynMemberInfo::kHeadIDFieldNumber;
const int stSynMemberInfo::kBodyIDFieldNumber;
const int stSynMemberInfo::kWeaponIDFieldNumber;
const int stSynMemberInfo::kCloackIDFieldNumber;
const int stSynMemberInfo::kWingIDFieldNumber;
const int stSynMemberInfo::kShoeIDFieldNumber;
const int stSynMemberInfo::kFashionHairFieldNumber;
const int stSynMemberInfo::kFashionFaceFieldNumber;
const int stSynMemberInfo::kFashionBodyFieldNumber;
const int stSynMemberInfo::kFashionWeaponFieldNumber;
const int stSynMemberInfo::kFashionShoeFieldNumber;
const int stSynMemberInfo::kFashionDecorationFieldNumber;
const int stSynMemberInfo::kEffectIDFieldNumber;
const int stSynMemberInfo::kWingBreakLvFieldNumber;
const int stSynMemberInfo::kFashionWingIDFieldNumber;
#endif  // !_MSC_VER

stSynMemberInfo::stSynMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMemberInfo::InitAsDefaultInstance() {
}

stSynMemberInfo::stSynMemberInfo(const stSynMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  leader_ = false;
  battlepower_ = 0u;
  pos_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  fashionwingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMemberInfo::~stSynMemberInfo() {
  SharedDtor();
}

void stSynMemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberInfo_descriptor_;
}

const stSynMemberInfo& stSynMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stSynMemberInfo* stSynMemberInfo::default_instance_ = NULL;

stSynMemberInfo* stSynMemberInfo::New() const {
  return new stSynMemberInfo;
}

void stSynMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    leader_ = false;
    battlepower_ = 0u;
    pos_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    headid_ = 0u;
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionbody_ = 0u;
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    fashionwingid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leader;
        break;
      }

      // optional bool leader = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_fashionWingID;
        break;
      }

      // optional uint32 fashionWingID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionwingid_)));
          set_has_fashionwingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional bool leader = 6;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->leader(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional uint32 pos = 8;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->pos(), output);
  }

  // optional uint32 headID = 9;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->headid(), output);
  }

  // optional uint32 bodyID = 10;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->bodyid(), output);
  }

  // optional uint32 weaponID = 11;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->weaponid(), output);
  }

  // optional uint32 cloackID = 12;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->cloackid(), output);
  }

  // optional uint32 wingID = 13;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->wingid(), output);
  }

  // optional uint32 shoeID = 14;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 15;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 16;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 17;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 18;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 19;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 20;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 21;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 22;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->wingbreaklv(), output);
  }

  // optional uint32 fashionWingID = 23;
  if (has_fashionwingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->fashionwingid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional bool leader = 6;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->leader(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional uint32 pos = 8;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->pos(), target);
  }

  // optional uint32 headID = 9;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->headid(), target);
  }

  // optional uint32 bodyID = 10;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->bodyid(), target);
  }

  // optional uint32 weaponID = 11;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->weaponid(), target);
  }

  // optional uint32 cloackID = 12;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->cloackid(), target);
  }

  // optional uint32 wingID = 13;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->wingid(), target);
  }

  // optional uint32 shoeID = 14;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 15;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 16;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 17;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 18;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 19;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 20;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 21;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 22;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->wingbreaklv(), target);
  }

  // optional uint32 fashionWingID = 23;
  if (has_fashionwingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->fashionwingid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional bool leader = 6;
    if (has_leader()) {
      total_size += 1 + 1;
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 pos = 8;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 headID = 9;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 bodyID = 10;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 11;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 12;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 13;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 14;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 15;
    if (has_fashionhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 16;
    if (has_fashionface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionBody = 17;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

    // optional uint32 fashionWeapon = 18;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 19;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 20;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 21;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 22;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 fashionWingID = 23;
    if (has_fashionwingid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionwingid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMemberInfo::MergeFrom(const stSynMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_fashionwingid()) {
      set_fashionwingid(from.fashionwingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMemberInfo::CopyFrom(const stSynMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMemberInfo::IsInitialized() const {

  return true;
}

void stSynMemberInfo::Swap(stSynMemberInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(leader_, other->leader_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(pos_, other->pos_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(fashionwingid_, other->fashionwingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMemberInfo_descriptor_;
  metadata.reflection = stSynMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRoomInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoomInfo_ProtoModID_descriptor_;
}
bool stRoomInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRoomInfo_ProtoModID stRoomInfo::ModID;
const stRoomInfo_ProtoModID stRoomInfo::ProtoModID_MIN;
const stRoomInfo_ProtoModID stRoomInfo::ProtoModID_MAX;
const int stRoomInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRoomInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoomInfo_ProtoFunID_descriptor_;
}
bool stRoomInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRoomInfo_ProtoFunID stRoomInfo::FunID;
const stRoomInfo_ProtoFunID stRoomInfo::ProtoFunID_MIN;
const stRoomInfo_ProtoFunID stRoomInfo::ProtoFunID_MAX;
const int stRoomInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRoomInfo::kCopyMapIDFieldNumber;
const int stRoomInfo::kMembersFieldNumber;
const int stRoomInfo::kTeamIDFieldNumber;
#endif  // !_MSC_VER

stRoomInfo::stRoomInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRoomInfo::InitAsDefaultInstance() {
}

stRoomInfo::stRoomInfo(const stRoomInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRoomInfo::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRoomInfo::~stRoomInfo() {
  SharedDtor();
}

void stRoomInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRoomInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoomInfo_descriptor_;
}

const stRoomInfo& stRoomInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stRoomInfo* stRoomInfo::default_instance_ = NULL;

stRoomInfo* stRoomInfo::New() const {
  return new stRoomInfo;
}

void stRoomInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    teamid_ = 0u;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copyMapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .TeamProto.stSynMemberInfo members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectTag(24)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copyMapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  // repeated .TeamProto.stSynMemberInfo members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  // optional uint32 teamID = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRoomInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copyMapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  // repeated .TeamProto.stSynMemberInfo members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  // optional uint32 teamID = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRoomInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copyMapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional uint32 teamID = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  // repeated .TeamProto.stSynMemberInfo members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRoomInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRoomInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRoomInfo::MergeFrom(const stRoomInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRoomInfo::CopyFrom(const stRoomInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRoomInfo::IsInitialized() const {

  return true;
}

void stRoomInfo::Swap(stRoomInfo* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    members_.Swap(&other->members_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRoomInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRoomInfo_descriptor_;
  metadata.reflection = stRoomInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEnterTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterTeam_ProtoModID_descriptor_;
}
bool stReqEnterTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterTeam_ProtoModID stReqEnterTeam::ModID;
const stReqEnterTeam_ProtoModID stReqEnterTeam::ProtoModID_MIN;
const stReqEnterTeam_ProtoModID stReqEnterTeam::ProtoModID_MAX;
const int stReqEnterTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEnterTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterTeam_ProtoFunID_descriptor_;
}
bool stReqEnterTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterTeam_ProtoFunID stReqEnterTeam::FunID;
const stReqEnterTeam_ProtoFunID stReqEnterTeam::ProtoFunID_MIN;
const stReqEnterTeam_ProtoFunID stReqEnterTeam::ProtoFunID_MAX;
const int stReqEnterTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEnterTeam::kTeamIDFieldNumber;
#endif  // !_MSC_VER

stReqEnterTeam::stReqEnterTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEnterTeam::InitAsDefaultInstance() {
}

stReqEnterTeam::stReqEnterTeam(const stReqEnterTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEnterTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEnterTeam::~stReqEnterTeam() {
  SharedDtor();
}

void stReqEnterTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEnterTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEnterTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterTeam_descriptor_;
}

const stReqEnterTeam& stReqEnterTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqEnterTeam* stReqEnterTeam::default_instance_ = NULL;

stReqEnterTeam* stReqEnterTeam::New() const {
  return new stReqEnterTeam;
}

void stReqEnterTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEnterTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEnterTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEnterTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEnterTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamID = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEnterTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEnterTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEnterTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEnterTeam::MergeFrom(const stReqEnterTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEnterTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEnterTeam::CopyFrom(const stReqEnterTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEnterTeam::IsInitialized() const {

  return true;
}

void stReqEnterTeam::Swap(stReqEnterTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEnterTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEnterTeam_descriptor_;
  metadata.reflection = stReqEnterTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEnterTeamResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterTeamResult_eResult_descriptor_;
}
bool stEnterTeamResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterTeamResult_eResult stEnterTeamResult::eTeam_Full;
const stEnterTeamResult_eResult stEnterTeamResult::eTeam_Not_Exist;
const stEnterTeamResult_eResult stEnterTeamResult::eTeam_Leader_Busy;
const stEnterTeamResult_eResult stEnterTeamResult::eHas_In_Team;
const stEnterTeamResult_eResult stEnterTeamResult::eTeam_Is_Auto_Match;
const stEnterTeamResult_eResult stEnterTeamResult::ePos_Has_Member;
const stEnterTeamResult_eResult stEnterTeamResult::eResult_MIN;
const stEnterTeamResult_eResult stEnterTeamResult::eResult_MAX;
const int stEnterTeamResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterTeamResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterTeamResult_ProtoModID_descriptor_;
}
bool stEnterTeamResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterTeamResult_ProtoModID stEnterTeamResult::ModID;
const stEnterTeamResult_ProtoModID stEnterTeamResult::ProtoModID_MIN;
const stEnterTeamResult_ProtoModID stEnterTeamResult::ProtoModID_MAX;
const int stEnterTeamResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterTeamResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterTeamResult_ProtoFunID_descriptor_;
}
bool stEnterTeamResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterTeamResult_ProtoFunID stEnterTeamResult::FunID;
const stEnterTeamResult_ProtoFunID stEnterTeamResult::ProtoFunID_MIN;
const stEnterTeamResult_ProtoFunID stEnterTeamResult::ProtoFunID_MAX;
const int stEnterTeamResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEnterTeamResult::kResultFieldNumber;
#endif  // !_MSC_VER

stEnterTeamResult::stEnterTeamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterTeamResult::InitAsDefaultInstance() {
}

stEnterTeamResult::stEnterTeamResult(const stEnterTeamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterTeamResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterTeamResult::~stEnterTeamResult() {
  SharedDtor();
}

void stEnterTeamResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEnterTeamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterTeamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterTeamResult_descriptor_;
}

const stEnterTeamResult& stEnterTeamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stEnterTeamResult* stEnterTeamResult::default_instance_ = NULL;

stEnterTeamResult* stEnterTeamResult::New() const {
  return new stEnterTeamResult;
}

void stEnterTeamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterTeamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.stEnterTeamResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::stEnterTeamResult_eResult_IsValid(value)) {
            set_result(static_cast< ::TeamProto::stEnterTeamResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterTeamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.stEnterTeamResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterTeamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.stEnterTeamResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterTeamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.stEnterTeamResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterTeamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterTeamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterTeamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterTeamResult::MergeFrom(const stEnterTeamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterTeamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterTeamResult::CopyFrom(const stEnterTeamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterTeamResult::IsInitialized() const {

  return true;
}

void stEnterTeamResult::Swap(stEnterTeamResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterTeamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterTeamResult_descriptor_;
  metadata.reflection = stEnterTeamResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddTeamMember_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddTeamMember_ProtoModID_descriptor_;
}
bool stAddTeamMember_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddTeamMember_ProtoModID stAddTeamMember::ModID;
const stAddTeamMember_ProtoModID stAddTeamMember::ProtoModID_MIN;
const stAddTeamMember_ProtoModID stAddTeamMember::ProtoModID_MAX;
const int stAddTeamMember::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddTeamMember_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddTeamMember_ProtoFunID_descriptor_;
}
bool stAddTeamMember_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddTeamMember_ProtoFunID stAddTeamMember::FunID;
const stAddTeamMember_ProtoFunID stAddTeamMember::ProtoFunID_MIN;
const stAddTeamMember_ProtoFunID stAddTeamMember::ProtoFunID_MAX;
const int stAddTeamMember::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddTeamMember::kPosFieldNumber;
const int stAddTeamMember::kMemberInfoFieldNumber;
#endif  // !_MSC_VER

stAddTeamMember::stAddTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddTeamMember::InitAsDefaultInstance() {
  memberinfo_ = const_cast< ::TeamProto::stSynMemberInfo*>(&::TeamProto::stSynMemberInfo::default_instance());
}

stAddTeamMember::stAddTeamMember(const stAddTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddTeamMember::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  memberinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddTeamMember::~stAddTeamMember() {
  SharedDtor();
}

void stAddTeamMember::SharedDtor() {
  if (this != default_instance_) {
    delete memberinfo_;
  }
}

void stAddTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddTeamMember_descriptor_;
}

const stAddTeamMember& stAddTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stAddTeamMember* stAddTeamMember::default_instance_ = NULL;

stAddTeamMember* stAddTeamMember::New() const {
  return new stAddTeamMember;
}

void stAddTeamMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    if (has_memberinfo()) {
      if (memberinfo_ != NULL) memberinfo_->::TeamProto::stSynMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberInfo;
        break;
      }

      // optional .TeamProto.stSynMemberInfo memberInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memberinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional .TeamProto.stSynMemberInfo memberInfo = 2;
  if (has_memberinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional .TeamProto.stSynMemberInfo memberInfo = 2;
  if (has_memberinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional .TeamProto.stSynMemberInfo memberInfo = 2;
    if (has_memberinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->memberinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddTeamMember::MergeFrom(const stAddTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_memberinfo()) {
      mutable_memberinfo()->::TeamProto::stSynMemberInfo::MergeFrom(from.memberinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddTeamMember::CopyFrom(const stAddTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddTeamMember::IsInitialized() const {

  return true;
}

void stAddTeamMember::Swap(stAddTeamMember* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(memberinfo_, other->memberinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddTeamMember_descriptor_;
  metadata.reflection = stAddTeamMember_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLeaveTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveTeam_ProtoModID_descriptor_;
}
bool stReqLeaveTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLeaveTeam_ProtoModID stReqLeaveTeam::ModID;
const stReqLeaveTeam_ProtoModID stReqLeaveTeam::ProtoModID_MIN;
const stReqLeaveTeam_ProtoModID stReqLeaveTeam::ProtoModID_MAX;
const int stReqLeaveTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLeaveTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveTeam_ProtoFunID_descriptor_;
}
bool stReqLeaveTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLeaveTeam_ProtoFunID stReqLeaveTeam::FunID;
const stReqLeaveTeam_ProtoFunID stReqLeaveTeam::ProtoFunID_MIN;
const stReqLeaveTeam_ProtoFunID stReqLeaveTeam::ProtoFunID_MAX;
const int stReqLeaveTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLeaveTeam::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqLeaveTeam::stReqLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLeaveTeam::InitAsDefaultInstance() {
}

stReqLeaveTeam::stReqLeaveTeam(const stReqLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLeaveTeam::~stReqLeaveTeam() {
  SharedDtor();
}

void stReqLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveTeam_descriptor_;
}

const stReqLeaveTeam& stReqLeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqLeaveTeam* stReqLeaveTeam::default_instance_ = NULL;

stReqLeaveTeam* stReqLeaveTeam::New() const {
  return new stReqLeaveTeam;
}

void stReqLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLeaveTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLeaveTeam::MergeFrom(const stReqLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLeaveTeam::CopyFrom(const stReqLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLeaveTeam::IsInitialized() const {

  return true;
}

void stReqLeaveTeam::Swap(stReqLeaveTeam* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLeaveTeam_descriptor_;
  metadata.reflection = stReqLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyLeaveTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLeaveTeam_ProtoModID_descriptor_;
}
bool stNotifyLeaveTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyLeaveTeam_ProtoModID stNotifyLeaveTeam::ModID;
const stNotifyLeaveTeam_ProtoModID stNotifyLeaveTeam::ProtoModID_MIN;
const stNotifyLeaveTeam_ProtoModID stNotifyLeaveTeam::ProtoModID_MAX;
const int stNotifyLeaveTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyLeaveTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLeaveTeam_ProtoFunID_descriptor_;
}
bool stNotifyLeaveTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyLeaveTeam_ProtoFunID stNotifyLeaveTeam::FunID;
const stNotifyLeaveTeam_ProtoFunID stNotifyLeaveTeam::ProtoFunID_MIN;
const stNotifyLeaveTeam_ProtoFunID stNotifyLeaveTeam::ProtoFunID_MAX;
const int stNotifyLeaveTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyLeaveTeam::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNotifyLeaveTeam::stNotifyLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyLeaveTeam::InitAsDefaultInstance() {
}

stNotifyLeaveTeam::stNotifyLeaveTeam(const stNotifyLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyLeaveTeam::~stNotifyLeaveTeam() {
  SharedDtor();
}

void stNotifyLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLeaveTeam_descriptor_;
}

const stNotifyLeaveTeam& stNotifyLeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stNotifyLeaveTeam* stNotifyLeaveTeam::default_instance_ = NULL;

stNotifyLeaveTeam* stNotifyLeaveTeam::New() const {
  return new stNotifyLeaveTeam;
}

void stNotifyLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyLeaveTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyLeaveTeam::MergeFrom(const stNotifyLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyLeaveTeam::CopyFrom(const stNotifyLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyLeaveTeam::IsInitialized() const {

  return true;
}

void stNotifyLeaveTeam::Swap(stNotifyLeaveTeam* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyLeaveTeam_descriptor_;
  metadata.reflection = stNotifyLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqFireTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFireTeam_ProtoModID_descriptor_;
}
bool stReqFireTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFireTeam_ProtoModID stReqFireTeam::ModID;
const stReqFireTeam_ProtoModID stReqFireTeam::ProtoModID_MIN;
const stReqFireTeam_ProtoModID stReqFireTeam::ProtoModID_MAX;
const int stReqFireTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqFireTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFireTeam_ProtoFunID_descriptor_;
}
bool stReqFireTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFireTeam_ProtoFunID stReqFireTeam::FunID;
const stReqFireTeam_ProtoFunID stReqFireTeam::ProtoFunID_MIN;
const stReqFireTeam_ProtoFunID stReqFireTeam::ProtoFunID_MAX;
const int stReqFireTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqFireTeam::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqFireTeam::stReqFireTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqFireTeam::InitAsDefaultInstance() {
}

stReqFireTeam::stReqFireTeam(const stReqFireTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqFireTeam::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqFireTeam::~stReqFireTeam() {
  SharedDtor();
}

void stReqFireTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqFireTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqFireTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFireTeam_descriptor_;
}

const stReqFireTeam& stReqFireTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqFireTeam* stReqFireTeam::default_instance_ = NULL;

stReqFireTeam* stReqFireTeam::New() const {
  return new stReqFireTeam;
}

void stReqFireTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqFireTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqFireTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqFireTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqFireTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqFireTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqFireTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqFireTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqFireTeam::MergeFrom(const stReqFireTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqFireTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqFireTeam::CopyFrom(const stReqFireTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqFireTeam::IsInitialized() const {

  return true;
}

void stReqFireTeam::Swap(stReqFireTeam* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqFireTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqFireTeam_descriptor_;
  metadata.reflection = stReqFireTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyFireTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFireTeam_ProtoModID_descriptor_;
}
bool stNotifyFireTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyFireTeam_ProtoModID stNotifyFireTeam::ModID;
const stNotifyFireTeam_ProtoModID stNotifyFireTeam::ProtoModID_MIN;
const stNotifyFireTeam_ProtoModID stNotifyFireTeam::ProtoModID_MAX;
const int stNotifyFireTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyFireTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFireTeam_ProtoFunID_descriptor_;
}
bool stNotifyFireTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyFireTeam_ProtoFunID stNotifyFireTeam::FunID;
const stNotifyFireTeam_ProtoFunID stNotifyFireTeam::ProtoFunID_MIN;
const stNotifyFireTeam_ProtoFunID stNotifyFireTeam::ProtoFunID_MAX;
const int stNotifyFireTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

stNotifyFireTeam::stNotifyFireTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyFireTeam::InitAsDefaultInstance() {
}

stNotifyFireTeam::stNotifyFireTeam(const stNotifyFireTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyFireTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyFireTeam::~stNotifyFireTeam() {
  SharedDtor();
}

void stNotifyFireTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyFireTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyFireTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFireTeam_descriptor_;
}

const stNotifyFireTeam& stNotifyFireTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stNotifyFireTeam* stNotifyFireTeam::default_instance_ = NULL;

stNotifyFireTeam* stNotifyFireTeam::New() const {
  return new stNotifyFireTeam;
}

void stNotifyFireTeam::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyFireTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void stNotifyFireTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyFireTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyFireTeam::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyFireTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyFireTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyFireTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyFireTeam::MergeFrom(const stNotifyFireTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyFireTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyFireTeam::CopyFrom(const stNotifyFireTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyFireTeam::IsInitialized() const {

  return true;
}

void stNotifyFireTeam::Swap(stNotifyFireTeam* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyFireTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyFireTeam_descriptor_;
  metadata.reflection = stNotifyFireTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInviteJoinInTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteJoinInTeam_ProtoModID_descriptor_;
}
bool stInviteJoinInTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteJoinInTeam_ProtoModID stInviteJoinInTeam::ModID;
const stInviteJoinInTeam_ProtoModID stInviteJoinInTeam::ProtoModID_MIN;
const stInviteJoinInTeam_ProtoModID stInviteJoinInTeam::ProtoModID_MAX;
const int stInviteJoinInTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInviteJoinInTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteJoinInTeam_ProtoFunID_descriptor_;
}
bool stInviteJoinInTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteJoinInTeam_ProtoFunID stInviteJoinInTeam::FunID;
const stInviteJoinInTeam_ProtoFunID stInviteJoinInTeam::ProtoFunID_MIN;
const stInviteJoinInTeam_ProtoFunID stInviteJoinInTeam::ProtoFunID_MAX;
const int stInviteJoinInTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInviteJoinInTeam::kCharIDFieldNumber;
const int stInviteJoinInTeam::kPosFieldNumber;
const int stInviteJoinInTeam::kETypeFieldNumber;
#endif  // !_MSC_VER

stInviteJoinInTeam::stInviteJoinInTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInviteJoinInTeam::InitAsDefaultInstance() {
}

stInviteJoinInTeam::stInviteJoinInTeam(const stInviteJoinInTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInviteJoinInTeam::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  pos_ = 0u;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInviteJoinInTeam::~stInviteJoinInTeam() {
  SharedDtor();
}

void stInviteJoinInTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInviteJoinInTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInviteJoinInTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteJoinInTeam_descriptor_;
}

const stInviteJoinInTeam& stInviteJoinInTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stInviteJoinInTeam* stInviteJoinInTeam::default_instance_ = NULL;

stInviteJoinInTeam* stInviteJoinInTeam::New() const {
  return new stInviteJoinInTeam;
}

void stInviteJoinInTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    pos_ = 0u;
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInviteJoinInTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eType;
        break;
      }

      // optional .TeamProto.eTeamType eType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eTeamType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInviteJoinInTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional .TeamProto.eTeamType eType = 3;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInviteJoinInTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional .TeamProto.eTeamType eType = 3;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInviteJoinInTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional .TeamProto.eTeamType eType = 3;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInviteJoinInTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInviteJoinInTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInviteJoinInTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInviteJoinInTeam::MergeFrom(const stInviteJoinInTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInviteJoinInTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInviteJoinInTeam::CopyFrom(const stInviteJoinInTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInviteJoinInTeam::IsInitialized() const {

  return true;
}

void stInviteJoinInTeam::Swap(stInviteJoinInTeam* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(pos_, other->pos_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInviteJoinInTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInviteJoinInTeam_descriptor_;
  metadata.reflection = stInviteJoinInTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInviteJoinInTeamResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteJoinInTeamResult_eResult_descriptor_;
}
bool stInviteJoinInTeamResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::USER_OFFLINE;
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::NOT_LEADER;
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::DISAGREE;
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::TEAM_NOT_EXSIT;
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::NOT_IN_APPLY_LIST;
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::OTHER;
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::COPYMAP_NUM_USE_OUT;
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::TEAM_IS_AUTO_MATCH;
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::eResult_MIN;
const stInviteJoinInTeamResult_eResult stInviteJoinInTeamResult::eResult_MAX;
const int stInviteJoinInTeamResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInviteJoinInTeamResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteJoinInTeamResult_ProtoModID_descriptor_;
}
bool stInviteJoinInTeamResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteJoinInTeamResult_ProtoModID stInviteJoinInTeamResult::ModID;
const stInviteJoinInTeamResult_ProtoModID stInviteJoinInTeamResult::ProtoModID_MIN;
const stInviteJoinInTeamResult_ProtoModID stInviteJoinInTeamResult::ProtoModID_MAX;
const int stInviteJoinInTeamResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInviteJoinInTeamResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteJoinInTeamResult_ProtoFunID_descriptor_;
}
bool stInviteJoinInTeamResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteJoinInTeamResult_ProtoFunID stInviteJoinInTeamResult::FunID;
const stInviteJoinInTeamResult_ProtoFunID stInviteJoinInTeamResult::ProtoFunID_MIN;
const stInviteJoinInTeamResult_ProtoFunID stInviteJoinInTeamResult::ProtoFunID_MAX;
const int stInviteJoinInTeamResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInviteJoinInTeamResult::kResultFieldNumber;
const int stInviteJoinInTeamResult::kETypeFieldNumber;
#endif  // !_MSC_VER

stInviteJoinInTeamResult::stInviteJoinInTeamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInviteJoinInTeamResult::InitAsDefaultInstance() {
}

stInviteJoinInTeamResult::stInviteJoinInTeamResult(const stInviteJoinInTeamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInviteJoinInTeamResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInviteJoinInTeamResult::~stInviteJoinInTeamResult() {
  SharedDtor();
}

void stInviteJoinInTeamResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInviteJoinInTeamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInviteJoinInTeamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteJoinInTeamResult_descriptor_;
}

const stInviteJoinInTeamResult& stInviteJoinInTeamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stInviteJoinInTeamResult* stInviteJoinInTeamResult::default_instance_ = NULL;

stInviteJoinInTeamResult* stInviteJoinInTeamResult::New() const {
  return new stInviteJoinInTeamResult;
}

void stInviteJoinInTeamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInviteJoinInTeamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.stInviteJoinInTeamResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::stInviteJoinInTeamResult_eResult_IsValid(value)) {
            set_result(static_cast< ::TeamProto::stInviteJoinInTeamResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eType;
        break;
      }

      // optional .TeamProto.eTeamType eType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eTeamType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInviteJoinInTeamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.stInviteJoinInTeamResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional .TeamProto.eTeamType eType = 2;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInviteJoinInTeamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.stInviteJoinInTeamResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional .TeamProto.eTeamType eType = 2;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInviteJoinInTeamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.stInviteJoinInTeamResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional .TeamProto.eTeamType eType = 2;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInviteJoinInTeamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInviteJoinInTeamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInviteJoinInTeamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInviteJoinInTeamResult::MergeFrom(const stInviteJoinInTeamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInviteJoinInTeamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInviteJoinInTeamResult::CopyFrom(const stInviteJoinInTeamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInviteJoinInTeamResult::IsInitialized() const {

  return true;
}

void stInviteJoinInTeamResult::Swap(stInviteJoinInTeamResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInviteJoinInTeamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInviteJoinInTeamResult_descriptor_;
  metadata.reflection = stInviteJoinInTeamResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAskJoinInTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskJoinInTeam_ProtoModID_descriptor_;
}
bool stAskJoinInTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAskJoinInTeam_ProtoModID stAskJoinInTeam::ModID;
const stAskJoinInTeam_ProtoModID stAskJoinInTeam::ProtoModID_MIN;
const stAskJoinInTeam_ProtoModID stAskJoinInTeam::ProtoModID_MAX;
const int stAskJoinInTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAskJoinInTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskJoinInTeam_ProtoFunID_descriptor_;
}
bool stAskJoinInTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAskJoinInTeam_ProtoFunID stAskJoinInTeam::FunID;
const stAskJoinInTeam_ProtoFunID stAskJoinInTeam::ProtoFunID_MIN;
const stAskJoinInTeam_ProtoFunID stAskJoinInTeam::ProtoFunID_MAX;
const int stAskJoinInTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAskJoinInTeam::kTeamIDFieldNumber;
const int stAskJoinInTeam::kInviteNameFieldNumber;
const int stAskJoinInTeam::kPosFieldNumber;
const int stAskJoinInTeam::kETypeFieldNumber;
const int stAskJoinInTeam::kCopymapIDFieldNumber;
#endif  // !_MSC_VER

stAskJoinInTeam::stAskJoinInTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAskJoinInTeam::InitAsDefaultInstance() {
}

stAskJoinInTeam::stAskJoinInTeam(const stAskJoinInTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAskJoinInTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  invitename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = 0u;
  etype_ = 1;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAskJoinInTeam::~stAskJoinInTeam() {
  SharedDtor();
}

void stAskJoinInTeam::SharedDtor() {
  if (invitename_ != &::google::protobuf::internal::kEmptyString) {
    delete invitename_;
  }
  if (this != default_instance_) {
  }
}

void stAskJoinInTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAskJoinInTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAskJoinInTeam_descriptor_;
}

const stAskJoinInTeam& stAskJoinInTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stAskJoinInTeam* stAskJoinInTeam::default_instance_ = NULL;

stAskJoinInTeam* stAskJoinInTeam::New() const {
  return new stAskJoinInTeam;
}

void stAskJoinInTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    if (has_invitename()) {
      if (invitename_ != &::google::protobuf::internal::kEmptyString) {
        invitename_->clear();
      }
    }
    pos_ = 0u;
    etype_ = 1;
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAskJoinInTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_inviteName;
        break;
      }

      // optional string inviteName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inviteName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_invitename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->invitename().data(), this->invitename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eType;
        break;
      }

      // optional .TeamProto.eTeamType eType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eTeamType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_copymapID;
        break;
      }

      // optional uint32 copymapID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAskJoinInTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional string inviteName = 2;
  if (has_invitename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitename().data(), this->invitename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->invitename(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // optional .TeamProto.eTeamType eType = 4;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  // optional uint32 copymapID = 5;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAskJoinInTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional string inviteName = 2;
  if (has_invitename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->invitename().data(), this->invitename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->invitename(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // optional .TeamProto.eTeamType eType = 4;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  // optional uint32 copymapID = 5;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAskJoinInTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamID = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional string inviteName = 2;
    if (has_invitename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->invitename());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional .TeamProto.eTeamType eType = 4;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 copymapID = 5;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAskJoinInTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAskJoinInTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAskJoinInTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAskJoinInTeam::MergeFrom(const stAskJoinInTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_invitename()) {
      set_invitename(from.invitename());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAskJoinInTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAskJoinInTeam::CopyFrom(const stAskJoinInTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAskJoinInTeam::IsInitialized() const {

  return true;
}

void stAskJoinInTeam::Swap(stAskJoinInTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(invitename_, other->invitename_);
    std::swap(pos_, other->pos_);
    std::swap(etype_, other->etype_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAskJoinInTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAskJoinInTeam_descriptor_;
  metadata.reflection = stAskJoinInTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplyJoinInTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyJoinInTeam_ProtoModID_descriptor_;
}
bool stReplyJoinInTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyJoinInTeam_ProtoModID stReplyJoinInTeam::ModID;
const stReplyJoinInTeam_ProtoModID stReplyJoinInTeam::ProtoModID_MIN;
const stReplyJoinInTeam_ProtoModID stReplyJoinInTeam::ProtoModID_MAX;
const int stReplyJoinInTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyJoinInTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyJoinInTeam_ProtoFunID_descriptor_;
}
bool stReplyJoinInTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyJoinInTeam_ProtoFunID stReplyJoinInTeam::FunID;
const stReplyJoinInTeam_ProtoFunID stReplyJoinInTeam::ProtoFunID_MIN;
const stReplyJoinInTeam_ProtoFunID stReplyJoinInTeam::ProtoFunID_MAX;
const int stReplyJoinInTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplyJoinInTeam::kTeamIDFieldNumber;
const int stReplyJoinInTeam::kAgreeFieldNumber;
const int stReplyJoinInTeam::kPosFieldNumber;
const int stReplyJoinInTeam::kETypeFieldNumber;
const int stReplyJoinInTeam::kTimesUseOutFieldNumber;
#endif  // !_MSC_VER

stReplyJoinInTeam::stReplyJoinInTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplyJoinInTeam::InitAsDefaultInstance() {
}

stReplyJoinInTeam::stReplyJoinInTeam(const stReplyJoinInTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplyJoinInTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  agree_ = false;
  pos_ = 0u;
  etype_ = 1;
  timesuseout_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplyJoinInTeam::~stReplyJoinInTeam() {
  SharedDtor();
}

void stReplyJoinInTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReplyJoinInTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplyJoinInTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyJoinInTeam_descriptor_;
}

const stReplyJoinInTeam& stReplyJoinInTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReplyJoinInTeam* stReplyJoinInTeam::default_instance_ = NULL;

stReplyJoinInTeam* stReplyJoinInTeam::New() const {
  return new stReplyJoinInTeam;
}

void stReplyJoinInTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    agree_ = false;
    pos_ = 0u;
    etype_ = 1;
    timesuseout_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplyJoinInTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // optional bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eType;
        break;
      }

      // optional .TeamProto.eTeamType eType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eTeamType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eTeamType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timesUseOut;
        break;
      }

      // optional bool timesUseOut = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesUseOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &timesuseout_)));
          set_has_timesuseout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplyJoinInTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  // optional .TeamProto.eTeamType eType = 4;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->etype(), output);
  }

  // optional bool timesUseOut = 5;
  if (has_timesuseout()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->timesuseout(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplyJoinInTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  // optional .TeamProto.eTeamType eType = 4;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->etype(), target);
  }

  // optional bool timesUseOut = 5;
  if (has_timesuseout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->timesuseout(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplyJoinInTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamID = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional .TeamProto.eTeamType eType = 4;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional bool timesUseOut = 5;
    if (has_timesuseout()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplyJoinInTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplyJoinInTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplyJoinInTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplyJoinInTeam::MergeFrom(const stReplyJoinInTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_timesuseout()) {
      set_timesuseout(from.timesuseout());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplyJoinInTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplyJoinInTeam::CopyFrom(const stReplyJoinInTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplyJoinInTeam::IsInitialized() const {

  return true;
}

void stReplyJoinInTeam::Swap(stReplyJoinInTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(agree_, other->agree_);
    std::swap(pos_, other->pos_);
    std::swap(etype_, other->etype_);
    std::swap(timesuseout_, other->timesuseout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplyJoinInTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplyJoinInTeam_descriptor_;
  metadata.reflection = stReplyJoinInTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEnterLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterLv_ProtoModID_descriptor_;
}
bool stReqEnterLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterLv_ProtoModID stReqEnterLv::ModID;
const stReqEnterLv_ProtoModID stReqEnterLv::ProtoModID_MIN;
const stReqEnterLv_ProtoModID stReqEnterLv::ProtoModID_MAX;
const int stReqEnterLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEnterLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterLv_ProtoFunID_descriptor_;
}
bool stReqEnterLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterLv_ProtoFunID stReqEnterLv::FunID;
const stReqEnterLv_ProtoFunID stReqEnterLv::ProtoFunID_MIN;
const stReqEnterLv_ProtoFunID stReqEnterLv::ProtoFunID_MAX;
const int stReqEnterLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEnterLv::kCopyMapIDFieldNumber;
#endif  // !_MSC_VER

stReqEnterLv::stReqEnterLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEnterLv::InitAsDefaultInstance() {
}

stReqEnterLv::stReqEnterLv(const stReqEnterLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEnterLv::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEnterLv::~stReqEnterLv() {
  SharedDtor();
}

void stReqEnterLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEnterLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEnterLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterLv_descriptor_;
}

const stReqEnterLv& stReqEnterLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqEnterLv* stReqEnterLv::default_instance_ = NULL;

stReqEnterLv* stReqEnterLv::New() const {
  return new stReqEnterLv;
}

void stReqEnterLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEnterLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copyMapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEnterLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copyMapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEnterLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copyMapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEnterLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copyMapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEnterLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEnterLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEnterLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEnterLv::MergeFrom(const stReqEnterLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEnterLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEnterLv::CopyFrom(const stReqEnterLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEnterLv::IsInitialized() const {

  return true;
}

void stReqEnterLv::Swap(stReqEnterLv* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEnterLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEnterLv_descriptor_;
  metadata.reflection = stReqEnterLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBroadcastInviteCmd_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBroadcastInviteCmd_ProtoModID_descriptor_;
}
bool stReqBroadcastInviteCmd_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBroadcastInviteCmd_ProtoModID stReqBroadcastInviteCmd::ModID;
const stReqBroadcastInviteCmd_ProtoModID stReqBroadcastInviteCmd::ProtoModID_MIN;
const stReqBroadcastInviteCmd_ProtoModID stReqBroadcastInviteCmd::ProtoModID_MAX;
const int stReqBroadcastInviteCmd::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBroadcastInviteCmd_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBroadcastInviteCmd_ProtoFunID_descriptor_;
}
bool stReqBroadcastInviteCmd_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBroadcastInviteCmd_ProtoFunID stReqBroadcastInviteCmd::FunID;
const stReqBroadcastInviteCmd_ProtoFunID stReqBroadcastInviteCmd::ProtoFunID_MIN;
const stReqBroadcastInviteCmd_ProtoFunID stReqBroadcastInviteCmd::ProtoFunID_MAX;
const int stReqBroadcastInviteCmd::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBroadcastInviteCmd::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqBroadcastInviteCmd::stReqBroadcastInviteCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBroadcastInviteCmd::InitAsDefaultInstance() {
}

stReqBroadcastInviteCmd::stReqBroadcastInviteCmd(const stReqBroadcastInviteCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBroadcastInviteCmd::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBroadcastInviteCmd::~stReqBroadcastInviteCmd() {
  SharedDtor();
}

void stReqBroadcastInviteCmd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBroadcastInviteCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBroadcastInviteCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBroadcastInviteCmd_descriptor_;
}

const stReqBroadcastInviteCmd& stReqBroadcastInviteCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqBroadcastInviteCmd* stReqBroadcastInviteCmd::default_instance_ = NULL;

stReqBroadcastInviteCmd* stReqBroadcastInviteCmd::New() const {
  return new stReqBroadcastInviteCmd;
}

void stReqBroadcastInviteCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBroadcastInviteCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBroadcastInviteCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBroadcastInviteCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBroadcastInviteCmd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBroadcastInviteCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBroadcastInviteCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBroadcastInviteCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBroadcastInviteCmd::MergeFrom(const stReqBroadcastInviteCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBroadcastInviteCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBroadcastInviteCmd::CopyFrom(const stReqBroadcastInviteCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBroadcastInviteCmd::IsInitialized() const {

  return true;
}

void stReqBroadcastInviteCmd::Swap(stReqBroadcastInviteCmd* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBroadcastInviteCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBroadcastInviteCmd_descriptor_;
  metadata.reflection = stReqBroadcastInviteCmd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBroadcastInviteJoinIn_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastInviteJoinIn_ProtoModID_descriptor_;
}
bool stBroadcastInviteJoinIn_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadcastInviteJoinIn_ProtoModID stBroadcastInviteJoinIn::ModID;
const stBroadcastInviteJoinIn_ProtoModID stBroadcastInviteJoinIn::ProtoModID_MIN;
const stBroadcastInviteJoinIn_ProtoModID stBroadcastInviteJoinIn::ProtoModID_MAX;
const int stBroadcastInviteJoinIn::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBroadcastInviteJoinIn_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastInviteJoinIn_ProtoFunID_descriptor_;
}
bool stBroadcastInviteJoinIn_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadcastInviteJoinIn_ProtoFunID stBroadcastInviteJoinIn::FunID;
const stBroadcastInviteJoinIn_ProtoFunID stBroadcastInviteJoinIn::ProtoFunID_MIN;
const stBroadcastInviteJoinIn_ProtoFunID stBroadcastInviteJoinIn::ProtoFunID_MAX;
const int stBroadcastInviteJoinIn::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBroadcastInviteJoinIn::kTeamIDFieldNumber;
const int stBroadcastInviteJoinIn::kCharIDFieldNumber;
const int stBroadcastInviteJoinIn::kNameFieldNumber;
const int stBroadcastInviteJoinIn::kJobFieldNumber;
const int stBroadcastInviteJoinIn::kSexFieldNumber;
const int stBroadcastInviteJoinIn::kBattlePowerFieldNumber;
const int stBroadcastInviteJoinIn::kVipLvFieldNumber;
const int stBroadcastInviteJoinIn::kCopyMapIDFieldNumber;
const int stBroadcastInviteJoinIn::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stBroadcastInviteJoinIn::stBroadcastInviteJoinIn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBroadcastInviteJoinIn::InitAsDefaultInstance() {
}

stBroadcastInviteJoinIn::stBroadcastInviteJoinIn(const stBroadcastInviteJoinIn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBroadcastInviteJoinIn::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  viplv_ = 0u;
  copymapid_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadcastInviteJoinIn::~stBroadcastInviteJoinIn() {
  SharedDtor();
}

void stBroadcastInviteJoinIn::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stBroadcastInviteJoinIn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadcastInviteJoinIn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastInviteJoinIn_descriptor_;
}

const stBroadcastInviteJoinIn& stBroadcastInviteJoinIn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stBroadcastInviteJoinIn* stBroadcastInviteJoinIn::default_instance_ = NULL;

stBroadcastInviteJoinIn* stBroadcastInviteJoinIn::New() const {
  return new stBroadcastInviteJoinIn;
}

void stBroadcastInviteJoinIn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    battlepower_ = 0u;
    viplv_ = 0u;
    copymapid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadcastInviteJoinIn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_copyMapID;
        break;
      }

      // optional uint32 copyMapID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyMapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBroadcastInviteJoinIn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battlepower(), output);
  }

  // optional uint32 vipLv = 7;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->viplv(), output);
  }

  // optional uint32 copyMapID = 8;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->copymapid(), output);
  }

  // optional uint32 photoID = 9;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBroadcastInviteJoinIn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battlepower(), target);
  }

  // optional uint32 vipLv = 7;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->viplv(), target);
  }

  // optional uint32 copyMapID = 8;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->copymapid(), target);
  }

  // optional uint32 photoID = 9;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBroadcastInviteJoinIn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamID = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 battlePower = 6;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 vipLv = 7;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 copyMapID = 8;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 photoID = 9;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadcastInviteJoinIn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadcastInviteJoinIn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadcastInviteJoinIn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadcastInviteJoinIn::MergeFrom(const stBroadcastInviteJoinIn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadcastInviteJoinIn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadcastInviteJoinIn::CopyFrom(const stBroadcastInviteJoinIn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadcastInviteJoinIn::IsInitialized() const {

  return true;
}

void stBroadcastInviteJoinIn::Swap(stBroadcastInviteJoinIn* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(viplv_, other->viplv_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadcastInviteJoinIn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadcastInviteJoinIn_descriptor_;
  metadata.reflection = stBroadcastInviteJoinIn_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAutoMatchTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAutoMatchTeam_ProtoModID_descriptor_;
}
bool stReqAutoMatchTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAutoMatchTeam_ProtoModID stReqAutoMatchTeam::ModID;
const stReqAutoMatchTeam_ProtoModID stReqAutoMatchTeam::ProtoModID_MIN;
const stReqAutoMatchTeam_ProtoModID stReqAutoMatchTeam::ProtoModID_MAX;
const int stReqAutoMatchTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAutoMatchTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAutoMatchTeam_ProtoFunID_descriptor_;
}
bool stReqAutoMatchTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAutoMatchTeam_ProtoFunID stReqAutoMatchTeam::FunID;
const stReqAutoMatchTeam_ProtoFunID stReqAutoMatchTeam::ProtoFunID_MIN;
const stReqAutoMatchTeam_ProtoFunID stReqAutoMatchTeam::ProtoFunID_MAX;
const int stReqAutoMatchTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAutoMatchTeam::kCharIDFieldNumber;
const int stReqAutoMatchTeam::kCopyMapIDFieldNumber;
#endif  // !_MSC_VER

stReqAutoMatchTeam::stReqAutoMatchTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAutoMatchTeam::InitAsDefaultInstance() {
}

stReqAutoMatchTeam::stReqAutoMatchTeam(const stReqAutoMatchTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAutoMatchTeam::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAutoMatchTeam::~stReqAutoMatchTeam() {
  SharedDtor();
}

void stReqAutoMatchTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAutoMatchTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAutoMatchTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAutoMatchTeam_descriptor_;
}

const stReqAutoMatchTeam& stReqAutoMatchTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqAutoMatchTeam* stReqAutoMatchTeam::default_instance_ = NULL;

stReqAutoMatchTeam* stReqAutoMatchTeam::New() const {
  return new stReqAutoMatchTeam;
}

void stReqAutoMatchTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAutoMatchTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copyMapID;
        break;
      }

      // optional uint32 copyMapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyMapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAutoMatchTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 copyMapID = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAutoMatchTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 copyMapID = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAutoMatchTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 copyMapID = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAutoMatchTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAutoMatchTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAutoMatchTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAutoMatchTeam::MergeFrom(const stReqAutoMatchTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAutoMatchTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAutoMatchTeam::CopyFrom(const stReqAutoMatchTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAutoMatchTeam::IsInitialized() const {

  return true;
}

void stReqAutoMatchTeam::Swap(stReqAutoMatchTeam* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAutoMatchTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAutoMatchTeam_descriptor_;
  metadata.reflection = stReqAutoMatchTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stWaitMatchTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWaitMatchTeam_ProtoModID_descriptor_;
}
bool stWaitMatchTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWaitMatchTeam_ProtoModID stWaitMatchTeam::ModID;
const stWaitMatchTeam_ProtoModID stWaitMatchTeam::ProtoModID_MIN;
const stWaitMatchTeam_ProtoModID stWaitMatchTeam::ProtoModID_MAX;
const int stWaitMatchTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stWaitMatchTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWaitMatchTeam_ProtoFunID_descriptor_;
}
bool stWaitMatchTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stWaitMatchTeam_ProtoFunID stWaitMatchTeam::FunID;
const stWaitMatchTeam_ProtoFunID stWaitMatchTeam::ProtoFunID_MIN;
const stWaitMatchTeam_ProtoFunID stWaitMatchTeam::ProtoFunID_MAX;
const int stWaitMatchTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

stWaitMatchTeam::stWaitMatchTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stWaitMatchTeam::InitAsDefaultInstance() {
}

stWaitMatchTeam::stWaitMatchTeam(const stWaitMatchTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stWaitMatchTeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stWaitMatchTeam::~stWaitMatchTeam() {
  SharedDtor();
}

void stWaitMatchTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stWaitMatchTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stWaitMatchTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stWaitMatchTeam_descriptor_;
}

const stWaitMatchTeam& stWaitMatchTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stWaitMatchTeam* stWaitMatchTeam::default_instance_ = NULL;

stWaitMatchTeam* stWaitMatchTeam::New() const {
  return new stWaitMatchTeam;
}

void stWaitMatchTeam::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stWaitMatchTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void stWaitMatchTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stWaitMatchTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stWaitMatchTeam::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stWaitMatchTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stWaitMatchTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stWaitMatchTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stWaitMatchTeam::MergeFrom(const stWaitMatchTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stWaitMatchTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stWaitMatchTeam::CopyFrom(const stWaitMatchTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stWaitMatchTeam::IsInitialized() const {

  return true;
}

void stWaitMatchTeam::Swap(stWaitMatchTeam* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stWaitMatchTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stWaitMatchTeam_descriptor_;
  metadata.reflection = stWaitMatchTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMathcTeamSuccess_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMathcTeamSuccess_ProtoModID_descriptor_;
}
bool stMathcTeamSuccess_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMathcTeamSuccess_ProtoModID stMathcTeamSuccess::ModID;
const stMathcTeamSuccess_ProtoModID stMathcTeamSuccess::ProtoModID_MIN;
const stMathcTeamSuccess_ProtoModID stMathcTeamSuccess::ProtoModID_MAX;
const int stMathcTeamSuccess::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMathcTeamSuccess_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMathcTeamSuccess_ProtoFunID_descriptor_;
}
bool stMathcTeamSuccess_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMathcTeamSuccess_ProtoFunID stMathcTeamSuccess::FunID;
const stMathcTeamSuccess_ProtoFunID stMathcTeamSuccess::ProtoFunID_MIN;
const stMathcTeamSuccess_ProtoFunID stMathcTeamSuccess::ProtoFunID_MAX;
const int stMathcTeamSuccess::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

stMathcTeamSuccess::stMathcTeamSuccess()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMathcTeamSuccess::InitAsDefaultInstance() {
}

stMathcTeamSuccess::stMathcTeamSuccess(const stMathcTeamSuccess& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMathcTeamSuccess::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMathcTeamSuccess::~stMathcTeamSuccess() {
  SharedDtor();
}

void stMathcTeamSuccess::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMathcTeamSuccess::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMathcTeamSuccess::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMathcTeamSuccess_descriptor_;
}

const stMathcTeamSuccess& stMathcTeamSuccess::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stMathcTeamSuccess* stMathcTeamSuccess::default_instance_ = NULL;

stMathcTeamSuccess* stMathcTeamSuccess::New() const {
  return new stMathcTeamSuccess;
}

void stMathcTeamSuccess::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMathcTeamSuccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void stMathcTeamSuccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMathcTeamSuccess::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMathcTeamSuccess::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMathcTeamSuccess::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMathcTeamSuccess* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMathcTeamSuccess*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMathcTeamSuccess::MergeFrom(const stMathcTeamSuccess& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMathcTeamSuccess::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMathcTeamSuccess::CopyFrom(const stMathcTeamSuccess& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMathcTeamSuccess::IsInitialized() const {

  return true;
}

void stMathcTeamSuccess::Swap(stMathcTeamSuccess* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMathcTeamSuccess::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMathcTeamSuccess_descriptor_;
  metadata.reflection = stMathcTeamSuccess_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelAutoMatchTeam_ProtoModID_descriptor_;
}
bool stCancelAutoMatchTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelAutoMatchTeam_ProtoModID stCancelAutoMatchTeam::ModID;
const stCancelAutoMatchTeam_ProtoModID stCancelAutoMatchTeam::ProtoModID_MIN;
const stCancelAutoMatchTeam_ProtoModID stCancelAutoMatchTeam::ProtoModID_MAX;
const int stCancelAutoMatchTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelAutoMatchTeam_ProtoFunID_descriptor_;
}
bool stCancelAutoMatchTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelAutoMatchTeam_ProtoFunID stCancelAutoMatchTeam::FunID;
const stCancelAutoMatchTeam_ProtoFunID stCancelAutoMatchTeam::ProtoFunID_MIN;
const stCancelAutoMatchTeam_ProtoFunID stCancelAutoMatchTeam::ProtoFunID_MAX;
const int stCancelAutoMatchTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelAutoMatchTeam::kCharIDFieldNumber;
const int stCancelAutoMatchTeam::kCopyMapIDFieldNumber;
#endif  // !_MSC_VER

stCancelAutoMatchTeam::stCancelAutoMatchTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelAutoMatchTeam::InitAsDefaultInstance() {
}

stCancelAutoMatchTeam::stCancelAutoMatchTeam(const stCancelAutoMatchTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelAutoMatchTeam::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelAutoMatchTeam::~stCancelAutoMatchTeam() {
  SharedDtor();
}

void stCancelAutoMatchTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelAutoMatchTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelAutoMatchTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelAutoMatchTeam_descriptor_;
}

const stCancelAutoMatchTeam& stCancelAutoMatchTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stCancelAutoMatchTeam* stCancelAutoMatchTeam::default_instance_ = NULL;

stCancelAutoMatchTeam* stCancelAutoMatchTeam::New() const {
  return new stCancelAutoMatchTeam;
}

void stCancelAutoMatchTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelAutoMatchTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copyMapID;
        break;
      }

      // optional uint32 copyMapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyMapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelAutoMatchTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 copyMapID = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelAutoMatchTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 copyMapID = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelAutoMatchTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 copyMapID = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelAutoMatchTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelAutoMatchTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelAutoMatchTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelAutoMatchTeam::MergeFrom(const stCancelAutoMatchTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelAutoMatchTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelAutoMatchTeam::CopyFrom(const stCancelAutoMatchTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelAutoMatchTeam::IsInitialized() const {

  return true;
}

void stCancelAutoMatchTeam::Swap(stCancelAutoMatchTeam* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelAutoMatchTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelAutoMatchTeam_descriptor_;
  metadata.reflection = stCancelAutoMatchTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeamResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelAutoMatchTeamResult_eResult_descriptor_;
}
bool stCancelAutoMatchTeamResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelAutoMatchTeamResult_eResult stCancelAutoMatchTeamResult::eSUCCESS;
const stCancelAutoMatchTeamResult_eResult stCancelAutoMatchTeamResult::eFAIL;
const stCancelAutoMatchTeamResult_eResult stCancelAutoMatchTeamResult::eResult_MIN;
const stCancelAutoMatchTeamResult_eResult stCancelAutoMatchTeamResult::eResult_MAX;
const int stCancelAutoMatchTeamResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeamResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelAutoMatchTeamResult_ProtoModID_descriptor_;
}
bool stCancelAutoMatchTeamResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelAutoMatchTeamResult_ProtoModID stCancelAutoMatchTeamResult::ModID;
const stCancelAutoMatchTeamResult_ProtoModID stCancelAutoMatchTeamResult::ProtoModID_MIN;
const stCancelAutoMatchTeamResult_ProtoModID stCancelAutoMatchTeamResult::ProtoModID_MAX;
const int stCancelAutoMatchTeamResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelAutoMatchTeamResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelAutoMatchTeamResult_ProtoFunID_descriptor_;
}
bool stCancelAutoMatchTeamResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelAutoMatchTeamResult_ProtoFunID stCancelAutoMatchTeamResult::FunID;
const stCancelAutoMatchTeamResult_ProtoFunID stCancelAutoMatchTeamResult::ProtoFunID_MIN;
const stCancelAutoMatchTeamResult_ProtoFunID stCancelAutoMatchTeamResult::ProtoFunID_MAX;
const int stCancelAutoMatchTeamResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelAutoMatchTeamResult::kResultFieldNumber;
#endif  // !_MSC_VER

stCancelAutoMatchTeamResult::stCancelAutoMatchTeamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelAutoMatchTeamResult::InitAsDefaultInstance() {
}

stCancelAutoMatchTeamResult::stCancelAutoMatchTeamResult(const stCancelAutoMatchTeamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelAutoMatchTeamResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelAutoMatchTeamResult::~stCancelAutoMatchTeamResult() {
  SharedDtor();
}

void stCancelAutoMatchTeamResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelAutoMatchTeamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelAutoMatchTeamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelAutoMatchTeamResult_descriptor_;
}

const stCancelAutoMatchTeamResult& stCancelAutoMatchTeamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stCancelAutoMatchTeamResult* stCancelAutoMatchTeamResult::default_instance_ = NULL;

stCancelAutoMatchTeamResult* stCancelAutoMatchTeamResult::New() const {
  return new stCancelAutoMatchTeamResult;
}

void stCancelAutoMatchTeamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelAutoMatchTeamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.stCancelAutoMatchTeamResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::stCancelAutoMatchTeamResult_eResult_IsValid(value)) {
            set_result(static_cast< ::TeamProto::stCancelAutoMatchTeamResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelAutoMatchTeamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.stCancelAutoMatchTeamResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelAutoMatchTeamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.stCancelAutoMatchTeamResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelAutoMatchTeamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.stCancelAutoMatchTeamResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelAutoMatchTeamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelAutoMatchTeamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelAutoMatchTeamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelAutoMatchTeamResult::MergeFrom(const stCancelAutoMatchTeamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelAutoMatchTeamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelAutoMatchTeamResult::CopyFrom(const stCancelAutoMatchTeamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelAutoMatchTeamResult::IsInitialized() const {

  return true;
}

void stCancelAutoMatchTeamResult::Swap(stCancelAutoMatchTeamResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelAutoMatchTeamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelAutoMatchTeamResult_descriptor_;
  metadata.reflection = stCancelAutoMatchTeamResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqFirstKillInfoByID_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFirstKillInfoByID_ProtoModID_descriptor_;
}
bool stReqFirstKillInfoByID_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFirstKillInfoByID_ProtoModID stReqFirstKillInfoByID::ModID;
const stReqFirstKillInfoByID_ProtoModID stReqFirstKillInfoByID::ProtoModID_MIN;
const stReqFirstKillInfoByID_ProtoModID stReqFirstKillInfoByID::ProtoModID_MAX;
const int stReqFirstKillInfoByID::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqFirstKillInfoByID_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFirstKillInfoByID_ProtoFunID_descriptor_;
}
bool stReqFirstKillInfoByID_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqFirstKillInfoByID_ProtoFunID stReqFirstKillInfoByID::FunID;
const stReqFirstKillInfoByID_ProtoFunID stReqFirstKillInfoByID::ProtoFunID_MIN;
const stReqFirstKillInfoByID_ProtoFunID stReqFirstKillInfoByID::ProtoFunID_MAX;
const int stReqFirstKillInfoByID::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqFirstKillInfoByID::kLevelIDFieldNumber;
#endif  // !_MSC_VER

stReqFirstKillInfoByID::stReqFirstKillInfoByID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqFirstKillInfoByID::InitAsDefaultInstance() {
}

stReqFirstKillInfoByID::stReqFirstKillInfoByID(const stReqFirstKillInfoByID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqFirstKillInfoByID::SharedCtor() {
  _cached_size_ = 0;
  levelid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqFirstKillInfoByID::~stReqFirstKillInfoByID() {
  SharedDtor();
}

void stReqFirstKillInfoByID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqFirstKillInfoByID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqFirstKillInfoByID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqFirstKillInfoByID_descriptor_;
}

const stReqFirstKillInfoByID& stReqFirstKillInfoByID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqFirstKillInfoByID* stReqFirstKillInfoByID::default_instance_ = NULL;

stReqFirstKillInfoByID* stReqFirstKillInfoByID::New() const {
  return new stReqFirstKillInfoByID;
}

void stReqFirstKillInfoByID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqFirstKillInfoByID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 levelID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &levelid_)));
          set_has_levelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqFirstKillInfoByID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->levelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqFirstKillInfoByID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 levelID = 1;
  if (has_levelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->levelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqFirstKillInfoByID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 levelID = 1;
    if (has_levelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->levelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqFirstKillInfoByID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqFirstKillInfoByID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqFirstKillInfoByID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqFirstKillInfoByID::MergeFrom(const stReqFirstKillInfoByID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelid()) {
      set_levelid(from.levelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqFirstKillInfoByID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqFirstKillInfoByID::CopyFrom(const stReqFirstKillInfoByID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqFirstKillInfoByID::IsInitialized() const {

  return true;
}

void stReqFirstKillInfoByID::Swap(stReqFirstKillInfoByID* other) {
  if (other != this) {
    std::swap(levelid_, other->levelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqFirstKillInfoByID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqFirstKillInfoByID_descriptor_;
  metadata.reflection = stReqFirstKillInfoByID_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetFirstKillInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirstKillInfo_ProtoModID_descriptor_;
}
bool stRetFirstKillInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFirstKillInfo_ProtoModID stRetFirstKillInfo::ModID;
const stRetFirstKillInfo_ProtoModID stRetFirstKillInfo::ProtoModID_MIN;
const stRetFirstKillInfo_ProtoModID stRetFirstKillInfo::ProtoModID_MAX;
const int stRetFirstKillInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetFirstKillInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirstKillInfo_ProtoFunID_descriptor_;
}
bool stRetFirstKillInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetFirstKillInfo_ProtoFunID stRetFirstKillInfo::FunID;
const stRetFirstKillInfo_ProtoFunID stRetFirstKillInfo::ProtoFunID_MIN;
const stRetFirstKillInfo_ProtoFunID stRetFirstKillInfo::ProtoFunID_MAX;
const int stRetFirstKillInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetFirstKillInfo::kCopymapIDFieldNumber;
const int stRetFirstKillInfo::kCharID1FieldNumber;
const int stRetFirstKillInfo::kJob1FieldNumber;
const int stRetFirstKillInfo::kSex1FieldNumber;
const int stRetFirstKillInfo::kName1FieldNumber;
const int stRetFirstKillInfo::kLevel1FieldNumber;
const int stRetFirstKillInfo::kBattlePower1FieldNumber;
const int stRetFirstKillInfo::kCharID2FieldNumber;
const int stRetFirstKillInfo::kJob2FieldNumber;
const int stRetFirstKillInfo::kSex2FieldNumber;
const int stRetFirstKillInfo::kName2FieldNumber;
const int stRetFirstKillInfo::kLevel2FieldNumber;
const int stRetFirstKillInfo::kBattlePower2FieldNumber;
const int stRetFirstKillInfo::kCharID3FieldNumber;
const int stRetFirstKillInfo::kJob3FieldNumber;
const int stRetFirstKillInfo::kSex3FieldNumber;
const int stRetFirstKillInfo::kName3FieldNumber;
const int stRetFirstKillInfo::kLevel3FieldNumber;
const int stRetFirstKillInfo::kBattlePower3FieldNumber;
const int stRetFirstKillInfo::kKillTimeFieldNumber;
const int stRetFirstKillInfo::kPhotoID1FieldNumber;
const int stRetFirstKillInfo::kPhotoID2FieldNumber;
const int stRetFirstKillInfo::kPhotoID3FieldNumber;
#endif  // !_MSC_VER

stRetFirstKillInfo::stRetFirstKillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetFirstKillInfo::InitAsDefaultInstance() {
}

stRetFirstKillInfo::stRetFirstKillInfo(const stRetFirstKillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetFirstKillInfo::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  charid1_ = 0u;
  job1_ = 0u;
  sex1_ = 0u;
  name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level1_ = 0u;
  battlepower1_ = 0u;
  charid2_ = 0u;
  job2_ = 0u;
  sex2_ = 0u;
  name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level2_ = 0u;
  battlepower2_ = 0u;
  charid3_ = 0u;
  job3_ = 0u;
  sex3_ = 0u;
  name3_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level3_ = 0u;
  battlepower3_ = 0u;
  killtime_ = 0u;
  photoid1_ = 0u;
  photoid2_ = 0u;
  photoid3_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetFirstKillInfo::~stRetFirstKillInfo() {
  SharedDtor();
}

void stRetFirstKillInfo::SharedDtor() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name3_ != &::google::protobuf::internal::kEmptyString) {
    delete name3_;
  }
  if (this != default_instance_) {
  }
}

void stRetFirstKillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetFirstKillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetFirstKillInfo_descriptor_;
}

const stRetFirstKillInfo& stRetFirstKillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stRetFirstKillInfo* stRetFirstKillInfo::default_instance_ = NULL;

stRetFirstKillInfo* stRetFirstKillInfo::New() const {
  return new stRetFirstKillInfo;
}

void stRetFirstKillInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    charid1_ = 0u;
    job1_ = 0u;
    sex1_ = 0u;
    if (has_name1()) {
      if (name1_ != &::google::protobuf::internal::kEmptyString) {
        name1_->clear();
      }
    }
    level1_ = 0u;
    battlepower1_ = 0u;
    charid2_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    job2_ = 0u;
    sex2_ = 0u;
    if (has_name2()) {
      if (name2_ != &::google::protobuf::internal::kEmptyString) {
        name2_->clear();
      }
    }
    level2_ = 0u;
    battlepower2_ = 0u;
    charid3_ = 0u;
    job3_ = 0u;
    sex3_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_name3()) {
      if (name3_ != &::google::protobuf::internal::kEmptyString) {
        name3_->clear();
      }
    }
    level3_ = 0u;
    battlepower3_ = 0u;
    killtime_ = 0u;
    photoid1_ = 0u;
    photoid2_ = 0u;
    photoid3_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetFirstKillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID1;
        break;
      }

      // optional uint32 charID1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job1;
        break;
      }

      // optional uint32 job1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job1_)));
          set_has_job1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex1;
        break;
      }

      // optional uint32 sex1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex1_)));
          set_has_sex1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name1;
        break;
      }

      // optional string name1 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name1().data(), this->name1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level1;
        break;
      }

      // optional uint32 level1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level1_)));
          set_has_level1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower1;
        break;
      }

      // optional uint32 battlePower1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower1_)));
          set_has_battlepower1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_charID2;
        break;
      }

      // optional uint32 charID2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_job2;
        break;
      }

      // optional uint32 job2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job2_)));
          set_has_job2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sex2;
        break;
      }

      // optional uint32 sex2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex2_)));
          set_has_sex2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_name2;
        break;
      }

      // optional string name2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name2().data(), this->name2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_level2;
        break;
      }

      // optional uint32 level2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level2_)));
          set_has_level2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_battlePower2;
        break;
      }

      // optional uint32 battlePower2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower2_)));
          set_has_battlepower2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_charID3;
        break;
      }

      // optional uint32 charID3 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid3_)));
          set_has_charid3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_job3;
        break;
      }

      // optional uint32 job3 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job3_)));
          set_has_job3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_sex3;
        break;
      }

      // optional uint32 sex3 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex3_)));
          set_has_sex3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_name3;
        break;
      }

      // optional string name3 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name3().data(), this->name3().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_level3;
        break;
      }

      // optional uint32 level3 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level3_)));
          set_has_level3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_battlePower3;
        break;
      }

      // optional uint32 battlePower3 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower3_)));
          set_has_battlepower3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_killTime;
        break;
      }

      // optional uint32 killTime = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killtime_)));
          set_has_killtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_photoID1;
        break;
      }

      // optional uint32 photoID1 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid1_)));
          set_has_photoid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_photoID2;
        break;
      }

      // optional uint32 photoID2 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid2_)));
          set_has_photoid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_photoID3;
        break;
      }

      // optional uint32 photoID3 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid3_)));
          set_has_photoid3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetFirstKillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  // optional uint32 charID1 = 2;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid1(), output);
  }

  // optional uint32 job1 = 3;
  if (has_job1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job1(), output);
  }

  // optional uint32 sex1 = 4;
  if (has_sex1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex1(), output);
  }

  // optional string name1 = 5;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name1(), output);
  }

  // optional uint32 level1 = 6;
  if (has_level1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level1(), output);
  }

  // optional uint32 battlePower1 = 7;
  if (has_battlepower1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower1(), output);
  }

  // optional uint32 charID2 = 8;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->charid2(), output);
  }

  // optional uint32 job2 = 9;
  if (has_job2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->job2(), output);
  }

  // optional uint32 sex2 = 10;
  if (has_sex2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sex2(), output);
  }

  // optional string name2 = 11;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->name2(), output);
  }

  // optional uint32 level2 = 12;
  if (has_level2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->level2(), output);
  }

  // optional uint32 battlePower2 = 13;
  if (has_battlepower2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->battlepower2(), output);
  }

  // optional uint32 charID3 = 14;
  if (has_charid3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->charid3(), output);
  }

  // optional uint32 job3 = 15;
  if (has_job3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->job3(), output);
  }

  // optional uint32 sex3 = 16;
  if (has_sex3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->sex3(), output);
  }

  // optional string name3 = 17;
  if (has_name3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name3().data(), this->name3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->name3(), output);
  }

  // optional uint32 level3 = 18;
  if (has_level3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->level3(), output);
  }

  // optional uint32 battlePower3 = 19;
  if (has_battlepower3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->battlepower3(), output);
  }

  // optional uint32 killTime = 20;
  if (has_killtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->killtime(), output);
  }

  // optional uint32 photoID1 = 21;
  if (has_photoid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->photoid1(), output);
  }

  // optional uint32 photoID2 = 22;
  if (has_photoid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->photoid2(), output);
  }

  // optional uint32 photoID3 = 23;
  if (has_photoid3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->photoid3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetFirstKillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  // optional uint32 charID1 = 2;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid1(), target);
  }

  // optional uint32 job1 = 3;
  if (has_job1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job1(), target);
  }

  // optional uint32 sex1 = 4;
  if (has_sex1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex1(), target);
  }

  // optional string name1 = 5;
  if (has_name1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name1().data(), this->name1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name1(), target);
  }

  // optional uint32 level1 = 6;
  if (has_level1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level1(), target);
  }

  // optional uint32 battlePower1 = 7;
  if (has_battlepower1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower1(), target);
  }

  // optional uint32 charID2 = 8;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->charid2(), target);
  }

  // optional uint32 job2 = 9;
  if (has_job2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->job2(), target);
  }

  // optional uint32 sex2 = 10;
  if (has_sex2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sex2(), target);
  }

  // optional string name2 = 11;
  if (has_name2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name2().data(), this->name2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name2(), target);
  }

  // optional uint32 level2 = 12;
  if (has_level2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->level2(), target);
  }

  // optional uint32 battlePower2 = 13;
  if (has_battlepower2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->battlepower2(), target);
  }

  // optional uint32 charID3 = 14;
  if (has_charid3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->charid3(), target);
  }

  // optional uint32 job3 = 15;
  if (has_job3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->job3(), target);
  }

  // optional uint32 sex3 = 16;
  if (has_sex3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->sex3(), target);
  }

  // optional string name3 = 17;
  if (has_name3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name3().data(), this->name3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->name3(), target);
  }

  // optional uint32 level3 = 18;
  if (has_level3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->level3(), target);
  }

  // optional uint32 battlePower3 = 19;
  if (has_battlepower3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->battlepower3(), target);
  }

  // optional uint32 killTime = 20;
  if (has_killtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->killtime(), target);
  }

  // optional uint32 photoID1 = 21;
  if (has_photoid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->photoid1(), target);
  }

  // optional uint32 photoID2 = 22;
  if (has_photoid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->photoid2(), target);
  }

  // optional uint32 photoID3 = 23;
  if (has_photoid3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->photoid3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetFirstKillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional uint32 charID1 = 2;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid1());
    }

    // optional uint32 job1 = 3;
    if (has_job1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job1());
    }

    // optional uint32 sex1 = 4;
    if (has_sex1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex1());
    }

    // optional string name1 = 5;
    if (has_name1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name1());
    }

    // optional uint32 level1 = 6;
    if (has_level1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level1());
    }

    // optional uint32 battlePower1 = 7;
    if (has_battlepower1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower1());
    }

    // optional uint32 charID2 = 8;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid2());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 job2 = 9;
    if (has_job2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job2());
    }

    // optional uint32 sex2 = 10;
    if (has_sex2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex2());
    }

    // optional string name2 = 11;
    if (has_name2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name2());
    }

    // optional uint32 level2 = 12;
    if (has_level2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level2());
    }

    // optional uint32 battlePower2 = 13;
    if (has_battlepower2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower2());
    }

    // optional uint32 charID3 = 14;
    if (has_charid3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid3());
    }

    // optional uint32 job3 = 15;
    if (has_job3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job3());
    }

    // optional uint32 sex3 = 16;
    if (has_sex3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex3());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string name3 = 17;
    if (has_name3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name3());
    }

    // optional uint32 level3 = 18;
    if (has_level3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level3());
    }

    // optional uint32 battlePower3 = 19;
    if (has_battlepower3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower3());
    }

    // optional uint32 killTime = 20;
    if (has_killtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killtime());
    }

    // optional uint32 photoID1 = 21;
    if (has_photoid1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid1());
    }

    // optional uint32 photoID2 = 22;
    if (has_photoid2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid2());
    }

    // optional uint32 photoID3 = 23;
    if (has_photoid3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetFirstKillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetFirstKillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetFirstKillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetFirstKillInfo::MergeFrom(const stRetFirstKillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_job1()) {
      set_job1(from.job1());
    }
    if (from.has_sex1()) {
      set_sex1(from.sex1());
    }
    if (from.has_name1()) {
      set_name1(from.name1());
    }
    if (from.has_level1()) {
      set_level1(from.level1());
    }
    if (from.has_battlepower1()) {
      set_battlepower1(from.battlepower1());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_job2()) {
      set_job2(from.job2());
    }
    if (from.has_sex2()) {
      set_sex2(from.sex2());
    }
    if (from.has_name2()) {
      set_name2(from.name2());
    }
    if (from.has_level2()) {
      set_level2(from.level2());
    }
    if (from.has_battlepower2()) {
      set_battlepower2(from.battlepower2());
    }
    if (from.has_charid3()) {
      set_charid3(from.charid3());
    }
    if (from.has_job3()) {
      set_job3(from.job3());
    }
    if (from.has_sex3()) {
      set_sex3(from.sex3());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_name3()) {
      set_name3(from.name3());
    }
    if (from.has_level3()) {
      set_level3(from.level3());
    }
    if (from.has_battlepower3()) {
      set_battlepower3(from.battlepower3());
    }
    if (from.has_killtime()) {
      set_killtime(from.killtime());
    }
    if (from.has_photoid1()) {
      set_photoid1(from.photoid1());
    }
    if (from.has_photoid2()) {
      set_photoid2(from.photoid2());
    }
    if (from.has_photoid3()) {
      set_photoid3(from.photoid3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetFirstKillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetFirstKillInfo::CopyFrom(const stRetFirstKillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetFirstKillInfo::IsInitialized() const {

  return true;
}

void stRetFirstKillInfo::Swap(stRetFirstKillInfo* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(charid1_, other->charid1_);
    std::swap(job1_, other->job1_);
    std::swap(sex1_, other->sex1_);
    std::swap(name1_, other->name1_);
    std::swap(level1_, other->level1_);
    std::swap(battlepower1_, other->battlepower1_);
    std::swap(charid2_, other->charid2_);
    std::swap(job2_, other->job2_);
    std::swap(sex2_, other->sex2_);
    std::swap(name2_, other->name2_);
    std::swap(level2_, other->level2_);
    std::swap(battlepower2_, other->battlepower2_);
    std::swap(charid3_, other->charid3_);
    std::swap(job3_, other->job3_);
    std::swap(sex3_, other->sex3_);
    std::swap(name3_, other->name3_);
    std::swap(level3_, other->level3_);
    std::swap(battlepower3_, other->battlepower3_);
    std::swap(killtime_, other->killtime_);
    std::swap(photoid1_, other->photoid1_);
    std::swap(photoid2_, other->photoid2_);
    std::swap(photoid3_, other->photoid3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetFirstKillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetFirstKillInfo_descriptor_;
  metadata.reflection = stRetFirstKillInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRealTimeSingleMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRealTimeSingleMatch_ProtoModID_descriptor_;
}
bool stReqRealTimeSingleMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRealTimeSingleMatch_ProtoModID stReqRealTimeSingleMatch::ModID;
const stReqRealTimeSingleMatch_ProtoModID stReqRealTimeSingleMatch::ProtoModID_MIN;
const stReqRealTimeSingleMatch_ProtoModID stReqRealTimeSingleMatch::ProtoModID_MAX;
const int stReqRealTimeSingleMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRealTimeSingleMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRealTimeSingleMatch_ProtoFunID_descriptor_;
}
bool stReqRealTimeSingleMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRealTimeSingleMatch_ProtoFunID stReqRealTimeSingleMatch::FunID;
const stReqRealTimeSingleMatch_ProtoFunID stReqRealTimeSingleMatch::ProtoFunID_MIN;
const stReqRealTimeSingleMatch_ProtoFunID stReqRealTimeSingleMatch::ProtoFunID_MAX;
const int stReqRealTimeSingleMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRealTimeSingleMatch::kETypeFieldNumber;
#endif  // !_MSC_VER

stReqRealTimeSingleMatch::stReqRealTimeSingleMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRealTimeSingleMatch::InitAsDefaultInstance() {
}

stReqRealTimeSingleMatch::stReqRealTimeSingleMatch(const stReqRealTimeSingleMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRealTimeSingleMatch::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRealTimeSingleMatch::~stReqRealTimeSingleMatch() {
  SharedDtor();
}

void stReqRealTimeSingleMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRealTimeSingleMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRealTimeSingleMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRealTimeSingleMatch_descriptor_;
}

const stReqRealTimeSingleMatch& stReqRealTimeSingleMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqRealTimeSingleMatch* stReqRealTimeSingleMatch::default_instance_ = NULL;

stReqRealTimeSingleMatch* stReqRealTimeSingleMatch::New() const {
  return new stReqRealTimeSingleMatch;
}

void stReqRealTimeSingleMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRealTimeSingleMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.eRealTimePKType eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eRealTimePKType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRealTimeSingleMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRealTimeSingleMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRealTimeSingleMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.eRealTimePKType eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRealTimeSingleMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRealTimeSingleMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRealTimeSingleMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRealTimeSingleMatch::MergeFrom(const stReqRealTimeSingleMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRealTimeSingleMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRealTimeSingleMatch::CopyFrom(const stReqRealTimeSingleMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRealTimeSingleMatch::IsInitialized() const {

  return true;
}

void stReqRealTimeSingleMatch::Swap(stReqRealTimeSingleMatch* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRealTimeSingleMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRealTimeSingleMatch_descriptor_;
  metadata.reflection = stReqRealTimeSingleMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRealTimeSingleMatchWait_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeSingleMatchWait_ProtoModID_descriptor_;
}
bool stRealTimeSingleMatchWait_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeSingleMatchWait_ProtoModID stRealTimeSingleMatchWait::ModID;
const stRealTimeSingleMatchWait_ProtoModID stRealTimeSingleMatchWait::ProtoModID_MIN;
const stRealTimeSingleMatchWait_ProtoModID stRealTimeSingleMatchWait::ProtoModID_MAX;
const int stRealTimeSingleMatchWait::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRealTimeSingleMatchWait_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeSingleMatchWait_ProtoFunID_descriptor_;
}
bool stRealTimeSingleMatchWait_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeSingleMatchWait_ProtoFunID stRealTimeSingleMatchWait::FunID;
const stRealTimeSingleMatchWait_ProtoFunID stRealTimeSingleMatchWait::ProtoFunID_MIN;
const stRealTimeSingleMatchWait_ProtoFunID stRealTimeSingleMatchWait::ProtoFunID_MAX;
const int stRealTimeSingleMatchWait::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRealTimeSingleMatchWait::kETypeFieldNumber;
#endif  // !_MSC_VER

stRealTimeSingleMatchWait::stRealTimeSingleMatchWait()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRealTimeSingleMatchWait::InitAsDefaultInstance() {
}

stRealTimeSingleMatchWait::stRealTimeSingleMatchWait(const stRealTimeSingleMatchWait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRealTimeSingleMatchWait::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRealTimeSingleMatchWait::~stRealTimeSingleMatchWait() {
  SharedDtor();
}

void stRealTimeSingleMatchWait::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRealTimeSingleMatchWait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRealTimeSingleMatchWait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeSingleMatchWait_descriptor_;
}

const stRealTimeSingleMatchWait& stRealTimeSingleMatchWait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stRealTimeSingleMatchWait* stRealTimeSingleMatchWait::default_instance_ = NULL;

stRealTimeSingleMatchWait* stRealTimeSingleMatchWait::New() const {
  return new stRealTimeSingleMatchWait;
}

void stRealTimeSingleMatchWait::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRealTimeSingleMatchWait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.eRealTimePKType eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eRealTimePKType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRealTimeSingleMatchWait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRealTimeSingleMatchWait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRealTimeSingleMatchWait::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.eRealTimePKType eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRealTimeSingleMatchWait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRealTimeSingleMatchWait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRealTimeSingleMatchWait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRealTimeSingleMatchWait::MergeFrom(const stRealTimeSingleMatchWait& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRealTimeSingleMatchWait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRealTimeSingleMatchWait::CopyFrom(const stRealTimeSingleMatchWait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRealTimeSingleMatchWait::IsInitialized() const {

  return true;
}

void stRealTimeSingleMatchWait::Swap(stRealTimeSingleMatchWait* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRealTimeSingleMatchWait::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRealTimeSingleMatchWait_descriptor_;
  metadata.reflection = stRealTimeSingleMatchWait_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeSingleMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelRealTimeSingleMatch_ProtoModID_descriptor_;
}
bool stReqCancelRealTimeSingleMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCancelRealTimeSingleMatch_ProtoModID stReqCancelRealTimeSingleMatch::ModID;
const stReqCancelRealTimeSingleMatch_ProtoModID stReqCancelRealTimeSingleMatch::ProtoModID_MIN;
const stReqCancelRealTimeSingleMatch_ProtoModID stReqCancelRealTimeSingleMatch::ProtoModID_MAX;
const int stReqCancelRealTimeSingleMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeSingleMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelRealTimeSingleMatch_ProtoFunID_descriptor_;
}
bool stReqCancelRealTimeSingleMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCancelRealTimeSingleMatch_ProtoFunID stReqCancelRealTimeSingleMatch::FunID;
const stReqCancelRealTimeSingleMatch_ProtoFunID stReqCancelRealTimeSingleMatch::ProtoFunID_MIN;
const stReqCancelRealTimeSingleMatch_ProtoFunID stReqCancelRealTimeSingleMatch::ProtoFunID_MAX;
const int stReqCancelRealTimeSingleMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCancelRealTimeSingleMatch::kETypeFieldNumber;
#endif  // !_MSC_VER

stReqCancelRealTimeSingleMatch::stReqCancelRealTimeSingleMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCancelRealTimeSingleMatch::InitAsDefaultInstance() {
}

stReqCancelRealTimeSingleMatch::stReqCancelRealTimeSingleMatch(const stReqCancelRealTimeSingleMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCancelRealTimeSingleMatch::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCancelRealTimeSingleMatch::~stReqCancelRealTimeSingleMatch() {
  SharedDtor();
}

void stReqCancelRealTimeSingleMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCancelRealTimeSingleMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCancelRealTimeSingleMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelRealTimeSingleMatch_descriptor_;
}

const stReqCancelRealTimeSingleMatch& stReqCancelRealTimeSingleMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqCancelRealTimeSingleMatch* stReqCancelRealTimeSingleMatch::default_instance_ = NULL;

stReqCancelRealTimeSingleMatch* stReqCancelRealTimeSingleMatch::New() const {
  return new stReqCancelRealTimeSingleMatch;
}

void stReqCancelRealTimeSingleMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCancelRealTimeSingleMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.eRealTimePKType eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eRealTimePKType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCancelRealTimeSingleMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCancelRealTimeSingleMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCancelRealTimeSingleMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.eRealTimePKType eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCancelRealTimeSingleMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCancelRealTimeSingleMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCancelRealTimeSingleMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCancelRealTimeSingleMatch::MergeFrom(const stReqCancelRealTimeSingleMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCancelRealTimeSingleMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCancelRealTimeSingleMatch::CopyFrom(const stReqCancelRealTimeSingleMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCancelRealTimeSingleMatch::IsInitialized() const {

  return true;
}

void stReqCancelRealTimeSingleMatch::Swap(stReqCancelRealTimeSingleMatch* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCancelRealTimeSingleMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCancelRealTimeSingleMatch_descriptor_;
  metadata.reflection = stReqCancelRealTimeSingleMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelRealTimeSingleMatchResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelRealTimeSingleMatchResult_ProtoModID_descriptor_;
}
bool stCancelRealTimeSingleMatchResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelRealTimeSingleMatchResult_ProtoModID stCancelRealTimeSingleMatchResult::ModID;
const stCancelRealTimeSingleMatchResult_ProtoModID stCancelRealTimeSingleMatchResult::ProtoModID_MIN;
const stCancelRealTimeSingleMatchResult_ProtoModID stCancelRealTimeSingleMatchResult::ProtoModID_MAX;
const int stCancelRealTimeSingleMatchResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelRealTimeSingleMatchResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelRealTimeSingleMatchResult_ProtoFunID_descriptor_;
}
bool stCancelRealTimeSingleMatchResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelRealTimeSingleMatchResult_ProtoFunID stCancelRealTimeSingleMatchResult::FunID;
const stCancelRealTimeSingleMatchResult_ProtoFunID stCancelRealTimeSingleMatchResult::ProtoFunID_MIN;
const stCancelRealTimeSingleMatchResult_ProtoFunID stCancelRealTimeSingleMatchResult::ProtoFunID_MAX;
const int stCancelRealTimeSingleMatchResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelRealTimeSingleMatchResult::kSuccessFieldNumber;
#endif  // !_MSC_VER

stCancelRealTimeSingleMatchResult::stCancelRealTimeSingleMatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelRealTimeSingleMatchResult::InitAsDefaultInstance() {
}

stCancelRealTimeSingleMatchResult::stCancelRealTimeSingleMatchResult(const stCancelRealTimeSingleMatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelRealTimeSingleMatchResult::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelRealTimeSingleMatchResult::~stCancelRealTimeSingleMatchResult() {
  SharedDtor();
}

void stCancelRealTimeSingleMatchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelRealTimeSingleMatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelRealTimeSingleMatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelRealTimeSingleMatchResult_descriptor_;
}

const stCancelRealTimeSingleMatchResult& stCancelRealTimeSingleMatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stCancelRealTimeSingleMatchResult* stCancelRealTimeSingleMatchResult::default_instance_ = NULL;

stCancelRealTimeSingleMatchResult* stCancelRealTimeSingleMatchResult::New() const {
  return new stCancelRealTimeSingleMatchResult;
}

void stCancelRealTimeSingleMatchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelRealTimeSingleMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelRealTimeSingleMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelRealTimeSingleMatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelRealTimeSingleMatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelRealTimeSingleMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelRealTimeSingleMatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelRealTimeSingleMatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelRealTimeSingleMatchResult::MergeFrom(const stCancelRealTimeSingleMatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelRealTimeSingleMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelRealTimeSingleMatchResult::CopyFrom(const stCancelRealTimeSingleMatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelRealTimeSingleMatchResult::IsInitialized() const {

  return true;
}

void stCancelRealTimeSingleMatchResult::Swap(stCancelRealTimeSingleMatchResult* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelRealTimeSingleMatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelRealTimeSingleMatchResult_descriptor_;
  metadata.reflection = stCancelRealTimeSingleMatchResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqRealTimeTeamMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRealTimeTeamMatch_ProtoModID_descriptor_;
}
bool stReqRealTimeTeamMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRealTimeTeamMatch_ProtoModID stReqRealTimeTeamMatch::ModID;
const stReqRealTimeTeamMatch_ProtoModID stReqRealTimeTeamMatch::ProtoModID_MIN;
const stReqRealTimeTeamMatch_ProtoModID stReqRealTimeTeamMatch::ProtoModID_MAX;
const int stReqRealTimeTeamMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqRealTimeTeamMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRealTimeTeamMatch_ProtoFunID_descriptor_;
}
bool stReqRealTimeTeamMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqRealTimeTeamMatch_ProtoFunID stReqRealTimeTeamMatch::FunID;
const stReqRealTimeTeamMatch_ProtoFunID stReqRealTimeTeamMatch::ProtoFunID_MIN;
const stReqRealTimeTeamMatch_ProtoFunID stReqRealTimeTeamMatch::ProtoFunID_MAX;
const int stReqRealTimeTeamMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqRealTimeTeamMatch::kETypeFieldNumber;
const int stReqRealTimeTeamMatch::kTeamIDFieldNumber;
#endif  // !_MSC_VER

stReqRealTimeTeamMatch::stReqRealTimeTeamMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqRealTimeTeamMatch::InitAsDefaultInstance() {
}

stReqRealTimeTeamMatch::stReqRealTimeTeamMatch(const stReqRealTimeTeamMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqRealTimeTeamMatch::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 1;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqRealTimeTeamMatch::~stReqRealTimeTeamMatch() {
  SharedDtor();
}

void stReqRealTimeTeamMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqRealTimeTeamMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqRealTimeTeamMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqRealTimeTeamMatch_descriptor_;
}

const stReqRealTimeTeamMatch& stReqRealTimeTeamMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqRealTimeTeamMatch* stReqRealTimeTeamMatch::default_instance_ = NULL;

stReqRealTimeTeamMatch* stReqRealTimeTeamMatch::New() const {
  return new stReqRealTimeTeamMatch;
}

void stReqRealTimeTeamMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 1;
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqRealTimeTeamMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.eRealTimePKType eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eRealTimePKType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqRealTimeTeamMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqRealTimeTeamMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqRealTimeTeamMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.eRealTimePKType eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 teamID = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqRealTimeTeamMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqRealTimeTeamMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqRealTimeTeamMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqRealTimeTeamMatch::MergeFrom(const stReqRealTimeTeamMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqRealTimeTeamMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqRealTimeTeamMatch::CopyFrom(const stReqRealTimeTeamMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqRealTimeTeamMatch::IsInitialized() const {

  return true;
}

void stReqRealTimeTeamMatch::Swap(stReqRealTimeTeamMatch* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqRealTimeTeamMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqRealTimeTeamMatch_descriptor_;
  metadata.reflection = stReqRealTimeTeamMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatchWait_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeTeamMatchWait_ProtoModID_descriptor_;
}
bool stRealTimeTeamMatchWait_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeTeamMatchWait_ProtoModID stRealTimeTeamMatchWait::ModID;
const stRealTimeTeamMatchWait_ProtoModID stRealTimeTeamMatchWait::ProtoModID_MIN;
const stRealTimeTeamMatchWait_ProtoModID stRealTimeTeamMatchWait::ProtoModID_MAX;
const int stRealTimeTeamMatchWait::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatchWait_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeTeamMatchWait_ProtoFunID_descriptor_;
}
bool stRealTimeTeamMatchWait_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeTeamMatchWait_ProtoFunID stRealTimeTeamMatchWait::FunID;
const stRealTimeTeamMatchWait_ProtoFunID stRealTimeTeamMatchWait::ProtoFunID_MIN;
const stRealTimeTeamMatchWait_ProtoFunID stRealTimeTeamMatchWait::ProtoFunID_MAX;
const int stRealTimeTeamMatchWait::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRealTimeTeamMatchWait::kETypeFieldNumber;
#endif  // !_MSC_VER

stRealTimeTeamMatchWait::stRealTimeTeamMatchWait()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRealTimeTeamMatchWait::InitAsDefaultInstance() {
}

stRealTimeTeamMatchWait::stRealTimeTeamMatchWait(const stRealTimeTeamMatchWait& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRealTimeTeamMatchWait::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRealTimeTeamMatchWait::~stRealTimeTeamMatchWait() {
  SharedDtor();
}

void stRealTimeTeamMatchWait::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRealTimeTeamMatchWait::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRealTimeTeamMatchWait::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeTeamMatchWait_descriptor_;
}

const stRealTimeTeamMatchWait& stRealTimeTeamMatchWait::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stRealTimeTeamMatchWait* stRealTimeTeamMatchWait::default_instance_ = NULL;

stRealTimeTeamMatchWait* stRealTimeTeamMatchWait::New() const {
  return new stRealTimeTeamMatchWait;
}

void stRealTimeTeamMatchWait::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRealTimeTeamMatchWait::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.eRealTimePKType eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eRealTimePKType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRealTimeTeamMatchWait::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRealTimeTeamMatchWait::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRealTimeTeamMatchWait::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.eRealTimePKType eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRealTimeTeamMatchWait::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRealTimeTeamMatchWait* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRealTimeTeamMatchWait*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRealTimeTeamMatchWait::MergeFrom(const stRealTimeTeamMatchWait& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRealTimeTeamMatchWait::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRealTimeTeamMatchWait::CopyFrom(const stRealTimeTeamMatchWait& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRealTimeTeamMatchWait::IsInitialized() const {

  return true;
}

void stRealTimeTeamMatchWait::Swap(stRealTimeTeamMatchWait* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRealTimeTeamMatchWait::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRealTimeTeamMatchWait_descriptor_;
  metadata.reflection = stRealTimeTeamMatchWait_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeTeamMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelRealTimeTeamMatch_ProtoModID_descriptor_;
}
bool stReqCancelRealTimeTeamMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCancelRealTimeTeamMatch_ProtoModID stReqCancelRealTimeTeamMatch::ModID;
const stReqCancelRealTimeTeamMatch_ProtoModID stReqCancelRealTimeTeamMatch::ProtoModID_MIN;
const stReqCancelRealTimeTeamMatch_ProtoModID stReqCancelRealTimeTeamMatch::ProtoModID_MAX;
const int stReqCancelRealTimeTeamMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCancelRealTimeTeamMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelRealTimeTeamMatch_ProtoFunID_descriptor_;
}
bool stReqCancelRealTimeTeamMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCancelRealTimeTeamMatch_ProtoFunID stReqCancelRealTimeTeamMatch::FunID;
const stReqCancelRealTimeTeamMatch_ProtoFunID stReqCancelRealTimeTeamMatch::ProtoFunID_MIN;
const stReqCancelRealTimeTeamMatch_ProtoFunID stReqCancelRealTimeTeamMatch::ProtoFunID_MAX;
const int stReqCancelRealTimeTeamMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCancelRealTimeTeamMatch::kETypeFieldNumber;
const int stReqCancelRealTimeTeamMatch::kTeamIDFieldNumber;
#endif  // !_MSC_VER

stReqCancelRealTimeTeamMatch::stReqCancelRealTimeTeamMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCancelRealTimeTeamMatch::InitAsDefaultInstance() {
}

stReqCancelRealTimeTeamMatch::stReqCancelRealTimeTeamMatch(const stReqCancelRealTimeTeamMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCancelRealTimeTeamMatch::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 1;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCancelRealTimeTeamMatch::~stReqCancelRealTimeTeamMatch() {
  SharedDtor();
}

void stReqCancelRealTimeTeamMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCancelRealTimeTeamMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCancelRealTimeTeamMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCancelRealTimeTeamMatch_descriptor_;
}

const stReqCancelRealTimeTeamMatch& stReqCancelRealTimeTeamMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stReqCancelRealTimeTeamMatch* stReqCancelRealTimeTeamMatch::default_instance_ = NULL;

stReqCancelRealTimeTeamMatch* stReqCancelRealTimeTeamMatch::New() const {
  return new stReqCancelRealTimeTeamMatch;
}

void stReqCancelRealTimeTeamMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 1;
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCancelRealTimeTeamMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.eRealTimePKType eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eRealTimePKType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCancelRealTimeTeamMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCancelRealTimeTeamMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCancelRealTimeTeamMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.eRealTimePKType eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 teamID = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCancelRealTimeTeamMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCancelRealTimeTeamMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCancelRealTimeTeamMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCancelRealTimeTeamMatch::MergeFrom(const stReqCancelRealTimeTeamMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCancelRealTimeTeamMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCancelRealTimeTeamMatch::CopyFrom(const stReqCancelRealTimeTeamMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCancelRealTimeTeamMatch::IsInitialized() const {

  return true;
}

void stReqCancelRealTimeTeamMatch::Swap(stReqCancelRealTimeTeamMatch* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCancelRealTimeTeamMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCancelRealTimeTeamMatch_descriptor_;
  metadata.reflection = stReqCancelRealTimeTeamMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelRealTimeTeamMatchResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelRealTimeTeamMatchResult_ProtoModID_descriptor_;
}
bool stCancelRealTimeTeamMatchResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelRealTimeTeamMatchResult_ProtoModID stCancelRealTimeTeamMatchResult::ModID;
const stCancelRealTimeTeamMatchResult_ProtoModID stCancelRealTimeTeamMatchResult::ProtoModID_MIN;
const stCancelRealTimeTeamMatchResult_ProtoModID stCancelRealTimeTeamMatchResult::ProtoModID_MAX;
const int stCancelRealTimeTeamMatchResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelRealTimeTeamMatchResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelRealTimeTeamMatchResult_ProtoFunID_descriptor_;
}
bool stCancelRealTimeTeamMatchResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelRealTimeTeamMatchResult_ProtoFunID stCancelRealTimeTeamMatchResult::FunID;
const stCancelRealTimeTeamMatchResult_ProtoFunID stCancelRealTimeTeamMatchResult::ProtoFunID_MIN;
const stCancelRealTimeTeamMatchResult_ProtoFunID stCancelRealTimeTeamMatchResult::ProtoFunID_MAX;
const int stCancelRealTimeTeamMatchResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelRealTimeTeamMatchResult::kSuccessFieldNumber;
#endif  // !_MSC_VER

stCancelRealTimeTeamMatchResult::stCancelRealTimeTeamMatchResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelRealTimeTeamMatchResult::InitAsDefaultInstance() {
}

stCancelRealTimeTeamMatchResult::stCancelRealTimeTeamMatchResult(const stCancelRealTimeTeamMatchResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelRealTimeTeamMatchResult::SharedCtor() {
  _cached_size_ = 0;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelRealTimeTeamMatchResult::~stCancelRealTimeTeamMatchResult() {
  SharedDtor();
}

void stCancelRealTimeTeamMatchResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelRealTimeTeamMatchResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelRealTimeTeamMatchResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelRealTimeTeamMatchResult_descriptor_;
}

const stCancelRealTimeTeamMatchResult& stCancelRealTimeTeamMatchResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stCancelRealTimeTeamMatchResult* stCancelRealTimeTeamMatchResult::default_instance_ = NULL;

stCancelRealTimeTeamMatchResult* stCancelRealTimeTeamMatchResult::New() const {
  return new stCancelRealTimeTeamMatchResult;
}

void stCancelRealTimeTeamMatchResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelRealTimeTeamMatchResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelRealTimeTeamMatchResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelRealTimeTeamMatchResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelRealTimeTeamMatchResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool success = 1;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelRealTimeTeamMatchResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelRealTimeTeamMatchResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelRealTimeTeamMatchResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelRealTimeTeamMatchResult::MergeFrom(const stCancelRealTimeTeamMatchResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelRealTimeTeamMatchResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelRealTimeTeamMatchResult::CopyFrom(const stCancelRealTimeTeamMatchResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelRealTimeTeamMatchResult::IsInitialized() const {

  return true;
}

void stCancelRealTimeTeamMatchResult::Swap(stCancelRealTimeTeamMatchResult* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelRealTimeTeamMatchResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelRealTimeTeamMatchResult_descriptor_;
  metadata.reflection = stCancelRealTimeTeamMatchResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRealTimePKNotOpen_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimePKNotOpen_ProtoModID_descriptor_;
}
bool stRealTimePKNotOpen_ProtoModID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimePKNotOpen_ProtoModID stRealTimePKNotOpen::ModID;
const stRealTimePKNotOpen_ProtoModID stRealTimePKNotOpen::ProtoModID_MIN;
const stRealTimePKNotOpen_ProtoModID stRealTimePKNotOpen::ProtoModID_MAX;
const int stRealTimePKNotOpen::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRealTimePKNotOpen_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimePKNotOpen_ProtoFunID_descriptor_;
}
bool stRealTimePKNotOpen_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimePKNotOpen_ProtoFunID stRealTimePKNotOpen::FunID;
const stRealTimePKNotOpen_ProtoFunID stRealTimePKNotOpen::ProtoFunID_MIN;
const stRealTimePKNotOpen_ProtoFunID stRealTimePKNotOpen::ProtoFunID_MAX;
const int stRealTimePKNotOpen::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRealTimePKNotOpen::kETypeFieldNumber;
#endif  // !_MSC_VER

stRealTimePKNotOpen::stRealTimePKNotOpen()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRealTimePKNotOpen::InitAsDefaultInstance() {
}

stRealTimePKNotOpen::stRealTimePKNotOpen(const stRealTimePKNotOpen& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRealTimePKNotOpen::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRealTimePKNotOpen::~stRealTimePKNotOpen() {
  SharedDtor();
}

void stRealTimePKNotOpen::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRealTimePKNotOpen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRealTimePKNotOpen::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimePKNotOpen_descriptor_;
}

const stRealTimePKNotOpen& stRealTimePKNotOpen::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Team_2eproto();
  return *default_instance_;
}

stRealTimePKNotOpen* stRealTimePKNotOpen::default_instance_ = NULL;

stRealTimePKNotOpen* stRealTimePKNotOpen::New() const {
  return new stRealTimePKNotOpen;
}

void stRealTimePKNotOpen::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRealTimePKNotOpen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeamProto.eRealTimePKType eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TeamProto::eRealTimePKType_IsValid(value)) {
            set_etype(static_cast< ::TeamProto::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRealTimePKNotOpen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRealTimePKNotOpen::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TeamProto.eRealTimePKType eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRealTimePKNotOpen::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TeamProto.eRealTimePKType eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRealTimePKNotOpen::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRealTimePKNotOpen* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRealTimePKNotOpen*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRealTimePKNotOpen::MergeFrom(const stRealTimePKNotOpen& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRealTimePKNotOpen::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRealTimePKNotOpen::CopyFrom(const stRealTimePKNotOpen& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRealTimePKNotOpen::IsInitialized() const {

  return true;
}

void stRealTimePKNotOpen::Swap(stRealTimePKNotOpen* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRealTimePKNotOpen::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRealTimePKNotOpen_descriptor_;
  metadata.reflection = stRealTimePKNotOpen_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TeamProto

// @@protoc_insertion_point(global_scope)
