// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PubGame.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PubGame.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PubGame {

namespace {

const ::google::protobuf::Descriptor* stLoginPubGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLoginPubGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginPubGame_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginPubGame_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stTitleToPub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTitleToPub_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRoleInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNormalForwardPub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNormalForwardPub_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNormalForwardPub_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNormalForwardPub_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRoleLogout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRoleLogout_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRoleLogout_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRoleLogout_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRealTimeTeamMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRealTimeTeamMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPubForwardNormal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPubForwardNormal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPubForwardNormal_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPubForwardNormal_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPubForwardGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPubForwardGate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPubForwardGate_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPubForwardGate_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyUserOnPub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyUserOnPub_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyUserOnPub_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyUserOnPub_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPubForwardGlobal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPubForwardGlobal_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPubForwardGlobal_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPubForwardGlobal_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyOne2OneResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyOne2OneResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyOne2OneResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyOne2OneResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyRealTimeResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyRealTimeResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyRealTimeResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyRealTimeResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSaveRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSaveRoleInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddRegisterNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddRegisterNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddRegisterNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddRegisterNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHeroLeagueMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroLeagueMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHeroLeagueCancelMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroLeagueCancelMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueCancelMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroLeagueCancelMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPubRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPubRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stNotifyHeroLeagueResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyHeroLeagueResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyHeroLeagueResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyHeroLeagueResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynPubRoleList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynPubRoleList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynPubRoleList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynPubRoleList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynRoleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynRoleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynPubRoleListResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynPubRoleListResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynPubRoleListResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynPubRoleListResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqMenberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqMenberInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynChampionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynChampionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqSynChampionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqSynChampionInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGloryUserPart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGloryUserPart_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGloryUserDetail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGloryUserDetail_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGloryUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGloryUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* stEnterResBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterResBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynResBattleUserData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynResBattleUserData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynResBattleTop50_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynResBattleTop50_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynResBattleKing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynResBattleKing_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBroadResBattleInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadResBattleInvite_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplyInviteResBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplyInviteResBattle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResBattleResChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResBattleResChange_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleResChange_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResBattleResChange_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendResBattle2Pub_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendResBattle2Pub_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendResBattle2Pub_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendResBattle2Pub_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PubGameModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eRealTimePKType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_PubGame_2eproto() {
  protobuf_AddDesc_PubGame_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PubGame.proto");
  GOOGLE_CHECK(file != NULL);
  stLoginPubGame_descriptor_ = file->message_type(0);
  static const int stLoginPubGame_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginPubGame, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginPubGame, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginPubGame, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginPubGame, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginPubGame, key_),
  };
  stLoginPubGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLoginPubGame_descriptor_,
      stLoginPubGame::default_instance_,
      stLoginPubGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginPubGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginPubGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLoginPubGame));
  stLoginPubGame_ProtoModID_descriptor_ = stLoginPubGame_descriptor_->enum_type(0);
  stLoginPubGame_ProtoFunID_descriptor_ = stLoginPubGame_descriptor_->enum_type(1);
  stTitleToPub_descriptor_ = file->message_type(1);
  static const int stTitleToPub_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTitleToPub, activeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTitleToPub, gotsave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTitleToPub, notsave_),
  };
  stTitleToPub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTitleToPub_descriptor_,
      stTitleToPub::default_instance_,
      stTitleToPub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTitleToPub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTitleToPub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTitleToPub));
  stRoleInfo_descriptor_ = file->message_type(2);
  static const int stRoleInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, normalserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, normalcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, titles_),
  };
  stRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRoleInfo_descriptor_,
      stRoleInfo::default_instance_,
      stRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRoleInfo));
  stRoleInfo_ProtoModID_descriptor_ = stRoleInfo_descriptor_->enum_type(0);
  stRoleInfo_ProtoFunID_descriptor_ = stRoleInfo_descriptor_->enum_type(1);
  stNormalForwardPub_descriptor_ = file->message_type(3);
  static const int stNormalForwardPub_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNormalForwardPub, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNormalForwardPub, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNormalForwardPub, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNormalForwardPub, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNormalForwardPub, data_),
  };
  stNormalForwardPub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNormalForwardPub_descriptor_,
      stNormalForwardPub::default_instance_,
      stNormalForwardPub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNormalForwardPub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNormalForwardPub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNormalForwardPub));
  stNormalForwardPub_ProtoModID_descriptor_ = stNormalForwardPub_descriptor_->enum_type(0);
  stNormalForwardPub_ProtoFunID_descriptor_ = stNormalForwardPub_descriptor_->enum_type(1);
  stRoleLogout_descriptor_ = file->message_type(4);
  static const int stRoleLogout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleLogout, charid_),
  };
  stRoleLogout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRoleLogout_descriptor_,
      stRoleLogout::default_instance_,
      stRoleLogout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleLogout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRoleLogout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRoleLogout));
  stRoleLogout_ProtoModID_descriptor_ = stRoleLogout_descriptor_->enum_type(0);
  stRoleLogout_ProtoFunID_descriptor_ = stRoleLogout_descriptor_->enum_type(1);
  stRealTimeTeamMatch_descriptor_ = file->message_type(5);
  static const int stRealTimeTeamMatch_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatch, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatch, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatch, memberid_),
  };
  stRealTimeTeamMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRealTimeTeamMatch_descriptor_,
      stRealTimeTeamMatch::default_instance_,
      stRealTimeTeamMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRealTimeTeamMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRealTimeTeamMatch));
  stRealTimeTeamMatch_ProtoModID_descriptor_ = stRealTimeTeamMatch_descriptor_->enum_type(0);
  stRealTimeTeamMatch_ProtoFunID_descriptor_ = stRealTimeTeamMatch_descriptor_->enum_type(1);
  stPubForwardNormal_descriptor_ = file->message_type(6);
  static const int stPubForwardNormal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardNormal, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardNormal, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardNormal, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardNormal, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardNormal, data_),
  };
  stPubForwardNormal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPubForwardNormal_descriptor_,
      stPubForwardNormal::default_instance_,
      stPubForwardNormal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardNormal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardNormal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPubForwardNormal));
  stPubForwardNormal_ProtoModID_descriptor_ = stPubForwardNormal_descriptor_->enum_type(0);
  stPubForwardNormal_ProtoFunID_descriptor_ = stPubForwardNormal_descriptor_->enum_type(1);
  stPubForwardGate_descriptor_ = file->message_type(7);
  static const int stPubForwardGate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGate, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGate, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGate, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGate, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGate, data_),
  };
  stPubForwardGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPubForwardGate_descriptor_,
      stPubForwardGate::default_instance_,
      stPubForwardGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPubForwardGate));
  stPubForwardGate_ProtoModID_descriptor_ = stPubForwardGate_descriptor_->enum_type(0);
  stPubForwardGate_ProtoFunID_descriptor_ = stPubForwardGate_descriptor_->enum_type(1);
  stNotifyUserOnPub_descriptor_ = file->message_type(8);
  static const int stNotifyUserOnPub_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserOnPub, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserOnPub, onpub_),
  };
  stNotifyUserOnPub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyUserOnPub_descriptor_,
      stNotifyUserOnPub::default_instance_,
      stNotifyUserOnPub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserOnPub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserOnPub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyUserOnPub));
  stNotifyUserOnPub_ProtoModID_descriptor_ = stNotifyUserOnPub_descriptor_->enum_type(0);
  stNotifyUserOnPub_ProtoFunID_descriptor_ = stNotifyUserOnPub_descriptor_->enum_type(1);
  stPubForwardGlobal_descriptor_ = file->message_type(9);
  static const int stPubForwardGlobal_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGlobal, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGlobal, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGlobal, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGlobal, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGlobal, data_),
  };
  stPubForwardGlobal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPubForwardGlobal_descriptor_,
      stPubForwardGlobal::default_instance_,
      stPubForwardGlobal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGlobal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubForwardGlobal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPubForwardGlobal));
  stPubForwardGlobal_ProtoModID_descriptor_ = stPubForwardGlobal_descriptor_->enum_type(0);
  stPubForwardGlobal_ProtoFunID_descriptor_ = stPubForwardGlobal_descriptor_->enum_type(1);
  stNotifyOne2OneResult_descriptor_ = file->message_type(10);
  static const int stNotifyOne2OneResult_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, charid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, win1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, score1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, charid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, win2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, score2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, withfriend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, serveridx1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, serveridx2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, costlilian_),
  };
  stNotifyOne2OneResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyOne2OneResult_descriptor_,
      stNotifyOne2OneResult::default_instance_,
      stNotifyOne2OneResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyOne2OneResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyOne2OneResult));
  stNotifyOne2OneResult_ProtoModID_descriptor_ = stNotifyOne2OneResult_descriptor_->enum_type(0);
  stNotifyOne2OneResult_ProtoFunID_descriptor_ = stNotifyOne2OneResult_descriptor_->enum_type(1);
  stNotifyRealTimeResult_descriptor_ = file->message_type(11);
  static const int stNotifyRealTimeResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRealTimeResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRealTimeResult, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRealTimeResult, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRealTimeResult, costlilian_),
  };
  stNotifyRealTimeResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyRealTimeResult_descriptor_,
      stNotifyRealTimeResult::default_instance_,
      stNotifyRealTimeResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRealTimeResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyRealTimeResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyRealTimeResult));
  stNotifyRealTimeResult_ProtoModID_descriptor_ = stNotifyRealTimeResult_descriptor_->enum_type(0);
  stNotifyRealTimeResult_ProtoFunID_descriptor_ = stNotifyRealTimeResult_descriptor_->enum_type(1);
  stSaveRoleInfo_descriptor_ = file->message_type(12);
  static const int stSaveRoleInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, datasize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, normalserverid_),
  };
  stSaveRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSaveRoleInfo_descriptor_,
      stSaveRoleInfo::default_instance_,
      stSaveRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSaveRoleInfo));
  stSaveRoleInfo_ProtoModID_descriptor_ = stSaveRoleInfo_descriptor_->enum_type(0);
  stSaveRoleInfo_ProtoFunID_descriptor_ = stSaveRoleInfo_descriptor_->enum_type(1);
  stAddRegisterNum_descriptor_ = file->message_type(13);
  static const int stAddRegisterNum_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddRegisterNum, charid_),
  };
  stAddRegisterNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddRegisterNum_descriptor_,
      stAddRegisterNum::default_instance_,
      stAddRegisterNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddRegisterNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddRegisterNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddRegisterNum));
  stAddRegisterNum_ProtoModID_descriptor_ = stAddRegisterNum_descriptor_->enum_type(0);
  stAddRegisterNum_ProtoFunID_descriptor_ = stAddRegisterNum_descriptor_->enum_type(1);
  stHeroLeagueMatch_descriptor_ = file->message_type(14);
  static const int stHeroLeagueMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueMatch, charid_),
  };
  stHeroLeagueMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroLeagueMatch_descriptor_,
      stHeroLeagueMatch::default_instance_,
      stHeroLeagueMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroLeagueMatch));
  stHeroLeagueMatch_ProtoModID_descriptor_ = stHeroLeagueMatch_descriptor_->enum_type(0);
  stHeroLeagueMatch_ProtoFunID_descriptor_ = stHeroLeagueMatch_descriptor_->enum_type(1);
  stHeroLeagueCancelMatch_descriptor_ = file->message_type(15);
  static const int stHeroLeagueCancelMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueCancelMatch, charid_),
  };
  stHeroLeagueCancelMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroLeagueCancelMatch_descriptor_,
      stHeroLeagueCancelMatch::default_instance_,
      stHeroLeagueCancelMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueCancelMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroLeagueCancelMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroLeagueCancelMatch));
  stHeroLeagueCancelMatch_ProtoModID_descriptor_ = stHeroLeagueCancelMatch_descriptor_->enum_type(0);
  stHeroLeagueCancelMatch_ProtoFunID_descriptor_ = stHeroLeagueCancelMatch_descriptor_->enum_type(1);
  stPubRoleInfo_descriptor_ = file->message_type(16);
  static const int stPubRoleInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, pubcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, pubserverindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, winorloss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, photoid_),
  };
  stPubRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPubRoleInfo_descriptor_,
      stPubRoleInfo::default_instance_,
      stPubRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPubRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPubRoleInfo));
  stNotifyHeroLeagueResult_descriptor_ = file->message_type(17);
  static const int stNotifyHeroLeagueResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyHeroLeagueResult, user1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyHeroLeagueResult, user2_),
  };
  stNotifyHeroLeagueResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyHeroLeagueResult_descriptor_,
      stNotifyHeroLeagueResult::default_instance_,
      stNotifyHeroLeagueResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyHeroLeagueResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyHeroLeagueResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyHeroLeagueResult));
  stNotifyHeroLeagueResult_ProtoModID_descriptor_ = stNotifyHeroLeagueResult_descriptor_->enum_type(0);
  stNotifyHeroLeagueResult_ProtoFunID_descriptor_ = stNotifyHeroLeagueResult_descriptor_->enum_type(1);
  stSynPubRoleList_descriptor_ = file->message_type(18);
  static const int stSynPubRoleList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPubRoleList, tag_),
  };
  stSynPubRoleList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynPubRoleList_descriptor_,
      stSynPubRoleList::default_instance_,
      stSynPubRoleList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPubRoleList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPubRoleList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynPubRoleList));
  stSynPubRoleList_ProtoModID_descriptor_ = stSynPubRoleList_descriptor_->enum_type(0);
  stSynPubRoleList_ProtoFunID_descriptor_ = stSynPubRoleList_descriptor_->enum_type(1);
  stSynRoleInfo_descriptor_ = file->message_type(19);
  static const int stSynRoleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleInfo, pubcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleInfo, pubserverindex_),
  };
  stSynRoleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynRoleInfo_descriptor_,
      stSynRoleInfo::default_instance_,
      stSynRoleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynRoleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynRoleInfo));
  stTeam_descriptor_ = file->message_type(20);
  static const int stTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, user1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, user2_),
  };
  stTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTeam_descriptor_,
      stTeam::default_instance_,
      stTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTeam));
  stSynPubRoleListResult_descriptor_ = file->message_type(21);
  static const int stSynPubRoleListResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPubRoleListResult, team_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPubRoleListResult, charids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPubRoleListResult, isfinal_),
  };
  stSynPubRoleListResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynPubRoleListResult_descriptor_,
      stSynPubRoleListResult::default_instance_,
      stSynPubRoleListResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPubRoleListResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPubRoleListResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynPubRoleListResult));
  stSynPubRoleListResult_ProtoModID_descriptor_ = stSynPubRoleListResult_descriptor_->enum_type(0);
  stSynPubRoleListResult_ProtoFunID_descriptor_ = stSynPubRoleListResult_descriptor_->enum_type(1);
  stReqMenberInfo_descriptor_ = file->message_type(22);
  static const int stReqMenberInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMenberInfo, charid_),
  };
  stReqMenberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqMenberInfo_descriptor_,
      stReqMenberInfo::default_instance_,
      stReqMenberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMenberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqMenberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqMenberInfo));
  stReqMenberInfo_ProtoModID_descriptor_ = stReqMenberInfo_descriptor_->enum_type(0);
  stReqMenberInfo_ProtoFunID_descriptor_ = stReqMenberInfo_descriptor_->enum_type(1);
  stSynChampionInfo_descriptor_ = file->message_type(23);
  static const int stSynChampionInfo_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, photoid_),
  };
  stSynChampionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynChampionInfo_descriptor_,
      stSynChampionInfo::default_instance_,
      stSynChampionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynChampionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynChampionInfo));
  stReqSynChampionInfo_descriptor_ = file->message_type(24);
  static const int stReqSynChampionInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSynChampionInfo, info_),
  };
  stReqSynChampionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqSynChampionInfo_descriptor_,
      stReqSynChampionInfo::default_instance_,
      stReqSynChampionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSynChampionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqSynChampionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqSynChampionInfo));
  stReqSynChampionInfo_ProtoModID_descriptor_ = stReqSynChampionInfo_descriptor_->enum_type(0);
  stReqSynChampionInfo_ProtoFunID_descriptor_ = stReqSynChampionInfo_descriptor_->enum_type(1);
  stGloryUserPart_descriptor_ = file->message_type(25);
  static const int stGloryUserPart_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, wingbreaklv_),
  };
  stGloryUserPart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGloryUserPart_descriptor_,
      stGloryUserPart::default_instance_,
      stGloryUserPart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserPart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGloryUserPart));
  stGloryUserDetail_descriptor_ = file->message_type(26);
  static const int stGloryUserDetail_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, bodyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, weaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, cloackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, wingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, shoeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashionhair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashionface_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashionbody_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashionweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashionshoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, fashiondecoration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, effectid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, wingbreaklv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, evenkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, totalkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, gloryval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, gloryactiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, prostatednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, prostatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, normalid_),
  };
  stGloryUserDetail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGloryUserDetail_descriptor_,
      stGloryUserDetail::default_instance_,
      stGloryUserDetail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUserDetail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGloryUserDetail));
  stGloryUser_descriptor_ = file->message_type(27);
  static const int stGloryUser_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, areacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, evenkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, totalkillnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, gloryval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, gloryactiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, prostatednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, prostatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, normalid_),
  };
  stGloryUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGloryUser_descriptor_,
      stGloryUser::default_instance_,
      stGloryUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGloryUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGloryUser));
  stEnterResBattle_descriptor_ = file->message_type(28);
  static const int stEnterResBattle_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, copymaplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, self_),
  };
  stEnterResBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterResBattle_descriptor_,
      stEnterResBattle::default_instance_,
      stEnterResBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterResBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterResBattle));
  stEnterResBattle_ProtoModID_descriptor_ = stEnterResBattle_descriptor_->enum_type(0);
  stEnterResBattle_ProtoFunID_descriptor_ = stEnterResBattle_descriptor_->enum_type(1);
  stSynResBattleUserData_descriptor_ = file->message_type(29);
  static const int stSynResBattleUserData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleUserData, user_),
  };
  stSynResBattleUserData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynResBattleUserData_descriptor_,
      stSynResBattleUserData::default_instance_,
      stSynResBattleUserData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleUserData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleUserData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynResBattleUserData));
  stSynResBattleUserData_ProtoModID_descriptor_ = stSynResBattleUserData_descriptor_->enum_type(0);
  stSynResBattleUserData_ProtoFunID_descriptor_ = stSynResBattleUserData_descriptor_->enum_type(1);
  stSynResBattleTop50_descriptor_ = file->message_type(30);
  static const int stSynResBattleTop50_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleTop50, detail_),
  };
  stSynResBattleTop50_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynResBattleTop50_descriptor_,
      stSynResBattleTop50::default_instance_,
      stSynResBattleTop50_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleTop50, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleTop50, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynResBattleTop50));
  stSynResBattleTop50_ProtoModID_descriptor_ = stSynResBattleTop50_descriptor_->enum_type(0);
  stSynResBattleTop50_ProtoFunID_descriptor_ = stSynResBattleTop50_descriptor_->enum_type(1);
  stSynResBattleKing_descriptor_ = file->message_type(31);
  static const int stSynResBattleKing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleKing, clear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleKing, king_),
  };
  stSynResBattleKing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynResBattleKing_descriptor_,
      stSynResBattleKing::default_instance_,
      stSynResBattleKing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleKing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynResBattleKing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynResBattleKing));
  stSynResBattleKing_ProtoModID_descriptor_ = stSynResBattleKing_descriptor_->enum_type(0);
  stSynResBattleKing_ProtoFunID_descriptor_ = stSynResBattleKing_descriptor_->enum_type(1);
  stBroadResBattleInvite_descriptor_ = file->message_type(32);
  static const int stBroadResBattleInvite_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, instancelvl_),
  };
  stBroadResBattleInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadResBattleInvite_descriptor_,
      stBroadResBattleInvite::default_instance_,
      stBroadResBattleInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadResBattleInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadResBattleInvite));
  stBroadResBattleInvite_ProtoModID_descriptor_ = stBroadResBattleInvite_descriptor_->enum_type(0);
  stBroadResBattleInvite_ProtoFunID_descriptor_ = stBroadResBattleInvite_descriptor_->enum_type(1);
  stReplyInviteResBattle_descriptor_ = file->message_type(33);
  static const int stReplyInviteResBattle_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, agree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, inviteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, self_),
  };
  stReplyInviteResBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplyInviteResBattle_descriptor_,
      stReplyInviteResBattle::default_instance_,
      stReplyInviteResBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyInviteResBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplyInviteResBattle));
  stReplyInviteResBattle_ProtoModID_descriptor_ = stReplyInviteResBattle_descriptor_->enum_type(0);
  stReplyInviteResBattle_ProtoFunID_descriptor_ = stReplyInviteResBattle_descriptor_->enum_type(1);
  stResBattleResChange_descriptor_ = file->message_type(34);
  static const int stResBattleResChange_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResChange, isadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResChange, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResChange, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResChange, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResChange, desc_),
  };
  stResBattleResChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResBattleResChange_descriptor_,
      stResBattleResChange::default_instance_,
      stResBattleResChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResBattleResChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResBattleResChange));
  stResBattleResChange_ProtoModID_descriptor_ = stResBattleResChange_descriptor_->enum_type(0);
  stResBattleResChange_ProtoFunID_descriptor_ = stResBattleResChange_descriptor_->enum_type(1);
  stSendResBattle2Pub_descriptor_ = file->message_type(35);
  static const int stSendResBattle2Pub_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattle2Pub, king_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattle2Pub, detail_),
  };
  stSendResBattle2Pub_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendResBattle2Pub_descriptor_,
      stSendResBattle2Pub::default_instance_,
      stSendResBattle2Pub_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattle2Pub, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendResBattle2Pub, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendResBattle2Pub));
  stSendResBattle2Pub_ProtoModID_descriptor_ = stSendResBattle2Pub_descriptor_->enum_type(0);
  stSendResBattle2Pub_ProtoFunID_descriptor_ = stSendResBattle2Pub_descriptor_->enum_type(1);
  PubGameModID_descriptor_ = file->enum_type(0);
  eRealTimePKType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PubGame_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLoginPubGame_descriptor_, &stLoginPubGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTitleToPub_descriptor_, &stTitleToPub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRoleInfo_descriptor_, &stRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNormalForwardPub_descriptor_, &stNormalForwardPub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRoleLogout_descriptor_, &stRoleLogout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRealTimeTeamMatch_descriptor_, &stRealTimeTeamMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPubForwardNormal_descriptor_, &stPubForwardNormal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPubForwardGate_descriptor_, &stPubForwardGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyUserOnPub_descriptor_, &stNotifyUserOnPub::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPubForwardGlobal_descriptor_, &stPubForwardGlobal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyOne2OneResult_descriptor_, &stNotifyOne2OneResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyRealTimeResult_descriptor_, &stNotifyRealTimeResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSaveRoleInfo_descriptor_, &stSaveRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddRegisterNum_descriptor_, &stAddRegisterNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroLeagueMatch_descriptor_, &stHeroLeagueMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroLeagueCancelMatch_descriptor_, &stHeroLeagueCancelMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPubRoleInfo_descriptor_, &stPubRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyHeroLeagueResult_descriptor_, &stNotifyHeroLeagueResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynPubRoleList_descriptor_, &stSynPubRoleList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynRoleInfo_descriptor_, &stSynRoleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTeam_descriptor_, &stTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynPubRoleListResult_descriptor_, &stSynPubRoleListResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqMenberInfo_descriptor_, &stReqMenberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynChampionInfo_descriptor_, &stSynChampionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqSynChampionInfo_descriptor_, &stReqSynChampionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGloryUserPart_descriptor_, &stGloryUserPart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGloryUserDetail_descriptor_, &stGloryUserDetail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGloryUser_descriptor_, &stGloryUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterResBattle_descriptor_, &stEnterResBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynResBattleUserData_descriptor_, &stSynResBattleUserData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynResBattleTop50_descriptor_, &stSynResBattleTop50::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynResBattleKing_descriptor_, &stSynResBattleKing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadResBattleInvite_descriptor_, &stBroadResBattleInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplyInviteResBattle_descriptor_, &stReplyInviteResBattle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResBattleResChange_descriptor_, &stResBattleResChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendResBattle2Pub_descriptor_, &stSendResBattle2Pub::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PubGame_2eproto() {
  delete stLoginPubGame::default_instance_;
  delete stLoginPubGame_reflection_;
  delete stTitleToPub::default_instance_;
  delete stTitleToPub_reflection_;
  delete stRoleInfo::default_instance_;
  delete stRoleInfo_reflection_;
  delete stNormalForwardPub::default_instance_;
  delete stNormalForwardPub_reflection_;
  delete stRoleLogout::default_instance_;
  delete stRoleLogout_reflection_;
  delete stRealTimeTeamMatch::default_instance_;
  delete stRealTimeTeamMatch_reflection_;
  delete stPubForwardNormal::default_instance_;
  delete stPubForwardNormal_reflection_;
  delete stPubForwardGate::default_instance_;
  delete stPubForwardGate_reflection_;
  delete stNotifyUserOnPub::default_instance_;
  delete stNotifyUserOnPub_reflection_;
  delete stPubForwardGlobal::default_instance_;
  delete stPubForwardGlobal_reflection_;
  delete stNotifyOne2OneResult::default_instance_;
  delete stNotifyOne2OneResult_reflection_;
  delete stNotifyRealTimeResult::default_instance_;
  delete stNotifyRealTimeResult_reflection_;
  delete stSaveRoleInfo::default_instance_;
  delete stSaveRoleInfo_reflection_;
  delete stAddRegisterNum::default_instance_;
  delete stAddRegisterNum_reflection_;
  delete stHeroLeagueMatch::default_instance_;
  delete stHeroLeagueMatch_reflection_;
  delete stHeroLeagueCancelMatch::default_instance_;
  delete stHeroLeagueCancelMatch_reflection_;
  delete stPubRoleInfo::default_instance_;
  delete stPubRoleInfo_reflection_;
  delete stNotifyHeroLeagueResult::default_instance_;
  delete stNotifyHeroLeagueResult_reflection_;
  delete stSynPubRoleList::default_instance_;
  delete stSynPubRoleList_reflection_;
  delete stSynRoleInfo::default_instance_;
  delete stSynRoleInfo_reflection_;
  delete stTeam::default_instance_;
  delete stTeam_reflection_;
  delete stSynPubRoleListResult::default_instance_;
  delete stSynPubRoleListResult_reflection_;
  delete stReqMenberInfo::default_instance_;
  delete stReqMenberInfo_reflection_;
  delete stSynChampionInfo::default_instance_;
  delete stSynChampionInfo_reflection_;
  delete stReqSynChampionInfo::default_instance_;
  delete stReqSynChampionInfo_reflection_;
  delete stGloryUserPart::default_instance_;
  delete stGloryUserPart_reflection_;
  delete stGloryUserDetail::default_instance_;
  delete stGloryUserDetail_reflection_;
  delete stGloryUser::default_instance_;
  delete stGloryUser_reflection_;
  delete stEnterResBattle::default_instance_;
  delete stEnterResBattle_reflection_;
  delete stSynResBattleUserData::default_instance_;
  delete stSynResBattleUserData_reflection_;
  delete stSynResBattleTop50::default_instance_;
  delete stSynResBattleTop50_reflection_;
  delete stSynResBattleKing::default_instance_;
  delete stSynResBattleKing_reflection_;
  delete stBroadResBattleInvite::default_instance_;
  delete stBroadResBattleInvite_reflection_;
  delete stReplyInviteResBattle::default_instance_;
  delete stReplyInviteResBattle_reflection_;
  delete stResBattleResChange::default_instance_;
  delete stResBattleResChange_reflection_;
  delete stSendResBattle2Pub::default_instance_;
  delete stSendResBattle2Pub_reflection_;
}

void protobuf_AddDesc_PubGame_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rPubGame.proto\022\007PubGame\"\211\001\n\016stLoginPubG"
    "ame\022\017\n\007svrType\030\001 \001(\r\022\r\n\005svrID\030\002 \001(\r\022\n\n\002i"
    "p\030\003 \001(\t\022\014\n\004port\030\004 \001(\r\022\013\n\003key\030\005 \001(\t\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\001\"B\n\014stTitleToPub\022\020\n\010activeID\030\001 \001(\r\022\017"
    "\n\007gotSave\030\002 \003(\r\022\017\n\007notSave\030\003 \003(\r\"\201\002\n\nstR"
    "oleInfo\022\016\n\006charID\030\001 \001(\r\022\017\n\007account\030\002 \001(\t"
    "\022\020\n\010dataSize\030\003 \001(\r\022\014\n\004data\030\004 \001(\014\022\n\n\002ip\030\005"
    " \001(\t\022\026\n\016normalServerID\030\006 \001(\r\022\024\n\014normalCh"
    "arID\030\007 \001(\r\022\020\n\010areaCode\030\010 \001(\r\022\r\n\005mapId\030\t "
    "\001(\r\022%\n\006titles\030\n \001(\0132\025.PubGame.stTitleToP"
    "ub\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\002\"\222\001\n\022stNormalForwardPub\022\016\n\006c"
    "harID\030\001 \001(\r\022\r\n\005modID\030\002 \001(\r\022\r\n\005funID\030\003 \001("
    "\r\022\016\n\006cmdLen\030\004 \001(\r\022\014\n\004data\030\005 \001(\014\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\003\"P\n\014stRoleLogout\022\016\n\006charID\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\004\"\222\001\n\023stRealTimeTeamMatch\022\'\n\005eType\030\001 \001"
    "(\0162\030.PubGame.eRealTimePKType\022\016\n\006teamID\030\002"
    " \001(\r\022\020\n\010memberId\030\003 \003(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\005\"\222\001\n\022stP"
    "ubForwardNormal\022\016\n\006charID\030\001 \001(\r\022\r\n\005modID"
    "\030\002 \001(\r\022\r\n\005funID\030\003 \001(\r\022\016\n\006cmdLen\030\004 \001(\r\022\014\n"
    "\004data\030\005 \001(\014\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\001\"\220\001\n\020stPubForwardGa"
    "te\022\016\n\006charID\030\001 \001(\r\022\r\n\005modID\030\002 \001(\r\022\r\n\005fun"
    "ID\030\003 \001(\r\022\016\n\006cmdLen\030\004 \001(\r\022\014\n\004data\030\005 \001(\014\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020\002\"d\n\021stNotifyUserOnPub\022\016\n\006charID\030"
    "\001 \001(\r\022\r\n\005onPub\030\002 \001(\010\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\003\"\222\001\n\022stPub"
    "ForwardGlobal\022\016\n\006charID\030\001 \001(\r\022\r\n\005modID\030\002"
    " \001(\r\022\r\n\005funID\030\003 \001(\r\022\016\n\006cmdLen\030\004 \001(\r\022\014\n\004d"
    "ata\030\005 \001(\014\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020\004\"\367\001\n\025stNotifyOne2OneR"
    "esult\022\017\n\007charID1\030\001 \001(\r\022\014\n\004win1\030\002 \001(\010\022\016\n\006"
    "score1\030\003 \001(\r\022\017\n\007charID2\030\004 \001(\r\022\014\n\004win2\030\005 "
    "\001(\010\022\016\n\006score2\030\006 \001(\r\022\022\n\nwithfriend\030\007 \001(\010\022"
    "\022\n\nserverIdx1\030\010 \001(\r\022\022\n\nserverIdx2\030\t \001(\r\022"
    "\022\n\ncostLiLian\030\n \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\005\"\243\001\n\026stNoti"
    "fyRealTimeResult\022\016\n\006charID\030\001 \001(\r\022\013\n\003win\030"
    "\002 \001(\010\022&\n\004type\030\003 \001(\0162\030.PubGame.eRealTimeP"
    "KType\022\022\n\ncostLilian\030\004 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\006\"\212\001\n\016"
    "stSaveRoleInfo\022\016\n\006charID\030\001 \001(\r\022\020\n\010dataSi"
    "ze\030\002 \001(\r\022\014\n\004data\030\003 \001(\014\022\026\n\016normalServerID"
    "\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\007\"T\n\020stAddRegisterNum\022\016\n\006"
    "charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\010\"U\n\021stHeroLeagueMa"
    "tch\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\t\"[\n\027stHeroL"
    "eagueCancelMatch\022\016\n\006charID\030\001 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020\n\"\352\001\n\rstPubRoleInfo\022\016\n\006charID\030\001 \001(\r\022\021\n\t"
    "pubCharID\030\002 \001(\r\022\020\n\010areaCode\030\003 \001(\r\022\014\n\004nam"
    "e\030\004 \001(\t\022\r\n\005level\030\005 \001(\r\022\r\n\005vipLv\030\006 \001(\r\022\013\n"
    "\003job\030\007 \001(\r\022\013\n\003sex\030\010 \001(\r\022\023\n\013battlePower\030\t"
    " \001(\r\022\026\n\016pubServerIndex\030\n \001(\r\022\r\n\005score\030\013 "
    "\001(\r\022\021\n\twinOrLoss\030\014 \001(\010\022\017\n\007photoID\030\r \001(\r\""
    "\232\001\n\030stNotifyHeroLeagueResult\022%\n\005user1\030\001 "
    "\001(\0132\026.PubGame.stPubRoleInfo\022%\n\005user2\030\002 \001"
    "(\0132\026.PubGame.stPubRoleInfo\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\n\"Q\n\020"
    "stSynPubRoleList\022\013\n\003tag\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\013\""
    ":\n\rstSynRoleInfo\022\021\n\tpubCharID\030\001 \001(\r\022\026\n\016p"
    "ubServerIndex\030\002 \001(\r\"V\n\006stTeam\022%\n\005user1\030\001"
    " \001(\0132\026.PubGame.stPubRoleInfo\022%\n\005user2\030\002 "
    "\001(\0132\026.PubGame.stPubRoleInfo\"\243\001\n\026stSynPub"
    "RoleListResult\022\035\n\004team\030\001 \003(\0132\017.PubGame.s"
    "tTeam\022\'\n\007charIDs\030\002 \003(\0132\026.PubGame.stPubRo"
    "leInfo\022\017\n\007isFinal\030\003 \001(\010\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\014\"S\n\017stR"
    "eqMenberInfo\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\r\"\300"
    "\003\n\021stSynChampionInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004"
    "name\030\002 \001(\t\022\020\n\010areaCode\030\003 \001(\r\022\r\n\005level\030\004 "
    "\001(\r\022\013\n\003job\030\005 \001(\r\022\013\n\003sex\030\006 \001(\r\022\016\n\006leader\030"
    "\007 \001(\010\022\023\n\013battlePower\030\010 \001(\r\022\013\n\003pos\030\t \001(\r\022"
    "\016\n\006headID\030\n \001(\r\022\016\n\006bodyID\030\013 \001(\r\022\020\n\010weapo"
    "nID\030\014 \001(\r\022\020\n\010cloackID\030\r \001(\r\022\016\n\006wingID\030\016 "
    "\001(\r\022\016\n\006shoeID\030\017 \001(\r\022\023\n\013fashionHair\030\020 \001(\r"
    "\022\023\n\013fashionFace\030\021 \001(\r\022\023\n\013fashionBody\030\022 \001"
    "(\r\022\025\n\rfashionWeapon\030\023 \001(\r\022\023\n\013fashionShoe"
    "\030\024 \001(\r\022\031\n\021fashionDecoration\030\025 \001(\r\022\020\n\010eff"
    "ectID\030\026 \001(\r\022\023\n\013wingBreakLv\030\027 \001(\r\022\017\n\007phot"
    "oID\030\030 \001(\r\"r\n\024stReqSynChampionInfo\022(\n\004inf"
    "o\030\001 \001(\0132\032.PubGame.stSynChampionInfo\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020\016\"\220\003\n\017stGloryUserPart\022\016\n\006charID\030\001 \001("
    "\r\022\020\n\010areaCode\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\013\n\003job"
    "\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022\023\n\013ba"
    "ttlePower\030\007 \001(\r\022\016\n\006headID\030\010 \001(\r\022\016\n\006bodyI"
    "D\030\t \001(\r\022\020\n\010weaponID\030\n \001(\r\022\020\n\010cloackID\030\013 "
    "\001(\r\022\016\n\006wingID\030\014 \001(\r\022\016\n\006shoeID\030\r \001(\r\022\023\n\013f"
    "ashionHair\030\016 \001(\r\022\023\n\013fashionFace\030\017 \001(\r\022\023\n"
    "\013fashionBody\030\020 \001(\r\022\025\n\rfashionWeapon\030\021 \001("
    "\r\022\023\n\013fashionShoe\030\022 \001(\r\022\031\n\021fashionDecorat"
    "ion\030\023 \001(\r\022\020\n\010effectID\030\024 \001(\r\022\023\n\013wingBreak"
    "Lv\030\025 \001(\r\"\267\004\n\021stGloryUserDetail\022\016\n\006charID"
    "\030\001 \001(\r\022\020\n\010areaCode\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\022\013"
    "\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\r\n\005level\030\006 \001(\r\022"
    "\023\n\013battlePower\030\007 \001(\r\022\016\n\006headID\030\010 \001(\r\022\016\n\006"
    "bodyID\030\t \001(\r\022\020\n\010weaponID\030\n \001(\r\022\020\n\010cloack"
    "ID\030\013 \001(\r\022\016\n\006wingID\030\014 \001(\r\022\016\n\006shoeID\030\r \001(\r"
    "\022\023\n\013fashionHair\030\016 \001(\r\022\023\n\013fashionFace\030\017 \001"
    "(\r\022\023\n\013fashionBody\030\020 \001(\r\022\025\n\rfashionWeapon"
    "\030\021 \001(\r\022\023\n\013fashionShoe\030\022 \001(\r\022\031\n\021fashionDe"
    "coration\030\023 \001(\r\022\020\n\010effectID\030\024 \001(\r\022\023\n\013wing"
    "BreakLv\030\025 \001(\r\022\017\n\007killNum\030\026 \001(\r\022\023\n\013evenKi"
    "llNum\030\027 \001(\r\022\024\n\014totalKillNum\030\030 \001(\r\022\020\n\010glo"
    "ryVal\030\031 \001(\r\022\027\n\017gloryActionTime\030\032 \001(\r\022\024\n\014"
    "prostatedNum\030\033 \001(\r\022\024\n\014prostateTime\030\034 \001(\r"
    "\022\020\n\010normalId\030\035 \001(\r\"\342\001\n\013stGloryUser\022\016\n\006ch"
    "arID\030\001 \001(\r\022\020\n\010areaCode\030\002 \001(\r\022\014\n\004name\030\003 \001"
    "(\t\022\017\n\007killNum\030\004 \001(\r\022\023\n\013evenKillNum\030\005 \001(\r"
    "\022\024\n\014totalKillNum\030\006 \001(\r\022\020\n\010gloryVal\030\007 \001(\r"
    "\022\027\n\017gloryActionTime\030\010 \001(\r\022\024\n\014prostatedNu"
    "m\030\t \001(\r\022\024\n\014prostateTime\030\n \001(\r\022\020\n\010normalI"
    "d\030\013 \001(\r\"\237\001\n\020stEnterResBattle\022\016\n\006charId\030\001"
    " \001(\r\022\024\n\014copyMapLevel\030\002 \001(\r\022\017\n\007guildId\030\003 "
    "\001(\r\022\"\n\004self\030\004 \001(\0132\024.PubGame.stGloryUser\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\017\"n\n\026stSynResBattleUserData\022\"\n\004u"
    "ser\030\001 \001(\0132\024.PubGame.stGloryUser\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\020\"q\n\023stSynResBattleTop50\022(\n\006detail\030\001 \003(\013"
    "2\030.PubGame.stGloryUserPart\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\021\"\177\n\022"
    "stSynResBattleKing\022\r\n\005clear\030\001 \001(\010\022(\n\004kin"
    "g\030\002 \001(\0132\032.PubGame.stGloryUserDetail\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020\022\"\314\001\n\026stBroadResBattleInvite\022\016\n\006char"
    "Id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007guildId\030\003 \001(\r\022"
    "\013\n\003job\030\004 \001(\r\022\013\n\003sex\030\005 \001(\r\022\023\n\013battlePower"
    "\030\006 \001(\r\022\r\n\005vipLv\030\007 \001(\r\022\023\n\013instanceLvl\030\010 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\023\"\260\001\n\026stReplyInviteResBattle\022"
    "\r\n\005agree\030\001 \001(\010\022\016\n\006charId\030\002 \001(\r\022\017\n\007guildI"
    "d\030\003 \001(\r\022\020\n\010inviteId\030\004 \001(\r\022\"\n\004self\030\005 \001(\0132"
    "\024.PubGame.stGloryUser\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\024\"\220\001\n\024stRe"
    "sBattleResChange\022\r\n\005isAdd\030\001 \001(\010\022\016\n\006charI"
    "d\030\002 \001(\r\022\014\n\004item\030\003 \001(\r\022\013\n\003val\030\004 \001(\r\022\014\n\004de"
    "sc\030\005 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\025\"\235\001\n\023stSendResBattle2P"
    "ub\022(\n\004king\030\001 \001(\0132\032.PubGame.stGloryUserDe"
    "tail\022*\n\006detail\030\002 \003(\0132\032.PubGame.stGloryUs"
    "erDetail\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\026*6\n\014PubGameModID\022\022\n\016NO"
    "RMAL2PUB_MOD\020\002\022\022\n\016PUB2NORMAL_MOD\020\003*J\n\017eR"
    "ealTimePKType\022\033\n\027eRealTimePKType_KillAll"
    "\020\001\022\032\n\026eRealTimePKType_Finish\020\002", 6230);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PubGame.proto", &protobuf_RegisterTypes);
  stLoginPubGame::default_instance_ = new stLoginPubGame();
  stTitleToPub::default_instance_ = new stTitleToPub();
  stRoleInfo::default_instance_ = new stRoleInfo();
  stNormalForwardPub::default_instance_ = new stNormalForwardPub();
  stRoleLogout::default_instance_ = new stRoleLogout();
  stRealTimeTeamMatch::default_instance_ = new stRealTimeTeamMatch();
  stPubForwardNormal::default_instance_ = new stPubForwardNormal();
  stPubForwardGate::default_instance_ = new stPubForwardGate();
  stNotifyUserOnPub::default_instance_ = new stNotifyUserOnPub();
  stPubForwardGlobal::default_instance_ = new stPubForwardGlobal();
  stNotifyOne2OneResult::default_instance_ = new stNotifyOne2OneResult();
  stNotifyRealTimeResult::default_instance_ = new stNotifyRealTimeResult();
  stSaveRoleInfo::default_instance_ = new stSaveRoleInfo();
  stAddRegisterNum::default_instance_ = new stAddRegisterNum();
  stHeroLeagueMatch::default_instance_ = new stHeroLeagueMatch();
  stHeroLeagueCancelMatch::default_instance_ = new stHeroLeagueCancelMatch();
  stPubRoleInfo::default_instance_ = new stPubRoleInfo();
  stNotifyHeroLeagueResult::default_instance_ = new stNotifyHeroLeagueResult();
  stSynPubRoleList::default_instance_ = new stSynPubRoleList();
  stSynRoleInfo::default_instance_ = new stSynRoleInfo();
  stTeam::default_instance_ = new stTeam();
  stSynPubRoleListResult::default_instance_ = new stSynPubRoleListResult();
  stReqMenberInfo::default_instance_ = new stReqMenberInfo();
  stSynChampionInfo::default_instance_ = new stSynChampionInfo();
  stReqSynChampionInfo::default_instance_ = new stReqSynChampionInfo();
  stGloryUserPart::default_instance_ = new stGloryUserPart();
  stGloryUserDetail::default_instance_ = new stGloryUserDetail();
  stGloryUser::default_instance_ = new stGloryUser();
  stEnterResBattle::default_instance_ = new stEnterResBattle();
  stSynResBattleUserData::default_instance_ = new stSynResBattleUserData();
  stSynResBattleTop50::default_instance_ = new stSynResBattleTop50();
  stSynResBattleKing::default_instance_ = new stSynResBattleKing();
  stBroadResBattleInvite::default_instance_ = new stBroadResBattleInvite();
  stReplyInviteResBattle::default_instance_ = new stReplyInviteResBattle();
  stResBattleResChange::default_instance_ = new stResBattleResChange();
  stSendResBattle2Pub::default_instance_ = new stSendResBattle2Pub();
  stLoginPubGame::default_instance_->InitAsDefaultInstance();
  stTitleToPub::default_instance_->InitAsDefaultInstance();
  stRoleInfo::default_instance_->InitAsDefaultInstance();
  stNormalForwardPub::default_instance_->InitAsDefaultInstance();
  stRoleLogout::default_instance_->InitAsDefaultInstance();
  stRealTimeTeamMatch::default_instance_->InitAsDefaultInstance();
  stPubForwardNormal::default_instance_->InitAsDefaultInstance();
  stPubForwardGate::default_instance_->InitAsDefaultInstance();
  stNotifyUserOnPub::default_instance_->InitAsDefaultInstance();
  stPubForwardGlobal::default_instance_->InitAsDefaultInstance();
  stNotifyOne2OneResult::default_instance_->InitAsDefaultInstance();
  stNotifyRealTimeResult::default_instance_->InitAsDefaultInstance();
  stSaveRoleInfo::default_instance_->InitAsDefaultInstance();
  stAddRegisterNum::default_instance_->InitAsDefaultInstance();
  stHeroLeagueMatch::default_instance_->InitAsDefaultInstance();
  stHeroLeagueCancelMatch::default_instance_->InitAsDefaultInstance();
  stPubRoleInfo::default_instance_->InitAsDefaultInstance();
  stNotifyHeroLeagueResult::default_instance_->InitAsDefaultInstance();
  stSynPubRoleList::default_instance_->InitAsDefaultInstance();
  stSynRoleInfo::default_instance_->InitAsDefaultInstance();
  stTeam::default_instance_->InitAsDefaultInstance();
  stSynPubRoleListResult::default_instance_->InitAsDefaultInstance();
  stReqMenberInfo::default_instance_->InitAsDefaultInstance();
  stSynChampionInfo::default_instance_->InitAsDefaultInstance();
  stReqSynChampionInfo::default_instance_->InitAsDefaultInstance();
  stGloryUserPart::default_instance_->InitAsDefaultInstance();
  stGloryUserDetail::default_instance_->InitAsDefaultInstance();
  stGloryUser::default_instance_->InitAsDefaultInstance();
  stEnterResBattle::default_instance_->InitAsDefaultInstance();
  stSynResBattleUserData::default_instance_->InitAsDefaultInstance();
  stSynResBattleTop50::default_instance_->InitAsDefaultInstance();
  stSynResBattleKing::default_instance_->InitAsDefaultInstance();
  stBroadResBattleInvite::default_instance_->InitAsDefaultInstance();
  stReplyInviteResBattle::default_instance_->InitAsDefaultInstance();
  stResBattleResChange::default_instance_->InitAsDefaultInstance();
  stSendResBattle2Pub::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PubGame_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PubGame_2eproto {
  StaticDescriptorInitializer_PubGame_2eproto() {
    protobuf_AddDesc_PubGame_2eproto();
  }
} static_descriptor_initializer_PubGame_2eproto_;
const ::google::protobuf::EnumDescriptor* PubGameModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PubGameModID_descriptor_;
}
bool PubGameModID_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRealTimePKType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eRealTimePKType_descriptor_;
}
bool eRealTimePKType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLoginPubGame_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginPubGame_ProtoModID_descriptor_;
}
bool stLoginPubGame_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginPubGame_ProtoModID stLoginPubGame::ModID;
const stLoginPubGame_ProtoModID stLoginPubGame::ProtoModID_MIN;
const stLoginPubGame_ProtoModID stLoginPubGame::ProtoModID_MAX;
const int stLoginPubGame::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLoginPubGame_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginPubGame_ProtoFunID_descriptor_;
}
bool stLoginPubGame_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginPubGame_ProtoFunID stLoginPubGame::FunID;
const stLoginPubGame_ProtoFunID stLoginPubGame::ProtoFunID_MIN;
const stLoginPubGame_ProtoFunID stLoginPubGame::ProtoFunID_MAX;
const int stLoginPubGame::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLoginPubGame::kSvrTypeFieldNumber;
const int stLoginPubGame::kSvrIDFieldNumber;
const int stLoginPubGame::kIpFieldNumber;
const int stLoginPubGame::kPortFieldNumber;
const int stLoginPubGame::kKeyFieldNumber;
#endif  // !_MSC_VER

stLoginPubGame::stLoginPubGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLoginPubGame::InitAsDefaultInstance() {
}

stLoginPubGame::stLoginPubGame(const stLoginPubGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLoginPubGame::SharedCtor() {
  _cached_size_ = 0;
  svrtype_ = 0u;
  svrid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLoginPubGame::~stLoginPubGame() {
  SharedDtor();
}

void stLoginPubGame::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void stLoginPubGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLoginPubGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginPubGame_descriptor_;
}

const stLoginPubGame& stLoginPubGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stLoginPubGame* stLoginPubGame::default_instance_ = NULL;

stLoginPubGame* stLoginPubGame::New() const {
  return new stLoginPubGame;
}

void stLoginPubGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrtype_ = 0u;
    svrid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLoginPubGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtype_)));
          set_has_svrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrID;
        break;
      }

      // optional uint32 svrID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_key;
        break;
      }

      // optional string key = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLoginPubGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrType = 1;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrtype(), output);
  }

  // optional uint32 svrID = 2;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // optional string key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLoginPubGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrType = 1;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrtype(), target);
  }

  // optional uint32 svrID = 2;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // optional string key = 5;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLoginPubGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrType = 1;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtype());
    }

    // optional uint32 svrID = 2;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional string key = 5;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLoginPubGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLoginPubGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLoginPubGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLoginPubGame::MergeFrom(const stLoginPubGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLoginPubGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLoginPubGame::CopyFrom(const stLoginPubGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLoginPubGame::IsInitialized() const {

  return true;
}

void stLoginPubGame::Swap(stLoginPubGame* other) {
  if (other != this) {
    std::swap(svrtype_, other->svrtype_);
    std::swap(svrid_, other->svrid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLoginPubGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLoginPubGame_descriptor_;
  metadata.reflection = stLoginPubGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stTitleToPub::kActiveIDFieldNumber;
const int stTitleToPub::kGotSaveFieldNumber;
const int stTitleToPub::kNotSaveFieldNumber;
#endif  // !_MSC_VER

stTitleToPub::stTitleToPub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTitleToPub::InitAsDefaultInstance() {
}

stTitleToPub::stTitleToPub(const stTitleToPub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTitleToPub::SharedCtor() {
  _cached_size_ = 0;
  activeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTitleToPub::~stTitleToPub() {
  SharedDtor();
}

void stTitleToPub::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stTitleToPub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTitleToPub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTitleToPub_descriptor_;
}

const stTitleToPub& stTitleToPub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stTitleToPub* stTitleToPub::default_instance_ = NULL;

stTitleToPub* stTitleToPub::New() const {
  return new stTitleToPub;
}

void stTitleToPub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activeid_ = 0u;
  }
  gotsave_.Clear();
  notsave_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTitleToPub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activeid_)));
          set_has_activeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gotSave;
        break;
      }

      // repeated uint32 gotSave = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gotSave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_gotsave())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gotsave())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gotSave;
        if (input->ExpectTag(24)) goto parse_notSave;
        break;
      }

      // repeated uint32 notSave = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notSave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_notsave())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_notsave())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_notSave;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTitleToPub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 activeID = 1;
  if (has_activeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activeid(), output);
  }

  // repeated uint32 gotSave = 2;
  for (int i = 0; i < this->gotsave_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->gotsave(i), output);
  }

  // repeated uint32 notSave = 3;
  for (int i = 0; i < this->notsave_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->notsave(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTitleToPub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 activeID = 1;
  if (has_activeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activeid(), target);
  }

  // repeated uint32 gotSave = 2;
  for (int i = 0; i < this->gotsave_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->gotsave(i), target);
  }

  // repeated uint32 notSave = 3;
  for (int i = 0; i < this->notsave_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->notsave(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTitleToPub::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 activeID = 1;
    if (has_activeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activeid());
    }

  }
  // repeated uint32 gotSave = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->gotsave_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gotsave(i));
    }
    total_size += 1 * this->gotsave_size() + data_size;
  }

  // repeated uint32 notSave = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->notsave_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->notsave(i));
    }
    total_size += 1 * this->notsave_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTitleToPub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTitleToPub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTitleToPub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTitleToPub::MergeFrom(const stTitleToPub& from) {
  GOOGLE_CHECK_NE(&from, this);
  gotsave_.MergeFrom(from.gotsave_);
  notsave_.MergeFrom(from.notsave_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activeid()) {
      set_activeid(from.activeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTitleToPub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTitleToPub::CopyFrom(const stTitleToPub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTitleToPub::IsInitialized() const {

  return true;
}

void stTitleToPub::Swap(stTitleToPub* other) {
  if (other != this) {
    std::swap(activeid_, other->activeid_);
    gotsave_.Swap(&other->gotsave_);
    notsave_.Swap(&other->notsave_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTitleToPub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTitleToPub_descriptor_;
  metadata.reflection = stTitleToPub_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleInfo_ProtoModID_descriptor_;
}
bool stRoleInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRoleInfo_ProtoModID stRoleInfo::ModID;
const stRoleInfo_ProtoModID stRoleInfo::ProtoModID_MIN;
const stRoleInfo_ProtoModID stRoleInfo::ProtoModID_MAX;
const int stRoleInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRoleInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleInfo_ProtoFunID_descriptor_;
}
bool stRoleInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRoleInfo_ProtoFunID stRoleInfo::FunID;
const stRoleInfo_ProtoFunID stRoleInfo::ProtoFunID_MIN;
const stRoleInfo_ProtoFunID stRoleInfo::ProtoFunID_MAX;
const int stRoleInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRoleInfo::kCharIDFieldNumber;
const int stRoleInfo::kAccountFieldNumber;
const int stRoleInfo::kDataSizeFieldNumber;
const int stRoleInfo::kDataFieldNumber;
const int stRoleInfo::kIpFieldNumber;
const int stRoleInfo::kNormalServerIDFieldNumber;
const int stRoleInfo::kNormalCharIDFieldNumber;
const int stRoleInfo::kAreaCodeFieldNumber;
const int stRoleInfo::kMapIdFieldNumber;
const int stRoleInfo::kTitlesFieldNumber;
#endif  // !_MSC_VER

stRoleInfo::stRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRoleInfo::InitAsDefaultInstance() {
  titles_ = const_cast< ::PubGame::stTitleToPub*>(&::PubGame::stTitleToPub::default_instance());
}

stRoleInfo::stRoleInfo(const stRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datasize_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normalserverid_ = 0u;
  normalcharid_ = 0u;
  areacode_ = 0u;
  mapid_ = 0u;
  titles_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRoleInfo::~stRoleInfo() {
  SharedDtor();
}

void stRoleInfo::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
    delete titles_;
  }
}

void stRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleInfo_descriptor_;
}

const stRoleInfo& stRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stRoleInfo* stRoleInfo::default_instance_ = NULL;

stRoleInfo* stRoleInfo::New() const {
  return new stRoleInfo;
}

void stRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    datasize_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    normalserverid_ = 0u;
    normalcharid_ = 0u;
    areacode_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mapid_ = 0u;
    if (has_titles()) {
      if (titles_ != NULL) titles_->::PubGame::stTitleToPub::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dataSize;
        break;
      }

      // optional uint32 dataSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_normalServerID;
        break;
      }

      // optional uint32 normalServerID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalserverid_)));
          set_has_normalserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_normalCharID;
        break;
      }

      // optional uint32 normalCharID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalcharid_)));
          set_has_normalcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mapId;
        break;
      }

      // optional uint32 mapId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_titles;
        break;
      }

      // optional .PubGame.stTitleToPub titles = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_titles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional uint32 dataSize = 3;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->datasize(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }

  // optional uint32 normalServerID = 6;
  if (has_normalserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->normalserverid(), output);
  }

  // optional uint32 normalCharID = 7;
  if (has_normalcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->normalcharid(), output);
  }

  // optional uint32 areaCode = 8;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->areacode(), output);
  }

  // optional uint32 mapId = 9;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->mapid(), output);
  }

  // optional .PubGame.stTitleToPub titles = 10;
  if (has_titles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->titles(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional uint32 dataSize = 3;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->datasize(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional uint32 normalServerID = 6;
  if (has_normalserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->normalserverid(), target);
  }

  // optional uint32 normalCharID = 7;
  if (has_normalcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->normalcharid(), target);
  }

  // optional uint32 areaCode = 8;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->areacode(), target);
  }

  // optional uint32 mapId = 9;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->mapid(), target);
  }

  // optional .PubGame.stTitleToPub titles = 10;
  if (has_titles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->titles(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 dataSize = 3;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datasize());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 normalServerID = 6;
    if (has_normalserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalserverid());
    }

    // optional uint32 normalCharID = 7;
    if (has_normalcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalcharid());
    }

    // optional uint32 areaCode = 8;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 mapId = 9;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }

    // optional .PubGame.stTitleToPub titles = 10;
    if (has_titles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->titles());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRoleInfo::MergeFrom(const stRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_normalserverid()) {
      set_normalserverid(from.normalserverid());
    }
    if (from.has_normalcharid()) {
      set_normalcharid(from.normalcharid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_titles()) {
      mutable_titles()->::PubGame::stTitleToPub::MergeFrom(from.titles());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRoleInfo::CopyFrom(const stRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRoleInfo::IsInitialized() const {

  return true;
}

void stRoleInfo::Swap(stRoleInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(datasize_, other->datasize_);
    std::swap(data_, other->data_);
    std::swap(ip_, other->ip_);
    std::swap(normalserverid_, other->normalserverid_);
    std::swap(normalcharid_, other->normalcharid_);
    std::swap(areacode_, other->areacode_);
    std::swap(mapid_, other->mapid_);
    std::swap(titles_, other->titles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRoleInfo_descriptor_;
  metadata.reflection = stRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNormalForwardPub_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNormalForwardPub_ProtoModID_descriptor_;
}
bool stNormalForwardPub_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNormalForwardPub_ProtoModID stNormalForwardPub::ModID;
const stNormalForwardPub_ProtoModID stNormalForwardPub::ProtoModID_MIN;
const stNormalForwardPub_ProtoModID stNormalForwardPub::ProtoModID_MAX;
const int stNormalForwardPub::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNormalForwardPub_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNormalForwardPub_ProtoFunID_descriptor_;
}
bool stNormalForwardPub_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNormalForwardPub_ProtoFunID stNormalForwardPub::FunID;
const stNormalForwardPub_ProtoFunID stNormalForwardPub::ProtoFunID_MIN;
const stNormalForwardPub_ProtoFunID stNormalForwardPub::ProtoFunID_MAX;
const int stNormalForwardPub::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNormalForwardPub::kCharIDFieldNumber;
const int stNormalForwardPub::kModIDFieldNumber;
const int stNormalForwardPub::kFunIDFieldNumber;
const int stNormalForwardPub::kCmdLenFieldNumber;
const int stNormalForwardPub::kDataFieldNumber;
#endif  // !_MSC_VER

stNormalForwardPub::stNormalForwardPub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNormalForwardPub::InitAsDefaultInstance() {
}

stNormalForwardPub::stNormalForwardPub(const stNormalForwardPub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNormalForwardPub::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNormalForwardPub::~stNormalForwardPub() {
  SharedDtor();
}

void stNormalForwardPub::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stNormalForwardPub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNormalForwardPub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNormalForwardPub_descriptor_;
}

const stNormalForwardPub& stNormalForwardPub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stNormalForwardPub* stNormalForwardPub::default_instance_ = NULL;

stNormalForwardPub* stNormalForwardPub::New() const {
  return new stNormalForwardPub;
}

void stNormalForwardPub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNormalForwardPub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNormalForwardPub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->funid(), output);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdlen(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNormalForwardPub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->funid(), target);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdlen(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNormalForwardPub::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 3;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 4;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNormalForwardPub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNormalForwardPub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNormalForwardPub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNormalForwardPub::MergeFrom(const stNormalForwardPub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNormalForwardPub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNormalForwardPub::CopyFrom(const stNormalForwardPub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNormalForwardPub::IsInitialized() const {

  return true;
}

void stNormalForwardPub::Swap(stNormalForwardPub* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNormalForwardPub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNormalForwardPub_descriptor_;
  metadata.reflection = stNormalForwardPub_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRoleLogout_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleLogout_ProtoModID_descriptor_;
}
bool stRoleLogout_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRoleLogout_ProtoModID stRoleLogout::ModID;
const stRoleLogout_ProtoModID stRoleLogout::ProtoModID_MIN;
const stRoleLogout_ProtoModID stRoleLogout::ProtoModID_MAX;
const int stRoleLogout::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRoleLogout_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleLogout_ProtoFunID_descriptor_;
}
bool stRoleLogout_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRoleLogout_ProtoFunID stRoleLogout::FunID;
const stRoleLogout_ProtoFunID stRoleLogout::ProtoFunID_MIN;
const stRoleLogout_ProtoFunID stRoleLogout::ProtoFunID_MAX;
const int stRoleLogout::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRoleLogout::kCharIDFieldNumber;
#endif  // !_MSC_VER

stRoleLogout::stRoleLogout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRoleLogout::InitAsDefaultInstance() {
}

stRoleLogout::stRoleLogout(const stRoleLogout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRoleLogout::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRoleLogout::~stRoleLogout() {
  SharedDtor();
}

void stRoleLogout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRoleLogout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRoleLogout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRoleLogout_descriptor_;
}

const stRoleLogout& stRoleLogout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stRoleLogout* stRoleLogout::default_instance_ = NULL;

stRoleLogout* stRoleLogout::New() const {
  return new stRoleLogout;
}

void stRoleLogout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRoleLogout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRoleLogout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRoleLogout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRoleLogout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRoleLogout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRoleLogout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRoleLogout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRoleLogout::MergeFrom(const stRoleLogout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRoleLogout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRoleLogout::CopyFrom(const stRoleLogout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRoleLogout::IsInitialized() const {

  return true;
}

void stRoleLogout::Swap(stRoleLogout* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRoleLogout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRoleLogout_descriptor_;
  metadata.reflection = stRoleLogout_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeTeamMatch_ProtoModID_descriptor_;
}
bool stRealTimeTeamMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeTeamMatch_ProtoModID stRealTimeTeamMatch::ModID;
const stRealTimeTeamMatch_ProtoModID stRealTimeTeamMatch::ProtoModID_MIN;
const stRealTimeTeamMatch_ProtoModID stRealTimeTeamMatch::ProtoModID_MAX;
const int stRealTimeTeamMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRealTimeTeamMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeTeamMatch_ProtoFunID_descriptor_;
}
bool stRealTimeTeamMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRealTimeTeamMatch_ProtoFunID stRealTimeTeamMatch::FunID;
const stRealTimeTeamMatch_ProtoFunID stRealTimeTeamMatch::ProtoFunID_MIN;
const stRealTimeTeamMatch_ProtoFunID stRealTimeTeamMatch::ProtoFunID_MAX;
const int stRealTimeTeamMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRealTimeTeamMatch::kETypeFieldNumber;
const int stRealTimeTeamMatch::kTeamIDFieldNumber;
const int stRealTimeTeamMatch::kMemberIdFieldNumber;
#endif  // !_MSC_VER

stRealTimeTeamMatch::stRealTimeTeamMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRealTimeTeamMatch::InitAsDefaultInstance() {
}

stRealTimeTeamMatch::stRealTimeTeamMatch(const stRealTimeTeamMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRealTimeTeamMatch::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 1;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRealTimeTeamMatch::~stRealTimeTeamMatch() {
  SharedDtor();
}

void stRealTimeTeamMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRealTimeTeamMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRealTimeTeamMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRealTimeTeamMatch_descriptor_;
}

const stRealTimeTeamMatch& stRealTimeTeamMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stRealTimeTeamMatch* stRealTimeTeamMatch::default_instance_ = NULL;

stRealTimeTeamMatch* stRealTimeTeamMatch::New() const {
  return new stRealTimeTeamMatch;
}

void stRealTimeTeamMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 1;
    teamid_ = 0u;
  }
  memberid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRealTimeTeamMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PubGame.eRealTimePKType eType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PubGame::eRealTimePKType_IsValid(value)) {
            set_etype(static_cast< ::PubGame::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberId;
        break;
      }

      // repeated uint32 memberId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_memberid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_memberid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRealTimeTeamMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PubGame.eRealTimePKType eType = 1;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  // repeated uint32 memberId = 3;
  for (int i = 0; i < this->memberid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->memberid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRealTimeTeamMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PubGame.eRealTimePKType eType = 1;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  // repeated uint32 memberId = 3;
  for (int i = 0; i < this->memberid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->memberid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRealTimeTeamMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PubGame.eRealTimePKType eType = 1;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 teamID = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  // repeated uint32 memberId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->memberid(i));
    }
    total_size += 1 * this->memberid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRealTimeTeamMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRealTimeTeamMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRealTimeTeamMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRealTimeTeamMatch::MergeFrom(const stRealTimeTeamMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberid_.MergeFrom(from.memberid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRealTimeTeamMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRealTimeTeamMatch::CopyFrom(const stRealTimeTeamMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRealTimeTeamMatch::IsInitialized() const {

  return true;
}

void stRealTimeTeamMatch::Swap(stRealTimeTeamMatch* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(teamid_, other->teamid_);
    memberid_.Swap(&other->memberid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRealTimeTeamMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRealTimeTeamMatch_descriptor_;
  metadata.reflection = stRealTimeTeamMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPubForwardNormal_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubForwardNormal_ProtoModID_descriptor_;
}
bool stPubForwardNormal_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPubForwardNormal_ProtoModID stPubForwardNormal::ModID;
const stPubForwardNormal_ProtoModID stPubForwardNormal::ProtoModID_MIN;
const stPubForwardNormal_ProtoModID stPubForwardNormal::ProtoModID_MAX;
const int stPubForwardNormal::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPubForwardNormal_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubForwardNormal_ProtoFunID_descriptor_;
}
bool stPubForwardNormal_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPubForwardNormal_ProtoFunID stPubForwardNormal::FunID;
const stPubForwardNormal_ProtoFunID stPubForwardNormal::ProtoFunID_MIN;
const stPubForwardNormal_ProtoFunID stPubForwardNormal::ProtoFunID_MAX;
const int stPubForwardNormal::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPubForwardNormal::kCharIDFieldNumber;
const int stPubForwardNormal::kModIDFieldNumber;
const int stPubForwardNormal::kFunIDFieldNumber;
const int stPubForwardNormal::kCmdLenFieldNumber;
const int stPubForwardNormal::kDataFieldNumber;
#endif  // !_MSC_VER

stPubForwardNormal::stPubForwardNormal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPubForwardNormal::InitAsDefaultInstance() {
}

stPubForwardNormal::stPubForwardNormal(const stPubForwardNormal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPubForwardNormal::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPubForwardNormal::~stPubForwardNormal() {
  SharedDtor();
}

void stPubForwardNormal::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stPubForwardNormal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPubForwardNormal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubForwardNormal_descriptor_;
}

const stPubForwardNormal& stPubForwardNormal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stPubForwardNormal* stPubForwardNormal::default_instance_ = NULL;

stPubForwardNormal* stPubForwardNormal::New() const {
  return new stPubForwardNormal;
}

void stPubForwardNormal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPubForwardNormal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPubForwardNormal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->funid(), output);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdlen(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPubForwardNormal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->funid(), target);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdlen(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPubForwardNormal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 3;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 4;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPubForwardNormal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPubForwardNormal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPubForwardNormal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPubForwardNormal::MergeFrom(const stPubForwardNormal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPubForwardNormal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPubForwardNormal::CopyFrom(const stPubForwardNormal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPubForwardNormal::IsInitialized() const {

  return true;
}

void stPubForwardNormal::Swap(stPubForwardNormal* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPubForwardNormal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPubForwardNormal_descriptor_;
  metadata.reflection = stPubForwardNormal_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPubForwardGate_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubForwardGate_ProtoModID_descriptor_;
}
bool stPubForwardGate_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPubForwardGate_ProtoModID stPubForwardGate::ModID;
const stPubForwardGate_ProtoModID stPubForwardGate::ProtoModID_MIN;
const stPubForwardGate_ProtoModID stPubForwardGate::ProtoModID_MAX;
const int stPubForwardGate::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPubForwardGate_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubForwardGate_ProtoFunID_descriptor_;
}
bool stPubForwardGate_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPubForwardGate_ProtoFunID stPubForwardGate::FunID;
const stPubForwardGate_ProtoFunID stPubForwardGate::ProtoFunID_MIN;
const stPubForwardGate_ProtoFunID stPubForwardGate::ProtoFunID_MAX;
const int stPubForwardGate::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPubForwardGate::kCharIDFieldNumber;
const int stPubForwardGate::kModIDFieldNumber;
const int stPubForwardGate::kFunIDFieldNumber;
const int stPubForwardGate::kCmdLenFieldNumber;
const int stPubForwardGate::kDataFieldNumber;
#endif  // !_MSC_VER

stPubForwardGate::stPubForwardGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPubForwardGate::InitAsDefaultInstance() {
}

stPubForwardGate::stPubForwardGate(const stPubForwardGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPubForwardGate::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPubForwardGate::~stPubForwardGate() {
  SharedDtor();
}

void stPubForwardGate::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stPubForwardGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPubForwardGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubForwardGate_descriptor_;
}

const stPubForwardGate& stPubForwardGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stPubForwardGate* stPubForwardGate::default_instance_ = NULL;

stPubForwardGate* stPubForwardGate::New() const {
  return new stPubForwardGate;
}

void stPubForwardGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPubForwardGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPubForwardGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->funid(), output);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdlen(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPubForwardGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->funid(), target);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdlen(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPubForwardGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 3;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 4;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPubForwardGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPubForwardGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPubForwardGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPubForwardGate::MergeFrom(const stPubForwardGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPubForwardGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPubForwardGate::CopyFrom(const stPubForwardGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPubForwardGate::IsInitialized() const {

  return true;
}

void stPubForwardGate::Swap(stPubForwardGate* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPubForwardGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPubForwardGate_descriptor_;
  metadata.reflection = stPubForwardGate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyUserOnPub_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserOnPub_ProtoModID_descriptor_;
}
bool stNotifyUserOnPub_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyUserOnPub_ProtoModID stNotifyUserOnPub::ModID;
const stNotifyUserOnPub_ProtoModID stNotifyUserOnPub::ProtoModID_MIN;
const stNotifyUserOnPub_ProtoModID stNotifyUserOnPub::ProtoModID_MAX;
const int stNotifyUserOnPub::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyUserOnPub_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserOnPub_ProtoFunID_descriptor_;
}
bool stNotifyUserOnPub_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyUserOnPub_ProtoFunID stNotifyUserOnPub::FunID;
const stNotifyUserOnPub_ProtoFunID stNotifyUserOnPub::ProtoFunID_MIN;
const stNotifyUserOnPub_ProtoFunID stNotifyUserOnPub::ProtoFunID_MAX;
const int stNotifyUserOnPub::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyUserOnPub::kCharIDFieldNumber;
const int stNotifyUserOnPub::kOnPubFieldNumber;
#endif  // !_MSC_VER

stNotifyUserOnPub::stNotifyUserOnPub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyUserOnPub::InitAsDefaultInstance() {
}

stNotifyUserOnPub::stNotifyUserOnPub(const stNotifyUserOnPub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyUserOnPub::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  onpub_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyUserOnPub::~stNotifyUserOnPub() {
  SharedDtor();
}

void stNotifyUserOnPub::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyUserOnPub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyUserOnPub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserOnPub_descriptor_;
}

const stNotifyUserOnPub& stNotifyUserOnPub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stNotifyUserOnPub* stNotifyUserOnPub::default_instance_ = NULL;

stNotifyUserOnPub* stNotifyUserOnPub::New() const {
  return new stNotifyUserOnPub;
}

void stNotifyUserOnPub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    onpub_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyUserOnPub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onPub;
        break;
      }

      // optional bool onPub = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onPub:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onpub_)));
          set_has_onpub();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyUserOnPub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional bool onPub = 2;
  if (has_onpub()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->onpub(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyUserOnPub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional bool onPub = 2;
  if (has_onpub()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->onpub(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyUserOnPub::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool onPub = 2;
    if (has_onpub()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyUserOnPub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyUserOnPub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyUserOnPub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyUserOnPub::MergeFrom(const stNotifyUserOnPub& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_onpub()) {
      set_onpub(from.onpub());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyUserOnPub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyUserOnPub::CopyFrom(const stNotifyUserOnPub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyUserOnPub::IsInitialized() const {

  return true;
}

void stNotifyUserOnPub::Swap(stNotifyUserOnPub* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(onpub_, other->onpub_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyUserOnPub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyUserOnPub_descriptor_;
  metadata.reflection = stNotifyUserOnPub_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPubForwardGlobal_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubForwardGlobal_ProtoModID_descriptor_;
}
bool stPubForwardGlobal_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPubForwardGlobal_ProtoModID stPubForwardGlobal::ModID;
const stPubForwardGlobal_ProtoModID stPubForwardGlobal::ProtoModID_MIN;
const stPubForwardGlobal_ProtoModID stPubForwardGlobal::ProtoModID_MAX;
const int stPubForwardGlobal::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPubForwardGlobal_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubForwardGlobal_ProtoFunID_descriptor_;
}
bool stPubForwardGlobal_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPubForwardGlobal_ProtoFunID stPubForwardGlobal::FunID;
const stPubForwardGlobal_ProtoFunID stPubForwardGlobal::ProtoFunID_MIN;
const stPubForwardGlobal_ProtoFunID stPubForwardGlobal::ProtoFunID_MAX;
const int stPubForwardGlobal::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPubForwardGlobal::kCharIDFieldNumber;
const int stPubForwardGlobal::kModIDFieldNumber;
const int stPubForwardGlobal::kFunIDFieldNumber;
const int stPubForwardGlobal::kCmdLenFieldNumber;
const int stPubForwardGlobal::kDataFieldNumber;
#endif  // !_MSC_VER

stPubForwardGlobal::stPubForwardGlobal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPubForwardGlobal::InitAsDefaultInstance() {
}

stPubForwardGlobal::stPubForwardGlobal(const stPubForwardGlobal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPubForwardGlobal::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPubForwardGlobal::~stPubForwardGlobal() {
  SharedDtor();
}

void stPubForwardGlobal::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stPubForwardGlobal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPubForwardGlobal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubForwardGlobal_descriptor_;
}

const stPubForwardGlobal& stPubForwardGlobal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stPubForwardGlobal* stPubForwardGlobal::default_instance_ = NULL;

stPubForwardGlobal* stPubForwardGlobal::New() const {
  return new stPubForwardGlobal;
}

void stPubForwardGlobal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPubForwardGlobal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPubForwardGlobal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->funid(), output);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdlen(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPubForwardGlobal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->funid(), target);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdlen(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPubForwardGlobal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 3;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 4;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPubForwardGlobal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPubForwardGlobal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPubForwardGlobal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPubForwardGlobal::MergeFrom(const stPubForwardGlobal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPubForwardGlobal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPubForwardGlobal::CopyFrom(const stPubForwardGlobal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPubForwardGlobal::IsInitialized() const {

  return true;
}

void stPubForwardGlobal::Swap(stPubForwardGlobal* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPubForwardGlobal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPubForwardGlobal_descriptor_;
  metadata.reflection = stPubForwardGlobal_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyOne2OneResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyOne2OneResult_ProtoModID_descriptor_;
}
bool stNotifyOne2OneResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyOne2OneResult_ProtoModID stNotifyOne2OneResult::ModID;
const stNotifyOne2OneResult_ProtoModID stNotifyOne2OneResult::ProtoModID_MIN;
const stNotifyOne2OneResult_ProtoModID stNotifyOne2OneResult::ProtoModID_MAX;
const int stNotifyOne2OneResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyOne2OneResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyOne2OneResult_ProtoFunID_descriptor_;
}
bool stNotifyOne2OneResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyOne2OneResult_ProtoFunID stNotifyOne2OneResult::FunID;
const stNotifyOne2OneResult_ProtoFunID stNotifyOne2OneResult::ProtoFunID_MIN;
const stNotifyOne2OneResult_ProtoFunID stNotifyOne2OneResult::ProtoFunID_MAX;
const int stNotifyOne2OneResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyOne2OneResult::kCharID1FieldNumber;
const int stNotifyOne2OneResult::kWin1FieldNumber;
const int stNotifyOne2OneResult::kScore1FieldNumber;
const int stNotifyOne2OneResult::kCharID2FieldNumber;
const int stNotifyOne2OneResult::kWin2FieldNumber;
const int stNotifyOne2OneResult::kScore2FieldNumber;
const int stNotifyOne2OneResult::kWithfriendFieldNumber;
const int stNotifyOne2OneResult::kServerIdx1FieldNumber;
const int stNotifyOne2OneResult::kServerIdx2FieldNumber;
const int stNotifyOne2OneResult::kCostLiLianFieldNumber;
#endif  // !_MSC_VER

stNotifyOne2OneResult::stNotifyOne2OneResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyOne2OneResult::InitAsDefaultInstance() {
}

stNotifyOne2OneResult::stNotifyOne2OneResult(const stNotifyOne2OneResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyOne2OneResult::SharedCtor() {
  _cached_size_ = 0;
  charid1_ = 0u;
  win1_ = false;
  score1_ = 0u;
  charid2_ = 0u;
  win2_ = false;
  score2_ = 0u;
  withfriend_ = false;
  serveridx1_ = 0u;
  serveridx2_ = 0u;
  costlilian_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyOne2OneResult::~stNotifyOne2OneResult() {
  SharedDtor();
}

void stNotifyOne2OneResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyOne2OneResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyOne2OneResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyOne2OneResult_descriptor_;
}

const stNotifyOne2OneResult& stNotifyOne2OneResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stNotifyOne2OneResult* stNotifyOne2OneResult::default_instance_ = NULL;

stNotifyOne2OneResult* stNotifyOne2OneResult::New() const {
  return new stNotifyOne2OneResult;
}

void stNotifyOne2OneResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid1_ = 0u;
    win1_ = false;
    score1_ = 0u;
    charid2_ = 0u;
    win2_ = false;
    score2_ = 0u;
    withfriend_ = false;
    serveridx1_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    serveridx2_ = 0u;
    costlilian_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyOne2OneResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid1_)));
          set_has_charid1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win1;
        break;
      }

      // optional bool win1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win1_)));
          set_has_win1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score1;
        break;
      }

      // optional uint32 score1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score1_)));
          set_has_score1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charID2;
        break;
      }

      // optional uint32 charID2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid2_)));
          set_has_charid2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win2;
        break;
      }

      // optional bool win2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win2_)));
          set_has_win2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_score2;
        break;
      }

      // optional uint32 score2 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score2_)));
          set_has_score2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_withfriend;
        break;
      }

      // optional bool withfriend = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_withfriend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &withfriend_)));
          set_has_withfriend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_serverIdx1;
        break;
      }

      // optional uint32 serverIdx1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverIdx1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serveridx1_)));
          set_has_serveridx1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_serverIdx2;
        break;
      }

      // optional uint32 serverIdx2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverIdx2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serveridx2_)));
          set_has_serveridx2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_costLiLian;
        break;
      }

      // optional uint32 costLiLian = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costLiLian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costlilian_)));
          set_has_costlilian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyOne2OneResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID1 = 1;
  if (has_charid1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid1(), output);
  }

  // optional bool win1 = 2;
  if (has_win1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->win1(), output);
  }

  // optional uint32 score1 = 3;
  if (has_score1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score1(), output);
  }

  // optional uint32 charID2 = 4;
  if (has_charid2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->charid2(), output);
  }

  // optional bool win2 = 5;
  if (has_win2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->win2(), output);
  }

  // optional uint32 score2 = 6;
  if (has_score2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->score2(), output);
  }

  // optional bool withfriend = 7;
  if (has_withfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->withfriend(), output);
  }

  // optional uint32 serverIdx1 = 8;
  if (has_serveridx1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->serveridx1(), output);
  }

  // optional uint32 serverIdx2 = 9;
  if (has_serveridx2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->serveridx2(), output);
  }

  // optional uint32 costLiLian = 10;
  if (has_costlilian()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->costlilian(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyOne2OneResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID1 = 1;
  if (has_charid1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid1(), target);
  }

  // optional bool win1 = 2;
  if (has_win1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->win1(), target);
  }

  // optional uint32 score1 = 3;
  if (has_score1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score1(), target);
  }

  // optional uint32 charID2 = 4;
  if (has_charid2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->charid2(), target);
  }

  // optional bool win2 = 5;
  if (has_win2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->win2(), target);
  }

  // optional uint32 score2 = 6;
  if (has_score2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->score2(), target);
  }

  // optional bool withfriend = 7;
  if (has_withfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->withfriend(), target);
  }

  // optional uint32 serverIdx1 = 8;
  if (has_serveridx1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->serveridx1(), target);
  }

  // optional uint32 serverIdx2 = 9;
  if (has_serveridx2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->serveridx2(), target);
  }

  // optional uint32 costLiLian = 10;
  if (has_costlilian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->costlilian(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyOne2OneResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID1 = 1;
    if (has_charid1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid1());
    }

    // optional bool win1 = 2;
    if (has_win1()) {
      total_size += 1 + 1;
    }

    // optional uint32 score1 = 3;
    if (has_score1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score1());
    }

    // optional uint32 charID2 = 4;
    if (has_charid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid2());
    }

    // optional bool win2 = 5;
    if (has_win2()) {
      total_size += 1 + 1;
    }

    // optional uint32 score2 = 6;
    if (has_score2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score2());
    }

    // optional bool withfriend = 7;
    if (has_withfriend()) {
      total_size += 1 + 1;
    }

    // optional uint32 serverIdx1 = 8;
    if (has_serveridx1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serveridx1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 serverIdx2 = 9;
    if (has_serveridx2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serveridx2());
    }

    // optional uint32 costLiLian = 10;
    if (has_costlilian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costlilian());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyOne2OneResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyOne2OneResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyOne2OneResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyOne2OneResult::MergeFrom(const stNotifyOne2OneResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid1()) {
      set_charid1(from.charid1());
    }
    if (from.has_win1()) {
      set_win1(from.win1());
    }
    if (from.has_score1()) {
      set_score1(from.score1());
    }
    if (from.has_charid2()) {
      set_charid2(from.charid2());
    }
    if (from.has_win2()) {
      set_win2(from.win2());
    }
    if (from.has_score2()) {
      set_score2(from.score2());
    }
    if (from.has_withfriend()) {
      set_withfriend(from.withfriend());
    }
    if (from.has_serveridx1()) {
      set_serveridx1(from.serveridx1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serveridx2()) {
      set_serveridx2(from.serveridx2());
    }
    if (from.has_costlilian()) {
      set_costlilian(from.costlilian());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyOne2OneResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyOne2OneResult::CopyFrom(const stNotifyOne2OneResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyOne2OneResult::IsInitialized() const {

  return true;
}

void stNotifyOne2OneResult::Swap(stNotifyOne2OneResult* other) {
  if (other != this) {
    std::swap(charid1_, other->charid1_);
    std::swap(win1_, other->win1_);
    std::swap(score1_, other->score1_);
    std::swap(charid2_, other->charid2_);
    std::swap(win2_, other->win2_);
    std::swap(score2_, other->score2_);
    std::swap(withfriend_, other->withfriend_);
    std::swap(serveridx1_, other->serveridx1_);
    std::swap(serveridx2_, other->serveridx2_);
    std::swap(costlilian_, other->costlilian_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyOne2OneResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyOne2OneResult_descriptor_;
  metadata.reflection = stNotifyOne2OneResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyRealTimeResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRealTimeResult_ProtoModID_descriptor_;
}
bool stNotifyRealTimeResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyRealTimeResult_ProtoModID stNotifyRealTimeResult::ModID;
const stNotifyRealTimeResult_ProtoModID stNotifyRealTimeResult::ProtoModID_MIN;
const stNotifyRealTimeResult_ProtoModID stNotifyRealTimeResult::ProtoModID_MAX;
const int stNotifyRealTimeResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyRealTimeResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRealTimeResult_ProtoFunID_descriptor_;
}
bool stNotifyRealTimeResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyRealTimeResult_ProtoFunID stNotifyRealTimeResult::FunID;
const stNotifyRealTimeResult_ProtoFunID stNotifyRealTimeResult::ProtoFunID_MIN;
const stNotifyRealTimeResult_ProtoFunID stNotifyRealTimeResult::ProtoFunID_MAX;
const int stNotifyRealTimeResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyRealTimeResult::kCharIDFieldNumber;
const int stNotifyRealTimeResult::kWinFieldNumber;
const int stNotifyRealTimeResult::kTypeFieldNumber;
const int stNotifyRealTimeResult::kCostLilianFieldNumber;
#endif  // !_MSC_VER

stNotifyRealTimeResult::stNotifyRealTimeResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyRealTimeResult::InitAsDefaultInstance() {
}

stNotifyRealTimeResult::stNotifyRealTimeResult(const stNotifyRealTimeResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyRealTimeResult::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  win_ = false;
  type_ = 1;
  costlilian_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyRealTimeResult::~stNotifyRealTimeResult() {
  SharedDtor();
}

void stNotifyRealTimeResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyRealTimeResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyRealTimeResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyRealTimeResult_descriptor_;
}

const stNotifyRealTimeResult& stNotifyRealTimeResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stNotifyRealTimeResult* stNotifyRealTimeResult::default_instance_ = NULL;

stNotifyRealTimeResult* stNotifyRealTimeResult::New() const {
  return new stNotifyRealTimeResult;
}

void stNotifyRealTimeResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    win_ = false;
    type_ = 1;
    costlilian_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyRealTimeResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // optional bool win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional .PubGame.eRealTimePKType type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::PubGame::eRealTimePKType_IsValid(value)) {
            set_type(static_cast< ::PubGame::eRealTimePKType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_costLilian;
        break;
      }

      // optional uint32 costLilian = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costLilian:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costlilian_)));
          set_has_costlilian();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyRealTimeResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional bool win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->win(), output);
  }

  // optional .PubGame.eRealTimePKType type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // optional uint32 costLilian = 4;
  if (has_costlilian()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->costlilian(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyRealTimeResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional bool win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->win(), target);
  }

  // optional .PubGame.eRealTimePKType type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // optional uint32 costLilian = 4;
  if (has_costlilian()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->costlilian(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyRealTimeResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool win = 2;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional .PubGame.eRealTimePKType type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 costLilian = 4;
    if (has_costlilian()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costlilian());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyRealTimeResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyRealTimeResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyRealTimeResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyRealTimeResult::MergeFrom(const stNotifyRealTimeResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_costlilian()) {
      set_costlilian(from.costlilian());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyRealTimeResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyRealTimeResult::CopyFrom(const stNotifyRealTimeResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyRealTimeResult::IsInitialized() const {

  return true;
}

void stNotifyRealTimeResult::Swap(stNotifyRealTimeResult* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(win_, other->win_);
    std::swap(type_, other->type_);
    std::swap(costlilian_, other->costlilian_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyRealTimeResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyRealTimeResult_descriptor_;
  metadata.reflection = stNotifyRealTimeResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveRoleInfo_ProtoModID_descriptor_;
}
bool stSaveRoleInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSaveRoleInfo_ProtoModID stSaveRoleInfo::ModID;
const stSaveRoleInfo_ProtoModID stSaveRoleInfo::ProtoModID_MIN;
const stSaveRoleInfo_ProtoModID stSaveRoleInfo::ProtoModID_MAX;
const int stSaveRoleInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSaveRoleInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveRoleInfo_ProtoFunID_descriptor_;
}
bool stSaveRoleInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSaveRoleInfo_ProtoFunID stSaveRoleInfo::FunID;
const stSaveRoleInfo_ProtoFunID stSaveRoleInfo::ProtoFunID_MIN;
const stSaveRoleInfo_ProtoFunID stSaveRoleInfo::ProtoFunID_MAX;
const int stSaveRoleInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSaveRoleInfo::kCharIDFieldNumber;
const int stSaveRoleInfo::kDataSizeFieldNumber;
const int stSaveRoleInfo::kDataFieldNumber;
const int stSaveRoleInfo::kNormalServerIDFieldNumber;
#endif  // !_MSC_VER

stSaveRoleInfo::stSaveRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSaveRoleInfo::InitAsDefaultInstance() {
}

stSaveRoleInfo::stSaveRoleInfo(const stSaveRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSaveRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  datasize_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normalserverid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSaveRoleInfo::~stSaveRoleInfo() {
  SharedDtor();
}

void stSaveRoleInfo::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stSaveRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSaveRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveRoleInfo_descriptor_;
}

const stSaveRoleInfo& stSaveRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stSaveRoleInfo* stSaveRoleInfo::default_instance_ = NULL;

stSaveRoleInfo* stSaveRoleInfo::New() const {
  return new stSaveRoleInfo;
}

void stSaveRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    datasize_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    normalserverid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSaveRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dataSize;
        break;
      }

      // optional uint32 dataSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datasize_)));
          set_has_datasize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_normalServerID;
        break;
      }

      // optional uint32 normalServerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalServerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalserverid_)));
          set_has_normalserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSaveRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 dataSize = 2;
  if (has_datasize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->datasize(), output);
  }

  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }

  // optional uint32 normalServerID = 4;
  if (has_normalserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->normalserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSaveRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 dataSize = 2;
  if (has_datasize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->datasize(), target);
  }

  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  // optional uint32 normalServerID = 4;
  if (has_normalserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->normalserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSaveRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 dataSize = 2;
    if (has_datasize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datasize());
    }

    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 normalServerID = 4;
    if (has_normalserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSaveRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSaveRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSaveRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSaveRoleInfo::MergeFrom(const stSaveRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_datasize()) {
      set_datasize(from.datasize());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_normalserverid()) {
      set_normalserverid(from.normalserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSaveRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSaveRoleInfo::CopyFrom(const stSaveRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSaveRoleInfo::IsInitialized() const {

  return true;
}

void stSaveRoleInfo::Swap(stSaveRoleInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(datasize_, other->datasize_);
    std::swap(data_, other->data_);
    std::swap(normalserverid_, other->normalserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSaveRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSaveRoleInfo_descriptor_;
  metadata.reflection = stSaveRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddRegisterNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddRegisterNum_ProtoModID_descriptor_;
}
bool stAddRegisterNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddRegisterNum_ProtoModID stAddRegisterNum::ModID;
const stAddRegisterNum_ProtoModID stAddRegisterNum::ProtoModID_MIN;
const stAddRegisterNum_ProtoModID stAddRegisterNum::ProtoModID_MAX;
const int stAddRegisterNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddRegisterNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddRegisterNum_ProtoFunID_descriptor_;
}
bool stAddRegisterNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddRegisterNum_ProtoFunID stAddRegisterNum::FunID;
const stAddRegisterNum_ProtoFunID stAddRegisterNum::ProtoFunID_MIN;
const stAddRegisterNum_ProtoFunID stAddRegisterNum::ProtoFunID_MAX;
const int stAddRegisterNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddRegisterNum::kCharIDFieldNumber;
#endif  // !_MSC_VER

stAddRegisterNum::stAddRegisterNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddRegisterNum::InitAsDefaultInstance() {
}

stAddRegisterNum::stAddRegisterNum(const stAddRegisterNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddRegisterNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddRegisterNum::~stAddRegisterNum() {
  SharedDtor();
}

void stAddRegisterNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAddRegisterNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddRegisterNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddRegisterNum_descriptor_;
}

const stAddRegisterNum& stAddRegisterNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stAddRegisterNum* stAddRegisterNum::default_instance_ = NULL;

stAddRegisterNum* stAddRegisterNum::New() const {
  return new stAddRegisterNum;
}

void stAddRegisterNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddRegisterNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddRegisterNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddRegisterNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddRegisterNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddRegisterNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddRegisterNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddRegisterNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddRegisterNum::MergeFrom(const stAddRegisterNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddRegisterNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddRegisterNum::CopyFrom(const stAddRegisterNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddRegisterNum::IsInitialized() const {

  return true;
}

void stAddRegisterNum::Swap(stAddRegisterNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddRegisterNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddRegisterNum_descriptor_;
  metadata.reflection = stAddRegisterNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueMatch_ProtoModID_descriptor_;
}
bool stHeroLeagueMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueMatch_ProtoModID stHeroLeagueMatch::ModID;
const stHeroLeagueMatch_ProtoModID stHeroLeagueMatch::ProtoModID_MIN;
const stHeroLeagueMatch_ProtoModID stHeroLeagueMatch::ProtoModID_MAX;
const int stHeroLeagueMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroLeagueMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueMatch_ProtoFunID_descriptor_;
}
bool stHeroLeagueMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueMatch_ProtoFunID stHeroLeagueMatch::FunID;
const stHeroLeagueMatch_ProtoFunID stHeroLeagueMatch::ProtoFunID_MIN;
const stHeroLeagueMatch_ProtoFunID stHeroLeagueMatch::ProtoFunID_MAX;
const int stHeroLeagueMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHeroLeagueMatch::kCharIDFieldNumber;
#endif  // !_MSC_VER

stHeroLeagueMatch::stHeroLeagueMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroLeagueMatch::InitAsDefaultInstance() {
}

stHeroLeagueMatch::stHeroLeagueMatch(const stHeroLeagueMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroLeagueMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroLeagueMatch::~stHeroLeagueMatch() {
  SharedDtor();
}

void stHeroLeagueMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHeroLeagueMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroLeagueMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueMatch_descriptor_;
}

const stHeroLeagueMatch& stHeroLeagueMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stHeroLeagueMatch* stHeroLeagueMatch::default_instance_ = NULL;

stHeroLeagueMatch* stHeroLeagueMatch::New() const {
  return new stHeroLeagueMatch;
}

void stHeroLeagueMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroLeagueMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroLeagueMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroLeagueMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroLeagueMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroLeagueMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroLeagueMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroLeagueMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroLeagueMatch::MergeFrom(const stHeroLeagueMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroLeagueMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroLeagueMatch::CopyFrom(const stHeroLeagueMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroLeagueMatch::IsInitialized() const {

  return true;
}

void stHeroLeagueMatch::Swap(stHeroLeagueMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroLeagueMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroLeagueMatch_descriptor_;
  metadata.reflection = stHeroLeagueMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHeroLeagueCancelMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueCancelMatch_ProtoModID_descriptor_;
}
bool stHeroLeagueCancelMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueCancelMatch_ProtoModID stHeroLeagueCancelMatch::ModID;
const stHeroLeagueCancelMatch_ProtoModID stHeroLeagueCancelMatch::ProtoModID_MIN;
const stHeroLeagueCancelMatch_ProtoModID stHeroLeagueCancelMatch::ProtoModID_MAX;
const int stHeroLeagueCancelMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroLeagueCancelMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueCancelMatch_ProtoFunID_descriptor_;
}
bool stHeroLeagueCancelMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroLeagueCancelMatch_ProtoFunID stHeroLeagueCancelMatch::FunID;
const stHeroLeagueCancelMatch_ProtoFunID stHeroLeagueCancelMatch::ProtoFunID_MIN;
const stHeroLeagueCancelMatch_ProtoFunID stHeroLeagueCancelMatch::ProtoFunID_MAX;
const int stHeroLeagueCancelMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHeroLeagueCancelMatch::kCharIDFieldNumber;
#endif  // !_MSC_VER

stHeroLeagueCancelMatch::stHeroLeagueCancelMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroLeagueCancelMatch::InitAsDefaultInstance() {
}

stHeroLeagueCancelMatch::stHeroLeagueCancelMatch(const stHeroLeagueCancelMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroLeagueCancelMatch::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroLeagueCancelMatch::~stHeroLeagueCancelMatch() {
  SharedDtor();
}

void stHeroLeagueCancelMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stHeroLeagueCancelMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroLeagueCancelMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroLeagueCancelMatch_descriptor_;
}

const stHeroLeagueCancelMatch& stHeroLeagueCancelMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stHeroLeagueCancelMatch* stHeroLeagueCancelMatch::default_instance_ = NULL;

stHeroLeagueCancelMatch* stHeroLeagueCancelMatch::New() const {
  return new stHeroLeagueCancelMatch;
}

void stHeroLeagueCancelMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroLeagueCancelMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroLeagueCancelMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroLeagueCancelMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroLeagueCancelMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroLeagueCancelMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroLeagueCancelMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroLeagueCancelMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroLeagueCancelMatch::MergeFrom(const stHeroLeagueCancelMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroLeagueCancelMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroLeagueCancelMatch::CopyFrom(const stHeroLeagueCancelMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroLeagueCancelMatch::IsInitialized() const {

  return true;
}

void stHeroLeagueCancelMatch::Swap(stHeroLeagueCancelMatch* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroLeagueCancelMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroLeagueCancelMatch_descriptor_;
  metadata.reflection = stHeroLeagueCancelMatch_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stPubRoleInfo::kCharIDFieldNumber;
const int stPubRoleInfo::kPubCharIDFieldNumber;
const int stPubRoleInfo::kAreaCodeFieldNumber;
const int stPubRoleInfo::kNameFieldNumber;
const int stPubRoleInfo::kLevelFieldNumber;
const int stPubRoleInfo::kVipLvFieldNumber;
const int stPubRoleInfo::kJobFieldNumber;
const int stPubRoleInfo::kSexFieldNumber;
const int stPubRoleInfo::kBattlePowerFieldNumber;
const int stPubRoleInfo::kPubServerIndexFieldNumber;
const int stPubRoleInfo::kScoreFieldNumber;
const int stPubRoleInfo::kWinOrLossFieldNumber;
const int stPubRoleInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stPubRoleInfo::stPubRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPubRoleInfo::InitAsDefaultInstance() {
}

stPubRoleInfo::stPubRoleInfo(const stPubRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPubRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  pubcharid_ = 0u;
  areacode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  viplv_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  pubserverindex_ = 0u;
  score_ = 0u;
  winorloss_ = false;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPubRoleInfo::~stPubRoleInfo() {
  SharedDtor();
}

void stPubRoleInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stPubRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPubRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPubRoleInfo_descriptor_;
}

const stPubRoleInfo& stPubRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stPubRoleInfo* stPubRoleInfo::default_instance_ = NULL;

stPubRoleInfo* stPubRoleInfo::New() const {
  return new stPubRoleInfo;
}

void stPubRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    pubcharid_ = 0u;
    areacode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    viplv_ = 0u;
    job_ = 0u;
    sex_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    battlepower_ = 0u;
    pubserverindex_ = 0u;
    score_ = 0u;
    winorloss_ = false;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPubRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pubCharID;
        break;
      }

      // optional uint32 pubCharID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubCharID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pubcharid_)));
          set_has_pubcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job;
        break;
      }

      // optional uint32 job = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pubServerIndex;
        break;
      }

      // optional uint32 pubServerIndex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubServerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pubserverindex_)));
          set_has_pubserverindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_score;
        break;
      }

      // optional uint32 score = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_winOrLoss;
        break;
      }

      // optional bool winOrLoss = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winOrLoss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &winorloss_)));
          set_has_winorloss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPubRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 pubCharID = 2;
  if (has_pubcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pubcharid(), output);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->areacode(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 vipLv = 6;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->viplv(), output);
  }

  // optional uint32 job = 7;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->job(), output);
  }

  // optional uint32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sex(), output);
  }

  // optional uint32 battlePower = 9;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->battlepower(), output);
  }

  // optional uint32 pubServerIndex = 10;
  if (has_pubserverindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pubserverindex(), output);
  }

  // optional uint32 score = 11;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->score(), output);
  }

  // optional bool winOrLoss = 12;
  if (has_winorloss()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->winorloss(), output);
  }

  // optional uint32 photoID = 13;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPubRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 pubCharID = 2;
  if (has_pubcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pubcharid(), target);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->areacode(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 vipLv = 6;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->viplv(), target);
  }

  // optional uint32 job = 7;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->job(), target);
  }

  // optional uint32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sex(), target);
  }

  // optional uint32 battlePower = 9;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->battlepower(), target);
  }

  // optional uint32 pubServerIndex = 10;
  if (has_pubserverindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pubserverindex(), target);
  }

  // optional uint32 score = 11;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->score(), target);
  }

  // optional bool winOrLoss = 12;
  if (has_winorloss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->winorloss(), target);
  }

  // optional uint32 photoID = 13;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPubRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 pubCharID = 2;
    if (has_pubcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pubcharid());
    }

    // optional uint32 areaCode = 3;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vipLv = 6;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 job = 7;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 battlePower = 9;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 pubServerIndex = 10;
    if (has_pubserverindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pubserverindex());
    }

    // optional uint32 score = 11;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional bool winOrLoss = 12;
    if (has_winorloss()) {
      total_size += 1 + 1;
    }

    // optional uint32 photoID = 13;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPubRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPubRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPubRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPubRoleInfo::MergeFrom(const stPubRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_pubcharid()) {
      set_pubcharid(from.pubcharid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_pubserverindex()) {
      set_pubserverindex(from.pubserverindex());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_winorloss()) {
      set_winorloss(from.winorloss());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPubRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPubRoleInfo::CopyFrom(const stPubRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPubRoleInfo::IsInitialized() const {

  return true;
}

void stPubRoleInfo::Swap(stPubRoleInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(pubcharid_, other->pubcharid_);
    std::swap(areacode_, other->areacode_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(pubserverindex_, other->pubserverindex_);
    std::swap(score_, other->score_);
    std::swap(winorloss_, other->winorloss_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPubRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPubRoleInfo_descriptor_;
  metadata.reflection = stPubRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyHeroLeagueResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyHeroLeagueResult_ProtoModID_descriptor_;
}
bool stNotifyHeroLeagueResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyHeroLeagueResult_ProtoModID stNotifyHeroLeagueResult::ModID;
const stNotifyHeroLeagueResult_ProtoModID stNotifyHeroLeagueResult::ProtoModID_MIN;
const stNotifyHeroLeagueResult_ProtoModID stNotifyHeroLeagueResult::ProtoModID_MAX;
const int stNotifyHeroLeagueResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyHeroLeagueResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyHeroLeagueResult_ProtoFunID_descriptor_;
}
bool stNotifyHeroLeagueResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyHeroLeagueResult_ProtoFunID stNotifyHeroLeagueResult::FunID;
const stNotifyHeroLeagueResult_ProtoFunID stNotifyHeroLeagueResult::ProtoFunID_MIN;
const stNotifyHeroLeagueResult_ProtoFunID stNotifyHeroLeagueResult::ProtoFunID_MAX;
const int stNotifyHeroLeagueResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyHeroLeagueResult::kUser1FieldNumber;
const int stNotifyHeroLeagueResult::kUser2FieldNumber;
#endif  // !_MSC_VER

stNotifyHeroLeagueResult::stNotifyHeroLeagueResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyHeroLeagueResult::InitAsDefaultInstance() {
  user1_ = const_cast< ::PubGame::stPubRoleInfo*>(&::PubGame::stPubRoleInfo::default_instance());
  user2_ = const_cast< ::PubGame::stPubRoleInfo*>(&::PubGame::stPubRoleInfo::default_instance());
}

stNotifyHeroLeagueResult::stNotifyHeroLeagueResult(const stNotifyHeroLeagueResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyHeroLeagueResult::SharedCtor() {
  _cached_size_ = 0;
  user1_ = NULL;
  user2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyHeroLeagueResult::~stNotifyHeroLeagueResult() {
  SharedDtor();
}

void stNotifyHeroLeagueResult::SharedDtor() {
  if (this != default_instance_) {
    delete user1_;
    delete user2_;
  }
}

void stNotifyHeroLeagueResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyHeroLeagueResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyHeroLeagueResult_descriptor_;
}

const stNotifyHeroLeagueResult& stNotifyHeroLeagueResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stNotifyHeroLeagueResult* stNotifyHeroLeagueResult::default_instance_ = NULL;

stNotifyHeroLeagueResult* stNotifyHeroLeagueResult::New() const {
  return new stNotifyHeroLeagueResult;
}

void stNotifyHeroLeagueResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user1()) {
      if (user1_ != NULL) user1_->::PubGame::stPubRoleInfo::Clear();
    }
    if (has_user2()) {
      if (user2_ != NULL) user2_->::PubGame::stPubRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyHeroLeagueResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PubGame.stPubRoleInfo user1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user2;
        break;
      }

      // optional .PubGame.stPubRoleInfo user2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyHeroLeagueResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PubGame.stPubRoleInfo user1 = 1;
  if (has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user1(), output);
  }

  // optional .PubGame.stPubRoleInfo user2 = 2;
  if (has_user2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyHeroLeagueResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PubGame.stPubRoleInfo user1 = 1;
  if (has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user1(), target);
  }

  // optional .PubGame.stPubRoleInfo user2 = 2;
  if (has_user2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyHeroLeagueResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PubGame.stPubRoleInfo user1 = 1;
    if (has_user1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user1());
    }

    // optional .PubGame.stPubRoleInfo user2 = 2;
    if (has_user2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyHeroLeagueResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyHeroLeagueResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyHeroLeagueResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyHeroLeagueResult::MergeFrom(const stNotifyHeroLeagueResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user1()) {
      mutable_user1()->::PubGame::stPubRoleInfo::MergeFrom(from.user1());
    }
    if (from.has_user2()) {
      mutable_user2()->::PubGame::stPubRoleInfo::MergeFrom(from.user2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyHeroLeagueResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyHeroLeagueResult::CopyFrom(const stNotifyHeroLeagueResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyHeroLeagueResult::IsInitialized() const {

  return true;
}

void stNotifyHeroLeagueResult::Swap(stNotifyHeroLeagueResult* other) {
  if (other != this) {
    std::swap(user1_, other->user1_);
    std::swap(user2_, other->user2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyHeroLeagueResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyHeroLeagueResult_descriptor_;
  metadata.reflection = stNotifyHeroLeagueResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynPubRoleList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPubRoleList_ProtoModID_descriptor_;
}
bool stSynPubRoleList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynPubRoleList_ProtoModID stSynPubRoleList::ModID;
const stSynPubRoleList_ProtoModID stSynPubRoleList::ProtoModID_MIN;
const stSynPubRoleList_ProtoModID stSynPubRoleList::ProtoModID_MAX;
const int stSynPubRoleList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynPubRoleList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPubRoleList_ProtoFunID_descriptor_;
}
bool stSynPubRoleList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynPubRoleList_ProtoFunID stSynPubRoleList::FunID;
const stSynPubRoleList_ProtoFunID stSynPubRoleList::ProtoFunID_MIN;
const stSynPubRoleList_ProtoFunID stSynPubRoleList::ProtoFunID_MAX;
const int stSynPubRoleList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynPubRoleList::kTagFieldNumber;
#endif  // !_MSC_VER

stSynPubRoleList::stSynPubRoleList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynPubRoleList::InitAsDefaultInstance() {
}

stSynPubRoleList::stSynPubRoleList(const stSynPubRoleList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynPubRoleList::SharedCtor() {
  _cached_size_ = 0;
  tag_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynPubRoleList::~stSynPubRoleList() {
  SharedDtor();
}

void stSynPubRoleList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynPubRoleList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynPubRoleList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPubRoleList_descriptor_;
}

const stSynPubRoleList& stSynPubRoleList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stSynPubRoleList* stSynPubRoleList::default_instance_ = NULL;

stSynPubRoleList* stSynPubRoleList::New() const {
  return new stSynPubRoleList;
}

void stSynPubRoleList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tag_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynPubRoleList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tag_)));
          set_has_tag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynPubRoleList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynPubRoleList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 tag = 1;
  if (has_tag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynPubRoleList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynPubRoleList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynPubRoleList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynPubRoleList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynPubRoleList::MergeFrom(const stSynPubRoleList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynPubRoleList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynPubRoleList::CopyFrom(const stSynPubRoleList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynPubRoleList::IsInitialized() const {

  return true;
}

void stSynPubRoleList::Swap(stSynPubRoleList* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynPubRoleList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynPubRoleList_descriptor_;
  metadata.reflection = stSynPubRoleList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynRoleInfo::kPubCharIDFieldNumber;
const int stSynRoleInfo::kPubServerIndexFieldNumber;
#endif  // !_MSC_VER

stSynRoleInfo::stSynRoleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynRoleInfo::InitAsDefaultInstance() {
}

stSynRoleInfo::stSynRoleInfo(const stSynRoleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynRoleInfo::SharedCtor() {
  _cached_size_ = 0;
  pubcharid_ = 0u;
  pubserverindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynRoleInfo::~stSynRoleInfo() {
  SharedDtor();
}

void stSynRoleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynRoleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynRoleInfo_descriptor_;
}

const stSynRoleInfo& stSynRoleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stSynRoleInfo* stSynRoleInfo::default_instance_ = NULL;

stSynRoleInfo* stSynRoleInfo::New() const {
  return new stSynRoleInfo;
}

void stSynRoleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pubcharid_ = 0u;
    pubserverindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pubCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pubcharid_)));
          set_has_pubcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pubServerIndex;
        break;
      }

      // optional uint32 pubServerIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pubServerIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pubserverindex_)));
          set_has_pubserverindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pubCharID = 1;
  if (has_pubcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pubcharid(), output);
  }

  // optional uint32 pubServerIndex = 2;
  if (has_pubserverindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pubserverindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynRoleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pubCharID = 1;
  if (has_pubcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pubcharid(), target);
  }

  // optional uint32 pubServerIndex = 2;
  if (has_pubserverindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pubserverindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynRoleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pubCharID = 1;
    if (has_pubcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pubcharid());
    }

    // optional uint32 pubServerIndex = 2;
    if (has_pubserverindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pubserverindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynRoleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynRoleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynRoleInfo::MergeFrom(const stSynRoleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pubcharid()) {
      set_pubcharid(from.pubcharid());
    }
    if (from.has_pubserverindex()) {
      set_pubserverindex(from.pubserverindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynRoleInfo::CopyFrom(const stSynRoleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynRoleInfo::IsInitialized() const {

  return true;
}

void stSynRoleInfo::Swap(stSynRoleInfo* other) {
  if (other != this) {
    std::swap(pubcharid_, other->pubcharid_);
    std::swap(pubserverindex_, other->pubserverindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynRoleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynRoleInfo_descriptor_;
  metadata.reflection = stSynRoleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stTeam::kUser1FieldNumber;
const int stTeam::kUser2FieldNumber;
#endif  // !_MSC_VER

stTeam::stTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTeam::InitAsDefaultInstance() {
  user1_ = const_cast< ::PubGame::stPubRoleInfo*>(&::PubGame::stPubRoleInfo::default_instance());
  user2_ = const_cast< ::PubGame::stPubRoleInfo*>(&::PubGame::stPubRoleInfo::default_instance());
}

stTeam::stTeam(const stTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTeam::SharedCtor() {
  _cached_size_ = 0;
  user1_ = NULL;
  user2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTeam::~stTeam() {
  SharedDtor();
}

void stTeam::SharedDtor() {
  if (this != default_instance_) {
    delete user1_;
    delete user2_;
  }
}

void stTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTeam_descriptor_;
}

const stTeam& stTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stTeam* stTeam::default_instance_ = NULL;

stTeam* stTeam::New() const {
  return new stTeam;
}

void stTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user1()) {
      if (user1_ != NULL) user1_->::PubGame::stPubRoleInfo::Clear();
    }
    if (has_user2()) {
      if (user2_ != NULL) user2_->::PubGame::stPubRoleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PubGame.stPubRoleInfo user1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user2;
        break;
      }

      // optional .PubGame.stPubRoleInfo user2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PubGame.stPubRoleInfo user1 = 1;
  if (has_user1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user1(), output);
  }

  // optional .PubGame.stPubRoleInfo user2 = 2;
  if (has_user2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PubGame.stPubRoleInfo user1 = 1;
  if (has_user1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user1(), target);
  }

  // optional .PubGame.stPubRoleInfo user2 = 2;
  if (has_user2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PubGame.stPubRoleInfo user1 = 1;
    if (has_user1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user1());
    }

    // optional .PubGame.stPubRoleInfo user2 = 2;
    if (has_user2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTeam::MergeFrom(const stTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user1()) {
      mutable_user1()->::PubGame::stPubRoleInfo::MergeFrom(from.user1());
    }
    if (from.has_user2()) {
      mutable_user2()->::PubGame::stPubRoleInfo::MergeFrom(from.user2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTeam::CopyFrom(const stTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTeam::IsInitialized() const {

  return true;
}

void stTeam::Swap(stTeam* other) {
  if (other != this) {
    std::swap(user1_, other->user1_);
    std::swap(user2_, other->user2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTeam_descriptor_;
  metadata.reflection = stTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynPubRoleListResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPubRoleListResult_ProtoModID_descriptor_;
}
bool stSynPubRoleListResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynPubRoleListResult_ProtoModID stSynPubRoleListResult::ModID;
const stSynPubRoleListResult_ProtoModID stSynPubRoleListResult::ProtoModID_MIN;
const stSynPubRoleListResult_ProtoModID stSynPubRoleListResult::ProtoModID_MAX;
const int stSynPubRoleListResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynPubRoleListResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPubRoleListResult_ProtoFunID_descriptor_;
}
bool stSynPubRoleListResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynPubRoleListResult_ProtoFunID stSynPubRoleListResult::FunID;
const stSynPubRoleListResult_ProtoFunID stSynPubRoleListResult::ProtoFunID_MIN;
const stSynPubRoleListResult_ProtoFunID stSynPubRoleListResult::ProtoFunID_MAX;
const int stSynPubRoleListResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynPubRoleListResult::kTeamFieldNumber;
const int stSynPubRoleListResult::kCharIDsFieldNumber;
const int stSynPubRoleListResult::kIsFinalFieldNumber;
#endif  // !_MSC_VER

stSynPubRoleListResult::stSynPubRoleListResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynPubRoleListResult::InitAsDefaultInstance() {
}

stSynPubRoleListResult::stSynPubRoleListResult(const stSynPubRoleListResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynPubRoleListResult::SharedCtor() {
  _cached_size_ = 0;
  isfinal_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynPubRoleListResult::~stSynPubRoleListResult() {
  SharedDtor();
}

void stSynPubRoleListResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynPubRoleListResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynPubRoleListResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPubRoleListResult_descriptor_;
}

const stSynPubRoleListResult& stSynPubRoleListResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stSynPubRoleListResult* stSynPubRoleListResult::default_instance_ = NULL;

stSynPubRoleListResult* stSynPubRoleListResult::New() const {
  return new stSynPubRoleListResult;
}

void stSynPubRoleListResult::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    isfinal_ = false;
  }
  team_.Clear();
  charids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynPubRoleListResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PubGame.stTeam team = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_team()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_team;
        if (input->ExpectTag(18)) goto parse_charIDs;
        break;
      }

      // repeated .PubGame.stPubRoleInfo charIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_charids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charIDs;
        if (input->ExpectTag(24)) goto parse_isFinal;
        break;
      }

      // optional bool isFinal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFinal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfinal_)));
          set_has_isfinal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynPubRoleListResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PubGame.stTeam team = 1;
  for (int i = 0; i < this->team_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->team(i), output);
  }

  // repeated .PubGame.stPubRoleInfo charIDs = 2;
  for (int i = 0; i < this->charids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->charids(i), output);
  }

  // optional bool isFinal = 3;
  if (has_isfinal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfinal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynPubRoleListResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PubGame.stTeam team = 1;
  for (int i = 0; i < this->team_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->team(i), target);
  }

  // repeated .PubGame.stPubRoleInfo charIDs = 2;
  for (int i = 0; i < this->charids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->charids(i), target);
  }

  // optional bool isFinal = 3;
  if (has_isfinal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfinal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynPubRoleListResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool isFinal = 3;
    if (has_isfinal()) {
      total_size += 1 + 1;
    }

  }
  // repeated .PubGame.stTeam team = 1;
  total_size += 1 * this->team_size();
  for (int i = 0; i < this->team_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->team(i));
  }

  // repeated .PubGame.stPubRoleInfo charIDs = 2;
  total_size += 1 * this->charids_size();
  for (int i = 0; i < this->charids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->charids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynPubRoleListResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynPubRoleListResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynPubRoleListResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynPubRoleListResult::MergeFrom(const stSynPubRoleListResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  team_.MergeFrom(from.team_);
  charids_.MergeFrom(from.charids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_isfinal()) {
      set_isfinal(from.isfinal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynPubRoleListResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynPubRoleListResult::CopyFrom(const stSynPubRoleListResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynPubRoleListResult::IsInitialized() const {

  return true;
}

void stSynPubRoleListResult::Swap(stSynPubRoleListResult* other) {
  if (other != this) {
    team_.Swap(&other->team_);
    charids_.Swap(&other->charids_);
    std::swap(isfinal_, other->isfinal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynPubRoleListResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynPubRoleListResult_descriptor_;
  metadata.reflection = stSynPubRoleListResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMenberInfo_ProtoModID_descriptor_;
}
bool stReqMenberInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMenberInfo_ProtoModID stReqMenberInfo::ModID;
const stReqMenberInfo_ProtoModID stReqMenberInfo::ProtoModID_MIN;
const stReqMenberInfo_ProtoModID stReqMenberInfo::ProtoModID_MAX;
const int stReqMenberInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMenberInfo_ProtoFunID_descriptor_;
}
bool stReqMenberInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqMenberInfo_ProtoFunID stReqMenberInfo::FunID;
const stReqMenberInfo_ProtoFunID stReqMenberInfo::ProtoFunID_MIN;
const stReqMenberInfo_ProtoFunID stReqMenberInfo::ProtoFunID_MAX;
const int stReqMenberInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqMenberInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqMenberInfo::stReqMenberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqMenberInfo::InitAsDefaultInstance() {
}

stReqMenberInfo::stReqMenberInfo(const stReqMenberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqMenberInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqMenberInfo::~stReqMenberInfo() {
  SharedDtor();
}

void stReqMenberInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqMenberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqMenberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqMenberInfo_descriptor_;
}

const stReqMenberInfo& stReqMenberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stReqMenberInfo* stReqMenberInfo::default_instance_ = NULL;

stReqMenberInfo* stReqMenberInfo::New() const {
  return new stReqMenberInfo;
}

void stReqMenberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqMenberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqMenberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqMenberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqMenberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqMenberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqMenberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqMenberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqMenberInfo::MergeFrom(const stReqMenberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqMenberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqMenberInfo::CopyFrom(const stReqMenberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqMenberInfo::IsInitialized() const {

  return true;
}

void stReqMenberInfo::Swap(stReqMenberInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqMenberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqMenberInfo_descriptor_;
  metadata.reflection = stReqMenberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynChampionInfo::kCharIDFieldNumber;
const int stSynChampionInfo::kNameFieldNumber;
const int stSynChampionInfo::kAreaCodeFieldNumber;
const int stSynChampionInfo::kLevelFieldNumber;
const int stSynChampionInfo::kJobFieldNumber;
const int stSynChampionInfo::kSexFieldNumber;
const int stSynChampionInfo::kLeaderFieldNumber;
const int stSynChampionInfo::kBattlePowerFieldNumber;
const int stSynChampionInfo::kPosFieldNumber;
const int stSynChampionInfo::kHeadIDFieldNumber;
const int stSynChampionInfo::kBodyIDFieldNumber;
const int stSynChampionInfo::kWeaponIDFieldNumber;
const int stSynChampionInfo::kCloackIDFieldNumber;
const int stSynChampionInfo::kWingIDFieldNumber;
const int stSynChampionInfo::kShoeIDFieldNumber;
const int stSynChampionInfo::kFashionHairFieldNumber;
const int stSynChampionInfo::kFashionFaceFieldNumber;
const int stSynChampionInfo::kFashionBodyFieldNumber;
const int stSynChampionInfo::kFashionWeaponFieldNumber;
const int stSynChampionInfo::kFashionShoeFieldNumber;
const int stSynChampionInfo::kFashionDecorationFieldNumber;
const int stSynChampionInfo::kEffectIDFieldNumber;
const int stSynChampionInfo::kWingBreakLvFieldNumber;
const int stSynChampionInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynChampionInfo::stSynChampionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynChampionInfo::InitAsDefaultInstance() {
}

stSynChampionInfo::stSynChampionInfo(const stSynChampionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynChampionInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  areacode_ = 0u;
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  leader_ = false;
  battlepower_ = 0u;
  pos_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynChampionInfo::~stSynChampionInfo() {
  SharedDtor();
}

void stSynChampionInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynChampionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynChampionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynChampionInfo_descriptor_;
}

const stSynChampionInfo& stSynChampionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stSynChampionInfo* stSynChampionInfo::default_instance_ = NULL;

stSynChampionInfo* stSynChampionInfo::New() const {
  return new stSynChampionInfo;
}

void stSynChampionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    areacode_ = 0u;
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    leader_ = false;
    battlepower_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pos_ = 0u;
    headid_ = 0u;
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionface_ = 0u;
    fashionbody_ = 0u;
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynChampionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional uint32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leader;
        break;
      }

      // optional bool leader = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynChampionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->areacode(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->job(), output);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sex(), output);
  }

  // optional bool leader = 7;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->leader(), output);
  }

  // optional uint32 battlePower = 8;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->battlepower(), output);
  }

  // optional uint32 pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pos(), output);
  }

  // optional uint32 headID = 10;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->headid(), output);
  }

  // optional uint32 bodyID = 11;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->bodyid(), output);
  }

  // optional uint32 weaponID = 12;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->weaponid(), output);
  }

  // optional uint32 cloackID = 13;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->cloackid(), output);
  }

  // optional uint32 wingID = 14;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->wingid(), output);
  }

  // optional uint32 shoeID = 15;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 16;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 17;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 18;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 19;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 20;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 21;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 22;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 23;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->wingbreaklv(), output);
  }

  // optional uint32 photoID = 24;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynChampionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 areaCode = 3;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->areacode(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->job(), target);
  }

  // optional uint32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sex(), target);
  }

  // optional bool leader = 7;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->leader(), target);
  }

  // optional uint32 battlePower = 8;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->battlepower(), target);
  }

  // optional uint32 pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pos(), target);
  }

  // optional uint32 headID = 10;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->headid(), target);
  }

  // optional uint32 bodyID = 11;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->bodyid(), target);
  }

  // optional uint32 weaponID = 12;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->weaponid(), target);
  }

  // optional uint32 cloackID = 13;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->cloackid(), target);
  }

  // optional uint32 wingID = 14;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->wingid(), target);
  }

  // optional uint32 shoeID = 15;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 16;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 17;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 18;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 19;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 20;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 21;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 22;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 23;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->wingbreaklv(), target);
  }

  // optional uint32 photoID = 24;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynChampionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 areaCode = 3;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional bool leader = 7;
    if (has_leader()) {
      total_size += 1 + 1;
    }

    // optional uint32 battlePower = 8;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 headID = 10;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

    // optional uint32 bodyID = 11;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 12;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 13;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 14;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 15;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 16;
    if (has_fashionhair()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionFace = 17;
    if (has_fashionface()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

    // optional uint32 fashionBody = 18;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

    // optional uint32 fashionWeapon = 19;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 20;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 21;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 22;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 23;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 photoID = 24;
    if (has_photoid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynChampionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynChampionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynChampionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynChampionInfo::MergeFrom(const stSynChampionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynChampionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynChampionInfo::CopyFrom(const stSynChampionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynChampionInfo::IsInitialized() const {

  return true;
}

void stSynChampionInfo::Swap(stSynChampionInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(areacode_, other->areacode_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(leader_, other->leader_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(pos_, other->pos_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynChampionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynChampionInfo_descriptor_;
  metadata.reflection = stSynChampionInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSynChampionInfo_ProtoModID_descriptor_;
}
bool stReqSynChampionInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSynChampionInfo_ProtoModID stReqSynChampionInfo::ModID;
const stReqSynChampionInfo_ProtoModID stReqSynChampionInfo::ProtoModID_MIN;
const stReqSynChampionInfo_ProtoModID stReqSynChampionInfo::ProtoModID_MAX;
const int stReqSynChampionInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqSynChampionInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSynChampionInfo_ProtoFunID_descriptor_;
}
bool stReqSynChampionInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqSynChampionInfo_ProtoFunID stReqSynChampionInfo::FunID;
const stReqSynChampionInfo_ProtoFunID stReqSynChampionInfo::ProtoFunID_MIN;
const stReqSynChampionInfo_ProtoFunID stReqSynChampionInfo::ProtoFunID_MAX;
const int stReqSynChampionInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqSynChampionInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

stReqSynChampionInfo::stReqSynChampionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqSynChampionInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::PubGame::stSynChampionInfo*>(&::PubGame::stSynChampionInfo::default_instance());
}

stReqSynChampionInfo::stReqSynChampionInfo(const stReqSynChampionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqSynChampionInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqSynChampionInfo::~stReqSynChampionInfo() {
  SharedDtor();
}

void stReqSynChampionInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void stReqSynChampionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqSynChampionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqSynChampionInfo_descriptor_;
}

const stReqSynChampionInfo& stReqSynChampionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stReqSynChampionInfo* stReqSynChampionInfo::default_instance_ = NULL;

stReqSynChampionInfo* stReqSynChampionInfo::New() const {
  return new stReqSynChampionInfo;
}

void stReqSynChampionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PubGame::stSynChampionInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqSynChampionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PubGame.stSynChampionInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqSynChampionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PubGame.stSynChampionInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqSynChampionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PubGame.stSynChampionInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqSynChampionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PubGame.stSynChampionInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqSynChampionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqSynChampionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqSynChampionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqSynChampionInfo::MergeFrom(const stReqSynChampionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PubGame::stSynChampionInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqSynChampionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqSynChampionInfo::CopyFrom(const stReqSynChampionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqSynChampionInfo::IsInitialized() const {

  return true;
}

void stReqSynChampionInfo::Swap(stReqSynChampionInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqSynChampionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqSynChampionInfo_descriptor_;
  metadata.reflection = stReqSynChampionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGloryUserPart::kCharIDFieldNumber;
const int stGloryUserPart::kAreaCodeFieldNumber;
const int stGloryUserPart::kNameFieldNumber;
const int stGloryUserPart::kJobFieldNumber;
const int stGloryUserPart::kSexFieldNumber;
const int stGloryUserPart::kLevelFieldNumber;
const int stGloryUserPart::kBattlePowerFieldNumber;
const int stGloryUserPart::kHeadIDFieldNumber;
const int stGloryUserPart::kBodyIDFieldNumber;
const int stGloryUserPart::kWeaponIDFieldNumber;
const int stGloryUserPart::kCloackIDFieldNumber;
const int stGloryUserPart::kWingIDFieldNumber;
const int stGloryUserPart::kShoeIDFieldNumber;
const int stGloryUserPart::kFashionHairFieldNumber;
const int stGloryUserPart::kFashionFaceFieldNumber;
const int stGloryUserPart::kFashionBodyFieldNumber;
const int stGloryUserPart::kFashionWeaponFieldNumber;
const int stGloryUserPart::kFashionShoeFieldNumber;
const int stGloryUserPart::kFashionDecorationFieldNumber;
const int stGloryUserPart::kEffectIDFieldNumber;
const int stGloryUserPart::kWingBreakLvFieldNumber;
#endif  // !_MSC_VER

stGloryUserPart::stGloryUserPart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGloryUserPart::InitAsDefaultInstance() {
}

stGloryUserPart::stGloryUserPart(const stGloryUserPart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGloryUserPart::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  areacode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  battlepower_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGloryUserPart::~stGloryUserPart() {
  SharedDtor();
}

void stGloryUserPart::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stGloryUserPart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGloryUserPart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryUserPart_descriptor_;
}

const stGloryUserPart& stGloryUserPart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stGloryUserPart* stGloryUserPart::default_instance_ = NULL;

stGloryUserPart* stGloryUserPart::New() const {
  return new stGloryUserPart;
}

void stGloryUserPart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    areacode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    battlepower_ = 0u;
    headid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
    fashionbody_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGloryUserPart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGloryUserPart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->areacode(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional uint32 headID = 8;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->headid(), output);
  }

  // optional uint32 bodyID = 9;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bodyid(), output);
  }

  // optional uint32 weaponID = 10;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weaponid(), output);
  }

  // optional uint32 cloackID = 11;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cloackid(), output);
  }

  // optional uint32 wingID = 12;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->wingid(), output);
  }

  // optional uint32 shoeID = 13;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 14;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 15;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 16;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 17;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 18;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 19;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 20;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 21;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->wingbreaklv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGloryUserPart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->areacode(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional uint32 headID = 8;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->headid(), target);
  }

  // optional uint32 bodyID = 9;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bodyid(), target);
  }

  // optional uint32 weaponID = 10;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weaponid(), target);
  }

  // optional uint32 cloackID = 11;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cloackid(), target);
  }

  // optional uint32 wingID = 12;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->wingid(), target);
  }

  // optional uint32 shoeID = 13;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 14;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 15;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 16;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 17;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 18;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 19;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 20;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 21;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->wingbreaklv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGloryUserPart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 areaCode = 2;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 headID = 8;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 bodyID = 9;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 10;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 11;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 12;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 13;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 14;
    if (has_fashionhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 15;
    if (has_fashionface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

    // optional uint32 fashionBody = 16;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionWeapon = 17;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 18;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 19;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 20;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 21;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGloryUserPart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGloryUserPart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGloryUserPart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGloryUserPart::MergeFrom(const stGloryUserPart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGloryUserPart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGloryUserPart::CopyFrom(const stGloryUserPart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGloryUserPart::IsInitialized() const {

  return true;
}

void stGloryUserPart::Swap(stGloryUserPart* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(areacode_, other->areacode_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGloryUserPart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGloryUserPart_descriptor_;
  metadata.reflection = stGloryUserPart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGloryUserDetail::kCharIDFieldNumber;
const int stGloryUserDetail::kAreaCodeFieldNumber;
const int stGloryUserDetail::kNameFieldNumber;
const int stGloryUserDetail::kJobFieldNumber;
const int stGloryUserDetail::kSexFieldNumber;
const int stGloryUserDetail::kLevelFieldNumber;
const int stGloryUserDetail::kBattlePowerFieldNumber;
const int stGloryUserDetail::kHeadIDFieldNumber;
const int stGloryUserDetail::kBodyIDFieldNumber;
const int stGloryUserDetail::kWeaponIDFieldNumber;
const int stGloryUserDetail::kCloackIDFieldNumber;
const int stGloryUserDetail::kWingIDFieldNumber;
const int stGloryUserDetail::kShoeIDFieldNumber;
const int stGloryUserDetail::kFashionHairFieldNumber;
const int stGloryUserDetail::kFashionFaceFieldNumber;
const int stGloryUserDetail::kFashionBodyFieldNumber;
const int stGloryUserDetail::kFashionWeaponFieldNumber;
const int stGloryUserDetail::kFashionShoeFieldNumber;
const int stGloryUserDetail::kFashionDecorationFieldNumber;
const int stGloryUserDetail::kEffectIDFieldNumber;
const int stGloryUserDetail::kWingBreakLvFieldNumber;
const int stGloryUserDetail::kKillNumFieldNumber;
const int stGloryUserDetail::kEvenKillNumFieldNumber;
const int stGloryUserDetail::kTotalKillNumFieldNumber;
const int stGloryUserDetail::kGloryValFieldNumber;
const int stGloryUserDetail::kGloryActionTimeFieldNumber;
const int stGloryUserDetail::kProstatedNumFieldNumber;
const int stGloryUserDetail::kProstateTimeFieldNumber;
const int stGloryUserDetail::kNormalIdFieldNumber;
#endif  // !_MSC_VER

stGloryUserDetail::stGloryUserDetail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGloryUserDetail::InitAsDefaultInstance() {
}

stGloryUserDetail::stGloryUserDetail(const stGloryUserDetail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGloryUserDetail::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  areacode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  battlepower_ = 0u;
  headid_ = 0u;
  bodyid_ = 0u;
  weaponid_ = 0u;
  cloackid_ = 0u;
  wingid_ = 0u;
  shoeid_ = 0u;
  fashionhair_ = 0u;
  fashionface_ = 0u;
  fashionbody_ = 0u;
  fashionweapon_ = 0u;
  fashionshoe_ = 0u;
  fashiondecoration_ = 0u;
  effectid_ = 0u;
  wingbreaklv_ = 0u;
  killnum_ = 0u;
  evenkillnum_ = 0u;
  totalkillnum_ = 0u;
  gloryval_ = 0u;
  gloryactiontime_ = 0u;
  prostatednum_ = 0u;
  prostatetime_ = 0u;
  normalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGloryUserDetail::~stGloryUserDetail() {
  SharedDtor();
}

void stGloryUserDetail::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stGloryUserDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGloryUserDetail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryUserDetail_descriptor_;
}

const stGloryUserDetail& stGloryUserDetail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stGloryUserDetail* stGloryUserDetail::default_instance_ = NULL;

stGloryUserDetail* stGloryUserDetail::New() const {
  return new stGloryUserDetail;
}

void stGloryUserDetail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    areacode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    battlepower_ = 0u;
    headid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bodyid_ = 0u;
    weaponid_ = 0u;
    cloackid_ = 0u;
    wingid_ = 0u;
    shoeid_ = 0u;
    fashionhair_ = 0u;
    fashionface_ = 0u;
    fashionbody_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fashionweapon_ = 0u;
    fashionshoe_ = 0u;
    fashiondecoration_ = 0u;
    effectid_ = 0u;
    wingbreaklv_ = 0u;
    killnum_ = 0u;
    evenkillnum_ = 0u;
    totalkillnum_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    gloryval_ = 0u;
    gloryactiontime_ = 0u;
    prostatednum_ = 0u;
    prostatetime_ = 0u;
    normalid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGloryUserDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_headID;
        break;
      }

      // optional uint32 headID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bodyID;
        break;
      }

      // optional uint32 bodyID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bodyID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bodyid_)));
          set_has_bodyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_weaponID;
        break;
      }

      // optional uint32 weaponID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weaponID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weaponid_)));
          set_has_weaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cloackID;
        break;
      }

      // optional uint32 cloackID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cloackid_)));
          set_has_cloackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_wingID;
        break;
      }

      // optional uint32 wingID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingid_)));
          set_has_wingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_shoeID;
        break;
      }

      // optional uint32 shoeID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shoeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoeid_)));
          set_has_shoeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_fashionHair;
        break;
      }

      // optional uint32 fashionHair = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionHair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionhair_)));
          set_has_fashionhair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_fashionFace;
        break;
      }

      // optional uint32 fashionFace = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionFace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionface_)));
          set_has_fashionface();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fashionBody;
        break;
      }

      // optional uint32 fashionBody = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionBody:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionbody_)));
          set_has_fashionbody();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fashionWeapon;
        break;
      }

      // optional uint32 fashionWeapon = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionweapon_)));
          set_has_fashionweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_fashionShoe;
        break;
      }

      // optional uint32 fashionShoe = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionShoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionshoe_)));
          set_has_fashionshoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fashionDecoration;
        break;
      }

      // optional uint32 fashionDecoration = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionDecoration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashiondecoration_)));
          set_has_fashiondecoration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_effectID;
        break;
      }

      // optional uint32 effectID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effectID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effectid_)));
          set_has_effectid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_wingBreakLv;
        break;
      }

      // optional uint32 wingBreakLv = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wingBreakLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wingbreaklv_)));
          set_has_wingbreaklv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_evenKillNum;
        break;
      }

      // optional uint32 evenKillNum = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evenKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evenkillnum_)));
          set_has_evenkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_totalKillNum;
        break;
      }

      // optional uint32 totalKillNum = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalkillnum_)));
          set_has_totalkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_gloryVal;
        break;
      }

      // optional uint32 gloryVal = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryval_)));
          set_has_gloryval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_gloryActionTime;
        break;
      }

      // optional uint32 gloryActionTime = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryActionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryactiontime_)));
          set_has_gloryactiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_prostatedNum;
        break;
      }

      // optional uint32 prostatedNum = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prostatedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostatednum_)));
          set_has_prostatednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_prostateTime;
        break;
      }

      // optional uint32 prostateTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prostateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostatetime_)));
          set_has_prostatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_normalId;
        break;
      }

      // optional uint32 normalId = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalid_)));
          set_has_normalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGloryUserDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->areacode(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional uint32 headID = 8;
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->headid(), output);
  }

  // optional uint32 bodyID = 9;
  if (has_bodyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->bodyid(), output);
  }

  // optional uint32 weaponID = 10;
  if (has_weaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->weaponid(), output);
  }

  // optional uint32 cloackID = 11;
  if (has_cloackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->cloackid(), output);
  }

  // optional uint32 wingID = 12;
  if (has_wingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->wingid(), output);
  }

  // optional uint32 shoeID = 13;
  if (has_shoeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->shoeid(), output);
  }

  // optional uint32 fashionHair = 14;
  if (has_fashionhair()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->fashionhair(), output);
  }

  // optional uint32 fashionFace = 15;
  if (has_fashionface()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->fashionface(), output);
  }

  // optional uint32 fashionBody = 16;
  if (has_fashionbody()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->fashionbody(), output);
  }

  // optional uint32 fashionWeapon = 17;
  if (has_fashionweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->fashionweapon(), output);
  }

  // optional uint32 fashionShoe = 18;
  if (has_fashionshoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->fashionshoe(), output);
  }

  // optional uint32 fashionDecoration = 19;
  if (has_fashiondecoration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->fashiondecoration(), output);
  }

  // optional uint32 effectID = 20;
  if (has_effectid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->effectid(), output);
  }

  // optional uint32 wingBreakLv = 21;
  if (has_wingbreaklv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->wingbreaklv(), output);
  }

  // optional uint32 killNum = 22;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->killnum(), output);
  }

  // optional uint32 evenKillNum = 23;
  if (has_evenkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->evenkillnum(), output);
  }

  // optional uint32 totalKillNum = 24;
  if (has_totalkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->totalkillnum(), output);
  }

  // optional uint32 gloryVal = 25;
  if (has_gloryval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->gloryval(), output);
  }

  // optional uint32 gloryActionTime = 26;
  if (has_gloryactiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->gloryactiontime(), output);
  }

  // optional uint32 prostatedNum = 27;
  if (has_prostatednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->prostatednum(), output);
  }

  // optional uint32 prostateTime = 28;
  if (has_prostatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->prostatetime(), output);
  }

  // optional uint32 normalId = 29;
  if (has_normalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->normalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGloryUserDetail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->areacode(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional uint32 headID = 8;
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->headid(), target);
  }

  // optional uint32 bodyID = 9;
  if (has_bodyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->bodyid(), target);
  }

  // optional uint32 weaponID = 10;
  if (has_weaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->weaponid(), target);
  }

  // optional uint32 cloackID = 11;
  if (has_cloackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->cloackid(), target);
  }

  // optional uint32 wingID = 12;
  if (has_wingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->wingid(), target);
  }

  // optional uint32 shoeID = 13;
  if (has_shoeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->shoeid(), target);
  }

  // optional uint32 fashionHair = 14;
  if (has_fashionhair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->fashionhair(), target);
  }

  // optional uint32 fashionFace = 15;
  if (has_fashionface()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->fashionface(), target);
  }

  // optional uint32 fashionBody = 16;
  if (has_fashionbody()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->fashionbody(), target);
  }

  // optional uint32 fashionWeapon = 17;
  if (has_fashionweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->fashionweapon(), target);
  }

  // optional uint32 fashionShoe = 18;
  if (has_fashionshoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->fashionshoe(), target);
  }

  // optional uint32 fashionDecoration = 19;
  if (has_fashiondecoration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->fashiondecoration(), target);
  }

  // optional uint32 effectID = 20;
  if (has_effectid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->effectid(), target);
  }

  // optional uint32 wingBreakLv = 21;
  if (has_wingbreaklv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->wingbreaklv(), target);
  }

  // optional uint32 killNum = 22;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->killnum(), target);
  }

  // optional uint32 evenKillNum = 23;
  if (has_evenkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->evenkillnum(), target);
  }

  // optional uint32 totalKillNum = 24;
  if (has_totalkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->totalkillnum(), target);
  }

  // optional uint32 gloryVal = 25;
  if (has_gloryval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->gloryval(), target);
  }

  // optional uint32 gloryActionTime = 26;
  if (has_gloryactiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->gloryactiontime(), target);
  }

  // optional uint32 prostatedNum = 27;
  if (has_prostatednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->prostatednum(), target);
  }

  // optional uint32 prostateTime = 28;
  if (has_prostatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->prostatetime(), target);
  }

  // optional uint32 normalId = 29;
  if (has_normalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->normalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGloryUserDetail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 areaCode = 2;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 headID = 8;
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->headid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 bodyID = 9;
    if (has_bodyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bodyid());
    }

    // optional uint32 weaponID = 10;
    if (has_weaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weaponid());
    }

    // optional uint32 cloackID = 11;
    if (has_cloackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cloackid());
    }

    // optional uint32 wingID = 12;
    if (has_wingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingid());
    }

    // optional uint32 shoeID = 13;
    if (has_shoeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoeid());
    }

    // optional uint32 fashionHair = 14;
    if (has_fashionhair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionhair());
    }

    // optional uint32 fashionFace = 15;
    if (has_fashionface()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionface());
    }

    // optional uint32 fashionBody = 16;
    if (has_fashionbody()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionbody());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fashionWeapon = 17;
    if (has_fashionweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionweapon());
    }

    // optional uint32 fashionShoe = 18;
    if (has_fashionshoe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionshoe());
    }

    // optional uint32 fashionDecoration = 19;
    if (has_fashiondecoration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashiondecoration());
    }

    // optional uint32 effectID = 20;
    if (has_effectid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effectid());
    }

    // optional uint32 wingBreakLv = 21;
    if (has_wingbreaklv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wingbreaklv());
    }

    // optional uint32 killNum = 22;
    if (has_killnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 evenKillNum = 23;
    if (has_evenkillnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evenkillnum());
    }

    // optional uint32 totalKillNum = 24;
    if (has_totalkillnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalkillnum());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 gloryVal = 25;
    if (has_gloryval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryval());
    }

    // optional uint32 gloryActionTime = 26;
    if (has_gloryactiontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryactiontime());
    }

    // optional uint32 prostatedNum = 27;
    if (has_prostatednum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostatednum());
    }

    // optional uint32 prostateTime = 28;
    if (has_prostatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostatetime());
    }

    // optional uint32 normalId = 29;
    if (has_normalid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGloryUserDetail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGloryUserDetail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGloryUserDetail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGloryUserDetail::MergeFrom(const stGloryUserDetail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bodyid()) {
      set_bodyid(from.bodyid());
    }
    if (from.has_weaponid()) {
      set_weaponid(from.weaponid());
    }
    if (from.has_cloackid()) {
      set_cloackid(from.cloackid());
    }
    if (from.has_wingid()) {
      set_wingid(from.wingid());
    }
    if (from.has_shoeid()) {
      set_shoeid(from.shoeid());
    }
    if (from.has_fashionhair()) {
      set_fashionhair(from.fashionhair());
    }
    if (from.has_fashionface()) {
      set_fashionface(from.fashionface());
    }
    if (from.has_fashionbody()) {
      set_fashionbody(from.fashionbody());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fashionweapon()) {
      set_fashionweapon(from.fashionweapon());
    }
    if (from.has_fashionshoe()) {
      set_fashionshoe(from.fashionshoe());
    }
    if (from.has_fashiondecoration()) {
      set_fashiondecoration(from.fashiondecoration());
    }
    if (from.has_effectid()) {
      set_effectid(from.effectid());
    }
    if (from.has_wingbreaklv()) {
      set_wingbreaklv(from.wingbreaklv());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_evenkillnum()) {
      set_evenkillnum(from.evenkillnum());
    }
    if (from.has_totalkillnum()) {
      set_totalkillnum(from.totalkillnum());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gloryval()) {
      set_gloryval(from.gloryval());
    }
    if (from.has_gloryactiontime()) {
      set_gloryactiontime(from.gloryactiontime());
    }
    if (from.has_prostatednum()) {
      set_prostatednum(from.prostatednum());
    }
    if (from.has_prostatetime()) {
      set_prostatetime(from.prostatetime());
    }
    if (from.has_normalid()) {
      set_normalid(from.normalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGloryUserDetail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGloryUserDetail::CopyFrom(const stGloryUserDetail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGloryUserDetail::IsInitialized() const {

  return true;
}

void stGloryUserDetail::Swap(stGloryUserDetail* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(areacode_, other->areacode_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(headid_, other->headid_);
    std::swap(bodyid_, other->bodyid_);
    std::swap(weaponid_, other->weaponid_);
    std::swap(cloackid_, other->cloackid_);
    std::swap(wingid_, other->wingid_);
    std::swap(shoeid_, other->shoeid_);
    std::swap(fashionhair_, other->fashionhair_);
    std::swap(fashionface_, other->fashionface_);
    std::swap(fashionbody_, other->fashionbody_);
    std::swap(fashionweapon_, other->fashionweapon_);
    std::swap(fashionshoe_, other->fashionshoe_);
    std::swap(fashiondecoration_, other->fashiondecoration_);
    std::swap(effectid_, other->effectid_);
    std::swap(wingbreaklv_, other->wingbreaklv_);
    std::swap(killnum_, other->killnum_);
    std::swap(evenkillnum_, other->evenkillnum_);
    std::swap(totalkillnum_, other->totalkillnum_);
    std::swap(gloryval_, other->gloryval_);
    std::swap(gloryactiontime_, other->gloryactiontime_);
    std::swap(prostatednum_, other->prostatednum_);
    std::swap(prostatetime_, other->prostatetime_);
    std::swap(normalid_, other->normalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGloryUserDetail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGloryUserDetail_descriptor_;
  metadata.reflection = stGloryUserDetail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGloryUser::kCharIDFieldNumber;
const int stGloryUser::kAreaCodeFieldNumber;
const int stGloryUser::kNameFieldNumber;
const int stGloryUser::kKillNumFieldNumber;
const int stGloryUser::kEvenKillNumFieldNumber;
const int stGloryUser::kTotalKillNumFieldNumber;
const int stGloryUser::kGloryValFieldNumber;
const int stGloryUser::kGloryActionTimeFieldNumber;
const int stGloryUser::kProstatedNumFieldNumber;
const int stGloryUser::kProstateTimeFieldNumber;
const int stGloryUser::kNormalIdFieldNumber;
#endif  // !_MSC_VER

stGloryUser::stGloryUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGloryUser::InitAsDefaultInstance() {
}

stGloryUser::stGloryUser(const stGloryUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGloryUser::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  areacode_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  killnum_ = 0u;
  evenkillnum_ = 0u;
  totalkillnum_ = 0u;
  gloryval_ = 0u;
  gloryactiontime_ = 0u;
  prostatednum_ = 0u;
  prostatetime_ = 0u;
  normalid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGloryUser::~stGloryUser() {
  SharedDtor();
}

void stGloryUser::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stGloryUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGloryUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGloryUser_descriptor_;
}

const stGloryUser& stGloryUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stGloryUser* stGloryUser::default_instance_ = NULL;

stGloryUser* stGloryUser::New() const {
  return new stGloryUser;
}

void stGloryUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    areacode_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    killnum_ = 0u;
    evenkillnum_ = 0u;
    totalkillnum_ = 0u;
    gloryval_ = 0u;
    gloryactiontime_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    prostatednum_ = 0u;
    prostatetime_ = 0u;
    normalid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGloryUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_areaCode;
        break;
      }

      // optional uint32 areaCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_areaCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &areacode_)));
          set_has_areacode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_evenKillNum;
        break;
      }

      // optional uint32 evenKillNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_evenKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &evenkillnum_)));
          set_has_evenkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalKillNum;
        break;
      }

      // optional uint32 totalKillNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalKillNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalkillnum_)));
          set_has_totalkillnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_gloryVal;
        break;
      }

      // optional uint32 gloryVal = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryval_)));
          set_has_gloryval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gloryActionTime;
        break;
      }

      // optional uint32 gloryActionTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gloryActionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gloryactiontime_)));
          set_has_gloryactiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_prostatedNum;
        break;
      }

      // optional uint32 prostatedNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prostatedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostatednum_)));
          set_has_prostatednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_prostateTime;
        break;
      }

      // optional uint32 prostateTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prostateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prostatetime_)));
          set_has_prostatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_normalId;
        break;
      }

      // optional uint32 normalId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normalId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &normalid_)));
          set_has_normalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGloryUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->areacode(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 killNum = 4;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killnum(), output);
  }

  // optional uint32 evenKillNum = 5;
  if (has_evenkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->evenkillnum(), output);
  }

  // optional uint32 totalKillNum = 6;
  if (has_totalkillnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->totalkillnum(), output);
  }

  // optional uint32 gloryVal = 7;
  if (has_gloryval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->gloryval(), output);
  }

  // optional uint32 gloryActionTime = 8;
  if (has_gloryactiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->gloryactiontime(), output);
  }

  // optional uint32 prostatedNum = 9;
  if (has_prostatednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->prostatednum(), output);
  }

  // optional uint32 prostateTime = 10;
  if (has_prostatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->prostatetime(), output);
  }

  // optional uint32 normalId = 11;
  if (has_normalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->normalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGloryUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 areaCode = 2;
  if (has_areacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->areacode(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 killNum = 4;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killnum(), target);
  }

  // optional uint32 evenKillNum = 5;
  if (has_evenkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->evenkillnum(), target);
  }

  // optional uint32 totalKillNum = 6;
  if (has_totalkillnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->totalkillnum(), target);
  }

  // optional uint32 gloryVal = 7;
  if (has_gloryval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->gloryval(), target);
  }

  // optional uint32 gloryActionTime = 8;
  if (has_gloryactiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->gloryactiontime(), target);
  }

  // optional uint32 prostatedNum = 9;
  if (has_prostatednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->prostatednum(), target);
  }

  // optional uint32 prostateTime = 10;
  if (has_prostatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->prostatetime(), target);
  }

  // optional uint32 normalId = 11;
  if (has_normalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->normalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGloryUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 areaCode = 2;
    if (has_areacode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->areacode());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 killNum = 4;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional uint32 evenKillNum = 5;
    if (has_evenkillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->evenkillnum());
    }

    // optional uint32 totalKillNum = 6;
    if (has_totalkillnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalkillnum());
    }

    // optional uint32 gloryVal = 7;
    if (has_gloryval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryval());
    }

    // optional uint32 gloryActionTime = 8;
    if (has_gloryactiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gloryactiontime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 prostatedNum = 9;
    if (has_prostatednum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostatednum());
    }

    // optional uint32 prostateTime = 10;
    if (has_prostatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prostatetime());
    }

    // optional uint32 normalId = 11;
    if (has_normalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->normalid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGloryUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGloryUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGloryUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGloryUser::MergeFrom(const stGloryUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_areacode()) {
      set_areacode(from.areacode());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_evenkillnum()) {
      set_evenkillnum(from.evenkillnum());
    }
    if (from.has_totalkillnum()) {
      set_totalkillnum(from.totalkillnum());
    }
    if (from.has_gloryval()) {
      set_gloryval(from.gloryval());
    }
    if (from.has_gloryactiontime()) {
      set_gloryactiontime(from.gloryactiontime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_prostatednum()) {
      set_prostatednum(from.prostatednum());
    }
    if (from.has_prostatetime()) {
      set_prostatetime(from.prostatetime());
    }
    if (from.has_normalid()) {
      set_normalid(from.normalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGloryUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGloryUser::CopyFrom(const stGloryUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGloryUser::IsInitialized() const {

  return true;
}

void stGloryUser::Swap(stGloryUser* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(areacode_, other->areacode_);
    std::swap(name_, other->name_);
    std::swap(killnum_, other->killnum_);
    std::swap(evenkillnum_, other->evenkillnum_);
    std::swap(totalkillnum_, other->totalkillnum_);
    std::swap(gloryval_, other->gloryval_);
    std::swap(gloryactiontime_, other->gloryactiontime_);
    std::swap(prostatednum_, other->prostatednum_);
    std::swap(prostatetime_, other->prostatetime_);
    std::swap(normalid_, other->normalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGloryUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGloryUser_descriptor_;
  metadata.reflection = stGloryUser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterResBattle_ProtoModID_descriptor_;
}
bool stEnterResBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterResBattle_ProtoModID stEnterResBattle::ModID;
const stEnterResBattle_ProtoModID stEnterResBattle::ProtoModID_MIN;
const stEnterResBattle_ProtoModID stEnterResBattle::ProtoModID_MAX;
const int stEnterResBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterResBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterResBattle_ProtoFunID_descriptor_;
}
bool stEnterResBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterResBattle_ProtoFunID stEnterResBattle::FunID;
const stEnterResBattle_ProtoFunID stEnterResBattle::ProtoFunID_MIN;
const stEnterResBattle_ProtoFunID stEnterResBattle::ProtoFunID_MAX;
const int stEnterResBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEnterResBattle::kCharIdFieldNumber;
const int stEnterResBattle::kCopyMapLevelFieldNumber;
const int stEnterResBattle::kGuildIdFieldNumber;
const int stEnterResBattle::kSelfFieldNumber;
#endif  // !_MSC_VER

stEnterResBattle::stEnterResBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterResBattle::InitAsDefaultInstance() {
  self_ = const_cast< ::PubGame::stGloryUser*>(&::PubGame::stGloryUser::default_instance());
}

stEnterResBattle::stEnterResBattle(const stEnterResBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterResBattle::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  copymaplevel_ = 0u;
  guildid_ = 0u;
  self_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterResBattle::~stEnterResBattle() {
  SharedDtor();
}

void stEnterResBattle::SharedDtor() {
  if (this != default_instance_) {
    delete self_;
  }
}

void stEnterResBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterResBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterResBattle_descriptor_;
}

const stEnterResBattle& stEnterResBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stEnterResBattle* stEnterResBattle::default_instance_ = NULL;

stEnterResBattle* stEnterResBattle::New() const {
  return new stEnterResBattle;
}

void stEnterResBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    copymaplevel_ = 0u;
    guildid_ = 0u;
    if (has_self()) {
      if (self_ != NULL) self_->::PubGame::stGloryUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterResBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copyMapLevel;
        break;
      }

      // optional uint32 copyMapLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copyMapLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymaplevel_)));
          set_has_copymaplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildId;
        break;
      }

      // optional uint32 guildId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_self;
        break;
      }

      // optional .PubGame.stGloryUser self = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterResBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 copyMapLevel = 2;
  if (has_copymaplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymaplevel(), output);
  }

  // optional uint32 guildId = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guildid(), output);
  }

  // optional .PubGame.stGloryUser self = 4;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->self(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterResBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 copyMapLevel = 2;
  if (has_copymaplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymaplevel(), target);
  }

  // optional uint32 guildId = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guildid(), target);
  }

  // optional .PubGame.stGloryUser self = 4;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->self(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterResBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 copyMapLevel = 2;
    if (has_copymaplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymaplevel());
    }

    // optional uint32 guildId = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional .PubGame.stGloryUser self = 4;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterResBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterResBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterResBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterResBattle::MergeFrom(const stEnterResBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_copymaplevel()) {
      set_copymaplevel(from.copymaplevel());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_self()) {
      mutable_self()->::PubGame::stGloryUser::MergeFrom(from.self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterResBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterResBattle::CopyFrom(const stEnterResBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterResBattle::IsInitialized() const {

  return true;
}

void stEnterResBattle::Swap(stEnterResBattle* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(copymaplevel_, other->copymaplevel_);
    std::swap(guildid_, other->guildid_);
    std::swap(self_, other->self_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterResBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterResBattle_descriptor_;
  metadata.reflection = stEnterResBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleUserData_ProtoModID_descriptor_;
}
bool stSynResBattleUserData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleUserData_ProtoModID stSynResBattleUserData::ModID;
const stSynResBattleUserData_ProtoModID stSynResBattleUserData::ProtoModID_MIN;
const stSynResBattleUserData_ProtoModID stSynResBattleUserData::ProtoModID_MAX;
const int stSynResBattleUserData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynResBattleUserData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleUserData_ProtoFunID_descriptor_;
}
bool stSynResBattleUserData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleUserData_ProtoFunID stSynResBattleUserData::FunID;
const stSynResBattleUserData_ProtoFunID stSynResBattleUserData::ProtoFunID_MIN;
const stSynResBattleUserData_ProtoFunID stSynResBattleUserData::ProtoFunID_MAX;
const int stSynResBattleUserData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynResBattleUserData::kUserFieldNumber;
#endif  // !_MSC_VER

stSynResBattleUserData::stSynResBattleUserData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynResBattleUserData::InitAsDefaultInstance() {
  user_ = const_cast< ::PubGame::stGloryUser*>(&::PubGame::stGloryUser::default_instance());
}

stSynResBattleUserData::stSynResBattleUserData(const stSynResBattleUserData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynResBattleUserData::SharedCtor() {
  _cached_size_ = 0;
  user_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynResBattleUserData::~stSynResBattleUserData() {
  SharedDtor();
}

void stSynResBattleUserData::SharedDtor() {
  if (this != default_instance_) {
    delete user_;
  }
}

void stSynResBattleUserData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynResBattleUserData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleUserData_descriptor_;
}

const stSynResBattleUserData& stSynResBattleUserData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stSynResBattleUserData* stSynResBattleUserData::default_instance_ = NULL;

stSynResBattleUserData* stSynResBattleUserData::New() const {
  return new stSynResBattleUserData;
}

void stSynResBattleUserData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != NULL) user_->::PubGame::stGloryUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynResBattleUserData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PubGame.stGloryUser user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynResBattleUserData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PubGame.stGloryUser user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynResBattleUserData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PubGame.stGloryUser user = 1;
  if (has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynResBattleUserData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PubGame.stGloryUser user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynResBattleUserData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynResBattleUserData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynResBattleUserData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynResBattleUserData::MergeFrom(const stSynResBattleUserData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      mutable_user()->::PubGame::stGloryUser::MergeFrom(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynResBattleUserData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynResBattleUserData::CopyFrom(const stSynResBattleUserData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynResBattleUserData::IsInitialized() const {

  return true;
}

void stSynResBattleUserData::Swap(stSynResBattleUserData* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynResBattleUserData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynResBattleUserData_descriptor_;
  metadata.reflection = stSynResBattleUserData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleTop50_ProtoModID_descriptor_;
}
bool stSynResBattleTop50_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleTop50_ProtoModID stSynResBattleTop50::ModID;
const stSynResBattleTop50_ProtoModID stSynResBattleTop50::ProtoModID_MIN;
const stSynResBattleTop50_ProtoModID stSynResBattleTop50::ProtoModID_MAX;
const int stSynResBattleTop50::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynResBattleTop50_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleTop50_ProtoFunID_descriptor_;
}
bool stSynResBattleTop50_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleTop50_ProtoFunID stSynResBattleTop50::FunID;
const stSynResBattleTop50_ProtoFunID stSynResBattleTop50::ProtoFunID_MIN;
const stSynResBattleTop50_ProtoFunID stSynResBattleTop50::ProtoFunID_MAX;
const int stSynResBattleTop50::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynResBattleTop50::kDetailFieldNumber;
#endif  // !_MSC_VER

stSynResBattleTop50::stSynResBattleTop50()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynResBattleTop50::InitAsDefaultInstance() {
}

stSynResBattleTop50::stSynResBattleTop50(const stSynResBattleTop50& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynResBattleTop50::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynResBattleTop50::~stSynResBattleTop50() {
  SharedDtor();
}

void stSynResBattleTop50::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynResBattleTop50::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynResBattleTop50::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleTop50_descriptor_;
}

const stSynResBattleTop50& stSynResBattleTop50::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stSynResBattleTop50* stSynResBattleTop50::default_instance_ = NULL;

stSynResBattleTop50* stSynResBattleTop50::New() const {
  return new stSynResBattleTop50;
}

void stSynResBattleTop50::Clear() {
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynResBattleTop50::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PubGame.stGloryUserPart detail = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynResBattleTop50::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PubGame.stGloryUserPart detail = 1;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynResBattleTop50::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PubGame.stGloryUserPart detail = 1;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynResBattleTop50::ByteSize() const {
  int total_size = 0;

  // repeated .PubGame.stGloryUserPart detail = 1;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynResBattleTop50::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynResBattleTop50* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynResBattleTop50*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynResBattleTop50::MergeFrom(const stSynResBattleTop50& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynResBattleTop50::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynResBattleTop50::CopyFrom(const stSynResBattleTop50& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynResBattleTop50::IsInitialized() const {

  return true;
}

void stSynResBattleTop50::Swap(stSynResBattleTop50* other) {
  if (other != this) {
    detail_.Swap(&other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynResBattleTop50::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynResBattleTop50_descriptor_;
  metadata.reflection = stSynResBattleTop50_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleKing_ProtoModID_descriptor_;
}
bool stSynResBattleKing_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleKing_ProtoModID stSynResBattleKing::ModID;
const stSynResBattleKing_ProtoModID stSynResBattleKing::ProtoModID_MIN;
const stSynResBattleKing_ProtoModID stSynResBattleKing::ProtoModID_MAX;
const int stSynResBattleKing::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynResBattleKing_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleKing_ProtoFunID_descriptor_;
}
bool stSynResBattleKing_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynResBattleKing_ProtoFunID stSynResBattleKing::FunID;
const stSynResBattleKing_ProtoFunID stSynResBattleKing::ProtoFunID_MIN;
const stSynResBattleKing_ProtoFunID stSynResBattleKing::ProtoFunID_MAX;
const int stSynResBattleKing::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynResBattleKing::kClearFieldNumber;
const int stSynResBattleKing::kKingFieldNumber;
#endif  // !_MSC_VER

stSynResBattleKing::stSynResBattleKing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynResBattleKing::InitAsDefaultInstance() {
  king_ = const_cast< ::PubGame::stGloryUserDetail*>(&::PubGame::stGloryUserDetail::default_instance());
}

stSynResBattleKing::stSynResBattleKing(const stSynResBattleKing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynResBattleKing::SharedCtor() {
  _cached_size_ = 0;
  clear_ = false;
  king_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynResBattleKing::~stSynResBattleKing() {
  SharedDtor();
}

void stSynResBattleKing::SharedDtor() {
  if (this != default_instance_) {
    delete king_;
  }
}

void stSynResBattleKing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynResBattleKing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynResBattleKing_descriptor_;
}

const stSynResBattleKing& stSynResBattleKing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stSynResBattleKing* stSynResBattleKing::default_instance_ = NULL;

stSynResBattleKing* stSynResBattleKing::New() const {
  return new stSynResBattleKing;
}

void stSynResBattleKing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clear_ = false;
    if (has_king()) {
      if (king_ != NULL) king_->::PubGame::stGloryUserDetail::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynResBattleKing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool clear = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clear_)));
          set_has_clear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_king;
        break;
      }

      // optional .PubGame.stGloryUserDetail king = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_king:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_king()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynResBattleKing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool clear = 1;
  if (has_clear()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->clear(), output);
  }

  // optional .PubGame.stGloryUserDetail king = 2;
  if (has_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->king(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynResBattleKing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool clear = 1;
  if (has_clear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->clear(), target);
  }

  // optional .PubGame.stGloryUserDetail king = 2;
  if (has_king()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->king(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynResBattleKing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool clear = 1;
    if (has_clear()) {
      total_size += 1 + 1;
    }

    // optional .PubGame.stGloryUserDetail king = 2;
    if (has_king()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->king());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynResBattleKing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynResBattleKing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynResBattleKing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynResBattleKing::MergeFrom(const stSynResBattleKing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clear()) {
      set_clear(from.clear());
    }
    if (from.has_king()) {
      mutable_king()->::PubGame::stGloryUserDetail::MergeFrom(from.king());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynResBattleKing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynResBattleKing::CopyFrom(const stSynResBattleKing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynResBattleKing::IsInitialized() const {

  return true;
}

void stSynResBattleKing::Swap(stSynResBattleKing* other) {
  if (other != this) {
    std::swap(clear_, other->clear_);
    std::swap(king_, other->king_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynResBattleKing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynResBattleKing_descriptor_;
  metadata.reflection = stSynResBattleKing_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadResBattleInvite_ProtoModID_descriptor_;
}
bool stBroadResBattleInvite_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadResBattleInvite_ProtoModID stBroadResBattleInvite::ModID;
const stBroadResBattleInvite_ProtoModID stBroadResBattleInvite::ProtoModID_MIN;
const stBroadResBattleInvite_ProtoModID stBroadResBattleInvite::ProtoModID_MAX;
const int stBroadResBattleInvite::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBroadResBattleInvite_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadResBattleInvite_ProtoFunID_descriptor_;
}
bool stBroadResBattleInvite_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadResBattleInvite_ProtoFunID stBroadResBattleInvite::FunID;
const stBroadResBattleInvite_ProtoFunID stBroadResBattleInvite::ProtoFunID_MIN;
const stBroadResBattleInvite_ProtoFunID stBroadResBattleInvite::ProtoFunID_MAX;
const int stBroadResBattleInvite::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBroadResBattleInvite::kCharIdFieldNumber;
const int stBroadResBattleInvite::kNameFieldNumber;
const int stBroadResBattleInvite::kGuildIdFieldNumber;
const int stBroadResBattleInvite::kJobFieldNumber;
const int stBroadResBattleInvite::kSexFieldNumber;
const int stBroadResBattleInvite::kBattlePowerFieldNumber;
const int stBroadResBattleInvite::kVipLvFieldNumber;
const int stBroadResBattleInvite::kInstanceLvlFieldNumber;
#endif  // !_MSC_VER

stBroadResBattleInvite::stBroadResBattleInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBroadResBattleInvite::InitAsDefaultInstance() {
}

stBroadResBattleInvite::stBroadResBattleInvite(const stBroadResBattleInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBroadResBattleInvite::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  battlepower_ = 0u;
  viplv_ = 0u;
  instancelvl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadResBattleInvite::~stBroadResBattleInvite() {
  SharedDtor();
}

void stBroadResBattleInvite::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stBroadResBattleInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadResBattleInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadResBattleInvite_descriptor_;
}

const stBroadResBattleInvite& stBroadResBattleInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stBroadResBattleInvite* stBroadResBattleInvite::default_instance_ = NULL;

stBroadResBattleInvite* stBroadResBattleInvite::New() const {
  return new stBroadResBattleInvite;
}

void stBroadResBattleInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    guildid_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    battlepower_ = 0u;
    viplv_ = 0u;
    instancelvl_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadResBattleInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildId;
        break;
      }

      // optional uint32 guildId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_instanceLvl;
        break;
      }

      // optional uint32 instanceLvl = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceLvl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &instancelvl_)));
          set_has_instancelvl();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBroadResBattleInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 guildId = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guildid(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battlepower(), output);
  }

  // optional uint32 vipLv = 7;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->viplv(), output);
  }

  // optional uint32 instanceLvl = 8;
  if (has_instancelvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->instancelvl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBroadResBattleInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 guildId = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guildid(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battlepower(), target);
  }

  // optional uint32 vipLv = 7;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->viplv(), target);
  }

  // optional uint32 instanceLvl = 8;
  if (has_instancelvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->instancelvl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBroadResBattleInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 guildId = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 battlePower = 6;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 vipLv = 7;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 instanceLvl = 8;
    if (has_instancelvl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->instancelvl());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadResBattleInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadResBattleInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadResBattleInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadResBattleInvite::MergeFrom(const stBroadResBattleInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_instancelvl()) {
      set_instancelvl(from.instancelvl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadResBattleInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadResBattleInvite::CopyFrom(const stBroadResBattleInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadResBattleInvite::IsInitialized() const {

  return true;
}

void stBroadResBattleInvite::Swap(stBroadResBattleInvite* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(guildid_, other->guildid_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(viplv_, other->viplv_);
    std::swap(instancelvl_, other->instancelvl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadResBattleInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadResBattleInvite_descriptor_;
  metadata.reflection = stBroadResBattleInvite_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyInviteResBattle_ProtoModID_descriptor_;
}
bool stReplyInviteResBattle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyInviteResBattle_ProtoModID stReplyInviteResBattle::ModID;
const stReplyInviteResBattle_ProtoModID stReplyInviteResBattle::ProtoModID_MIN;
const stReplyInviteResBattle_ProtoModID stReplyInviteResBattle::ProtoModID_MAX;
const int stReplyInviteResBattle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyInviteResBattle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyInviteResBattle_ProtoFunID_descriptor_;
}
bool stReplyInviteResBattle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyInviteResBattle_ProtoFunID stReplyInviteResBattle::FunID;
const stReplyInviteResBattle_ProtoFunID stReplyInviteResBattle::ProtoFunID_MIN;
const stReplyInviteResBattle_ProtoFunID stReplyInviteResBattle::ProtoFunID_MAX;
const int stReplyInviteResBattle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplyInviteResBattle::kAgreeFieldNumber;
const int stReplyInviteResBattle::kCharIdFieldNumber;
const int stReplyInviteResBattle::kGuildIdFieldNumber;
const int stReplyInviteResBattle::kInviteIdFieldNumber;
const int stReplyInviteResBattle::kSelfFieldNumber;
#endif  // !_MSC_VER

stReplyInviteResBattle::stReplyInviteResBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplyInviteResBattle::InitAsDefaultInstance() {
  self_ = const_cast< ::PubGame::stGloryUser*>(&::PubGame::stGloryUser::default_instance());
}

stReplyInviteResBattle::stReplyInviteResBattle(const stReplyInviteResBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplyInviteResBattle::SharedCtor() {
  _cached_size_ = 0;
  agree_ = false;
  charid_ = 0u;
  guildid_ = 0u;
  inviteid_ = 0u;
  self_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplyInviteResBattle::~stReplyInviteResBattle() {
  SharedDtor();
}

void stReplyInviteResBattle::SharedDtor() {
  if (this != default_instance_) {
    delete self_;
  }
}

void stReplyInviteResBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplyInviteResBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyInviteResBattle_descriptor_;
}

const stReplyInviteResBattle& stReplyInviteResBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stReplyInviteResBattle* stReplyInviteResBattle::default_instance_ = NULL;

stReplyInviteResBattle* stReplyInviteResBattle::New() const {
  return new stReplyInviteResBattle;
}

void stReplyInviteResBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    agree_ = false;
    charid_ = 0u;
    guildid_ = 0u;
    inviteid_ = 0u;
    if (has_self()) {
      if (self_ != NULL) self_->::PubGame::stGloryUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplyInviteResBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool agree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional uint32 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guildId;
        break;
      }

      // optional uint32 guildId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_inviteId;
        break;
      }

      // optional uint32 inviteId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inviteId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inviteid_)));
          set_has_inviteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_self;
        break;
      }

      // optional .PubGame.stGloryUser self = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_self:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_self()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplyInviteResBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool agree = 1;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->agree(), output);
  }

  // optional uint32 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 guildId = 3;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->guildid(), output);
  }

  // optional uint32 inviteId = 4;
  if (has_inviteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->inviteid(), output);
  }

  // optional .PubGame.stGloryUser self = 5;
  if (has_self()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->self(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplyInviteResBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool agree = 1;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->agree(), target);
  }

  // optional uint32 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 guildId = 3;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->guildid(), target);
  }

  // optional uint32 inviteId = 4;
  if (has_inviteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->inviteid(), target);
  }

  // optional .PubGame.stGloryUser self = 5;
  if (has_self()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->self(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplyInviteResBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool agree = 1;
    if (has_agree()) {
      total_size += 1 + 1;
    }

    // optional uint32 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 guildId = 3;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional uint32 inviteId = 4;
    if (has_inviteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inviteid());
    }

    // optional .PubGame.stGloryUser self = 5;
    if (has_self()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->self());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplyInviteResBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplyInviteResBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplyInviteResBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplyInviteResBattle::MergeFrom(const stReplyInviteResBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_agree()) {
      set_agree(from.agree());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_inviteid()) {
      set_inviteid(from.inviteid());
    }
    if (from.has_self()) {
      mutable_self()->::PubGame::stGloryUser::MergeFrom(from.self());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplyInviteResBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplyInviteResBattle::CopyFrom(const stReplyInviteResBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplyInviteResBattle::IsInitialized() const {

  return true;
}

void stReplyInviteResBattle::Swap(stReplyInviteResBattle* other) {
  if (other != this) {
    std::swap(agree_, other->agree_);
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(inviteid_, other->inviteid_);
    std::swap(self_, other->self_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplyInviteResBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplyInviteResBattle_descriptor_;
  metadata.reflection = stReplyInviteResBattle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResBattleResChange_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleResChange_ProtoModID_descriptor_;
}
bool stResBattleResChange_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleResChange_ProtoModID stResBattleResChange::ModID;
const stResBattleResChange_ProtoModID stResBattleResChange::ProtoModID_MIN;
const stResBattleResChange_ProtoModID stResBattleResChange::ProtoModID_MAX;
const int stResBattleResChange::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResBattleResChange_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleResChange_ProtoFunID_descriptor_;
}
bool stResBattleResChange_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResBattleResChange_ProtoFunID stResBattleResChange::FunID;
const stResBattleResChange_ProtoFunID stResBattleResChange::ProtoFunID_MIN;
const stResBattleResChange_ProtoFunID stResBattleResChange::ProtoFunID_MAX;
const int stResBattleResChange::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResBattleResChange::kIsAddFieldNumber;
const int stResBattleResChange::kCharIdFieldNumber;
const int stResBattleResChange::kItemFieldNumber;
const int stResBattleResChange::kValFieldNumber;
const int stResBattleResChange::kDescFieldNumber;
#endif  // !_MSC_VER

stResBattleResChange::stResBattleResChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResBattleResChange::InitAsDefaultInstance() {
}

stResBattleResChange::stResBattleResChange(const stResBattleResChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResBattleResChange::SharedCtor() {
  _cached_size_ = 0;
  isadd_ = false;
  charid_ = 0u;
  item_ = 0u;
  val_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResBattleResChange::~stResBattleResChange() {
  SharedDtor();
}

void stResBattleResChange::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void stResBattleResChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResBattleResChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResBattleResChange_descriptor_;
}

const stResBattleResChange& stResBattleResChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stResBattleResChange* stResBattleResChange::default_instance_ = NULL;

stResBattleResChange* stResBattleResChange::New() const {
  return new stResBattleResChange;
}

void stResBattleResChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isadd_ = false;
    charid_ = 0u;
    item_ = 0u;
    val_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResBattleResChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isAdd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadd_)));
          set_has_isadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional uint32 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item;
        break;
      }

      // optional uint32 item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_val;
        break;
      }

      // optional uint32 val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }

      // optional string desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResBattleResChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isAdd = 1;
  if (has_isadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isadd(), output);
  }

  // optional uint32 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional uint32 item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item(), output);
  }

  // optional uint32 val = 4;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->val(), output);
  }

  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResBattleResChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isAdd = 1;
  if (has_isadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isadd(), target);
  }

  // optional uint32 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional uint32 item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item(), target);
  }

  // optional uint32 val = 4;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->val(), target);
  }

  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResBattleResChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isAdd = 1;
    if (has_isadd()) {
      total_size += 1 + 1;
    }

    // optional uint32 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item());
    }

    // optional uint32 val = 4;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

    // optional string desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResBattleResChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResBattleResChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResBattleResChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResBattleResChange::MergeFrom(const stResBattleResChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isadd()) {
      set_isadd(from.isadd());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResBattleResChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResBattleResChange::CopyFrom(const stResBattleResChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResBattleResChange::IsInitialized() const {

  return true;
}

void stResBattleResChange::Swap(stResBattleResChange* other) {
  if (other != this) {
    std::swap(isadd_, other->isadd_);
    std::swap(charid_, other->charid_);
    std::swap(item_, other->item_);
    std::swap(val_, other->val_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResBattleResChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResBattleResChange_descriptor_;
  metadata.reflection = stResBattleResChange_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendResBattle2Pub_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendResBattle2Pub_ProtoModID_descriptor_;
}
bool stSendResBattle2Pub_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendResBattle2Pub_ProtoModID stSendResBattle2Pub::ModID;
const stSendResBattle2Pub_ProtoModID stSendResBattle2Pub::ProtoModID_MIN;
const stSendResBattle2Pub_ProtoModID stSendResBattle2Pub::ProtoModID_MAX;
const int stSendResBattle2Pub::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendResBattle2Pub_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendResBattle2Pub_ProtoFunID_descriptor_;
}
bool stSendResBattle2Pub_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendResBattle2Pub_ProtoFunID stSendResBattle2Pub::FunID;
const stSendResBattle2Pub_ProtoFunID stSendResBattle2Pub::ProtoFunID_MIN;
const stSendResBattle2Pub_ProtoFunID stSendResBattle2Pub::ProtoFunID_MAX;
const int stSendResBattle2Pub::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendResBattle2Pub::kKingFieldNumber;
const int stSendResBattle2Pub::kDetailFieldNumber;
#endif  // !_MSC_VER

stSendResBattle2Pub::stSendResBattle2Pub()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendResBattle2Pub::InitAsDefaultInstance() {
  king_ = const_cast< ::PubGame::stGloryUserDetail*>(&::PubGame::stGloryUserDetail::default_instance());
}

stSendResBattle2Pub::stSendResBattle2Pub(const stSendResBattle2Pub& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendResBattle2Pub::SharedCtor() {
  _cached_size_ = 0;
  king_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendResBattle2Pub::~stSendResBattle2Pub() {
  SharedDtor();
}

void stSendResBattle2Pub::SharedDtor() {
  if (this != default_instance_) {
    delete king_;
  }
}

void stSendResBattle2Pub::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendResBattle2Pub::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendResBattle2Pub_descriptor_;
}

const stSendResBattle2Pub& stSendResBattle2Pub::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PubGame_2eproto();
  return *default_instance_;
}

stSendResBattle2Pub* stSendResBattle2Pub::default_instance_ = NULL;

stSendResBattle2Pub* stSendResBattle2Pub::New() const {
  return new stSendResBattle2Pub;
}

void stSendResBattle2Pub::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_king()) {
      if (king_ != NULL) king_->::PubGame::stGloryUserDetail::Clear();
    }
  }
  detail_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendResBattle2Pub::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PubGame.stGloryUserDetail king = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_king()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        break;
      }

      // repeated .PubGame.stGloryUserDetail detail = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_detail;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendResBattle2Pub::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PubGame.stGloryUserDetail king = 1;
  if (has_king()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->king(), output);
  }

  // repeated .PubGame.stGloryUserDetail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->detail(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendResBattle2Pub::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PubGame.stGloryUserDetail king = 1;
  if (has_king()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->king(), target);
  }

  // repeated .PubGame.stGloryUserDetail detail = 2;
  for (int i = 0; i < this->detail_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->detail(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendResBattle2Pub::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PubGame.stGloryUserDetail king = 1;
    if (has_king()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->king());
    }

  }
  // repeated .PubGame.stGloryUserDetail detail = 2;
  total_size += 1 * this->detail_size();
  for (int i = 0; i < this->detail_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->detail(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendResBattle2Pub::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendResBattle2Pub* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendResBattle2Pub*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendResBattle2Pub::MergeFrom(const stSendResBattle2Pub& from) {
  GOOGLE_CHECK_NE(&from, this);
  detail_.MergeFrom(from.detail_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_king()) {
      mutable_king()->::PubGame::stGloryUserDetail::MergeFrom(from.king());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendResBattle2Pub::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendResBattle2Pub::CopyFrom(const stSendResBattle2Pub& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendResBattle2Pub::IsInitialized() const {

  return true;
}

void stSendResBattle2Pub::Swap(stSendResBattle2Pub* other) {
  if (other != this) {
    std::swap(king_, other->king_);
    detail_.Swap(&other->detail_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendResBattle2Pub::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendResBattle2Pub_descriptor_;
  metadata.reflection = stSendResBattle2Pub_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PubGame

// @@protoc_insertion_point(global_scope)
