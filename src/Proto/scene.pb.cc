// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Info {

namespace {

const ::google::protobuf::Descriptor* Serial_SceneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Serial_SceneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Serial_SceneInfo_posObsData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Serial_SceneInfo_posObsData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Serial_SceneInfo_posEnvData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Serial_SceneInfo_posEnvData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Serial_EObstacle_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Serial_EEnviroment_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Serial_EGameUnit_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_scene_2eproto() {
  protobuf_AddDesc_scene_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "scene.proto");
  GOOGLE_CHECK(file != NULL);
  Serial_SceneInfo_descriptor_ = file->message_type(0);
  static const int Serial_SceneInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo, nx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo, ny_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo, obstacle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo, enviroment_),
  };
  Serial_SceneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Serial_SceneInfo_descriptor_,
      Serial_SceneInfo::default_instance_,
      Serial_SceneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Serial_SceneInfo));
  Serial_SceneInfo_posObsData_descriptor_ = Serial_SceneInfo_descriptor_->nested_type(0);
  static const int Serial_SceneInfo_posObsData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo_posObsData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo_posObsData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo_posObsData, value_),
  };
  Serial_SceneInfo_posObsData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Serial_SceneInfo_posObsData_descriptor_,
      Serial_SceneInfo_posObsData::default_instance_,
      Serial_SceneInfo_posObsData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo_posObsData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo_posObsData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Serial_SceneInfo_posObsData));
  Serial_SceneInfo_posEnvData_descriptor_ = Serial_SceneInfo_descriptor_->nested_type(1);
  static const int Serial_SceneInfo_posEnvData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo_posEnvData, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo_posEnvData, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo_posEnvData, value_),
  };
  Serial_SceneInfo_posEnvData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Serial_SceneInfo_posEnvData_descriptor_,
      Serial_SceneInfo_posEnvData::default_instance_,
      Serial_SceneInfo_posEnvData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo_posEnvData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Serial_SceneInfo_posEnvData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Serial_SceneInfo_posEnvData));
  Serial_EObstacle_descriptor_ = file->enum_type(0);
  Serial_EEnviroment_descriptor_ = file->enum_type(1);
  Serial_EGameUnit_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_scene_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Serial_SceneInfo_descriptor_, &Serial_SceneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Serial_SceneInfo_posObsData_descriptor_, &Serial_SceneInfo_posObsData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Serial_SceneInfo_posEnvData_descriptor_, &Serial_SceneInfo_posEnvData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_scene_2eproto() {
  delete Serial_SceneInfo::default_instance_;
  delete Serial_SceneInfo_reflection_;
  delete Serial_SceneInfo_posObsData::default_instance_;
  delete Serial_SceneInfo_posObsData_reflection_;
  delete Serial_SceneInfo_posEnvData::default_instance_;
  delete Serial_SceneInfo_posEnvData_reflection_;
}

void protobuf_AddDesc_scene_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013scene.proto\022\004Info\"\256\002\n\020Serial_SceneInfo"
    "\022\n\n\002nX\030\001 \001(\r\022\n\n\002nY\030\002 \001(\r\0223\n\010obstacle\030\003 \003"
    "(\0132!.Info.Serial_SceneInfo.posObsData\0225\n"
    "\nenviroment\030\004 \003(\0132!.Info.Serial_SceneInf"
    "o.posEnvData\032I\n\nposObsData\022\t\n\001x\030\001 \001(\r\022\t\n"
    "\001y\030\002 \001(\r\022%\n\005value\030\003 \001(\0162\026.Info.Serial_EO"
    "bstacle\032K\n\nposEnvData\022\t\n\001x\030\001 \001(\r\022\t\n\001y\030\002 "
    "\001(\r\022\'\n\005value\030\003 \001(\0162\030.Info.Serial_EEnviro"
    "ment*D\n\020Serial_EObstacle\022\010\n\004Move\020\001\022\t\n\005Sk"
    "ill\020\002\022\013\n\007Dynamic\020\004\022\016\n\nDecoration\020\010*h\n\022Se"
    "rial_EEnviroment\022\n\n\006Desert\020\001\022\n\n\006Forest\020\002"
    "\022\t\n\005Plain\020\004\022\013\n\007Moutain\020\010\022\t\n\005Ocean\020\020\022\014\n\010B"
    "uilding\020 \022\t\n\005Floor\020@*)\n\020Serial_EGameUnit"
    "\022\t\n\005Store\020\001\022\n\n\006Portal\020\002", 543);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scene.proto", &protobuf_RegisterTypes);
  Serial_SceneInfo::default_instance_ = new Serial_SceneInfo();
  Serial_SceneInfo_posObsData::default_instance_ = new Serial_SceneInfo_posObsData();
  Serial_SceneInfo_posEnvData::default_instance_ = new Serial_SceneInfo_posEnvData();
  Serial_SceneInfo::default_instance_->InitAsDefaultInstance();
  Serial_SceneInfo_posObsData::default_instance_->InitAsDefaultInstance();
  Serial_SceneInfo_posEnvData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_scene_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_scene_2eproto {
  StaticDescriptorInitializer_scene_2eproto() {
    protobuf_AddDesc_scene_2eproto();
  }
} static_descriptor_initializer_scene_2eproto_;
const ::google::protobuf::EnumDescriptor* Serial_EObstacle_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Serial_EObstacle_descriptor_;
}
bool Serial_EObstacle_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Serial_EEnviroment_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Serial_EEnviroment_descriptor_;
}
bool Serial_EEnviroment_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Serial_EGameUnit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Serial_EGameUnit_descriptor_;
}
bool Serial_EGameUnit_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Serial_SceneInfo_posObsData::kXFieldNumber;
const int Serial_SceneInfo_posObsData::kYFieldNumber;
const int Serial_SceneInfo_posObsData::kValueFieldNumber;
#endif  // !_MSC_VER

Serial_SceneInfo_posObsData::Serial_SceneInfo_posObsData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Serial_SceneInfo_posObsData::InitAsDefaultInstance() {
}

Serial_SceneInfo_posObsData::Serial_SceneInfo_posObsData(const Serial_SceneInfo_posObsData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Serial_SceneInfo_posObsData::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  value_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Serial_SceneInfo_posObsData::~Serial_SceneInfo_posObsData() {
  SharedDtor();
}

void Serial_SceneInfo_posObsData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Serial_SceneInfo_posObsData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Serial_SceneInfo_posObsData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Serial_SceneInfo_posObsData_descriptor_;
}

const Serial_SceneInfo_posObsData& Serial_SceneInfo_posObsData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

Serial_SceneInfo_posObsData* Serial_SceneInfo_posObsData::default_instance_ = NULL;

Serial_SceneInfo_posObsData* Serial_SceneInfo_posObsData::New() const {
  return new Serial_SceneInfo_posObsData;
}

void Serial_SceneInfo_posObsData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
    value_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Serial_SceneInfo_posObsData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional .Info.Serial_EObstacle value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Info::Serial_EObstacle_IsValid(value)) {
            set_value(static_cast< ::Info::Serial_EObstacle >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Serial_SceneInfo_posObsData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional .Info.Serial_EObstacle value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Serial_SceneInfo_posObsData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional .Info.Serial_EObstacle value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Serial_SceneInfo_posObsData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional .Info.Serial_EObstacle value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Serial_SceneInfo_posObsData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Serial_SceneInfo_posObsData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Serial_SceneInfo_posObsData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Serial_SceneInfo_posObsData::MergeFrom(const Serial_SceneInfo_posObsData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Serial_SceneInfo_posObsData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Serial_SceneInfo_posObsData::CopyFrom(const Serial_SceneInfo_posObsData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Serial_SceneInfo_posObsData::IsInitialized() const {

  return true;
}

void Serial_SceneInfo_posObsData::Swap(Serial_SceneInfo_posObsData* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Serial_SceneInfo_posObsData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Serial_SceneInfo_posObsData_descriptor_;
  metadata.reflection = Serial_SceneInfo_posObsData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Serial_SceneInfo_posEnvData::kXFieldNumber;
const int Serial_SceneInfo_posEnvData::kYFieldNumber;
const int Serial_SceneInfo_posEnvData::kValueFieldNumber;
#endif  // !_MSC_VER

Serial_SceneInfo_posEnvData::Serial_SceneInfo_posEnvData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Serial_SceneInfo_posEnvData::InitAsDefaultInstance() {
}

Serial_SceneInfo_posEnvData::Serial_SceneInfo_posEnvData(const Serial_SceneInfo_posEnvData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Serial_SceneInfo_posEnvData::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  value_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Serial_SceneInfo_posEnvData::~Serial_SceneInfo_posEnvData() {
  SharedDtor();
}

void Serial_SceneInfo_posEnvData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Serial_SceneInfo_posEnvData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Serial_SceneInfo_posEnvData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Serial_SceneInfo_posEnvData_descriptor_;
}

const Serial_SceneInfo_posEnvData& Serial_SceneInfo_posEnvData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

Serial_SceneInfo_posEnvData* Serial_SceneInfo_posEnvData::default_instance_ = NULL;

Serial_SceneInfo_posEnvData* Serial_SceneInfo_posEnvData::New() const {
  return new Serial_SceneInfo_posEnvData;
}

void Serial_SceneInfo_posEnvData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0u;
    y_ = 0u;
    value_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Serial_SceneInfo_posEnvData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // optional uint32 y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional .Info.Serial_EEnviroment value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Info::Serial_EEnviroment_IsValid(value)) {
            set_value(static_cast< ::Info::Serial_EEnviroment >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Serial_SceneInfo_posEnvData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  // optional .Info.Serial_EEnviroment value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Serial_SceneInfo_posEnvData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // optional uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  // optional .Info.Serial_EEnviroment value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Serial_SceneInfo_posEnvData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // optional uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

    // optional .Info.Serial_EEnviroment value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Serial_SceneInfo_posEnvData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Serial_SceneInfo_posEnvData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Serial_SceneInfo_posEnvData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Serial_SceneInfo_posEnvData::MergeFrom(const Serial_SceneInfo_posEnvData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Serial_SceneInfo_posEnvData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Serial_SceneInfo_posEnvData::CopyFrom(const Serial_SceneInfo_posEnvData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Serial_SceneInfo_posEnvData::IsInitialized() const {

  return true;
}

void Serial_SceneInfo_posEnvData::Swap(Serial_SceneInfo_posEnvData* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Serial_SceneInfo_posEnvData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Serial_SceneInfo_posEnvData_descriptor_;
  metadata.reflection = Serial_SceneInfo_posEnvData_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Serial_SceneInfo::kNXFieldNumber;
const int Serial_SceneInfo::kNYFieldNumber;
const int Serial_SceneInfo::kObstacleFieldNumber;
const int Serial_SceneInfo::kEnviromentFieldNumber;
#endif  // !_MSC_VER

Serial_SceneInfo::Serial_SceneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Serial_SceneInfo::InitAsDefaultInstance() {
}

Serial_SceneInfo::Serial_SceneInfo(const Serial_SceneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Serial_SceneInfo::SharedCtor() {
  _cached_size_ = 0;
  nx_ = 0u;
  ny_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Serial_SceneInfo::~Serial_SceneInfo() {
  SharedDtor();
}

void Serial_SceneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Serial_SceneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Serial_SceneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Serial_SceneInfo_descriptor_;
}

const Serial_SceneInfo& Serial_SceneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

Serial_SceneInfo* Serial_SceneInfo::default_instance_ = NULL;

Serial_SceneInfo* Serial_SceneInfo::New() const {
  return new Serial_SceneInfo;
}

void Serial_SceneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    nx_ = 0u;
    ny_ = 0u;
  }
  obstacle_.Clear();
  enviroment_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Serial_SceneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 nX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nx_)));
          set_has_nx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nY;
        break;
      }

      // optional uint32 nY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ny_)));
          set_has_ny();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obstacle;
        break;
      }

      // repeated .Info.Serial_SceneInfo.posObsData obstacle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_obstacle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obstacle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_obstacle;
        if (input->ExpectTag(34)) goto parse_enviroment;
        break;
      }

      // repeated .Info.Serial_SceneInfo.posEnvData enviroment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_enviroment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_enviroment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_enviroment;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Serial_SceneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 nX = 1;
  if (has_nx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->nx(), output);
  }

  // optional uint32 nY = 2;
  if (has_ny()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ny(), output);
  }

  // repeated .Info.Serial_SceneInfo.posObsData obstacle = 3;
  for (int i = 0; i < this->obstacle_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->obstacle(i), output);
  }

  // repeated .Info.Serial_SceneInfo.posEnvData enviroment = 4;
  for (int i = 0; i < this->enviroment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->enviroment(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Serial_SceneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 nX = 1;
  if (has_nx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->nx(), target);
  }

  // optional uint32 nY = 2;
  if (has_ny()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ny(), target);
  }

  // repeated .Info.Serial_SceneInfo.posObsData obstacle = 3;
  for (int i = 0; i < this->obstacle_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->obstacle(i), target);
  }

  // repeated .Info.Serial_SceneInfo.posEnvData enviroment = 4;
  for (int i = 0; i < this->enviroment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->enviroment(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Serial_SceneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 nX = 1;
    if (has_nx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nx());
    }

    // optional uint32 nY = 2;
    if (has_ny()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ny());
    }

  }
  // repeated .Info.Serial_SceneInfo.posObsData obstacle = 3;
  total_size += 1 * this->obstacle_size();
  for (int i = 0; i < this->obstacle_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obstacle(i));
  }

  // repeated .Info.Serial_SceneInfo.posEnvData enviroment = 4;
  total_size += 1 * this->enviroment_size();
  for (int i = 0; i < this->enviroment_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->enviroment(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Serial_SceneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Serial_SceneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Serial_SceneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Serial_SceneInfo::MergeFrom(const Serial_SceneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  obstacle_.MergeFrom(from.obstacle_);
  enviroment_.MergeFrom(from.enviroment_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nx()) {
      set_nx(from.nx());
    }
    if (from.has_ny()) {
      set_ny(from.ny());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Serial_SceneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Serial_SceneInfo::CopyFrom(const Serial_SceneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Serial_SceneInfo::IsInitialized() const {

  return true;
}

void Serial_SceneInfo::Swap(Serial_SceneInfo* other) {
  if (other != this) {
    std::swap(nx_, other->nx_);
    std::swap(ny_, other->ny_);
    obstacle_.Swap(&other->obstacle_);
    enviroment_.Swap(&other->enviroment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Serial_SceneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Serial_SceneInfo_descriptor_;
  metadata.reflection = Serial_SceneInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Info

// @@protoc_insertion_point(global_scope)
